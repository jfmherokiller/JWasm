// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 113360;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([80,69,0,0,100,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,47,1,11,2,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,16,0,0,0,2,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,16,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,255,255,255,127,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,128], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([5,1,0,0,205,171,1,0,6,71,1,0,5,1,0,0,217,171,1,0,12,71,1,0,5,1,0,0,245,171,1,0,254,62,1,0,4,0,0,0,223,171,1,0,26,71,1,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,66,73,78,0,0,0,2,0,0,0,0,0,79,77,70,0,0,0,3,0,0,0,18,14,67,79,70,70,0,0,4,0,0,0,0,15,69,76,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,80,69,0,0,76,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,15,1,11,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,16,0,0,0,2,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,16,0,0,16,0,0,0,0,16,0,0,16,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,9,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,96,1,0,0,96,5,0,0,96,13,0,0,112,0,0,0,4,173,1,0,0,0,0,0,5,0,0,0,20,68,1,0,0,0,0,0,6,0,0,0,24,68,1,0,0,0,0,0,7,0,0,0,27,68,1,0,0,0,0,0,8,0,0,0,30,68,1,0,0,0,0,0,9,0,0,0,194,166,1,0,2,0,0,0,6,0,0,0,33,68,1,0,0,0,0,0,10,0,0,0,35,68,1,0,0,0,0,0,11,0,0,0,39,68,1,0,3,3,0,0,6,0,0,0,45,68,1,0,3,0,0,0,6,0,0,0,49,68,1,0,0,0,0,0,12,0,0,0,52,68,1,0,12,0,0,0,13,0,0,0,55,68,1,0,0,0,0,0,14,0,0,0,59,68,1,0,0,0,0,0,15,0,0,0,64,68,1,0,0,0,0,0,16,0,0,0,70,68,1,0,0,0,0,0,17,0,0,0,75,68,1,0,0,0,0,0,18,0,0,0,81,68,1,0,0,0,0,0,19,0,0,0,87,68,1,0,1,0,0,0,19,0,0,0,91,68,1,0,2,0,0,0,20,0,0,0,95,68,1,0,3,0,0,0,20,0,0,0,99,68,1,0,4,0,0,0,20,0,0,0,103,68,1,0,1,0,0,0,20,0,0,0,107,68,1,0,0,0,0,0,21,0,0,0,113,68,1,0,4,0,0,0,22,0,0,0,116,68,1,0,1,0,0,0,22,0,0,0,119,68,1,0,7,0,0,0,22,0,0,0,122,68,1,0,3,0,0,0,22,0,0,0,125,68,1,0,0,0,0,0,5,0,0,0,127,68,1,0,0,0,0,0,23,0,0,0,132,68,1,0,3,0,0,0,24,0,0,0,135,68,1,0,7,0,0,0,24,0,0,0,138,68,1,0,6,0,0,0,24,0,0,0,141,68,1,0,5,0,0,0,24,0,0,0,144,68,1,0,4,0,0,0,24,0,0,0,147,68,1,0,2,0,0,0,24,0,0,0,150,68,1,0,1,0,0,0,24,0,0,0,153,68,1,0,0,1,0,0,6,0,0,0,156,68,1,0,8,0,0,0,25,0,0,0,161,68,1,0,7,0,0,0,25,0,0,0,166,68,1,0,5,0,0,0,25,0,0,0,171,68,1,0,0,0,0,0,26,0,0,0,178,68,1,0,6,0,0,0,25,0,0,0,183,68,1,0,1,0,0,0,6,0,0,0,187,68,1,0,0,2,0,0,6,0,0,0,190,68,1,0,0,0,0,0,27,0,0,0,192,68,1,0,0,0,0,0,28,0,0,0,195,68,1,0,89,0,0,0,13,0,0,0,198,68,1,0,83,0,0,0,13,0,0,0,201,68,1,0,88,0,0,0,13,0,0,0,204,68,1,0,82,0,0,0,13,0,0,0,199,166,1,0,91,0,0,0,13,0,0,0,207,68,1,0,0,0,0,0,29,0,0,0,210,68,1,0,0,0,0,0,30,0,0,0,214,68,1,0,2,3,0,0,6,0,0,0,28,86,1,0,0,0,0,0,31,0,0,0,220,68,1,0,92,0,0,0,13,0,0,0,222,68,1,0,0,0,0,0,32,0,0,0,225,68,1,0,90,0,0,0,13,0,0,0,228,68,1,0,80,0,0,0,13,0,0,0,231,68,1,0,2,0,0,0,33,0,0,0,236,68,1,0,78,0,0,0,13,0,0,0,239,68,1,0,79,0,0,0,13,0,0,0,243,68,1,0,0,0,0,0,34,0,0,0,248,68,1,0,0,0,0,0,35,0,0,0,252,68,1,0,69,0,0,0,13,0,0,0,0,69,1,0,0,0,0,0,36,0,0,0,4,69,1,0,1,0,0,0,36,0,0,0,8,69,1,0,64,0,0,0,13,0,0,0,12,69,1,0,65,0,0,0,13,0,0,0,16,69,1,0,66,0,0,0,13,0,0,0,20,69,1,0,67,0,0,0,13,0,0,0,24,69,1,0,68,0,0,0,13,0,0,0,28,69,1,0,124,0,0,0,13,0,0,0,31,69,1,0,1,0,0,0,37,0,0,0,35,69,1,0,2,0,0,0,37,0,0,0,39,69,1,0,0,0,0,0,37,0,0,0,43,69,1,0,81,0,0,0,13,0,0,0,47,69,1,0,71,0,0,0,13,0,0,0,51,69,1,0,72,0,0,0,13,0,0,0,0,0,0,0,204,69,1,0,213,69,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4888);
/* memory initializer */ allocate([230,69,1,0,238,69,1,0,244,69,1,0,252,69,1,0,0,70,1,0,230,130,1,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,15,0,0,0,23,70,1,0,28,70,1,0,34,70,1,0,42,70,1,0,49,70,1,0,55,70,1,0,146,171,1,0,0,0,0,0,18,14,80,69,51,50,43,0,0,0,0,0,0,15,69,76,70,54,52,0,0,0,0,0,0,0,0,0,60,70,1,0,70,70,1,0,79,70,1,0,86,70,1,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,225,70,1,0,3,0,0,0,235,70,1,0,2,0,0,0,243,70,1,0,3,0,0,0,5,1,0,0,205,171,1,0,6,71,1,0,5,1,0,0,217,171,1,0,12,71,1,0,5,1,0,0,245,171,1,0,18,71,1,0,4,0,0,0,223,171,1,0,26,71,1,0,141,71,1,0,11,0,0,0,155,71,1,0,28,0,11,0,155,71,1,0,12,0,27,0,165,71,1,0,12,0,11,0,194,71,1,0,12,0,0,0,194,71,1,0,12,0,0,0,194,71,1,0,12,0,0,0,194,71,1,0,12,0,0,0,203,71,1,0,0,0,0,0,155,71,1,0,27,0,11,0,184,71,1,0,13,0,12,0,207,71,1,0,0,0,0,0,141,71,1,0,9,0,0,0,155,71,1,0,28,0,9,0,155,71,1,0,12,0,27,0,165,71,1,0,12,0,9,0,175,71,1,0,12,0,0,0,155,71,1,0,27,0,9,0,184,71,1,0,13,0,12,0,141,71,1,0,11,0,0,0,155,71,1,0,28,0,11,0,122,71,1,0,5,0,0,0,133,71,1,0,0,0,0,0,93,71,1,0,5,0,0,0,102,71,1,0,0,0,0,0,153,132,1,0,9,0,0,0,109,71,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,97,0,0,0,97,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,99,0,0,0,100,0,0,0,100,0,0,0,100,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,104], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8324);
/* memory initializer */ allocate([105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,0,0,0,0,9,0,0,0,17,0,0,0,99,0,0,0,2,0,0,0,3,0,0,0,75,0,0,0,76,0,0,0,10,0,0,0,11,0,0,0,83,0,0,0,84,0,0,0,18,0,0,0,19,0,0,0,91,0,0,0,92,0,0,0,100,0,0,0,101,0,0,0,107,0,0,0,108,0,0,0,9,0,0,0,11,0,0,0,12,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,8,1,0,114,0,0,0,1,0,0,0,200,8,1,0,115,0,0,0,2,0,0,0,206,8,1,0,116,0,0,0,3,0,0,0,212,8,1,0,117,0,0,0,4,0,0,0,218,8,1,0,118,0,0,0,5,0,1,0,0,0,0,0,119,0,0,0,6,0,0,0,224,8,1,0,120,0,0,0,146,88,1,0,151,88,1,0,156,88,1,0,162,88,1,0,168,88,1,0,174,88,1,0,180,88,1,0,185,88,1,0,193,88,1,0,198,88,1,0,203,88,1,0,210,88,1,0,217,88,1,0,224,88,1,0,228,88,1,0,234,88,1,0,240,88,1,0,246,88,1,0,253,88,1,0,6,89,1,0,15,89,1,0,24,89,1,0,30,89,1,0,38,89,1,0,46,89,1,0,54,89,1,0,58,89,1,0,63,89,1,0,68,89,1,0,75,89,1,0,83,89,1,0,89,89,1,0,96,89,1,0,103,89,1,0,112,89,1,0,179,130,1,0,122,89,1,0,129,89,1,0,134,89,1,0,140,89,1,0,144,89,1,0,149,89,1,0,17,173,1,0,156,89,1,0,158,89,1,0,166,89,1,0,174,89,1,0,181,89,1,0,189,89,1,0,195,89,1,0,204,89,1,0,212,89,1,0,1,90,1,0,24,90,1,0,80,90,1,0,89,90,1,0,218,90,1,0,225,90,1,0,22,91,1,0,43,91,1,0,123,91,1,0,158,91,1,0,232,91,1,0,241,91,1,0,0,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,94,1,0,180,94,1,0,236,94,1,0,8,95,1,0,173,95,1,0,179,95,1,0,187,95,1,0,199,95,1,0,208,95,1,0,218,95,1,0,226,95,1,0,244,95,1,0,250,95,1,0,10,96,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,17,173,1,0,16,96,1,0,50,96,1,0,17,173,1,0,17,173,1,0,81,96,1,0,112,96,1,0,148,96,1,0,205,96,1,0,254,96,1,0,44,97,1,0,75,97,1,0,112,97,1,0,139,97,1,0,173,97,1,0,210,97,1,0,249,97,1,0,13,98,1,0,50,98,1,0,72,98,1,0,106,98,1,0,133,98,1,0,169,98,1,0,182,98,1,0,224,98,1,0,255,98,1,0,39,99,1,0,68,99,1,0,115,99,1,0,143,99,1,0,201,99,1,0,233,99,1,0,11,100,1,0,39,100,1,0,66,100,1,0,112,100,1,0,147,100,1,0,165,100,1,0,185,100,1,0,199,100,1,0,225,100,1,0,252,100,1,0,20,101,1,0,38,101,1,0,67,101,1,0,114,101,1,0,133,101,1,0,177,101,1,0,197,101,1,0,234,101,1,0,252,101,1,0,29,102,1,0,64,102,1,0,109,102,1,0,160,102,1,0,201,102,1,0,236,102,1,0,0,103,1,0,24,103,1,0,57,103,1,0,82,103,1,0,106,103,1,0,124,103,1,0,151,103,1,0,178,103,1,0,215,103,1,0,239,103,1,0,33,104,1,0,69,104,1,0,101,104,1,0,156,104,1,0,179,104,1,0,216,104,1,0,3,105,1,0,25,105,1,0,48,105,1,0,75,105,1,0,113,105,1,0,136,105,1,0,165,105,1,0,189,105,1,0,221,105,1,0,244,105,1,0,2,106,1,0,30,106,1,0,57,106,1,0,83,106,1,0,115,106,1,0,141,106,1,0,174,106,1,0,194,106,1,0,210,106,1,0,225,106,1,0,10,107,1,0,47,107,1,0,80,107,1,0,117,107,1,0,153,107,1,0,193,107,1,0,241,107,1,0,29,108,1,0,52,108,1,0,85,108,1,0,128,108,1,0,154,108,1,0,169,108,1,0,191,108,1,0,223,108,1,0,7,109,1,0,28,109,1,0,69,109,1,0,105,109,1,0,150,109,1,0,191,109,1,0,216,109,1,0,253,109,1,0,40,110,1,0,71,110,1,0,99,110,1,0,149,110,1,0,177,110,1,0,201,110,1,0,220,110,1,0,7,111,1,0,39,111,1,0,69,111,1,0,99,111,1,0,140,111,1,0,171,111,1,0,214,111,1,0,6,112,1,0,48,112,1,0,86,112,1,0,118,112,1,0,150,112,1,0,187,112,1,0,210,112,1,0,250,112,1,0,32,113,1,0,69,113,1,0,93,113,1,0,113,113,1,0,156,113,1,0,193,113,1,0,226,113,1,0,255,113,1,0,15,114,1,0,67,114,1,0,91,114,1,0,128,114,1,0,164,114,1,0,198,114,1,0,238,114,1,0,6,115,1,0,51,115,1,0,80,115,1,0,117,115,1,0,141,115,1,0,188,115,1,0,206,115,1,0,241,115,1,0,18,116,1,0,81,116,1,0,17,173,1,0,108,116,1,0,169,116,1,0,197,116,1,0,236,116,1,0,31,117,1,0,67,117,1,0,100,117,1,0,135,117,1,0,193,117,1,0,242,117,1,0,19,118,1,0,53,118,1,0,102,118,1,0,141,118,1,0,181,118,1,0,225,118,1,0,254,118,1,0,21,119,1,0,38,119,1,0,86,119,1,0,121,119,1,0,143,119,1,0,174,119,1,0,191,119,1,0,232,119,1,0,251,119,1,0,31,120,1,0,67,120,1,0,113,120,1,0,143,120,1,0,185,120,1,0,208,120,1,0,240,120,1,0,12,121,1,0,53,121,1,0,91,121,1,0,121,121,1,0,155,121,1,0,200,121,1,0,238,121,1,0,11,122,1,0,51,122,1,0,78,122,1,0,115,122,1,0,128,122,1,0,157,122,1,0,177,122,1,0,211,122,1,0,250,122,1,0,26,123,1,0,66,123,1,0,112,123,1,0,144,123,1,0,188,123,1,0,216,123,1,0,12,124,1,0,65,124,1,0,103,124,1,0,129,124,1,0,164,124,1,0,187,124,1,0,219,124,1,0,11,125,1,0,49,125,1,0,61,125,1,0,97,125,1,0,126,125,1,0,181,125,1,0,219,125,1,0,19,126,1,0,59,126,1,0,82,126,1,0,126,126,1,0,149,126,1,0,182,126,1,0,219,126,1,0,10,127,1,0,37,127,1,0,65,127,1,0,112,127,1,0,154,127,1,0,184,127,1,0,215,127,1,0,1,128,1,0,32,128,1,0,57,128,1,0,96,128,1,0,141,128,1,0,173,128,1,0,195,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,128,1,0,241,128,1,0,248,128,1,0,0,129,1,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,65,129,1,0,136,0,0,0,73,129,1,0,137,0,0,0,83,129,1,0,138,0,0,0,88,129,1,0,139,0,0,0,95,129,1,0,140,0,0,0,102,129,1,0,141,0,0,0,111,129,1,0,142,0,0,0,122,129,1,0,143,0,0,0,135,129,1,0,144,0,0,0,144,129,1,0,145,0,0,0,155,129,1,0,146,0,0,0,160,129,1,0,147,0,0,0,25,171,1,0,148,0,0,0,167,129,1,0,149,0,0,0,178,129,1,0,148,0,0,0,188,129,1,0,150,0,0,0,200,129,1,0,148,0,0,0,207,129,1,0,151,0,0,0,214,129,1,0,152,0,0,0,227,129,1,0,153,0,0,0,235,129,1,0,154,0,0,0,240,129,1,0,155,0,0,0,249,129,1,0,156,0,0,0,2,130,1,0,157,0,0,0,11,130,1,0,158,0,0,0,21,130,1,0,159,0,0,0,28,130,1,0,160,0,0,0,35,130,1,0,161,0,0,0,43,130,1,0,162,0,0,0,54,130,1,0,163,0,0,0,64,130,1,0,164,0,0,0,67,130,1,0,165,0,0,0,73,130,1,0,166,0,0,0,77,130,1,0,167,0,0,0,91,130,1,0,168,0,0,0,97,130,1,0,169,0,0,0,107,130,1,0,170,0,0,0,116,130,1,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,130,1,0,241,130,1,0,14,131,1,0,13,0,0,0,21,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,11,0,0,0,12,0,0,0,10,0,0,0,17,0,0,0,19,0,0,0,20,0,0,0,18,0,0,0,9,0,0,0,12,0,0,0,10,0,0,0,11,0,0,0,3,0,0,0,2,0,0,0,18,0,0,0,19,0,0,0,9,0,0,0,11,0,0,0,12,0,0,0,100,0,0,0,101,0,0,0,107,0,0,0,108,0,0,0,161,132,1,0,64,133,1,0,177,132,1,0,58,133,1,0,0,0,0,0,0,0,0,0,0,0,0,0,129,0,0,0,1,0,0,0,0,0,0,2,1,1,0,0,1,0,0,0,0,0,1,2,1,0,0,0,1,0,0,0,0,0,2,2,1,0,0,0,1,0,0,0,0,0,3,2,1,0,0,0,1,0,0,0,0,0,4,2,1,0,0,0,1,0,0,0,0,0,5,2,1,0,0,0,1,0,0,0,0,0,6,2,1,0,0,0,1,0,0,0,0,0,7,2,130,0,0,0,2,0,0,0,0,0,0,2,2,0,0,0,2,0,0,0,0,0,1,2,2,2,0,0,2,0,0,0,0,0,2,2,2,0,0,0,34,0,0,0,0,0,3,2,2,0,0,0,2,0,0,0,0,0,4,2,2,0,0,0,98,0,0,0,0,0,5,2,2,0,0,0,34,0,0,0,0,0,6,2,2,0,0,0,34,0,0,0,0,0,7,2,132,0,0,0,36,0,0,0,48,0,0,2,4,0,0,0,36,0,0,0,48,0,1,2,4,0,0,0,36,0,0,0,48,0,2,2,4,0,0,0,36,0,0,0,48,0,3,2,4,0,0,0,100,0,0,0,48,0,4,2,4,0,0,0,100,0,0,0,48,0,5,2,4,0,0,0,36,0,0,0,48,0,6,2,4,0,0,0,36,0,0,0,48,0,7,2,0,8,0,0,0,0,0,0,0,0,0,2,0,8,0,0,0,0,0,0,0,0,1,2,0,8,0,0,0,0,0,0,0,0,2,2,0,8,0,0,0,0,0,0,0,0,3,2,0,16,0,0,0,0,0,0,48,0,4,2,0,16,0,0,0,0,0,0,48,0,5,2,0,32,0,0,10,0,0,0,2,0,0,2,16,0,0,0,8,0,0,0,0,1,0,2,16,0,0,0,8,0,0,0,0,1,1,2,16,0,0,0,8,0,0,0,0,1,2,2,16,0,0,0,8,0,0,0,0,1,3,2,16,0,0,0,8,0,0,0,0,1,4,2,16,0,0,0,8,0,0,0,0,1,5,2,16,0,0,0,8,0,0,0,0,1,6,2,16,0,0,0,8,0,0,0,0,1,7,2,32,0,0,0,16,0,0,0,0,4,0,2,32,0,0,0,16,0,0,0,0,4,1,2,32,0,0,0,16,0,0,0,0,4,2,2,32,0,0,0,16,0,0,0,0,4,3,2,32,0,0,0,16,0,0,0,0,4,4,2,32,0,0,0,16,0,0,0,0,4,5,2,32,0,0,0,16,0,0,0,0,4,6,2,32,0,0,0,16,0,0,0,0,4,7,2,64,0,0,0,32,0,0,0,0,128,0,2,64,0,0,0,32,0,0,0,0,128,1,2,64,0,0,0,32,0,0,0,0,128,2,2,64,0,0,0,32,0,0,0,0,128,3,2,64,0,0,0,32,0,0,0,0,128,4,2,64,0,0,0,32,0,0,0,0,128,5,2,64,0,0,0,32,0,0,0,0,128,6,2,64,0,0,0,32,0,0,0,0,128,7,2,0,4,0,0,0,0,0,0,48,0,0,2,0,4,0,0,0,0,0,0,48,0,2,2,0,4,0,0,0,0,0,0,48,0,3,2,0,4,0,0,0,0,0,0,80,0,4,2,0,4,0,0,0,0,0,0,48,0,16,2,0,4,0,0,0,0,0,0,48,0,17,2,0,4,0,0,0,0,0,0,48,0,18,2,0,4,0,0,0,0,0,0,48,0,19,2,0,4,0,0,0,0,0,0,48,0,22,2,0,4,0,0,0,0,0,0,48,0,23,2,0,4,0,0,0,0,0,0,64,0,35,2,0,4,0,0,0,0,0,0,64,0,36,2,0,4,0,0,0,0,0,0,64,0,37,2,0,4,0,0,0,0,0,0,48,0,38,2,0,4,0,0,0,0,0,0,48,0,39,2,1,0,0,0,1,0,0,0,112,0,4,2,1,0,0,0,1,0,0,0,112,0,5,2,1,0,0,0,1,0,0,0,112,0,6,2,1,0,0,0,1,0,0,0,112,0,7,2,1,0,0,0,1,0,0,0,112,0,8,2,1,0,0,0,1,0,0,0,112,0,9,2,1,0,0,0,1,0,0,0,112,0,10,2,1,0,0,0,1,0,0,0,112,0,11,2,1,0,0,0,1,0,0,0,112,0,12,2,1,0,0,0,1,0,0,0,112,0,13,2,1,0,0,0,1,0,0,0,112,0,14,2,1,0,0,0,1,0,0,0,112,0,15,2,2,0,0,0,2,0,0,0,112,0,8,2,2,0,0,0,2,0,0,0,112,0,9,2,2,0,0,0,2,0,0,0,112,0,10,2,2,0,0,0,2,0,0,0,112,0,11,2,2,0,0,0,2,0,0,0,112,0,12,2,2,0,0,0,2,0,0,0,112,0,13,2,2,0,0,0,2,0,0,0,112,0,14,2,2,0,0,0,2,0,0,0,112,0,15,2,4,0,0,0,36,0,0,0,112,0,8,2,4,0,0,0,36,0,0,0,112,0,9,2,4,0,0,0,36,0,0,0,112,0,10,2,4,0,0,0,36,0,0,0,112,0,11,2,4,0,0,0,36,0,0,0,112,0,12,2,4,0,0,0,36,0,0,0,112,0,13,2,4,0,0,0,36,0,0,0,112,0,14,2,4,0,0,0,36,0,0,0,112,0,15,2,136,0,0,0,40,0,0,0,112,0,0,2,8,0,0,0,40,0,0,0,112,0,1,2,8,0,0,0,40,0,0,0,112,0,2,2,8,0,0,0,40,0,0,0,112,0,3,2,8,0,0,0,104,0,0,0,112,0,4,2,8,0,0,0,104,0,0,0,112,0,5,2,8,0,0,0,40,0,0,0,112,0,6,2,8,0,0,0,40,0,0,0,112,0,7,2,8,0,0,0,40,0,0,0,112,0,8,2,8,0,0,0,40,0,0,0,112,0,9,2,8,0,0,0,40,0,0,0,112,0,10,2,8,0,0,0,40,0,0,0,112,0,11,2,8,0,0,0,40,0,0,0,112,0,12,2,8,0,0,0,40,0,0,0,112,0,13,2,8,0,0,0,40,0,0,0,112,0,14,2,8,0,0,0,40,0,0,0,112,0,15,2,32,0,0,0,16,0,0,0,112,0,8,2,32,0,0,0,16,0,0,0,112,0,9,2,32,0,0,0,16,0,0,0,112,0,10,2,32,0,0,0,16,0,0,0,112,0,11,2,32,0,0,0,16,0,0,0,112,0,12,2,32,0,0,0,16,0,0,0,112,0,13,2,32,0,0,0,16,0,0,0,112,0,14,2,32,0,0,0,16,0,0,0,112,0,15,2,64,0,0,0,32,0,0,0,112,128,8,2,64,0,0,0,32,0,0,0,112,128,9,2,64,0,0,0,32,0,0,0,112,128,10,2,64,0,0,0,32,0,0,0,112,128,11,2,64,0,0,0,32,0,0,0,112,128,12,2,64,0,0,0,32,0,0,0,112,128,13,2,64,0,0,0,32,0,0,0,112,128,14,2,64,0,0,0,32,0,0,0,112,128,15,2,0,4,0,0,0,0,0,0,112,0,8,2,0,0,0,0,254,0,0,0,0,0,0,6,0,0,0,0,254,0,0,0,0,0,64,6,0,0,0,0,254,0,0,0,0,0,1,6,0,0,0,0,254,0,0,0,0,0,65,6,0,0,0,0,254,0,0,0,0,0,3,6,0,0,0,0,254,0,0,0,0,0,67,6,0,0,0,0,254,0,0,0,0,0,35,6,0,0,0,0,254,0,0,0,0,0,5,6,0,0,0,0,254,0,0,0,0,0,7,6,0,0,0,0,254,0,0,0,0,0,71,6,0,0,0,0,254,0,0,0,0,0,39,6,0,0,0,0,254,0,0,0,0,0,9,6,0,0,0,0,254,0,0,0,0,0,41,6,0,0,0,0,254,0,0,0,0,0,15,6,0,0,0,0,254,0,0,0,0,128,31,6,0,0,0,0,254,0,0,0,0,0,129,6,0,0,0,0,254,0,0,0,0,0,130,6,0,0,0,0,0,0,0,0,48,0,129,6,0,0,0,0,1,0,0,0,48,0,129,6,0,0,0,0,0,0,0,0,48,0,130,6,0,0,0,0,1,0,0,0,48,0,130,6,0,0,0,0,254,0,0,0,80,1,7,6,0,0,0,0,254,0,0,0,96,4,15,6,255,1,0,0,12,0,0,0,0,0,14,4,35,0,0,0,1,0,0,0,0,0,6,4,33,1,0,0,5,0,0,0,0,0,6,4,33,0,0,0,3,0,0,0,0,0,6,4,2,0,0,0,8,0,0,0,0,0,5,4,18,0,0,0,15,0,0,0,0,0,3,4,18,0,0,0,16,0,0,0,0,0,3,4,35,0,0,0,0,0,0,0,0,0,6,4,35,1,0,0,4,0,0,0,0,0,6,4,35,0,0,0,2,0,0,0,0,0,6,4,50,0,0,0,7,0,0,0,0,0,5,4,65,0,0,0,20,0,0,0,0,0,3,4,51,0,0,0,6,0,0,0,0,0,5,4,255,1,0,0,11,0,0,0,0,0,14,4,2,0,0,0,9,0,0,0,0,0,5,4,2,0,0,0,10,0,0,0,0,0,5,4,2,0,0,0,17,0,0,0,0,0,14,4,19,0,0,0,13,0,0,0,0,0,3,4,19,0,0,0,14,0,0,0,0,0,3,4,1,0,0,0,18,0,0,0,0,0,5,4,255,1,0,0,19,0,0,0,0,0,5,4,65,0,0,0,21,0,0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,10,5,0,0,0,0,0,0,0,0,0,0,8,5,0,0,0,0,0,0,0,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,112,0,0,7,0,0,0,0,0,0,0,0,0,0,1,7,0,0,0,0,0,0,0,0,0,0,2,7,0,0,0,0,0,0,0,0,0,0,3,7,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,11,3,0,0,0,0,16,0,0,0,0,0,11,3,0,0,0,0,32,0,0,0,0,0,11,3,0,0,0,0,32,0,0,0,0,0,11,3,0,0,0,0,40,0,0,0,0,0,11,3,0,0,0,0,48,0,0,0,0,0,11,3,0,0,0,0,48,0,0,0,0,0,11,3,0,0,0,0,56,0,0,0,0,0,11,3,0,0,0,0,64,0,0,0,0,0,11,3,0,0,0,0,72,0,0,0,0,0,11,3,0,0,0,0,80,0,0,0,0,0,11,3,0,0,0,0,88,0,0,0,0,0,11,3,0,0,0,0,96,0,0,0,0,0,11,3,0,0,0,0,104,0,0,0,0,0,11,3,0,0,0,0,0,3,0,0,80,0,11,3,0,0,0,0,0,1,0,0,80,0,11,3,0,0,0,0,0,253,0,0,96,0,11,3,0,0,0,0,112,0,0,0,0,0,11,3,0,0,0,0,120,0,0,0,0,0,11,3,0,0,0,0,2,0,0,0,0,0,11,3,0,0,0,0,3,0,0,0,0,0,11,3,0,0,0,0,4,0,0,0,0,0,11,3,0,0,0,0,1,0,0,0,0,0,11,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,4,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,4,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,0,0,0,0,0,0,12,3,0,0,0,0,1,0,0,0,0,0,13,3,0,0,0,0,2,0,0,0,0,0,13,3,0,0,0,0,0,0,0,0,0,0,13,3,0,0,0,0,1,0,0,0,0,0,13,3,0,0,0,0,2,0,0,0,0,0,13,3,0,0,0,0,0,0,0,0,0,0,13,3,0,0,0,0,2,0,0,0,0,0,14,3,0,0,0,0,1,0,0,0,0,0,14,3,0,0,0,0,0,0,0,0,0,0,14,3,0,0,0,0,1,0,0,0,0,0,14,3,80,1,0,0,0,0,0,0,0,0,15,3,80,1,0,0,1,0,0,0,0,0,15,3,80,1,0,0,2,0,0,0,0,0,15,3,80,1,0,0,3,0,0,0,0,0,15,3,80,1,0,0,4,0,0,0,0,0,15,3,80,1,0,0,5,0,0,0,0,0,15,3,80,1,0,0,6,0,0,0,0,0,15,3,209,1,0,0,0,0,0,0,0,0,16,3,208,1,0,0,0,0,0,0,0,0,16,3,209,1,0,0,0,0,0,0,0,0,16,3,0,1,0,0,0,0,0,0,0,0,17,3,0,1,0,0,0,0,0,0,0,0,17,3,0,1,0,0,0,0,0,0,0,0,17,3,1,1,0,0,0,0,0,0,0,0,17,3,0,1,0,0,0,0,0,0,0,0,18,3,0,1,0,0,0,0,0,0,0,0,18,3,1,1,0,0,0,0,0,0,0,0,18,3,1,1,0,0,0,0,0,0,0,0,18,3,128,1,0,0,0,0,0,0,0,0,19,3,128,1,0,0,0,0,0,0,0,0,19,3,0,1,0,0,0,0,0,0,0,0,20,3,0,0,0,0,0,0,0,0,0,0,21,3,0,0,0,0,0,0,0,0,48,0,22,3,130,0,0,0,0,0,0,0,0,0,10,3,130,0,0,0,5,0,0,0,0,0,10,3,130,0,0,0,6,0,0,0,0,0,10,3,128,0,0,0,1,0,0,0,0,0,10,3,128,0,0,0,1,0,0,0,0,0,10,3,130,0,0,0,2,0,0,0,0,0,10,3,130,0,0,0,2,0,0,0,0,0,10,3,130,0,0,0,2,0,0,0,0,0,10,3,130,0,0,0,2,0,0,0,0,0,10,3,130,0,0,0,3,0,0,0,0,0,10,3,130,0,0,0,3,0,0,0,0,0,10,3,130,0,0,0,4,0,0,0,0,0,10,3,130,0,0,0,4,0,0,0,0,0,10,3,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,5,0,0,0,0,0,0,3,0,0,0,0,6,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,3,0,0,0,0,0,0,3,2,0,0,0,3,0,0,0,0,0,0,3,4,0,0,0,4,0,0,0,0,0,0,3,4,0,0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,5,0,0,0,0,0,0,3,0,0,0,0,6,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,2,0,0,0,0,0,0,3,2,0,0,0,3,0,0,0,0,0,0,3,2,0,0,0,3,0,0,0,0,0,0,3,4,0,0,0,4,0,0,0,0,0,0,3,4,0,0,0,4,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,1,3,4,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,1,3,8,0,0,0,0,0,0,0,0,0,4,3,2,0,0,0,0,0,0,0,0,0,7,3,0,0,0,0,0,0,0,0,0,0,7,3,0,0,0,0,0,0,0,0,0,0,7,3,0,0,0,0,0,0,0,0,0,0,2,3,36,0,0,0,0,0,0,0,0,0,3,3,10,0,0,0,0,0,0,0,0,0,5,3,10,0,0,0,0,0,0,0,0,0,5,3,10,0,0,0,0,0,0,0,0,0,6,3,10,0,0,0,0,0,0,0,0,0,23,3,10,0,0,0,0,0,0,0,0,0,24,3,8,0,0,0,132,0,0,0,0,0,8,3,8,0,0,0,134,0,0,0,0,0,8,3,8,0,0,0,136,0,0,0,0,0,8,3,8,0,0,0,139,0,0,0,0,0,8,3,8,0,0,0,140,0,0,0,0,0,8,3,8,0,0,0,143,0,0,0,0,0,8,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,0,0,0,0,0,0,0,0,112,0,25,3,8,0,0,0,0,0,0,0,0,0,26,3,8,0,0,0,0,0,0,0,0,0,26,3,8,0,0,0,0,0,0,0,0,0,26,3,8,0,0,0,0,0,0,0,0,0,27,3,8,0,0,0,0,0,0,0,0,0,28,3,0,0,0,0,0,0,0,0,0,0,29,3,0,0,0,0,0,0,0,0,0,0,30,3,0,0,0,0,0,0,0,0,0,0,30,3,0,0,0,0,0,0,0,0,0,0,31,3,0,0,0,0,0,0,0,0,0,0,33,3,8,0,0,0,0,0,0,0,0,0,32,3,152,1,0,0,0,0,0,0,0,0,34,3,24,0,0,0,0,0,0,0,0,0,35,3,0,0,0,0,0,0,0,0,0,0,36,3,152,0,0,0,0,0,0,0,0,0,44,3,208,1,0,0,0,0,0,0,0,0,37,3,0,0,0,0,0,0,0,0,0,0,38,3,0,0,0,0,0,0,0,0,0,0,39,3,0,0,0,0,0,0,0,0,0,0,39,3,88,0,0,0,0,0,0,0,0,0,40,3,8,0,0,0,0,0,0,0,0,0,41,3,8,0,0,0,0,0,0,0,0,0,42,3,0,0,0,0,0,0,0,0,0,0,43,3,0,0,0,0,0,0,0,0,0,0,45,3,36,0,0,0,0,0,0,0,0,0,46,3,144,1,0,0,0,0,0,0,0,0,9,3,10,0,0,0,0,0,0,0,0,0,47,3,208,0,0,0,0,0,0,0,0,0,49,3,32,0,0,0,0,0,0,0,0,0,50,3,0,0,0,0,0,0,0,0,0,0,51,3,0,0,0,0,0,0,0,0,0,0,52,3,0,0,0,0,0,0,0,0,0,0,53,3,0,0,0,0,0,0,0,0,0,0,53,3,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,8,0,0,8,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,2,0,0,0,0,0,0,128,0,0,0,0,0,7,0,0,0,0,0,128,0,0,0,0,0,135,0,0,0,0,0,128,0,0,0,0,0,0,15,0,0,0,0,128,0,0,0,14,0,0,0,0,0,0,0,0,2,0,0,128,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,4,0,0,0,0,0,2,0,0,0,0,0,15,0,0,0,0,0,0,2,0,0,0,135,0,0,0,0,0,0,0,135,0,128,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,4,32,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,8,16,0,0,0,0,0,0,0,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,16,32,0,0,0,0,0,0,0,0,0,0,32,64,0,0,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,14,0,0,1,0,0,0,0,0,0,0,0,14,0,0,135,0,0,0,0,0,0,0,0,14,14,0,0,0,0,0,0,0,16,0,0,0,0,0,135,0,0,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,16,0,0,8,0,0,0,0,16,0,0,0,16,0,0,9,0,0,0,0,16,0,0,0,16,0,0,10,0,0,0,0,16,0,0,0,16,0,0,12,0,0,0,0,16,0,0,0,12,0,0,12,0,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,16,0,0,0,32,0,0,8,0,0,0,0,16,0,0,0,32,0,0,16,0,0,0,0,0,0,0,15,128,0,0,0,0,0,0,0,0,0,0,15,0,2,0,0,0,0,0,0,0,0,0,15,0,0,7,0,0,0,0,0,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,15,15,0,0,0,0,0,0,0,0,0,0,15,0,24,0,0,0,0,0,0,15,0,0,0,0,0,7,0,0,0,0,0,15,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,15,0,0,15,0,0,0,0,2,0,0,2,2,0,0,0,0,0,0,0,6,0,0,0,0,0,7,0,0,0,0,0,8,0,0,0,0,0,7,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,0,0,8,0,0,0,4,0,0,4,0,0,0,0,1,0,0,0,0,0,7,0,0,0,0,0,12,0,0,0,16,0,0,0,0,0,0,0,12,0,0,0,1,0,0,1,0,0,0,0,12,0,0,0,14,0,0,15,0,0,0,0,12,0,0,0,0,4,0,0,0,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,12,0,0,0,64,0,0,0,0,0,0,0,12,0,0,0,32,0,0,4,0,0,0,0,12,0,0,0,32,0,0,8,0,0,0,0,4,0,0,0,4,0,0,4,0,0,0,0,4,0,0,4,4,0,0,0,0,0,0,0,12,0,0,0,0,0,0,16,0,0,0,0,8,0,0,0,8,0,0,8,0,0,0,0,8,0,0,8,8,0,0,0,0,0,0,0,14,0,0,0,128,0,0,0,0,0,0,0,14,0,0,0,0,0,7,0,0,0,0,0,14,0,0,0,0,0,1,0,0,0,0,0,14,0,0,0,0,0,135,0,0,0,0,0,14,0,0,0,0,0,0,196,0,0,0,0,14,0,0,0,0,0,0,15,0,0,0,0,14,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,14,0,0,15,0,0,0,0,14,0,0,0,15,0,0,15,0,0,0,0,14,0,0,0,0,24,0,0,0,0,0,0,12,0,0,12,16,0,0,0,0,0,0,0,12,0,0,12,32,0,0,0,0,0,0,0,0,4,0,0,12,0,0,0,0,0,0,0,15,0,0,15,0,1,0,0,0,0,0,0,15,0,0,15,0,0,7,0,0,0,0,0,15,0,0,15,0,0,135,0,0,0,0,0,15,0,0,15,0,0,33,0,0,0,0,0,0,24,0,0,0,0,0,15,0,0,0,0,0,24,0,0,14,0,0,0,0,0,0,0,0,32,0,0,0,96,0,0,0,0,0,0,0,96,0,0,0,32,0,0,0,0,0,0,32,0,0,0,0,0,135,0,0,0,0,0,32,0,0,0,0,0,0,4,0,0,0,0,32,0,0,0,0,0,0,8,0,0,0,0,32,0,0,0,0,0,0,16,0,0,0,0,32,0,0,0,16,0,0,0,0,0,0,0,32,0,0,0,16,0,0,8,0,0,0,0,32,0,0,0,12,0,0,12,0,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,32,0,0,0,32,0,0,2,0,0,0,0,32,0,0,0,32,0,0,4,0,0,0,0,32,0,0,0,32,0,0,8,0,0,0,0,32,0,0,0,32,0,0,16,0,0,0,0,32,0,0,0,32,0,0,17,0,0,0,0,32,0,0,0,32,0,0,18,0,0,0,0,32,0,0,0,32,0,0,20,0,0,0,0,32,0,0,0,32,0,0,24,0,0,0,0,32,0,0,0,64,0,0,32,0,0,0,0,64,0,0,0,0,0,0,4,0,0,0,0,64,0,0,0,0,0,0,8,0,0,0,0,64,0,0,0,0,0,0,16,0,0,0,0,64,0,0,0,0,0,0,32,0,0,0,0,64,0,0,0,64,0,0,32,0,0,0,0,0,0,0,2,32,0,0,0,2,0,0,0,0,0,0,4,32,0,0,0,2,0,0,0,16,0,0,0,16,0,0,8,2,0,0,0,16,0,0,0,4,0,0,2,2,0,0,0,4,0,0,4,32,0,0,0,2,0,0,0,8,0,0,8,32,0,0,0,2,0,0,0,12,0,0,0,16,0,0,0,2,0,0,0,12,0,0,0,32,0,0,0,2,0,0,0,12,0,0,1,32,0,0,0,2,0,0,0,14,0,0,0,15,0,0,15,4,0,0,0,14,0,0,0,15,0,0,15,2,0,0,0,14,0,0,14,14,0,0,0,1,0,0,0,14,0,0,14,14,0,0,0,2,0,0,0,32,0,0,0,0,0,135,0,2,0,0,0,32,0,0,0,4,0,0,2,2,0,0,0,32,0,0,0,4,0,0,1,2,0,0,0,32,0,0,0,4,0,0,4,2,0,0,0,32,0,0,0,8,0,0,8,2,0,0,0,32,0,0,0,32,0,0,0,2,0,0,0,32,0,0,0,32,0,0,4,5,0,0,0,32,0,0,0,32,0,0,8,5,0,0,0,32,0,0,0,32,0,0,16,5,0,0,0,32,0,0,0,32,0,0,4,2,0,0,0,32,0,0,0,32,0,0,8,2,0,0,0,32,0,0,0,32,0,0,16,2,0,0,0,32,0,0,0,32,0,0,16,3,0,0,0,0,0,0,16,64,0,0,0,2,0,0,0,32,0,0,0,32,0,0,16,3,0,0,0,32,0,0,0,64,0,0,0,2,0,0,0,64,0,0,0,32,0,0,16,2,0,0,0,64,0,0,0,64,0,0,32,2,0,0,0,64,0,0,0,64,0,0,32,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,2,4,0,0,0,0,0,0,2,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13364);
/* memory initializer */ allocate([10,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,4,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,2,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,11,4,0,0,0,0,0,0,10,4,0,0,0,0,0,0,10,4,0,0,0,0,0,0,8,4,0,0,0,0,0,0,8,4,0,0,0,0,0,0,11,4,0,0,0,0,0,0,9,4,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,2,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,2,0,0,0,0,0,0,6,2,0,0,0,0,0,0,6,2,0,0,0,0,0,0,7,2,0,0,0,0,0,0,7,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,3,2,0,0,0,0,0,0,4,2,0,0,0,0,0,0,5,2,0,0,0,0,0,0,5,2,0,0,0,0,0,0,5,2,0,0,0,0,0,0,5,2,0,0,0,0,0,0,6,2,0,0,0,0,0,0,6,2,0,0,0,0,0,0,6,2,0,0,0,0,0,0,5,2,0,0,0,0,0,0,4,2,0,0,0,0,0,0,4,2,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,10,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,5,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,7,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,12,8,0,0,0,0,0,0,12,8,0,0,0,0,0,0,14,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,11,8,0,0,0,0,0,0,12,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,11,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,11,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,4,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,11,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,10,8,0,0,0,0,0,0,11,8,0,0,0,0,0,0,5,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,6,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,7,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,189,0,0,0,77,1,0,0,151,1,0,0,2,4,0,0,245,4,0,0,66,0,0,0,12,1,0,0,211,1,0,0,149,1,0,0,162,1,0,0,184,0,0,0,131,1,0,0,160,4,0,0,185,0,0,0,132,1,0,0,161,4,0,0,0,0,0,0,0,0,0,0,149,4,0,0,1,0,0,0,9,0,0,0,154,4,0,0,147,0,0,0,66,1,0,0,168,4,0,0,146,0,0,0,60,1,0,0,171,4,0,0,117,0,0,0,3,1,0,0,162,4,0,0,118,0,0,0,4,1,0,0,164,4,0,0,119,0,0,0,5,1,0,0,166,4,0,0,224,2,0,0,110,4,0,0,176,4,0,0,225,2,0,0,111,4,0,0,177,4,0,0,0,0,0,0,25,171,1,0,34,171,1,0,1,172,1,0,17,172,1,0,6,172,1,0,39,171,1,0,44,171,1,0,50,172,1,0,43,172,1,0,211,171,1,0,50,171,1,0,57,171,1,0,64,171,1,0,67,171,1,0,74,171,1,0,11,172,1,0,80,171,1,0,146,171,1,0,86,171,1,0,91,171,1,0,99,171,1,0,107,171,1,0,114,171,1,0,121,171,1,0,129,171,1,0,134,171,1,0,140,171,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,172,1,0,211,171,1,0,63,172,1,0,68,172,1,0,228,171,1,0,237,171,1,0,245,171,1,0,205,171,1,0,211,171,1,0,217,171,1,0,223,171,1,0,228,171,1,0,237,171,1,0,245,171,1,0,43,172,1,0,211,171,1,0,43,172,1,0,43,172,1,0,50,172,1,0,50,172,1,0,43,172,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+23606);
/* memory initializer */ allocate([186,172,1,0,195,172,1,0,0,0,0,0,199,172,1,0,104,172,1,0,0,0,0,0,205,172,1,0,131,172,1,0,0,0,0,0,211,172,1,0,120,2,0,0,0,0,0,0,221,172,1,0,0,0,0,0,36,52,0,0,230,172,1,0,17,173,1,0,88,130,0,0,158,172,1,0,212,0,0,0,0,0,0,0,0,0,0,0,168,172,1,0,0,0,0,0,178,0,0,0,88,3,1,0,170,172,1,0,0,0,0,0,179,0,0,0,32,52,0,0,176,172,1,0,0,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,205,204,204,204,204,204,204,204,204,204,204,204,251,63,0,0,215,163,112,61,10,215,163,112,61,10,215,163,248,63,0,0,19,97,195,211,43,101,25,226,88,23,183,209,241,63,0,0,42,13,194,253,252,206,97,132,17,119,204,171,228,63,0,0,101,190,46,76,91,225,77,196,190,148,149,230,201,63,0,0,231,24,222,103,186,148,57,69,173,30,177,207,148,63,0,0,204,152,35,63,165,233,57,165,39,234,127,168,42,63,0,0,217,179,124,172,160,228,188,100,124,70,208,221,85,62,0,0,34,17,145,250,57,25,122,99,37,67,49,192,172,60,0,0,228,210,50,113,28,210,35,219,50,238,73,144,90,57,0,0,166,0,166,135,189,192,87,218,165,130,166,162,181,50,0,0,15,17,37,73,228,45,54,52,79,83,174,206,107,37,0,0,70,126,227,45,222,159,206,210,200,4,221,166,216,10,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,64,0,0,0,0,0,0,0,0,0,0,0,0,0,200,5,64,0,0,0,0,0,0,0,0,0,0,0,0,64,156,12,64,0,0,0,0,0,0,0,0,0,0,0,32,188,190,25,64,0,0,0,0,0,0,0,0,0,4,191,201,27,142,52,64,0,0,0,0,32,240,157,181,112,43,168,173,197,157,105,64,0,0,113,107,191,60,213,166,207,255,73,31,120,194,211,64,0,0,107,51,111,198,223,140,233,128,201,71,186,147,168,65,0,0,24,144,187,221,141,222,249,157,251,235,126,170,81,67,0,0,75,92,101,204,198,145,14,166,174,160,25,227,163,70,0,0,23,61,13,101,23,12,117,129,134,117,118,201,72,77,0,0,177,40,77,167,228,93,61,197,93,59,139,158,146,90,0,0,247,20,76,201,154,151,32,138,2,82,96,196,37,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,5,1,0,64,6,1,0,64,6,1,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,183,0,0,0,184,0,0,0,182,184,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,0,0,0,184,0,0,0,174,180,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,16,0,0,0,255,255,64,102,101,97,116,46,48,48,1,0,0,0,255,255,0,0,3,0,1,0,3,0,18,0,0,0,50,0,51,0,0,0,52,0,53,0,0,0,54,0,55,0,0,0,56,0,57,0,0,0,58,0,59,0,0,0,60,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,24,0,0,0,232,0,4,0,16,0,48,0,232,0,30,0,32,0,0,0,255,16,13,2,32,0,48,0,255,16,10,1,32,0,0,0,255,16,4,1,24,0,0,0,154,0,5,2,16,0,48,0,154,0,13,1,32,0,0,0,255,24,14,2,32,0,48,0,255,24,6,0,24,0,0,0,235,0,3,0,16,0,0,0,233,0,4,0,16,0,48,0,233,0,30,0,32,0,0,0,255,32,13,2,32,0,48,0,255,32,10,1,32,0,0,0,255,32,4,1,24,0,0,0,234,0,5,2,16,0,48,0,234,0,13,1,32,0,0,0,255,40,14,2,32,0,48,0,255,40,6,0,24,0,0,0,119,0,2,16,16,0,48,0,135,0,6,0,24,0,0,0,115,0,2,16,16,0,48,0,131,0,6,0,24,0,0,0,114,0,2,16,16,0,48,0,130,0,6,0,24,0,0,0,118,0,2,16,16,0,48,0,134,0,6,0,24,0,0,0,114,0,2,16,16,0,48,0,130,0,6,0,24,0,0,0,116,0,2,16,16,0,48,0,132,0,6,0,24,0,0,0,127,0,2,16,16,0,48,0,143,0,6,0,24,0,0,0,125,0,2,16,16,0,48,0,141,0,6,0,24,0,0,0,124,0,2,16,16,0,48,0,140,0,6,0,24,0,0,0,126,0,2,16,16,0,48,0,142,0,6,0,24,0,0,0,118,0,2,16,16,0,48,0,134,0,6,0,24,0,0,0,114,0,2,16,16,0,48,0,130,0,6,0,24,0,0,0,115,0,2,16,16,0,48,0,131,0,6,0,24,0,0,0,119,0,2,16,16,0,48,0,135,0,6,0,24,0,0,0,115,0,2,16,16,0,48,0,131,0,6,0,24,0,0,0,117,0,2,16,16,0,48,0,133,0,6,0,24,0,0,0,126,0,2,16,16,0,48,0,142,0,6,0,24,0,0,0,124,0,2,16,16,0,48,0,140,0,6,0,24,0,0,0,125,0,2,16,16,0,48,0,141,0,6,0,24,0,0,0,127,0,2,16,16,0,48,0,143,0,6,0,24,0,0,0,113,0,2,16,16,0,48,0,129,0,6,0,24,0,0,0,123,0,2,16,16,0,48,0,139,0,6,0,24,0,0,0,121,0,2,16,16,0,48,0,137,0,6,0,24,0,0,0,117,0,2,16,16,0,48,0,133,0,6,0,24,0,0,0,112,0,2,16,16,0,48,0,128,0,6,0,24,0,0,0,122,0,2,16,16,0,48,0,138,0,6,0,24,0,0,0,122,0,2,16,16,0,48,0,138,0,6,0,24,0,0,0,123,0,2,16,16,0,48,0,139,0,6,0,24,0,0,0,120,0,2,16,16,0,48,0,136,0,6,0,24,0,0,0,116,0,2,16,16,0,48,0,132,0,6,3,24,0,0,0,227,0,6,4,24,0,48,0,227,0,6,0,24,0,112,0,227,0,6,0,24,0,0,0,226,0,6,0,24,0,0,0,225,0,6,0,24,0,0,0,225,0,6,0,24,0,0,0,224,0,6,0,24,0,0,0,224,0,6,4,24,0,48,0,226,0,6,4,24,0,48,0,225,0,6,4,24,0,48,0,225,0,6,4,24,0,48,0,224,0,6,4,24,0,48,0,224,0,6,3,24,0,0,0,226,0,6,3,24,0,0,0,225,0,6,3,24,0,0,0,225,0,6,3,24,0,0,0,224,0,6,3,24,0,0,0,224,0,104,0,40,0,0,0,131,0,82,0,128,0,0,0,2,0,36,0,16,0,0,0,4,0,79,0,0,0,0,0,128,0,60,0,33,0,0,0,131,0,77,0,1,0,0,0,0,0,75,0,1,0,0,0,128,0,104,0,40,0,0,0,131,8,82,0,128,0,0,0,10,0,36,0,16,0,0,0,12,0,79,0,0,0,0,0,128,8,60,0,33,0,0,0,131,8,77,0,1,0,0,0,8,0,75,0,1,0,0,0,128,8,104,0,40,0,0,0,131,16,82,0,128,0,0,0,18,0,36,0,16,0,0,0,20,0,79,0,0,0,0,0,128,16,60,0,33,0,0,0,131,16,77,0,1,0,0,0,16,0,75,0,1,0,0,0,128,16,104,0,40,0,0,0,131,24,82,0,128,0,0,0,26,0,36,0,16,0,0,0,28,0,79,0,0,0,0,0,128,24,60,0,33,0,0,0,131,24,77,0,1,0,0,0,24,0,75,0,1,0,0,0,128,24,104,0,40,0,0,0,131,32,82,0,128,0,0,0,34,0,36,0,16,0,0,0,36,0,79,0,0,0,0,0,128,32,60,0,33,0,0,0,131,32,77,0,1,0,0,0,32,0,75,0,1,0,0,0,128,32,104,0,40,0,0,0,131,40,82,0,128,0,0,0,42,0,36,0,16,0,0,0,44,0,79,0,0,0,0,0,128,40,60,0,33,0,0,0,131,40,77,0,1,0,0,0,40,0,75,0,1,0,0,0,128,40,104,0,40,0,0,0,131,48,82,0,128,0,0,0,50,0,36,0,16,0,0,0,52,0,79,0,0,0,0,0,128,48,60,0,33,0,0,0,131,48,77,0,1,0,0,0,48,0,75,0,1,0,0,0,128,48,104,0,40,0,0,0,131,56,82,0,128,0,0,0,58,0,36,0,16,0,0,0,60,0,79,0,0,0,0,0,128,56,60,0,32,0,0,0,131,56,77,0,0,0,0,0,56,0,75,0,0,0,0,0,128,56,115,0,8,0,0,0,210,16,118,0,0,0,0,0,208,16,117,0,0,0,16,0,192,16,115,0,8,0,0,0,210,24,118,0,0,0,0,0,208,24,117,0,0,0,16,0,192,24,115,0,8,0,0,0,210,0,118,0,0,0,0,0,208,0,117,0,0,0,16,0,192,0,115,0,8,0,0,0,210,8,118,0,0,0,0,0,208,8,117,0,0,0,16,0,192,8,115,0,8,0,0,0,210,32,118,0,0,0,0,0,208,32,117,0,0,0,16,0,192,32,115,0,8,0,0,0,210,56,118,0,0,0,0,0,208,56,117,0,0,0,16,0,192,56,115,0,8,0,0,0,210,32,118,0,0,0,0,0,208,32,117,0,0,0,16,0,192,32,115,0,8,0,0,0,210,40,118,0,0,0,0,0,208,40,117,0,0,0,16,0,192,40,76,0,27,0,0,0,166,0,0,0,27,0,0,0,166,0,48,0,19,0,0,0,166,0,0,1,27,0,0,0,167,0,50,1,19,0,0,0,167,0,0,2,27,0,48,0,167,0,52,2,19,0,48,0,167,0,168,19,160,0,96,8,194,0,74,0,26,0,16,0,108,0,0,0,26,0,16,0,108,0,47,0,18,0,16,0,108,0,0,1,26,0,16,0,109,0,49,1,18,0,16,0,109,0,0,2,26,0,48,0,109,0,51,2,18,0,48,0,109,0,19,0,26,0,0,0,172,0,0,0,26,0,0,0,172,0,9,0,18,0,0,0,172,0,0,1,26,0,0,0,173,0,10,1,18,0,0,0,173,0,0,2,26,0,48,0,173,0,13,2,18,0,48,0,173,0,76,0,26,0,0,0,164,0,0,0,26,0,0,0,164,0,48,0,18,0,0,0,164,0,0,1,26,0,0,0,165,0,50,1,18,0,0,0,165,0,0,2,26,0,48,0,165,0,52,2,18,0,48,0,165,0,133,19,160,0,96,8,16,0,56,19,32,0,96,8,17,0,44,0,26,0,16,0,110,0,0,0,26,0,16,0,110,0,41,0,18,0,16,0,110,0,0,1,26,0,16,0,111,0,42,1,18,0,16,0,111,0,0,2,26,0,48,0,111,0,43,2,18,0,48,0,111,0,19,0,27,0,0,0,174,0,0,0,27,0,0,0,174,0,9,0,19,0,0,0,174,0,0,1,27,0,0,0,175,0,10,1,19,0,0,0,175,0,0,2,27,0,48,0,175,0,13,2,19,0,48,0,175,0,19,0,26,0,0,0,170,0,0,0,26,0,0,0,170,0,9,0,18,0,0,0,170,0,0,1,26,0,0,0,171,0,10,1,18,0,0,0,171,0,0,2,26,0,48,0,171,0,13,2,18,0,48,0,171,0,0,0,24,0,0,0,55,0,0,0,8,0,0,0,213,10,0,0,8,0,0,0,212,10,0,0,24,0,0,0,63,0,0,0,24,0,0,0,39,0,0,0,24,0,0,0,47,0,106,0,168,0,0,0,197,0,106,0,168,0,0,0,196,0,0,0,24,0,16,0,97,0,0,2,24,0,48,0,97,0,0,1,24,0,16,0,97,0,0,2,24,0,48,0,157,0,0,0,24,0,16,0,96,0,0,2,24,0,48,0,96,0,0,1,24,0,16,0,96,0,0,2,24,0,48,0,156,0,6,2,24,0,48,0,106,0,4,2,16,0,48,0,104,0,24,0,48,0,48,0,80,0,32,0,176,0,0,0,6,0,31,16,176,0,48,0,128,0,13,0,0,0,48,0,255,48,3,2,24,0,48,0,202,0,0,2,16,0,48,0,203,0,3,1,24,0,0,0,202,0,0,1,16,0,0,0,203,0,83,0,40,0,32,0,99,0,22,21,40,0,40,0,0,16,22,21,40,0,40,0,1,48,22,21,40,0,40,0,0,24,22,21,40,0,32,0,0,0,22,21,40,0,32,0,1,32,22,21,40,0,32,0,0,8,22,21,40,0,32,0,0,32,22,21,40,0,32,0,0,40,21,0,8,0,0,0,246,48,9,0,0,0,0,0,246,48,18,0,0,0,0,0,247,48,21,0,8,0,0,0,246,56,9,0,0,0,0,0,246,56,18,0,0,0,0,0,247,56,21,0,8,0,0,0,246,32,9,0,0,0,0,0,246,32,18,0,0,0,0,0,247,32,21,0,8,0,0,0,246,24,9,0,1,0,0,0,246,24,18,0,1,0,0,0,247,24,21,0,8,0,0,0,246,16,9,0,1,0,0,0,246,16,18,0,1,0,0,0,247,16,0,0,25,0,0,0,240,0,0,0,26,0,0,0,243,0,0,0,27,0,0,0,243,0,0,0,27,0,0,0,242,0,0,0,27,0,0,0,242,0,0,0,27,0,0,0,243,0,108,16,40,0,48,0,163,0,105,16,32,0,48,0,186,32,62,16,32,0,48,0,163,0,61,16,32,0,48,0,186,32,108,16,40,0,48,0,187,0,105,16,32,0,48,0,186,56,62,16,33,0,48,0,187,0,61,16,33,0,48,0,186,56,108,16,40,0,48,0,179,0,105,16,32,0,48,0,186,48,62,16,33,0,48,0,179,0,61,16,33,0,48,0,186,48,108,16,40,0,48,0,171,0,105,16,32,0,48,0,186,40,62,16,33,0,48,0,171,0,61,16,33,0,48,0,186,40,0,0,24,0,0,0,245,0,0,0,24,0,0,0,248,0,0,0,24,0,0,0,249,0,0,0,24,0,0,0,250,0,0,0,24,0,0,0,251,0,0,0,24,0,0,0,252,0,0,0,24,0,0,0,253,0,30,0,56,0,0,0,64,0,21,0,0,0,0,0,254,0,9,0,1,0,0,0,254,0,18,0,1,0,0,0,255,0,30,0,56,0,0,0,72,0,21,0,0,0,0,0,254,8,9,0,1,0,0,0,254,8,18,0,1,0,0,0,255,8,23,0,56,0,0,0,80,0,6,0,16,0,16,0,106,0,2,0,16,0,16,0,104,0,32,0,176,0,0,0,6,0,31,16,176,0,48,0,128,0,11,0,0,0,0,0,255,48,23,0,56,0,0,0,88,0,32,0,176,0,0,0,7,0,31,16,176,0,48,0,129,0,11,0,0,0,0,0,143,0,6,1,24,0,16,0,106,0,3,1,16,0,16,0,104,0,0,1,24,0,0,0,156,0,0,1,24,0,0,0,157,0,38,0,152,0,0,0,160,0,82,0,128,0,0,0,138,0,88,0,48,0,0,0,176,0,84,0,48,0,0,0,184,0,85,0,0,0,112,0,198,0,86,0,48,0,112,0,184,0,111,0,32,0,0,0,140,192,120,0,160,0,0,0,142,192,119,0,160,0,0,0,142,0,73,0,16,0,0,0,162,0,77,0,0,0,0,0,136,0,75,0,0,0,0,0,198,0,78,0,32,0,0,0,140,0,92,21,32,0,48,0,32,192,114,21,160,0,48,0,34,192,107,0,168,0,16,0,98,0,109,16,168,0,48,0,188,0,109,16,168,0,48,0,189,0,29,16,56,0,64,0,200,0,0,1,24,0,0,0,152,0,0,2,24,0,48,0,153,0,0,1,24,0,0,0,153,0,0,2,24,0,48,0,152,0,0,0,8,0,40,0,15,6,81,16,8,0,64,0,176,0,77,16,1,0,64,0,176,0,15,16,9,0,80,0,199,8,0,0,8,0,80,0,15,162,45,0,24,0,16,0,200,0,0,0,24,0,0,0,244,0,21,0,8,0,0,0,246,40,9,0,0,0,0,0,246,40,18,0,0,0,0,0,247,40,110,16,160,0,48,0,175,0,104,0,160,0,16,0,107,0,103,0,160,0,16,0,105,0,155,0,160,0,16,0,107,0,154,0,160,0,16,0,105,0,35,0,24,0,0,0,236,0,37,0,16,0,0,0,228,0,8,0,24,0,0,0,204,0,7,0,16,0,0,0,205,0,0,0,24,0,0,0,206,0,0,16,24,0,64,0,8,0,20,16,40,0,64,0,1,56,0,1,24,0,0,0,207,0,0,2,24,0,48,0,207,0,0,1,24,0,0,0,207,0,0,2,24,0,48,0,207,0,0,0,24,0,0,0,159,0,109,16,168,0,32,0,2,0,109,16,168,0,32,0,3,0,107,0,168,0,0,0,141,0,0,0,24,0,16,0,201,0,106,16,168,0,48,0,180,0,106,16,168,0,48,0,181,0,106,16,168,0,48,0,178,0,14,16,40,0,40,0,1,16,14,16,40,0,40,0,1,24,110,16,136,0,48,0,190,0,110,16,136,0,48,0,182,0,0,0,24,0,0,0,144,0,40,0,24,0,0,0,238,0,46,0,16,0,0,0,230,0,0,16,24,0,80,0,50,0,0,16,24,0,80,0,51,0,0,16,24,0,80,0,49,0,0,16,40,0,96,0,1,249,3,0,24,0,0,0,194,0,0,0,16,0,0,0,195,0,3,0,24,0,0,0,194,0,0,0,16,0,0,0,195,0,3,0,24,0,0,0,202,0,0,0,16,0,0,0,203,0,0,16,24,0,80,0,170,0,0,0,24,0,0,0,158,0,20,16,40,0,32,0,1,0,20,16,40,0,32,0,1,8,156,16,40,0,48,0,165,0,157,16,32,0,48,0,164,0,156,16,40,0,48,0,173,0,157,16,32,0,48,0,172,0,0,16,24,0,96,0,52,0,0,16,24,0,104,0,53,0,36,0,24,0,0,0,168,0,82,0,128,0,0,0,132,0,116,0,0,0,0,0,246,0,77,0,0,0,0,0,132,0,0,16,24,0,96,0,11,0,0,0,24,0,0,0,155,0,0,16,24,0,64,0,9,0,0,16,24,0,80,0,48,0,81,16,8,0,64,0,192,0,77,16,1,0,64,0,192,0,39,0,56,0,0,0,144,0,102,0,48,0,0,0,144,0,81,0,128,0,0,0,134,0,80,0,129,0,0,0,134,0,77,0,1,0,0,0,134,0,0,0,24,0,0,0,215,0,9,0,16,0,0,0,215,0,0,0,24,0,0,0,215,0,9,0,16,0,0,0,215,0,28,16,40,0,48,0,151,0,28,16,40,0,48,0,147,0,28,16,40,0,48,0,146,0,28,16,40,0,48,0,150,0,28,16,40,0,48,0,146,0,28,16,40,0,48,0,148,0,28,16,40,0,48,0,159,0,28,16,40,0,48,0,157,0,28,16,40,0,48,0,156,0,28,16,40,0,48,0,158,0,28,16,40,0,48,0,150,0,28,16,40,0,48,0,146,0,28,16,40,0,48,0,147,0,28,16,40,0,48,0,151,0,28,16,40,0,48,0,147,0,28,16,40,0,48,0,149,0,28,16,40,0,48,0,158,0,28,16,40,0,48,0,156,0,28,16,40,0,48,0,157,0,28,16,40,0,48,0,159,0,28,16,40,0,48,0,145,0,28,16,40,0,48,0,155,0,28,16,40,0,48,0,153,0,28,16,40,0,48,0,149,0,28,16,40,0,48,0,144,0,28,16,40,0,48,0,154,0,28,16,40,0,48,0,154,0,28,16,40,0,48,0,155,0,28,16,40,0,48,0,152,0,28,16,40,0,48,0,148,0,110,16,168,0,96,0,71,0,110,16,168,0,96,0,67,0,110,16,168,0,96,0,66,0,110,16,168,0,96,0,70,0,110,16,168,0,96,0,66,0,110,16,168,0,96,0,68,0,110,16,168,0,96,0,79,0,110,16,168,0,96,0,77,0,110,16,168,0,96,0,76,0,110,16,168,0,96,0,78,0,110,16,168,0,96,0,70,0,110,16,168,0,96,0,66,0,110,16,168,0,96,0,67,0,110,16,168,0,96,0,71,0,110,16,168,0,96,0,67,0,110,16,168,0,96,0,69,0,110,16,168,0,96,0,78,0,110,16,168,0,96,0,76,0,110,16,168,0,96,0,77,0,110,16,168,0,96,0,79,0,110,16,168,0,96,0,65,0,110,16,168,0,96,0,75,0,110,16,168,0,96,0,73,0,110,16,168,0,96,0,69,0,110,16,168,0,96,0,64,0,110,16,168,0,96,0,74,0,110,16,168,0,96,0,74,0,110,16,168,0,96,0,75,0,110,16,168,0,96,0,72,0,110,16,168,0,96,0,68,0,121,0,8,0,96,0,218,192,121,0,8,0,96,0,218,208,121,0,8,0,96,0,218,200,121,0,8,0,96,0,219,192,121,0,8,0,96,0,219,208,121,0,8,0,96,0,219,200,121,0,8,0,96,0,219,216,121,0,8,0,96,0,218,216,34,0,8,0,2,0,216,208,13,0,0,0,2,0,216,16,15,0,0,0,2,0,220,16,0,0,0,0,2,0,216,209,34,0,8,0,2,0,216,216,13,0,0,0,2,0,216,24,15,0,0,0,2,0,220,24,0,0,0,0,2,0,216,217,0,0,8,0,2,0,222,217,34,0,8,0,4,0,221,224,0,0,0,0,4,0,221,225,34,0,8,0,4,0,221,232,0,0,0,0,4,0,221,233,0,0,8,0,4,0,218,233,121,0,8,0,96,0,219,240,121,0,8,0,96,0,223,240,121,0,8,0,96,0,219,232,121,0,8,0,96,0,223,232,121,0,8,0,2,0,216,192,122,0,0,0,2,0,220,192,13,0,0,0,2,0,216,0,15,0,0,0,2,0,220,0,0,0,0,0,2,0,222,193,122,0,8,0,2,0,222,192,0,0,0,0,2,0,222,193,121,0,8,0,2,0,216,200,122,0,0,0,2,0,220,200,13,0,0,0,2,0,216,8,15,0,0,0,2,0,220,8,0,0,0,0,2,0,222,201,122,0,8,0,2,0,222,200,0,0,0,0,2,0,222,201,121,0,8,0,2,0,216,240,122,0,0,0,2,0,220,248,13,0,0,0,2,0,216,48,15,0,0,0,2,0,220,48,0,0,0,0,2,0,222,249,122,0,8,0,2,0,222,248,0,0,0,0,2,0,222,249,121,0,8,0,2,0,216,248,122,0,0,0,2,0,220,240,13,0,0,0,2,0,216,56,15,0,0,0,2,0,220,56,0,0,0,0,2,0,222,241,122,0,8,0,2,0,222,240,0,0,0,0,2,0,222,241,121,0,8,0,2,0,216,224,122,0,0,0,2,0,220,232,13,0,0,0,2,0,216,32,15,0,0,0,2,0,220,32,0,0,0,0,2,0,222,233,122,0,8,0,2,0,222,232,0,0,0,0,2,0,222,233,121,0,8,0,2,0,216,232,122,0,0,0,2,0,220,224,13,0,0,0,2,0,216,40,15,0,0,0,2,0,220,40,0,0,0,0,2,0,222,225,122,0,8,0,2,0,222,224,0,0,0,0,2,0,222,225,13,0,8,0,2,0,218,0,10,0,0,0,2,0,222,0,13,0,8,0,2,0,218,16,10,0,0,0,2,0,222,16,13,0,8,0,2,0,218,24,10,0,0,0,2,0,222,24,13,0,8,0,2,0,218,48,10,0,0,0,2,0,222,48,13,0,8,0,2,0,218,56,10,0,0,0,2,0,222,56,13,0,8,0,2,0,218,8,10,0,0,0,2,0,222,8,13,0,8,0,2,0,218,32,10,0,0,0,2,0,222,32,13,0,8,0,2,0,218,40,10,0,0,0,2,0,222,40,13,0,8,0,2,0,219,0,15,0,0,0,2,0,223,40,10,0,0,0,2,0,223,0,13,0,8,0,2,0,219,24,15,0,0,0,2,0,223,56,10,0,0,0,2,0,223,24,13,0,8,0,2,0,219,16,10,0,0,0,2,0,223,16,34,0,8,0,2,0,217,192,13,0,0,0,2,0,217,0,15,0,0,0,2,0,221,0,16,0,0,0,2,0,219,40,34,0,8,0,2,0,221,216,13,0,0,0,2,0,217,24,15,0,0,0,2,0,221,24,16,0,0,0,2,0,219,56,34,0,8,0,2,0,221,208,13,0,0,0,2,0,217,16,15,0,0,0,2,0,221,16,20,0,8,0,2,0,217,32,20,2,8,0,4,0,217,32,20,1,8,0,2,0,217,32,20,0,13,0,2,0,221,48,20,2,13,0,4,0,221,48,20,1,13,0,2,0,221,48,20,0,13,0,2,0,217,48,20,2,13,0,4,0,217,48,20,1,13,0,2,0,217,48,20,0,8,0,2,0,221,32,20,2,8,0,4,0,221,32,20,1,8,0,2,0,221,32,20,0,12,0,2,0,221,48,20,2,12,0,4,0,221,48,20,1,12,0,2,0,221,48,20,0,12,0,2,0,217,48,20,2,12,0,4,0,217,48,20,1,12,0,2,0,217,48,10,0,8,0,2,0,217,40,10,0,13,0,2,0,217,56,1,0,45,0,3,0,223,224,10,0,5,0,2,0,221,56,10,0,12,0,2,0,217,56,1,0,44,0,3,0,223,224,10,0,4,0,2,0,221,56,0,0,8,0,4,0,217,255,0,0,8,0,2,0,217,243,0,0,8,0,2,0,217,242,0,0,8,0,4,0,217,254,0,0,8,0,4,0,217,251,0,0,12,0,2,0,219,227,0,0,13,0,2,0,219,227,0,0,12,0,2,0,219,225,0,0,13,0,2,0,219,225,0,0,12,0,2,0,219,224,0,0,13,0,2,0,219,224,0,0,12,0,2,0,219,226,0,0,13,0,2,0,219,226,0,0,8,0,2,0,217,240,0,0,8,0,2,0,217,225,16,0,8,0,2,0,223,32,16,0,8,0,2,0,223,48,0,0,8,0,2,0,217,224,0,0,8,0,2,0,217,232,0,0,8,0,2,0,217,234,0,0,8,0,2,0,217,233,0,0,8,0,2,0,217,236,0,0,8,0,2,0,217,237,0,0,8,0,2,0,217,235,0,0,8,0,2,0,217,238,0,0,8,0,2,0,217,246,0,0,8,0,2,0,217,247,34,0,8,0,2,0,221,192,34,0,8,0,2,0,223,192,0,0,8,0,2,0,217,208,0,0,8,0,2,0,217,248,0,0,8,0,4,0,217,245,0,0,8,0,2,0,217,252,0,0,8,0,2,0,217,253,0,0,8,0,3,0,219,228,0,0,8,0,2,0,217,250,0,0,8,0,2,0,217,228,0,0,24,0,2,0,155,0,0,0,8,0,2,0,217,229,34,0,8,0,2,0,217,200,0,0,0,0,2,0,217,201,20,16,40,0,96,4,174,8,20,16,40,0,96,4,174,0,0,0,8,0,2,0,217,244,0,0,8,0,2,0,217,241,0,0,8,0,2,0,217,249,0,16,24,0,80,1,119,0,20,16,40,0,96,8,174,56,13,16,40,0,96,4,174,16,13,16,40,0,96,4,174,24,0,16,40,0,96,8,174,232,0,16,40,0,96,8,174,240,0,16,40,0,96,4,174,248,20,16,40,0,96,4,24,0,20,16,40,0,96,4,24,8,20,16,40,0,96,4,24,16,20,16,40,0,96,4,24,24,0,5,24,0,96,8,144,0,134,18,168,0,96,8,88,0,134,16,168,0,96,4,88,0,133,19,168,0,96,8,88,0,132,20,168,0,96,4,88,0,134,18,168,0,96,8,94,0,134,16,168,0,96,4,94,0,133,19,168,0,96,8,94,0,132,20,168,0,96,4,94,0,134,18,168,0,96,8,95,0,134,16,168,0,96,4,95,0,133,19,168,0,96,8,95,0,132,20,168,0,96,4,95,0,134,18,168,0,96,8,93,0,134,16,168,0,96,4,93,0,133,19,168,0,96,8,93,0,132,20,168,0,96,4,93,0,134,18,168,0,96,8,89,0,134,16,168,0,96,4,89,0,133,19,168,0,96,8,89,0,132,20,168,0,96,4,89,0,134,18,168,0,96,8,81,0,134,16,168,0,96,4,81,0,133,19,168,0,96,8,81,0,132,20,168,0,96,4,81,0,134,18,168,0,96,8,92,0,134,16,168,0,96,4,92,0,133,19,168,0,96,8,92,0,132,20,168,0,96,4,92,0,169,18,168,0,96,8,194,0,169,16,168,0,96,4,194,0,167,20,168,0,96,4,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,18,168,0,96,8,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,166,16,168,0,96,4,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,165,19,168,0,96,8,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,164,20,168,0,96,4,194,0,134,18,168,0,96,8,85,0,134,16,168,0,96,4,85,0,134,18,168,0,96,8,84,0,134,16,168,0,96,4,84,0,134,18,168,0,96,8,86,0,134,16,168,0,96,4,86,0,133,18,168,0,96,8,47,0,132,16,168,0,96,4,47,0,134,18,168,0,96,8,87,0,134,16,168,0,96,4,87,0,72,18,168,0,96,8,45,0,71,16,168,0,96,4,45,0,96,19,168,0,96,8,45,0,95,20,168,0,96,4,45,0,128,18,168,0,96,8,42,0,128,16,168,0,96,4,42,0,129,19,168,0,96,8,42,0,129,20,168,0,96,4,42,0,72,18,168,0,96,8,44,0,71,16,168,0,96,4,44,0,96,19,168,0,96,8,44,0,95,20,168,0,96,4,44,0,134,16,168,0,96,8,91,0,134,18,168,0,96,8,91,0,134,20,168,0,96,8,91,0,134,19,168,0,96,8,230,0,133,20,168,0,96,8,230,0,134,18,168,0,96,8,230,0,134,18,168,0,96,8,90,0,133,16,168,0,96,8,90,0,133,19,168,0,96,8,90,0,132,20,168,0,96,8,90,0,130,18,168,0,96,8,247,0,64,16,168,0,96,4,247,0,69,16,168,0,80,1,110,0,129,18,160,0,96,8,110,0,112,16,32,0,80,1,126,0,113,18,32,0,96,8,126,0,65,16,168,0,80,1,111,0,133,20,160,0,96,8,126,0,55,16,32,0,80,1,127,0,56,18,32,0,96,8,214,0,134,18,168,0,96,8,40,0,57,18,32,0,96,8,41,0,134,16,168,0,96,4,40,0,57,16,32,0,96,4,41,0,134,18,168,0,96,8,111,0,57,18,32,0,96,8,127,0,134,20,168,0,96,8,111,0,57,20,32,0,96,8,127,0,134,18,168,0,96,8,16,0,57,18,32,0,96,8,17,0,134,16,168,0,96,4,16,0,57,16,32,0,96,4,17,0,125,18,168,0,96,8,22,0,56,18,32,0,96,8,23,0,125,16,168,0,96,4,22,0,56,16,32,0,96,4,23,0,125,18,168,0,96,8,18,0,56,18,32,0,96,8,19,0,125,16,168,0,96,4,18,0,56,16,32,0,96,4,19,0,130,16,168,0,96,4,18,0,130,16,168,0,96,4,22,0,70,19,168,0,96,8,214,0,127,20,168,0,96,8,214,0,93,18,168,0,96,8,80,0,93,16,168,0,96,4,80,0,57,18,40,0,96,8,231,0,59,16,40,0,96,8,195,0,57,18,40,0,96,8,43,0,57,16,40,0,96,4,43,0,55,16,40,0,96,4,231,0,132,20,168,0,96,4,16,0,53,20,32,0,96,4,17,0,65,16,168,0,80,1,107,0,134,18,160,0,96,8,107,0,65,16,168,0,80,1,99,0,134,18,160,0,96,8,99,0,65,16,168,0,80,1,103,0,134,18,160,0,96,8,103,0,66,16,168,0,80,1,252,0,135,18,160,0,96,8,252,0,67,16,168,0,80,1,253,0,136,18,160,0,96,8,253,0,68,16,168,0,80,1,254,0,137,18,160,0,96,8,254,0,65,16,168,0,96,8,212,0,138,18,160,0,96,8,212,0,66,16,168,0,80,1,236,0,135,18,160,0,96,8,236,0,67,16,168,0,80,1,237,0,136,18,160,0,96,8,237,0,66,16,168,0,80,1,220,0,135,18,160,0,96,8,220,0,67,16,168,0,80,1,221,0,136,18,160,0,96,8,221,0,65,16,168,0,80,1,219,0,134,18,160,0,96,8,219,0,65,16,168,0,80,1,223,0,134,18,160,0,96,8,223,0,65,16,168,0,96,4,224,0,134,18,160,0,96,8,224,0,65,16,168,0,96,4,227,0,134,18,160,0,96,8,227,0,65,16,168,0,80,1,116,0,134,18,160,0,96,8,116,0,65,16,168,0,80,1,117,0,134,18,160,0,96,8,117,0,65,16,168,0,80,1,118,0,134,18,160,0,96,8,118,0,65,16,168,0,80,1,100,0,134,18,160,0,96,8,100,0,65,16,168,0,80,1,101,0,134,18,160,0,96,8,101,0,65,16,168,0,80,1,102,0,134,18,160,0,96,8,102,0,151,16,168,0,96,4,197,0,152,18,160,0,96,4,197,0,145,26,32,0,96,64,21,0,148,16,168,0,96,4,196,0,159,18,160,0,96,4,196,0,65,16,168,0,80,1,245,0,134,18,160,0,96,8,245,0,65,16,168,0,96,4,238,0,134,18,160,0,96,8,238,0,65,16,168,0,96,4,222,0,134,18,160,0,96,8,222,0,65,16,168,0,96,4,234,0,134,18,160,0,96,8,234,0,65,16,168,0,96,4,218,0,134,18,160,0,96,8,218,0,89,16,168,0,96,4,215,0,93,18,160,0,96,8,215,0,65,16,168,0,80,4,228,0,134,18,160,0,96,8,228,0,65,16,168,0,80,1,229,0,134,18,160,0,96,8,229,0,65,16,168,0,80,1,213,0,134,18,160,0,96,8,213,0,65,16,168,0,96,8,244,0,134,18,160,0,96,8,244,0,65,16,168,0,80,1,235,0,134,18,160,0,96,8,235,0,65,16,168,0,96,4,246,0,134,18,160,0,96,8,246,0,169,18,168,0,96,8,112,0,147,16,168,0,96,4,112,0,169,20,168,0,96,8,112,0,169,19,168,0,96,8,112,0,65,16,168,0,80,1,241,0,63,16,32,0,80,1,113,48,134,18,160,0,96,8,241,0,123,18,32,0,96,8,113,48,65,16,168,0,80,1,242,0,63,16,32,0,80,1,114,48,134,18,160,0,96,8,242,0,123,18,32,0,96,8,114,48,65,16,168,0,80,1,243,0,63,16,32,0,80,1,115,48,134,18,160,0,96,8,243,0,123,18,32,0,96,8,115,48,65,16,168,0,80,1,225,0,63,16,32,0,80,1,113,32,134,18,160,0,80,8,225,0,123,18,32,0,96,8,113,32,65,16,168,0,80,1,226,0,63,16,32,0,80,1,114,32,134,18,160,0,96,8,226,0,123,18,32,0,96,8,114,32,65,16,168,0,80,1,209,0,63,16,32,0,80,1,113,16,134,18,160,0,96,8,209,0,123,18,32,0,96,8,113,16,65,16,168,0,80,1,210,0,63,16,32,0,80,1,114,16,134,18,160,0,96,8,210,0,123,18,32,0,96,8,114,16,65,16,168,0,80,1,211,0,63,16,32,0,80,1,115,16,134,18,160,0,96,8,211,0,123,18,32,0,96,8,115,16,123,18,40,0,96,8,115,56,123,18,40,0,96,8,115,24,65,16,168,0,80,1,248,0,134,18,160,0,96,8,248,0,65,16,168,0,80,1,249,0,134,18,160,0,96,8,249,0,65,16,168,0,80,1,250,0,134,18,160,0,96,8,250,0,65,16,168,0,96,8,251,0,134,18,160,0,96,8,251,0,65,16,168,0,80,1,232,0,134,18,160,0,96,8,232,0,65,16,168,0,80,1,233,0,134,18,160,0,96,8,233,0,65,16,168,0,80,1,216,0,134,18,160,0,96,8,216,0,65,16,168,0,80,1,217,0,134,18,160,0,96,8,217,0,65,16,168,0,80,1,239,0,134,18,160,0,96,8,239,0,65,16,168,0,80,1,104,0,134,18,160,0,96,8,104,0,65,16,168,0,80,1,105,0,134,18,160,0,96,8,105,0,65,16,168,0,80,1,106,0,134,18,160,0,96,8,106,0,65,16,168,0,80,1,96,0,134,18,160,0,96,8,96,0,65,16,168,0,80,1,97,0,134,18,160,0,96,8,97,0,65,16,168,0,80,1,98,0,134,18,160,0,96,8,98,0,134,18,168,0,96,8,109,0,134,18,168,0,96,8,108,0,134,16,168,0,96,4,83,0,132,20,168,0,96,4,83,0,134,16,168,0,96,4,82,0,132,20,168,0,96,4,82,0,169,18,168,0,96,8,198,0,169,16,168,0,96,4,198,0,133,18,168,0,96,8,46,0,132,16,168,0,96,4,46,0,134,18,168,0,96,8,21,0,134,16,168,0,96,4,21,0,134,18,168,0,96,8,20,0,134,16,168,0,96,4,20,0,0,16,24,0,80,2,14,0,20,16,40,0,80,2,13,0,20,16,40,0,80,2,13,8,65,17,168,0,80,2,191,0,65,17,168,0,80,2,29,0,65,17,168,0,80,2,28,0,65,17,168,0,80,2,174,0,65,17,168,0,80,2,158,0,65,17,168,0,80,2,176,0,65,17,168,0,80,2,144,0,65,17,168,0,80,2,160,0,65,17,168,0,80,2,164,0,65,17,168,0,80,2,148,0,65,17,168,0,80,2,180,0,65,17,168,0,80,2,138,0,65,17,168,0,80,2,142,0,65,17,168,0,80,2,150,0,65,17,168,0,80,2,166,0,65,17,168,0,80,2,182,0,65,17,168,0,80,2,167,0,65,17,168,0,80,2,151,0,65,17,168,0,80,2,154,0,65,17,168,0,80,2,170,0,65,17,168,0,80,2,13,0,65,17,168,0,80,2,12,0,65,17,168,0,80,2,183,0,65,17,168,0,80,2,187,0,134,18,168,0,96,16,208,0,134,19,168,0,96,16,208,0,13,0,40,0,96,16,219,8,15,0,32,0,96,16,221,8,10,0,32,0,96,16,223,8,134,18,168,0,96,16,124,0,134,19,168,0,96,16,124,0,134,18,168,0,96,16,125,0,134,19,168,0,96,16,125,0,126,19,168,0,96,16,240,0,0,16,8,0,96,16,1,200,133,19,168,0,96,16,18,0,134,20,168,0,96,16,22,0,134,20,168,0,96,16,18,0,0,16,8,0,96,16,1,201,65,23,168,0,96,32,28,0,134,25,160,0,96,32,28,0,65,23,168,0,96,32,30,0,134,25,160,0,96,32,30,0,65,23,168,0,96,32,29,0,134,25,160,0,96,32,29,0,147,24,168,0,96,32,15,0,169,26,160,0,96,32,15,0,65,23,168], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+66248);
/* memory initializer */ allocate([96,32,2,0,134,25,160,0,96,32,2,0,65,23,168,0,96,32,3,0,134,25,160,0,96,32,3,0,65,23,168,0,96,32,1,0,134,25,160,0,96,32,1,0,65,23,168,0,96,32,6,0,134,25,160,0,96,32,6,0,65,23,168,0,96,32,7,0,134,25,160,0,96,32,7,0,65,23,168,0,96,32,5,0,134,25,160,0,96,32,5,0,65,23,168,0,96,32,4,0,134,25,160,0,96,32,4,0,65,23,168,0,96,32,11,0,134,25,160,0,96,32,11,0,65,23,168,0,96,32,0,0,134,25,160,0,96,32,0,0,65,23,168,0,96,32,8,0,134,25,160,0,96,32,8,0,65,23,168,0,96,32,10,0,134,25,160,0,96,32,10,0,65,23,168,0,96,32,9,0,134,25,160,0,96,32,9,0,0,6,24,0,112,0,152,0,0,6,24,0,112,0,153,0,0,0,24,0,112,0,156,0,0,0,24,0,112,0,157,0,0,6,24,0,112,0,207,0,17,22,9,0,112,0,199,8,87,0,136,0,112,0,99,0,0,6,27,0,112,0,167,0,54,6,19,0,112,0,167,0,0,6,26,0,112,0,173,0,15,6,18,0,112,0,173,0,0,6,26,0,112,0,165,0,54,6,18,0,112,0,165,0,0,6,27,0,112,0,175,0,15,6,19,0,112,0,175,0,0,6,26,0,112,0,171,0,15,6,18,0,112,0,171,0,150,26,40,0,112,64,22,0,162,26,168,0,112,64,34,0,0,16,8,0,112,0,1,248,0,16,24,0,112,0,5,0,0,16,24,0,112,0,7,0,169,26,168,0,96,64,13,0,169,26,168,0,96,64,12,0,170,25,168,0,96,64,21,0,170,25,168,0,96,64,20,0,169,26,168,0,96,64,65,0,169,26,168,0,96,64,64,0,152,26,40,0,96,64,23,0,146,26,32,0,96,64,23,0,167,26,168,0,96,64,33,0,126,25,168,0,96,64,42,0,169,26,168,0,96,64,66,0,134,25,168,0,96,64,43,0,170,25,168,0,96,64,16,0,169,26,168,0,96,64,14,0,134,25,168,0,96,64,41,0,153,26,40,0,96,64,20,0,149,26,40,0,96,64,22,0,134,25,168,0,96,64,65,0,160,26,168,0,96,64,32,0,161,26,168,0,96,64,34,0,134,25,168,0,96,64,60,0,134,25,168,0,96,64,61,0,134,25,168,0,96,64,62,0,134,25,168,0,96,64,63,0,134,25,168,0,96,64,56,0,134,25,168,0,96,64,57,0,134,25,168,0,96,64,58,0,134,25,168,0,96,64,59,0,133,25,168,0,96,64,32,0,132,25,168,0,96,64,33,0,131,25,168,0,96,64,34,0,133,25,168,0,96,64,35,0,132,25,168,0,96,64,36,0,133,25,168,0,96,64,37,0,133,25,168,0,96,64,48,0,132,25,168,0,96,64,49,0,131,25,168,0,96,64,50,0,133,25,168,0,96,64,51,0,132,25,168,0,96,64,52,0,133,25,168,0,96,64,53,0,134,25,168,0,96,64,40,0,134,25,168,0,96,64,64,0,134,25,168,0,96,64,23,0,169,26,168,0,96,64,8,0,169,26,168,0,96,64,9,0,167,26,168,0,96,64,10,0,168,26,168,0,96,64,11,0,90,27,168,0,96,64,240,0,91,27,160,0,96,64,241,0,169,26,168,0,96,64,96,0,169,26,168,0,96,64,97,0,169,26,168,0,96,64,98,0,169,26,168,0,96,64,99,0,134,25,168,0,96,64,55,0,109,20,168,0,96,64,184,0,20,16,40,0,96,64,174,40,20,16,40,0,96,64,174,32,20,16,40,0,96,64,174,48,0,16,40,0,96,64,1,208,0,16,40,0,104,64,1,209,0,16,8,0,96,0,1,193,0,16,8,0,104,0,1,194,0,16,8,0,104,0,1,195,0,16,8,0,104,0,1,196,15,16,40,0,104,0,199,48,15,16,40,0,104,0,199,56,15,18,40,0,104,0,199,48,15,20,40,0,104,0,199,48,98,16,40,0,104,0,120,0,97,16,168,0,104,0,121,0,99,25,168,0,104,0,128,0,99,25,168,0,104,0,129,0,124,25,168,0,96,128,24,0,140,25,160,0,96,128,24,0,141,25,168,0,96,128,25,0,142,25,168,0,96,128,26,0,172,26,168,0,96,128,75,0,172,26,168,0,96,128,74,0,174,26,168,0,96,128,24,0,173,26,40,0,96,128,25,0,171,26,32,0,96,128,25,0,134,25,168,0,96,128,44,0,57,25,32,0,96,128,46,0,134,25,168,0,96,128,45,0,57,25,32,0,96,128,47,0,172,26,168,0,96,128,76,0,134,25,168,0,96,128,13,0,169,26,160,0,96,128,13,0,134,25,168,0,96,128,12,0,169,26,160,0,96,128,12,0,175,26,168,0,96,128,6,0,134,25,168,0,96,128,14,0,134,25,168,0,96,128,15,0,0,16,24,0,96,128,119,0,0,16,24,0,96,128,119,0,134,19,168,0,96,128,230,0,139,19,160,0,96,128,230,0,134,18,168,0,96,128,230,0,139,18,160,0,96,128,230,0,134,18,168,0,96,128,90,0,139,18,160,0,96,128,90,0,133,19,168,0,96,128,18,0,144,19,160,0,96,128,18,0,93,18,168,0,96,128,80,0,94,18,160,0,96,128,80,0,93,16,168,0,96,128,80,0,94,16,160,0,96,128,80,0,4,0,24,0,112,0,232,0,26,0,32,0,112,0,255,16,13,1,40,0,112,0,255,24,14,0,32,0,112,0,255,24,16,6,32,0,112,0,255,24,6,0,24,0,0,0,235,0,4,0,16,0,112,0,233,0,26,0,32,0,112,0,255,32,13,1,40,0,112,0,255,40,14,0,32,0,112,0,255,40,16,6,32,0,112,0,255,40,16,16,40,0,112,0,1,16,16,16,40,0,112,0,1,24,30,16,40,0,112,0,0,0,10,21,32,0,32,0,0,0,30,16,40,0,112,0,1,32,10,21,32,0,32,0,1,32,30,16,40,0,112,0,0,8,10,21,32,0,32,0,0,8,27,0,56,0,0,0,88,0,12,0,0,0,0,0,143,0,33,16,176,0,48,0,129,0,27,0,56,0,0,0,80,0,6,0,16,0,16,0,106,0,2,0,16,0,16,0,104,0,12,0,0,0,0,0,255,48,33,16,176,0,48,0,128,0,101,16,40,0,104,0,120,0,100,16,168,0,104,0,121,0,0,0,8,0,0,0,0,0,0,0,9,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,104,0,111,0,118,0,125,0,132,0,139,0,146,0,153,0,156,0,159,0,162,0,165,0,168,0,171,0,174,0,177,0,178,0,180,0,182,0,185,0,186,0,188,0,190,0,192,0,193,0,195,0,197,0,199,0,200,0,202,0,204,0,208,0,209,0,211,0,213,0,215,0,216,0,218,0,220,0,222,0,223,0,225,0,227,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,251,0,253,0,255,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,11,1,14,1,17,1,20,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,33,1,37,1,41,1,45,1,46,1,47,1,48,1,49,1,50,1,51,1,52,1,56,1,60,1,66,1,70,1,72,1,73,1,74,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,100,1,101,1,102,1,103,1,104,1,112,1,114,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,127,1,128,1,129,1,130,1,131,1,132,1,133,1,134,1,135,1,136,1,138,1,139,1,140,1,141,1,142,1,144,1,146,1,148,1,149,1,150,1,151,1,152,1,154,1,156,1,157,1,158,1,162,1,163,1,164,1,165,1,166,1,168,1,173,1,175,1,177,1,178,1,179,1,180,1,181,1,182,1,183,1,184,1,185,1,186,1,187,1,188,1,189,1,190,1,191,1,192,1,193,1,194,1,195,1,196,1,197,1,198,1,199,1,200,1,201,1,202,1,203,1,204,1,205,1,206,1,207,1,208,1,209,1,210,1,211,1,212,1,213,1,214,1,215,1,216,1,217,1,218,1,219,1,220,1,221,1,222,1,223,1,224,1,225,1,226,1,227,1,228,1,229,1,230,1,231,1,232,1,233,1,234,1,235,1,236,1,237,1,238,1,239,1,240,1,241,1,242,1,243,1,244,1,245,1,249,1,253,1,254,1,0,2,2,2,3,2,4,2,5,2,6,2,7,2,12,2,14,2,19,2,21,2,26,2,28,2,33,2,35,2,40,2,42,2,47,2,49,2,51,2,53,2,55,2,57,2,59,2,61,2,63,2,65,2,68,2,71,2,73,2,77,2,81,2,84,2,85,2,86,2,87,2,88,2,89,2,90,2,91,2,92,2,93,2,94,2,95,2,96,2,97,2,98,2,99,2,100,2,101,2,102,2,103,2,104,2,106,2,107,2,109,2,110,2,111,2,112,2,113,2,114,2,115,2,116,2,117,2,118,2,119,2,120,2,121,2,122,2,123,2,124,2,125,2,126,2,127,2,128,2,129,2,130,2,131,2,132,2,133,2,134,2,135,2,136,2,137,2,138,2,139,2,140,2,141,2,142,2,143,2,144,2,145,2,146,2,147,2,148,2,150,2,151,2,152,2,153,2,154,2,155,2,156,2,157,2,158,2,159,2,160,2,161,2,162,2,163,2,164,2,165,2,166,2,167,2,168,2,169,2,170,2,171,2,172,2,173,2,174,2,175,2,176,2,177,2,178,2,179,2,180,2,181,2,182,2,183,2,184,2,185,2,186,2,187,2,188,2,189,2,190,2,191,2,192,2,193,2,194,2,195,2,196,2,197,2,198,2,199,2,200,2,201,2,202,2,203,2,204,2,205,2,206,2,207,2,208,2,209,2,210,2,211,2,212,2,213,2,214,2,215,2,216,2,217,2,218,2,219,2,220,2,221,2,222,2,223,2,224,2,225,2,226,2,227,2,228,2,229,2,230,2,231,2,232,2,233,2,234,2,235,2,236,2,237,2,238,2,239,2,240,2,241,2,242,2,243,2,244,2,245,2,246,2,247,2,248,2,249,2,250,2,251,2,252,2,253,2,254,2,255,2,0,3,1,3,2,3,3,3,4,3,5,3,6,3,7,3,8,3,12,3,16,3,18,3,20,3,22,3,24,3,26,3,28,3,30,3,32,3,34,3,36,3,37,3,38,3,39,3,40,3,41,3,42,3,43,3,44,3,45,3,46,3,47,3,49,3,51,3,53,3,55,3,57,3,59,3,61,3,63,3,65,3,67,3,69,3,71,3,73,3,75,3,77,3,79,3,81,3,83,3,85,3,87,3,89,3,91,3,94,3,96,3,98,3,100,3,102,3,104,3,106,3,108,3,110,3,112,3,114,3,116,3,118,3,120,3,121,3,122,3,123,3,124,3,128,3,132,3,136,3,140,3,144,3,148,3,152,3,156,3,157,3,158,3,160,3,162,3,164,3,166,3,168,3,170,3,172,3,174,3,176,3,178,3,180,3,182,3,184,3,186,3,188,3,189,3,190,3,191,3,192,3,193,3,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3,202,3,203,3,204,3,205,3,206,3,207,3,208,3,209,3,210,3,211,3,212,3,213,3,214,3,215,3,216,3,217,3,218,3,219,3,220,3,221,3,222,3,223,3,224,3,225,3,226,3,227,3,228,3,229,3,230,3,231,3,234,3,235,3,236,3,237,3,238,3,239,3,240,3,241,3,242,3,243,3,244,3,246,3,248,3,250,3,252,3,254,3,0,4,2,4,4,4,6,4,8,4,10,4,12,4,14,4,16,4,18,4,20,4,21,4,22,4,23,4,24,4,25,4,26,4,27,4,29,4,31,4,33,4,35,4,37,4,38,4,39,4,40,4,41,4,42,4,43,4,44,4,45,4,46,4,47,4,48,4,50,4,51,4,52,4,53,4,54,4,55,4,56,4,57,4,58,4,59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,4,68,4,69,4,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,80,4,81,4,82,4,83,4,84,4,85,4,86,4,87,4,88,4,89,4,91,4,92,4,93,4,94,4,95,4,96,4,97,4,98,4,99,4,100,4,101,4,102,4,103,4,104,4,105,4,106,4,107,4,108,4,109,4,110,4,111,4,112,4,113,4,114,4,116,4,117,4,118,4,119,4,120,4,121,4,123,4,125,4,127,4,128,4,130,4,132,4,133,4,134,4,135,4,136,4,137,4,139,4,141,4,143,4,145,4,147,4,167,2,168,2,169,2,170,2,171,2,172,2,173,2,174,2,175,2,176,2,177,2,178,2,179,2,180,2,181,2,182,2,183,2,184,2,185,2,186,2,187,2,188,2,189,2,190,2,191,2,192,2,193,2,194,2,195,2,196,2,182,0,197,2,232,2,233,2,230,2,231,2,234,2,235,2,236,2,237,2,238,2,239,2,0,3,252,2,253,2,254,2,3,3,242,2,250,2,4,3,246,2,247,2,5,3,243,2,251,2,229,3,230,3,42,4,43,4,46,4,47,4,48,4,234,3,235,3,236,3,237,3,50,4,238,3,157,2,158,2,6,3,16,3,18,3,8,3,12,3,20,3,22,3,36,3,37,3,28,3,30,3,32,3,34,3,204,0,47,3,42,3,51,4,44,3,45,3,241,3,242,3,24,3,26,3,52,4,244,3,248,3,246,3,51,3,49,3,53,3,53,4,55,3,57,3,59,3,61,3,63,3,65,3,67,3,69,3,250,3,71,3,73,3,75,3,77,3,55,4,92,4,91,4,94,4,93,4,79,3,81,3,83,3,56,4,85,3,87,3,89,3,95,4,57,4,91,3,58,4,60,4,94,3,61,4,37,4,38,4,0,4,252,3,254,3,59,4,6,4,2,4,4,4,96,3,8,4,62,4,98,3,63,4,100,3,64,4,65,4,66,4,102,3,67,4,104,3,68,4,69,4,106,3,70,4,71,4,72,4,73,4,74,4,75,4,76,4,77,4,78,4,79,4,80,4,81,4,108,3,10,4,110,3,112,3,83,4,114,3,82,4,116,3,118,3,12,4,120,3,122,3,123,3,14,4,18,4,16,4,156,3,157,3,124,3,128,3,132,3,136,3,140,3,144,3,148,3,152,3,84,4,158,3,160,3,162,3,164,3,166,3,168,3,170,3,172,3,176,3,178,3,180,3,188,3,182,3,184,3,186,3,189,3,174,3,190,3,191,3,192,3,193,3,86,4,85,4,88,4,87,4,194,3,195,3,196,3,197,3,198,3,199,3,200,3,201,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+76488);
/* memory initializer */ allocate([48,0,112,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,91,0,0,0,93,0,0,97,115,115,101,109,98,108,101,46,99,0,1,105,109,112,111,114,116,32,39,37,115,39,32,32,37,115,46,37,115,10,0,73,78,67,76,85,68,69,0,37,114,32,37,115,0,119,98,0,69,88,69,0,66,73,78,0,111,0,108,115,116,0,101,114,114,0,46,114,100,97,116,97,0,68,71,82,79,85,80,0,69,82,82,79,82,0,78,79,84,72,73,78,71,0,37,114,32,37,114,58,37,114,44,37,114,58,37,114,44,37,114,58,37,114,44,37,114,58,37,114,44,37,114,58,37,115,44,37,114,58,37,115,0,37,114,32,37,114,58,37,115,44,37,114,58,37,115,44,37,114,58,37,115,0,37,114,32,37,114,58,37,115,44,37,114,58,37,115,0,46,104,100,114,36,50,0,72,68,82,0,64,112,101,95,102,105,108,101,95,102,108,97,103,115,0,46,104,100,114,36,51,0,46,114,115,114,99,0,46,114,101,108,111,99,0,65,76,73,71,78,40,56,41,0,65,76,73,71,78,40,52,41,0,64,76,80,80,82,79,67,32,37,114,32,37,114,32,37,114,0,37,114,32,68,79,84,78,65,77,69,0,37,115,50,32,37,114,32,37,114,32,37,115,0,46,105,100,97,116,97,36,0,70,76,65,84,32,114,101,97,100,32,112,117,98,108,105,99,32,97,108,105,97,115,40,39,46,114,100,97,116,97,39,41,32,39,68,65,84,65,39,0,68,68,32,37,114,32,64,37,115,95,105,108,116,44,32,48,44,32,48,44,32,37,114,32,64,37,115,95,110,97,109,101,44,32,37,114,32,64,37,115,95,105,97,116,0,37,115,50,32,37,114,0,37,115,52,32,37,114,32,37,115,32,37,115,0,64,37,115,95,105,108,116,32,108,97,98,101,108,32,37,114,0,64,76,80,80,82,79,67,32,37,114,32,64,37,115,95,110,97,109,101,0,64,76,80,80,82,79,67,32,48,0,37,115,52,32,37,114,0,37,115,53,32,37,114,32,37,115,32,37,115,0,64,37,115,95,105,97,116,32,108,97,98,101,108,32,37,114,0,37,115,37,115,32,64,76,80,80,82,79,67,32,37,114,32,64,37,115,95,110,97,109,101,0,37,115,53,32,37,114,0,37,115,54,32,37,114,32,37,114,32,37,115,0,64,37,115,95,110,97,109,101,32,100,119,32,48,0,100,98,32,39,37,115,39,44,48,0,101,118,101,110,0,64,37,115,95,37,115,95,110,97,109,101,32,100,98,32,39,37,115,46,37,115,39,44,48,0,64,37,115,95,110,97,109,101,32,100,98,32,39,37,115,39,44,48,0,37,115,54,32,37,114,0,37,115,51,32,37,114,32,37,114,32,37,115,0,68,68,32,48,44,32,48,44,32,48,44,32,48,44,32,48,0,37,115,51,32,37,114,0,37,115,32,37,114,32,37,114,32,37,115,0,46,101,100,97,116,97,0,70,76,65,84,32,114,101,97,100,32,112,117,98,108,105,99,32,97,108,105,97,115,40,39,46,114,100,97,116,97,39,41,32,39,68,65,84,65,39,0,68,68,32,48,44,32,48,37,120,104,44,32,48,44,32,37,114,32,64,37,115,95,110,97,109,101,44,32,37,117,44,32,37,117,44,32,37,117,44,32,37,114,32,64,37,115,95,102,117,110,99,44,32,37,114,32,64,37,115,95,110,97,109,101,115,44,32,37,114,32,64,37,115,95,110,97,109,101,111,114,100,0,64,37,115,95,102,117,110,99,32,37,114,32,68,87,79,82,68,0,68,68,32,37,114,32,37,115,0,64,37,115,95,110,97,109,101,115,32,37,114,32,68,87,79,82,68,0,68,68,32,37,114,32,64,37,115,0,64,37,115,95,110,97,109,101,111,114,100,32,37,114,32,87,79,82,68,0,68,87,32,37,117,0,64,37,115,95,110,97,109,101,32,68,66,32,39,37,115,39,44,48,0,64,37,115,32,68,66,32,39,37,115,39,44,48,0,46,104,100,114,36,49,0,37,115,49,32,37,114,32,85,83,69,49,54,32,37,114,32,37,115,0,46,104,100,114,36,0,114,101,97,100,32,112,117,98,108,105,99,32,39,72,68,82,39,0,100,98,32,39,77,90,39,0,100,119,32,56,48,104,44,32,49,44,32,48,44,32,52,0,100,119,32,48,44,32,45,49,44,32,48,44,32,48,66,56,104,0,100,119,32,48,44,32,48,44,32,48,44,32,52,48,104,0,111,114,103,32,52,48,104,0,112,117,115,104,32,99,115,0,112,111,112,32,100,115,0,109,111,118,32,100,120,44,64,70,32,45,32,52,48,104,0,109,111,118,32,97,104,44,57,0,105,110,116,32,50,49,104,0,109,111,118,32,97,120,44,52,67,48,49,104,0,105,110,116,32,50,49,104,0,64,64,58,0,100,98,32,39,84,104,105,115,32,105,115,32,97,32,80,69,32,101,120,101,99,117,116,97,98,108,101,39,44,48,68,104,44,48,65,104,44,39,36,39,0,37,115,49,32,37,114,0,66,105,110,97,114,121,32,77,97,112,58,0,83,101,103,109,101,110,116,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,111,115,40,102,105,108,101,41,32,32,32,32,32,82,86,65,32,32,83,105,122,101,40,102,105,108,41,32,83,105,122,101,40,109,101,109,41,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,37,45,50,52,115,32,37,56,88,32,37,56,88,32,37,57,88,32,37,57,88,0,60,104,101,97,100,101,114,62,0,37,45,52,50,115,32,37,57,88,32,37,57,88,0,82,69,76,79,67,0,46,105,100,97,116,97,36,50,0,46,105,100,97,116,97,36,51,0,46,105,100,97,116,97,36,53,0,46,116,108,115,0,98,114,97,110,99,104,46,99,0,99,109,100,108,105,110,101,46,99,0,98,105,110,0,67,112,0,67,117,0,67,120,0,99,0,68,94,36,0,101,108,102,54,52,0,101,108,102,0,69,80,0,101,113,0,101,61,35,0,70,100,61,64,0,70,105,61,94,64,0,70,108,61,64,0,70,111,61,94,64,0,70,80,105,56,55,0,70,80,105,0,102,112,48,0,102,112,50,0,102,112,51,0,102,112,99,0,70,119,61,94,64,0,71,99,0,71,100,0,71,114,0,71,122,0,104,0,73,61,94,64,0,109,99,0,109,102,0,109,104,0,109,108,0,109,109,0,109,115,0,109,116,0,109,122,0,110,99,61,36,0,110,100,61,36,0,110,109,61,36,0,110,111,108,111,103,111,0,110,116,61,36,0,111,109,102,0,112,101,0,113,0,83,97,0,83,102,0,83,103,0,83,110,0,83,120,0,87,88,0,87,61,35,0,119,105,110,54,52,0,88,0,90,100,0,90,102,0,90,103,0,90,105,61,35,0,90,109,0,90,110,101,0,90,112,61,35,0,122,99,109,0,122,99,119,0,122,102,48,0,122,102,49,0,122,108,99,0,122,108,100,0,122,108,102,0,122,108,112,0,122,108,115,0,90,115,0,122,116,48,0,122,116,49,0,122,116,50,0,90,118,56,0,122,122,101,0,122,122,115,0,90,112,0,90,105,0,87,0,60,78,85,76,76,62,0,38,46,54,62,100,101,46,115,120,100,97,116,97,0,46,102,105,108,101,0,46,98,102,0,46,108,102,0,46,101,102,0,99,111,102,102,46,99,0,0,47,37,117,0,46,100,114,101,99,116,118,101,0,45,101,120,112,111,114,116,58,37,115,32,0,45,101,120,112,111,114,116,58,37,115,61,37,115,32,0,45,100,101,102,97,117,108,116,108,105,98,58,34,37,115,34,32,0,45,100,101,102,97,117,108,116,108,105,98,58,37,115,32,0,45,101,110,116,114,121,58,37,115,32,0,45,105,109,112,111,114,116,58,0,46,100,101,98,117,103,36,83,0,46,100,101,98,117,103,36,84,0,105,102,45,101,108,115,101,0,65,83,83,85,77,69,83,0,82,65,68,73,88,0,76,73,83,84,73,78,71,0,67,80,85,0,65,76,73,71,78,77,69,78,84,0,0,2,1,2,0,4,1,4,64,67,112,117,0,84,73,78,89,0,83,77,65,76,76,0,67,79,77,80,65,67,84,0,77,69,68,73,85,77,0,76,65,82,71,69,0,72,85,71,69,0,78,69,65,82,83,84,65,67,75,0,70,65,82,83,84,65,67,75,0,79,83,95,79,83,50,0,79,83,95,68,79,83,0,64,67,111,100,101,83,105,122,101,0,64,99,111,100,101,0,64,68,97,116,97,83,105,122,101,0,64,100,97,116,97,0,64,115,116,97,99,107,0,64,77,111,100,101,108,0,64,73,110,116,101,114,102,97,99,101,0,64,82,101,115,101,114,118,101,100,83,116,97,99,107,0,100,97,116,97,46,99,0,100,98,103,99,118,46,99,0,84,76,83,0,0,2,3,1,7,6,4,5,241,242,243,95,95,117,110,110,97,109,101,100,0,64,64,37,117,0,37,115,10,0,127,69,76,70,0,101,108,102,46,99,0,46,115,104,115,116,114,116,97,98,0,46,115,121,109,116,97,98,0,46,115,116,114,116,97,98,0,46,114,101,108,97,0,46,114,101,108,0,46,116,101,120,116,0,46,100,97,116,97,0,46,114,111,100,97,116,97,0,46,98,115,115,0,111,114,103,32,49,48,48,104,0,37,115,58,58,0,64,83,116,97,114,116,117,112,0,109,111,118,32,37,114,44,37,115,0,109,111,118,32,37,114,44,52,67,48,48,104,32,43,32,37,117,0,109,111,118,32,37,114,44,52,67,104,0,109,111,118,32,37,114,44,48,0,112,117,115,104,32,49,0,99,97,108,108,32,68,79,83,69,88,73,84,0,109,111,118,32,37,114,44,52,99,104,0,105,110,116,32,50,49,104,0,109,111,118,32,37,114,44,68,71,82,79,85,80,0,109,111,118,32,37,114,44,37,114,0,115,117,98,32,37,114,44,37,114,0,115,104,108,32,37,114,44,52,0,97,100,100,32,37,114,44,37,114,0,115,104,108,32,37,114,44,49,0,99,108,105,0,115,116,105,0,101,113,117,97,116,101,46,99,0,0,37,115,44,32,37,115,10,0,32,32,32,74,87,97,115,109,32,91,111,112,116,105,111,110,115,93,32,97,115,109,45,102,105,108,101,32,91,111,112,116,105,111,110,115,93,32,91,97,115,109,45,102,105,108,101,93,32,46,46,46,32,91,64,101,110,118,95,118,97,114,93,10,10,0,111,112,116,105,111,110,115,58,0,45,60,48,124,49,124,46,46,124,49,48,62,91,112,93,0,83,101,116,32,67,80,85,58,32,48,61,56,48,56,54,32,40,100,101,102,97,117,108,116,41,44,32,49,61,56,48,49,56,54,44,32,50,61,56,48,50,56,54,44,32,51,61,56,48,51,56,54,44,0,0,52,61,56,48,52,56,54,44,32,53,61,80,101,110,116,105,117,109,44,32,54,61,80,80,114,111,44,32,55,61,80,50,44,32,56,61,80,51,44,32,57,61,80,52,44,32,49,48,61,120,56,54,45,54,52,59,0,0,60,112,62,32,97,108,108,111,119,115,32,112,114,105,118,105,108,101,103,101,100,32,105,110,115,116,114,117,99,116,105,111,110,115,0,45,99,0,65,115,115,101,109,98,108,101,32,119,105,116,104,111,117,116,32,108,105,110,107,105,110,103,32,40,97,108,119,97,121,115,32,115,101,116,41,0,45,67,60,112,124,117,124,120,62,0,83,101,116,32,79,80,84,73,79,78,32,67,65,83,69,77,65,80,58,32,112,61,78,79,78,69,44,32,117,61,65,76,76,44,32,120,61,78,79,84,80,85,66,76,73,67,32,40,100,101,102,97,117,108,116,41,0,45,68,60,110,97,109,101,62,91,61,116,101,120,116,93,0,68,101,102,105,110,101,32,116,101,120,116,32,109,97,99,114,111,0,45,101,60,110,117,109,98,101,114,62,0,83,101,116,32,101,114,114,111,114,32,108,105,109,105,116,32,110,117,109,98,101,114,32,40,100,101,102,97,117,108,116,61,53,48,41,0,45,69,80,0,79,117,116,112,117,116,32,112,114,101,112,114,111,99,101,115,115,101,100,32,108,105,115,116,105,110,103,32,116,111,32,115,116,100,111,117,116,0,45,101,113,0,100,111,110,39,116,32,100,105,115,112,108,97,121,32,101,114,114,111,114,32,109,101,115,115,97,103,101,115,0,45,70,100,91,61,60,102,105,108,101,95,110,97,109,101,62,93,0,87,114,105,116,101,32,105,109,112,111,114,116,32,100,101,102,105,110,105,116,105,111,110,32,102,105,108,101,0,45,70,105,60,102,105,108,101,95,110,97,109,101,62,0,70,111,114,99,101,32,60,102,105,108,101,95,110,97,109,101,62,32,116,111,32,98,101,32,105,110,99,108,117,100,101,100,0,45,70,108,91,61,60,102,105,108,101,95,110,97,109,101,62,93,0,87,114,105,116,101,32,108,105,115,116,105,110,103,32,102,105,108,101,0,45,70,111,60,102,105,108,101,95,110,97,109,101,62,0,83,101,116,32,111,98,106,101,99,116,32,102,105,108,101,32,110,97,109,101,0,45,70,119,60,102,105,108,101,95,110,97,109,101,62,0,83,101,116,32,101,114,114,111,114,115,32,102,105,108,101,32,110,97,109,101,0,45,70,80,105,0,56,48,120,56,55,32,105,110,115,116,114,117,99,116,105,111,110,115,32,119,105,116,104,32,101,109,117,108,97,116,105,111,110,32,102,105,120,117,112,115,0,45,70,80,105,56,55,0,56,48,120,56,55,32,105,110,115,116,114,117,99,116,105,111,110,115,32,40,100,101,102,97,117,108,116,41,0,45,102,112,99,0,68,105,115,97,108,108,111,119,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,105,110,115,116,114,117,99,116,105,111,110,115,32,40,46,78,79,56,55,41,0,45,102,112,60,110,62,0,83,101,116,32,70,80,85,44,32,60,110,62,32,105,115,58,32,48,61,56,48,56,55,32,40,100,101,102,97,117,108,116,41,44,32,50,61,56,48,50,56,55,44,32,51,61,56,48,51,56,55,0,45,71,60,99,124,100,124,114,124,122,62,0,85,115,101,32,80,97,115,99,97,108,44,32,67,44,32,70,97,115,116,99,97,108,108,32,111,114,32,83,116,100,99,97,108,108,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,0,45,73,60,100,105,114,101,99,116,111,114,121,62,0,65,100,100,32,100,105,114,101,99,116,111,114,121,32,116,111,32,108,105,115,116,32,111,102,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,111,114,105,101,115,0,45,109,60,116,124,115,124,99,124,109,124,108,124,104,124,102,62,0,83,101,116,32,109,101,109,111,114,121,32,109,111,100,101,108,58,0,0,40,84,105,110,121,44,32,83,109,97,108,108,44,32,67,111,109,112,97,99,116,44,32,77,101,100,105,117,109,44,32,76,97,114,103,101,44,32,72,117,103,101,44,32,70,108,97,116,41,0,45,110,99,61,60,110,97,109,101,62,0,83,101,116,32,99,108,97,115,115,32,110,97,109,101,32,111,102,32,99,111,100,101,32,115,101,103,109,101,110,116,0,45,110,60,100,124,109,124,116,62,61,60,110,97,109,101,62,0,83,101,116,32,110,97,109,101,32,111,102,32,100,41,97,116,97,32,115,101,103,109,101,110,116,44,32,109,41,111,100,117,108,101,32,111,114,32,116,41,101,120,116,32,115,101,103,109,101,110,116,0,45,113,44,32,45,110,111,108,111,103,111,0,68,111,110,39,116,32,100,105,115,112,108,97,121,32,118,101,114,115,105,111,110,32,97,110,100,32,99,111,112,121,114,105,103,104,116,32,105,110,102,111,114,109,97,116,105,111,110,0,45,83,97,0,77,97,120,105,109,105,122,101,32,115,111,117,114,99,101,32,108,105,115,116,105,110,103,0,45,115,97,102,101,115,101,104,0,65,115,115,101,114,116,32,97,108,108,32,101,120,99,101,112,116,105,111,110,32,104,97,110,100,108,101,114,115,32,97,114,101,32,100,101,99,108,97,114,101,100,0,45,83,102,0,71,101,110,101,114,97,116,101,32,102,105,114,115,116,32,112,97,115,115,32,108,105,115,116,105,110,103,0,45,83,103,0,68,105,115,112,108,97,121,32,103,101,110,101,114,97,116,101,100,32,99,111,100,101,32,105,110,32,108,105,115,116,105,110,103,0,45,83,110,0,83,117,112,112,114,101,115,115,32,115,121,109,98,111,108,45,116,97,98,108,101,32,108,105,115,116,105,110,103,0,45,83,120,0,76,105,115,116,32,102,97,108,115,101,32,99,111,110,100,105,116,105,111,110,97,108,115,0,45,119,0,83,97,109,101,32,97,115,32,47,87,48,32,47,87,88,0,45,87,60,110,117,109,98,101,114,62,0,83,101,116,32,119,97,114,110,105,110,103,32,108,101,118,101,108,32,110,117,109,98,101,114,32,40,100,101,102,97,117,108,116,61,50,44,32,109,97,120,61,52,41,0,45,87,88,0,84,114,101,97,116,32,97,108,108,32,119,97,114,110,105,110,103,115,32,97,115,32,101,114,114,111,114,115,0,45,88,0,73,103,110,111,114,101,32,73,78,67,76,85,68,69,32,101,110,118,105,114,111,110,109,101,110,116,32,112,97,116,104,0,45,122,99,109,0,67,32,110,97,109,101,115,32,97,114,101,32,100,101,99,111,114,97,116,101,100,32,119,105,116,104,32,39,95,39,32,112,114,101,102,105,120,32,40,100,101,102,97,117,108,116,41,0,45,122,99,119,0,78,111,32,110,97,109,101,32,100,101,99,111,114,97,116,105,111,110,32,102,111,114,32,67,32,115,121,109,98,111,108,115,0,45,90,100,0,65,100,100,32,108,105,110,101,32,110,117,109,98,101,114,32,100,101,98,117,103,32,105,110,102,111,32,40,79,77,70,32,38,32,67,79,70,70,32,111,110,108,121,41,0,45,90,102,0,77,97,107,101,32,97,108,108,32,115,121,109,98,111,108,115,32,112,117,98,108,105,99,0,45,122,102,60,48,124,49,62,0,83,101,116,32,70,65,83,84,67,65,76,76,32,116,121,112,101,58,32,48,61,77,83,32,86,67,32,115,116,121,108,101,32,40,100,101,102,97,117,108,116,41,44,0,0,49,61,79,87,32,114,101,103,105,115,116,101,114,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,0,45,90,103,0,71,101,110,101,114,97,116,101,100,32,99,111,100,101,32,105,115,32,116,111,32,101,120,97,99,116,108,121,32,109,97,116,99,104,32,77,97,115,109,39,115,32,111,110,101,0,45,90,105,91,48,124,49,124,50,124,51,93,0,65,100,100,32,115,121,109,98,111,108,105,99,32,100,101,98,117,103,32,105,110,102,111,32,40,79,77,70,32,38,32,67,79,70,70,41,58,32,48,61,103,108,111,98,97,108,115,0,0,49,61,32,43,108,111,99,97,108,115,44,32,50,61,32,43,116,121,112,101,115,32,40,100,101,102,97,117,108,116,41,44,32,51,61,32,43,99,111,110,115,116,97,110,116,115,0,45,122,108,99,0,78,111,32,79,77,70,32,114,101,99,111,114,100,115,32,97,98,111,117,116,32,100,97,116,97,32,105,110,32,99,111,100,101,0,45,122,108,100,0,78,111,32,79,77,70,32,114,101,99,111,114,100,115,32,97,98,111,117,116,32,102,97,114,32,99,97,108,108,32,111,112,116,105,109,105,122,97,116,105,111,110,0,45,122,108,60,102,124,112,124,115,62,0,83,117,112,112,114,101,115,115,32,105,116,101,109,115,32,105,110,32,67,79,70,70,32,115,121,109,98,111,108,32,116,97,98,108,101,58,32,102,61,110,111,32,46,102,105,108,101,32,101,110,116,114,121,44,0,0,112,61,110,111,32,115,116,97,116,105,99,32,112,114,111,99,115,44,32,115,61,110,111,32,97,117,120,105,108,105,97,114,121,32,101,110,116,114,105,101,115,32,102,111,114,32,115,101,99,116,105,111,110,115,0,45,90,109,0,77,97,115,109,32,118,53,46,49,32,99,111,109,112,97,116,105,98,105,108,105,116,121,0,45,90,110,101,0,68,105,115,97,98,108,101,32,115,121,110,116,97,120,32,101,120,116,101,110,115,105,111,110,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,77,97,115,109,0,45,90,112,91,110,93,0,83,101,116,32,115,116,114,117,99,116,117,114,101,32,97,108,105,103,110,109,101,110,116,44,32,110,61,60,49,124,50,124,52,124,56,124,49,54,124,51,50,62,0,45,90,115,0,80,101,114,102,111,114,109,32,115,121,110,116,97,120,32,99,104,101,99,107,32,111,110,108,121,0,45,122,116,60,48,124,49,124,50,62,0,83,101,116,32,83,84,68,67,65,76,76,32,115,121,109,98,111,108,32,100,101,99,111,114,97,116,105,111,110,58,32,48,61,78,111,32,110,97,109,101,32,100,101,99,111,114,97,116,105,111,110,44,0,0,49,61,78,111,32,39,64,115,105,122,101,39,32,115,117,102,102,105,120,32,102,111,114,32,102,117,110,99,116,105,111,110,115,44,32,50,61,70,117,108,108,32,40,100,101,102,97,117,108,116,41,0,45,90,118,56,0,69,110,97,98,108,101,32,77,97,115,109,32,118,56,43,32,80,82,79,67,32,118,105,115,105,98,105,108,105,116,121,0,45,122,122,101,0,78,111,32,110,97,109,101,32,100,101,99,111,114,97,116,105,111,110,32,102,111,114,32,101,120,112,111,114,116,101,100,32,115,121,109,98,111,108,115,0,45,122,122,115,0,83,116,111,114,101,32,100,101,99,111,114,97,116,101,100,32,110,97,109,101,32,111,102,32,115,116,97,114,116,32,97,100,100,114,101,115,115,32,40,67,79,70,70,32,111,110,108,121,41,0,64,101,110,118,95,118,97,114,0,69,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,111,114,32,102,105,108,101,32,99,111,110,116,97,105,110,105,110,103,32,102,117,114,116,104,101,114,32,99,111,109,109,97,110,100,115,0,111,117,116,112,117,116,32,102,111,114,109,97,116,115,58,0,0,45,98,105,110,0,112,108,97,105,110,32,98,105,110,97,114,121,32,102,105,108,101,0,45,99,111,102,102,0,67,79,70,70,32,111,98,106,101,99,116,32,102,105,108,101,0,45,101,108,102,0,51,50,45,98,105,116,32,69,76,70,32,111,98,106,101,99,116,32,102,105,108,101,0,45,101,108,102,54,52,0,54,52,45,98,105,116,32,69,76,70,32,111,98,106,101,99,116,32,102,105,108,101,0,45,109,122,0,68,79,83,32,77,90,32,98,105,110,97,114,121,32,102,105,108,101,0,45,111,109,102,0,79,77,70,32,111,98,106,101,99,116,32,102,105,108,101,32,40,100,101,102,97,117,108,116,41,0,45,112,101,0,80,69,32,98,105,110,97,114,121,32,102,105,108,101,44,32,51,50,47,54,52,45,98,105,116,0,45,119,105,110,54,52,0,54,52,45,98,105,116,32,67,79,70,70,32,111,98,106,101,99,116,32,102,105,108,101,0,10,0,37,45,50,48,115,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,78,79,69,78,84,0,37,115,32,65,37,52,117,58,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,115,0,0,101,120,112,97,110,115,46,99,0,101,120,112,114,101,118,97,108,46,99,0,64,64,0,65,66,83,0,0,0,0,70,95,95,82,81,81,0,0,87,68,69,67,83,65,70,71,106,109,112,0,106,109,112,32,37,115,0,37,115,58,0,108,111,111,112,32,37,115,0,46,105,102,45,46,114,101,112,101,97,116,45,46,119,104,105,108,101,0,108,111,111,112,101,0,108,111,111,112,0,64,67,37,48,52,88,0,37,115,58,10,0,58,10,0,104,108,108,46,99,0,106,109,112,32,0,90,69,82,79,0,67,65,82,82,89,0,83,73,71,78,0,80,65,82,73,84,89,0,79,86,69,82,70,76,79,87,0,122,99,115,112,111,97,110,100,0,99,109,112,0,106,109,112,32,64,67,37,48,52,88,10,0,116,101,115,116,0,111,114,0,122,122,103,108,108,103,122,122,97,98,98,97,0,1,0,0,1,1,44,32,37,100,0,37,115,40,37,117,41,32,58,32,0,37,115,32,58,32,0,77,97,99,114,111,76,111,111,112,0,114,98,0,105,110,112,117,116,46,99,0,32,99,97,108,108,32,0,32,101,120,116,101,114,110,100,101,102,32,37,114,32,37,115,58,32,37,114,32,37,114,0,32,101,120,116,101,114,110,100,101,102,32,37,115,58,32,37,114,32,37,114,0,32,97,100,100,32,37,114,44,32,37,117,0,32,112,117,115,104,32,37,115,0,32,108,101,97,32,37,114,44,32,37,115,0,32,112,117,115,104,32,37,114,0,32,100,98,32,54,54,104,0,32,109,111,118,32,37,114,44,32,111,102,102,115,101,116,32,37,115,0,32,112,117,115,104,100,32,37,114,32,37,115,0,32,112,117,115,104,119,32,37,114,32,37,115,0,32,112,117,115,104,32,37,114,32,37,115,0,32,115,117,98,32,37,114,44,32,50,0,32,112,117,115,104,32,119,111,114,100,32,112,116,114,32,37,115,43,37,117,0,32,112,117,115,104,32,37,114,32,112,116,114,32,37,115,43,37,117,0,32,109,111,118,115,120,32,37,114,44,32,37,115,0,32,109,111,118,32,37,114,44,32,37,115,0,32,120,111,114,32,37,114,44,32,37,114,0,32,112,117,115,104,32,48,0,32,109,111,118,32,37,114,44,32,48,0,32,99,98,119,0,32,99,119,100,0,122,0,115,0,32,109,111,118,37,115,120,32,37,114,44,32,37,115,0,32,112,117,115,104,119,32,48,0,32,109,111,118,32,37,114,44,32,37,114,32,40,37,115,41,0,119,0,100,0,32,112,117,115,104,37,115,32,40,37,115,41,32,115,104,114,32,51,50,116,0,32,112,117,115,104,119,32,37,114,32,40,37,115,41,0,32,112,117,115,104,100,32,37,114,32,40,37,115,41,0,32,112,117,115,104,37,115,32,37,114,32,40,37,115,41,0,32,112,117,115,104,37,115,32,37,115,0,115,101,103,32,0,32,109,111,118,32,91,37,114,43,37,117,93,44,32,37,114,0,32,109,111,118,32,37,114,32,112,116,114,32,91,37,114,43,37,117,93,44,32,37,114,32,40,32,37,115,32,41,0,32,109,111,118,32,37,114,32,112,116,114,32,91,37,114,43,37,117,93,44,32,37,115,0,32,109,111,118,32,37,114,32,112,116,114,32,91,37,114,43,37,117,43,48,93,44,32,37,114,32,40,37,115,41,0,32,109,111,118,32,37,114,32,112,116,114,32,91,37,114,43,37,117,43,52,93,44,32,37,114,32,40,37,115,41,0,32,109,111,118,115,120,100,32,37,114,44,32,37,115,0,32,109,111,118,113,32,37,114,44,32,37,115,0,32,109,111,118,100,32,37,114,44,32,37,114,0,32,109,111,118,32,37,114,44,32,37,114,32,112,116,114,32,37,115,0,32,109,111,118,100,32,37,114,44,32,37,115,0,32,97,100,100,32,37,114,44,32,37,100,0,32,115,117,98,32,37,114,44,32,37,100,0,37,114,32,37,115,44,32,37,114,0,37,114,32,37,115,44,32,37,115,0,37,114,32,37,115,44,32,37,114,32,37,115,0,109,111,118,32,37,115,44,32,37,114,32,40,37,115,41,0,109,111,118,32,37,115,44,32,37,115,0,109,111,118,32,37,115,44,32,37,114,32,37,114,32,37,115,91,37,117,93,0,109,111,118,115,120,0,109,111,118,122,120,0,32,37,115,32,37,114,44,32,37,115,0,76,38,95,37,48,52,117,0,108,105,110,110,117,109,46,99,0,36,36,36,37,48,53,117,0,37,48,56,88,0,37,48,50,88,0,37,45,50,53,108,108,88,0,37,45,50,53,88,0,10,0,37,117,0,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,32,46,0,37,115,32,37,115,32,32,32,32,32,32,32,32,0,37,115,91,37,117,93,0,37,45,49,48,115,32,0,32,37,56,88,104,32,0,32,37,108,108,88,104,32,0,45,37,48,56,88,104,32,0,37,115,32,0,37,115,61,37,117,32,0,99,111,117,110,116,0,42,37,115,32,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,115,32,32,32,37,115,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,115,32,32,37,115,0,37,115,32,37,115,32,0,66,121,116,101,0,87,111,114,100,0,68,87,111,114,100,0,70,87,111,114,100,0,81,87,111,114,100,0,84,66,121,116,101,0,80,97,114,97,0,88,109,109,87,111,114,100,0,80,97,103,101,0,78,101,97,114,0,78,101,97,114,49,54,0,78,101,97,114,51,50,0,78,101,97,114,54,52,0,70,97,114,0,70,97,114,49,54,0,70,97,114,51,50,0,70,97,114,54,52,0,76,32,78,101,97,114,0,76,32,78,101,97,114,49,54,0,76,32,78,101,97,114,51,50,0,76,32,78,101,97,114,54,52,0,76,32,70,97,114,0,76,32,70,97,114,49,54,0,76,32,70,97,114,51,50,0,76,32,70,97,114,54,52,0,80,116,114,0,80,114,111,99,0,70,117,110,99,0,78,117,109,98,101,114,0,80,114,105,118,97,116,101,0,83,116,97,99,107,0,80,117,98,108,105,99,0,67,111,109,109,111,110,0,69,120,116,101,114,110,97,108,0,85,110,100,101,102,105,110,101,100,0,78,111,32,83,101,103,0,84,101,120,116,0,65,108,105,97,115,0,65,98,115,0,67,79,77,77,0,86,65,82,65,82,71,0,67,0,83,89,83,67,65,76,76,0,83,84,68,67,65,76,76,0,80,65,83,67,65,76,0,70,79,82,84,82,65,78,0,66,65,83,73,67,0,70,65,83,84,67,65,76,76,0,77,97,99,114,111,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,121,112,101,0,83,116,114,117,99,116,117,114,101,115,32,97,110,100,32,85,110,105,111,110,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,105,122,101,47,79,102,115,32,32,32,84,121,112,101,0,82,101,99,111,114,100,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,87,105,100,116,104,32,32,32,35,32,102,105,101,108,100,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,104,105,102,116,32,32,32,87,105,100,116,104,32,32,32,32,77,97,115,107,32,32,32,73,110,105,116,105,97,108,0,84,121,112,101,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,105,122,101,32,32,32,32,65,116,116,114,0,83,101,103,109,101,110,116,115,32,97,110,100,32,71,114,111,117,112,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,105,122,101,32,32,32,32,32,76,101,110,103,116,104,32,32,32,65,108,105,103,110,32,32,32,67,111,109,98,105,110,101,32,67,108,97,115,115,0,80,114,111,99,101,100,117,114,101,115,44,32,112,97,114,97,109,101,116,101,114,115,32,97,110,100,32,108,111,99,97,108,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,121,112,101,32,32,32,32,32,86,97,108,117,101,32,32,32,32,83,101,103,109,101,110,116,32,32,76,101,110,103,116,104,0,83,121,109,98,111,108,115,58,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,78,32,97,32,109,32,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,121,112,101,32,32,32,32,32,32,32,86,97,108,117,101,32,32,32,32,32,65,116,116,114,0,37,115,32,37,115,32,32,32,32,32,32,32,32,80,32,37,45,54,115,32,37,48,56,88,32,37,45,56,115,32,0,37,115,32,37,115,32,32,32,32,32,32,32,32,80,32,37,45,54,115,32,37,48,52,88,32,32,32,32,32,37,45,56,115,32,0,37,48,42,88,32,0,37,45,57,115,0,42,37,45,56,115,32,0,37,45,57,115,32,0,40,37,46,56,115,41,32,0,32,32,0,32,32,37,115,32,37,115,32,32,32,32,32,32,32,32,37,45,49,55,115,32,37,115,0,32,32,37,115,32,37,115,32,32,32,32,32,32,32,32,37,45,49,55,115,32,37,115,32,37,99,32,37,48,52,88,0,32,32,37,115,32,37,115,32,32,32,32,32,32,32,32,76,32,37,45,54,115,32,37,48,56,88,32,37,115,0,32,32,37,115,32,37,115,32,32,32,32,32,32,32,32,76,32,37,45,54,115,32,37,48,52,88,32,32,32,32,32,37,115,0,32,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,115,0,51,50,32,66,105,116,32,32,32,37,48,56,88,32,0,54,52,32,66,105,116,32,32,32,37,48,56,88,32,0,49,54,32,66,105,116,32,32,32,37,48,52,88,32,32,32,32,32,0,37,45,55,115,32,37,45,56,115,0,39,37,115,39,0,37,115,32,37,115,32,32,32,32,37,56,117,32,32,37,115,0,37,115,32,37,115,32,32,32,32,32,32,37,54,88,32,32,37,55,88,0,32,32,37,115,32,37,115,32,32,32,32,32,32,37,54,88,32,32,37,55,88,32,32,37,48,49,54,108,108,88,32,37,115,0,32,32,37,115,32,37,115,32,32,32,32,32,32,37,54,88,32,32,37,55,88,32,32,37,48,56,88,32,37,115,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,56,88,32,40,37,117,41,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,56,88,0,37,115,32,37,115,32,32,32,32,32,32,32,32,37,56,88,32,32,32,0,91,37,117,93,0,37,88,0,82,69,81,0,86,65,82,65,82,71,77,76,0,109,97,99,114,111,32,110,97,109,101,0,64,69,110,118,105,114,111,110,0,60,62,34,39,0,74,87,65,83,77,0,37,115,0,64,37,115,64,37,117,0,95,37,115,64,37,100,0,74,87,97,115,109,32,118,50,46,49,50,0,77,115,103,32,37,117,0,117,115,97,103,101,58,32,74,87,97,115,109,32,91,32,111,112,116,105,111,110,115,32,93,32,102,105,108,101,108,105,115,116,32,91,64,101,110,118,95,118,97,114,93,10,82,117,110,32,34,74,87,97,115,109,32,45,63,34,32,111,114,32,34,74,87,97,115,109,32,45,104,34,32,102,111,114,32,109,111,114,101,32,105,110,102,111,10,0,37,115,58,32,37,108,117,32,108,105,110,101,115,44,32,37,117,32,112,97,115,115,101,115,44,32,37,117,32,109,115,44,32,37,117,32,119,97,114,110,105,110,103,115,44,32,37,117,32,101,114,114,111,114,115,0,74,87,97,115,109,32,118,50,46,49,50,112,114,101,44,32,68,101,99,32,32,51,32,50,48,49,53,0,77,97,115,109,45,99,111,109,112,97,116,105,98,108,101,32,97,115,115,101,109,98,108,101,114,46,10,80,111,114,116,105,111,110,115,32,67,111,112,121,114,105,103,104,116,32,40,99,41,32,49,57,57,50,45,50,48,48,50,32,83,121,98,97,115,101,44,32,73,110,99,46,32,65,108,108,32,82,105,103,104,116,115,32,82,101,115,101,114,118,101,100,46,10,83,111,117,114,99,101,32,99,111,100,101,32,105,115,32,97,118,97,105,108,97,98,108,101,32,117,110,100,101,114,32,116,104,101,32,83,121,98,97,115,101,32,79,112,101,110,32,87,97,116,99,111,109,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,46,10,0,69,114,114,111,114,0,87,97,114,110,105,110,103,0,70,97,116,97,108,32,101,114,114,111,114,0,114,101,97,100,111,110,108,121,0,97,108,105,103,110,109,101,110,116,0,99,111,109,98,105,110,101,0,115,101,103,109,101,110,116,32,119,111,114,100,32,115,105,122,101,0,99,108,97,115,115,0,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,0,97,108,105,97,115,0,86,97,108,117,101,32,110,111,116,32,119,105,116,104,105,110,32,97,108,108,111,119,101,100,32,114,97,110,103,101,32,37,115,0,73,110,118,97,108,105,100,32,97,115,115,111,99,105,97,116,101,100,32,115,101,103,109,101,110,116,58,32,37,115,0,73,110,115,116,114,117,99,116,105,111,110,32,112,114,101,102,105,120,32,110,111,116,32,97,108,108,111,119,101,100,0,77,117,108,116,105,112,108,101,32,98,97,115,101,32,114,101,103,105,115,116,101,114,115,32,110,111,116,32,97,108,108,111,119,101,100,0,73,110,115,116,114,117,99,116,105,111,110,32,111,114,32,114,101,103,105,115,116,101,114,32,110,111,116,32,97,99,99,101,112,116,101,100,32,105,110,32,99,117,114,114,101,110,116,32,67,80,85,32,109,111,100,101,0,105,110,118,97,108,105,100,32,97,100,100,114,101,115,115,105,110,103,32,109,111,100,101,32,119,105,116,104,32,99,117,114,114,101,110,116,32,67,80,85,32,115,101,116,116,105,110,103,0,67,97,110,110,111,116,32,117,115,101,32,84,82,37,117,45,84,82,37,117,32,119,105,116,104,32,99,117,114,114,101,110,116,32,67,80,85,32,115,101,116,116,105,110,103,0,77,117,115,116,32,98,101,32,105,110,100,101,120,32,111,114,32,98,97,115,101,32,114,101,103,105,115,116,101,114,0,77,117,108,116,105,112,108,101,32,105,110,100,101,120,32,114,101,103,105,115,116,101,114,115,32,110,111,116,32,97,108,108,111,119,101,100,0,84,111,111,32,102,101,119,32,98,105,116,115,32,105,110,32,82,69,67,79,82,68,58,32,37,115,0,83,99,97,108,101,32,102,97,99,116,111,114,32,109,117,115,116,32,98,101,32,49,44,32,50,44,32,52,32,111,114,32,56,0,67,97,110,110,111,116,32,98,101,32,117,115,101,100,32,97,115,32,105,110,100,101,120,32,114,101,103,105,115,116,101,114,58,32,37,115,0,66,97,115,101,32,97,110,100,32,105,110,100,101,120,32,114,101,103,105,115,116,101,114,32,100,105,102,102,101,114,32,105,110,32,115,105,122,101,0,69,120,112,101,99,116,105,110,103,32,99,111,109,109,97,58,32,37,115,0,79,82,71,32,110,101,101,100,115,32,97,32,99,111,110,115,116,97,110,116,32,111,114,32,108,111,99,97,108,32,111,102,102,115,101,116,0,80,79,80,32,67,83,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,0,79,110,108,121,32,77,79,86,32,99,97,110,32,117,115,101,32,115,112,101,99,105,97,108,32,114,101,103,105,115,116,101,114,0,67,97,110,110,111,116,32,117,115,101,32,83,72,79,82,84,32,119,105,116,104,32,67,65,76,76,0,79,110,108,121,32,83,72,79,82,84,32,106,117,109,112,32,100,105,115,116,97,110,99,101,32,105,115,32,97,108,108,111,119,101,100,0,83,121,110,116,97,120,32,101,114,114,111,114,0,80,114,101,102,105,120,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,110,32,105,110,115,116,114,117,99,116,105,111,110,0,83,121,110,116,97,120,32,101,114,114,111,114,58,32,85,110,101,120,112,101,99,116,101,100,32,99,111,108,111,110,0,79,112,101,114,97,110,100,115,32,109,117,115,116,32,98,101,32,116,104,101,32,115,97,109,101,32,115,105,122,101,58,32,37,117,32,45,32,37,117,0,73,110,118,97,108,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,111,112,101,114,97,110,100,115,0,74,117,109,112,32,100,105,115,116,97,110,99,101,32,110,111,116,32,112,111,115,115,105,98,108,101,32,105,110,32,99,117,114,114,101,110,116,32,67,80,85,32,109,111,100,101,0,73,109,109,101,100,105,97,116,101,32,100,97,116,97,32,111,117,116,32,111,102,32,114,97,110,103,101,0,67,97,110,32,110,111,116,32,117,115,101,32,115,104,111,114,116,32,111,114,32,110,101,97,114,32,109,111,100,105,102,105,101,114,115,32,119,105,116,104,32,116,104,105,115,32,105,110,115,116,114,117,99,116,105,111,110,0,74,117,109,112,32,111,117,116,32,111,102,32,114,97,110,103,101,32,98,121,32,37,100,32,98,121,116,101,40,115,41,0,68,105,115,112,108,97,99,101,109,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,58,32,48,120,37,108,108,88,0,73,110,105,116,105,97,108,105,122,101,114,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,0,83,121,109,98,111,108,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,58,32,37,115,0,79,102,102,115,101,116,32,109,97,103,110,105,116,117,100,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,112,101,99,105,102,105,101,100,32,115,105,122,101,0,77,97,103,110,105,116,117,100,101,32,111,102,32,111,102,102,115,101,116,32,101,120,99,101,101,100,115,32,49,54,32,98,105,116,0,79,112,101,114,97,110,100,32,50,32,116,111,111,32,98,105,103,0,79,112,101,114,97,110,100,32,49,32,116,111,111,32,115,109,97,108,108,0,76,105,110,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,116,111,107,101,110,115,32,105,110,32,97,32,108,105,110,101,0,83,121,109,98,111,108,32,110,111,116,32,100,101,102,105,110,101,100,32,58,32,37,115,46,37,115,0,69,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,58,32,37,115,0,67,111,110,115,116,97,110,116,32,101,120,112,101,99,116,101,100,0,67,111,110,115,116,97,110,116,32,111,112,101,114,97,110,100,32,105,115,32,101,120,112,101,99,116,101,100,0,46,69,76,83,69,32,99,108,97,117,115,101,32,97,108,114,101,97,100,121,32,111,99,99,117,114,101,100,32,105,110,32,116,104,105,115,32,46,73,70,32,98,108,111,99,107,0,77,117,108,116,105,112,108,101,32,111,118,101,114,114,105,100,101,115,0,83,101,103,109,101,110,116,44,32,103,114,111,117,112,32,111,114,32,115,101,103,109,101,110,116,32,114,101,103,105,115,116,101,114,32,101,120,112,101,99,116,101,100,0,73,100,101,110,116,105,102,105,101,114,32,116,111,111,32,108,111,110,103,0,73,110,118,97,108,105,100,32,111,112,101,114,97,110,100,32,115,105,122,101,32,102,111,114,32,105,110,115,116,114,117,99,116,105,111,110,0,78,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,115,0,83,105,122,101,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,97,115,115,117,109,105,110,103,58,32,37,115,0,70,108,111,97,116,105,110,103,45,112,111,105,110,116,32,105,110,105,116,105,97,108,105,122,101,114,32,105,103,110,111,114,101,100,0,79,110,108,121,32,83,72,79,82,84,32,97,110,100,32,78,69,65,82,32,106,117,109,112,32,100,105,115,116,97,110,99,101,32,105,115,32,97,108,108,111,119,101,100,0,73,110,105,116,105,97,108,105,122,101,114,32,109,97,103,110,105,116,117,100,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,112,101,99,105,102,105,101,100,32,115,105,122,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81560);
/* memory initializer */ allocate([83,101,103,109,101,110,116,32,97,116,116,114,105,98,117,116,101,32,105,115,32,100,101,102,105,110,101,100,32,97,108,114,101,97,100,121,58,32,37,115,0,83,101,103,109,101,110,116,32,100,101,102,105,110,105,116,105,111,110,32,99,104,97,110,103,101,100,58,32,37,115,44,32,37,115,0,67,108,97,115,115,32,110,97,109,101,32,116,111,111,32,108,111,110,103,0,66,108,111,99,107,32,110,101,115,116,105,110,103,32,101,114,114,111,114,58,32,37,115,0,83,101,103,109,101,110,116,32,97,116,116,114,105,98,117,116,101,32,105,115,32,117,110,107,110,111,119,110,58,32,37,115,0,77,117,115,116,32,98,101,32,105,110,32,115,101,103,109,101,110,116,32,98,108,111,99,107,0,83,101,103,109,101,110,116,32,110,111,116,32,100,101,102,105,110,101,100,58,32,37,115,0,67,111,108,111,110,32,105,115,32,101,120,112,101,99,116,101,100,0,73,110,118,97,108,105,100,32,113,117,97,108,105,102,105,101,100,32,116,121,112,101,58,32,37,115,0,81,117,97,108,105,102,105,101,100,32,116,121,112,101,32,105,115,32,101,120,112,101,99,116,101,100,0,77,105,115,115,105,110,103,32,109,97,99,114,111,32,97,114,103,117,109,101,110,116,58,32,105,116,101,114,97,116,105,111,110,32,37,117,0,76,105,98,114,97,114,121,32,110,97,109,101,32,105,115,32,109,105,115,115,105,110,103,0,67,97,110,110,111,116,32,97,99,99,101,115,115,32,108,97,98,101,108,32,116,104,114,111,117,103,104,32,115,101,103,109,101,110,116,32,114,101,103,105,115,116,101,114,115,58,32,37,115,0,76,105,110,101,32,116,111,111,32,108,111,110,103,32,97,102,116,101,114,32,101,120,112,97,110,115,105,111,110,58,32,37,52,48,115,0,76,97,110,103,117,97,103,101,32,116,121,112,101,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,0,80,82,79,67,44,32,77,65,67,82,79,32,111,114,32,109,97,99,114,111,32,108,111,111,112,32,100,105,114,101,99,116,105,118,101,32,109,117,115,116,32,112,114,101,99,101,100,101,32,76,79,67,65,76,0,67,97,110,110,111,116,32,110,101,115,116,32,112,114,111,99,101,100,117,114,101,115,0,86,65,82,65,82,71,32,114,101,113,117,105,114,101,115,32,67,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,0,77,117,108,116,105,112,108,101,32,46,77,79,68,69,76,32,100,105,114,101,99,116,105,118,101,115,44,32,46,77,79,68,69,76,32,105,103,110,111,114,101,100,0,77,111,100,101,108,32,105,115,32,110,111,116,32,100,101,99,108,97,114,101,100,0,66,97,99,107,113,117,111,116,101,32,109,105,115,115,105,110,103,58,32,96,37,115,0,67,79,77,77,69,78,84,32,100,101,108,105,109,105,116,101,114,32,101,120,112,101,99,116,101,100,0,69,78,68,32,100,105,114,101,99,116,105,118,101,32,114,101,113,117,105,114,101,100,32,97,116,32,101,110,100,32,111,102,32,102,105,108,101,0,78,101,115,116,105,110,103,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,0,77,97,99,114,111,32,110,101,115,116,105,110,103,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,0,83,121,109,98,111,108,32,110,111,116,32,100,101,102,105,110,101,100,32,58,32,37,115,0,76,97,110,103,117,97,103,101,32,97,116,116,114,105,98,117,116,101,32,99,111,110,102,108,105,99,116,58,32,37,115,0,78,111,32,102,105,108,101,110,97,109,101,32,115,112,101,99,105,102,105,101,100,46,0,79,117,116,32,111,102,32,77,101,109,111,114,121,0,67,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,58,32,34,37,115,34,32,91,37,115,93,0,67,97,110,110,111,116,32,99,108,111,115,101,32,102,105,108,101,58,32,37,115,32,91,37,117,93,0,70,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,58,32,37,115,32,91,37,117,93,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,45,108,105,110,101,32,111,112,116,105,111,110,58,32,37,115,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,37,115,40,37,117,41,10,0,69,120,112,101,99,116,105,110,103,32,99,108,111,115,105,110,103,32,115,113,117,97,114,101,32,98,114,97,99,107,101,116,0,69,120,112,101,99,116,105,110,103,32,102,105,108,101,32,110,97,109,101,0,84,111,111,32,109,97,110,121,32,101,114,114,111,114,115,0,102,111,114,99,101,100,32,101,114,114,111,114,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,86,97,108,117,101,32,110,111,116,32,101,113,117,97,108,32,116,111,32,48,58,32,37,100,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,86,97,108,117,101,32,101,113,117,97,108,32,116,111,32,48,58,32,37,100,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,121,109,98,111,108,32,100,101,102,105,110,101,100,58,32,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,121,109,98,111,108,32,110,111,116,32,100,101,102,105,110,101,100,58,32,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,116,114,105,110,103,32,98,108,97,110,107,32,58,32,60,37,115,62,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,116,114,105,110,103,32,110,111,116,32,98,108,97,110,107,32,58,32,60,37,115,62,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,116,114,105,110,103,115,32,110,111,116,32,101,113,117,97,108,32,58,32,60,37,115,62,32,58,32,60,37,115,62,37,115,0,102,111,114,99,101,100,32,101,114,114,111,114,58,32,115,116,114,105,110,103,115,32,101,113,117,97,108,32,58,32,60,37,115,62,32,58,32,60,37,115,62,37,115,0,37,42,115,37,115,40,37,117,41,58,32,73,110,99,108,117,100,101,100,32,98,121,0,37,42,115,37,115,40,37,117,41,91,37,115,93,58,32,77,97,99,114,111,32,99,97,108,108,101,100,32,102,114,111,109,0,37,42,115,37,115,40,37,117,41,58,32,105,116,101,114,97,116,105,111,110,32,37,117,58,32,77,97,99,114,111,32,99,97,108,108,101,100,32,102,114,111,109,0,37,42,115,37,115,40,37,117,41,58,32,77,97,105,110,32,108,105,110,101,32,99,111,100,101,0,69,120,116,101,110,100,105,110,103,32,106,117,109,112,0,68,105,114,101,99,116,105,118,101,32,105,103,110,111,114,101,100,58,32,37,115,0,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,97,32,112,111,119,101,114,32,111,102,32,50,58,32,37,117,0,73,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,115,101,103,109,101,110,116,32,97,108,105,103,110,109,101,110,116,58,32,37,115,0,83,101,103,109,101,110,116,32,101,120,112,101,99,116,101,100,58,32,37,115,0,73,110,99,111,109,112,97,116,105,98,108,101,32,67,80,85,32,109,111,100,101,32,102,111,114,32,37,117,45,98,105,116,32,115,101,103,109,101,110,116,0,70,97,114,32,99,97,108,108,32,105,115,32,99,111,110,118,101,114,116,101,100,32,116,111,32,110,101,97,114,32,99,97,108,108,46,0,67,80,85,32,111,112,116,105,111,110,32,37,115,32,105,115,32,110,111,116,32,118,97,108,105,100,32,102,111,114,32,115,101,108,101,99,116,101,100,32,67,80,85,46,0,83,101,103,109,101,110,116,32,39,37,115,39,32,105,115,32,105,110,32,97,110,111,116,104,101,114,32,103,114,111,117,112,32,97,108,114,101,97,100,121,0,83,121,109,98,111,108,32,116,121,112,101,32,99,111,110,102,108,105,99,116,58,32,37,115,0,67,111,110,102,108,105,99,116,105,110,103,32,112,97,114,97,109,101,116,101,114,32,100,101,102,105,110,105,116,105,111,110,58,32,37,115,0,80,82,79,67,32,97,110,100,32,80,82,79,84,79,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,32,99,111,110,102,108,105,99,116,0,78,111,110,45,98,101,110,105,103,110,32,37,115,32,114,101,100,101,102,105,110,105,116,105,111,110,58,32,37,115,0,84,111,111,32,109,97,110,121,32,98,105,116,115,32,105,110,32,82,69,67,79,82,68,58,32,37,115,0,83,116,97,116,101,109,101,110,116,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,115,105,100,101,32,115,116,114,117,99,116,117,114,101,32,100,101,102,105,110,105,116,105,111,110,0,85,110,109,97,116,99,104,101,100,32,98,108,111,99,107,32,110,101,115,116,105,110,103,58,32,37,115,0,83,121,109,98,111,108,32,114,101,100,101,102,105,110,105,116,105,111,110,58,32,37,115,0,84,101,120,116,32,105,116,101,109,32,114,101,113,117,105,114,101,100,0,73,78,86,79,75,69,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,97,114,103,117,109,101,110,116,32,37,117,0,84,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,32,116,111,32,73,78,86,79,75,69,58,32,37,115,0,86,65,82,65,82,71,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,98,101,32,108,97,115,116,0,76,65,66,69,76,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,98,101,32,102,105,114,115,116,0,84,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,105,110,32,109,97,99,114,111,32,99,97,108,108,58,32,37,115,58,32,37,115,0,77,105,115,115,105,110,103,32,111,112,101,114,97,116,111,114,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,85,110,101,120,112,101,99,116,101,100,32,108,105,116,101,114,97,108,32,102,111,117,110,100,32,105,110,32,101,120,112,114,101,115,115,105,111,110,58,32,37,115,0,73,110,105,116,105,97,108,105,122,101,114,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,32,111,114,32,115,105,110,103,108,101,32,105,116,101,109,58,32,37,115,0,84,111,111,32,109,97,110,121,32,105,110,105,116,105,97,108,32,118,97,108,117,101,115,32,102,111,114,32,115,116,114,117,99,116,117,114,101,58,32,37,115,0,84,111,111,32,109,97,110,121,32,105,110,105,116,105,97,108,32,118,97,108,117,101,115,32,102,111,114,32,97,114,114,97,121,58,32,37,115,0,83,116,114,105,110,103,32,111,114,32,116,101,120,116,32,108,105,116,101,114,97,108,32,116,111,111,32,108,111,110,103,0,80,82,79,76,79,71,85,69,32,109,117,115,116,32,98,101,32,109,97,99,114,111,32,102,117,110,99,116,105,111,110,0,69,80,73,76,79,71,85,69,32,109,117,115,116,32,98,101,32,109,97,99,114,111,32,112,114,111,99,101,100,117,114,101,58,32,37,115,0,82,101,115,101,114,118,101,100,32,119,111,114,100,32,101,120,112,101,99,116,101,100,0,73,78,86,79,75,69,32,114,101,113,117,105,114,101,115,32,112,114,111,116,111,116,121,112,101,32,102,111,114,32,112,114,111,99,101,100,117,114,101,0,73,110,118,97,108,105,100,32,116,121,112,101,32,102,111,114,32,100,97,116,97,32,100,101,99,108,97,114,97,116,105,111,110,58,32,37,115,0,79,112,101,114,97,110,100,32,109,117,115,116,32,98,101,32,82,69,67,79,82,68,32,116,121,112,101,32,111,114,32,102,105,101,108,100,0,85,110,109,97,116,99,104,101,100,32,109,97,99,114,111,32,110,101,115,116,105,110,103,0,69,109,112,116,121,32,40,110,117,108,108,41,32,115,116,114,105,110,103,0,78,111,32,115,101,103,109,101,110,116,32,105,110,102,111,114,109,97,116,105,111,110,32,116,111,32,99,114,101,97,116,101,32,102,105,120,117,112,58,32,37,115,0,82,101,103,105,115,116,101,114,32,118,97,108,117,101,32,111,118,101,114,119,114,105,116,116,101,110,32,98,121,32,73,78,86,79,75,69,0,77,105,115,115,105,110,103,32,113,117,111,116,97,116,105,111,110,32,109,97,114,107,32,105,110,32,115,116,114,105,110,103,0,68,105,118,105,100,101,32,98,121,32,122,101,114,111,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,71,101,110,101,114,97,108,32,70,97,105,108,117,114,101,0,67,97,110,110,111,116,32,104,97,118,101,32,105,109,112,108,105,99,105,116,32,102,97,114,32,106,117,109,112,32,111,114,32,99,97,108,108,32,116,111,32,110,101,97,114,32,108,97,98,101,108,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,114,101,103,105,115,116,101,114,0,68,105,115,116,97,110,99,101,32,105,110,118,97,108,105,100,32,102,111,114,32,99,117,114,114,101,110,116,32,115,101,103,109,101,110,116,0,73,110,105,116,105,97,108,105,122,101,114,32,109,97,103,110,105,116,117,100,101,32,116,111,111,32,108,97,114,103,101,58,32,37,115,0,67,97,110,110,111,116,32,97,100,100,32,116,119,111,32,114,101,108,111,99,97,116,97,98,108,101,32,108,97,98,101,108,115,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,115,32,112,117,98,108,105,99,32,111,114,32,101,120,116,101,114,110,97,108,58,32,37,115,0,80,111,115,105,116,105,118,101,32,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,70,65,82,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,70,76,65,84,32,109,111,100,101,108,32,67,79,77,77,32,118,97,114,105,97,98,108,101,115,0,84,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,73,78,86,79,75,69,0,68,105,114,101,99,116,105,118,101,32,109,117,115,116,32,97,112,112,101,97,114,32,105,110,115,105,100,101,32,97,32,109,97,99,114,111,0,73,110,118,97,108,105,100,32,116,121,112,101,32,101,120,112,114,101,115,115,105,111,110,0,67,97,110,110,111,116,32,100,101,99,108,97,114,101,32,115,99,111,112,101,100,32,99,111,100,101,32,108,97,98,101,108,32,97,115,32,80,85,66,76,73,67,58,32,37,115,0,73,110,118,97,108,105,100,32,114,97,100,105,120,32,116,97,103,0,73,110,115,116,114,117,99,116,105,111,110,32,111,112,101,114,97,110,100,32,109,117,115,116,32,104,97,118,101,32,115,105,122,101,0,85,115,101,32,111,102,32,114,101,103,105,115,116,101,114,32,97,115,115,117,109,101,100,32,116,111,32,69,82,82,79,82,0,73,110,115,116,114,117,99,116,105,111,110,115,32,97,110,100,32,105,110,105,116,105,97,108,105,122,101,100,32,100,97,116,97,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,37,115,32,115,101,103,109,101,110,116,115,0,76,105,116,101,114,97,108,32,101,120,112,101,99,116,101,100,32,97,102,116,101,114,32,39,61,39,0,76,105,110,101,32,110,117,109,98,101,114,32,105,110,102,111,114,109,97,116,105,111,110,32,102,111,114,32,115,101,103,109,101,110,116,32,119,105,116,104,111,117,116,32,99,108,97,115,115,32,39,67,79,68,69,39,58,32,37,115,0,79,112,101,114,97,110,100,32,109,117,115,116,32,98,101,32,114,101,108,111,99,97,116,97,98,108,101,0,67,111,110,115,116,97,110,116,32,111,114,32,114,101,108,111,99,97,116,97,98,108,101,32,108,97,98,101,108,32,101,120,112,101,99,116,101,100,0,91,69,76,83,69,93,73,70,50,47,46,69,82,82,50,32,110,111,116,32,97,108,108,111,119,101,100,44,32,115,105,110,103,108,101,45,112,97,115,115,32,97,115,115,101,109,98,108,101,114,0,69,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,32,102,111,114,32,85,78,84,73,76,67,88,90,0,79,112,101,114,97,110,100,115,32,109,117,115,116,32,98,101,32,105,110,32,115,97,109,101,32,115,101,103,109,101,110,116,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,101,120,116,101,114,110,97,108,32,115,121,109,98,111,108,58,32,37,115,0,70,111,114,32,45,99,111,102,102,32,108,101,97,100,105,110,103,32,117,110,100,101,114,115,99,111,114,101,32,114,101,113,117,105,114,101,100,32,102,111,114,32,115,116,97,114,116,32,108,97,98,101,108,58,32,37,115,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,45,108,105,110,101,32,118,97,108,117,101,44,32,100,101,102,97,117,108,116,32,105,115,32,117,115,101,100,58,32,45,37,115,0,85,110,107,110,111,119,110,32,102,105,120,117,112,32,116,121,112,101,58,32,37,117,32,97,116,32,37,115,46,37,108,88,0,85,110,115,117,112,112,111,114,116,101,100,32,102,105,120,117,112,32,116,121,112,101,32,102,111,114,32,37,115,58,32,37,115,0,73,110,118,97,108,105,100,32,102,105,120,117,112,32,116,121,112,101,32,102,111,114,32,37,115,58,32,37,117,32,97,116,32,108,111,99,97,116,105,111,110,32,37,115,46,37,108,88,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,99,111,110,116,114,111,108,45,102,108,111,119,32,100,105,114,101,99,116,105,118,101,0,73,110,118,97,108,105,100,32,46,109,111,100,101,108,32,112,97,114,97,109,101,116,101,114,32,102,111,114,32,102,108,97,116,32,109,111,100,101,108,0,79,117,116,112,117,116,32,102,111,114,109,97,116,32,100,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,101,120,116,101,114,110,97,108,115,58,32,37,115,0,73,110,118,97,108,105,100,32,115,116,97,114,116,32,108,97,98,101,108,32,102,111,114,32,45,98,105,110,0,78,111,32,115,116,97,114,116,32,108,97,98,101,108,32,100,101,102,105,110,101,100,0,78,111,32,115,116,97,99,107,32,100,101,102,105,110,101,100,0,73,110,118,97,108,105,100,32,97,108,105,103,110,109,101,110,116,32,45,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,50,94,110,32,40,110,61,52,46,46,49,53,41,0,73,110,100,101,120,32,118,97,108,117,101,32,112,97,115,116,32,101,110,100,32,111,102,32,115,116,114,105,110,103,58,32,37,100,0,67,111,117,110,116,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,0,67,111,117,110,116,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,111,114,32,122,101,114,111,0,83,121,110,116,97,120,32,101,114,114,111,114,58,32,37,115,0,84,111,111,32,109,97,110,121,32,117,110,119,105,110,100,32,99,111,100,101,115,32,105,110,32,70,82,65,77,69,32,112,114,111,99,101,100,117,114,101,0,77,111,100,101,108,32,109,117,115,116,32,98,101,32,70,76,65,84,0,77,117,115,116,32,117,115,101,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,105,110,105,116,105,97,108,105,122,101,114,0,79,82,71,32,100,105,114,101,99,116,105,118,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,117,110,105,111,110,115,0,83,116,114,117,99,116,32,97,108,105,103,110,109,101,110,116,32,109,117,115,116,32,98,101,32,49,44,32,50,44,32,52,44,32,56,44,32,49,54,32,111,114,32,51,50,0,83,116,114,117,99,116,117,114,101,32,99,97,110,110,111,116,32,98,101,32,105,110,115,116,97,110,99,101,100,0,77,105,115,115,105,110,103,32,97,110,103,108,101,32,98,114,97,99,107,101,116,32,111,114,32,98,114,97,99,101,32,105,110,32,108,105,116,101,114,97,108,0,78,111,110,100,105,103,105,116,32,105,110,32,110,117,109,98,101,114,58,32,37,115,0,49,54,98,105,116,32,102,105,120,117,112,32,102,111,114,32,51,50,98,105,116,32,108,97,98,101,108,58,32,37,115,0,84,111,111,32,109,97,110,121,32,109,97,99,114,111,32,112,108,97,99,101,104,111,108,100,101,114,115,0,77,105,115,115,105,110,103,32,109,97,99,114,111,32,97,114,103,117,109,101,110,116,58,32,37,115,44,32,112,97,114,97,109,101,116,101,114,32,37,117,0,68,111,101,115,110,39,116,32,119,111,114,107,32,119,105,116,104,32,51,50,45,98,105,116,32,115,101,103,109,101,110,116,115,58,32,37,115,0,83,101,103,109,101,110,116,32,101,120,99,101,101,100,115,32,54,52,107,32,108,105,109,105,116,58,32,37,115,0,78,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,79,77,70,32,102,111,114,109,97,116,58,32,37,115,0,78,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,99,117,114,114,101,110,116,32,111,117,116,112,117,116,32,102,111,114,109,97,116,58,32,37,115,0,85,110,107,110,111,119,110,32,100,101,102,97,117,108,116,32,112,114,111,108,111,103,117,101,32,97,114,103,117,109,101,110,116,58,32,37,115,0,76,79,65,68,68,83,32,105,103,110,111,114,101,100,32,105,110,32,102,108,97,116,32,109,111,100,101,108,0,77,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,73,110,118,97,108,105,100,32,111,112,101,114,97,110,100,32,102,111,114,32,37,115,58,32,37,115,0,83,116,114,117,99,116,117,114,101,32,105,109,112,114,111,112,101,114,108,121,32,105,110,105,116,105,97,108,105,122,101,100,58,32,37,115,0,69,120,112,101,99,116,101,100,58,32,37,115,0,73,110,118,97,108,105,100,32,100,97,116,97,32,105,110,105,116,105,97,108,105,122,101,114,58,32,37,115,0,69,120,112,101,99,116,101,100,32,100,97,116,97,32,108,97,98,101,108,0,69,120,112,114,101,115,115,105,111,110,32,109,117,115,116,32,98,101,32,97,32,99,111,100,101,32,97,100,100,114,101,115,115,0,45,110,32,79,112,116,105,111,110,32,110,101,101,100,115,32,97,32,118,97,108,105,100,32,110,97,109,101,32,112,97,114,97,109,101,116,101,114,0,67,111,110,115,116,97,110,116,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,58,32,37,108,108,88,104,0,84,101,120,116,32,109,97,99,114,111,32,117,115,101,100,32,112,114,105,111,114,32,116,111,32,100,101,102,105,110,105,116,105,111,110,58,32,37,115,0,79,102,102,115,101,116,32,115,105,122,101,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,99,117,114,114,101,110,116,32,115,101,103,109,101,110,116,0,73,110,115,116,114,117,99,116,105,111,110,32,102,111,114,109,32,114,101,113,117,105,114,101,115,32,56,48,51,56,54,0,71,114,111,117,112,47,83,101,103,109,101,110,116,32,111,102,102,115,101,116,32,115,105,122,101,32,99,111,110,102,108,105,99,116,58,32,37,115,32,45,32,37,115,0,65,115,115,101,109,98,108,121,32,112,97,115,115,101,115,32,114,101,97,99,104,101,100,58,32,37,117,0,70,105,108,101,110,97,109,101,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,98,101,32,101,110,99,108,111,115,101,100,32,105,110,32,60,62,32,111,114,32,113,117,111,116,101,115,0,83,116,97,114,116,32,97,100,100,114,101,115,115,32,111,110,32,69,78,68,32,100,105,114,101,99,116,105,118,101,32,105,103,110,111,114,101,100,32,119,105,116,104,32,46,83,84,65,82,84,85,80,0,73,110,118,97,108,105,100,32,115,121,109,98,111,108,32,116,121,112,101,32,105,110,32,101,120,112,114,101,115,115,105,111,110,58,32,37,115,0,77,105,115,115,105,110,103,32,114,105,103,104,116,32,112,97,114,101,110,116,104,101,115,105,115,0,68,105,114,101,99,116,105,118,101,32,109,117,115,116,32,98,101,32,105,110,32,99,111,110,116,114,111,108,32,98,108,111,99,107,0,69,120,112,101,99,116,101,100,58,32,109,101,109,111,114,121,32,109,111,100,101,108,0,84,121,112,101,32,105,115,32,119,114,111,110,103,32,115,105,122,101,32,102,111,114,32,114,101,103,105,115,116,101,114,0,73,70,91,110,93,68,69,70,32,101,120,112,101,99,116,115,32,97,32,112,108,97,105,110,32,115,121,109,98,111,108,32,97,115,32,97,114,103,117,109,101,110,116,58,32,37,115,0,74,117,109,112,32,100,101,115,116,105,110,97,116,105,111,110,32,109,117,115,116,32,115,112,101,99,105,102,121,32,97,32,108,97,98,101,108,0,73,103,110,111,114,101,100,58,32,37,115,0,77,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,32,102,111,114,32,99,109,100,108,105,110,101,32,111,112,116,105,111,110,0,73,110,118,97,108,105,100,32,99,111,112,114,111,99,101,115,115,111,114,32,114,101,103,105,115,116,101,114,0,82,101,103,105,115,116,101,114,115,32,65,72,45,68,72,32,109,97,121,32,110,111,116,32,98,101,32,117,115,101,100,32,119,105,116,104,32,83,80,76,45,68,73,76,32,111,114,32,82,56,45,82,49,53,0,46,69,78,68,80,82,79,76,79,71,32,102,111,117,110,100,32,98,101,102,111,114,101,32,69,72,32,100,105,114,101,99,116,105,118,101,115,0,77,105,115,115,105,110,103,32,70,82,65,77,69,32,105,110,32,80,82,79,67,44,32,110,111,32,117,110,119,105,110,100,32,99,111,100,101,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,0,66,97,100,32,97,108,105,103,110,109,101,110,116,32,102,111,114,32,111,102,102,115,101,116,32,105,110,32,117,110,119,105,110,100,32,99,111,100,101,0,78,111,110,122,101,114,111,32,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,83,105,122,101,32,111,102,32,112,114,111,108,111,103,32,116,111,111,32,98,105,103,44,32,109,117,115,116,32,98,101,32,60,32,50,53,54,32,98,121,116,101,115,0,77,105,115,115,105,110,103,32,46,69,78,68,80,82,79,76,79,71,58,32,37,115,0,46,83,65,70,69,83,69,72,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,80,82,79,67,0,68,105,114,101,99,116,105,118,101,32,105,103,110,111,114,101,100,32,119,105,116,104,111,117,116,32,45,37,115,32,115,119,105,116,99,104,0,69,76,70,32,71,78,85,32,101,120,116,101,110,115,105,111,110,115,32,40,56,47,49,54,45,98,105,116,32,114,101,108,111,99,97,116,105,111,110,115,41,32,117,115,101,100,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,77,97,99,114,111,32,108,97,98,101,108,32,110,111,116,32,100,101,102,105,110,101,100,58,32,37,115,0,80,114,111,99,101,100,117,114,101,32,97,114,103,117,109,101,110,116,32,111,114,32,108,111,99,97,108,32,110,111,116,32,114,101,102,101,114,101,110,99,101,100,58,32,37,115,0,71,114,111,117,112,32,100,101,102,105,110,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,44,32,116,114,117,110,99,97,116,101,100,58,32,37,115,0,67,79,77,77,32,118,97,114,105,97,98,108,101,32,101,120,99,101,101,100,115,32,54,52,75,58,32,37,115,0,77,117,115,116,32,98,101,32,112,117,98,108,105,99,32,111,114,32,101,120,116,101,114,110,97,108,58,32,37,115,0,112,97,114,97,109,101,116,101,114,47,108,111,99,97,108,32,110,97,109,101,32,105,115,32,114,101,115,101,114,118,101,100,32,119,111,114,100,58,32,37,115,0,114,101,97,108,32,111,114,32,66,67,68,32,110,117,109,98,101,114,32,110,111,116,32,97,108,108,111,119,101,100,0,115,116,114,117,99,116,117,114,101,32,102,105,101,108,100,32,101,120,112,101,99,116,101,100,0,67,111,110,115,116,97,110,116,32,118,97,108,117,101,32,116,111,111,32,108,97,114,103,101,58,32,37,108,108,88,37,48,49,54,108,108,88,104,0,69,76,83,69,32,99,108,97,117,115,101,32,97,108,114,101,97,100,121,32,111,99,99,117,114,101,100,32,105,110,32,116,104,105,115,32,73,70,32,98,108,111,99,107,0,73,108,108,101,103,97,108,32,117,115,101,32,111,102,32,115,101,103,109,101,110,116,32,114,101,103,105,115,116,101,114,0,71,114,111,117,112,32,101,120,99,101,101,100,115,32,54,52,75,58,32,37,115,0,69,88,80,79,82,84,32,109,117,115,116,32,98,101,32,70,65,82,58,32,37,115,0,0,1,0,111,109,102,46,99,0,1,67,86,0,36,36,83,89,77,66,79,76,83,0,68,69,66,83,89,77,0,36,36,84,89,80,69,83,0,68,69,66,84,89,80,0,111,109,102,102,105,120,117,112,46,99,0,111,109,102,105,110,116,46,99,0,6,0,0,0,5,7,1,0,8,0,9,1,3,1,2,0,4,4,0,0,0,0,0,0,1,2,1,8,1,0,1,0,0,10,11,1,2,1,68,79,84,78,65,77,69,0,78,79,68,79,84,78,65,77,69,0,77,53,49,48,0,78,79,77,53,49,48,0,83,67,79,80,69,68,0,78,79,83,67,79,80,69,68,0,79,76,68,83,84,82,85,67,84,83,0,78,79,79,76,68,83,84,82,85,67,84,83,0,69,77,85,76,65,84,79,82,0,78,79,69,77,85,76,65,84,79,82,0,76,74,77,80,0,78,79,76,74,77,80,0,78,79,82,69,65,68,79,78,76,89,0,79,76,68,77,65,67,82,79,83,0,78,79,79,76,68,77,65,67,82,79,83,0,69,88,80,82,49,54,0,69,88,80,82,51,50,0,78,79,83,73,71,78,69,88,84,69,78,68,0,67,65,83,69,77,65,80,0,80,82,79,67,0,80,82,79,76,79,71,85,69,0,69,80,73,76,79,71,85,69,0,76,65,78,71,85,65,71,69,0,78,79,75,69,89,87,79,82,68,0,83,69,84,73,70,50,0,79,70,70,83,69,84,0,83,69,71,77,69,78,84,0,70,73,69,76,68,65,76,73,71,78,0,80,82,79,67,65,76,73,71,78,0,77,90,0,70,82,65,77,69,0,69,76,70,0,82,69,78,65,77,69,75,69,89,87,79,82,68,0,87,73,78,54,52,0,68,76,76,73,77,80,79,82,84,0,67,79,68,69,86,73,69,87,0,83,84,65,67,75,66,65,83,69,0,64,83,116,97,99,107,66,97,115,101,0,64,80,114,111,99,83,116,97,116,117,115,0,78,79,78,69,0,95,95,105,109,112,95,0,95,105,109,112,95,0,65,85,84,79,0,78,79,65,85,84,79,0,71,82,79,85,80,0,84,82,85,69,0,70,65,76,83,69,0,69,80,73,76,79,71,85,69,68,69,70,0,80,82,79,76,79,71,85,69,68,69,70,0,78,79,84,80,85,66,76,73,67,0,65,76,76,0,3,46,139,192,139,192,144,7,141,164,36,0,0,0,0,141,128,0,0,0,0,46,141,68,32,0,141,68,32,0,141,64,0,139,255,144,7,15,31,128,0,0,0,0,102,15,31,68,0,0,15,31,68,0,0,15,31,64,0,15,31,0,102,144,144,69,88,80,79,82,84,0,70,79,82,67,69,70,82,65,77,69,0,76,79,65,68,68,83,0,85,83,69,83,0,112,114,111,99,46,99,0,0,0,0,0,0,37,100,37,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,58,37,115,0,97,100,100,32,37,114,44,32,37,100,32,43,32,37,115,0,112,111,112,32,37,114,0,108,101,97,118,101,0,97,100,100,32,37,114,44,32,37,100,0,109,111,118,32,37,114,44,32,37,114,0,109,111,118,100,113,97,32,37,114,44,32,91,37,114,32,43,32,37,117,32,43,32,37,115,93,0,109,111,118,100,113,97,32,37,114,44,32,91,37,114,32,43,32,37,117,93,0,37,115,44,32,48,37,88,72,44,32,48,37,88,72,44,32,48,37,88,72,44,32,60,60,37,115,62,62,44,32,60,37,115,62,0,111,112,116,105,111,110,32,101,112,105,108,111,103,117,101,58,110,111,110,101,10,0,111,112,116,105,111,110,32,112,114,111,108,111,103,117,101,58,110,111,110,101,10,0,32,40,37,115,44,32,48,37,88,72,44,32,48,37,88,72,44,32,48,37,88,72,44,32,60,60,37,115,62,62,44,32,60,37,115,62,41,0,112,117,115,104,32,37,114,0,115,117,98,32,37,114,44,32,37,100,32,43,32,37,115,0,115,117,98,32,37,114,44,32,37,100,0,109,111,118,32,37,114,44,32,37,115,0,109,111,118,113,32,91,37,114,43,37,117,93,44,32,37,114,0,109,111,118,32,91,37,114,43,37,117,93,44,32,37,114,0,37,114,32,37,114,0,37,114,32,37,114,44,32,48,0,109,111,118,100,113,97,32,91,37,114,43,37,117,43,37,115,93,44,32,37,114,0,37,114,32,37,114,44,32,37,117,43,37,115,0,109,111,118,100,113,97,32,91,37,114,43,37,117,93,44,32,37,114,0,37,114,32,37,114,44,32,37,117,0,37,114,0,37,114,32,37,100,0,37,114,32,37,100,32,43,32,37,115,0,46,120,100,97,116,97,0,37,115,32,37,114,32,97,108,105,103,110,40,37,117,41,32,102,108,97,116,32,114,101,97,100,32,39,68,65,84,65,39,0,36,120,100,97,116,97,115,121,109,32,108,97,98,101,108,32,110,101,97,114,0,100,98,32,37,117,116,32,43,32,40,48,37,120,104,32,115,104,108,32,51,41,44,32,37,117,116,44,32,37,117,116,44,32,48,37,120,104,32,43,32,40,48,37,120,104,32,115,104,108,32,52,41,0,100,119,0,37,115,32,48,37,120,104,0,44,0,37,114,32,52,0,100,100,32,37,114,32,37,115,0,37,114,32,56,0,46,112,100,97,116,97,0,46,112,100,97,116,97,36,37,48,52,117,0,100,100,32,37,114,32,37,115,44,32,37,114,32,37,115,43,48,37,120,104,44,32,37,114,32,36,120,100,97,116,97,115,121,109,43,48,37,120,104,0,113,117,101,117,101,46,99,0,2,2,2,1,1,0,2,1,1,0,9,9,0,3,3,1,0,2,2,2,2,3,3,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,2,2,1,1,35,3,3,3,35,2,2,0,0,0,0,2,2,1,1,1,1,0,1,2,1,1,1,1,0,3,0,0,2,3,3,2,2,3,3,0,0,16,16,16,16,16,16,3,2,3,3,3,3,3,3,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,4,4,4,4,4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,3,0,0,1,1,2,2,1,1,1,1,97,108,99,108,100,108,98,108,97,104,99,104,100,104,98,104,97,120,99,120,100,120,98,120,115,112,98,112,115,105,100,105,101,97,120,101,99,120,101,100,120,101,98,120,101,115,112,101,98,112,101,115,105,101,100,105,101,115,99,115,115,115,100,115,102,115,103,115,115,116,109,109,48,109,109,49,109,109,50,109,109,51,109,109,52,109,109,53,109,109,54,109,109,55,120,109,109,48,120,109,109,49,120,109,109,50,120,109,109,51,120,109,109,52,120,109,109,53,120,109,109,54,120,109,109,55,121,109,109,48,121,109,109,49,121,109,109,50,121,109,109,51,121,109,109,52,121,109,109,53,121,109,109,54,121,109,109,55,99,114,48,99,114,50,99,114,51,99,114,52,100,114,48,100,114,49,100,114,50,100,114,51,100,114,54,100,114,55,116,114,51,116,114,52,116,114,53,116,114,54,116,114,55,115,112,108,98,112,108,115,105,108,100,105,108,114,56,98,114,57,98,114,49,48,98,114,49,49,98,114,49,50,98,114,49,51,98,114,49,52,98,114,49,53,98,114,56,119,114,57,119,114,49,48,119,114,49,49,119,114,49,50,119,114,49,51,119,114,49,52,119,114,49,53,119,114,56,100,114,57,100,114,49,48,100,114,49,49,100,114,49,50,100,114,49,51,100,114,49,52,100,114,49,53,100,114,97,120,114,99,120,114,100,120,114,98,120,114,115,112,114,98,112,114,115,105,114,100,105,114,56,114,57,114,49,48,114,49,49,114,49,50,114,49,51,114,49,52,114,49,53,120,109,109,56,120,109,109,57,120,109,109,49,48,120,109,109,49,49,120,109,109,49,50,120,109,109,49,51,120,109,109,49,52,120,109,109,49,53,121,109,109,56,121,109,109,57,121,109,109,49,48,121,109,109,49,49,121,109,109,49,50,121,109,109,49,51,121,109,109,49,52,121,109,109,49,53,99,114,56,98,121,116,101,115,98,121,116,101,119,111,114,100,115,119,111,114,100,100,119,111,114,100,115,100,119,111,114,100,114,101,97,108,52,102,119,111,114,100,113,119,111,114,100,115,113,119,111,114,100,114,101,97,108,56,116,98,121,116,101,114,101,97,108,49,48,111,119,111,114,100,121,109,109,119,111,114,100,110,101,97,114,102,97,114,110,101,97,114,49,54,110,101,97,114,51,50,102,97,114,49,54,102,97,114,51,50,109,109,119,111,114,100,120,109,109,119,111,114,100,46,116,121,112,101,104,105,103,104,104,105,103,104,51,50,104,105,103,104,119,111,114,100,105,109,97,103,101,114,101,108,108,101,110,103,116,104,108,101,110,103,116,104,111,102,108,111,119,108,111,119,51,50,108,111,119,119,111,114,100,108,114,111,102,102,115,101,116,109,97,115,107,111,102,102,115,101,116,111,112,97,116,116,114,115,101,99,116,105,111,110,114,101,108,115,101,103,115,104,111,114,116,115,105,122,101,115,105,122,101,111,102,116,104,105,115,116,121,112,101,119,105,100,116,104,101,113,110,101,103,101,103,116,108,101,108,116,109,111,100,112,116,114,100,117,112,97,100,100,114,102,108,97,116,118,97,114,97,114,103,102,114,97,109,101,99,115,121,115,99,97,108,108,115,116,100,99,97,108,108,112,97,115,99,97,108,102,111,114,116,114,97,110,98,97,115,105,99,102,97,115,116,99,97,108,108,46,56,48,56,54,46,49,56,54,46,50,56,54,46,50,56,54,99,46,50,56,54,112,46,51,56,54,46,51,56,54,99,46,51,56,54,112,46,52,56,54,46,52,56,54,112,46,53,56,54,46,53,56,54,112,46,54,56,54,46,54,56,54,112,46,107,51,100,46,109,109,120,46,120,109,109,46,120,54,52,46,120,54,52,112,46,56,48,56,55,46,50,56,55,46,51,56,55,46,110,111,56,55,46,99,114,101,102,46,108,102,99,111,110,100,46,108,105,115,116,46,108,105,115,116,97,108,108,46,108,105,115,116,105,102,46,110,111,99,114,101,102,46,110,111,108,105,115,116,46,110,111,108,105,115,116,105,102,46,115,102,99,111,110,100,46,116,102,99,111,110,100,46,120,99,114,101,102,46,120,108,105,115,116,112,97,103,101,115,117,98,116,105,116,108,101,115,117,98,116,116,108,116,105,116,108,101,46,108,105,115,116,109,97,99,114,111,46,108,105,115,116,109,97,99,114,111,97,108,108,46,110,111,108,105,115,116,109,97,99,114,111,46,120,97,108,108,46,108,97,108,108,46,115,97,108,108,46,97,108,112,104,97,46,100,111,115,115,101,103,46,115,101,113,100,111,115,115,101,103,46,99,111,100,101,46,115,116,97,99,107,46,100,97,116,97,46,100,97,116,97,63,46,102,97,114,100,97,116,97,46,102,97,114,100,97,116,97,63,46,99,111,110,115,116,46,105,102,46,114,101,112,101,97,116,46,119,104,105,108,101,46,98,114,101,97,107,46,99,111,110,116,105,110,117,101,46,101,108,115,101,46,101,108,115,101,105,102,46,101,110,100,105,102,46,101,110,100,119,46,117,110,116,105,108,46,117,110,116,105,108,99,120,122,46,101,120,105,116,46,115,116,97,114,116,117,112,46,109,111,100,101,108,46,114,97,100,105,120,46,115,97,102,101,115,101,104,46,101,114,114,46,101,114,114,49,46,101,114,114,50,46,101,114,114,101,46,101,114,114,110,122,46,101,114,114,100,105,102,46,101,114,114,100,105,102,105,46,101,114,114,105,100,110,46,101,114,114,105,100,110,105,46,101,114,114,98,46,101,114,114,110,98,46,101,114,114,100,101,102,46,101,114,114,110,100,101,102,99,111,109,109,101,110,116,105,102,105,102,101,105,102,49,105,102,50,105,102,100,105,102,105,102,100,105,102,105,105,102,105,100,110,105,102,105,100,110,105,105,102,98,105,102,110,98,105,102,100,101,102,105,102,110,100,101,102,101,108,115,101,101,108,115,101,105,102,101,108,115,101,105,102,101,101,108,115,101,105,102,49,101,108,115,101,105,102,50,101,108,115,101,105,102,100,105,102,101,108,115,101,105,102,100,105,102,105,101,108,115,101,105,102,105,100,110,101,108,115,101,105,102,105,100,110,105,101,108,115,101,105,102,98,101,108,115,101,105,102,110,98,101,108,115,101,105,102,100,101,102,101,108,115,101,105,102,110,100,101,102,101,110,100,105,102,102,111,114,102,111,114,99,105,114,112,105,114,112,99,114,101,112,101,97,116,114,101,112,116,119,104,105,108,101,109,97,99,114,111,101,120,105,116,109,101,110,100,109,103,111,116,111,112,117,114,103,101,105,110,99,108,117,100,101,116,101,120,116,101,113,117,99,97,116,115,116,114,115,117,98,115,116,114,105,110,115,116,114,115,105,122,101,115,116,114,100,98,100,119,100,100,100,102,100,113,100,116,46,97,108,108,111,99,115,116,97,99,107,46,101,110,100,112,114,111,108,111,103,46,112,117,115,104,102,114,97,109,101,46,112,117,115,104,114,101,103,46,115,97,118,101,114,101,103,46,115,97,118,101,120,109,109,49,50,56,46,115,101,116,102,114,97,109,101,115,116,114,117,99,115,116,114,117,99,116,117,110,105,111,110,116,121,112,101,100,101,102,114,101,99,111,114,100,99,111,109,109,101,120,116,101,114,110,101,120,116,114,110,101,120,116,101,114,110,100,101,102,112,117,98,108,105,99,112,114,111,116,111,112,114,111,99,101,110,100,112,108,111,99,97,108,108,97,98,101,108,105,110,118,111,107,101,111,114,103,97,108,105,103,110,101,118,101,110,115,101,103,109,101,110,116,101,110,100,115,103,114,111,117,112,97,115,115,117,109,101,97,108,105,97,115,101,99,104,111,101,110,100,101,113,117,105,110,99,98,105,110,105,110,99,108,117,100,101,108,105,98,110,97,109,101,111,112,116,105,111,110,112,111,112,99,111,110,116,101,120,116,112,117,115,104,99,111,110,116,101,120,116,99,97,108,108,106,109,112,106,97,106,97,101,106,98,106,98,101,106,99,106,101,106,103,106,103,101,106,108,106,108,101,106,110,97,106,110,97,101,106,110,98,106,110,98,101,106,110,99,106,110,101,106,110,103,106,110,103,101,106,110,108,106,110,108,101,106,110,111,106,110,112,106,110,115,106,110,122,106,111,106,112,106,112,101,106,112,111,106,115,106,122,106,99,120,122,106,101,99,120,122,106,114,99,120,122,108,111,111,112,108,111,111,112,101,108,111,111,112,122,108,111,111,112,110,101,108,111,111,112,110,122,108,111,111,112,100,108,111,111,112,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+91800);
/* memory initializer */ allocate([100,108,111,111,112,122,100,108,111,111,112,110,101,100,108,111,111,112,110,122,100,108,111,111,112,119,108,111,111,112,101,119,108,111,111,112,122,119,108,111,111,112,110,101,119,108,111,111,112,110,122,119,97,100,100,111,114,97,100,99,115,98,98,97,110,100,115,117,98,120,111,114,99,109,112,114,99,108,114,99,114,114,111,108,114,111,114,115,97,108,115,97,114,115,104,108,115,104,114,99,109,112,115,99,109,112,115,98,99,109,112,115,119,99,109,112,115,100,105,110,115,105,110,115,98,105,110,115,119,105,110,115,100,108,111,100,115,108,111,100,115,98,108,111,100,115,119,108,111,100,115,100,109,111,118,115,109,111,118,115,98,109,111,118,115,119,109,111,118,115,100,111,117,116,115,111,117,116,115,98,111,117,116,115,119,111,117,116,115,100,115,99,97,115,115,99,97,115,98,115,99,97,115,119,115,99,97,115,100,115,116,111,115,115,116,111,115,98,115,116,111,115,119,115,116,111,115,100,97,97,97,97,97,100,97,97,109,97,97,115,100,97,97,100,97,115,108,100,115,108,101,115,112,111,112,97,112,111,112,97,100,112,111,112,97,119,112,111,112,102,100,112,117,115,104,97,112,117,115,104,97,100,112,117,115,104,97,119,112,117,115,104,102,100,112,117,115,104,100,114,101,116,100,114,101,116,119,97,114,112,108,108,108,100,116,108,109,115,119,108,116,114,115,108,100,116,115,109,115,119,115,116,114,118,101,114,114,118,101,114,119,100,105,118,105,100,105,118,109,117,108,110,101,103,110,111,116,108,111,99,107,114,101,112,114,101,112,101,114,101,112,110,101,114,101,112,110,122,114,101,112,122,98,116,98,116,99,98,116,114,98,116,115,99,109,99,99,108,99,115,116,99,99,108,105,115,116,105,99,108,100,115,116,100,105,110,99,100,101,99,112,117,115,104,112,111,112,112,117,115,104,119,112,117,115,104,102,112,111,112,102,109,111,118,98,111,117,110,100,98,115,102,98,115,114,98,115,119,97,112,99,98,119,99,100,113,99,119,100,99,119,100,101,99,108,116,115,99,109,112,120,99,104,103,99,109,112,120,99,104,103,56,98,99,112,117,105,100,101,110,116,101,114,104,108,116,105,109,117,108,105,110,105,110,116,105,110,116,111,105,110,118,100,105,110,118,108,112,103,105,114,101,116,105,114,101,116,100,105,114,101,116,102,105,114,101,116,100,102,108,97,104,102,108,97,114,108,115,108,108,101,97,108,101,97,118,101,108,102,115,108,103,115,108,115,115,108,103,100,116,108,105,100,116,109,111,118,115,120,109,111,118,122,120,110,111,112,111,117,116,114,100,109,115,114,114,100,112,109,99,114,100,116,115,99,114,100,116,115,99,112,114,101,116,114,101,116,110,114,101,116,102,114,115,109,115,97,104,102,115,103,100,116,115,105,100,116,115,104,108,100,115,104,114,100,115,121,115,101,110,116,101,114,115,121,115,101,120,105,116,116,101,115,116,117,100,50,119,97,105,116,119,98,105,110,118,100,119,114,109,115,114,120,97,100,100,120,99,104,103,120,108,97,116,120,108,97,116,98,115,101,116,97,115,101,116,97,101,115,101,116,98,115,101,116,98,101,115,101,116,99,115,101,116,101,115,101,116,103,115,101,116,103,101,115,101,116,108,115,101,116,108,101,115,101,116,110,97,115,101,116,110,97,101,115,101,116,110,98,115,101,116,110,98,101,115,101,116,110,99,115,101,116,110,101,115,101,116,110,103,115,101,116,110,103,101,115,101,116,110,108,115,101,116,110,108,101,115,101,116,110,111,115,101,116,110,112,115,101,116,110,115,115,101,116,110,122,115,101,116,111,115,101,116,112,115,101,116,112,101,115,101,116,112,111,115,101,116,115,115,101,116,122,99,109,111,118,97,99,109,111,118,97,101,99,109,111,118,98,99,109,111,118,98,101,99,109,111,118,99,99,109,111,118,101,99,109,111,118,103,99,109,111,118,103,101,99,109,111,118,108,99,109,111,118,108,101,99,109,111,118,110,97,99,109,111,118,110,97,101,99,109,111,118,110,98,99,109,111,118,110,98,101,99,109,111,118,110,99,99,109,111,118,110,101,99,109,111,118,110,103,99,109,111,118,110,103,101,99,109,111,118,110,108,99,109,111,118,110,108,101,99,109,111,118,110,111,99,109,111,118,110,112,99,109,111,118,110,115,99,109,111,118,110,122,99,109,111,118,111,99,109,111,118,112,99,109,111,118,112,101,99,109,111,118,112,111,99,109,111,118,115,99,109,111,118,122,102,99,109,111,118,98,102,99,109,111,118,98,101,102,99,109,111,118,101,102,99,109,111,118,110,98,102,99,109,111,118,110,98,101,102,99,109,111,118,110,101,102,99,109,111,118,110,117,102,99,109,111,118,117,102,99,111,109,102,99,111,109,112,102,99,111,109,112,112,102,117,99,111,109,102,117,99,111,109,112,102,117,99,111,109,112,112,102,99,111,109,105,102,99,111,109,105,112,102,117,99,111,109,105,102,117,99,111,109,105,112,102,97,100,100,102,97,100,100,112,102,109,117,108,102,109,117,108,112,102,100,105,118,102,100,105,118,112,102,100,105,118,114,102,100,105,118,114,112,102,115,117,98,102,115,117,98,112,102,115,117,98,114,102,115,117,98,114,112,102,105,97,100,100,102,105,99,111,109,102,105,99,111,109,112,102,105,100,105,118,102,105,100,105,118,114,102,105,109,117,108,102,105,115,117,98,102,105,115,117,98,114,102,105,108,100,102,105,115,116,112,102,105,115,116,102,108,100,102,115,116,112,102,115,116,102,108,100,101,110,118,102,108,100,101,110,118,100,102,108,100,101,110,118,119,102,110,115,97,118,101,102,110,115,97,118,101,100,102,110,115,97,118,101,119,102,110,115,116,101,110,118,102,110,115,116,101,110,118,100,102,110,115,116,101,110,118,119,102,114,115,116,111,114,102,114,115,116,111,114,100,102,114,115,116,111,114,119,102,115,97,118,101,102,115,97,118,101,100,102,115,97,118,101,119,102,115,116,101,110,118,102,115,116,101,110,118,100,102,115,116,101,110,118,119,102,108,100,99,119,102,110,115,116,99,119,102,110,115,116,115,119,102,115,116,99,119,102,115,116,115,119,102,99,111,115,102,112,97,116,97,110,102,112,116,97,110,102,115,105,110,102,115,105,110,99,111,115,102,105,110,105,116,102,110,105,110,105,116,102,100,105,115,105,102,110,100,105,115,105,102,101,110,105,102,110,101,110,105,102,99,108,101,120,102,110,99,108,101,120,102,50,120,109,49,102,97,98,115,102,98,108,100,102,98,115,116,112,102,99,104,115,102,108,100,49,102,108,100,108,50,101,102,108,100,108,50,116,102,108,100,108,103,50,102,108,100,108,110,50,102,108,100,112,105,102,108,100,122,102,100,101,99,115,116,112,102,105,110,99,115,116,112,102,102,114,101,101,102,102,114,101,101,112,102,110,111,112,102,112,114,101,109,102,112,114,101,109,49,102,114,110,100,105,110,116,102,115,99,97,108,101,102,115,101,116,112,109,102,115,113,114,116,102,116,115,116,102,119,97,105,116,102,120,97,109,102,120,99,104,102,120,114,115,116,111,114,102,120,115,97,118,101,102,120,116,114,97,99,116,102,121,108,50,120,102,121,108,50,120,112,49,101,109,109,115,99,108,102,108,117,115,104,108,100,109,120,99,115,114,115,116,109,120,99,115,114,108,102,101,110,99,101,109,102,101,110,99,101,115,102,101,110,99,101,112,114,101,102,101,116,99,104,110,116,97,112,114,101,102,101,116,99,104,116,48,112,114,101,102,101,116,99,104,116,49,112,114,101,102,101,116,99,104,116,50,112,97,117,115,101,97,100,100,112,100,97,100,100,112,115,97,100,100,115,100,97,100,100,115,115,100,105,118,112,100,100,105,118,112,115,100,105,118,115,100,100,105,118,115,115,109,97,120,112,100,109,97,120,112,115,109,97,120,115,100,109,97,120,115,115,109,105,110,112,100,109,105,110,112,115,109,105,110,115,100,109,105,110,115,115,109,117,108,112,100,109,117,108,112,115,109,117,108,115,100,109,117,108,115,115,115,113,114,116,112,100,115,113,114,116,112,115,115,113,114,116,115,100,115,113,114,116,115,115,115,117,98,112,100,115,117,98,112,115,115,117,98,115,100,115,117,98,115,115,99,109,112,112,100,99,109,112,112,115,99,109,112,115,115,99,109,112,101,113,112,100,99,109,112,108,116,112,100,99,109,112,108,101,112,100,99,109,112,117,110,111,114,100,112,100,99,109,112,110,101,113,112,100,99,109,112,110,108,116,112,100,99,109,112,110,108,101,112,100,99,109,112,111,114,100,112,100,99,109,112,101,113,112,115,99,109,112,108,116,112,115,99,109,112,108,101,112,115,99,109,112,117,110,111,114,100,112,115,99,109,112,110,101,113,112,115,99,109,112,110,108,116,112,115,99,109,112,110,108,101,112,115,99,109,112,111,114,100,112,115,99,109,112,101,113,115,100,99,109,112,108,116,115,100,99,109,112,108,101,115,100,99,109,112,117,110,111,114,100,115,100,99,109,112,110,101,113,115,100,99,109,112,110,108,116,115,100,99,109,112,110,108,101,115,100,99,109,112,111,114,100,115,100,99,109,112,101,113,115,115,99,109,112,108,116,115,115,99,109,112,108,101,115,115,99,109,112,117,110,111,114,100,115,115,99,109,112,110,101,113,115,115,99,109,112,110,108,116,115,115,99,109,112,110,108,101,115,115,99,109,112,111,114,100,115,115,97,110,100,110,112,100,97,110,100,110,112,115,97,110,100,112,100,97,110,100,112,115,111,114,112,100,111,114,112,115,99,111,109,105,115,100,99,111,109,105,115,115,120,111,114,112,100,120,111,114,112,115,99,118,116,112,100,50,112,105,99,118,116,112,115,50,112,105,99,118,116,115,100,50,115,105,99,118,116,115,115,50,115,105,99,118,116,112,105,50,112,100,99,118,116,112,105,50,112,115,99,118,116,115,105,50,115,100,99,118,116,115,105,50,115,115,99,118,116,116,112,100,50,112,105,99,118,116,116,112,115,50,112,105,99,118,116,116,115,100,50,115,105,99,118,116,116,115,115,50,115,105,99,118,116,100,113,50,112,115,99,118,116,112,115,50,100,113,99,118,116,116,112,115,50,100,113,99,118,116,112,100,50,100,113,99,118,116,100,113,50,112,100,99,118,116,116,112,100,50,100,113,99,118,116,112,100,50,112,115,99,118,116,112,115,50,112,100,99,118,116,115,100,50,115,115,99,118,116,115,115,50,115,100,109,97,115,107,109,111,118,100,113,117,109,97,115,107,109,111,118,113,109,111,118,100,109,111,118,113,109,111,118,97,112,100,109,111,118,97,112,115,109,111,118,100,113,97,109,111,118,100,113,117,109,111,118,117,112,100,109,111,118,117,112,115,109,111,118,104,112,100,109,111,118,104,112,115,109,111,118,108,112,100,109,111,118,108,112,115,109,111,118,104,108,112,115,109,111,118,108,104,112,115,109,111,118,100,113,50,113,109,111,118,113,50,100,113,109,111,118,109,115,107,112,100,109,111,118,109,115,107,112,115,109,111,118,110,116,100,113,109,111,118,110,116,105,109,111,118,110,116,112,100,109,111,118,110,116,112,115,109,111,118,110,116,113,109,111,118,115,115,112,97,99,107,115,115,100,119,112,97,99,107,115,115,119,98,112,97,99,107,117,115,119,98,112,97,100,100,98,112,97,100,100,119,112,97,100,100,100,112,97,100,100,113,112,97,100,100,115,98,112,97,100,100,115,119,112,97,100,100,117,115,98,112,97,100,100,117,115,119,112,97,110,100,112,97,110,100,110,112,97,118,103,98,112,97,118,103,119,112,99,109,112,101,113,98,112,99,109,112,101,113,119,112,99,109,112,101,113,100,112,99,109,112,103,116,98,112,99,109,112,103,116,119,112,99,109,112,103,116,100,112,101,120,116,114,119,112,105,110,115,114,119,112,109,97,100,100,119,100,112,109,97,120,115,119,112,109,97,120,117,98,112,109,105,110,115,119,112,109,105,110,117,98,112,109,111,118,109,115,107,98,112,109,117,108,104,117,119,112,109,117,108,104,119,112,109,117,108,108,119,112,109,117,108,117,100,113,112,111,114,112,115,97,100,98,119,112,115,104,117,102,100,112,115,104,117,102,119,112,115,104,117,102,104,119,112,115,104,117,102,108,119,112,115,108,108,119,112,115,108,108,100,112,115,108,108,113,112,115,114,97,119,112,115,114,97,100,112,115,114,108,119,112,115,114,108,100,112,115,114,108,113,112,115,108,108,100,113,112,115,114,108,100,113,112,115,117,98,98,112,115,117,98,119,112,115,117,98,100,112,115,117,98,113,112,115,117,98,115,98,112,115,117,98,115,119,112,115,117,98,117,115,98,112,115,117,98,117,115,119,112,120,111,114,112,117,110,112,99,107,104,98,119,112,117,110,112,99,107,104,119,100,112,117,110,112,99,107,104,100,113,112,117,110,112,99,107,108,98,119,112,117,110,112,99,107,108,119,100,112,117,110,112,99,107,108,100,113,112,117,110,112,99,107,104,113,100,113,112,117,110,112,99,107,108,113,100,113,114,99,112,112,115,114,99,112,115,115,114,115,113,114,116,112,115,114,115,113,114,116,115,115,115,104,117,102,112,100,115,104,117,102,112,115,117,99,111,109,105,115,100,117,99,111,109,105,115,115,117,110,112,99,107,104,112,100,117,110,112,99,107,104,112,115,117,110,112,99,107,108,112,100,117,110,112,99,107,108,112,115,102,101,109,109,115,112,114,101,102,101,116,99,104,112,114,101,102,101,116,99,104,119,112,97,118,103,117,115,98,112,102,50,105,100,112,102,50,105,119,112,102,97,99,99,112,102,97,100,100,112,102,99,109,112,101,113,112,102,99,109,112,103,101,112,102,99,109,112,103,116,112,102,109,97,120,112,102,109,105,110,112,102,109,117,108,112,102,110,97,99,99,112,102,112,110,97,99,99,112,102,114,99,112,112,102,114,99,112,105,116,49,112,102,114,99,112,105,116,50,112,102,114,115,113,105,116,49,112,102,114,115,113,114,116,112,102,115,117,98,112,102,115,117,98,114,112,105,50,102,100,112,105,50,102,119,112,109,117,108,104,114,119,112,115,119,97,112,100,97,100,100,115,117,98,112,100,97,100,100,115,117,98,112,115,102,105,115,116,116,112,104,97,100,100,112,100,104,97,100,100,112,115,104,115,117,98,112,100,104,115,117,98,112,115,108,100,100,113,117,109,111,110,105,116,111,114,109,111,118,100,100,117,112,109,111,118,115,104,100,117,112,109,111,118,115,108,100,117,112,109,119,97,105,116,112,97,98,115,98,112,97,98,115,100,112,97,98,115,119,112,97,108,105,103,110,114,112,104,97,100,100,100,112,104,97,100,100,115,119,112,104,97,100,100,119,112,104,115,117,98,100,112,104,115,117,98,115,119,112,104,115,117,98,119,112,109,97,100,100,117,98,115,119,112,109,117,108,104,114,115,119,112,115,104,117,102,98,112,115,105,103,110,98,112,115,105,103,110,100,112,115,105,103,110,119,99,100,113,101,99,113,111,112,117,115,104,102,113,112,111,112,102,113,105,114,101,116,113,99,109,112,120,99,104,103,49,54,98,109,111,118,115,120,100,99,109,112,115,113,108,111,100,115,113,109,111,118,115,113,115,99,97,115,113,115,116,111,115,113,112,101,120,116,114,113,112,105,110,115,114,113,115,119,97,112,103,115,115,121,115,99,97,108,108,115,121,115,114,101,116,98,108,101,110,100,112,100,98,108,101,110,100,112,115,98,108,101,110,100,118,112,100,98,108,101,110,100,118,112,115,100,112,112,100,100,112,112,115,101,120,116,114,97,99,116,112,115,105,110,115,101,114,116,112,115,109,111,118,110,116,100,113,97,109,112,115,97,100,98,119,112,97,99,107,117,115,100,119,112,98,108,101,110,100,118,98,112,98,108,101,110,100,119,112,99,109,112,101,113,113,112,101,120,116,114,98,112,101,120,116,114,100,112,104,109,105,110,112,111,115,117,119,112,105,110,115,114,98,112,105,110,115,114,100,112,109,97,120,115,98,112,109,97,120,115,100,112,109,97,120,117,119,112,109,97,120,117,100,112,109,105,110,115,98,112,109,105,110,115,100,112,109,105,110,117,119,112,109,105,110,117,100,112,109,111,118,115,120,98,119,112,109,111,118,115,120,98,100,112,109,111,118,115,120,98,113,112,109,111,118,115,120,119,100,112,109,111,118,115,120,119,113,112,109,111,118,115,120,100,113,112,109,111,118,122,120,98,119,112,109,111,118,122,120,98,100,112,109,111,118,122,120,98,113,112,109,111,118,122,120,119,100,112,109,111,118,122,120,119,113,112,109,111,118,122,120,100,113,112,109,117,108,100,113,112,109,117,108,108,100,112,116,101,115,116,114,111,117,110,100,112,115,114,111,117,110,100,112,100,114,111,117,110,100,115,115,114,111,117,110,100,115,100,99,114,99,51,50,112,99,109,112,101,115,116,114,109,112,99,109,112,101,115,116,114,105,112,99,109,112,105,115,116,114,109,112,99,109,112,105,115,116,114,105,112,99,109,112,103,116,113,112,111,112,99,110,116,120,114,115,116,111,114,120,115,97,118,101,120,115,97,118,101,111,112,116,120,103,101,116,98,118,120,115,101,116,98,118,118,109,99,97,108,108,118,109,108,97,117,110,99,104,118,109,114,101,115,117,109,101,118,109,120,111,102,102,118,109,112,116,114,108,100,118,109,112,116,114,115,116,118,109,99,108,101,97,114,118,109,120,111,110,118,109,114,101,97,100,118,109,119,114,105,116,101,105,110,118,101,112,116,105,110,118,118,112,105,100,118,98,114,111,97,100,99,97,115,116,115,115,118,98,114,111,97,100,99,97,115,116,115,100,118,98,114,111,97,100,99,97,115,116,102,49,50,56,118,98,108,101,110,100,118,112,100,118,98,108,101,110,100,118,112,115,118,105,110,115,101,114,116,102,49,50,56,118,101,120,116,114,97,99,116,102,49,50,56,118,109,97,115,107,109,111,118,112,115,118,109,97,115,107,109,111,118,112,100,118,112,98,108,101,110,100,118,98,118,112,101,114,109,105,108,112,100,118,112,101,114,109,105,108,112,115,118,112,101,114,109,50,102,49,50,56,118,116,101,115,116,112,115,118,116,101,115,116,112,100,118,122,101,114,111,97,108,108,118,122,101,114,111,117,112,112,101,114,118,99,118,116,112,100,50,100,113,118,99,118,116,116,112,100,50,100,113,118,99,118,116,112,100,50,112,115,118,109,111,118,100,100,117,112,118,109,111,118,109,115,107,112,100,118,109,111,118,109,115,107,112,115,118,97,100,100,112,100,118,97,100,100,112,115,118,97,100,100,115,100,118,97,100,100,115,115,118,100,105,118,112,100,118,100,105,118,112,115,118,100,105,118,115,100,118,100,105,118,115,115,118,109,97,120,112,100,118,109,97,120,112,115,118,109,97,120,115,100,118,109,97,120,115,115,118,109,105,110,112,100,118,109,105,110,112,115,118,109,105,110,115,100,118,109,105,110,115,115,118,109,117,108,112,100,118,109,117,108,112,115,118,109,117,108,115,100,118,109,117,108,115,115,118,115,113,114,116,112,100,118,115,113,114,116,112,115,118,115,113,114,116,115,100,118,115,113,114,116,115,115,118,115,117,98,112,100,118,115,117,98,112,115,118,115,117,98,115,100,118,115,117,98,115,115,118,99,109,112,112,100,118,99,109,112,112,115,118,99,109,112,115,100,118,99,109,112,115,115,118,97,110,100,112,100,118,97,110,100,112,115,118,97,110,100,110,112,100,118,97,110,100,110,112,115,118,111,114,112,100,118,111,114,112,115,118,99,111,109,105,115,100,118,99,111,109,105,115,115,118,120,111,114,112,100,118,120,111,114,112,115,118,99,118,116,100,113,50,112,100,118,99,118,116,100,113,50,112,115,118,99,118,116,112,115,50,100,113,118,99,118,116,116,112,115,50,100,113,118,99,118,116,112,115,50,112,100,118,99,118,116,115,100,50,115,105,118,99,118,116,116,115,100,50,115,105,118,99,118,116,115,100,50,115,115,118,99,118,116,115,105,50,115,100,118,99,118,116,115,105,50,115,115,118,99,118,116,115,115,50,115,100,118,99,118,116,115,115,50,115,105,118,99,118,116,116,115,115,50,115,105,118,97,100,100,115,117,98,112,100,118,97,100,100,115,117,98,112,115,118,98,108,101,110,100,112,100,118,98,108,101,110,100,112,115,118,100,112,112,100,118,100,112,112,115,118,101,120,116,114,97,99,116,112,115,118,104,97,100,100,112,100,118,104,97,100,100,112,115,118,104,115,117,98,112,100,118,104,115,117,98,112,115,118,105,110,115,101,114,116,112,115,118,108,100,100,113,117,118,108,100,109,120,99,115,114,118,115,116,109,120,99,115,114,118,109,97,115,107,109,111,118,100,113,117,118,109,111,118,97,112,100,118,109,111,118,97,112,115,118,109,111,118,100,118,109,111,118,113,118,109,111,118,100,113,97,118,109,111,118,100,113,117,118,109,111,118,104,108,112,115,118,109,111,118,108,104,112,115,118,109,111,118,104,112,100,118,109,111,118,104,112,115,118,109,111,118,108,112,100,118,109,111,118,108,112,115,118,109,111,118,115,100,118,109,111,118,115,115,118,109,111,118,110,116,100,113,118,109,111,118,110,116,100,113,97,118,109,111,118,110,116,112,100,118,109,111,118,110,116,112,115,118,109,111,118,115,104,100,117,112,118,109,111,118,115,108,100,117,112,118,109,111,118,117,112,100,118,109,111,118,117,112,115,118,109,112,115,97,100,98,119,118,112,97,98,115,98,118,112,97,98,115,119,118,112,97,98,115,100,118,112,97,99,107,115,115,119,98,118,112,97,99,107,115,115,100,119,118,112,97,99,107,117,115,119,98,118,112,97,99,107,117,115,100,119,118,112,97,100,100,98,118,112,97,100,100,119,118,112,97,100,100,100,118,112,97,100,100,113,118,112,97,100,100,115,98,118,112,97,100,100,115,119,118,112,97,100,100,117,115,98,118,112,97,100,100,117,115,119,118,112,97,108,105,103,110,114,118,112,97,110,100,118,112,97,110,100,110,118,112,97,118,103,98,118,112,97,118,103,119,118,112,98,108,101,110,100,119,118,112,99,109,112,101,115,116,114,105,118,112,99,109,112,101,115,116,114,109,118,112,99,109,112,105,115,116,114,105,118,112,99,109,112,105,115,116,114,109,118,112,99,109,112,101,113,98,118,112,99,109,112,101,113,119,118,112,99,109,112,101,113,100,118,112,99,109,112,101,113,113,118,112,99,109,112,103,116,66,118,112,99,109,112,103,116,119,118,112,99,109,112,103,116,100,118,112,99,109,112,103,116,113,118,112,101,120,116,114,98,118,112,101,120,116,114,119,118,112,101,120,116,114,100,118,112,105,110,115,114,98,118,112,105,110,115,114,119,118,112,105,110,115,114,100,118,112,101,120,116,114,113,118,112,105,110,115,114,113,118,112,104,97,100,100,119,118,112,104,97,100,100,100,118,112,104,97,100,100,115,119,118,112,104,109,105,110,112,111,115,117,119,118,112,104,115,117,98,119,118,112,104,115,117,98,100,118,112,104,115,117,98,115,119,118,112,109,97,100,100,119,100,118,112,109,97,100,100,117,98,115,119,118,112,109,97,120,115,98,118,112,109,97,120,115,119,118,112,109,97,120,115,100,118,112,109,97,120,117,98,118,112,109,97,120,117,119,118,112,109,97,120,117,100,118,112,109,105,110,115,98,118,112,109,105,110,115,119,118,112,109,105,110,115,100,118,112,109,105,110,117,98,118,112,109,105,110,117,119,118,112,109,105,110,117,100,118,112,109,111,118,109,115,107,98,118,112,109,111,118,115,120,98,119,118,112,109,111,118,115,120,98,100,118,112,109,111,118,115,120,98,113,118,112,109,111,118,115,120,119,100,118,112,109,111,118,115,120,119,113,118,112,109,111,118,115,120,100,113,118,112,109,111,118,122,120,98,119,118,112,109,111,118,122,120,98,100,118,112,109,111,118,122,120,98,113,118,112,109,111,118,122,120,119,100,118,112,109,111,118,122,120,119,113,118,112,109,111,118,122,120,100,113,118,112,109,117,108,104,117,119,118,112,109,117,108,104,114,115,119,118,112,109,117,108,104,119,118,112,109,117,108,108,119,118,112,109,117,108,108,100,118,112,109,117,108,117,100,113,118,112,109,117,108,100,113,118,112,111,114,118,112,115,97,100,98,119,118,112,115,104,117,102,98,118,112,115,104,117,102,100,118,112,115,104,117,102,104,119,118,112,115,104,117,102,108,119,118,112,115,105,103,110,98,118,112,115,105,103,110,119,118,112,115,105,103,110,100,118,112,115,108,108,100,113,118,112,115,114,108,100,113,118,112,115,108,108,119,118,112,115,108,108,100,118,112,115,108,108,113,118,112,115,114,97,119,118,112,115,114,97,100,118,112,115,114,108,119,118,112,115,114,108,100,118,112,115,114,108,113,118,112,116,101,115,116,118,112,115,117,98,98,118,112,115,117,98,119,118,112,115,117,98,100,118,112,115,117,98,113,118,112,115,117,98,115,98,118,112,115,117,98,115,119,118,112,115,117,98,117,115,98,118,112,115,117,98,117,115,119,118,112,117,110,112,99,107,104,98,119,118,112,117,110,112,99,107,104,119,100,118,112,117,110,112,99,107,104,100,113,118,112,117,110,112,99,107,104,113,100,113,118,112,117,110,112,99,107,108,98,119,118,112,117,110,112,99,107,108,119,100,118,112,117,110,112,99,107,108,100,113,118,112,117,110,112,99,107,108,113,100,113,118,112,120,111,114,118,114,99,112,112,115,118,114,99,112,115,115,118,114,115,113,114,116,112,115,118,114,115,113,114,116,115,115,118,114,111,117,110,100,112,100,118,114,111,117,110,100,112,115,118,114,111,117,110,100,115,100,118,114,111,117,110,100,115,115,118,115,104,117,102,112,100,118,115,104,117,102,112,115,118,117,99,111,109,105,115,100,118,117,99,111,109,105,115,115,118,117,110,112,99,107,104,112,100,118,117,110,112,99,107,104,112,115,118,117,110,112,99,107,108,112,100,118,117,110,112,99,107,108,112,115,115,121,115,99,97,108,108,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,111,102,102,0,115,97,102,101,115,101,104,0,68,66,84,89,80,0,68,66,83,89,77,0,0,1,0,2,1,2,2,2,4,2,8,2,0,130,0,4,2,4,5,4,6,4,2,4,0,132,0,196,0,8,1,8,2,8,1,136,0,160,2,32,4,32,8,32,16,32,32,32,64,32,128,32,0,16,40,0,41,0,49,45,54], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102040);
/* memory initializer */ allocate([82,69,65,68,79,78,76,89,0,66,89,84,69,0,80,65,71,69,0,65,76,73,71,78,0,67,79,77,77,79,78,0,77,69,77,79,82,89,0,65,84,0,67,79,77,68,65,84,0,85,83,69,49,54,0,85,83,69,54,52,0,73,78,70,79,0,68,73,83,67,65,82,68,0,78,79,67,65,67,72,69,0,78,79,80,65,71,69,0,83,72,65,82,69,68,0,69,88,69,67,85,84,69,0,82,69,65,68,0,87,82,73,84,69,0,65,76,73,65,83,0,70,76,65,84,0,37,114,32,37,114,58,37,115,0,79,82,71,32,48,37,120,104,0,37,114,32,37,114,58,69,82,82,79,82,0,115,105,109,115,101,103,109,46,99,0,37,115,32,37,114,32,37,115,0,44,32,37,115,0,95,84,69,88,84,0,83,84,65,67,75,0,95,68,65,84,65,0,95,66,83,83,0,70,65,82,95,68,65,84,65,0,70,65,82,95,66,83,83,0,67,79,78,83,84,0,37,115,32,37,114,0,87,79,82,68,0,80,65,82,65,0,85,83,69,51,50,0,68,87,79,82,68,0,37,115,32,37,114,32,37,115,32,37,115,32,37,115,32,39,37,115,39,0,80,85,66,76,73,67,0,80,82,73,86,65,84,69,0,67,79,68,69,0,68,65,84,65,0,66,83,83,0,64,67,97,116,83,116,114,0,64,73,110,83,116,114,0,64,83,105,122,101,83,116,114,0,64,83,117,98,83,116,114,0,0,0,0,0,0,0,0,0,0,0,0,0,37,48,50,117,47,37,48,50,117,47,37,48,50,117,0,0,0,0,0,0,0,0,0,0,0,0,0,37,48,50,117,58,37,48,50,117,58,37,48,50,117,0,95,95,74,87,65,83,77,95,95,0,36,0,64,76,105,110,101,0,64,87,111,114,100,83,105,122,101,0,64,86,101,114,115,105,111,110,0,56,48,48,0,64,68,97,116,101,0,64,84,105,109,101,0,64,70,105,108,101,78,97,109,101,0,64,70,105,108,101,67,117,114,0,64,67,117,114,83,101,103,0,58,58,0,58,0,79,85,84,0,37,0,61,0,61,33,60,62,38,124,0,38,0,63,0,116,111,107,101,110,105,122,101,46,99,0,0,78,79,78,85,78,73,81,85,69,0,116,121,112,101,115,46,99,0,115,116,114,117,99,116,117,114,101,0,114,101,99,111,114,100,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+109329);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112814);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_cleanup_setjmp=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_prep_setjmp=true;

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  var _emscripten_check_longjmp=true;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_setjmp=true;

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_signal": _signal, "_abort": _abort, "___syscall40": ___syscall40, "___setErrNo": ___setErrNo, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_localtime_r": _localtime_r, "_tzset": _tzset, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall194": ___syscall194, "__exit": __exit, "_clock": _clock, "___syscall195": ___syscall195, "___syscall221": ___syscall221, "_pthread_self": _pthread_self, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall10": ___syscall10, "___syscall5": ___syscall5, "_sysconf": _sysconf, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "_time": _time, "_emscripten_longjmp": _emscripten_longjmp, "___syscall140": ___syscall140, "_localtime": _localtime, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _signal=env._signal;
  var _abort=env._abort;
  var ___syscall40=env.___syscall40;
  var ___setErrNo=env.___setErrNo;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall194=env.___syscall194;
  var __exit=env.__exit;
  var _clock=env._clock;
  var ___syscall195=env.___syscall195;
  var ___syscall221=env.___syscall221;
  var _pthread_self=env._pthread_self;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall10=env.___syscall10;
  var ___syscall5=env.___syscall5;
  var _sysconf=env._sysconf;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _time=env._time;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _ConvertSectionName($sym,$pst,$buffer) {
 $sym = $sym|0;
 $pst = $pst|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $pst;
 $3 = $buffer;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(4);
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  if (!($5)) {
   label = 15;
   break;
  }
  $9 = $i;
  $10 = (4896 + (($9*12)|0)|0);
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $i;
  $14 = (4896 + (($13*12)|0)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (_memcmp($8,$12,$16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $i;
   $20 = (4896 + (($19*12)|0)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $1;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(0);
   if ($29) {
    break;
   }
   $30 = $i;
   $31 = (4896 + (($30*12)|0)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $1;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($33)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38 << 24 >> 24;
   $40 = ($39|0)==(36);
   if ($40) {
    $41 = $i;
    $42 = (4896 + (($41*12)|0)|0);
    $43 = ((($42)) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & 1;
    $47 = ($46|0)!=(0);
    if ($47) {
     break;
    }
   }
  }
  $92 = $i;
  $93 = (($92) + 1)|0;
  $i = $93;
 }
 if ((label|0) == 15) {
  $0 = $8;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $48 = $2;
 $49 = ($48|0)!=(0|0);
 do {
  if ($49) {
   $50 = $i;
   $51 = ($50|0)==(3);
   if ($51) {
    $52 = $1;
    $53 = ((($52)) + 60|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0);
    if ($57) {
     break;
    }
   }
   $58 = $i;
   $59 = (4944 + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $2;
   HEAP32[$61>>2] = $60;
  }
 } while(0);
 $62 = $i;
 $63 = (4896 + (($62*12)|0)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $1;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($65)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = $i;
  $74 = (4896 + (($73*12)|0)|0);
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $0 = $76;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 } else {
  $77 = $3;
  $78 = $i;
  $79 = (4896 + (($78*12)|0)|0);
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  (_strcpy($77,$81)|0);
  $82 = $3;
  $83 = $1;
  $84 = ((($83)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $i;
  $87 = (4896 + (($86*12)|0)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = (($85) + ($89)|0);
  (_strcat($82,$90)|0);
  $91 = $3;
  $0 = $91;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 return (0)|0;
}
function _OutputByte($byte) {
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $idx = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $byte;
 $1 = HEAP8[81594>>0]|0;
 $2 = $1&255;
 $3 = ($2|0)==(1);
 $4 = HEAP32[(584)>>2]|0;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(584)>>2]|0;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 if ($3) {
  $14 = (($8) - ($13))|0;
  $idx = $14;
  $15 = HEAP32[(584)>>2]|0;
  $16 = ((($15)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[(584)>>2]|0;
  $21 = ((($20)) + 60|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($19>>>0)>=($24>>>0);
  if (!($25)) {
   (_InternalError(81595,211)|0);
  }
  $26 = HEAP32[(6100)>>2]|0;
  $27 = ($26|0)==(1);
  $28 = $idx;
  $29 = ($28>>>0)>=(1014);
  $or$cond = $27 & $29;
  if ($or$cond) {
   _omf_FlushCurrSeg();
   $30 = HEAP32[(584)>>2]|0;
   $31 = ((($30)) + 60|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(584)>>2]|0;
   $36 = ((($35)) + 60|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($34) - ($39))|0;
   $idx = $40;
  }
  $41 = $0;
  $42 = $idx;
  $43 = HEAP32[(584)>>2]|0;
  $44 = ((($43)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($42)|0);
  HEAP8[$48>>0] = $41;
 } else {
  $49 = ($8>>>0)<($13>>>0);
  if ($49) {
   $50 = HEAP32[(584)>>2]|0;
   $51 = ((($50)) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[(584)>>2]|0;
   $56 = ((($55)) + 60|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 4|0);
   HEAP32[$58>>2] = $54;
  }
 }
 $59 = HEAP32[(584)>>2]|0;
 $60 = ((($59)) + 60|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$62>>2] = $64;
 $65 = HEAP32[(584)>>2]|0;
 $66 = ((($65)) + 60|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[$68>>2] = $70;
 $71 = HEAP32[(584)>>2]|0;
 $72 = ((($71)) + 60|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 67|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75 & -33;
 $77 = $76 | 32;
 HEAP8[$74>>0] = $77;
 $78 = HEAP32[(584)>>2]|0;
 $79 = ((($78)) + 60|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[(584)>>2]|0;
 $84 = ((($83)) + 36|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($82>>>0)>($85>>>0);
 if (!($86)) {
  STACKTOP = sp;return;
 }
 $87 = HEAP32[(584)>>2]|0;
 $88 = ((($87)) + 60|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($89)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[(584)>>2]|0;
 $93 = ((($92)) + 36|0);
 HEAP32[$93>>2] = $91;
 STACKTOP = sp;return;
}
function _FillDataBytes($byte,$len) {
 $byte = $byte|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $byte;
 $1 = $len;
 $2 = HEAP8[(575)>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  _omf_OutSelect(1);
 }
 while(1) {
  $4 = $1;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  _OutputByte($6);
  $7 = $1;
  $8 = (($7) + -1)|0;
  $1 = $8;
 }
 STACKTOP = sp;return;
}
function _OutputBytes($pbytes,$len,$fixup) {
 $pbytes = $pbytes|0;
 $len = $len|0;
 $fixup = $fixup|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pbytes;
 $1 = $len;
 $2 = $fixup;
 $3 = HEAP8[81594>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(1);
 $6 = HEAP32[(584)>>2]|0;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[(584)>>2]|0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 if ($5) {
  $16 = (($10) - ($15))|0;
  $idx = $16;
  $17 = HEAP32[(584)>>2]|0;
  $18 = ((($17)) + 60|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[(584)>>2]|0;
  $23 = ((($22)) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($21>>>0)>=($26>>>0);
  if (!($27)) {
   (_InternalError(81595,268)|0);
  }
  $28 = HEAP32[(6100)>>2]|0;
  $29 = ($28|0)==(1);
  if ($29) {
   $30 = $idx;
   $31 = $1;
   $32 = (($30) + ($31))|0;
   $33 = ($32>>>0)>(1014);
   if ($33) {
    _omf_FlushCurrSeg();
    $34 = HEAP32[(584)>>2]|0;
    $35 = ((($34)) + 60|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[(584)>>2]|0;
    $40 = ((($39)) + 60|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($38) - ($43))|0;
    $idx = $44;
   }
  }
  $45 = $2;
  $46 = ($45|0)!=(0|0);
  if ($46) {
   $47 = $2;
   $48 = HEAP32[(584)>>2]|0;
   $49 = $0;
   _store_fixup($47,$48,$49);
  }
  $50 = $idx;
  $51 = HEAP32[(584)>>2]|0;
  $52 = ((($51)) + 60|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($50)|0);
  $57 = $0;
  $58 = $1;
  _memcpy(($56|0),($57|0),($58|0))|0;
 } else {
  $59 = ($10>>>0)<($15>>>0);
  if ($59) {
   $60 = HEAP32[(584)>>2]|0;
   $61 = ((($60)) + 60|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[(584)>>2]|0;
   $66 = ((($65)) + 60|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 4|0);
   HEAP32[$68>>2] = $64;
  }
 }
 $69 = $1;
 $70 = HEAP32[(584)>>2]|0;
 $71 = ((($70)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($69))|0;
 HEAP32[$73>>2] = $75;
 $76 = $1;
 $77 = HEAP32[(584)>>2]|0;
 $78 = ((($77)) + 60|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + ($76))|0;
 HEAP32[$80>>2] = $82;
 $83 = HEAP32[(584)>>2]|0;
 $84 = ((($83)) + 60|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($85)) + 67|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87 & -33;
 $89 = $88 | 32;
 HEAP8[$86>>0] = $89;
 $90 = HEAP32[(584)>>2]|0;
 $91 = ((($90)) + 60|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = HEAP32[(584)>>2]|0;
 $96 = ((($95)) + 36|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($94>>>0)>($97>>>0);
 if (!($98)) {
  STACKTOP = sp;return;
 }
 $99 = HEAP32[(584)>>2]|0;
 $100 = ((($99)) + 60|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($101)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[(584)>>2]|0;
 $105 = ((($104)) + 36|0);
 HEAP32[$105>>2] = $103;
 STACKTOP = sp;return;
}
function _SetCurrOffset($seg,$value,$relative,$select_data) {
 $seg = $seg|0;
 $value = $value|0;
 $relative = $relative|0;
 $select_data = $select_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $seg;
 $1 = $value;
 $2 = $relative;
 $3 = $select_data;
 $4 = $2;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 60|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + ($10))|0;
  $1 = $12;
 }
 $13 = HEAP32[(6100)>>2]|0;
 $14 = ($13|0)==(1);
 if ($14) {
  $15 = $0;
  $16 = HEAP32[(584)>>2]|0;
  $17 = ($15|0)==($16|0);
  if ($17) {
   $18 = HEAP8[81594>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)==(1);
   if ($20) {
    _omf_FlushCurrSeg();
   }
   $21 = $3;
   $22 = ($21<<24>>24)!=(0);
   $23 = HEAP8[(575)>>0]|0;
   $24 = ($23<<24>>24)!=(0);
   $or$cond = $22 & $24;
   if ($or$cond) {
    _omf_OutSelect(1);
   }
   $25 = $1;
   HEAP32[14996>>2] = $25;
  }
  $26 = $1;
  $27 = $0;
  $28 = ((($27)) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 4|0);
  HEAP32[$30>>2] = $26;
 } else {
  $31 = HEAP8[81594>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)!=(0);
  $34 = $2;
  $35 = ($34<<24>>24)!=(0);
  $or$cond3 = $33 | $35;
  if (!($or$cond3)) {
   $36 = $0;
   $37 = ((($36)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = $1;
    $43 = $0;
    $44 = ((($43)) + 60|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 4|0);
    HEAP32[$46>>2] = $42;
   }
  }
 }
 $47 = $1;
 $48 = $0;
 $49 = ((($48)) + 60|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = $47;
 $52 = $0;
 $53 = ((($52)) + 60|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 67|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 & -33;
 HEAP8[$55>>0] = $57;
 $58 = $0;
 $59 = ((($58)) + 60|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $0;
 $64 = ((($63)) + 36|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62>>>0)>($65>>>0);
 if (!($66)) {
  STACKTOP = sp;return 0;
 }
 $67 = $0;
 $68 = ((($67)) + 60|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $0;
 $73 = ((($72)) + 36|0);
 HEAP32[$73>>2] = $71;
 STACKTOP = sp;return 0;
}
function _WritePreprocessedLine($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $string;
 $1 = HEAP32[(616)>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $18 = HEAP8[81606>>0]|0;
  $19 = ($18<<24>>24)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  HEAP8[81606>>0] = 0;
  (_printf(88051,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $3 = $0;
 $p = $3;
 while(1) {
  $4 = $p;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (_isspace($6)|0);
  $8 = ($7|0)!=(0);
  $9 = $p;
  if (!($8)) {
   break;
  }
  $10 = ((($9)) + 1|0);
  $p = $10;
 }
 $11 = HEAP8[$9>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(37);
 $14 = $p;
 $15 = ((($14)) + 1|0);
 $16 = $0;
 $17 = $13 ? $15 : $16;
 HEAP32[$vararg_buffer>>2] = $17;
 (_printf(83666,$vararg_buffer)|0);
 HEAP8[81606>>0] = 1;
 STACKTOP = sp;return;
}
function _SetMasm510($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = $1&255;
 $3 = HEAP32[(560)>>2]|0;
 $4 = $2 & 1;
 $5 = $4 << 6;
 $6 = $3 & -65;
 $7 = $6 | $5;
 HEAP32[(560)>>2] = $7;
 $8 = $0;
 $9 = $8&255;
 $10 = HEAP32[(560)>>2]|0;
 $11 = $9 & 1;
 $12 = $11 << 8;
 $13 = $10 & -257;
 $14 = $13 | $12;
 HEAP32[(560)>>2] = $14;
 $15 = $0;
 $16 = $15&255;
 $17 = HEAP32[(560)>>2]|0;
 $18 = $16 & 1;
 $19 = $18 << 4;
 $20 = $17 & -17;
 $21 = $20 | $19;
 HEAP32[(560)>>2] = $21;
 $22 = $0;
 $23 = $22&255;
 $24 = HEAP32[(560)>>2]|0;
 $25 = $23 & 1;
 $26 = $25 << 10;
 $27 = $24 & -1025;
 $28 = $27 | $26;
 HEAP32[(560)>>2] = $28;
 $29 = $0;
 $30 = ($29<<24>>24)!=(0);
 $31 = HEAP32[(512)>>2]|0;
 $32 = ($31|0)==(0);
 $or$cond = $30 & $32;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[(536)>>2] = 2;
 $33 = HEAP32[(516)>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = HEAP32[(560)>>2]|0;
 $36 = $35 & -129;
 HEAP32[(560)>>2] = $36;
 $37 = HEAP32[(560)>>2]|0;
 $38 = $37 & -5;
 $39 = $38 | 4;
 HEAP32[(560)>>2] = $39;
 STACKTOP = sp;return;
}
function _close_files() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(372)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(372)>>2]|0;
  $3 = (_fclose($2)|0);
  $4 = ($3|0)!=(0);
  if ($4) {
   $5 = HEAP32[(388)>>2]|0;
   $6 = (___errno_location()|0);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $7;
   (_EmitErr(107,$vararg_buffer)|0);
  }
  HEAP32[(372)>>2] = 0;
 }
 $8 = HEAP32[(376)>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[(376)>>2]|0;
  $11 = (_fclose($10)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = HEAP32[(392)>>2]|0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $13;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $15;
   (_EmitErr(107,$vararg_buffer3)|0);
  }
  HEAP32[(376)>>2] = 0;
 }
 $16 = HEAP8[(6128)>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(0);
 $19 = HEAP32[320>>2]|0;
 $20 = ($19>>>0)>(0);
 $or$cond = $18 & $20;
 if ($or$cond) {
  $21 = HEAP32[(392)>>2]|0;
  (_remove($21)|0);
 }
 $22 = HEAP32[(380)>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = HEAP32[(380)>>2]|0;
  (_fclose($24)|0);
  HEAP32[(380)>>2] = 0;
 }
 $25 = HEAP32[(384)>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = HEAP32[(384)>>2]|0;
  (_fclose($27)|0);
  HEAP32[(384)>>2] = 0;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[(400)>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[(400)>>2]|0;
 (_remove($30)|0);
 STACKTOP = sp;return;
}
function _AssembleModule($source) {
 $source = $source|0;
 var $$reg2mem77$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0;
 var $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $curr_written$0 = 0, $or$cond = 0, $or$cond3 = 0, $prev_written$0 = 0, $prev_written$0$phi = 0;
 var $prev_written$1 = 0, $prev_written$2 = 0, $seg$0 = 0, $seg$1 = 0, $vararg_buffer = 0, $vararg_buffer79 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr85 = 0, $vararg_ptr86 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer90 = sp + 40|0;
 $vararg_buffer87 = sp + 32|0;
 $vararg_buffer79 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 _memset((320|0),0,4408)|0;
 _setjmpTable = _saveSetjmp(4728,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = (threwValue); } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 if ($cond) {
  $$reg2mem77$0 = $2;$prev_written$0 = -1;
 } else {
  $$reg2mem77$0 = 0;$prev_written$0 = -1;
 }
 L3: while(1) {
  $3 = ($$reg2mem77$0|0)!=(0);
  if ($3) {
   $4 = HEAP32[(424)>>2]|0;
   $5 = ($4|0)!=(0|0);
   if ($5) {
    __THREW__ = 0;
    invoke_v(186);
    $6 = __THREW__; __THREW__ = 0;
    if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
    $8 = tempRet0;
    $cond22 = ($7|0)==(1);
    if ($cond22) {
     $prev_written$0$phi = $prev_written$0;$$reg2mem77$0 = $8;$prev_written$0 = $prev_written$0$phi;
     continue;
    }
    $prev_written$2 = $prev_written$0;
   } else {
    $prev_written$2 = $prev_written$0;
   }
  } else {
   __THREW__ = 0;
   invoke_vi(187,($source|0));
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = (threwValue); } else { $10 = -1; };
   $11 = tempRet0;
   $cond1 = ($10|0)==(1);
   if ($cond1) {
    $prev_written$0$phi = $prev_written$0;$$reg2mem77$0 = $11;$prev_written$0 = $prev_written$0$phi;
    continue;
   }
   __THREW__ = 0;
   $12 = (invoke_i(188)|0);
   $13 = __THREW__; __THREW__ = 0;
   if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
   $15 = tempRet0;
   $cond2 = ($14|0)==(1);
   if ($cond2) {
    $prev_written$0$phi = $prev_written$0;$$reg2mem77$0 = $15;$prev_written$0 = $prev_written$0$phi;
    continue;
   }
   HEAP32[4884>>2] = 0;
   $prev_written$1 = $prev_written$0;
   while(1) {
    __THREW__ = 0;
    (invoke_i(189)|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = (threwValue); } else { $17 = -1; };
    $18 = tempRet0;
    $cond3 = ($17|0)==(1);
    if ($cond3) {
     $$reg2mem77$0 = $18;$prev_written$0 = $prev_written$1;
     continue L3;
    }
    $19 = HEAP32[320>>2]|0;
    $20 = ($19>>>0)>(0);
    if ($20) {
     break;
    }
    $21 = HEAP32[(15420)>>2]|0;
    $curr_written$0 = 0;$seg$0 = $21;
    while(1) {
     $22 = ($seg$0|0)!=(0|0);
     if (!($22)) {
      break;
     }
     $23 = ((($seg$0)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($curr_written$0) + ($24))|0;
     $26 = ((($seg$0)) + 64|0);
     $27 = HEAP32[$26>>2]|0;
     $curr_written$0 = $25;$seg$0 = $27;
    }
    $28 = HEAP8[(574)>>0]|0;
    $29 = ($28<<24>>24)!=(0);
    if (!($29)) {
     $30 = ($prev_written$1|0)==($curr_written$0|0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[4884>>2]|0;
    $32 = (($31>>>0) % 200)&-1;
    $33 = ($32|0)==(199);
    if ($33) {
     $34 = HEAP32[4884>>2]|0;
     $35 = (($34) + 1)|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = $35;
     invoke_viii(190,2,240,($vararg_buffer|0));
     $36 = __THREW__; __THREW__ = 0;
     if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = (threwValue); } else { $37 = -1; };
     $38 = tempRet0;
     $cond10 = ($37|0)==(1);
     if ($cond10) {
      $$reg2mem77$0 = $38;$prev_written$0 = $curr_written$0;
      continue L3;
     }
    }
    $39 = HEAP8[(6005)>>0]|0;
    $40 = ($39<<24>>24)!=(0);
    L27: do {
     if ($40) {
      $41 = HEAP32[(6100)>>2]|0;
      $42 = ($41|0)==(2);
      if (!($42)) {
       __THREW__ = 0;
       invoke_vi(191,(4888|0));
       $62 = __THREW__; __THREW__ = 0;
       if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = (threwValue); } else { $63 = -1; };
       $64 = tempRet0;
       $cond8 = ($63|0)==(1);
       if ($cond8) {
        $$reg2mem77$0 = $64;$prev_written$0 = $curr_written$0;
        continue L3;
       }
       HEAP32[4888>>2] = 0;
       break;
      }
      $43 = HEAP32[(15420)>>2]|0;
      $seg$1 = $43;
      while(1) {
       $44 = ($seg$1|0)!=(0|0);
       if (!($44)) {
        break L27;
       }
       $45 = ((($seg$1)) + 60|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ((($46)) + 32|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)!=(0|0);
       if ($49) {
        $50 = ((($seg$1)) + 60|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ((($51)) + 32|0);
        $53 = HEAP32[$52>>2]|0;
        __THREW__ = 0;
        invoke_vi(191,($53|0));
        $54 = __THREW__; __THREW__ = 0;
        if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = (threwValue); } else { $55 = -1; };
        $56 = tempRet0;
        $cond9 = ($55|0)==(1);
        if ($cond9) {
         $$reg2mem77$0 = $56;$prev_written$0 = $curr_written$0;
         continue L3;
        }
       }
       $57 = ((($seg$1)) + 60|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ((($58)) + 32|0);
       HEAP32[$59>>2] = 0;
       $60 = ((($seg$1)) + 64|0);
       $61 = HEAP32[$60>>2]|0;
       $seg$1 = $61;
      }
     }
    } while(0);
    $65 = HEAP32[(372)>>2]|0;
    __THREW__ = 0;
    invoke_vi(192,($65|0));
    $66 = __THREW__; __THREW__ = 0;
    if ((($66|0) != 0) & ((threwValue|0) != 0)) { $67 = _testSetjmp(HEAP32[$66>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($67|0) == 0) { _longjmp($66|0, threwValue|0); } tempRet0 = (threwValue); } else { $67 = -1; };
    $68 = tempRet0;
    $cond4 = ($67|0)==(1);
    if ($cond4) {
     $$reg2mem77$0 = $68;$prev_written$0 = $curr_written$0;
     continue L3;
    }
    $69 = HEAP8[81594>>0]|0;
    $70 = $69&255;
    $71 = ($70|0)!=(0);
    $72 = HEAP32[(6100)>>2]|0;
    $73 = ($72|0)==(1);
    $or$cond = $71 & $73;
    if ($or$cond) {
     __THREW__ = 0;
     invoke_v(193);
     $74 = __THREW__; __THREW__ = 0;
     if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = (threwValue); } else { $75 = -1; };
     $76 = tempRet0;
     $cond7 = ($75|0)==(1);
     if ($cond7) {
      $$reg2mem77$0 = $76;$prev_written$0 = $curr_written$0;
      continue L3;
     }
    }
    $77 = HEAP8[87036>>0]|0;
    $78 = $77&255;
    $79 = ($78|0)==(0);
    $80 = HEAP32[(380)>>2]|0;
    $81 = ($80|0)!=(0|0);
    $or$cond3 = $79 & $81;
    if ($or$cond3) {
     $82 = HEAP32[(380)>>2]|0;
     __THREW__ = 0;
     invoke_vi(192,($82|0));
     $83 = __THREW__; __THREW__ = 0;
     if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = (threwValue); } else { $84 = -1; };
     $85 = tempRet0;
     $cond5 = ($84|0)==(1);
     if ($cond5) {
      $$reg2mem77$0 = $85;$prev_written$0 = $curr_written$0;
      continue L3;
     }
     __THREW__ = 0;
     invoke_v(194);
     $86 = __THREW__; __THREW__ = 0;
     if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = (threwValue); } else { $87 = -1; };
     $88 = tempRet0;
     $cond6 = ($87|0)==(1);
     if ($cond6) {
      $$reg2mem77$0 = $88;$prev_written$0 = $curr_written$0;
      continue L3;
     }
    }
    $89 = HEAP32[4884>>2]|0;
    $90 = (($89) + 1)|0;
    HEAP32[4884>>2] = $90;
    $prev_written$1 = $curr_written$0;
   }
   $91 = HEAP32[4884>>2]|0;
   $92 = ($91>>>0)>(0);
   if ($92) {
    $93 = HEAP8[81594>>0]|0;
    $94 = $93&255;
    $95 = ($94|0)!=(0);
    if ($95) {
     __THREW__ = 0;
     (invoke_ii(195,(320|0))|0);
     $96 = __THREW__; __THREW__ = 0;
     if ((($96|0) != 0) & ((threwValue|0) != 0)) { $97 = _testSetjmp(HEAP32[$96>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($97|0) == 0) { _longjmp($96|0, threwValue|0); } tempRet0 = (threwValue); } else { $97 = -1; };
     $98 = tempRet0;
     $cond21 = ($97|0)==(1);
     if ($cond21) {
      $$reg2mem77$0 = $98;$prev_written$0 = $prev_written$1;
      continue;
     }
    }
   }
   __THREW__ = 0;
   invoke_v(196);
   $99 = __THREW__; __THREW__ = 0;
   if ((($99|0) != 0) & ((threwValue|0) != 0)) { $100 = _testSetjmp(HEAP32[$99>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($100|0) == 0) { _longjmp($99|0, threwValue|0); } tempRet0 = (threwValue); } else { $100 = -1; };
   $101 = tempRet0;
   $cond11 = ($100|0)==(1);
   if ($cond11) {
    $$reg2mem77$0 = $101;$prev_written$0 = $prev_written$1;
    continue;
   }
   __THREW__ = 0;
   $102 = (invoke_i(188)|0);
   $103 = __THREW__; __THREW__ = 0;
   if ((($103|0) != 0) & ((threwValue|0) != 0)) { $104 = _testSetjmp(HEAP32[$103>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($104|0) == 0) { _longjmp($103|0, threwValue|0); } tempRet0 = (threwValue); } else { $104 = -1; };
   $105 = tempRet0;
   $cond12 = ($104|0)==(1);
   if ($cond12) {
    $$reg2mem77$0 = $105;$prev_written$0 = $prev_written$1;
    continue;
   }
   $106 = HEAP32[(600)>>2]|0;
   __THREW__ = 0;
   $107 = (invoke_ii(197,1)|0);
   $108 = __THREW__; __THREW__ = 0;
   if ((($108|0) != 0) & ((threwValue|0) != 0)) { $109 = _testSetjmp(HEAP32[$108>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($109|0) == 0) { _longjmp($108|0, threwValue|0); } tempRet0 = (threwValue); } else { $109 = -1; };
   $110 = tempRet0;
   $cond13 = ($109|0)==(1);
   if ($cond13) {
    $$reg2mem77$0 = $110;$prev_written$0 = $prev_written$1;
    continue;
   }
   $111 = HEAP32[(580)>>2]|0;
   __THREW__ = 0;
   $112 = (invoke_ii(198,($111|0))|0);
   $113 = __THREW__; __THREW__ = 0;
   if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = (threwValue); } else { $114 = -1; };
   $115 = tempRet0;
   $cond14 = ($114|0)==(1);
   if ($cond14) {
    $$reg2mem77$0 = $115;$prev_written$0 = $prev_written$1;
    continue;
   }
   $116 = HEAP32[$112>>2]|0;
   __THREW__ = 0;
   $117 = (invoke_i(199)|0);
   $118 = __THREW__; __THREW__ = 0;
   if ((($118|0) != 0) & ((threwValue|0) != 0)) { $119 = _testSetjmp(HEAP32[$118>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($119|0) == 0) { _longjmp($118|0, threwValue|0); } tempRet0 = (threwValue); } else { $119 = -1; };
   $120 = tempRet0;
   $cond15 = ($119|0)==(1);
   if ($cond15) {
    $$reg2mem77$0 = $120;$prev_written$0 = $prev_written$1;
    continue;
   }
   $121 = HEAP32[4884>>2]|0;
   $122 = (($121) + 1)|0;
   $123 = (($102) - ($12))|0;
   $124 = HEAP32[(324)>>2]|0;
   $125 = HEAP32[320>>2]|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer79>>2] = $116;
   $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
   HEAP32[$vararg_ptr82>>2] = $117;
   $vararg_ptr83 = ((($vararg_buffer79)) + 8|0);
   HEAP32[$vararg_ptr83>>2] = $122;
   $vararg_ptr84 = ((($vararg_buffer79)) + 12|0);
   HEAP32[$vararg_ptr84>>2] = $123;
   $vararg_ptr85 = ((($vararg_buffer79)) + 16|0);
   HEAP32[$vararg_ptr85>>2] = $124;
   $vararg_ptr86 = ((($vararg_buffer79)) + 20|0);
   HEAP32[$vararg_ptr86>>2] = $125;
   (invoke_iiii(200,($106|0),($107|0),($vararg_buffer79|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   if ((($126|0) != 0) & ((threwValue|0) != 0)) { $127 = _testSetjmp(HEAP32[$126>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($127|0) == 0) { _longjmp($126|0, threwValue|0); } tempRet0 = (threwValue); } else { $127 = -1; };
   $128 = tempRet0;
   $cond16 = ($127|0)==(1);
   if ($cond16) {
    $$reg2mem77$0 = $128;$prev_written$0 = $prev_written$1;
    continue;
   }
   $129 = HEAP8[6004>>0]|0;
   $130 = $129&255;
   $131 = ($130|0)==(0);
   if ($131) {
    $132 = HEAP32[(600)>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer87>>2] = $132;
    (invoke_iii(201,(83666|0),($vararg_buffer87|0))|0);
    $133 = __THREW__; __THREW__ = 0;
    if ((($133|0) != 0) & ((threwValue|0) != 0)) { $134 = _testSetjmp(HEAP32[$133>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($134|0) == 0) { _longjmp($133|0, threwValue|0); } tempRet0 = (threwValue); } else { $134 = -1; };
    $135 = tempRet0;
    $cond20 = ($134|0)==(1);
    if ($cond20) {
     $$reg2mem77$0 = $135;$prev_written$0 = $prev_written$1;
     continue;
    }
   }
   $136 = HEAP32[(380)>>2]|0;
   $137 = ($136|0)!=(0|0);
   if ($137) {
    $138 = HEAP32[(600)>>2]|0;
    __THREW__ = 0;
    invoke_vii(202,($138|0),($vararg_buffer90|0));
    $139 = __THREW__; __THREW__ = 0;
    if ((($139|0) != 0) & ((threwValue|0) != 0)) { $140 = _testSetjmp(HEAP32[$139>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($140|0) == 0) { _longjmp($139|0, threwValue|0); } tempRet0 = (threwValue); } else { $140 = -1; };
    $141 = tempRet0;
    $cond18 = ($140|0)==(1);
    if ($cond18) {
     $$reg2mem77$0 = $141;$prev_written$0 = $prev_written$1;
     continue;
    }
    __THREW__ = 0;
    invoke_v(203);
    $142 = __THREW__; __THREW__ = 0;
    if ((($142|0) != 0) & ((threwValue|0) != 0)) { $143 = _testSetjmp(HEAP32[$142>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($143|0) == 0) { _longjmp($142|0, threwValue|0); } tempRet0 = (threwValue); } else { $143 = -1; };
    $144 = tempRet0;
    $cond19 = ($143|0)==(1);
    if ($cond19) {
     $$reg2mem77$0 = $144;$prev_written$0 = $prev_written$1;
     continue;
    }
    $prev_written$2 = $prev_written$1;
   } else {
    $prev_written$2 = $prev_written$1;
   }
  }
  __THREW__ = 0;
  invoke_v(204);
  $145 = __THREW__; __THREW__ = 0;
  if ((($145|0) != 0) & ((threwValue|0) != 0)) { $146 = _testSetjmp(HEAP32[$145>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($146|0) == 0) { _longjmp($145|0, threwValue|0); } tempRet0 = (threwValue); } else { $146 = -1; };
  $147 = tempRet0;
  $cond17 = ($146|0)==(1);
  if ($cond17) {
   $$reg2mem77$0 = $147;$prev_written$0 = $prev_written$2;
  } else {
   break;
  }
 }
 $148 = HEAP32[320>>2]|0;
 $149 = ($148|0)==(0);
 $150 = $149&1;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($150|0);
}
function _AssembleInit($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 _MemInit();
 HEAP8[81594>>0] = 0;
 HEAP32[4888>>2] = 0;
 $1 = $0;
 _SetFilenames($1);
 _FastpassInit();
 _open_files();
 _ReswTableInit();
 _SymInit();
 _InputInit();
 _ModuleInit();
 _CondInit();
 _ExprEvalInit();
 _LstInit();
 STACKTOP = sp;return;
}
function _OnePass() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pq = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _InputPassInit();
 _ModulePassInit();
 $0 = HEAP32[4884>>2]|0;
 _SymPassInit($0);
 _LabelInit();
 $1 = HEAP32[4884>>2]|0;
 _SegmentInit($1);
 $2 = HEAP32[4884>>2]|0;
 _ContextInit($2);
 _ProcInit();
 _TypesInit();
 $3 = HEAP32[4884>>2]|0;
 _HllInit($3);
 $4 = HEAP32[4884>>2]|0;
 (_MacroInit($4)|0);
 $5 = HEAP32[4884>>2]|0;
 _AssumeInit($5);
 $6 = HEAP32[4884>>2]|0;
 _CmdlParamsInit($6);
 $7 = HEAP32[(560)>>2]|0;
 $8 = $7 & -65537;
 HEAP32[(560)>>2] = $8;
 HEAP8[(574)>>0] = 0;
 _LinnumInit();
 $9 = HEAP32[(416)>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  _RunLineQueue();
 }
 HEAP8[87035>>0] = 0;
 $11 = HEAP32[4884>>2]|0;
 $12 = ($11>>>0)>(0);
 L4: do {
  if ($12) {
   $13 = HEAP8[87036>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)==(1);
   if ($15) {
    $16 = (_RestoreState()|0);
    HEAP32[9080>>2] = $16;
    while(1) {
     $17 = HEAP32[9080>>2]|0;
     $18 = ($17|0)!=(0|0);
     if (!($18)) {
      break L4;
     }
     $19 = HEAP32[(560)>>2]|0;
     $20 = $19 >>> 16;
     $21 = $20 & 1;
     $22 = ($21|0)==(0);
     if (!($22)) {
      break L4;
     }
     $23 = HEAP32[9080>>2]|0;
     $24 = ((($23)) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 >>> 20;
     $27 = HEAP32[9080>>2]|0;
     $28 = ((($27)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 & 1048575;
     _set_curr_srcfile($26,$30);
     HEAP8[(550)>>0] = 0;
     $31 = HEAP32[9080>>2]|0;
     $32 = ((($31)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 >>> 20;
     $35 = ($34|0)==(4095);
     $36 = $35 ? 1 : 0;
     $37 = $36&255;
     HEAP8[87007>>0] = $37;
     HEAP32[(604)>>2] = 0;
     $38 = HEAP32[9080>>2]|0;
     $39 = ((($38)) + 12|0);
     $40 = HEAP32[(608)>>2]|0;
     $41 = (_Tokenize($39,0,$40,0)|0);
     HEAP32[(616)>>2] = $41;
     $42 = ($41|0)!=(0);
     if ($42) {
      $43 = HEAP32[(608)>>2]|0;
      (_ParseLine($43)|0);
     }
     $44 = HEAP32[9080>>2]|0;
     $45 = HEAP32[$44>>2]|0;
     HEAP32[9080>>2] = $45;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $46 = HEAP32[(6056)>>2]|0;
  $pq = $46;
  while(1) {
   $47 = $pq;
   $48 = ($47|0)!=(0|0);
   if (!($48)) {
    break;
   }
   $49 = $pq;
   $50 = ((($49)) + 4|0);
   $51 = (_SearchFile($50,1)|0);
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = HEAP32[(608)>>2]|0;
    _ProcessFile($53);
   }
   $54 = $pq;
   $55 = HEAP32[$54>>2]|0;
   $pq = $55;
  }
  $56 = HEAP32[(608)>>2]|0;
  _ProcessFile($56);
 }
 _LinnumFini();
 $57 = HEAP32[4884>>2]|0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  _ClearSrcStack();
  STACKTOP = sp;return 1;
 }
 _PassOneChecks();
 _ClearSrcStack();
 STACKTOP = sp;return 1;
}
function _WriteModule($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $curr = 0, $ld = 0;
 var $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $modinfo;
 $2 = HEAP32[(15420)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 64|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(0);
  do {
   if ($11) {
    $12 = $curr;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>(65536);
    if ($15) {
     $16 = HEAP32[(6100)>>2]|0;
     $17 = ($16|0)==(1);
     $18 = $curr;
     $19 = ((($18)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     if ($17) {
      HEAP32[$vararg_buffer>>2] = $20;
      (_EmitErr(222,$vararg_buffer)|0);
      break;
     } else {
      HEAP32[$vararg_buffer1>>2] = $20;
      _EmitWarn(2,222,$vararg_buffer1);
      break;
     }
    }
   }
  } while(0);
  $21 = $curr;
  $22 = ((($21)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $curr = $23;
 }
 $24 = $1;
 $25 = ((($24)) + 152|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 (FUNCTION_TABLE_ii[$26 & 255]($27)|0);
 $28 = HEAP32[(6036)>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[(6036)>>2]|0;
  $31 = (_fopen($30,87580)|0);
  $ld = $31;
  $32 = $ld;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $34 = HEAP32[(6036)>>2]|0;
   $35 = (_ErrnoStr()|0);
   HEAP32[$vararg_buffer4>>2] = $34;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $35;
   $36 = (_EmitErr(106,$vararg_buffer4)|0);
   $0 = $36;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  }
  $37 = HEAP32[(15412)>>2]|0;
  $curr = $37;
  while(1) {
   $38 = $curr;
   $39 = ($38|0)!=(0|0);
   if (!($39)) {
    break;
   }
   $40 = $curr;
   $41 = ((($40)) + 24|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = ($42&65535) >>> 11;
   $44 = $43 & 1;
   $45 = $44&255;
   $46 = $45&255;
   $47 = ($46|0)!=(0);
   do {
    if ($47) {
     $48 = $curr;
     $49 = ((($48)) + 28|0);
     $50 = ((($49)) + 3|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = ($51&255) >>> 3;
     $53 = $52 & 1;
     $54 = $53&255;
     $55 = ($54|0)==(0);
     if (!($55)) {
      $56 = $curr;
      $57 = ((($56)) + 24|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = ($58&65535) >>> 3;
      $60 = $59 & 1;
      $61 = $60&255;
      $62 = $61&255;
      $63 = ($62|0)!=(0);
      if (!($63)) {
       break;
      }
     }
     $64 = $curr;
     $65 = ((($64)) + 36|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0|0);
     if ($67) {
      $68 = $curr;
      $69 = ((($68)) + 36|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ((($70)) + 8|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = $72 << 24 >> 24;
      $74 = ($73|0)!=(0);
      if ($74) {
       $75 = $curr;
       $76 = HEAP32[(612)>>2]|0;
       (_Mangle($75,$76)|0);
       $77 = HEAP32[(600)>>2]|0;
       $78 = HEAP32[(612)>>2]|0;
       $79 = $curr;
       $80 = ((($79)) + 36|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($81)) + 8|0);
       $83 = $curr;
       $84 = ((($83)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       HEAP32[$vararg_buffer8>>2] = $78;
       $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
       HEAP32[$vararg_ptr11>>2] = $82;
       $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
       HEAP32[$vararg_ptr12>>2] = $85;
       $86 = (_sprintf($77,81607,$vararg_buffer8)|0);
       $size = $86;
       $87 = HEAP32[(600)>>2]|0;
       $88 = $size;
       $89 = $ld;
       $90 = (_fwrite($87,1,$88,$89)|0);
       $91 = $size;
       $92 = ($90|0)!=($91|0);
       if ($92) {
        _WriteError();
       }
      }
     }
    }
   } while(0);
   $93 = $curr;
   $94 = ((($93)) + 64|0);
   $95 = HEAP32[$94>>2]|0;
   $curr = $95;
  }
  $96 = $ld;
  (_fclose($96)|0);
 }
 $0 = 0;
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _AssembleFini() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _SegmentFini();
 _SymFini();
 _ResWordsFini();
 _FreePubQueue();
 _InputFini();
 _close_files();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ((388) + ($2<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 _MemFini();
 STACKTOP = sp;return;
}
function _ModulePassInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $cpu = 0, $curr = 0, $model = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(6120)>>2]|0;
 $cpu = $0;
 $1 = HEAP32[(6116)>>2]|0;
 $model = $1;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -5;
 HEAP32[(560)>>2] = $3;
 $4 = HEAP32[(560)>>2]|0;
 $5 = $4 & -9;
 HEAP32[(560)>>2] = $5;
 HEAP32[(536)>>2] = 0;
 $6 = HEAP32[(560)>>2]|0;
 $7 = $6 & -129;
 $8 = $7 | 128;
 HEAP32[(560)>>2] = $8;
 $9 = HEAP8[87036>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[(6112)>>2]|0;
  HEAP32[(516)>>2] = $12;
  $13 = HEAP32[(6124)>>2]|0;
  HEAP32[(528)>>2] = $13;
  $14 = HEAP32[(524)>>2]|0;
  $15 = ($14|0)==(3);
  if ($15) {
   $16 = $cpu;
   $17 = $16 & 240;
   $18 = ($17>>>0)<(112);
   if ($18) {
    $cpu = 112;
   }
   $model = 7;
   $19 = HEAP32[(516)>>2]|0;
   $20 = ($19|0)==(0);
   $21 = HEAP32[(6100)>>2]|0;
   $22 = ($21|0)==(2);
   $or$cond = $20 & $22;
   if ($or$cond) {
    HEAP32[(516)>>2] = 7;
   }
  } else {
   $23 = $model;
   $24 = ($23|0)==(7);
   if ($24) {
    $25 = $cpu;
    $26 = $25 & 240;
    $27 = ($26>>>0)<(48);
    if ($27) {
     $cpu = 48;
    }
   }
  }
  $28 = $cpu;
  (_SetCPU($28)|0);
  $29 = $model;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $model;
   $32 = (($31) - 1)|0;
   $33 = (8380 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer>>2] = 266;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $34;
   _AddLineQueueX(81635,$vararg_buffer);
  }
 }
 $35 = HEAP8[(6082)>>0]|0;
 _SetMasm510($35);
 HEAP8[(557)>>0] = 0;
 $36 = HEAP32[(560)>>2]|0;
 $37 = $36 & -33;
 $38 = $37 | 32;
 HEAP32[(560)>>2] = $38;
 $39 = HEAP8[(6077)>>0]|0;
 $40 = $39&255;
 $41 = HEAP32[(560)>>2]|0;
 $42 = $40 & 1;
 $43 = $42 << 11;
 $44 = $41 & -2049;
 $45 = $44 | $43;
 HEAP32[(560)>>2] = $45;
 $46 = HEAP32[(560)>>2]|0;
 $47 = $46 & -4097;
 $48 = $47 | 4096;
 HEAP32[(560)>>2] = $48;
 $49 = HEAP8[(6086)>>0]|0;
 $50 = $49&255;
 $51 = HEAP32[(560)>>2]|0;
 $52 = $50 & 1;
 $53 = $52 << 13;
 $54 = $51 & -8193;
 $55 = $54 | $53;
 HEAP32[(560)>>2] = $55;
 $56 = HEAP8[(6087)>>0]|0;
 $57 = $56&255;
 $58 = HEAP32[(560)>>2]|0;
 $59 = $57 & 1;
 $60 = $59 << 14;
 $61 = $58 & -16385;
 $62 = $61 | $60;
 HEAP32[(560)>>2] = $62;
 $63 = HEAP32[(6088)>>2]|0;
 HEAP32[(552)>>2] = $63;
 $64 = HEAP8[(6079)>>0]|0;
 $65 = $64&255;
 $66 = HEAP32[(560)>>2]|0;
 $67 = $65 & 1;
 $68 = $66 & -2;
 $69 = $68 | $67;
 HEAP32[(560)>>2] = $69;
 $70 = HEAP8[(6080)>>0]|0;
 $71 = $70&255;
 $72 = HEAP32[(560)>>2]|0;
 $73 = $71 & 1;
 $74 = $73 << 1;
 $75 = $72 & -3;
 $76 = $75 | $74;
 HEAP32[(560)>>2] = $76;
 _SymSetCmpFunc();
 HEAP32[(532)>>2] = 0;
 HEAP8[(548)>>0] = 10;
 $77 = HEAP8[(6108)>>0]|0;
 HEAP8[(549)>>0] = $77;
 HEAP8[(551)>>0] = 0;
 $78 = HEAP32[(364)>>2]|0;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = HEAP32[(15412)>>2]|0;
 $curr = $80;
 while(1) {
  $81 = $curr;
  $82 = ($81|0)!=(0|0);
  if (!($82)) {
   break;
  }
  $83 = $curr;
  $84 = ((($83)) + 24|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85 & -9;
  HEAP16[$84>>1] = $86;
  $87 = $curr;
  $88 = ((($87)) + 64|0);
  $89 = HEAP32[$88>>2]|0;
  $curr = $89;
 }
 STACKTOP = sp;return;
}
function _CmdlParamsInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $env = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  _add_cmdline_tmacros();
  _add_incpaths();
  $3 = HEAP8[(6096)>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (_getenv((81627|0))|0);
   $env = $6;
   $7 = ($6|0)!=(0|0);
   if ($7) {
    $8 = $env;
    _AddStringToIncludePath($8);
   }
  }
 }
 STACKTOP = sp;return;
}
function _PassOneChecks() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $next = 0, $or$cond = 0, $or$cond3 = 0, $q = 0, $qn = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _HllCheckOpen();
 _CondCheckOpen();
 $0 = HEAP32[(560)>>2]|0;
 $1 = $0 >>> 16;
 $2 = $1 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  (_EmitError(99)|0);
 }
 $4 = HEAP32[(332)>>2]|0;
 $q = $4;
 $qn = (332);
 while(1) {
  $5 = $q;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $q;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = $q;
  if ($12) {
   $qn = $13;
  } else {
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if (!($18)) {
    label = 10;
    break;
   }
   $19 = $q;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 28|0);
   $23 = ((($22)) + 3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24&255) >>> 3;
   $26 = $25 & 1;
   $27 = $26&255;
   $28 = ($27|0)==(1);
   if (!($28)) {
    label = 10;
    break;
   }
   $29 = $q;
   $30 = HEAP32[$29>>2]|0;
   $31 = $qn;
   HEAP32[$31>>2] = $30;
   $32 = $qn;
   $q = $32;
  }
  $33 = $q;
  $34 = HEAP32[$33>>2]|0;
  $q = $34;
 }
 if ((label|0) == 10) {
  _SkipSavedState();
 }
 $35 = HEAP32[(15420)>>2]|0;
 $curr = $35;
 while(1) {
  $36 = $curr;
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   break;
  }
  $38 = $curr;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   label = 15;
   break;
  }
  $42 = $curr;
  $43 = ((($42)) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $curr = $44;
 }
 if ((label|0) == 15) {
  _SkipSavedState();
 }
 $45 = HEAP32[(348)>>2]|0;
 $q = $45;
 while(1) {
  $46 = $q;
  $47 = ($46|0)!=(0|0);
  if (!($47)) {
   break;
  }
  $48 = $q;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)!=(1);
  if ($53) {
   label = 21;
   break;
  }
  $54 = $q;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 24|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = ($58&65535) >>> 11;
  $60 = $59 & 1;
  $61 = $60&255;
  $62 = $61&255;
  $63 = ($62|0)==(0);
  if ($63) {
   label = 21;
   break;
  }
  $64 = $q;
  $65 = HEAP32[$64>>2]|0;
  $q = $65;
 }
 if ((label|0) == 21) {
  _SkipSavedState();
 }
 $66 = HEAP32[(6100)>>2]|0;
 $67 = ($66|0)==(2);
 $68 = HEAP32[(6100)>>2]|0;
 $69 = ($68|0)==(3);
 $or$cond = $67 | $69;
 L31: do {
  if ($or$cond) {
   $70 = HEAP32[(15444)>>2]|0;
   $curr = $70;
   while(1) {
    $71 = $curr;
    $72 = ($71|0)!=(0|0);
    if (!($72)) {
     break L31;
    }
    $73 = $curr;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $sym = $75;
    $76 = $sym;
    $77 = ($76|0)==(0|0);
    if ($77) {
     break;
    }
    $78 = $sym;
    $79 = ((($78)) + 16|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)!=(2);
    if ($81) {
     $82 = $sym;
     $83 = ((($82)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)!=(1);
     if ($85) {
      break;
     }
     $86 = $sym;
     $87 = ((($86)) + 24|0);
     $88 = HEAP16[$87>>1]|0;
     $89 = ($88&65535) >>> 7;
     $90 = $89 & 1;
     $91 = $90&255;
     $92 = $91&255;
     $93 = ($92|0)==(0);
     if ($93) {
      break;
     }
    }
    $94 = $sym;
    $95 = ((($94)) + 16|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(2);
    if ($97) {
     $98 = $sym;
     $99 = ((($98)) + 24|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100 & -2;
     $102 = $101 | 1;
     HEAP16[$99>>1] = $102;
    }
    $103 = $curr;
    $104 = ((($103)) + 64|0);
    $105 = HEAP32[$104>>2]|0;
    $curr = $105;
   }
   _SkipSavedState();
  }
 } while(0);
 $106 = HEAP32[(15412)>>2]|0;
 $curr = $106;
 while(1) {
  $107 = $curr;
  $108 = ($107|0)!=(0|0);
  if (!($108)) {
   break;
  }
  $109 = $curr;
  $110 = ((($109)) + 64|0);
  $111 = HEAP32[$110>>2]|0;
  $next = $111;
  $112 = $curr;
  $113 = ((($112)) + 24|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 & 1;
  $116 = $115&255;
  $117 = ($116<<24>>24)!=(0);
  if ($117) {
   $118 = $curr;
   $119 = ((($118)) + 28|0);
   $120 = ((($119)) + 3|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121 & -9;
   HEAP8[$120>>0] = $122;
  }
  $123 = $curr;
  $124 = ((($123)) + 28|0);
  $125 = ((($124)) + 3|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = ($126&255) >>> 3;
  $128 = $127 & 1;
  $129 = $128&255;
  $130 = ($129|0)==(1);
  if ($130) {
   $131 = $curr;
   $132 = ((($131)) + 24|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = ($133&65535) >>> 3;
   $135 = $134 & 1;
   $136 = $135&255;
   $137 = $136&255;
   $138 = ($137|0)==(0);
   if ($138) {
    $139 = $curr;
    _sym_remove_table((15412),$139);
   } else {
    label = 41;
   }
  } else {
   label = 41;
  }
  do {
   if ((label|0) == 41) {
    label = 0;
    $140 = $curr;
    $141 = ((($140)) + 28|0);
    $142 = ((($141)) + 3|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = ($143&255) >>> 2;
    $145 = $144 & 1;
    $146 = $145&255;
    $147 = ($146|0)==(1);
    if (!($147)) {
     $148 = $curr;
     $149 = ((($148)) + 40|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)!=(0|0);
     if ($151) {
      $152 = $curr;
      $153 = ((($152)) + 40|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 16|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156|0)==(1);
      $158 = $curr;
      $159 = ((($158)) + 40|0);
      $160 = HEAP32[$159>>2]|0;
      if (!($157)) {
       $172 = ((($160)) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)!=(2);
       if (!($174)) {
        break;
       }
       _SkipSavedState();
       break;
      }
      $161 = ((($160)) + 24|0);
      $162 = HEAP16[$161>>1]|0;
      $163 = ($162&65535) >>> 7;
      $164 = $163 & 1;
      $165 = $164&255;
      $166 = $165&255;
      $167 = ($166|0)==(0);
      if ($167) {
       $168 = HEAP32[(6100)>>2]|0;
       $169 = ($168|0)==(2);
       $170 = HEAP32[(6100)>>2]|0;
       $171 = ($170|0)==(3);
       $or$cond3 = $169 | $171;
       if ($or$cond3) {
        _SkipSavedState();
       }
      }
     }
    }
   }
  } while(0);
  $175 = $next;
  $curr = $175;
 }
 $176 = HEAP32[320>>2]|0;
 $177 = ($176|0)==(0);
 if (!($177)) {
  STACKTOP = sp;return;
 }
 $178 = HEAP8[(6094)>>0]|0;
 $179 = ($178<<24>>24)!=(0);
 if ($179) {
  _SymMakeAllSymbolsPublic();
 }
 $180 = HEAP8[(6128)>>0]|0;
 $181 = $180&255;
 $182 = ($181|0)==(0);
 if ($182) {
  HEAP8[81594>>0] = 1;
 }
 $183 = HEAP32[(480)>>2]|0;
 $184 = ($183|0)!=(0|0);
 if (!($184)) {
  STACKTOP = sp;return;
 }
 $185 = HEAP32[(480)>>2]|0;
 (FUNCTION_TABLE_ii[$185 & 255](320)|0);
 STACKTOP = sp;return;
}
function _add_cmdline_tmacros() {
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $len = 0, $name = 0, $p = 0, $sym = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(6060)>>2]|0;
 $p = $0;
 while(1) {
  $1 = $p;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $p;
  $4 = ((($3)) + 4|0);
  $name = $4;
  $5 = $name;
  $6 = (_strchr($5,61)|0);
  $value = $6;
  $7 = $value;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = $name;
   $10 = $name;
   $11 = (_strlen($10)|0);
   $12 = (($9) + ($11)|0);
   $value = $12;
  } else {
   $13 = $value;
   $14 = $name;
   $15 = $13;
   $16 = $14;
   $17 = (($15) - ($16))|0;
   $len = $17;
   $18 = $len;
   $19 = (($18) + 1)|0;
   $$alloca_mul = $19;
   $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $name = $20;
   $21 = $name;
   $22 = $p;
   $23 = ((($22)) + 4|0);
   $24 = $len;
   _memcpy(($21|0),($23|0),($24|0))|0;
   $25 = $name;
   $26 = $len;
   $27 = (($25) + ($26)|0);
   HEAP8[$27>>0] = 0;
   $28 = $value;
   $29 = ((($28)) + 1|0);
   $value = $29;
  }
  $30 = $name;
  $31 = (_is_valid_identifier($30)|0);
  $32 = ($31|0)==(-1);
  $33 = $name;
  do {
   if ($32) {
    HEAP32[$vararg_buffer>>2] = $33;
    (_EmitErr(209,$vararg_buffer)|0);
   } else {
    $34 = (_SymFind($33)|0);
    $sym = $34;
    $35 = $sym;
    $36 = ($35|0)==(0|0);
    if ($36) {
     $37 = $name;
     $38 = (_SymCreate($37)|0);
     $sym = $38;
     $39 = $sym;
     $40 = ((($39)) + 16|0);
     HEAP32[$40>>2] = 10;
    }
    $41 = $sym;
    $42 = ((($41)) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(10);
    if ($44) {
     $45 = $sym;
     $46 = ((($45)) + 24|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = $47 & -3;
     $49 = $48 | 2;
     HEAP16[$46>>1] = $49;
     $50 = $sym;
     $51 = ((($50)) + 24|0);
     $52 = HEAP16[$51>>1]|0;
     $53 = $52 & -33;
     $54 = $53 | 32;
     HEAP16[$51>>1] = $54;
     $55 = $value;
     $56 = $sym;
     $57 = ((($56)) + 8|0);
     HEAP32[$57>>2] = $55;
     break;
    } else {
     $58 = $name;
     HEAP32[$vararg_buffer1>>2] = $58;
     (_EmitErr(56,$vararg_buffer1)|0);
     break;
    }
   }
  } while(0);
  $59 = $p;
  $60 = HEAP32[$59>>2]|0;
  $p = $60;
 }
 STACKTOP = sp;return;
}
function _add_incpaths() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(6064)>>2]|0;
 $p = $0;
 while(1) {
  $1 = $p;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $p;
  $4 = ((($3)) + 4|0);
  _AddStringToIncludePath($4);
  $5 = $p;
  $6 = HEAP32[$5>>2]|0;
  $p = $6;
 }
 STACKTOP = sp;return;
}
function _is_valid_identifier($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $id;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_isalpha($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $28 = 1;
 } else {
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)==(95);
  if ($10) {
   $28 = 1;
  } else {
   $11 = $1;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(64);
   if ($14) {
    $28 = 1;
   } else {
    $15 = $1;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)==(36);
    if ($18) {
     $28 = 1;
    } else {
     $19 = $1;
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = ($21|0)==(63);
     if ($22) {
      $28 = 1;
     } else {
      $23 = $1;
      $24 = HEAP8[$23>>0]|0;
      $25 = $24 << 24 >> 24;
      $26 = ($25|0)==(46);
      $28 = $26;
     }
    }
   }
  }
 }
 $27 = $28&1;
 $29 = ($27|0)==(0);
 if ($29) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $30 = $1;
 $31 = ((($30)) + 1|0);
 $1 = $31;
 while(1) {
  $32 = $1;
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)!=(0);
  $36 = $1;
  if (!($35)) {
   break;
  }
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = (_isalnum($38)|0);
  $40 = ($39|0)!=(0);
  if ($40) {
   $58 = 1;
  } else {
   $41 = $1;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(95);
   if ($44) {
    $58 = 1;
   } else {
    $45 = $1;
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(64);
    if ($48) {
     $58 = 1;
    } else {
     $49 = $1;
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $52 = ($51|0)==(36);
     if ($52) {
      $58 = 1;
     } else {
      $53 = $1;
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($55|0)==(63);
      $58 = $56;
     }
    }
   }
  }
  $57 = $58&1;
  $59 = ($57|0)==(0);
  if ($59) {
   label = 17;
   break;
  }
  $60 = $1;
  $61 = ((($60)) + 1|0);
  $1 = $61;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $62 = ((($36)) + -1|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63 << 24 >> 24;
 $65 = ($64|0)==(46);
 if ($65) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 } else {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _SetFilenames($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ext = 0, $fn = 0, $fn2 = 0, $i = 0, $path = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $path = sp + 24|0;
 $0 = $name;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 1)|0;
 $4 = (_LclAlloc($3)|0);
 HEAP32[(388)>>2] = $4;
 $5 = HEAP32[(388)>>2]|0;
 $6 = $0;
 (_strcpy($5,$6)|0);
 $7 = $0;
 $8 = (_GetFNamePart($7)|0);
 $fn = $8;
 $i = 1;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(4);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = ((6020) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   HEAP8[$path>>0] = 0;
   $15 = $i;
   $16 = (6132 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $i;
    $20 = (6132 + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    (_strcpy($path,$21)|0);
   }
   $22 = $fn;
   (_strcat($path,$22)|0);
   $23 = (_GetExtPart($path)|0);
   $ext = $23;
   $24 = $ext;
   $25 = ((($24)) + 1|0);
   $ext = $25;
   HEAP8[$24>>0] = 46;
   $26 = $ext;
   $27 = $i;
   $28 = (_GetExt($27)|0);
   (_strcpy($26,$28)|0);
  } else {
   $29 = $i;
   $30 = ((6020) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   (_strcpy($path,$31)|0);
   $32 = (_GetFNamePart($path)|0);
   $fn2 = $32;
   $33 = $fn2;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = $fn2;
    $38 = $fn;
    (_strcpy($37,$38)|0);
   }
   $39 = $fn2;
   $40 = (_GetExtPart($39)|0);
   $ext = $40;
   $41 = $ext;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = $ext;
    $46 = ((($45)) + 1|0);
    $ext = $46;
    HEAP8[$45>>0] = 46;
    $47 = $ext;
    $48 = $i;
    $49 = (_GetExt($48)|0);
    (_strcpy($47,$49)|0);
   }
  }
  $50 = (_strlen($path)|0);
  $51 = (($50) + 1)|0;
  $52 = (_LclAlloc($51)|0);
  $53 = $i;
  $54 = ((388) + ($53<<2)|0);
  HEAP32[$54>>2] = $52;
  $55 = $i;
  $56 = ((388) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  (_strcpy($57,$path)|0);
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 STACKTOP = sp;return;
}
function _open_files() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(388)>>2]|0;
 $1 = (_fopen($0,87247)|0);
 HEAP32[(372)>>2] = $1;
 $2 = HEAP32[(372)>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[(388)>>2]|0;
  $5 = (_ErrnoStr()|0);
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  _Fatal(106,$vararg_buffer);
 }
 $6 = HEAP8[(6128)>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = HEAP32[(392)>>2]|0;
  $10 = (_fopen($9,81641)|0);
  HEAP32[(376)>>2] = $10;
  $11 = HEAP32[(376)>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = HEAP32[(392)>>2]|0;
   $14 = (_ErrnoStr()|0);
   HEAP32[$vararg_buffer2>>2] = $13;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $14;
   _Fatal(106,$vararg_buffer2);
  }
 }
 $15 = HEAP8[(6077)>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[(396)>>2]|0;
 $18 = (_fopen($17,81641)|0);
 HEAP32[(380)>>2] = $18;
 $19 = HEAP32[(380)>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[(396)>>2]|0;
 $22 = (_ErrnoStr()|0);
 HEAP32[$vararg_buffer6>>2] = $21;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $22;
 _Fatal(106,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _ReswTableInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ResWordsInit();
 $0 = HEAP32[(6100)>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  _DisableKeyword(159);
  _DisableKeyword(169);
 }
 $2 = HEAP8[(6083)>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)==(1);
 if (!($4)) {
  return;
 }
 _DisableKeyword(367);
 _DisableKeyword(196);
 return;
}
function _ModuleInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[(6104)>>2]|0;
 HEAP32[(524)>>2] = $0;
 $1 = HEAP32[(6100)>>2]|0;
 $2 = (4960 + (($1*12)|0)|0);
 HEAP32[(500)>>2] = $2;
 $3 = HEAP32[(6100)>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = HEAP8[(6068)>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)==(0);
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 $10 = $8&255;
 HEAP8[(575)>>0] = $10;
 HEAP32[320>>2] = 0;
 HEAP32[(324)>>2] = 0;
 HEAP32[(512)>>2] = 0;
 HEAP32[(520)>>2] = 0;
 $11 = HEAP32[(6008)>>2]|0;
 $12 = ($11|0)==(1);
 $13 = $12&1;
 $14 = HEAP32[(560)>>2]|0;
 $15 = $13 & 1;
 $16 = $15 << 9;
 $17 = $14 & -513;
 $18 = $17 | $16;
 HEAP32[(560)>>2] = $18;
 _get_module_name();
 dest=15404; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $19 = HEAP32[(500)>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 255](320);
 return;
}
function _get_module_name() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ext = 0, $fn = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(6040)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(6040)>>2]|0;
  (_strncpy((632),$2,4096)|0);
  HEAP8[(4727)>>0] = 0;
 } else {
  $3 = HEAP32[(388)>>2]|0;
  $4 = (_GetFNamePart($3)|0);
  $fn = $4;
  $5 = $fn;
  $6 = (_GetExtPart($5)|0);
  $ext = $6;
  $7 = $fn;
  $8 = $ext;
  $9 = $fn;
  $10 = $8;
  $11 = $9;
  $12 = (($10) - ($11))|0;
  _memcpy(((632)|0),($7|0),($12|0))|0;
  $13 = $ext;
  $14 = $fn;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = ((632) + ($17)|0);
  HEAP8[$18>>0] = 0;
 }
 (_strupr((632))|0);
 $p = (632);
 while(1) {
  $19 = $p;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $p;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = (_isalnum($24)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $27 = $p;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)==(95);
   if (!($30)) {
    $31 = $p;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)==(36);
    if (!($34)) {
     $35 = $p;
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $38 = ($37|0)==(64);
     if (!($38)) {
      $39 = $p;
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = ($41|0)==(63);
      if (!($42)) {
       $43 = $p;
       HEAP8[$43>>0] = 95;
      }
     }
    }
   }
  }
  $44 = $p;
  $45 = ((($44)) + 1|0);
  $p = $45;
 }
 $46 = HEAP8[(632)>>0]|0;
 $47 = $46 << 24 >> 24;
 $48 = (_isdigit($47)|0);
 $49 = ($48|0)!=(0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 HEAP8[(632)>>0] = 95;
 STACKTOP = sp;return;
}
function _GetExt($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 L1: do {
  switch ($2|0) {
  case 1:  {
   $3 = HEAP32[(6100)>>2]|0;
   $4 = ($3|0)==(0);
   if (!($4)) {
    $0 = 81652;
    break L1;
   }
   $5 = HEAP32[(6104)>>2]|0;
   $6 = ($5|0)==(1);
   $7 = HEAP32[(6104)>>2]|0;
   $8 = ($7|0)==(2);
   $or$cond = $6 | $8;
   if ($or$cond) {
    $0 = 81644;
    break L1;
   } else {
    $0 = 81648;
    break L1;
   }
   break;
  }
  case 2:  {
   $0 = 81654;
   break;
  }
  case 3:  {
   $0 = 81658;
   break;
  }
  default: {
   $0 = 0;
  }
  }
 } while(0);
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _SetSegAssumeTable($savedstate) {
 $savedstate = $savedstate|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $savedstate;
 $1 = $0;
 dest=5008; src=$1; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _GetSegAssumeTable($savedstate) {
 $savedstate = $savedstate|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $savedstate;
 $1 = $0;
 dest=$1; src=5008; stop=dest+48|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _SetStdAssumeTable($savedstate,$ti) {
 $savedstate = $savedstate|0;
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $savedstate;
 $1 = $ti;
 $2 = $0;
 dest=5056; src=$2; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (5056 + ($5<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $1;
   $10 = HEAP32[$9>>2]|0;
   $11 = $i;
   $12 = (5056 + ($11<<3)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 52|0);
   HEAP32[$14>>2] = $10;
   $15 = $1;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $i;
   $19 = (5056 + ($18<<3)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 32|0);
   HEAP32[$21>>2] = $17;
   $22 = $1;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $i;
   $26 = (5056 + ($25<<3)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 20|0);
   HEAP32[$28>>2] = $24;
   $29 = $1;
   $30 = ((($29)) + 12|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $i;
   $33 = (5056 + ($32<<3)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 28|0);
   $36 = ((($35)) + 2|0);
   HEAP8[$36>>0] = $31;
   $37 = $1;
   $38 = ((($37)) + 13|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $i;
   $41 = (5056 + ($40<<3)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 28|0);
   $44 = ((($43)) + 1|0);
   HEAP8[$44>>0] = $39;
  }
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
  $47 = $1;
  $48 = ((($47)) + 16|0);
  $1 = $48;
 }
 STACKTOP = sp;return;
}
function _GetStdAssumeTable($savedstate,$ti) {
 $savedstate = $savedstate|0;
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $savedstate;
 $1 = $ti;
 $2 = $0;
 dest=$2; src=5056; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (5056 + ($5<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $i;
   $10 = (5056 + ($9<<3)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $1;
   HEAP32[$14>>2] = $13;
   $15 = $i;
   $16 = (5056 + ($15<<3)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = ((($20)) + 4|0);
   HEAP32[$21>>2] = $19;
   $22 = $i;
   $23 = (5056 + ($22<<3)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $i;
   $30 = (5056 + ($29<<3)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 28|0);
   $33 = ((($32)) + 2|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $1;
   $36 = ((($35)) + 12|0);
   HEAP8[$36>>0] = $34;
   $37 = $i;
   $38 = (5056 + ($37<<3)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 28|0);
   $41 = ((($40)) + 1|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $1;
   $44 = ((($43)) + 13|0);
   HEAP8[$44>>0] = $42;
  }
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
  $47 = $1;
  $48 = ((($47)) + 16|0);
  $1 = $48;
 }
 STACKTOP = sp;return;
}
function _AssumeSaveState() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _GetSegAssumeTable(5184);
 _GetStdAssumeTable(5232,5360);
 return;
}
function _AssumeInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $reg = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 $reg = 0;
 while(1) {
  $1 = $reg;
  $2 = ($1|0)<(6);
  if (!($2)) {
   break;
  }
  $3 = $reg;
  $4 = (5008 + ($3<<3)|0);
  HEAP32[$4>>2] = 0;
  $5 = $reg;
  $6 = (5008 + ($5<<3)|0);
  $7 = ((($6)) + 4|0);
  HEAP8[$7>>0] = 0;
  $8 = $reg;
  $9 = (5008 + ($8<<3)|0);
  $10 = ((($9)) + 5|0);
  HEAP8[$10>>0] = 0;
  $11 = $reg;
  $12 = (($11) + 1)|0;
  $reg = $12;
 }
 $13 = $0;
 $14 = ($13|0)<=(0);
 if ($14) {
  $reg = 0;
  while(1) {
   $15 = $reg;
   $16 = ($15|0)<(16);
   if (!($16)) {
    break;
   }
   $17 = $reg;
   $18 = (5056 + ($17<<3)|0);
   HEAP32[$18>>2] = 0;
   $19 = $reg;
   $20 = (5056 + ($19<<3)|0);
   $21 = ((($20)) + 4|0);
   HEAP8[$21>>0] = 0;
   $22 = $reg;
   $23 = (($22) + 1)|0;
   $reg = $23;
  }
  $24 = $0;
  $25 = ($24|0)==(0);
  if ($25) {
   dest=5616; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  }
 }
 $26 = $0;
 $27 = ($26|0)>(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = HEAP8[87036>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 _SetSegAssumeTable(5184);
 _SetStdAssumeTable(5232,5360);
 STACKTOP = sp;return;
}
function _ModelAssumeInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pCS = 0, $pFSassume = 0, $pFmt = 0;
 var $pGSassume = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer = sp;
 $pFSassume = 81676;
 $pGSassume = 81676;
 $0 = HEAP32[(512)>>2]|0;
 switch ($0|0) {
 case 7:  {
  $1 = HEAP32[(528)>>2]|0;
  $2 = ($1|0)==(2);
  if ($2) {
   $pGSassume = 81682;
  }
  $3 = $pFSassume;
  $4 = $pGSassume;
  HEAP32[$vararg_buffer>>2] = 362;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 26;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = 187;
  $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr4>>2] = 28;
  $vararg_ptr5 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr5>>2] = 187;
  $vararg_ptr6 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr6>>2] = 27;
  $vararg_ptr7 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr7>>2] = 187;
  $vararg_ptr8 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr8>>2] = 25;
  $vararg_ptr9 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr9>>2] = 187;
  $vararg_ptr10 = ((($vararg_buffer)) + 36|0);
  HEAP32[$vararg_ptr10>>2] = 29;
  $vararg_ptr11 = ((($vararg_buffer)) + 40|0);
  HEAP32[$vararg_ptr11>>2] = $3;
  $vararg_ptr12 = ((($vararg_buffer)) + 44|0);
  HEAP32[$vararg_ptr12>>2] = 30;
  $vararg_ptr13 = ((($vararg_buffer)) + 48|0);
  HEAP32[$vararg_ptr13>>2] = $4;
  _AddLineQueueX(81690,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 6: case 5: case 4: case 3: case 2: case 1:  {
  $5 = HEAP32[(6100)>>2]|0;
  $6 = ($5|0)==(2);
  $7 = HEAP32[(6100)>>2]|0;
  $8 = ($7|0)==(3);
  $or$cond = $6 | $8;
  if ($or$cond) {
   STACKTOP = sp;return;
  }
  $9 = HEAP32[(512)>>2]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   $pCS = 81669;
  } else {
   $11 = (_SimGetSegName(0)|0);
   $pCS = $11;
  }
  $12 = HEAP32[(508)>>2]|0;
  $13 = ($12|0)!=(1);
  if ($13) {
   $pFmt = 81729;
  } else {
   $pFmt = 81750;
  }
  $14 = $pFmt;
  $15 = $pCS;
  HEAP32[$vararg_buffer14>>2] = 362;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = 26;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $15;
  $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
  HEAP32[$vararg_ptr19>>2] = 28;
  $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
  HEAP32[$vararg_ptr20>>2] = 81669;
  $vararg_ptr21 = ((($vararg_buffer14)) + 20|0);
  HEAP32[$vararg_ptr21>>2] = 27;
  $vararg_ptr22 = ((($vararg_buffer14)) + 24|0);
  HEAP32[$vararg_ptr22>>2] = 81669;
  _AddLineQueueX($14,$vararg_buffer14);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _GetStdAssume($reg) {
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $reg;
 $2 = $1;
 $3 = (5056 + ($2<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $6 = $1;
 $7 = (5056 + ($6<<3)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(196);
 $12 = $1;
 $13 = (5056 + ($12<<3)|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $15 = ((($14)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $0 = $16;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $17 = ((($14)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _GetStdAssumeEx($reg) {
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $reg;
 $1 = $0;
 $2 = (5056 + ($1<<3)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _AssumeDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flags = 0, $info = 0, $j = 0;
 var $opnd = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $reg = 0, $segtable = 0, $size = 0, $ti = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 128|0;
 $ti = sp + 84|0;
 $opnd = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[(616)>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = $2;
  $10 = (($9) + ($8<<4)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(8);
  if ($13) {
   $14 = HEAP32[$1>>2]|0;
   $15 = $2;
   $16 = (($15) + ($14<<4)|0);
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_strcasecmp($18,81682)|0);
   $20 = (0)==($19|0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $info = 0;
  $23 = HEAP32[$1>>2]|0;
  $24 = $2;
  $25 = (($24) + ($23<<4)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)==(2);
  do {
   if ($28) {
    $29 = HEAP32[$1>>2]|0;
    $30 = $2;
    $31 = (($30) + ($29<<4)|0);
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $reg = $33;
    $34 = $reg;
    $35 = (15660 + (($34*12)|0)|0);
    $36 = ((($35)) + 10|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $j = $38;
    $39 = $reg;
    $40 = (15660 + (($39*12)|0)|0);
    $41 = HEAP32[$40>>2]|0;
    $flags = $41;
    $42 = $flags;
    $43 = $42 & 6144;
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $j;
     $46 = (5008 + ($45<<3)|0);
     $info = $46;
     $segtable = 1;
     break;
    }
    $47 = $flags;
    $48 = $47 & 15;
    $49 = ($48|0)!=(0);
    if ($49) {
     $50 = $j;
     $51 = (5056 + ($50<<3)|0);
     $info = $51;
     $segtable = 0;
    }
   }
  } while(0);
  $52 = $info;
  $53 = ($52|0)==(0|0);
  if ($53) {
   label = 12;
   break;
  }
  $60 = HEAP32[(544)>>2]|0;
  $61 = $60 & 240;
  $62 = $reg;
  $63 = (15660 + (($62*12)|0)|0);
  $64 = ((($63)) + 8|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65&65535;
  $67 = ($61>>>0)<($66>>>0);
  if ($67) {
   label = 14;
   break;
  }
  $69 = HEAP32[$1>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$1>>2] = $70;
  $71 = HEAP32[$1>>2]|0;
  $72 = $2;
  $73 = (($72) + ($71<<4)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)!=(58);
  if ($76) {
   label = 16;
   break;
  }
  $78 = HEAP32[$1>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$1>>2] = $79;
  $80 = HEAP32[$1>>2]|0;
  $81 = $2;
  $82 = (($81) + ($80<<4)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($84|0)==(0);
  if ($85) {
   label = 18;
   break;
  }
  $87 = HEAP32[$1>>2]|0;
  $88 = $2;
  $89 = (($88) + ($87<<4)|0);
  $90 = ((($89)) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (_strcasecmp($91,81676)|0);
  $93 = (0)==($92|0);
  do {
   if ($93) {
    $94 = $segtable;
    $95 = ($94<<24>>24)!=(0);
    if ($95) {
     $96 = $info;
     $97 = ((($96)) + 5|0);
     HEAP8[$97>>0] = 0;
     $98 = $info;
     $99 = ((($98)) + 4|0);
     HEAP8[$99>>0] = 1;
    } else {
     $100 = $reg;
     $101 = ($100|0)>=(5);
     $102 = $reg;
     $103 = ($102|0)<=(8);
     $or$cond = $101 & $103;
     $104 = $flags;
     $105 = $104 & 15;
     $106 = $or$cond ? 16 : $105;
     $107 = $info;
     $108 = ((($107)) + 4|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = $110 | $106;
     $112 = $111&255;
     HEAP8[$108>>0] = $112;
    }
    $113 = $info;
    HEAP32[$113>>2] = 0;
    $114 = HEAP32[$1>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$1>>2] = $115;
   } else {
    $116 = HEAP32[$1>>2]|0;
    $117 = $2;
    $118 = (($117) + ($116<<4)|0);
    $119 = ((($118)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (_strcasecmp($120,81682)|0);
    $122 = (0)==($121|0);
    $123 = $segtable;
    if ($122) {
     $124 = ($123<<24>>24)!=(0);
     if ($124) {
      $125 = $info;
      $126 = ((($125)) + 5|0);
      HEAP8[$126>>0] = 0;
      $127 = $info;
      $128 = ((($127)) + 4|0);
      HEAP8[$128>>0] = 0;
     } else {
      $129 = $reg;
      $130 = ($129|0)>=(5);
      $131 = $reg;
      $132 = ($131|0)<=(8);
      $or$cond3 = $130 & $132;
      $133 = $flags;
      $134 = $133 & 15;
      $135 = $or$cond3 ? 16 : $134;
      $136 = $135 ^ -1;
      $137 = $info;
      $138 = ((($137)) + 4|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139&255;
      $141 = $140 & $136;
      $142 = $141&255;
      HEAP8[$138>>0] = $142;
     }
     $143 = $info;
     HEAP32[$143>>2] = 0;
     $144 = HEAP32[$1>>2]|0;
     $145 = (($144) + 1)|0;
     HEAP32[$1>>2] = $145;
     break;
    }
    $146 = $123&255;
    $147 = ($146|0)==(0);
    if ($147) {
     HEAP32[$ti>>2] = 0;
     $148 = ((($ti)) + 12|0);
     HEAP8[$148>>0] = 0;
     $149 = ((($ti)) + 13|0);
     HEAP8[$149>>0] = 0;
     $150 = ((($ti)) + 8|0);
     HEAP32[$150>>2] = 192;
     $151 = ((($ti)) + 16|0);
     HEAP32[$151>>2] = 192;
     $152 = ((($ti)) + 4|0);
     HEAP32[$152>>2] = 0;
     $153 = HEAP8[(556)>>0]|0;
     $154 = ((($ti)) + 14|0);
     HEAP8[$154>>0] = $153;
     $155 = $2;
     $156 = (_GetQualifiedType($1,$155,$ti)|0);
     $157 = ($156|0)==(-1);
     if ($157) {
      label = 31;
      break L1;
     }
     $158 = $flags;
     $159 = (_OperandSize($158,0)|0);
     $size = $159;
     $160 = ((($ti)) + 12|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = ($162|0)==(0);
     if ($163) {
      $164 = $size;
      $165 = HEAP32[$ti>>2]|0;
      $166 = ($164|0)!=($165|0);
      if ($166) {
       label = 36;
       break L1;
      }
     }
     $167 = ((($ti)) + 12|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168&255;
     $170 = ($169|0)>(0);
     if ($170) {
      $171 = $size;
      $172 = HEAP8[(558)>>0]|0;
      $173 = $172&255;
      $174 = ($171|0)<($173|0);
      if ($174) {
       label = 36;
       break L1;
      }
     }
     $176 = $reg;
     $177 = ($176|0)>=(5);
     $178 = $reg;
     $179 = ($178|0)<=(8);
     $or$cond5 = $177 & $179;
     $180 = $flags;
     $181 = $180 & 15;
     $182 = $or$cond5 ? 16 : $181;
     $183 = $182 ^ -1;
     $184 = $info;
     $185 = ((($184)) + 4|0);
     $186 = HEAP8[$185>>0]|0;
     $187 = $186&255;
     $188 = $187 & $183;
     $189 = $188&255;
     HEAP8[$185>>0] = $189;
     $190 = $j;
     $191 = (5616 + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ($192|0)==(0|0);
     if ($193) {
      $194 = (_CreateTypeSymbol(0,109841,0)|0);
      $195 = $j;
      $196 = (5616 + ($195<<2)|0);
      HEAP32[$196>>2] = $194;
      $197 = $j;
      $198 = (5616 + ($197<<2)|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ((($199)) + 40|0);
      $201 = ((($200)) + 2|0);
      HEAP8[$201>>0] = 3;
     }
     $202 = HEAP32[$ti>>2]|0;
     $203 = $j;
     $204 = (5616 + ($203<<2)|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ((($205)) + 36|0);
     HEAP32[$206>>2] = $202;
     $207 = ((($ti)) + 8|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $j;
     $210 = (5616 + ($209<<2)|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((($211)) + 20|0);
     HEAP32[$212>>2] = $208;
     $213 = ((($ti)) + 12|0);
     $214 = HEAP8[$213>>0]|0;
     $215 = $j;
     $216 = (5616 + ($215<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ((($217)) + 28|0);
     $219 = ((($218)) + 1|0);
     HEAP8[$219>>0] = $214;
     $220 = ((($ti)) + 13|0);
     $221 = HEAP8[$220>>0]|0;
     $222 = $j;
     $223 = (5616 + ($222<<2)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($224)) + 28|0);
     $226 = ((($225)) + 3|0);
     $227 = HEAP8[$226>>0]|0;
     $228 = $221 & 1;
     $229 = ($228 << 4)&255;
     $230 = $227 & -17;
     $231 = $230 | $229;
     HEAP8[$226>>0] = $231;
     $232 = ((($ti)) + 14|0);
     $233 = HEAP8[$232>>0]|0;
     $234 = $j;
     $235 = (5616 + ($234<<2)|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 28|0);
     HEAP8[$237>>0] = $233;
     $238 = ((($ti)) + 16|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $239&255;
     $241 = $j;
     $242 = (5616 + ($241<<2)|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ((($243)) + 28|0);
     $245 = ((($244)) + 2|0);
     HEAP8[$245>>0] = $240;
     $246 = ((($ti)) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = ($247|0)==(196);
     $249 = ((($ti)) + 4|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = $j;
     $252 = (5616 + ($251<<2)|0);
     $253 = HEAP32[$252>>2]|0;
     if ($248) {
      $254 = ((($253)) + 52|0);
      HEAP32[$254>>2] = $250;
     } else {
      $255 = ((($253)) + 32|0);
      HEAP32[$255>>2] = $250;
     }
     $256 = $j;
     $257 = (5616 + ($256<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $info;
     HEAP32[$259>>2] = $258;
     break;
    }
    $260 = $2;
    $261 = HEAP32[(616)>>2]|0;
    $262 = (_EvalOperand($1,$260,$261,$opnd,0)|0);
    $263 = ($262|0)==(-1);
    if ($263) {
     label = 44;
     break L1;
    }
    $264 = ((($opnd)) + 40|0);
    $265 = HEAP32[$264>>2]|0;
    switch ($265|0) {
    case 1:  {
     $266 = ((($opnd)) + 56|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)==(0|0);
     if ($268) {
      label = 49;
      break L1;
     }
     $269 = ((($opnd)) + 52|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = $270 & 1;
     $272 = $271&255;
     $273 = ($272|0)==(1);
     if ($273) {
      label = 49;
      break L1;
     }
     $274 = HEAP32[$opnd>>2]|0;
     $275 = ($274|0)!=(0);
     if ($275) {
      label = 49;
      break L1;
     }
     $277 = ((($opnd)) + 56|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ((($278)) + 16|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = ($280|0)==(0);
     L55: do {
      if ($281) {
       $282 = HEAP32[4884>>2]|0;
       $283 = ($282|0)==(0);
       if ($283) {
        $284 = HEAP32[(600)>>2]|0;
        _StoreLine($284,0,0);
       }
       $285 = ((($opnd)) + 56|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = $info;
       HEAP32[$287>>2] = $286;
      } else {
       $288 = ((($opnd)) + 56|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = ((($289)) + 16|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = ($291|0)==(3);
       if ($292) {
        label = 56;
       } else {
        $293 = ((($opnd)) + 56|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ((($294)) + 16|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($296|0)==(4);
        if ($297) {
         label = 56;
        }
       }
       do {
        if ((label|0) == 56) {
         label = 0;
         $298 = ((($opnd)) + 36|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = ($299|0)==(-2);
         if (!($300)) {
          break;
         }
         $301 = ((($opnd)) + 56|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = $info;
         HEAP32[$303>>2] = $302;
         break L55;
        }
       } while(0);
       $304 = ((($opnd)) + 36|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = ($305|0)==(170);
       if (!($306)) {
        label = 60;
        break L1;
       }
       $307 = ((($opnd)) + 56|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = ((($308)) + 12|0);
       $310 = HEAP32[$309>>2]|0;
       $311 = $info;
       HEAP32[$311>>2] = $310;
      }
     } while(0);
     $313 = $info;
     $314 = HEAP32[$313>>2]|0;
     $315 = HEAP32[(588)>>2]|0;
     $316 = ($314|0)==($315|0);
     $317 = $316&1;
     $318 = $317&255;
     $319 = $info;
     $320 = ((($319)) + 5|0);
     HEAP8[$320>>0] = $318;
     break;
    }
    case 2:  {
     $321 = ((($opnd)) + 20|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ((($322)) + 8|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (15660 + (($324*12)|0)|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $326 & 6144;
     $328 = ($327|0)!=(0);
     if (!($328)) {
      label = 64;
      break L1;
     }
     $329 = ((($opnd)) + 20|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = ((($330)) + 8|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (15660 + (($332*12)|0)|0);
     $334 = ((($333)) + 10|0);
     $335 = HEAP8[$334>>0]|0;
     $336 = $335&255;
     $337 = (5008 + ($336<<3)|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = $info;
     HEAP32[$339>>2] = $338;
     $340 = ((($opnd)) + 20|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = ((($341)) + 8|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = (15660 + (($343*12)|0)|0);
     $345 = ((($344)) + 10|0);
     $346 = HEAP8[$345>>0]|0;
     $347 = $346&255;
     $348 = (5008 + ($347<<3)|0);
     $349 = ((($348)) + 5|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = $info;
     $352 = ((($351)) + 5|0);
     HEAP8[$352>>0] = $350;
     break;
    }
    default: {
     label = 64;
     break L1;
    }
    }
    $354 = $info;
    $355 = ((($354)) + 4|0);
    HEAP8[$355>>0] = 0;
   }
  } while(0);
  $356 = HEAP32[$1>>2]|0;
  $357 = HEAP32[(616)>>2]|0;
  $358 = ($356|0)<($357|0);
  if ($358) {
   $359 = HEAP32[$1>>2]|0;
   $360 = $2;
   $361 = (($360) + ($359<<4)|0);
   $362 = HEAP8[$361>>0]|0;
   $363 = $362&255;
   $364 = ($363|0)!=(44);
   if ($364) {
    break;
   }
  }
  $365 = HEAP32[$1>>2]|0;
  $366 = (($365) + 1)|0;
  HEAP32[$1>>2] = $366;
 }
 switch (label|0) {
  case 5: {
   _AssumeInit(-1);
   $21 = HEAP32[$1>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$1>>2] = $22;
   break;
  }
  case 12: {
   $54 = HEAP32[$1>>2]|0;
   $55 = $2;
   $56 = (($55) + ($54<<4)|0);
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$vararg_buffer>>2] = $58;
   $59 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $59;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 14: {
   $68 = (_EmitError(30)|0);
   $0 = $68;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 16: {
   $77 = (_EmitError(84)|0);
   $0 = $77;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 18: {
   $86 = (_EmitError(45)|0);
   $0 = $86;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 31: {
   $0 = -1;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 36: {
   $175 = (_EmitError(247)|0);
   $0 = $175;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 44: {
   $0 = -1;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 49: {
   $276 = (_EmitError(69)|0);
   $0 = $276;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 60: {
   $312 = (_EmitError(69)|0);
   $0 = $312;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
  case 64: {
   $353 = (_EmitError(69)|0);
   $0 = $353;
   $376 = $0;
   STACKTOP = sp;return ($376|0);
   break;
  }
 }
 $367 = HEAP32[$1>>2]|0;
 $368 = HEAP32[(616)>>2]|0;
 $369 = ($367|0)<($368|0);
 if ($369) {
  $370 = HEAP32[$1>>2]|0;
  $371 = $2;
  $372 = (($371) + ($370<<4)|0);
  $373 = ((($372)) + 12|0);
  $374 = HEAP32[$373>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $374;
  $375 = (_EmitErr(209,$vararg_buffer6)|0);
  $0 = $375;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 } else {
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 return (0)|0;
}
function _search_assume($sym,$def,$search_grps) {
 $sym = $sym|0;
 $def = $def|0;
 $search_grps = $search_grps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $grp = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $def;
 $3 = $search_grps;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = -2;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $6 = $1;
 $7 = (_GetGroup($6)|0);
 $grp = $7;
 $8 = $2;
 $9 = ($8|0)!=(-2);
 if ($9) {
  $10 = $2;
  $11 = (5008 + ($10<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ($12|0)==($13|0);
  if ($14) {
   $15 = $2;
   $0 = $15;
   $82 = $0;
   STACKTOP = sp;return ($82|0);
  }
  $16 = $3;
  $17 = $16&255;
  $18 = ($17|0)!=(0);
  $19 = $grp;
  $20 = ($19|0)!=(0|0);
  $or$cond = $18 & $20;
  if ($or$cond) {
   $21 = $2;
   $22 = (5008 + ($21<<3)|0);
   $23 = ((($22)) + 5|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $grp;
    $28 = HEAP32[(588)>>2]|0;
    $29 = ($27|0)==($28|0);
    if ($29) {
     $30 = $2;
     $0 = $30;
     $82 = $0;
     STACKTOP = sp;return ($82|0);
    }
   }
   $31 = $2;
   $32 = (5008 + ($31<<3)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $grp;
   $35 = ($33|0)==($34|0);
   if ($35) {
    $36 = $2;
    $0 = $36;
    $82 = $0;
    STACKTOP = sp;return ($82|0);
   }
  }
 }
 $2 = 0;
 while(1) {
  $37 = $2;
  $38 = ($37|0)<(6);
  if (!($38)) {
   break;
  }
  $39 = $2;
  $40 = (5680 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (5008 + ($41<<3)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = ($43|0)==($44|0);
  $46 = $2;
  if ($45) {
   label = 15;
   break;
  }
  $49 = (($46) + 1)|0;
  $2 = $49;
 }
 if ((label|0) == 15) {
  $47 = (5680 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $0 = $48;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $50 = $3;
 $51 = $50&255;
 $52 = ($51|0)!=(0);
 $53 = $grp;
 $54 = ($53|0)!=(0|0);
 $or$cond3 = $52 & $54;
 L28: do {
  if ($or$cond3) {
   $2 = 0;
   while(1) {
    $55 = $2;
    $56 = ($55|0)<(6);
    if (!($56)) {
     break L28;
    }
    $57 = $2;
    $58 = (5680 + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (5008 + ($59<<3)|0);
    $61 = ((($60)) + 5|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = ($63|0)!=(0);
    if ($64) {
     $65 = $grp;
     $66 = HEAP32[(588)>>2]|0;
     $67 = ($65|0)==($66|0);
     if ($67) {
      label = 22;
      break;
     }
    }
    $71 = $2;
    $72 = (5680 + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (5008 + ($73<<3)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $grp;
    $77 = ($75|0)==($76|0);
    $78 = $2;
    if ($77) {
     label = 24;
     break;
    }
    $81 = (($78) + 1)|0;
    $2 = $81;
   }
   if ((label|0) == 22) {
    $68 = $2;
    $69 = (5680 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $0 = $70;
    $82 = $0;
    STACKTOP = sp;return ($82|0);
   }
   else if ((label|0) == 24) {
    $79 = (5680 + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $0 = $80;
    $82 = $0;
    STACKTOP = sp;return ($82|0);
   }
  }
 } while(0);
 $0 = -2;
 $82 = $0;
 STACKTOP = sp;return ($82|0);
}
function _GetOverrideAssume($override) {
 $override = $override|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $override;
 $2 = $1;
 $3 = (5008 + ($2<<3)|0);
 $4 = ((($3)) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  $7 = HEAP32[(588)>>2]|0;
  $0 = $7;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = $1;
  $9 = (5008 + ($8<<3)|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _GetAssume($override,$sym,$def,$passume) {
 $override = $override|0;
 $sym = $sym|0;
 $def = $def|0;
 $passume = $passume|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $reg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $override;
 $2 = $sym;
 $3 = $def;
 $4 = $passume;
 $5 = $3;
 $6 = ($5|0)!=(-2);
 if ($6) {
  $7 = $3;
  $8 = (5008 + ($7<<3)|0);
  $9 = ((($8)) + 5|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = HEAP32[(588)>>2]|0;
   $14 = $4;
   HEAP32[$14>>2] = $13;
   $15 = $3;
   $0 = $15;
   $51 = $0;
   STACKTOP = sp;return ($51|0);
  }
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 do {
  if ($17) {
   $18 = $1;
   $19 = $3;
   $20 = (_search_assume($18,$19,0)|0);
   $reg = $20;
  } else {
   $21 = $2;
   $22 = ((($21)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(5);
   if ($24) {
    $reg = 2;
    break;
   } else {
    $25 = $2;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $3;
    $29 = (_search_assume($27,$28,1)|0);
    $reg = $29;
    break;
   }
  }
 } while(0);
 $30 = $reg;
 $31 = ($30|0)==(-2);
 $32 = $2;
 $33 = ($32|0)!=(0|0);
 $or$cond = $31 & $33;
 if ($or$cond) {
  $34 = $2;
  $35 = ((($34)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(2);
  if ($37) {
   $38 = $2;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0|0);
   if ($41) {
    $42 = $3;
    $reg = $42;
   }
  }
 }
 $43 = $reg;
 $44 = ($43|0)!=(-2);
 if ($44) {
  $45 = $reg;
  $46 = (5008 + ($45<<3)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  HEAP32[$48>>2] = $47;
  $49 = $reg;
  $0 = $49;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 } else {
  $50 = $4;
  HEAP32[$50>>2] = 0;
  $0 = -2;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _atofloat($out,$inp,$size,$negative,$ftype) {
 $out = $out|0;
 $inp = $inp|0;
 $size = $size|0;
 $negative = $negative|0;
 $ftype = $ftype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $double_value = 0.0, $end = 0, $float_value = 0.0, $or$cond = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = $out;
 $1 = $inp;
 $2 = $size;
 $3 = $negative;
 $4 = $ftype;
 $5 = $4;
 $6 = ($5<<24>>24)!=(0);
 if ($6) {
  $7 = $1;
  $8 = $0;
  $9 = $1;
  $10 = (_strlen($9)|0);
  $11 = (($10) - 1)|0;
  _myatoi128($7,$8,16,$11);
  $12 = $0;
  $13 = $2;
  $14 = (($12) + ($13)|0);
  $p = $14;
  $15 = $0;
  $16 = ((($15)) + 16|0);
  $end = $16;
  while(1) {
   $17 = $p;
   $18 = $end;
   $19 = ($17>>>0)<($18>>>0);
   if (!($19)) {
    label = 23;
    break;
   }
   $20 = $p;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)!=(0);
   if ($23) {
    break;
   }
   $25 = $p;
   $26 = ((($25)) + 1|0);
   $p = $26;
  }
  if ((label|0) == 23) {
   STACKTOP = sp;return;
  }
  $24 = $1;
  HEAP32[$vararg_buffer>>2] = $24;
  (_EmitErr(231,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $27 = $2;
 switch ($27|0) {
 case 4:  {
  $28 = $1;
  $29 = (+_strtod($28,0));
  $double_value = $29;
  $30 = $double_value;
  $31 = $30 > 3.4028234663852886E+38;
  if ($31) {
   label = 10;
  } else {
   $32 = $double_value;
   $33 = $32 < 1.1754943508222875E-38;
   $34 = $double_value;
   $35 = $34 != 0.0;
   $or$cond = $33 & $35;
   if ($or$cond) {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   (_EmitErr(76,$vararg_buffer2)|0);
  }
  $36 = $3;
  $37 = ($36<<24>>24)!=(0);
  if ($37) {
   $38 = $double_value;
   $39 = $38 * -1.0;
   $double_value = $39;
  }
  $40 = $double_value;
  $41 = $40;
  $float_value = $41;
  $42 = $float_value;
  $43 = $0;
  HEAPF32[$43>>2] = $42;
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $44 = (___errno_location()|0);
  HEAP32[$44>>2] = 0;
  $45 = $1;
  $46 = (+_strtod($45,0));
  $double_value = $46;
  $47 = (___errno_location()|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(34);
  if ($49) {
   (_EmitErr(76,$vararg_buffer4)|0);
  }
  $50 = $3;
  $51 = ($50<<24>>24)!=(0);
  if ($51) {
   $52 = $double_value;
   $53 = $52 * -1.0;
   $double_value = $53;
  }
  $54 = $double_value;
  $55 = $0;
  HEAPF64[$55>>3] = $54;
  STACKTOP = sp;return;
  break;
 }
 case 10:  {
  $56 = $1;
  $57 = $0;
  $58 = $3;
  (_strtotb($56,$57,$58)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $59 = HEAP32[4884>>2]|0;
  $60 = ($59|0)==(0);
  if ($60) {
   _EmitWarn(4,74,$vararg_buffer6);
  }
  $61 = $0;
  $62 = $2;
  _memset(($61|0),0,($62|0))|0;
  STACKTOP = sp;return;
 }
 }
}
function _BackPatch($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fixup = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $fixup = $3;
 while(1) {
  $4 = $fixup;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $fixup;
  $7 = HEAP32[$6>>2]|0;
  $next = $7;
  $8 = $0;
  $9 = $fixup;
  _DoPatch($8,$9);
  $10 = $next;
  $fixup = $10;
 }
 $11 = $0;
 $12 = ((($11)) + 56|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return 0;
}
function _DoPatch($sym,$fixup) {
 $sym = $sym|0;
 $fixup = $fixup|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $disp = 0, $fixup2 = 0, $max_disp = 0, $seg = 0, $size = 0, $sym2 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $fixup;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $seg = $4;
 $5 = $seg;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $seg;
 $11 = ($9|0)!=($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[4884>>2]|0;
 $13 = ($12|0)==(0);
 L7: do {
  if ($13) {
   $14 = $0;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(130);
   if ($17) {
    $18 = $1;
    $19 = ((($18)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(4);
    if ($21) {
     HEAP8[(574)>>0] = 1;
     $22 = $0;
     $23 = ((($22)) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[$23>>2] = $25;
     _OutputByte(0);
     $26 = $1;
     _FreeFixup($26);
     STACKTOP = sp;return;
    }
   }
   $27 = $1;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   switch ($29|0) {
   case 2: case 3:  {
    $30 = $1;
    _FreeFixup($30);
    STACKTOP = sp;return;
    break;
   }
   case 4:  {
    $31 = $1;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(5);
    if (!($34)) {
     label = 11;
     break L7;
    }
    $size = 1;
    label = 16;
    break L7;
    break;
   }
   default: {
    label = 11;
    break L7;
   }
   }
  } else {
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $size = 0;
  $35 = $1;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  switch ($37|0) {
  case 3:  {
   $size = 2;
   label = 13;
   break;
  }
  case 2:  {
   label = 13;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  if ((label|0) == 13) {
   $38 = $size;
   $39 = (($38) + 1)|0;
   $size = $39;
  }
  $40 = $size;
  $41 = (($40) + 1)|0;
  $size = $41;
  $42 = $1;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($44) + ($49))|0;
  $51 = $1;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($50) - ($53))|0;
  $55 = $size;
  $56 = (($54) - ($55))|0;
  $57 = (($56) - 1)|0;
  $disp = $57;
  $58 = $size;
  $59 = $58<<3;
  $60 = (($59) - 1)|0;
  $61 = 1 << $60;
  $62 = (($61) - 1)|0;
  $max_disp = $62;
  $63 = $disp;
  $64 = $max_disp;
  $65 = ($63|0)>($64|0);
  if ($65) {
   label = 16;
  } else {
   $66 = $disp;
   $67 = $max_disp;
   $68 = (0 - ($67))|0;
   $69 = (($68) - 1)|0;
   $70 = ($66|0)<($69|0);
   if ($70) {
    label = 16;
   }
  }
 }
 L28: do {
  if ((label|0) == 16) {
   HEAP8[(574)>>0] = 1;
   $71 = $size;
   switch ($71|0) {
   case 1:  {
    break;
   }
   case 4: case 2:  {
    $170 = $disp;
    $171 = $max_disp;
    $172 = (($170) - ($171))|0;
    HEAP32[$vararg_buffer>>2] = $172;
    _EmitWarn(4,53,$vararg_buffer);
    break L28;
    break;
   }
   default: {
    break L28;
   }
   }
   $size = 0;
   $72 = $1;
   $73 = ((($72)) + 20|0);
   $74 = HEAP32[$73>>2]|0;
   switch ($74|0) {
   case 2:  {
    $75 = $size;
    $76 = (($75) + 1)|0;
    $size = $76;
    label = 19;
    break;
   }
   case 3:  {
    label = 19;
    break;
   }
   case 1:  {
    STACKTOP = sp;return;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 19) {
    $77 = $size;
    $78 = (($77) + 1)|0;
    $size = $78;
   }
   $79 = $seg;
   $80 = ((($79)) + 60|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($81)) + 64|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = ($83<<24>>24)!=(0);
   if ($84) {
    $85 = $size;
    $86 = (($85) + 2)|0;
    $size = $86;
   }
   $87 = $size;
   $88 = (($87) + 1)|0;
   $size = $88;
   $89 = HEAP32[4884>>2]|0;
   $90 = ($89|0)==(0);
   L42: do {
    if ($90) {
     $91 = $seg;
     $92 = ((($91)) + 60|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($93)) + 24|0);
     $95 = HEAP32[$94>>2]|0;
     $fixup2 = $95;
     while(1) {
      $96 = $fixup2;
      $97 = ($96|0)!=(0|0);
      if (!($97)) {
       break L42;
      }
      $98 = $fixup2;
      $99 = ((($98)) + 24|0);
      $100 = ((($99)) + 1|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = ($101&255) >>> 1;
      $103 = $102 & 1;
      $104 = ($103<<24>>24)!=(0);
      if ($104) {
       break;
      }
      $105 = $fixup2;
      $106 = ((($105)) + 12|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $1;
      $109 = ((($108)) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($107>>>0)<=($110>>>0);
      if ($111) {
       break L42;
      }
      $112 = $fixup2;
      $113 = ((($112)) + 4|0);
      $114 = HEAP32[$113>>2]|0;
      $fixup2 = $114;
     }
     STACKTOP = sp;return;
    }
   } while(0);
   $115 = $seg;
   $116 = ((($115)) + 60|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 20|0);
   $119 = HEAP32[$118>>2]|0;
   $sym2 = $119;
   while(1) {
    $120 = $sym2;
    $121 = ($120|0)!=(0|0);
    if (!($121)) {
     break;
    }
    $122 = $sym2;
    $123 = ((($122)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $1;
    $126 = ((($125)) + 12|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($124>>>0)<=($127>>>0);
    if ($128) {
     break;
    }
    $129 = $size;
    $130 = $sym2;
    $131 = ((($130)) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($129))|0;
    HEAP32[$131>>2] = $133;
    $134 = $sym2;
    $135 = ((($134)) + 64|0);
    $136 = HEAP32[$135>>2]|0;
    $sym2 = $136;
   }
   $137 = HEAP32[4884>>2]|0;
   $138 = ($137|0)==(0);
   L56: do {
    if ($138) {
     $139 = $seg;
     $140 = ((($139)) + 60|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ((($141)) + 24|0);
     $143 = HEAP32[$142>>2]|0;
     $fixup2 = $143;
     while(1) {
      $144 = $fixup2;
      $145 = ($144|0)!=(0|0);
      if (!($145)) {
       break L56;
      }
      $146 = $fixup2;
      $147 = ((($146)) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = $0;
      $150 = ($148|0)==($149|0);
      if (!($150)) {
       $151 = $fixup2;
       $152 = ((($151)) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = $1;
       $155 = ((($154)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($153>>>0)<=($156>>>0);
       if ($157) {
        break L56;
       }
       $158 = $size;
       $159 = $fixup2;
       $160 = ((($159)) + 12|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = (($161) + ($158))|0;
       HEAP32[$160>>2] = $162;
      }
      $163 = $fixup2;
      $164 = ((($163)) + 4|0);
      $165 = HEAP32[$164>>2]|0;
      $fixup2 = $165;
     }
    }
   } while(0);
   while(1) {
    $166 = $size;
    $167 = ($166|0)!=(0);
    if (!($167)) {
     break L28;
    }
    _OutputByte(-52);
    $168 = $size;
    $169 = (($168) + -1)|0;
    $size = $169;
   }
  }
 } while(0);
 $173 = $1;
 _FreeFixup($173);
 STACKTOP = sp;return;
}
function _pe_create_PE_header() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $p = 0;
 var $pehdr = 0, $size = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[4884>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(512)>>2]|0;
 $3 = ($2|0)!=(7);
 if ($3) {
  (_EmitError(211)|0);
 }
 $4 = HEAP8[(557)>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(2);
 if ($6) {
  $size = 264;
  $p = 8;
 } else {
  $size = 248;
  $p = 5704;
 }
 $7 = (_SymFind(81765)|0);
 $pehdr = $7;
 $8 = $pehdr;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP8[(557)>>0]|0;
  $11 = (_CreateIntSegment(81765,81772,2,$10,1)|0);
  $pehdr = $11;
  $12 = HEAP32[(588)>>2]|0;
  $13 = $pehdr;
  $14 = ((($13)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$15>>2] = $12;
  $16 = $pehdr;
  $17 = ((($16)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 68|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 & -8;
  $22 = $21 | 2;
  HEAP8[$19>>0] = $22;
  $23 = $pehdr;
  $24 = ((($23)) + 60|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 65|0);
  HEAP8[$26>>0] = 64;
  $27 = $pehdr;
  $28 = ((($27)) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 67|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 & -2;
  $33 = $32 | 1;
  HEAP8[$30>>0] = $33;
  $34 = $size;
  $35 = $pehdr;
  $36 = ((($35)) + 60|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 16|0);
  HEAP32[$38>>2] = $34;
  $39 = $size;
  $40 = $pehdr;
  $41 = ((($40)) + 36|0);
  HEAP32[$41>>2] = $39;
 } else {
  $42 = $pehdr;
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $size;
  $46 = ($44|0)<($45|0);
  if ($46) {
   $47 = $size;
   $48 = $pehdr;
   $49 = ((($48)) + 36|0);
   HEAP32[$49>>2] = $47;
  }
  $50 = $pehdr;
  $51 = ((($50)) + 60|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 67|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 & -17;
  $56 = $55 | 16;
  HEAP8[$53>>0] = $56;
  $57 = $pehdr;
  $58 = ((($57)) + 60|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 4|0);
  HEAP32[$60>>2] = 0;
 }
 $61 = $pehdr;
 $62 = ((($61)) + 60|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 44|0);
 HEAP32[$64>>2] = 6;
 $65 = $size;
 $66 = (_LclAlloc($65)|0);
 $67 = $pehdr;
 $68 = ((($67)) + 60|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($69)) + 12|0);
 HEAP32[$70>>2] = $66;
 $71 = $pehdr;
 $72 = ((($71)) + 60|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $p;
 $77 = $size;
 _memcpy(($75|0),($76|0),($77|0))|0;
 $78 = $pehdr;
 $79 = ((($78)) + 60|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ((($82)) + 8|0);
 (_time(($83|0))|0);
 $84 = $p;
 $85 = ((($84)) + 4|0);
 $86 = ((($85)) + 18|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = $87&65535;
 $89 = (_CreateVariable(81776,$88)|0);
 $sym = $89;
 $90 = $sym;
 $91 = ($90|0)!=(0|0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $sym;
 $93 = ((($92)) + 24|0);
 $94 = HEAP16[$93>>1]|0;
 $95 = $94 & -33;
 $96 = $95 | 32;
 HEAP16[$93>>1] = $96;
 $97 = $sym;
 $98 = ((($97)) + 40|0);
 HEAP32[$98>>2] = 205;
 STACKTOP = sp;return;
}
function _bin_init($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = $0;
 $2 = ((($1)) + 152|0);
 HEAP32[$2>>2] = 206;
 $3 = $0;
 $4 = ((($3)) + 160|0);
 HEAP32[$4>>2] = 207;
 $5 = $0;
 $6 = ((($5)) + 204|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 1:  {
  $8 = $0;
  $9 = ((($8)) + 244|0);
  ;HEAP16[$9>>1]=HEAP16[67744>>1]|0;HEAP16[$9+2>>1]=HEAP16[67744+2>>1]|0;HEAP16[$9+4>>1]=HEAP16[67744+4>>1]|0;HEAP16[$9+6>>1]=HEAP16[67744+6>>1]|0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $10 = $0;
  $11 = ((($10)) + 156|0);
  HEAP32[$11>>2] = 208;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _set_file_flags($sym,$opnd) {
 $sym = $sym|0;
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pe = 0, $pehdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $opnd;
 $2 = (_SymFind(81765)|0);
 $pehdr = $2;
 $3 = $pehdr;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $pehdr;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $pe = $9;
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13&65535;
  $15 = $pe;
  $16 = ((($15)) + 4|0);
  $17 = ((($16)) + 18|0);
  HEAP16[$17>>1] = $14;
 }
 $18 = $pe;
 $19 = ((($18)) + 4|0);
 $20 = ((($19)) + 18|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $0;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $22;
 STACKTOP = sp;return;
}
function _bin_write_module($modinfo) {
 $modinfo = $modinfo|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr = 0, $addr1 = 0;
 var $cond = 0, $cond1 = 0, $cp = 0, $curr = 0, $dir = 0, $first = 0, $hdrbuf = 0, $i = 0, $pMZ = 0, $reloccnt = 0, $size = 0, $sizeheap = 0, $sizemem = 0, $sizetotal = 0, $stack = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 152|0;
 $vararg_buffer25 = sp + 144|0;
 $vararg_buffer18 = sp + 120|0;
 $vararg_buffer12 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer6 = sp + 72|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $cp = sp;
 $1 = $modinfo;
 $stack = 0;
 dest=$cp; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP8[$cp>>0] = 1;
 $2 = HEAP32[(15420)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = 0;
  $9 = $curr;
  $10 = ((($9)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 68|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 7;
  $15 = $14&255;
  $16 = ($15|0)==(5);
  if ($16) {
   $17 = $curr;
   $18 = ((($17)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 44|0);
   HEAP32[$20>>2] = 4;
  }
  $21 = $curr;
  $22 = ((($21)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $curr = $23;
 }
 $24 = $1;
 $25 = ((($24)) + 204|0);
 $26 = HEAP32[$25>>2]|0;
 $cond = ($26|0)==(1);
 if ($cond) {
  $27 = (_GetSegRelocs(0)|0);
  $28 = $27&65535;
  $reloccnt = $28;
  $29 = $reloccnt;
  $30 = $29&65535;
  $31 = $30<<2;
  $32 = $1;
  $33 = ((($32)) + 244|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (($31) + ($35))|0;
  $37 = $1;
  $38 = ((($37)) + 244|0);
  $39 = ((($38)) + 2|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($41) - 1)|0;
  $43 = (($36) + ($42))|0;
  $44 = $1;
  $45 = ((($44)) + 244|0);
  $46 = ((($45)) + 2|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = (($48) - 1)|0;
  $50 = $49 ^ -1;
  $51 = $43 & $50;
  $52 = ((($cp)) + 8|0);
  HEAP32[$52>>2] = $51;
 } else {
  $53 = ((($cp)) + 8|0);
  HEAP32[$53>>2] = 0;
 }
 $54 = ((($cp)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($cp)) + 4|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($cp)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = ((($cp)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_LclAlloc($61)|0);
  $hdrbuf = $62;
  $63 = $hdrbuf;
  $64 = ((($cp)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  _memset(($63|0),0,($65|0))|0;
 }
 $66 = ((($cp)) + 12|0);
 HEAP32[$66>>2] = -1;
 $67 = ((($cp)) + 24|0);
 HEAP32[$67>>2] = 0;
 $68 = $1;
 $69 = ((($68)) + 204|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(2);
 L15: do {
  if ($71) {
   $72 = HEAP32[(512)>>2]|0;
   $73 = ($72|0)==(0);
   if (!($73)) {
    _pe_set_values($cp);
    break;
   }
   $74 = (_EmitErr(96,$vararg_buffer)|0);
   $0 = $74;
   $516 = $0;
   STACKTOP = sp;return ($516|0);
  } else {
   $75 = $1;
   $76 = ((($75)) + 212|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(1);
   if (!($78)) {
    $99 = $1;
    $100 = ((($99)) + 212|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(2);
    if ($102) {
     _SortSegments(1);
    }
    $103 = HEAP32[(15420)>>2]|0;
    $curr = $103;
    while(1) {
     $104 = $curr;
     $105 = ($104|0)!=(0|0);
     if (!($105)) {
      break L15;
     }
     $106 = $curr;
     _CalcOffset($106,$cp);
     $107 = $curr;
     $108 = ((($107)) + 64|0);
     $109 = HEAP32[$108>>2]|0;
     $curr = $109;
    }
   }
   $i = 0;
   while(1) {
    $79 = $i;
    $80 = ($79>>>0)<(6);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[(15420)>>2]|0;
    $curr = $81;
    while(1) {
     $82 = $curr;
     $83 = ($82|0)!=(0|0);
     if (!($83)) {
      break;
     }
     $84 = $curr;
     $85 = ((($84)) + 60|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($86)) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $i;
     $90 = (5980 + ($89<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($88|0)!=($91|0);
     if (!($92)) {
      $93 = $curr;
      _CalcOffset($93,$cp);
     }
     $94 = $curr;
     $95 = ((($94)) + 64|0);
     $96 = HEAP32[$95>>2]|0;
     $curr = $96;
    }
    $97 = $i;
    $98 = (($97) + 1)|0;
    $i = $98;
   }
   _SortSegments(0);
  }
 } while(0);
 $110 = HEAP32[(15420)>>2]|0;
 $curr = $110;
 while(1) {
  $111 = $curr;
  $112 = ($111|0)!=(0|0);
  if (!($112)) {
   break;
  }
  $113 = $curr;
  (_DoFixup($113,$cp)|0);
  $114 = $stack;
  $115 = ($114|0)==(0|0);
  if ($115) {
   $116 = $curr;
   $117 = ((($116)) + 60|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($118)) + 68|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120 & 7;
   $122 = $121&255;
   $123 = ($122|0)==(5);
   if ($123) {
    $124 = $curr;
    $stack = $124;
   }
  }
  $125 = $curr;
  $126 = ((($125)) + 64|0);
  $127 = HEAP32[$126>>2]|0;
  $curr = $127;
 }
 $128 = $1;
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0);
 if ($130) {
  $0 = -1;
  $516 = $0;
  STACKTOP = sp;return ($516|0);
 }
 $131 = $1;
 $132 = ((($131)) + 204|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)==(0);
 do {
  if ($134) {
   $135 = $1;
   $136 = ((($135)) + 108|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)!=(0|0);
   if ($138) {
    $139 = ((($cp)) + 12|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(-1);
    if (!($141)) {
     $142 = ((($cp)) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $1;
     $145 = ((($144)) + 108|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($146)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($143|0)!=($148|0);
     if (!($149)) {
      break;
     }
    }
    $150 = (_EmitError(202)|0);
    $0 = $150;
    $516 = $0;
    STACKTOP = sp;return ($516|0);
   }
  }
 } while(0);
 $151 = (_GetImageSize(0)|0);
 $sizetotal = $151;
 $152 = $1;
 $153 = ((($152)) + 204|0);
 $154 = HEAP32[$153>>2]|0;
 $cond1 = ($154|0)==(1);
 if ($cond1) {
  $155 = $hdrbuf;
  $pMZ = $155;
  $156 = $pMZ;
  HEAP16[$156>>1] = 23117;
  $157 = $sizetotal;
  $158 = (($157>>>0) % 512)&-1;
  $159 = $158&65535;
  $160 = $pMZ;
  $161 = ((($160)) + 2|0);
  HEAP16[$161>>1] = $159;
  $162 = $sizetotal;
  $163 = (($162>>>0) / 512)&-1;
  $164 = $sizetotal;
  $165 = (($164>>>0) % 512)&-1;
  $166 = ($165|0)!=(0);
  $167 = $166 ? 1 : 0;
  $168 = (($163) + ($167))|0;
  $169 = $168&65535;
  $170 = $pMZ;
  $171 = ((($170)) + 4|0);
  HEAP16[$171>>1] = $169;
  $172 = $reloccnt;
  $173 = $pMZ;
  $174 = ((($173)) + 6|0);
  HEAP16[$174>>1] = $172;
  $175 = ((($cp)) + 8|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 >>> 4;
  $178 = $177&65535;
  $179 = $pMZ;
  $180 = ((($179)) + 8|0);
  HEAP16[$180>>1] = $178;
  $181 = (_GetImageSize(1)|0);
  $182 = $sizetotal;
  $183 = (($181) - ($182))|0;
  $sizeheap = $183;
  $184 = $sizeheap;
  $185 = (($184>>>0) / 16)&-1;
  $186 = $sizeheap;
  $187 = (($186>>>0) % 16)&-1;
  $188 = ($187|0)!=(0);
  $189 = $188 ? 1 : 0;
  $190 = (($185) + ($189))|0;
  $191 = $190&65535;
  $192 = $pMZ;
  $193 = ((($192)) + 10|0);
  HEAP16[$193>>1] = $191;
  $194 = $pMZ;
  $195 = ((($194)) + 10|0);
  $196 = HEAP16[$195>>1]|0;
  $197 = $196&65535;
  $198 = $1;
  $199 = ((($198)) + 244|0);
  $200 = ((($199)) + 4|0);
  $201 = HEAP16[$200>>1]|0;
  $202 = $201&65535;
  $203 = ($197|0)<($202|0);
  if ($203) {
   $204 = $1;
   $205 = ((($204)) + 244|0);
   $206 = ((($205)) + 4|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $pMZ;
   $209 = ((($208)) + 10|0);
   HEAP16[$209>>1] = $207;
  }
  $210 = $1;
  $211 = ((($210)) + 244|0);
  $212 = ((($211)) + 6|0);
  $213 = HEAP16[$212>>1]|0;
  $214 = $pMZ;
  $215 = ((($214)) + 12|0);
  HEAP16[$215>>1] = $213;
  $216 = $pMZ;
  $217 = ((($216)) + 12|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = $218&65535;
  $220 = $pMZ;
  $221 = ((($220)) + 10|0);
  $222 = HEAP16[$221>>1]|0;
  $223 = $222&65535;
  $224 = ($219|0)<($223|0);
  if ($224) {
   $225 = $pMZ;
   $226 = ((($225)) + 10|0);
   $227 = HEAP16[$226>>1]|0;
   $228 = $pMZ;
   $229 = ((($228)) + 12|0);
   HEAP16[$229>>1] = $227;
  }
  $230 = $stack;
  $231 = ($230|0)!=(0|0);
  if ($231) {
   $232 = $stack;
   $233 = ((($232)) + 60|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($234)) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $addr = $236;
   $237 = $stack;
   $238 = ((($237)) + 60|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)!=(0|0);
   if ($241) {
    $242 = $stack;
    $243 = ((($242)) + 60|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = HEAP32[$244>>2]|0;
    $246 = ((($245)) + 8|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = $addr;
    $249 = (($248) + ($247))|0;
    $addr = $249;
   }
   $250 = $addr;
   $251 = $250 >>> 4;
   $252 = $addr;
   $253 = $252 & 15;
   $254 = ($253|0)!=(0);
   $255 = $254 ? 1 : 0;
   $256 = (($251) + ($255))|0;
   $257 = $256&65535;
   $258 = $pMZ;
   $259 = ((($258)) + 14|0);
   HEAP16[$259>>1] = $257;
   $260 = $stack;
   $261 = ((($260)) + 36|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = $262&65535;
   $264 = $pMZ;
   $265 = ((($264)) + 16|0);
   HEAP16[$265>>1] = $263;
  } else {
   _EmitWarn(2,204,$vararg_buffer2);
  }
  $266 = $pMZ;
  $267 = ((($266)) + 18|0);
  HEAP16[$267>>1] = 0;
  $268 = $1;
  $269 = ((($268)) + 108|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)!=(0|0);
  do {
   if ($271) {
    $272 = $1;
    $273 = ((($272)) + 108|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ((($274)) + 12|0);
    $276 = HEAP32[$275>>2]|0;
    $curr = $276;
    $277 = $curr;
    $278 = ((($277)) + 60|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = HEAP32[$279>>2]|0;
    $281 = ($280|0)!=(0|0);
    $282 = $curr;
    $283 = ((($282)) + 60|0);
    $284 = HEAP32[$283>>2]|0;
    if ($281) {
     $285 = HEAP32[$284>>2]|0;
     $286 = ((($285)) + 8|0);
     $287 = HEAP32[$286>>2]|0;
     $addr1 = $287;
     $288 = $addr1;
     $289 = $288 & 15;
     $290 = $curr;
     $291 = ((($290)) + 60|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ((($292)) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = (($289) + ($294))|0;
     $296 = $1;
     $297 = ((($296)) + 108|0);
     $298 = HEAP32[$297>>2]|0;
     $299 = ((($298)) + 8|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = (($295) + ($300))|0;
     $302 = $301&65535;
     $303 = $pMZ;
     $304 = ((($303)) + 20|0);
     HEAP16[$304>>1] = $302;
     $305 = $addr1;
     $306 = $305 >>> 4;
     $307 = $306&65535;
     $308 = $pMZ;
     $309 = ((($308)) + 22|0);
     HEAP16[$309>>1] = $307;
     break;
    } else {
     $310 = ((($284)) + 8|0);
     $311 = HEAP32[$310>>2]|0;
     $addr1 = $311;
     $312 = $addr1;
     $313 = $312 & 15;
     $314 = $1;
     $315 = ((($314)) + 108|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = ((($316)) + 8|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = (($313) + ($318))|0;
     $320 = $319&65535;
     $321 = $pMZ;
     $322 = ((($321)) + 20|0);
     HEAP16[$322>>1] = $320;
     $323 = $addr1;
     $324 = $323 >>> 4;
     $325 = $324&65535;
     $326 = $pMZ;
     $327 = ((($326)) + 22|0);
     HEAP16[$327>>1] = $325;
     break;
    }
   } else {
    _EmitWarn(2,203,$vararg_buffer4);
   }
  } while(0);
  $328 = $1;
  $329 = ((($328)) + 244|0);
  $330 = HEAP16[$329>>1]|0;
  $331 = $pMZ;
  $332 = ((($331)) + 24|0);
  HEAP16[$332>>1] = $330;
  $333 = $hdrbuf;
  $334 = $pMZ;
  $335 = ((($334)) + 24|0);
  $336 = HEAP16[$335>>1]|0;
  $337 = $336&65535;
  $338 = (($333) + ($337)|0);
  (_GetSegRelocs($338)|0);
 }
 $339 = HEAP32[(380)>>2]|0;
 $340 = ($339|0)!=(0|0);
 if ($340) {
  $341 = HEAP32[(380)>>2]|0;
  (_fseek($341,0,2)|0);
  _LstNL();
  _LstNL();
  _LstPrintf(82722,$vararg_buffer6);
  _LstNL();
  _LstNL();
  _LstPrintf(82734,$vararg_buffer8);
  _LstNL();
  _LstPrintf(82798,$vararg_buffer10);
  _LstNL();
 }
 $342 = ((($cp)) + 8|0);
 $343 = HEAP32[$342>>2]|0;
 $344 = ($343|0)!=(0);
 if ($344) {
  $345 = $hdrbuf;
  $346 = ((($cp)) + 8|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = HEAP32[(376)>>2]|0;
  $349 = (_fwrite($345,1,$347,$348)|0);
  $350 = ((($cp)) + 8|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ($349|0)!=($351|0);
  if ($352) {
   _WriteError();
  }
  $353 = ((($cp)) + 8|0);
  $354 = HEAP32[$353>>2]|0;
  HEAP32[$vararg_buffer12>>2] = 82884;
  $vararg_ptr14 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = 0;
  $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr15>>2] = 0;
  $vararg_ptr16 = ((($vararg_buffer12)) + 12|0);
  HEAP32[$vararg_ptr16>>2] = $354;
  $vararg_ptr17 = ((($vararg_buffer12)) + 16|0);
  HEAP32[$vararg_ptr17>>2] = 0;
  _LstPrintf(82862,$vararg_buffer12);
  _LstNL();
 }
 $355 = HEAP32[(15420)>>2]|0;
 $curr = $355;
 $first = 1;
 while(1) {
  $356 = $curr;
  $357 = ($356|0)!=(0|0);
  if (!($357)) {
   break;
  }
  $358 = $curr;
  $359 = ((($358)) + 60|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = ((($360)) + 44|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = ($362|0)==(5);
  if (!($363)) {
   $364 = HEAP32[(524)>>2]|0;
   $365 = ($364|0)==(2);
   do {
    if ($365) {
     $366 = $curr;
     $367 = ((($366)) + 60|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ((($368)) + 44|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(3);
     if (!($371)) {
      $372 = $curr;
      $373 = ((($372)) + 60|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = ((($374)) + 67|0);
      $376 = HEAP8[$375>>0]|0;
      $377 = ($376&255) >>> 1;
      $378 = $377 & 1;
      $379 = $378&255;
      $380 = ($379|0)!=(0);
      if (!($380)) {
       label = 72;
       break;
      }
     }
     $size = 0;
    } else {
     label = 72;
    }
   } while(0);
   if ((label|0) == 72) {
    label = 0;
    $381 = $curr;
    $382 = ((($381)) + 36|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = $curr;
    $385 = ((($384)) + 60|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ((($386)) + 4|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = (($383) - ($388))|0;
    $size = $389;
   }
   $390 = $first;
   $391 = ($390|0)!=(0);
   if ($391) {
    $392 = $size;
    $396 = $392;
   } else {
    $393 = $curr;
    $394 = ((($393)) + 36|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395;
   }
   $sizemem = $396;
   $397 = $curr;
   $398 = ((($397)) + 60|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = ((($399)) + 16|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = ($401|0)==(0);
   if ($402) {
    $403 = $curr;
    $404 = ((($403)) + 64|0);
    $405 = HEAP32[$404>>2]|0;
    $dir = $405;
    while(1) {
     $406 = $dir;
     $407 = ($406|0)!=(0|0);
     if (!($407)) {
      break;
     }
     $408 = $dir;
     $409 = ((($408)) + 60|0);
     $410 = HEAP32[$409>>2]|0;
     $411 = ((($410)) + 16|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = ($412|0)!=(0);
     if ($413) {
      break;
     }
     $414 = $dir;
     $415 = ((($414)) + 64|0);
     $416 = HEAP32[$415>>2]|0;
     $dir = $416;
    }
    $417 = $dir;
    $418 = ($417|0)!=(0|0);
    if (!($418)) {
     $size = 0;
    }
   }
   $419 = $curr;
   $420 = ((($419)) + 4|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = $curr;
   $423 = ((($422)) + 60|0);
   $424 = HEAP32[$423>>2]|0;
   $425 = ((($424)) + 32|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = $first;
   $428 = ($427|0)!=(0);
   $429 = $curr;
   $430 = ((($429)) + 60|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = ((($431)) + 8|0);
   $433 = HEAP32[$432>>2]|0;
   if ($428) {
    $434 = $curr;
    $435 = ((($434)) + 60|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = ((($436)) + 4|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = (($433) + ($438))|0;
    $442 = $439;
   } else {
    $442 = $433;
   }
   $440 = $size;
   $441 = $sizemem;
   HEAP32[$vararg_buffer18>>2] = $421;
   $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $426;
   $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
   HEAP32[$vararg_ptr22>>2] = $442;
   $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
   HEAP32[$vararg_ptr23>>2] = $440;
   $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
   HEAP32[$vararg_ptr24>>2] = $441;
   _LstPrintf(82862,$vararg_buffer18);
   _LstNL();
   $443 = $size;
   $444 = ($443|0)!=(0);
   if ($444) {
    $445 = $curr;
    $446 = ((($445)) + 60|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = ((($447)) + 12|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ($449|0)!=(0|0);
    if ($450) {
     $451 = HEAP32[(376)>>2]|0;
     $452 = $curr;
     $453 = ((($452)) + 60|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = ((($454)) + 32|0);
     $456 = HEAP32[$455>>2]|0;
     (_fseek($451,$456,0)|0);
     $457 = $curr;
     $458 = ((($457)) + 60|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = ((($459)) + 12|0);
     $461 = HEAP32[$460>>2]|0;
     $462 = $size;
     $463 = HEAP32[(376)>>2]|0;
     $464 = (_fwrite($461,1,$462,$463)|0);
     $465 = $size;
     $466 = ($464|0)!=($465|0);
     if ($466) {
      _WriteError();
     }
    }
   }
   $first = 0;
  }
  $467 = $curr;
  $468 = ((($467)) + 64|0);
  $469 = HEAP32[$468>>2]|0;
  $curr = $469;
 }
 $470 = $1;
 $471 = ((($470)) + 204|0);
 $472 = HEAP32[$471>>2]|0;
 $473 = ($472|0)==(2);
 if ($473) {
  $474 = HEAP32[(376)>>2]|0;
  $475 = (_ftell($474)|0);
  $size = $475;
  $476 = $size;
  $477 = ((($cp)) + 40|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = (($478) - 1)|0;
  $480 = $476 & $479;
  $481 = ($480|0)!=(0);
  if ($481) {
   $482 = ((($cp)) + 40|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = $size;
   $485 = ((($cp)) + 40|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = (($486) - 1)|0;
   $488 = $484 & $487;
   $489 = (($483) - ($488))|0;
   $size = $489;
   $490 = $size;
   $$alloca_mul = $490;
   $491 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
   $tmp = $491;
   $492 = $tmp;
   $493 = $size;
   _memset(($492|0),0,($493|0))|0;
   $494 = $tmp;
   $495 = $size;
   $496 = HEAP32[(376)>>2]|0;
   (_fwrite($494,1,$495,$496)|0);
  }
 }
 _LstPrintf(82798,$vararg_buffer25);
 _LstNL();
 $497 = $1;
 $498 = ((($497)) + 204|0);
 $499 = HEAP32[$498>>2]|0;
 $500 = ($499|0)==(1);
 do {
  if ($500) {
   $501 = $sizetotal;
   $502 = ((($cp)) + 8|0);
   $503 = HEAP32[$502>>2]|0;
   $504 = (($501) - ($503))|0;
   $505 = $sizeheap;
   $506 = (($505) + ($504))|0;
   $sizeheap = $506;
  } else {
   $507 = $1;
   $508 = ((($507)) + 204|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = ($509|0)==(2);
   if ($510) {
    $511 = ((($cp)) + 24|0);
    $512 = HEAP32[$511>>2]|0;
    $sizeheap = $512;
    break;
   } else {
    $513 = (_GetImageSize(1)|0);
    $sizeheap = $513;
    break;
   }
  }
 } while(0);
 $514 = $sizetotal;
 $515 = $sizeheap;
 HEAP32[$vararg_buffer27>>2] = 89360;
 $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
 HEAP32[$vararg_ptr30>>2] = $514;
 $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
 HEAP32[$vararg_ptr31>>2] = $515;
 _LstPrintf(82893,$vararg_buffer27);
 _LstNL();
 $0 = 0;
 $516 = $0;
 STACKTOP = sp;return ($516|0);
}
function _bin_check_external($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $modinfo;
 $2 = HEAP32[(15412)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 28|0);
  $7 = ((($6)) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8&255) >>> 3;
  $10 = $9 & 1;
  $11 = $10&255;
  $12 = ($11|0)==(0);
  if ($12) {
   label = 5;
   break;
  }
  $13 = $curr;
  $14 = ((($13)) + 24|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 & 1;
  $17 = $16&255;
  $18 = $17&255;
  $19 = ($18|0)==(1);
  if ($19) {
   label = 5;
   break;
  }
  $24 = $curr;
  $25 = ((($24)) + 64|0);
  $26 = HEAP32[$25>>2]|0;
  $curr = $26;
 }
 if ((label|0) == 5) {
  $20 = $curr;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $23 = (_EmitErr(201,$vararg_buffer)|0);
  $0 = $23;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _pe_enddirhook($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = $0;
 _pe_create_MZ_header($1);
 _pe_emit_export_data();
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  _pe_emit_import_data();
 }
 _pe_create_section_table();
 STACKTOP = sp;return 0;
}
function _pe_create_MZ_header($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $modinfo;
 $1 = HEAP32[4884>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_SymFind(82485)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = $0;
   $6 = ((($5)) + 164|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = $8 | 1;
   $10 = $9&255;
   HEAP8[$6>>0] = $10;
  }
 }
 $11 = $0;
 $12 = ((($11)) + 164|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = 370;
 _AddLineQueueX(81846,$vararg_buffer);
 HEAP32[$vararg_buffer1>>2] = 82511;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 359;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = 134;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = 82517;
 _AddLineQueueX(82492,$vararg_buffer1);
 $p = 82535;
 while(1) {
  $17 = $p;
  $18 = ($17>>>0)<((82715)>>>0);
  if (!($18)) {
   break;
  }
  $19 = $p;
  _AddLineQueue($19);
  $20 = $p;
  $21 = (_strlen($20)|0);
  $22 = (($21) + 1)|0;
  $23 = $p;
  $24 = (($23) + ($22)|0);
  $p = $24;
 }
 HEAP32[$vararg_buffer7>>2] = 82511;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = 360;
 _AddLineQueueX(82715,$vararg_buffer7);
 _RunLineQueue();
 $25 = (_SymFind(82485)|0);
 $sym = $25;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $sym;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(3);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $sym;
 $32 = ((($31)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 44|0);
 HEAP32[$34>>2] = 6;
 STACKTOP = sp;return;
}
function _pe_emit_export_data() {
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $curr = 0, $fname = 0, $i = 0, $name = 0, $pexp = 0, $pitems = 0, $timedate = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr47 = 0, $vararg_ptr5 = 0, $vararg_ptr51 = 0, $vararg_ptr55 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer52 = sp + 136|0;
 $vararg_buffer48 = sp + 128|0;
 $vararg_buffer44 = sp + 120|0;
 $vararg_buffer41 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer33 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $timedate = sp + 168|0;
 $0 = HEAP32[(15436)>>2]|0;
 $curr = $0;
 $cnt = 0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7&255) >>> 2;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = $cnt;
   $12 = (($11) + 1)|0;
   $cnt = $12;
  }
  $13 = $curr;
  $14 = ((($13)) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $curr = $15;
 }
 $16 = $cnt;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $name = (632);
 HEAP32[$vararg_buffer>>2] = 370;
 _AddLineQueueX(81846,$vararg_buffer);
 HEAP32[$vararg_buffer1>>2] = 82241;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 359;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = 136;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = 82248;
 _AddLineQueueX(82229,$vararg_buffer1);
 (_time(($timedate|0))|0);
 $18 = HEAP32[$timedate>>2]|0;
 $19 = $name;
 $20 = $cnt;
 $21 = $cnt;
 $22 = $name;
 $23 = $name;
 $24 = $name;
 HEAP32[$vararg_buffer7>>2] = $18;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = 159;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $19;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = 1;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = $20;
 $vararg_ptr14 = ((($vararg_buffer7)) + 20|0);
 HEAP32[$vararg_ptr14>>2] = $21;
 $vararg_ptr15 = ((($vararg_buffer7)) + 24|0);
 HEAP32[$vararg_ptr15>>2] = 159;
 $vararg_ptr16 = ((($vararg_buffer7)) + 28|0);
 HEAP32[$vararg_ptr16>>2] = $22;
 $vararg_ptr17 = ((($vararg_buffer7)) + 32|0);
 HEAP32[$vararg_ptr17>>2] = 159;
 $vararg_ptr18 = ((($vararg_buffer7)) + 36|0);
 HEAP32[$vararg_ptr18>>2] = $23;
 $vararg_ptr19 = ((($vararg_buffer7)) + 40|0);
 HEAP32[$vararg_ptr19>>2] = 159;
 $vararg_ptr20 = ((($vararg_buffer7)) + 44|0);
 HEAP32[$vararg_ptr20>>2] = $24;
 _AddLineQueueX(82288,$vararg_buffer7);
 $25 = $cnt;
 $26 = $25<<3;
 $$alloca_mul = $26;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $pitems = $27;
 $28 = HEAP32[(15436)>>2]|0;
 $curr = $28;
 $29 = $pitems;
 $pexp = $29;
 $i = 0;
 while(1) {
  $30 = $curr;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   break;
  }
  $32 = $curr;
  $33 = ((($32)) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 40|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36&255) >>> 2;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)!=(0);
  if ($39) {
   $40 = $curr;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $pexp;
   HEAP32[$43>>2] = $42;
   $44 = $i;
   $45 = (($44) + 1)|0;
   $i = $45;
   $46 = $pexp;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $44;
   $48 = $pexp;
   $49 = ((($48)) + 8|0);
   $pexp = $49;
  }
  $50 = $curr;
  $51 = ((($50)) + 68|0);
  $52 = HEAP32[$51>>2]|0;
  $curr = $52;
 }
 $53 = $pitems;
 $54 = $cnt;
 _qsort($53,$54,8,209);
 $55 = $name;
 HEAP32[$vararg_buffer21>>2] = $55;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = 354;
 _AddLineQueueX(82370,$vararg_buffer21);
 $56 = HEAP32[(15436)>>2]|0;
 $curr = $56;
 while(1) {
  $57 = $curr;
  $58 = ($57|0)!=(0|0);
  if (!($58)) {
   break;
  }
  $59 = $curr;
  $60 = ((($59)) + 60|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 40|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63&255) >>> 2;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)!=(0);
  if ($66) {
   $67 = $curr;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$vararg_buffer25>>2] = 159;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $69;
   _AddLineQueueX(82388,$vararg_buffer25);
  }
  $70 = $curr;
  $71 = ((($70)) + 68|0);
  $72 = HEAP32[$71>>2]|0;
  $curr = $72;
 }
 $73 = $name;
 HEAP32[$vararg_buffer29>>2] = $73;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = 354;
 _AddLineQueueX(82397,$vararg_buffer29);
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = $cnt;
  $76 = ($74|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $pitems;
  $78 = $i;
  $79 = (($77) + ($78<<3)|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$vararg_buffer33>>2] = 159;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $80;
  _AddLineQueueX(82416,$vararg_buffer33);
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = $name;
 HEAP32[$vararg_buffer37>>2] = $83;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = 354;
 _AddLineQueueX(82426,$vararg_buffer37);
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = $cnt;
  $86 = ($84|0)<($85|0);
  if (!($86)) {
   break;
  }
  $87 = $pitems;
  $88 = $i;
  $89 = (($87) + ($88<<3)|0);
  $90 = ((($89)) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  HEAP32[$vararg_buffer41>>2] = $91;
  _AddLineQueueX(82446,$vararg_buffer41);
  $92 = $i;
  $93 = (($92) + 1)|0;
  $i = $93;
 }
 $94 = HEAP32[(392)>>2]|0;
 $95 = HEAP32[(392)>>2]|0;
 $96 = (_strlen($95)|0);
 $97 = (($94) + ($96)|0);
 $fname = $97;
 while(1) {
  $98 = $fname;
  $99 = HEAP32[(392)>>2]|0;
  $100 = ($98>>>0)>($99>>>0);
  if (!($100)) {
   break;
  }
  $101 = $fname;
  $102 = HEAP8[$101>>0]|0;
  $103 = $102 << 24 >> 24;
  $104 = ($103|0)==(47);
  if ($104) {
   break;
  }
  $105 = $fname;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106 << 24 >> 24;
  $108 = ($107|0)==(92);
  if ($108) {
   break;
  }
  $109 = $fname;
  $110 = HEAP8[$109>>0]|0;
  $111 = $110 << 24 >> 24;
  $112 = ($111|0)==(58);
  if ($112) {
   break;
  }
  $113 = $fname;
  $114 = ((($113)) + -1|0);
  $fname = $114;
 }
 $115 = $name;
 $116 = $fname;
 HEAP32[$vararg_buffer44>>2] = $115;
 $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
 HEAP32[$vararg_ptr47>>2] = $116;
 _AddLineQueueX(82452,$vararg_buffer44);
 $117 = HEAP32[(15436)>>2]|0;
 $curr = $117;
 while(1) {
  $118 = $curr;
  $119 = ($118|0)!=(0|0);
  if (!($119)) {
   break;
  }
  $120 = $curr;
  $121 = ((($120)) + 60|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($122)) + 40|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = ($124&255) >>> 2;
  $126 = $125 & 1;
  $127 = ($126<<24>>24)!=(0);
  if ($127) {
   $128 = $curr;
   $129 = HEAP32[(612)>>2]|0;
   (_Mangle($128,$129)|0);
   $130 = $curr;
   $131 = ((($130)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = HEAP8[(6075)>>0]|0;
   $134 = $133&255;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $curr;
    $137 = ((($136)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $140 = $138;
   } else {
    $139 = HEAP32[(612)>>2]|0;
    $140 = $139;
   }
   HEAP32[$vararg_buffer48>>2] = $132;
   $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
   HEAP32[$vararg_ptr51>>2] = $140;
   _AddLineQueueX(82471,$vararg_buffer48);
  }
  $141 = $curr;
  $142 = ((($141)) + 68|0);
  $143 = HEAP32[$142>>2]|0;
  $curr = $143;
 }
 HEAP32[$vararg_buffer52>>2] = 82241;
 $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
 HEAP32[$vararg_ptr55>>2] = 360;
 _AddLineQueueX(109563,$vararg_buffer52);
 _RunLineQueue();
 STACKTOP = sp;return;
}
function _pe_emit_import_data() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $curr = 0, $p = 0, $pdot = 0, $ptrtype = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer100 = 0, $vararg_buffer12 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer66 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer84 = 0, $vararg_buffer88 = 0, $vararg_buffer92 = 0, $vararg_buffer98 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr103 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0;
 var $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr65 = 0, $vararg_ptr69 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr81 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr87 = 0, $vararg_ptr9 = 0, $vararg_ptr91 = 0, $vararg_ptr95 = 0, $vararg_ptr96 = 0, $vararg_ptr97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer100 = sp + 264|0;
 $vararg_buffer98 = sp + 256|0;
 $vararg_buffer92 = sp + 240|0;
 $vararg_buffer88 = sp + 232|0;
 $vararg_buffer84 = sp + 224|0;
 $vararg_buffer78 = sp + 208|0;
 $vararg_buffer75 = sp + 200|0;
 $vararg_buffer72 = sp + 192|0;
 $vararg_buffer66 = sp + 176|0;
 $vararg_buffer62 = sp + 168|0;
 $vararg_buffer60 = sp + 160|0;
 $vararg_buffer54 = sp + 144|0;
 $vararg_buffer50 = sp + 136|0;
 $vararg_buffer44 = sp + 120|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer38 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $type = 0;
 $0 = HEAP8[(557)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)==(2);
 $3 = $2 ? 140 : 136;
 $ptrtype = $3;
 $4 = HEAP8[(557)>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(2);
 $7 = $6 ? 81811 : 81820;
 $align = $7;
 $8 = HEAP32[(364)>>2]|0;
 $p = $8;
 while(1) {
  $9 = $p;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $p;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $type;
   $16 = ($15|0)!=(0);
   if (!($16)) {
    $type = 1;
    HEAP32[$vararg_buffer>>2] = 343;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 184;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 351;
    _AddLineQueueX(81829,$vararg_buffer);
    HEAP32[$vararg_buffer3>>2] = 370;
    _AddLineQueueX(81846,$vararg_buffer3);
   }
   $17 = $p;
   $18 = ((($17)) + 8|0);
   $19 = (_strchr($18,46)|0);
   $pdot = $19;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $pdot;
    HEAP8[$21>>0] = 95;
   }
   HEAP32[$vararg_buffer6>>2] = 81870;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = 359;
   $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
   HEAP32[$vararg_ptr10>>2] = 136;
   $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
   HEAP32[$vararg_ptr11>>2] = 81878;
   _AddLineQueueX(81857,$vararg_buffer6);
   $22 = $p;
   $23 = ((($22)) + 8|0);
   $24 = $p;
   $25 = ((($24)) + 8|0);
   $26 = $p;
   $27 = ((($26)) + 8|0);
   HEAP32[$vararg_buffer12>>2] = 159;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $23;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = 159;
   $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
   HEAP32[$vararg_ptr17>>2] = $25;
   $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
   HEAP32[$vararg_ptr18>>2] = 159;
   $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
   HEAP32[$vararg_ptr19>>2] = $27;
   _AddLineQueueX(81918,$vararg_buffer12);
   HEAP32[$vararg_buffer20>>2] = 81870;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = 360;
   _AddLineQueueX(81963,$vararg_buffer20);
   $28 = $align;
   HEAP32[$vararg_buffer24>>2] = 81870;
   $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
   HEAP32[$vararg_ptr27>>2] = 359;
   $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
   HEAP32[$vararg_ptr28>>2] = $28;
   $vararg_ptr29 = ((($vararg_buffer24)) + 12|0);
   HEAP32[$vararg_ptr29>>2] = 81878;
   _AddLineQueueX(81970,$vararg_buffer24);
   $29 = $p;
   $30 = ((($29)) + 8|0);
   $31 = $ptrtype;
   HEAP32[$vararg_buffer30>>2] = $30;
   $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
   HEAP32[$vararg_ptr33>>2] = $31;
   _AddLineQueueX(81983,$vararg_buffer30);
   $32 = HEAP32[(15412)>>2]|0;
   $curr = $32;
   while(1) {
    $33 = $curr;
    $34 = ($33|0)!=(0|0);
    if (!($34)) {
     break;
    }
    $35 = $curr;
    $36 = ((($35)) + 24|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = ($37&65535) >>> 3;
    $39 = $38 & 1;
    $40 = $39&255;
    $41 = $40&255;
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $curr;
     $44 = ((($43)) + 36|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $p;
     $47 = ($45|0)==($46|0);
     if ($47) {
      $48 = $curr;
      $49 = ((($48)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      HEAP32[$vararg_buffer34>>2] = 159;
      $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
      HEAP32[$vararg_ptr37>>2] = $50;
      _AddLineQueueX(82000,$vararg_buffer34);
     }
    }
    $51 = $curr;
    $52 = ((($51)) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $curr = $53;
   }
   _AddLineQueueX(82020,$vararg_buffer38);
   HEAP32[$vararg_buffer40>>2] = 81870;
   $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
   HEAP32[$vararg_ptr43>>2] = 360;
   _AddLineQueueX(82030,$vararg_buffer40);
   $54 = $align;
   HEAP32[$vararg_buffer44>>2] = 81870;
   $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
   HEAP32[$vararg_ptr47>>2] = 359;
   $vararg_ptr48 = ((($vararg_buffer44)) + 8|0);
   HEAP32[$vararg_ptr48>>2] = $54;
   $vararg_ptr49 = ((($vararg_buffer44)) + 12|0);
   HEAP32[$vararg_ptr49>>2] = 81878;
   _AddLineQueueX(82037,$vararg_buffer44);
   $55 = $p;
   $56 = ((($55)) + 8|0);
   $57 = $ptrtype;
   HEAP32[$vararg_buffer50>>2] = $56;
   $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
   HEAP32[$vararg_ptr53>>2] = $57;
   _AddLineQueueX(82050,$vararg_buffer50);
   $58 = HEAP32[(15412)>>2]|0;
   $curr = $58;
   while(1) {
    $59 = $curr;
    $60 = ($59|0)!=(0|0);
    if (!($60)) {
     break;
    }
    $61 = $curr;
    $62 = ((($61)) + 24|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = ($63&65535) >>> 3;
    $65 = $64 & 1;
    $66 = $65&255;
    $67 = $66&255;
    $68 = ($67|0)!=(0);
    if ($68) {
     $69 = $curr;
     $70 = ((($69)) + 36|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $p;
     $73 = ($71|0)==($72|0);
     if ($73) {
      $74 = $curr;
      $75 = HEAP32[(612)>>2]|0;
      (_Mangle($74,$75)|0);
      $76 = HEAP32[(368)>>2]|0;
      $77 = HEAP32[(612)>>2]|0;
      $78 = $curr;
      $79 = ((($78)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      HEAP32[$vararg_buffer54>>2] = $76;
      $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
      HEAP32[$vararg_ptr57>>2] = $77;
      $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
      HEAP32[$vararg_ptr58>>2] = 159;
      $vararg_ptr59 = ((($vararg_buffer54)) + 12|0);
      HEAP32[$vararg_ptr59>>2] = $80;
      _AddLineQueueX(82067,$vararg_buffer54);
     }
    }
    $81 = $curr;
    $82 = ((($81)) + 64|0);
    $83 = HEAP32[$82>>2]|0;
    $curr = $83;
   }
   _AddLineQueueX(82020,$vararg_buffer60);
   HEAP32[$vararg_buffer62>>2] = 81870;
   $vararg_ptr65 = ((($vararg_buffer62)) + 4|0);
   HEAP32[$vararg_ptr65>>2] = 360;
   _AddLineQueueX(82092,$vararg_buffer62);
   HEAP32[$vararg_buffer66>>2] = 81870;
   $vararg_ptr69 = ((($vararg_buffer66)) + 4|0);
   HEAP32[$vararg_ptr69>>2] = 359;
   $vararg_ptr70 = ((($vararg_buffer66)) + 8|0);
   HEAP32[$vararg_ptr70>>2] = 134;
   $vararg_ptr71 = ((($vararg_buffer66)) + 12|0);
   HEAP32[$vararg_ptr71>>2] = 81878;
   _AddLineQueueX(82099,$vararg_buffer66);
   $84 = HEAP32[(15412)>>2]|0;
   $curr = $84;
   while(1) {
    $85 = $curr;
    $86 = ($85|0)!=(0|0);
    if (!($86)) {
     break;
    }
    $87 = $curr;
    $88 = ((($87)) + 24|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = ($89&65535) >>> 3;
    $91 = $90 & 1;
    $92 = $91&255;
    $93 = $92&255;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $curr;
     $96 = ((($95)) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $p;
     $99 = ($97|0)==($98|0);
     if ($99) {
      $100 = $curr;
      $101 = ((($100)) + 4|0);
      $102 = HEAP32[$101>>2]|0;
      HEAP32[$vararg_buffer72>>2] = $102;
      _AddLineQueueX(82112,$vararg_buffer72);
      $103 = $curr;
      $104 = ((($103)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$vararg_buffer75>>2] = $105;
      _AddLineQueueX(82126,$vararg_buffer75);
      _AddLineQueue(82136);
     }
    }
    $106 = $curr;
    $107 = ((($106)) + 64|0);
    $108 = HEAP32[$107>>2]|0;
    $curr = $108;
   }
   $109 = $pdot;
   $110 = ($109|0)!=(0|0);
   if ($110) {
    $111 = $pdot;
    HEAP8[$111>>0] = 0;
    $112 = $p;
    $113 = ((($112)) + 8|0);
    $114 = $pdot;
    $115 = ((($114)) + 1|0);
    $116 = $p;
    $117 = ((($116)) + 8|0);
    $118 = $pdot;
    $119 = ((($118)) + 1|0);
    HEAP32[$vararg_buffer78>>2] = $113;
    $vararg_ptr81 = ((($vararg_buffer78)) + 4|0);
    HEAP32[$vararg_ptr81>>2] = $115;
    $vararg_ptr82 = ((($vararg_buffer78)) + 8|0);
    HEAP32[$vararg_ptr82>>2] = $117;
    $vararg_ptr83 = ((($vararg_buffer78)) + 12|0);
    HEAP32[$vararg_ptr83>>2] = $119;
    _AddLineQueueX(82141,$vararg_buffer78);
    $120 = $pdot;
    HEAP8[$120>>0] = 46;
   } else {
    $121 = $p;
    $122 = ((($121)) + 8|0);
    $123 = $p;
    $124 = ((($123)) + 8|0);
    HEAP32[$vararg_buffer84>>2] = $122;
    $vararg_ptr87 = ((($vararg_buffer84)) + 4|0);
    HEAP32[$vararg_ptr87>>2] = $124;
    _AddLineQueueX(82166,$vararg_buffer84);
   }
   _AddLineQueue(82136);
   HEAP32[$vararg_buffer88>>2] = 81870;
   $vararg_ptr91 = ((($vararg_buffer88)) + 4|0);
   HEAP32[$vararg_ptr91>>2] = 360;
   _AddLineQueueX(82185,$vararg_buffer88);
  }
  $125 = $p;
  $126 = HEAP32[$125>>2]|0;
  $p = $126;
 }
 $127 = HEAP32[(416)>>2]|0;
 $128 = ($127|0)!=(0|0);
 if (!($128)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer92>>2] = 81870;
 $vararg_ptr95 = ((($vararg_buffer92)) + 4|0);
 HEAP32[$vararg_ptr95>>2] = 359;
 $vararg_ptr96 = ((($vararg_buffer92)) + 8|0);
 HEAP32[$vararg_ptr96>>2] = 136;
 $vararg_ptr97 = ((($vararg_buffer92)) + 12|0);
 HEAP32[$vararg_ptr97>>2] = 81878;
 _AddLineQueueX(82192,$vararg_buffer92);
 _AddLineQueueX(82205,$vararg_buffer98);
 HEAP32[$vararg_buffer100>>2] = 81870;
 $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
 HEAP32[$vararg_ptr103>>2] = 360;
 _AddLineQueueX(82222,$vararg_buffer100);
 _RunLineQueue();
 STACKTOP = sp;return;
}
function _pe_create_section_table() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bCreated = 0, $curr = 0, $i = 0, $objs = 0, $objtab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bCreated = 0;
 $0 = HEAP32[4884>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_SymFind(81791)|0);
 $objtab = $2;
 $3 = $objtab;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $bCreated = 1;
  $5 = HEAP8[(557)>>0]|0;
  $6 = (_CreateIntSegment(81791,81772,2,$5,1)|0);
  $objtab = $6;
  $7 = HEAP32[(588)>>2]|0;
  $8 = $objtab;
  $9 = ((($8)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$10>>2] = $7;
  $11 = $objtab;
  $12 = ((($11)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 68|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 & -8;
  $17 = $16 | 2;
  HEAP8[$14>>0] = $17;
 }
 $18 = $objtab;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 44|0);
 HEAP32[$21>>2] = 6;
 $22 = $bCreated;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(15420)>>2]|0;
 $curr = $24;
 while(1) {
  $25 = $curr;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $curr;
  $28 = ((($27)) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 48|0);
  HEAP32[$30>>2] = 10;
  $31 = $curr;
  $32 = ((($31)) + 60|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 44|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(2);
  $37 = $curr;
  $38 = ((($37)) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  L13: do {
   if ($36) {
    $40 = ((($39)) + 67|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 & 1;
    $43 = $42&255;
    $44 = ($43|0)!=(0);
    if (!($44)) {
     $45 = $curr;
     $46 = ((($45)) + 60|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ((($47)) + 65|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = ($50|0)==(64);
     if (!($51)) {
      $56 = $curr;
      $57 = ((($56)) + 60|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 52|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)!=(0|0);
      if (!($61)) {
       break;
      }
      $62 = $curr;
      $63 = ((($62)) + 60|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ((($64)) + 52|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (_strcmp($68,109557)|0);
      $70 = ($69|0)==(0);
      if (!($70)) {
       break;
      }
      $71 = $curr;
      $72 = ((($71)) + 60|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ((($73)) + 44|0);
      HEAP32[$74>>2] = 7;
      break;
     }
    }
    $52 = $curr;
    $53 = ((($52)) + 60|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 44|0);
    HEAP32[$55>>2] = 7;
   } else {
    $75 = ((($39)) + 44|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(0);
    if ($77) {
     $78 = $curr;
     $79 = ((($78)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (_memcmp($80,81798,5)|0);
     $82 = ($81|0)==(0);
     do {
      if ($82) {
       $83 = $curr;
       $84 = ((($83)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($85)) + 5|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = $87 << 24 >> 24;
       $89 = ($88|0)==(0);
       if (!($89)) {
        $90 = $curr;
        $91 = ((($90)) + 4|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ((($92)) + 5|0);
        $94 = HEAP8[$93>>0]|0;
        $95 = $94 << 24 >> 24;
        $96 = ($95|0)==(36);
        if (!($96)) {
         break;
        }
       }
       $97 = $curr;
       $98 = ((($97)) + 60|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ((($99)) + 44|0);
       HEAP32[$100>>2] = 9;
       break L13;
      }
     } while(0);
     $101 = $curr;
     $102 = ((($101)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (_strcmp($103,81804)|0);
     $105 = ($104|0)==(0);
     if ($105) {
      $106 = $curr;
      $107 = ((($106)) + 60|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($108)) + 44|0);
      HEAP32[$109>>2] = 8;
     }
    }
   }
  } while(0);
  $110 = $curr;
  $111 = ((($110)) + 64|0);
  $112 = HEAP32[$111>>2]|0;
  $curr = $112;
 }
 $i = 1;
 $objs = 0;
 while(1) {
  $113 = $i;
  $114 = ($113>>>0)<(7);
  if (!($114)) {
   break;
  }
  $115 = HEAP32[(15420)>>2]|0;
  $curr = $115;
  while(1) {
   $116 = $curr;
   $117 = ($116|0)!=(0|0);
   if (!($117)) {
    break;
   }
   $118 = $curr;
   $119 = ((($118)) + 60|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $i;
   $124 = (5952 + ($123<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($122|0)!=($125|0);
   if (!($126)) {
    $127 = $curr;
    $128 = ((($127)) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129|0)!=(0);
    if ($130) {
     label = 28;
     break;
    }
   }
   $133 = $curr;
   $134 = ((($133)) + 64|0);
   $135 = HEAP32[$134>>2]|0;
   $curr = $135;
  }
  if ((label|0) == 28) {
   label = 0;
   $131 = $objs;
   $132 = (($131) + 1)|0;
   $objs = $132;
  }
  $136 = $i;
  $137 = (($136) + 1)|0;
  $i = $137;
 }
 $138 = $objs;
 $139 = ($138|0)!=(0);
 if (!($139)) {
  STACKTOP = sp;return;
 }
 $140 = $objs;
 $141 = ($140*40)|0;
 $142 = $objtab;
 $143 = ((($142)) + 36|0);
 HEAP32[$143>>2] = $141;
 $144 = $objtab;
 $145 = ((($144)) + 36|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($146) + 40)|0;
 $148 = (_LclAlloc($147)|0);
 $149 = $objtab;
 $150 = ((($149)) + 60|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ((($151)) + 12|0);
 HEAP32[$152>>2] = $148;
 STACKTOP = sp;return;
}
function _compare_exp($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p2;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_strcmp($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _GetSegRelocs($pDst) {
 $pDst = $pDst|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0;
 var $curr = 0, $fixup = 0, $loc = 0, $switch = 0, $valueofs = 0, $valueseg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pDst;
 $count = 0;
 $1 = HEAP32[(15420)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $curr;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(5);
  L4: do {
   if (!($9)) {
    $10 = $curr;
    $11 = ((($10)) + 60|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $fixup = $14;
    while(1) {
     $15 = $fixup;
     $16 = ($15|0)!=(0|0);
     if (!($16)) {
      break L4;
     }
     $17 = $fixup;
     $18 = ((($17)) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $$off = (($19) + -8)|0;
     $switch = ($$off>>>0)<(3);
     do {
      if ($switch) {
       $20 = $fixup;
       $21 = ((($20)) + 36|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($22|0)!=(0|0);
       if ($23) {
        $24 = $fixup;
        $25 = ((($24)) + 36|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ((($26)) + 12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)!=(0|0);
        if ($29) {
         $30 = $fixup;
         $31 = ((($30)) + 36|0);
         $32 = HEAP32[$31>>2]|0;
         $33 = ((($32)) + 12|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($34)) + 60|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ((($36)) + 44|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ($38|0)==(5);
         if ($39) {
          break;
         }
        }
       }
       $40 = $count;
       $41 = (($40) + 1)|0;
       $count = $41;
       $42 = $0;
       $43 = ($42|0)!=(0|0);
       if ($43) {
        $44 = $fixup;
        $45 = ((($44)) + 12|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = $curr;
        $48 = ((($47)) + 60|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ((($49)) + 8|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $51 & 15;
        $53 = (($46) + ($52))|0;
        $loc = $53;
        $54 = $curr;
        $55 = ((($54)) + 60|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ((($56)) + 8|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $58 >>> 4;
        $60 = $59&65535;
        $valueseg = $60;
        $61 = $curr;
        $62 = ((($61)) + 60|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = HEAP32[$63>>2]|0;
        $65 = ($64|0)!=(0|0);
        if ($65) {
         $66 = $curr;
         $67 = ((($66)) + 60|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = HEAP32[$68>>2]|0;
         $70 = ((($69)) + 8|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = $71 & 15;
         $73 = $loc;
         $74 = (($73) + ($72))|0;
         $loc = $74;
         $75 = $curr;
         $76 = ((($75)) + 60|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = HEAP32[$77>>2]|0;
         $79 = ((($78)) + 8|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = $80 >> 4;
         $82 = $valueseg;
         $83 = $82&65535;
         $84 = (($83) + ($81))|0;
         $85 = $84&65535;
         $valueseg = $85;
        }
        $86 = $fixup;
        $87 = ((($86)) + 16|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)==(9);
        if ($89) {
         $90 = $loc;
         $91 = (($90) + 2)|0;
         $loc = $91;
        } else {
         $92 = $fixup;
         $93 = ((($92)) + 16|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = ($94|0)==(10);
         if ($95) {
          $96 = $loc;
          $97 = (($96) + 4)|0;
          $loc = $97;
         }
        }
        while(1) {
         $98 = $loc;
         $99 = ($98>>>0)>=(65536);
         $100 = $loc;
         if (!($99)) {
          break;
         }
         $101 = (($100) - 16)|0;
         $loc = $101;
         $102 = $valueseg;
         $103 = (($102) + 1)<<16>>16;
         $valueseg = $103;
        }
        $104 = $100&65535;
        $valueofs = $104;
        $105 = $valueofs;
        $106 = $0;
        $107 = ((($106)) + 2|0);
        $0 = $107;
        HEAP16[$106>>1] = $105;
        $108 = $valueseg;
        $109 = $0;
        $110 = ((($109)) + 2|0);
        $0 = $110;
        HEAP16[$109>>1] = $108;
       }
      }
     } while(0);
     $111 = $fixup;
     $112 = ((($111)) + 4|0);
     $113 = HEAP32[$112>>2]|0;
     $fixup = $113;
    }
   }
  } while(0);
  $114 = $curr;
  $115 = ((($114)) + 64|0);
  $116 = HEAP32[$115>>2]|0;
  $curr = $116;
 }
 $117 = $count;
 STACKTOP = sp;return ($117|0);
}
function _pe_set_values($cp) {
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $buffer = 0, $codebase = 0, $codesize = 0, $curr = 0, $database = 0, $datadir = 0, $datasize = 0, $falign = 0, $ff = 0, $fh = 0;
 var $i = 0, $idata_iat = 0, $idata_null = 0, $malign = 0, $mzhdr = 0, $objtab = 0, $pehdr = 0, $ph32 = 0, $ph64 = 0, $reloc = 0, $secname = 0, $section = 0, $size = 0, $sizehdr = 0, $sizeimg = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 112|0;
 $0 = $cp;
 $codebase = 0;
 $database = 0;
 $codesize = 0;
 $datasize = 0;
 $sizehdr = 0;
 $sizeimg = 0;
 $reloc = 0;
 $1 = (_SymFind(82485)|0);
 $mzhdr = $1;
 $2 = (_SymFind(81765)|0);
 $pehdr = $2;
 $3 = (_SymFind(81791)|0);
 $objtab = $3;
 $4 = HEAP32[(588)>>2]|0;
 $5 = $mzhdr;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $4;
 $8 = HEAP8[(557)>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(2);
 $11 = $pehdr;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 if ($10) {
  $ph64 = $15;
  $16 = $ph64;
  $17 = ((($16)) + 4|0);
  $18 = ((($17)) + 18|0);
  $19 = HEAP16[$18>>1]|0;
  $ff = $19;
 } else {
  $ph32 = $15;
  $20 = $ph32;
  $21 = ((($20)) + 4|0);
  $22 = ((($21)) + 18|0);
  $23 = HEAP16[$22>>1]|0;
  $ff = $23;
 }
 $24 = $ff;
 $25 = $24&65535;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $28 = HEAP8[(557)>>0]|0;
  $29 = (_CreateIntSegment(81804,82907,2,$28,1)|0);
  $reloc = $29;
  $30 = $reloc;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = HEAP32[(588)>>2]|0;
   $33 = $reloc;
   $34 = ((($33)) + 60|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$35>>2] = $32;
   $36 = $reloc;
   $37 = ((($36)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 68|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 & -8;
   $42 = $41 | 2;
   HEAP8[$39>>0] = $42;
   $43 = $reloc;
   $44 = ((($43)) + 60|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 44|0);
   HEAP32[$46>>2] = 8;
   $47 = $reloc;
   $48 = ((($47)) + 60|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 65|0);
   HEAP8[$50>>0] = 66;
   $51 = $reloc;
   $52 = ((($51)) + 36|0);
   HEAP32[$52>>2] = 8;
   $53 = $reloc;
   $54 = ((($53)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $reloc;
   $57 = ((($56)) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 16|0);
   HEAP32[$59>>2] = $55;
   $60 = $objtab;
   $61 = ((($60)) + 60|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $objtab;
   $66 = ((($65)) + 36|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($64) + ($67)|0);
   dest=$68; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $69 = $objtab;
   $70 = ((($69)) + 36|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 40)|0;
   HEAP32[$70>>2] = $72;
  }
 }
 $i = 0;
 while(1) {
  $73 = $i;
  $74 = ($73>>>0)<(7);
  if (!($74)) {
   break;
  }
  $75 = HEAP32[(15420)>>2]|0;
  $curr = $75;
  while(1) {
   $76 = $curr;
   $77 = ($76|0)!=(0|0);
   if (!($77)) {
    break;
   }
   $78 = $curr;
   $79 = ((($78)) + 60|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($80)) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $i;
   $84 = (5952 + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($82|0)==($85|0);
   if ($86) {
    $87 = $i;
    $88 = $curr;
    $89 = ((($88)) + 60|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 48|0);
    HEAP32[$91>>2] = $87;
   }
   $92 = $curr;
   $93 = ((($92)) + 64|0);
   $94 = HEAP32[$93>>2]|0;
   $curr = $94;
  }
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 _SortSegments(2);
 $97 = HEAP8[(557)>>0]|0;
 $98 = $97&255;
 $99 = ($98|0)==(2);
 if ($99) {
  $100 = $ph64;
  $101 = ((($100)) + 24|0);
  $102 = ((($101)) + 36|0);
  $103 = HEAP32[$102>>2]|0;
  $108 = $103;
 } else {
  $104 = $ph32;
  $105 = ((($104)) + 24|0);
  $106 = ((($105)) + 36|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $107;
 }
 $109 = (_get_bit($108)|0);
 $falign = $109;
 $110 = HEAP8[(557)>>0]|0;
 $111 = $110&255;
 $112 = ($111|0)==(2);
 if ($112) {
  $113 = $ph64;
  $114 = ((($113)) + 24|0);
  $115 = ((($114)) + 32|0);
  $116 = HEAP32[$115>>2]|0;
  $121 = $116;
 } else {
  $117 = $ph32;
  $118 = ((($117)) + 24|0);
  $119 = ((($118)) + 32|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120;
 }
 $malign = $121;
 $122 = HEAP32[(15420)>>2]|0;
 $curr = $122;
 $i = -1;
 while(1) {
  $123 = $curr;
  $124 = ($123|0)!=(0|0);
  if (!($124)) {
   break;
  }
  $125 = $curr;
  $126 = ((($125)) + 60|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($127)) + 48|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)==(10);
  if ($130) {
   label = 25;
  } else {
   $131 = $curr;
   $132 = ((($131)) + 60|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($133)) + 48|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $i;
   $137 = ($135|0)!=($136|0);
   if ($137) {
    label = 25;
   } else {
    $159 = $curr;
    $160 = ((($159)) + 60|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((($161)) + 66|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = 1 << $164;
    $align = $165;
    $166 = $0;
    $167 = ((($166)) + 1|0);
    HEAP8[$167>>0] = 0;
    $168 = $0;
    $169 = ((($168)) + 24|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $align;
    $172 = (($171) - 1)|0;
    $173 = (($170) + ($172))|0;
    $174 = $align;
    $175 = (($174) - 1)|0;
    $176 = $175 ^ -1;
    $177 = $173 & $176;
    $178 = $0;
    $179 = ((($178)) + 24|0);
    HEAP32[$179>>2] = $177;
   }
  }
  if ((label|0) == 25) {
   label = 0;
   $138 = $curr;
   $139 = ((($138)) + 60|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($140)) + 48|0);
   $142 = HEAP32[$141>>2]|0;
   $i = $142;
   $143 = $falign;
   $144 = $143&255;
   $145 = $0;
   $146 = ((($145)) + 1|0);
   HEAP8[$146>>0] = $144;
   $147 = $0;
   $148 = ((($147)) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $malign;
   $151 = (($150) - 1)|0;
   $152 = (($149) + ($151))|0;
   $153 = $malign;
   $154 = (($153) - 1)|0;
   $155 = $154 ^ -1;
   $156 = $152 & $155;
   $157 = $0;
   $158 = ((($157)) + 24|0);
   HEAP32[$158>>2] = $156;
  }
  $180 = $curr;
  $181 = $0;
  _CalcOffset($180,$181);
  $182 = $curr;
  $183 = ((($182)) + 64|0);
  $184 = HEAP32[$183>>2]|0;
  $curr = $184;
 }
 $185 = $reloc;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = $reloc;
  _pe_set_base_relocs($187);
  $188 = $reloc;
  $189 = ((($188)) + 60|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ((($190)) + 8|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $reloc;
  $194 = ((($193)) + 36|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($192) + ($195))|0;
  $197 = $0;
  $198 = ((($197)) + 24|0);
  HEAP32[$198>>2] = $196;
 }
 $199 = $0;
 $200 = ((($199)) + 24|0);
 $201 = HEAP32[$200>>2]|0;
 $sizeimg = $201;
 $202 = $mzhdr;
 $203 = ((($202)) + 36|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($204|0)>=(64);
 if ($205) {
  $206 = $pehdr;
  $207 = ((($206)) + 60|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ((($208)) + 32|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $mzhdr;
  $212 = ((($211)) + 60|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($213)) + 12|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($215)) + 60|0);
  HEAP32[$216>>2] = $210;
 }
 $217 = $pehdr;
 $218 = ((($217)) + 60|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = ((($219)) + 12|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ((($221)) + 4|0);
 $fh = $222;
 $223 = $objtab;
 $224 = ((($223)) + 36|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225>>>0) / 40)&-1;
 $227 = $226&65535;
 $228 = $fh;
 $229 = ((($228)) + 2|0);
 HEAP16[$229>>1] = $227;
 $230 = HEAP8[(557)>>0]|0;
 $231 = $230&255;
 $232 = ($231|0)==(2);
 if ($232) {
  $233 = $ph64;
  $234 = ((($233)) + 24|0);
  $235 = ((($234)) + 36|0);
  $236 = HEAP32[$235>>2]|0;
  $243 = $236;
 } else {
  $237 = $ph32;
  $238 = ((($237)) + 24|0);
  $239 = ((($238)) + 36|0);
  $240 = HEAP32[$239>>2]|0;
  $243 = $240;
 }
 $241 = $0;
 $242 = ((($241)) + 40|0);
 HEAP32[$242>>2] = $243;
 $244 = $objtab;
 $245 = ((($244)) + 60|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 $248 = HEAP32[$247>>2]|0;
 $section = $248;
 $249 = HEAP32[(15420)>>2]|0;
 $curr = $249;
 $i = -1;
 while(1) {
  $250 = $curr;
  $251 = ($250|0)!=(0|0);
  if (!($251)) {
   break;
  }
  $252 = $curr;
  $253 = ((($252)) + 60|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ((($254)) + 44|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ($256|0)==(6);
  if (!($257)) {
   $258 = $curr;
   $259 = ((($258)) + 36|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = ($260|0)==(0);
   if (!($261)) {
    $262 = $curr;
    $263 = ((($262)) + 60|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ((($264)) + 48|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = $i;
    $268 = ($266|0)!=($267|0);
    if ($268) {
     $269 = $curr;
     $270 = ((($269)) + 60|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ((($271)) + 48|0);
     $273 = HEAP32[$272>>2]|0;
     $i = $273;
     $274 = $curr;
     $275 = ((($274)) + 60|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ((($276)) + 60|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)!=(0|0);
     $280 = $curr;
     if ($279) {
      $281 = ((($280)) + 60|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ((($282)) + 60|0);
      $284 = HEAP32[$283>>2]|0;
      $286 = $284;
     } else {
      $285 = (_ConvertSectionName($280,0,$buffer)|0);
      $286 = $285;
     }
     $secname = $286;
     $287 = $section;
     $288 = $secname;
     (_strncpy($287,$288,8)|0);
     $289 = $curr;
     $290 = ((($289)) + 60|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ((($291)) + 44|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = ($293|0)!=(3);
     if ($294) {
      $295 = $curr;
      $296 = ((($295)) + 60|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ((($297)) + 32|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = $section;
      $301 = ((($300)) + 20|0);
      HEAP32[$301>>2] = $299;
     }
     $302 = $curr;
     $303 = ((($302)) + 60|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($304)) + 8|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = $section;
     $308 = ((($307)) + 12|0);
     HEAP32[$308>>2] = $306;
     $309 = $sizehdr;
     $310 = ($309|0)==(0);
     if ($310) {
      $311 = $curr;
      $312 = ((($311)) + 60|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = ((($313)) + 32|0);
      $315 = HEAP32[$314>>2]|0;
      $sizehdr = $315;
     }
    }
    $316 = $curr;
    $317 = (_pe_get_characteristics($316)|0);
    $318 = $section;
    $319 = ((($318)) + 36|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = $320 | $317;
    HEAP32[$319>>2] = $321;
    $322 = $curr;
    $323 = ((($322)) + 60|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ((($324)) + 44|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = ($326|0)!=(3);
    if ($327) {
     $328 = $curr;
     $329 = ((($328)) + 36|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = $section;
     $332 = ((($331)) + 16|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = (($333) + ($330))|0;
     HEAP32[$332>>2] = $334;
    }
    $335 = $curr;
    $336 = ((($335)) + 36|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $curr;
    $339 = ((($338)) + 60|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = ((($340)) + 8|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = $section;
    $344 = ((($343)) + 12|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($342) - ($345))|0;
    $347 = (($337) + ($346))|0;
    $348 = $section;
    $349 = ((($348)) + 8|0);
    HEAP32[$349>>2] = $347;
    $350 = $curr;
    $351 = ((($350)) + 64|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ($352|0)==(0|0);
    if ($353) {
     label = 51;
    } else {
     $354 = $curr;
     $355 = ((($354)) + 64|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = ((($356)) + 60|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = ((($358)) + 48|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $i;
     $362 = ($360|0)!=($361|0);
     if ($362) {
      label = 51;
     }
    }
    if ((label|0) == 51) {
     label = 0;
     $363 = $0;
     $364 = ((($363)) + 40|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) - 1)|0;
     $367 = $section;
     $368 = ((($367)) + 16|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = (($369) + ($366))|0;
     HEAP32[$368>>2] = $370;
     $371 = $0;
     $372 = ((($371)) + 40|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = (($373) - 1)|0;
     $375 = $374 ^ -1;
     $376 = $section;
     $377 = ((($376)) + 16|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = $378 & $375;
     HEAP32[$377>>2] = $379;
     $380 = $section;
     $381 = ((($380)) + 36|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = $382 & 536870912;
     $384 = ($383|0)!=(0);
     if ($384) {
      $385 = $codebase;
      $386 = ($385|0)==(0);
      if ($386) {
       $387 = $section;
       $388 = ((($387)) + 12|0);
       $389 = HEAP32[$388>>2]|0;
       $codebase = $389;
      }
      $390 = $section;
      $391 = ((($390)) + 16|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = $codesize;
      $394 = (($393) + ($392))|0;
      $codesize = $394;
     }
     $395 = $section;
     $396 = ((($395)) + 36|0);
     $397 = HEAP32[$396>>2]|0;
     $398 = $397 & 64;
     $399 = ($398|0)!=(0);
     if ($399) {
      $400 = $database;
      $401 = ($400|0)==(0);
      if ($401) {
       $402 = $section;
       $403 = ((($402)) + 12|0);
       $404 = HEAP32[$403>>2]|0;
       $database = $404;
      }
      $405 = $section;
      $406 = ((($405)) + 16|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = $datasize;
      $409 = (($408) + ($407))|0;
      $datasize = $409;
     }
    }
    $410 = $curr;
    $411 = ((($410)) + 64|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ($412|0)!=(0|0);
    if ($413) {
     $414 = $curr;
     $415 = ((($414)) + 64|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = ((($416)) + 60|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = ((($418)) + 48|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = $i;
     $422 = ($420|0)!=($421|0);
     if ($422) {
      $423 = $section;
      $424 = ((($423)) + 40|0);
      $section = $424;
     }
    }
   }
  }
  $425 = $curr;
  $426 = ((($425)) + 64|0);
  $427 = HEAP32[$426>>2]|0;
  $curr = $427;
 }
 $428 = HEAP32[(428)>>2]|0;
 $429 = ($428|0)!=(0|0);
 do {
  if ($429) {
   $430 = HEAP8[(557)>>0]|0;
   $431 = $430&255;
   $432 = ($431|0)==(2);
   $433 = HEAP32[(428)>>2]|0;
   $434 = ((($433)) + 12|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = ((($435)) + 60|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = ((($437)) + 8|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = HEAP32[(428)>>2]|0;
   $441 = ((($440)) + 8|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = (($439) + ($442))|0;
   if ($432) {
    $444 = $ph64;
    $445 = ((($444)) + 24|0);
    $446 = ((($445)) + 16|0);
    HEAP32[$446>>2] = $443;
    break;
   } else {
    $447 = $ph32;
    $448 = ((($447)) + 24|0);
    $449 = ((($448)) + 16|0);
    HEAP32[$449>>2] = $443;
    break;
   }
  } else {
   _EmitWarn(2,203,$vararg_buffer);
  }
 } while(0);
 $450 = HEAP8[(557)>>0]|0;
 $451 = $450&255;
 $452 = ($451|0)==(2);
 $453 = $sizeimg;
 if ($452) {
  $454 = $ph64;
  $455 = ((($454)) + 24|0);
  $456 = ((($455)) + 32|0);
  $457 = HEAP32[$456>>2]|0;
  $458 = (($453) + ($457))|0;
  $459 = (($458) - 1)|0;
  $460 = $ph64;
  $461 = ((($460)) + 24|0);
  $462 = ((($461)) + 32|0);
  $463 = HEAP32[$462>>2]|0;
  $464 = (($463) - 1)|0;
  $465 = $464 ^ -1;
  $466 = $459 & $465;
  $sizeimg = $466;
  $467 = $codesize;
  $468 = $ph64;
  $469 = ((($468)) + 24|0);
  $470 = ((($469)) + 4|0);
  HEAP32[$470>>2] = $467;
  $471 = $codebase;
  $472 = $ph64;
  $473 = ((($472)) + 24|0);
  $474 = ((($473)) + 20|0);
  HEAP32[$474>>2] = $471;
  $475 = $sizeimg;
  $476 = $ph64;
  $477 = ((($476)) + 24|0);
  $478 = ((($477)) + 56|0);
  HEAP32[$478>>2] = $475;
  $479 = $sizehdr;
  $480 = $ph64;
  $481 = ((($480)) + 24|0);
  $482 = ((($481)) + 60|0);
  HEAP32[$482>>2] = $479;
  $483 = $ph64;
  $484 = ((($483)) + 24|0);
  $485 = ((($484)) + 112|0);
  $datadir = $485;
 } else {
  $486 = $ph32;
  $487 = ((($486)) + 24|0);
  $488 = ((($487)) + 32|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = (($453) + ($489))|0;
  $491 = (($490) - 1)|0;
  $492 = $ph32;
  $493 = ((($492)) + 24|0);
  $494 = ((($493)) + 32|0);
  $495 = HEAP32[$494>>2]|0;
  $496 = (($495) - 1)|0;
  $497 = $496 ^ -1;
  $498 = $491 & $497;
  $sizeimg = $498;
  $499 = $codesize;
  $500 = $ph32;
  $501 = ((($500)) + 24|0);
  $502 = ((($501)) + 4|0);
  HEAP32[$502>>2] = $499;
  $503 = $datasize;
  $504 = $ph32;
  $505 = ((($504)) + 24|0);
  $506 = ((($505)) + 8|0);
  HEAP32[$506>>2] = $503;
  $507 = $codebase;
  $508 = $ph32;
  $509 = ((($508)) + 24|0);
  $510 = ((($509)) + 20|0);
  HEAP32[$510>>2] = $507;
  $511 = $database;
  $512 = $ph32;
  $513 = ((($512)) + 24|0);
  $514 = ((($513)) + 24|0);
  HEAP32[$514>>2] = $511;
  $515 = $sizeimg;
  $516 = $ph32;
  $517 = ((($516)) + 24|0);
  $518 = ((($517)) + 56|0);
  HEAP32[$518>>2] = $515;
  $519 = $sizehdr;
  $520 = $ph32;
  $521 = ((($520)) + 24|0);
  $522 = ((($521)) + 60|0);
  HEAP32[$522>>2] = $519;
  $523 = $ph32;
  $524 = ((($523)) + 24|0);
  $525 = ((($524)) + 96|0);
  $datadir = $525;
 }
 $526 = (_SymFind(82241)|0);
 $curr = $526;
 $527 = ($526|0)!=(0|0);
 if ($527) {
  $528 = $curr;
  $529 = ((($528)) + 60|0);
  $530 = HEAP32[$529>>2]|0;
  $531 = ((($530)) + 8|0);
  $532 = HEAP32[$531>>2]|0;
  $533 = $datadir;
  HEAP32[$533>>2] = $532;
  $534 = $curr;
  $535 = ((($534)) + 36|0);
  $536 = HEAP32[$535>>2]|0;
  $537 = $datadir;
  $538 = ((($537)) + 4|0);
  HEAP32[$538>>2] = $536;
 }
 $539 = (_SymFind(82913)|0);
 $curr = $539;
 $540 = ($539|0)!=(0|0);
 if ($540) {
  $541 = (_SymFind(82922)|0);
  $idata_null = $541;
  $542 = (_SymFind(82931)|0);
  $idata_iat = $542;
  $543 = $idata_null;
  $544 = ((($543)) + 60|0);
  $545 = HEAP32[$544>>2]|0;
  $546 = ((($545)) + 8|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = $idata_null;
  $549 = ((($548)) + 36|0);
  $550 = HEAP32[$549>>2]|0;
  $551 = (($547) + ($550))|0;
  $552 = $curr;
  $553 = ((($552)) + 60|0);
  $554 = HEAP32[$553>>2]|0;
  $555 = ((($554)) + 8|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = (($551) - ($556))|0;
  $size = $557;
  $558 = $curr;
  $559 = ((($558)) + 60|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = ((($560)) + 8|0);
  $562 = HEAP32[$561>>2]|0;
  $563 = $datadir;
  $564 = ((($563)) + 8|0);
  HEAP32[$564>>2] = $562;
  $565 = $size;
  $566 = $datadir;
  $567 = ((($566)) + 8|0);
  $568 = ((($567)) + 4|0);
  HEAP32[$568>>2] = $565;
  $569 = $idata_iat;
  $570 = ((($569)) + 60|0);
  $571 = HEAP32[$570>>2]|0;
  $572 = ((($571)) + 8|0);
  $573 = HEAP32[$572>>2]|0;
  $574 = $datadir;
  $575 = ((($574)) + 96|0);
  HEAP32[$575>>2] = $573;
  $576 = $idata_iat;
  $577 = ((($576)) + 36|0);
  $578 = HEAP32[$577>>2]|0;
  $579 = $datadir;
  $580 = ((($579)) + 96|0);
  $581 = ((($580)) + 4|0);
  HEAP32[$581>>2] = $578;
 }
 $582 = (_SymFind(81798)|0);
 $curr = $582;
 $583 = ($582|0)!=(0|0);
 if ($583) {
  $584 = $curr;
  $585 = ((($584)) + 60|0);
  $586 = HEAP32[$585>>2]|0;
  $587 = ((($586)) + 8|0);
  $588 = HEAP32[$587>>2]|0;
  $589 = $datadir;
  $590 = ((($589)) + 16|0);
  HEAP32[$590>>2] = $588;
  $591 = $curr;
  $592 = ((($591)) + 36|0);
  $593 = HEAP32[$592>>2]|0;
  $594 = $datadir;
  $595 = ((($594)) + 16|0);
  $596 = ((($595)) + 4|0);
  HEAP32[$596>>2] = $593;
 }
 $597 = (_SymFind(81804)|0);
 $curr = $597;
 $598 = ($597|0)!=(0|0);
 if ($598) {
  $599 = $curr;
  $600 = ((($599)) + 60|0);
  $601 = HEAP32[$600>>2]|0;
  $602 = ((($601)) + 8|0);
  $603 = HEAP32[$602>>2]|0;
  $604 = $datadir;
  $605 = ((($604)) + 40|0);
  HEAP32[$605>>2] = $603;
  $606 = $curr;
  $607 = ((($606)) + 36|0);
  $608 = HEAP32[$607>>2]|0;
  $609 = $datadir;
  $610 = ((($609)) + 40|0);
  $611 = ((($610)) + 4|0);
  HEAP32[$611>>2] = $608;
 }
 $612 = (_SymFind(82940)|0);
 $curr = $612;
 $613 = ($612|0)!=(0|0);
 if ($613) {
  $614 = $curr;
  $615 = ((($614)) + 60|0);
  $616 = HEAP32[$615>>2]|0;
  $617 = ((($616)) + 8|0);
  $618 = HEAP32[$617>>2]|0;
  $619 = $datadir;
  $620 = ((($619)) + 72|0);
  HEAP32[$620>>2] = $618;
  $621 = $curr;
  $622 = ((($621)) + 36|0);
  $623 = HEAP32[$622>>2]|0;
  $624 = $datadir;
  $625 = ((($624)) + 72|0);
  $626 = ((($625)) + 4|0);
  HEAP32[$626>>2] = $623;
 }
 $627 = HEAP8[(557)>>0]|0;
 $628 = $627&255;
 $629 = ($628|0)==(2);
 if (!($629)) {
  $669 = HEAP8[(557)>>0]|0;
  $670 = $669&255;
  $671 = ($670|0)==(2);
  if ($671) {
   $672 = $ph64;
   $673 = ((($672)) + 24|0);
   $674 = ((($673)) + 24|0);
   $675 = $674;
   $676 = $675;
   $677 = HEAP32[$676>>2]|0;
   $678 = (($675) + 4)|0;
   $679 = $678;
   $680 = HEAP32[$679>>2]|0;
   $687 = $677;$688 = $680;
  } else {
   $681 = $ph32;
   $682 = ((($681)) + 24|0);
   $683 = ((($682)) + 28|0);
   $684 = HEAP32[$683>>2]|0;
   $687 = $684;$688 = 0;
  }
  $685 = $0;
  $686 = ((($685)) + 32|0);
  HEAP32[$686>>2] = $687;
  STACKTOP = sp;return;
 }
 $630 = (_SymFind(99805)|0);
 $curr = $630;
 $631 = ($630|0)!=(0|0);
 if ($631) {
  $632 = $curr;
  $633 = ((($632)) + 60|0);
  $634 = HEAP32[$633>>2]|0;
  $635 = ((($634)) + 8|0);
  $636 = HEAP32[$635>>2]|0;
  $637 = $datadir;
  $638 = ((($637)) + 24|0);
  HEAP32[$638>>2] = $636;
  $639 = $curr;
  $640 = ((($639)) + 36|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = $datadir;
  $643 = ((($642)) + 24|0);
  $644 = ((($643)) + 4|0);
  HEAP32[$644>>2] = $641;
 }
 $645 = HEAP8[(557)>>0]|0;
 $646 = $645&255;
 $647 = ($646|0)==(2);
 if ($647) {
  $648 = $ph64;
  $649 = ((($648)) + 24|0);
  $650 = ((($649)) + 24|0);
  $651 = $650;
  $652 = $651;
  $653 = HEAP32[$652>>2]|0;
  $654 = (($651) + 4)|0;
  $655 = $654;
  $656 = HEAP32[$655>>2]|0;
  $665 = $653;$668 = $656;
 } else {
  $657 = $ph32;
  $658 = ((($657)) + 24|0);
  $659 = ((($658)) + 28|0);
  $660 = HEAP32[$659>>2]|0;
  $665 = $660;$668 = 0;
 }
 $661 = $0;
 $662 = ((($661)) + 32|0);
 $663 = $662;
 $664 = $663;
 HEAP32[$664>>2] = $665;
 $666 = (($663) + 4)|0;
 $667 = $666;
 HEAP32[$667>>2] = $668;
 STACKTOP = sp;return;
}
function _CalcOffset($curr,$cp) {
 $curr = $curr|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $alignbytes = 0, $grp = 0, $offset = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $curr;
 $1 = $cp;
 $2 = $0;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(5);
 $8 = $0;
 $9 = ((($8)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 if ($7) {
  $11 = ((($10)) + 56|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = $13 << 4;
  $15 = $0;
  $16 = ((($15)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = $14;
  STACKTOP = sp;return;
 }
 $19 = ((($10)) + 67|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20&255) >>> 1;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)!=(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $grp = $27;
 $28 = $1;
 $29 = ((($28)) + 1|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $0;
 $33 = ((($32)) + 60|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 66|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ($31|0)>($37|0);
 if ($38) {
  $39 = $1;
  $40 = ((($39)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = 1 << $42;
  $align = $43;
 } else {
  $44 = $0;
  $45 = ((($44)) + 60|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 66|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = 1 << $49;
  $align = $50;
 }
 $51 = $1;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $align;
 $55 = (($54) - 1)|0;
 $56 = (($53) + ($55))|0;
 $57 = $align;
 $58 = (0 - ($57))|0;
 $59 = $56 & $58;
 $60 = $1;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($59) - ($62))|0;
 $alignbytes = $63;
 $64 = $alignbytes;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + ($64))|0;
 HEAP32[$66>>2] = $68;
 $69 = $grp;
 $70 = ($69|0)==(0|0);
 do {
  if ($70) {
   $71 = $1;
   $72 = ((($71)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $1;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($73) - ($76))|0;
   $offset = $77;
  } else {
   $78 = HEAP32[(524)>>2]|0;
   $79 = ($78|0)==(2);
   if ($79) {
    $80 = $1;
    $81 = ((($80)) + 24|0);
    $82 = HEAP32[$81>>2]|0;
    $offset = $82;
    break;
   }
   $83 = $grp;
   $84 = ((($83)) + 36|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0);
   if ($86) {
    $87 = $1;
    $88 = ((($87)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $1;
    $91 = ((($90)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($89) - ($92))|0;
    $94 = $grp;
    $95 = ((($94)) + 8|0);
    HEAP32[$95>>2] = $93;
    $offset = 0;
    break;
   } else {
    $96 = $grp;
    $97 = ((($96)) + 36|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $alignbytes;
    $100 = (($98) + ($99))|0;
    $offset = $100;
    break;
   }
  }
 } while(0);
 $101 = $1;
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = ($103|0)==(0);
 $105 = $grp;
 $106 = ($105|0)!=(0|0);
 $or$cond = $104 & $106;
 do {
  if ($or$cond) {
   $107 = $grp;
   $108 = HEAP32[(588)>>2]|0;
   $109 = ($107|0)!=($108|0);
   if (!($109)) {
    $110 = $0;
    $111 = ((($110)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (_strchr($112,36)|0);
    $114 = ($113|0)!=(0|0);
    if (!($114)) {
     break;
    }
   }
   $115 = $0;
   $116 = ((($115)) + 60|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 4|0);
   HEAP32[$118>>2] = 0;
  }
 } while(0);
 $119 = $1;
 $120 = ((($119)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $0;
 $123 = ((($122)) + 60|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 32|0);
 HEAP32[$125>>2] = $121;
 $126 = $offset;
 $127 = $0;
 $128 = ((($127)) + 60|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 8|0);
 HEAP32[$130>>2] = $126;
 $131 = HEAP32[(524)>>2]|0;
 $132 = ($131|0)==(0);
 $133 = $0;
 $134 = ((($133)) + 36|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $0;
 $137 = ((($136)) + 60|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ((($138)) + 4|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (($135) - ($140))|0;
 $142 = $1;
 if ($132) {
  $143 = ((($142)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + ($141))|0;
  HEAP32[$143>>2] = $145;
  $146 = $1;
  $147 = HEAP8[$146>>0]|0;
  $148 = ($147<<24>>24)!=(0);
  if ($148) {
   $149 = $0;
   $150 = ((($149)) + 60|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($151)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $1;
   $155 = ((($154)) + 20|0);
   HEAP32[$155>>2] = $153;
  }
  $156 = $1;
  $157 = ((($156)) + 12|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158|0)==(-1);
  if ($159) {
   $160 = $offset;
   $161 = $1;
   $162 = ((($161)) + 12|0);
   HEAP32[$162>>2] = $160;
   $163 = $0;
   $164 = $1;
   $165 = ((($164)) + 16|0);
   HEAP32[$165>>2] = $163;
  }
 } else {
  $166 = ((($142)) + 24|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + ($141))|0;
  HEAP32[$166>>2] = $168;
  $169 = $0;
  $170 = ((($169)) + 60|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ((($171)) + 44|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($173|0)==(3);
  if (!($174)) {
   $175 = $0;
   $176 = ((($175)) + 36|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $0;
   $179 = ((($178)) + 60|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($177) - ($182))|0;
   $184 = $1;
   $185 = ((($184)) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = (($186) + ($183))|0;
   HEAP32[$185>>2] = $187;
  }
 }
 $188 = $0;
 $189 = ((($188)) + 36|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $offset;
 $192 = (($191) + ($190))|0;
 $offset = $192;
 $193 = $grp;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = $offset;
  $196 = $grp;
  $197 = ((($196)) + 36|0);
  HEAP32[$197>>2] = $195;
  $198 = $grp;
  $199 = ((($198)) + 36|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ($200>>>0)>(65536);
  if ($201) {
   $202 = $grp;
   $203 = ((($202)) + 28|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = ($205|0)==(0);
   if ($206) {
    $207 = $grp;
    $208 = ((($207)) + 4|0);
    $209 = HEAP32[$208>>2]|0;
    HEAP32[$vararg_buffer>>2] = $209;
    _EmitWarn(2,275,$vararg_buffer);
   }
  }
 }
 $210 = $1;
 HEAP8[$210>>0] = 0;
 STACKTOP = sp;return;
}
function _DoFixup($curr,$cp) {
 $curr = $curr|0;
 $cp = $cp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $codeptr = 0, $fixup = 0, $namlen = 0, $offset = 0, $seg = 0, $segfirst = 0, $tmp = 0, $value = 0, $value64 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $codeptr = sp + 52|0;
 $value64 = sp;
 $1 = $curr;
 $2 = $cp;
 $3 = $1;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(5);
 if ($8) {
  $0 = 0;
  $565 = $0;
  STACKTOP = sp;return ($565|0);
 }
 $9 = $1;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $fixup = $13;
 while(1) {
  $14 = $fixup;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = ((($16)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $fixup;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $1;
  $25 = ((($24)) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($23) - ($28))|0;
  $30 = (($20) + ($29)|0);
  HEAP32[$codeptr>>2] = $30;
  $31 = $fixup;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  L8: do {
   if ($34) {
    $35 = $fixup;
    $36 = ((($35)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)!=(0|0);
    if (!($40)) {
     $41 = $fixup;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($43)) + 24|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = ($45&65535) >>> 6;
     $47 = $46 & 1;
     $48 = $47&255;
     $49 = $48&255;
     $50 = ($49|0)!=(0);
     if (!($50)) {
      label = 28;
      break;
     }
    }
    $51 = $fixup;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 24|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = ($55&65535) >>> 6;
    $57 = $56 & 1;
    $58 = $57&255;
    $59 = ($58<<24>>24)!=(0);
    $60 = $fixup;
    if ($59) {
     $61 = ((($60)) + 28|0);
     $62 = HEAP32[$61>>2]|0;
     $seg = $62;
     $offset = 0;
    } else {
     $63 = ((($60)) + 36|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $seg = $66;
     $67 = $fixup;
     $68 = ((($67)) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $offset = $71;
    }
    $72 = $fixup;
    $73 = ((($72)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    switch ($74|0) {
    case 12:  {
     $75 = $fixup;
     $76 = ((($75)) + 8|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $offset;
     $79 = (($77) + ($78))|0;
     $80 = $seg;
     $81 = ((($80)) + 60|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($79) + ($84))|0;
     $86 = $2;
     $87 = ((($86)) + 20|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($85) - ($88))|0;
     $value = $89;
     break L8;
     break;
    }
    case 13:  {
     $90 = $fixup;
     $91 = ((($90)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $offset;
     $94 = (($92) + ($93))|0;
     $95 = $seg;
     $96 = ((($95)) + 60|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($97)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($94) - ($99))|0;
     $value = $100;
     $101 = $seg;
     $102 = ((($101)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (_strchr($103,36)|0);
     $tmp = $104;
     $105 = ($104|0)!=(0|0);
     if (!($105)) {
      break L8;
     }
     $106 = $tmp;
     $107 = $seg;
     $108 = ((($107)) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $106;
     $111 = $109;
     $112 = (($110) - ($111))|0;
     $namlen = $112;
     $113 = HEAP32[(15420)>>2]|0;
     $segfirst = $113;
     while(1) {
      $114 = $segfirst;
      $115 = ($114|0)!=(0|0);
      if (!($115)) {
       break L8;
      }
      $116 = $segfirst;
      $117 = ((($116)) + 44|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = $namlen;
      $121 = ($119|0)==($120|0);
      if ($121) {
       $122 = $segfirst;
       $123 = ((($122)) + 4|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = $seg;
       $126 = ((($125)) + 4|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $namlen;
       $129 = (_memcmp($124,$127,$128)|0);
       $130 = ($129|0)==(0);
       if ($130) {
        break;
       }
      }
      $148 = $segfirst;
      $149 = ((($148)) + 64|0);
      $150 = HEAP32[$149>>2]|0;
      $segfirst = $150;
     }
     $131 = $fixup;
     $132 = ((($131)) + 8|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $offset;
     $135 = (($133) + ($134))|0;
     $136 = $seg;
     $137 = ((($136)) + 60|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ((($138)) + 8|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = (($135) + ($140))|0;
     $142 = $segfirst;
     $143 = ((($142)) + 60|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ((($144)) + 8|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($141) - ($146))|0;
     $value = $147;
     break L8;
     break;
    }
    case 3: case 2: case 1:  {
     $151 = $seg;
     $152 = ((($151)) + 60|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ((($153)) + 8|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = $fixup;
     $157 = ((($156)) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($155) + ($158))|0;
     $160 = $offset;
     $161 = (($159) + ($160))|0;
     $value = $161;
     break L8;
     break;
    }
    default: {
     $162 = $seg;
     $163 = ((($162)) + 60|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)!=(0|0);
     if ($166) {
      $167 = $fixup;
      $168 = ((($167)) + 28|0);
      $169 = HEAP8[$168>>0]|0;
      $170 = $169 << 24 >> 24;
      $171 = ($170|0)!=(0);
      if ($171) {
       $172 = $seg;
       $173 = ((($172)) + 60|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = HEAP32[$174>>2]|0;
       $176 = ((($175)) + 8|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = $177 & 15;
       $179 = $seg;
       $180 = ((($179)) + 60|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ((($181)) + 8|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (($178) + ($183))|0;
       $185 = $fixup;
       $186 = ((($185)) + 8|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($184) + ($187))|0;
       $189 = $offset;
       $190 = (($188) + ($189))|0;
       $value = $190;
       $191 = HEAP32[(524)>>2]|0;
       $192 = ($191|0)==(2);
       if (!($192)) {
        break L8;
       }
       $193 = $1;
       $194 = ((($193)) + 60|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = ((($195)) + 64|0);
       $197 = HEAP8[$196>>0]|0;
       $198 = $197&255;
       $199 = ($198|0)==(2);
       if ($199) {
        $200 = $value;
        $201 = $2;
        $202 = ((($201)) + 32|0);
        $203 = $202;
        $204 = $203;
        $205 = HEAP32[$204>>2]|0;
        $206 = (($203) + 4)|0;
        $207 = $206;
        $208 = HEAP32[$207>>2]|0;
        $209 = (_i64Add(($200|0),0,($205|0),($208|0))|0);
        $210 = tempRet0;
        $211 = $value64;
        $212 = $211;
        HEAP32[$212>>2] = $209;
        $213 = (($211) + 4)|0;
        $214 = $213;
        HEAP32[$214>>2] = $210;
       }
       $215 = $2;
       $216 = ((($215)) + 32|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $value;
       $219 = (($218) + ($217))|0;
       $value = $219;
       break L8;
      }
     }
     $220 = $seg;
     $221 = ((($220)) + 60|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ((($222)) + 8|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = $224 & 15;
     $226 = $fixup;
     $227 = ((($226)) + 8|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (($225) + ($228))|0;
     $230 = $offset;
     $231 = (($229) + ($230))|0;
     $value = $231;
     break L8;
    }
    }
   } else {
    label = 28;
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
   $seg = 0;
   $value = 0;
  }
  $232 = $fixup;
  $233 = ((($232)) + 16|0);
  $234 = HEAP32[$233>>2]|0;
  L41: do {
   switch ($234|0) {
   case 1:  {
    $235 = $value;
    $236 = $fixup;
    $237 = ((($236)) + 12|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = $1;
    $240 = ((($239)) + 60|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = ((($241)) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($238) + ($243))|0;
    $245 = (($235) - ($244))|0;
    $246 = (($245) - 1)|0;
    $247 = $246 & 255;
    $248 = HEAP32[$codeptr>>2]|0;
    $249 = HEAP8[$248>>0]|0;
    $250 = $249&255;
    $251 = (($250) + ($247))|0;
    $252 = $251&255;
    HEAP8[$248>>0] = $252;
    break;
   }
   case 2:  {
    $253 = $value;
    $254 = $fixup;
    $255 = ((($254)) + 12|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = $1;
    $258 = ((($257)) + 60|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = ((($259)) + 8|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = (($256) + ($261))|0;
    $263 = (($253) - ($262))|0;
    $264 = (($263) - 2)|0;
    $265 = $264 & 65535;
    $266 = HEAP32[$codeptr>>2]|0;
    $267 = HEAP16[$266>>1]|0;
    $268 = $267&65535;
    $269 = (($268) + ($265))|0;
    $270 = $269&65535;
    HEAP16[$266>>1] = $270;
    break;
   }
   case 3:  {
    $271 = $1;
    $272 = ((($271)) + 60|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ((($273)) + 64|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = $275&255;
    $277 = ($276|0)==(2);
    if ($277) {
     $278 = $fixup;
     $279 = ((($278)) + 24|0);
     $280 = HEAP8[$279>>0]|0;
     $281 = $280&255;
     $282 = (($281) - 4)|0;
     $283 = $fixup;
     $284 = ((($283)) + 12|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = (($285) + ($282))|0;
     HEAP32[$284>>2] = $286;
    }
    $287 = $value;
    $288 = $fixup;
    $289 = ((($288)) + 12|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $1;
    $292 = ((($291)) + 60|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ((($293)) + 8|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($290) + ($295))|0;
    $297 = (($287) - ($296))|0;
    $298 = (($297) - 4)|0;
    $299 = HEAP32[$codeptr>>2]|0;
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) + ($298))|0;
    HEAP32[$299>>2] = $301;
    break;
   }
   case 4:  {
    $302 = $value;
    $303 = $302 & 255;
    $304 = $303&255;
    $305 = HEAP32[$codeptr>>2]|0;
    HEAP8[$305>>0] = $304;
    break;
   }
   case 5:  {
    $306 = $value;
    $307 = $306 & 65535;
    $308 = $307&65535;
    $309 = HEAP32[$codeptr>>2]|0;
    HEAP16[$309>>1] = $308;
    break;
   }
   case 6:  {
    $310 = $value;
    $311 = HEAP32[$codeptr>>2]|0;
    HEAP32[$311>>2] = $310;
    break;
   }
   case 12:  {
    $312 = $value;
    $313 = HEAP32[$codeptr>>2]|0;
    HEAP32[$313>>2] = $312;
    break;
   }
   case 13:  {
    $314 = $value;
    $315 = HEAP32[$codeptr>>2]|0;
    HEAP32[$315>>2] = $314;
    break;
   }
   case 7:  {
    $316 = HEAP32[(524)>>2]|0;
    $317 = ($316|0)==(2);
    if ($317) {
     $318 = $1;
     $319 = ((($318)) + 60|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ((($320)) + 64|0);
     $322 = HEAP8[$321>>0]|0;
     $323 = $322&255;
     $324 = ($323|0)==(2);
     if ($324) {
      $325 = $value64;
      $326 = $325;
      $327 = HEAP32[$326>>2]|0;
      $328 = (($325) + 4)|0;
      $329 = $328;
      $330 = HEAP32[$329>>2]|0;
      $331 = HEAP32[$codeptr>>2]|0;
      $332 = $331;
      $333 = $332;
      HEAP32[$333>>2] = $327;
      $334 = (($332) + 4)|0;
      $335 = $334;
      HEAP32[$335>>2] = $330;
      break L41;
     }
    }
    $336 = $value;
    $337 = HEAP32[$codeptr>>2]|0;
    $338 = $337;
    $339 = $338;
    HEAP32[$339>>2] = $336;
    $340 = (($338) + 4)|0;
    $341 = $340;
    HEAP32[$341>>2] = 0;
    break;
   }
   case 11:  {
    $342 = $value;
    $343 = $342 >>> 8;
    $344 = $343 & 255;
    $345 = $344&255;
    $346 = HEAP32[$codeptr>>2]|0;
    HEAP8[$346>>0] = $345;
    break;
   }
   case 8:  {
    $347 = $fixup;
    $348 = ((($347)) + 36|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = ($349|0)!=(0|0);
    if ($350) {
     $351 = $fixup;
     $352 = ((($351)) + 36|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = ((($353)) + 16|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = ($355|0)==(3);
     if ($356) {
      $357 = $fixup;
      $358 = ((($357)) + 36|0);
      $359 = HEAP32[$358>>2]|0;
      $360 = ((($359)) + 60|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ((($361)) + 44|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = ($363|0)==(5);
      if ($364) {
       $365 = $fixup;
       $366 = ((($365)) + 36|0);
       $367 = HEAP32[$366>>2]|0;
       $368 = ((($367)) + 60|0);
       $369 = HEAP32[$368>>2]|0;
       $370 = ((($369)) + 56|0);
       $371 = HEAP16[$370>>1]|0;
       $372 = HEAP32[$codeptr>>2]|0;
       HEAP16[$372>>1] = $371;
       break L41;
      }
     }
    }
    $373 = HEAP32[(524)>>2]|0;
    $374 = ($373|0)==(1);
    if ($374) {
     $375 = $fixup;
     $376 = ((($375)) + 36|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = ((($377)) + 16|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = ($379|0)==(4);
     $381 = $fixup;
     $382 = ((($381)) + 36|0);
     $383 = HEAP32[$382>>2]|0;
     if ($380) {
      $seg = $383;
      $384 = $seg;
      $385 = ((($384)) + 8|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = $386 >> 4;
      $388 = $387&65535;
      $389 = HEAP32[$codeptr>>2]|0;
      HEAP16[$389>>1] = $388;
      break L41;
     }
     $390 = ((($383)) + 16|0);
     $391 = HEAP32[$390>>2]|0;
     $392 = ($391|0)==(3);
     $393 = $fixup;
     if ($392) {
      $394 = ((($393)) + 36|0);
      $395 = HEAP32[$394>>2]|0;
      $seg = $395;
      $396 = $seg;
      $397 = ((($396)) + 60|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = ((($398)) + 8|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = $seg;
      $402 = ((($401)) + 60|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = HEAP32[$403>>2]|0;
      $405 = ($404|0)!=(0|0);
      if ($405) {
       $406 = $seg;
       $407 = ((($406)) + 60|0);
       $408 = HEAP32[$407>>2]|0;
       $409 = HEAP32[$408>>2]|0;
       $410 = ((($409)) + 8|0);
       $411 = HEAP32[$410>>2]|0;
       $413 = $411;
      } else {
       $413 = 0;
      }
      $412 = (($400) + ($413))|0;
      $414 = $412 >>> 4;
      $415 = $414&65535;
      $416 = HEAP32[$codeptr>>2]|0;
      HEAP16[$416>>1] = $415;
      break L41;
     } else {
      $417 = ((($393)) + 28|0);
      $418 = HEAP8[$417>>0]|0;
      $419 = $418 << 24 >> 24;
      $420 = ($419|0)==(1);
      $421 = $seg;
      $422 = ((($421)) + 60|0);
      $423 = HEAP32[$422>>2]|0;
      if ($420) {
       $424 = HEAP32[$423>>2]|0;
       $425 = ((($424)) + 8|0);
       $426 = HEAP32[$425>>2]|0;
       $427 = $426 >> 4;
       $428 = $427&65535;
       $429 = HEAP32[$codeptr>>2]|0;
       HEAP16[$429>>1] = $428;
       break L41;
      } else {
       $430 = ((($423)) + 8|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = $431 >>> 4;
       $433 = $432&65535;
       $434 = HEAP32[$codeptr>>2]|0;
       HEAP16[$434>>1] = $433;
       break L41;
      }
     }
    } else {
     label = 59;
    }
    break;
   }
   case 9:  {
    label = 59;
    break;
   }
   case 10:  {
    label = 68;
    break;
   }
   default: {
    label = 77;
   }
   }
  } while(0);
  do {
   if ((label|0) == 59) {
    label = 0;
    $435 = $seg;
    $436 = ($435|0)!=(0|0);
    if ($436) {
     $437 = $seg;
     $438 = ((($437)) + 60|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ((($439)) + 44|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = ($441|0)==(5);
     if ($442) {
      $443 = $value;
      $444 = $443 & 65535;
      $445 = $444&65535;
      $446 = HEAP32[$codeptr>>2]|0;
      HEAP16[$446>>1] = $445;
      $447 = HEAP32[$codeptr>>2]|0;
      $448 = ((($447)) + 2|0);
      HEAP32[$codeptr>>2] = $448;
      $449 = $seg;
      $450 = ((($449)) + 60|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = ((($451)) + 56|0);
      $453 = HEAP16[$452>>1]|0;
      $454 = HEAP32[$codeptr>>2]|0;
      HEAP16[$454>>1] = $453;
      break;
     }
    }
    $455 = HEAP32[(524)>>2]|0;
    $456 = ($455|0)==(1);
    if ($456) {
     $457 = $value;
     $458 = $457 & 65535;
     $459 = $458&65535;
     $460 = HEAP32[$codeptr>>2]|0;
     HEAP16[$460>>1] = $459;
     $461 = HEAP32[$codeptr>>2]|0;
     $462 = ((($461)) + 2|0);
     HEAP32[$codeptr>>2] = $462;
     $463 = $fixup;
     $464 = ((($463)) + 28|0);
     $465 = HEAP8[$464>>0]|0;
     $466 = $465 << 24 >> 24;
     $467 = ($466|0)==(1);
     $468 = $seg;
     $469 = ((($468)) + 60|0);
     $470 = HEAP32[$469>>2]|0;
     if ($467) {
      $471 = HEAP32[$470>>2]|0;
      $472 = ((($471)) + 8|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = $473 >> 4;
      $475 = $474&65535;
      $476 = HEAP32[$codeptr>>2]|0;
      HEAP16[$476>>1] = $475;
      break;
     }
     $477 = ((($470)) + 8|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = $seg;
     $480 = ((($479)) + 60|0);
     $481 = HEAP32[$480>>2]|0;
     $482 = HEAP32[$481>>2]|0;
     $483 = ($482|0)!=(0|0);
     if ($483) {
      $484 = $seg;
      $485 = ((($484)) + 60|0);
      $486 = HEAP32[$485>>2]|0;
      $487 = HEAP32[$486>>2]|0;
      $488 = ((($487)) + 8|0);
      $489 = HEAP32[$488>>2]|0;
      $491 = $489;
     } else {
      $491 = 0;
     }
     $490 = (($478) + ($491))|0;
     $492 = $490 >>> 4;
     $493 = $492&65535;
     $494 = HEAP32[$codeptr>>2]|0;
     HEAP16[$494>>1] = $493;
    } else {
     label = 68;
    }
   }
  } while(0);
  do {
   if ((label|0) == 68) {
    label = 0;
    $495 = $seg;
    $496 = ($495|0)!=(0|0);
    if ($496) {
     $497 = $seg;
     $498 = ((($497)) + 60|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = ((($499)) + 44|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = ($501|0)==(5);
     if ($502) {
      $503 = $value;
      $504 = HEAP32[$codeptr>>2]|0;
      HEAP32[$504>>2] = $503;
      $505 = HEAP32[$codeptr>>2]|0;
      $506 = ((($505)) + 4|0);
      HEAP32[$codeptr>>2] = $506;
      $507 = $seg;
      $508 = ((($507)) + 60|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = ((($509)) + 56|0);
      $511 = HEAP16[$510>>1]|0;
      $512 = HEAP32[$codeptr>>2]|0;
      HEAP16[$512>>1] = $511;
      break;
     }
    }
    $513 = HEAP32[(524)>>2]|0;
    $514 = ($513|0)==(1);
    if ($514) {
     $515 = $value;
     $516 = HEAP32[$codeptr>>2]|0;
     HEAP32[$516>>2] = $515;
     $517 = HEAP32[$codeptr>>2]|0;
     $518 = ((($517)) + 4|0);
     HEAP32[$codeptr>>2] = $518;
     $519 = $fixup;
     $520 = ((($519)) + 28|0);
     $521 = HEAP8[$520>>0]|0;
     $522 = $521 << 24 >> 24;
     $523 = ($522|0)==(1);
     $524 = $seg;
     $525 = ((($524)) + 60|0);
     $526 = HEAP32[$525>>2]|0;
     if ($523) {
      $527 = HEAP32[$526>>2]|0;
      $528 = ((($527)) + 8|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = $529 >> 4;
      $531 = $530&65535;
      $532 = HEAP32[$codeptr>>2]|0;
      HEAP16[$532>>1] = $531;
      break;
     }
     $533 = ((($526)) + 8|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = $seg;
     $536 = ((($535)) + 60|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = HEAP32[$537>>2]|0;
     $539 = ($538|0)!=(0|0);
     if ($539) {
      $540 = $seg;
      $541 = ((($540)) + 60|0);
      $542 = HEAP32[$541>>2]|0;
      $543 = HEAP32[$542>>2]|0;
      $544 = ((($543)) + 8|0);
      $545 = HEAP32[$544>>2]|0;
      $547 = $545;
     } else {
      $547 = 0;
     }
     $546 = (($534) + ($547))|0;
     $548 = $546 >>> 4;
     $549 = $548&65535;
     $550 = HEAP32[$codeptr>>2]|0;
     HEAP16[$550>>1] = $549;
    } else {
     label = 77;
    }
   }
  } while(0);
  if ((label|0) == 77) {
   label = 0;
   $551 = HEAP32[(500)>>2]|0;
   $552 = ((($551)) + 6|0);
   $553 = $fixup;
   $554 = ((($553)) + 16|0);
   $555 = HEAP32[$554>>2]|0;
   $556 = $1;
   $557 = ((($556)) + 4|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = $fixup;
   $560 = ((($559)) + 12|0);
   $561 = HEAP32[$560>>2]|0;
   HEAP32[$vararg_buffer>>2] = $552;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $555;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $558;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $561;
   (_EmitErr(198,$vararg_buffer)|0);
  }
  $562 = $fixup;
  $563 = ((($562)) + 4|0);
  $564 = HEAP32[$563>>2]|0;
  $fixup = $564;
 }
 $0 = 0;
 $565 = $0;
 STACKTOP = sp;return ($565|0);
}
function _GetImageSize($memimage) {
 $memimage = $memimage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $curr = 0, $dir = 0, $first = 0, $size = 0, $tmp = 0, $vsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $memimage;
 $vsize = 0;
 $size = 0;
 $1 = HEAP32[(15420)>>2]|0;
 $curr = $1;
 $first = 1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   label = 20;
   break;
  }
  $4 = $curr;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(5);
  if (!($9)) {
   $10 = $curr;
   $11 = ((($10)) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 67|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14&255) >>> 1;
   $16 = $15 & 1;
   $17 = $16&255;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $19 = $0;
    $20 = $19&255;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $curr;
     $23 = ((($22)) + 60|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0);
     if ($27) {
      $28 = $curr;
      $29 = ((($28)) + 64|0);
      $30 = HEAP32[$29>>2]|0;
      $dir = $30;
      while(1) {
       $31 = $dir;
       $32 = ($31|0)!=(0|0);
       if (!($32)) {
        break;
       }
       $33 = $dir;
       $34 = ((($33)) + 60|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ((($35)) + 16|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)!=(0);
       if ($38) {
        break;
       }
       $39 = $dir;
       $40 = ((($39)) + 64|0);
       $41 = HEAP32[$40>>2]|0;
       $dir = $41;
      }
      $42 = $dir;
      $43 = ($42|0)!=(0|0);
      if (!($43)) {
       label = 20;
       break;
      }
     }
    }
    $44 = $curr;
    $45 = ((($44)) + 60|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 32|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $curr;
    $50 = ((($49)) + 36|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $curr;
    $53 = ((($52)) + 60|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($51) - ($56))|0;
    $58 = (($48) + ($57))|0;
    $tmp = $58;
    $59 = $first;
    $60 = $59&255;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = $curr;
     $63 = ((($62)) + 60|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $vsize;
     $68 = (($67) + ($66))|0;
     $vsize = $68;
    }
    $69 = $0;
    $70 = ($69<<24>>24)!=(0);
    if ($70) {
     $71 = $vsize;
     $72 = $tmp;
     $73 = (($72) + ($71))|0;
     $tmp = $73;
    }
    $74 = $size;
    $75 = $tmp;
    $76 = ($74>>>0)<($75>>>0);
    if ($76) {
     $77 = $tmp;
     $size = $77;
    }
    $first = 0;
   }
  }
  $78 = $curr;
  $79 = ((($78)) + 64|0);
  $80 = HEAP32[$79>>2]|0;
  $curr = $80;
 }
 if ((label|0) == 20) {
  $81 = $size;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _get_bit($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $rc = -1;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $3 >> 1;
  $0 = $4;
  $5 = $rc;
  $6 = (($5) + 1)|0;
  $rc = $6;
 }
 $7 = $rc;
 STACKTOP = sp;return ($7|0);
}
function _pe_set_base_relocs($reloc) {
 $reloc = $reloc|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $baserel = 0, $cnt1 = 0, $cnt2 = 0, $curr = 0, $currloc = 0, $currpage = 0, $fixup = 0, $ftype = 0, $prel = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $reloc;
 $cnt1 = 0;
 $cnt2 = 0;
 $currpage = -1;
 $1 = HEAP32[(15420)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $curr;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(6);
  L4: do {
   if (!($9)) {
    $10 = $curr;
    $11 = ((($10)) + 60|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $fixup = $14;
    while(1) {
     $15 = $fixup;
     $16 = ($15|0)!=(0|0);
     if (!($16)) {
      break L4;
     }
     $17 = $fixup;
     $18 = ((($17)) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $$off = (($19) + -5)|0;
     $switch = ($$off>>>0)<(3);
     if ($switch) {
      $20 = $curr;
      $21 = ((($20)) + 60|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $fixup;
      $26 = ((($25)) + 12|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 & -4096;
      $29 = (($24) + ($28))|0;
      $currloc = $29;
      $30 = $currloc;
      $31 = $currpage;
      $32 = ($30|0)!=($31|0);
      if ($32) {
       $33 = $currloc;
       $currpage = $33;
       $34 = $cnt2;
       $35 = (($34) + 1)|0;
       $cnt2 = $35;
       $36 = $cnt1;
       $37 = $36 & 1;
       $38 = ($37|0)!=(0);
       if ($38) {
        $39 = $cnt1;
        $40 = (($39) + 1)|0;
        $cnt1 = $40;
       }
      }
      $41 = $cnt1;
      $42 = (($41) + 1)|0;
      $cnt1 = $42;
     }
     $43 = $fixup;
     $44 = ((($43)) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     $fixup = $45;
    }
   }
  } while(0);
  $46 = $curr;
  $47 = ((($46)) + 64|0);
  $48 = HEAP32[$47>>2]|0;
  $curr = $48;
 }
 $49 = $cnt2;
 $50 = $49<<3;
 $51 = $cnt1;
 $52 = $51<<1;
 $53 = (($50) + ($52))|0;
 $54 = $0;
 $55 = ((($54)) + 36|0);
 HEAP32[$55>>2] = $53;
 $56 = $0;
 $57 = ((($56)) + 36|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_LclAlloc($58)|0);
 $60 = $0;
 $61 = ((($60)) + 60|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 12|0);
 HEAP32[$63>>2] = $59;
 $64 = $0;
 $65 = ((($64)) + 60|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 12|0);
 $68 = HEAP32[$67>>2]|0;
 $baserel = $68;
 $69 = $baserel;
 $70 = ((($69)) + 8|0);
 $prel = $70;
 $71 = $baserel;
 HEAP32[$71>>2] = -1;
 $72 = HEAP32[(15420)>>2]|0;
 $curr = $72;
 while(1) {
  $73 = $curr;
  $74 = ($73|0)!=(0|0);
  if (!($74)) {
   break;
  }
  $75 = $curr;
  $76 = ((($75)) + 60|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 44|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(6);
  L21: do {
   if (!($80)) {
    $81 = $curr;
    $82 = ((($81)) + 60|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 24|0);
    $85 = HEAP32[$84>>2]|0;
    $fixup = $85;
    while(1) {
     $86 = $fixup;
     $87 = ($86|0)!=(0|0);
     if (!($87)) {
      break L21;
     }
     $88 = $fixup;
     $89 = ((($88)) + 16|0);
     $90 = HEAP32[$89>>2]|0;
     switch ($90|0) {
     case 5:  {
      $ftype = 2;
      break;
     }
     case 6:  {
      $ftype = 3;
      break;
     }
     case 7:  {
      $ftype = 10;
      break;
     }
     default: {
      $ftype = 0;
     }
     }
     $91 = $ftype;
     $92 = ($91|0)!=(0);
     if ($92) {
      $93 = $curr;
      $94 = ((($93)) + 60|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($95)) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $fixup;
      $99 = ((($98)) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $100 & -4096;
      $102 = (($97) + ($101))|0;
      $currloc = $102;
      $103 = $currloc;
      $104 = $baserel;
      $105 = HEAP32[$104>>2]|0;
      $106 = ($103|0)!=($105|0);
      if ($106) {
       $107 = $baserel;
       $108 = HEAP32[$107>>2]|0;
       $109 = ($108|0)!=(-1);
       if ($109) {
        $110 = $baserel;
        $111 = ((($110)) + 4|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = $112 & 2;
        $114 = ($113|0)!=(0);
        if ($114) {
         $115 = $prel;
         $116 = ((($115)) + 2|0);
         $prel = $116;
         HEAP16[$115>>1] = 0;
         $117 = $baserel;
         $118 = ((($117)) + 4|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = (($119) + 2)|0;
         HEAP32[$118>>2] = $120;
        }
        $121 = $prel;
        $baserel = $121;
        $122 = $prel;
        $123 = ((($122)) + 8|0);
        $prel = $123;
       }
       $124 = $currloc;
       $125 = $baserel;
       HEAP32[$125>>2] = $124;
       $126 = $baserel;
       $127 = ((($126)) + 4|0);
       HEAP32[$127>>2] = 8;
      }
      $128 = $fixup;
      $129 = ((($128)) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130 & 4095;
      $132 = $ftype;
      $133 = $132 << 12;
      $134 = $131 | $133;
      $135 = $134&65535;
      $136 = $prel;
      $137 = ((($136)) + 2|0);
      $prel = $137;
      HEAP16[$136>>1] = $135;
      $138 = $baserel;
      $139 = ((($138)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($140) + 2)|0;
      HEAP32[$139>>2] = $141;
     }
     $142 = $fixup;
     $143 = ((($142)) + 4|0);
     $144 = HEAP32[$143>>2]|0;
     $fixup = $144;
    }
   }
  } while(0);
  $145 = $curr;
  $146 = ((($145)) + 64|0);
  $147 = HEAP32[$146>>2]|0;
  $curr = $147;
 }
 STACKTOP = sp;return;
}
function _pe_get_characteristics($seg) {
 $seg = $seg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $seg;
 $result = 0;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 do {
  if ($6) {
   $7 = $result;
   $8 = $7 | 1610612768;
   $result = $8;
  } else {
   $9 = $0;
   $10 = ((($9)) + 60|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(3);
   if ($14) {
    $15 = $result;
    $16 = $15 | -1073741696;
    $result = $16;
    break;
   }
   $17 = $0;
   $18 = ((($17)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 68|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & 7;
   $23 = $22&255;
   $24 = ($23|0)==(5);
   if ($24) {
    $25 = $0;
    $26 = ((($25)) + 60|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($27)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = $result;
     $32 = $31 | -1073741696;
     $result = $32;
     break;
    }
   }
   $33 = $0;
   $34 = ((($33)) + 60|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 67|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 & 1;
   $39 = ($38<<24>>24)!=(0);
   if ($39) {
    $40 = $result;
    $41 = $40 | 1073741888;
    $result = $41;
    break;
   }
   $42 = $0;
   $43 = ((($42)) + 60|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 52|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = $0;
    $49 = ((($48)) + 60|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 52|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_strcmp($54,109557)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     $57 = $result;
     $58 = $57 | 1073741888;
     $result = $58;
     break;
    }
   }
   $59 = $result;
   $60 = $59 | -1073741760;
   $result = $60;
  }
 } while(0);
 $61 = $0;
 $62 = ((($61)) + 60|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 65|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65<<24>>24)!=(0);
 if (!($66)) {
  $79 = $result;
  STACKTOP = sp;return ($79|0);
 }
 $67 = $result;
 $68 = $67 & 33554431;
 $result = $68;
 $69 = $0;
 $70 = ((($69)) + 60|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($71)) + 65|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 & 254;
 $76 = $75 << 24;
 $77 = $result;
 $78 = $77 | $76;
 $result = $78;
 $79 = $result;
 STACKTOP = sp;return ($79|0);
}
function _process_branch($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addr = 0, $fixup_option = 0, $fixup_type = 0, $mem_type = 0, $opidx = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $state = 0, $sym = 0, $symseg = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer18 = sp + 16|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 373)|0;
 $8 = (77956 + ($7<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $opidx = $10;
 $11 = $2;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = (_EmitError(49)|0);
  $0 = $13;
  $820 = $0;
  STACKTOP = sp;return ($820|0);
 }
 $14 = $3;
 $15 = ((($14)) + 52|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16&255) >>> 1;
 $18 = $17 & 1;
 $19 = $18&255;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $3;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(171);
  if ($24) {
   $25 = $3;
   $26 = ((($25)) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 20|0);
   HEAP32[$29>>2] = $27;
  }
 }
 $30 = $3;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $3;
  (_segm_override($34,0)|0);
  $35 = HEAP32[15452>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $3;
   $38 = ((($37)) + 56|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $41 = $3;
    $42 = ((($41)) + 56|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = HEAP32[15452>>2]|0;
     $48 = $3;
     $49 = ((($48)) + 56|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($47|0)!=($52|0);
     if ($53) {
      $54 = HEAP32[15452>>2]|0;
      $55 = $3;
      $56 = ((($55)) + 56|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($57)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($59)) + 60|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = HEAP32[$61>>2]|0;
      $63 = ($54|0)!=($62|0);
      if ($63) {
       $64 = $3;
       $65 = ((($64)) + 56|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($66|0)!=(0|0);
       if ($67) {
        $68 = $3;
        $69 = ((($68)) + 56|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ((($70)) + 4|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = $72;
       } else {
        $73 = 109841;
       }
       HEAP32[$vararg_buffer>>2] = $73;
       $74 = (_EmitErr(89,$vararg_buffer)|0);
       $0 = $74;
       $820 = $0;
       STACKTOP = sp;return ($820|0);
      }
     }
     $75 = HEAP32[15452>>2]|0;
     $76 = HEAP32[(584)>>2]|0;
     $77 = ($75|0)!=($76|0);
     if ($77) {
      $78 = HEAP32[15452>>2]|0;
      $79 = HEAP32[(584)>>2]|0;
      $80 = ((($79)) + 60|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = HEAP32[$81>>2]|0;
      $83 = ($78|0)!=($82|0);
      if ($83) {
       $84 = $1;
       $85 = ((($84)) + 20|0);
       HEAP32[$85>>2] = 130;
      }
     }
    }
   }
  }
 }
 $86 = $3;
 $87 = HEAP32[$86>>2]|0;
 $88 = $1;
 $89 = ((($88)) + 24|0);
 $90 = ((($89)) + 8|0);
 HEAP32[$90>>2] = $87;
 $91 = $1;
 $92 = ((($91)) + 24|0);
 $93 = ((($92)) + 8|0);
 $94 = ((($93)) + 4|0);
 HEAP32[$94>>2] = 0;
 $95 = $3;
 $96 = ((($95)) + 56|0);
 $97 = HEAP32[$96>>2]|0;
 $sym = $97;
 $98 = $sym;
 $99 = ($98|0)==(0|0);
 if ($99) {
  $100 = (_EmitError(249)|0);
  $0 = $100;
  $820 = $0;
  STACKTOP = sp;return ($820|0);
 }
 $101 = $sym;
 $102 = ((($101)) + 16|0);
 $103 = HEAP32[$102>>2]|0;
 $state = $103;
 $104 = (_GetCurrOffset()|0);
 $addr = $104;
 $105 = $state;
 $106 = ($105|0)==(2);
 if ($106) {
  $107 = $sym;
  $108 = ((($107)) + 28|0);
  $109 = ((($108)) + 3|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = ($110&255) >>> 3;
  $112 = $111 & 1;
  $113 = $112&255;
  $114 = ($113|0)!=(0);
  if ($114) {
   $state = 0;
  }
 }
 $115 = $state;
 $116 = ($115|0)==(1);
 $117 = $state;
 $118 = ($117|0)==(2);
 $or$cond = $116 | $118;
 $119 = $state;
 do {
  if ($or$cond) {
   $120 = ($119|0)==(1);
   if ($120) {
    $121 = $sym;
    $122 = ((($121)) + 28|0);
    $123 = ((($122)) + 2|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = HEAP32[4884>>2]|0;
    $127 = $126 & 255;
    $128 = ($125|0)!=($127|0);
    if ($128) {
     $129 = $sym;
     $130 = ((($129)) + 8|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $addr;
     $133 = ($131|0)<($132|0);
     if (!($133)) {
      label = 27;
     }
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    $134 = $sym;
    $135 = ((($134)) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $addr = $136;
   }
   $137 = $sym;
   $138 = ((($137)) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $symseg = $139;
   $140 = $symseg;
   $141 = ($140|0)==(0|0);
   if (!($141)) {
    $142 = HEAP32[(584)>>2]|0;
    $143 = $symseg;
    $144 = ($142|0)!=($143|0);
    if (!($144)) {
     break;
    }
   }
   $145 = HEAP32[(588)>>2]|0;
   $146 = ($145|0)!=(0|0);
   if ($146) {
    $147 = $symseg;
    $148 = ($147|0)==(0|0);
    if (!($148)) {
     $149 = $symseg;
     $150 = ((($149)) + 60|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ((($151)) + 64|0);
     $153 = HEAP8[$152>>0]|0;
     $154 = $153&255;
     $155 = HEAP8[(556)>>0]|0;
     $156 = $155&255;
     $157 = ($154|0)==($156|0);
     if (!($157)) {
      label = 33;
     }
    }
   } else {
    label = 33;
   }
   do {
    if ((label|0) == 33) {
     $158 = $symseg;
     $159 = ($158|0)!=(0|0);
     $160 = HEAP32[(584)>>2]|0;
     $161 = ($160|0)!=(0|0);
     $or$cond3 = $159 & $161;
     if ($or$cond3) {
      $162 = $symseg;
      $163 = ((($162)) + 60|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)!=(0|0);
      if ($166) {
       $167 = $symseg;
       $168 = ((($167)) + 60|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = HEAP32[$169>>2]|0;
       $171 = HEAP32[(584)>>2]|0;
       $172 = ((($171)) + 60|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = HEAP32[$173>>2]|0;
       $175 = ($170|0)==($174|0);
       if ($175) {
        break;
       }
      }
      $176 = $3;
      $177 = ((($176)) + 44|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(129);
      $180 = HEAP32[15452>>2]|0;
      $181 = ($180|0)==(0|0);
      $or$cond5 = $179 & $181;
      if ($or$cond5) {
       $182 = (_EmitError(169)|0);
       $0 = $182;
       $820 = $0;
       STACKTOP = sp;return ($820|0);
      }
     }
    }
   } while(0);
   $state = 2;
  } else {
   $183 = ($119|0)!=(0);
   if ($183) {
    $184 = (_EmitErr(249,$vararg_buffer16)|0);
    $0 = $184;
    $820 = $0;
    STACKTOP = sp;return ($820|0);
   }
  }
 } while(0);
 $185 = $state;
 $186 = ($185|0)!=(2);
 do {
  if ($186) {
   $187 = HEAP32[15452>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    $189 = $1;
    $190 = ((($189)) + 20|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($191|0)==(192);
    if ($192) {
     $193 = HEAP32[15452>>2]|0;
     $194 = (_GetOverrideAssume(1)|0);
     $195 = ($193|0)!=($194|0);
     if ($195) {
      $196 = $1;
      $197 = ((($196)) + 20|0);
      HEAP32[$197>>2] = 130;
     }
    }
   }
   $198 = $1;
   $199 = ((($198)) + 20|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)==(192);
   if (!($201)) {
    $202 = $1;
    $203 = ((($202)) + 20|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)==(129);
    if (!($205)) {
     break;
    }
   }
   $206 = $1;
   $207 = ((($206)) + 101|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = ($208&255) >>> 2;
   $210 = $209 & 1;
   $211 = $210&255;
   $212 = ($211|0)==(0);
   if ($212) {
    $213 = $1;
    $214 = ((($213)) + 16|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)==(373);
    if ($216) {
     $217 = $1;
     $218 = ((($217)) + 20|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(192);
     if ($220) {
      $221 = $sym;
      $222 = ((($221)) + 20|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = ($223|0)==(130);
      $225 = HEAP32[15452>>2]|0;
      $226 = ($225|0)!=(0|0);
      $or$cond7 = $224 | $226;
      if ($or$cond7) {
       $227 = $1;
       _FarCallToNear($227);
      }
     }
    }
    $228 = (_GetCurrOffset()|0);
    $229 = (($228) + 2)|0;
    $230 = $addr;
    $231 = (($230) - ($229))|0;
    $addr = $231;
    $232 = $1;
    $233 = ((($232)) + 24|0);
    $234 = ((($233)) + 8|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $addr;
    $237 = (($236) + ($235))|0;
    $addr = $237;
    $238 = $1;
    $239 = ((($238)) + 98|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($241|0)!=(0);
    if ($242) {
     $243 = $opidx;
     $244 = (68332 + ($243<<3)|0);
     $245 = ((($244)) + 1|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = ($247|0)==(3);
     if ($248) {
      label = 57;
     } else {
      label = 55;
     }
    } else {
     label = 55;
    }
    if ((label|0) == 55) {
     $249 = $1;
     $250 = ((($249)) + 98|0);
     $251 = HEAP8[$250>>0]|0;
     $252 = $251&255;
     $253 = ($252|0)!=(1);
     if ($253) {
      $254 = $opidx;
      $255 = (68332 + ($254<<3)|0);
      $256 = ((($255)) + 1|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = $257&255;
      $259 = ($258|0)==(4);
      if ($259) {
       label = 57;
      }
     }
    }
    if ((label|0) == 57) {
     $260 = $addr;
     $261 = (($260) + -1)|0;
     $addr = $261;
    }
    $262 = $1;
    $263 = ((($262)) + 20|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ($264|0)!=(129);
    if ($265) {
     $266 = $1;
     $267 = ((($266)) + 16|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = ($268|0)!=(373);
     $270 = $addr;
     $271 = ($270|0)>=(-128);
     $or$cond9 = $269 & $271;
     $272 = $addr;
     $273 = ($272|0)<=(127);
     $or$cond11 = $or$cond9 & $273;
     if ($or$cond11) {
      $274 = $1;
      $275 = ((($274)) + 24|0);
      HEAP32[$275>>2] = 65536;
     } else {
      label = 61;
     }
    } else {
     label = 61;
    }
    L87: do {
     if ((label|0) == 61) {
      $276 = $3;
      $277 = ((($276)) + 36|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = ($278|0)==(171);
      do {
       if (!($279)) {
        $280 = $1;
        $281 = ((($280)) + 16|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = ($282>>>0)>=(405);
        if ($283) {
         $284 = $1;
         $285 = ((($284)) + 16|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ($286>>>0)<=(422);
         if ($287) {
          break;
         }
        }
        $307 = $3;
        $308 = ((($307)) + 49|0);
        $309 = HEAP8[$308>>0]|0;
        $310 = $309&255;
        $311 = ($310|0)!=(254);
        do {
         if ($311) {
          $312 = $3;
          $313 = ((($312)) + 49|0);
          $314 = HEAP8[$313>>0]|0;
          $315 = $314&255;
          $316 = ($315|0)==(0);
          $317 = $1;
          $318 = ((($317)) + 24|0);
          if ($316) {
           HEAP32[$318>>2] = 131072;
           $319 = $addr;
           $320 = (($319) - 1)|0;
           $addr = $320;
          } else {
           HEAP32[$318>>2] = 262144;
           $321 = $addr;
           $322 = (($321) - 3)|0;
           $addr = $322;
          }
          $323 = $1;
          $324 = ((($323)) + 98|0);
          $325 = HEAP8[$324>>0]|0;
          $326 = $325&255;
          $327 = $3;
          $328 = ((($327)) + 49|0);
          $329 = HEAP8[$328>>0]|0;
          $330 = $329&255;
          $331 = ($326|0)!=($330|0);
          $332 = $331 ? 1 : 0;
          $333 = $332&255;
          $334 = $1;
          $335 = ((($334)) + 9|0);
          $336 = HEAP8[$335>>0]|0;
          $337 = $333 & 1;
          $338 = ($337 << 1)&255;
          $339 = $336 & -3;
          $340 = $339 | $338;
          HEAP8[$335>>0] = $340;
          $341 = $1;
          $342 = ((($341)) + 9|0);
          $343 = HEAP8[$342>>0]|0;
          $344 = ($343&255) >>> 1;
          $345 = $344 & 1;
          $346 = ($345<<24>>24)!=(0);
          if (!($346)) {
           break;
          }
          $347 = $addr;
          $348 = (($347) + -1)|0;
          $addr = $348;
         } else {
          $349 = $1;
          $350 = ((($349)) + 98|0);
          $351 = HEAP8[$350>>0]|0;
          $352 = $351&255;
          $353 = ($352|0)>(0);
          $354 = $1;
          $355 = ((($354)) + 24|0);
          if ($353) {
           HEAP32[$355>>2] = 262144;
           $356 = $addr;
           $357 = (($356) - 3)|0;
           $addr = $357;
           break;
          } else {
           HEAP32[$355>>2] = 131072;
           $358 = $addr;
           $359 = (($358) - 1)|0;
           $addr = $359;
           break;
          }
         }
        } while(0);
        $360 = $1;
        $361 = ((($360)) + 16|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = ($362>>>0)>=(375);
        if (!($363)) {
         break L87;
        }
        $364 = $1;
        $365 = ((($364)) + 16|0);
        $366 = HEAP32[$365>>2]|0;
        $367 = ($366>>>0)<=(404);
        if (!($367)) {
         break L87;
        }
        $368 = $addr;
        $369 = (($368) + -1)|0;
        $addr = $369;
        break L87;
       }
      } while(0);
      $288 = $1;
      $289 = ((($288)) + 16|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($290|0)==(373);
      if ($291) {
       $292 = (_EmitError(43)|0);
       $0 = $292;
       $820 = $0;
       STACKTOP = sp;return ($820|0);
      }
      $293 = $addr;
      $294 = ($293|0)<(0);
      $295 = $addr;
      if ($294) {
       $296 = (($295) - -128)|0;
       $addr = $296;
       $297 = $addr;
       $298 = (0 - ($297))|0;
       $addr = $298;
      } else {
       $299 = (($295) - 127)|0;
       $addr = $299;
      }
      $300 = $1;
      $301 = ((($300)) + 20|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = ($302|0)==(192);
      $304 = $303 ? 53 : 44;
      $305 = $addr;
      HEAP32[$vararg_buffer18>>2] = $305;
      $306 = (_EmitErr($304,$vararg_buffer18)|0);
      $0 = $306;
      $820 = $0;
      STACKTOP = sp;return ($820|0);
     }
    } while(0);
    $370 = $addr;
    $371 = $1;
    $372 = ((($371)) + 24|0);
    $373 = ((($372)) + 8|0);
    HEAP32[$373>>2] = $370;
    $374 = HEAP32[(544)>>2]|0;
    $375 = $374 & 240;
    $376 = ($375>>>0)<(48);
    L119: do {
     if ($376) {
      $377 = $1;
      $378 = ((($377)) + 16|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($379>>>0)>(374);
      if ($380) {
       $381 = $1;
       $382 = ((($381)) + 16|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = ($383>>>0)<(405);
       if ($384) {
        $385 = $1;
        $386 = ((($385)) + 24|0);
        $387 = HEAP32[$386>>2]|0;
        $388 = ($387|0)!=(65536);
        if ($388) {
         $389 = $1;
         $390 = ((($389)) + 20|0);
         $391 = HEAP32[$390>>2]|0;
         $392 = ($391|0)==(192);
         do {
          if ($392) {
           $393 = HEAP32[(560)>>2]|0;
           $394 = $393 >>> 5;
           $395 = $394 & 1;
           $396 = ($395|0)==(1);
           if (!($396)) {
            break;
           }
           $397 = $1;
           _jumpExtend($397,0);
           $398 = $addr;
           $399 = (($398) - 1)|0;
           $addr = $399;
           $400 = $addr;
           $401 = $1;
           $402 = ((($401)) + 24|0);
           $403 = ((($402)) + 8|0);
           HEAP32[$403>>2] = $400;
           break L119;
          }
         } while(0);
         $404 = $1;
         $405 = ((($404)) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(192);
         $408 = $407 ? 53 : 50;
         $409 = $addr;
         HEAP32[$vararg_buffer21>>2] = $409;
         $410 = (_EmitErr($408,$vararg_buffer21)|0);
         $0 = $410;
         $820 = $0;
         STACKTOP = sp;return ($820|0);
        }
       }
      }
     }
    } while(0);
    $411 = $state;
    $412 = ($411|0)!=(0);
    if ($412) {
     $0 = 0;
     $820 = $0;
     STACKTOP = sp;return ($820|0);
    }
   }
  }
 } while(0);
 $fixup_option = 0;
 $fixup_type = 1;
 $413 = $3;
 $414 = ((($413)) + 44|0);
 $415 = HEAP32[$414>>2]|0;
 $mem_type = $415;
 $416 = $1;
 $417 = ((($416)) + 16|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ($418|0)==(373);
 do {
  if ($419) {
   $420 = $1;
   $421 = ((($420)) + 20|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = ($422|0)==(192);
   if ($423) {
    $424 = $sym;
    $425 = ((($424)) + 20|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = ($426|0)==(130);
    $428 = HEAP32[15452>>2]|0;
    $429 = ($428|0)!=(0|0);
    $or$cond13 = $427 | $429;
    if ($or$cond13) {
     $430 = $sym;
     $431 = ((($430)) + 12|0);
     $432 = HEAP32[$431>>2]|0;
     $symseg = $432;
     $433 = $symseg;
     $434 = HEAP32[(584)>>2]|0;
     $435 = ($433|0)==($434|0);
     if (!($435)) {
      $436 = $symseg;
      $437 = ($436|0)!=(0|0);
      if (!($437)) {
       break;
      }
      $438 = $symseg;
      $439 = ((($438)) + 60|0);
      $440 = HEAP32[$439>>2]|0;
      $441 = HEAP32[$440>>2]|0;
      $442 = ($441|0)!=(0|0);
      if (!($442)) {
       break;
      }
      $443 = $symseg;
      $444 = ((($443)) + 60|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = HEAP32[$445>>2]|0;
      $447 = HEAP32[(584)>>2]|0;
      $448 = ((($447)) + 60|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = HEAP32[$449>>2]|0;
      $451 = ($446|0)==($450|0);
      if (!($451)) {
       break;
      }
     }
     $452 = $1;
     _FarCallToNear($452);
    }
   }
  }
 } while(0);
 $453 = $1;
 $454 = ((($453)) + 20|0);
 $455 = HEAP32[$454>>2]|0;
 $456 = ($455|0)==(192);
 $457 = $mem_type;
 $458 = ($457|0)!=(192);
 $or$cond15 = $456 & $458;
 L143: do {
  if ($or$cond15) {
   $459 = $3;
   $460 = ((($459)) + 36|0);
   $461 = HEAP32[$460>>2]|0;
   $462 = ($461|0)!=(171);
   if ($462) {
    $463 = $mem_type;
    switch ($463|0) {
    case 130:  {
     label = 103;
     break;
    }
    case 129:  {
     break;
    }
    default: {
     (_InternalError(82945,427)|0);
     $482 = $mem_type;
     $483 = $1;
     $484 = ((($483)) + 20|0);
     HEAP32[$484>>2] = $482;
     break L143;
    }
    }
    do {
     if ((label|0) == 103) {
      $464 = $1;
      $465 = ((($464)) + 16|0);
      $466 = HEAP32[$465>>2]|0;
      $467 = ($466|0)==(373);
      if (!($467)) {
       $468 = $1;
       $469 = ((($468)) + 16|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = ($470|0)==(374);
       if (!($471)) {
        break;
       }
      }
      $472 = $1;
      $473 = ((($472)) + 101|0);
      $474 = HEAP8[$473>>0]|0;
      $475 = $474 & -5;
      $476 = $475 | 4;
      HEAP8[$473>>0] = $476;
     }
    } while(0);
    $477 = $state;
    $478 = ($477|0)!=(0);
    if ($478) {
     $479 = $mem_type;
     $480 = $1;
     $481 = ((($480)) + 20|0);
     HEAP32[$481>>2] = $479;
    }
   }
  }
 } while(0);
 $485 = $1;
 $486 = ((($485)) + 16|0);
 $487 = HEAP32[$486>>2]|0;
 $488 = ($487|0)==(373);
 if ($488) {
  label = 111;
 } else {
  $489 = $1;
  $490 = ((($489)) + 16|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = ($491|0)==(374);
  if ($492) {
   label = 111;
  }
 }
 do {
  if ((label|0) == 111) {
   $493 = $1;
   $494 = ((($493)) + 101|0);
   $495 = HEAP8[$494>>0]|0;
   $496 = ($495&255) >>> 2;
   $497 = $496 & 1;
   $498 = $497&255;
   $499 = ($498|0)==(1);
   if (!($499)) {
    $500 = $1;
    $501 = ((($500)) + 20|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = ($502|0)==(130);
    if (!($503)) {
     break;
    }
   }
   $504 = $1;
   $505 = ((($504)) + 101|0);
   $506 = HEAP8[$505>>0]|0;
   $507 = $506 & -5;
   $508 = $507 | 4;
   HEAP8[$505>>0] = $508;
   $509 = $1;
   $510 = ((($509)) + 20|0);
   $511 = HEAP32[$510>>2]|0;
   L163: do {
    switch ($511|0) {
    case 129:  {
     $512 = $3;
     $513 = ((($512)) + 52|0);
     $514 = HEAP8[$513>>0]|0;
     $515 = ($514&255) >>> 1;
     $516 = $515 & 1;
     $517 = $516&255;
     $518 = ($517|0)!=(0);
     if (!($518)) {
      $519 = $3;
      $520 = ((($519)) + 36|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = ($521|0)==(171);
      if (!($522)) {
       label = 117;
       break L163;
      }
     }
     $523 = (_EmitError(52)|0);
     $0 = $523;
     $820 = $0;
     STACKTOP = sp;return ($820|0);
     break;
    }
    case 192: case 130:  {
     label = 117;
     break;
    }
    default: {
    }
    }
   } while(0);
   do {
    if ((label|0) == 117) {
     $524 = $3;
     $525 = ((($524)) + 49|0);
     $526 = HEAP8[$525>>0]|0;
     $527 = $526&255;
     $528 = ($527|0)!=(254);
     $529 = $1;
     $530 = ((($529)) + 98|0);
     $531 = HEAP8[$530>>0]|0;
     $532 = $531&255;
     if ($528) {
      $533 = $3;
      $534 = ((($533)) + 49|0);
      $535 = HEAP8[$534>>0]|0;
      $536 = $535&255;
      $537 = ($532|0)!=($536|0);
      $538 = $537 ? 1 : 0;
      $539 = $538&255;
      $540 = $1;
      $541 = ((($540)) + 9|0);
      $542 = HEAP8[$541>>0]|0;
      $543 = $539 & 1;
      $544 = ($543 << 1)&255;
      $545 = $542 & -3;
      $546 = $545 | $544;
      HEAP8[$541>>0] = $546;
     } else {
      $547 = $sym;
      $548 = (_GetSymOfssize($547)|0);
      $549 = ($532|0)!=($548|0);
      $550 = $549 ? 1 : 0;
      $551 = $550&255;
      $552 = $1;
      $553 = ((($552)) + 9|0);
      $554 = HEAP8[$553>>0]|0;
      $555 = $551 & 1;
      $556 = ($555 << 1)&255;
      $557 = $554 & -3;
      $558 = $557 | $556;
      HEAP8[$553>>0] = $558;
     }
     $559 = $sym;
     _set_frame($559);
     $560 = $1;
     $561 = ((($560)) + 98|0);
     $562 = HEAP8[$561>>0]|0;
     $563 = $562&255;
     $564 = ($563|0)!=(0);
     $565 = $1;
     $566 = ((($565)) + 9|0);
     $567 = HEAP8[$566>>0]|0;
     $568 = ($567&255) >>> 1;
     $569 = $568 & 1;
     $570 = $569&255;
     if ($564) {
      $571 = ($570|0)==(0);
      if ($571) {
       label = 123;
      } else {
       label = 124;
      }
     } else {
      $572 = ($570|0)==(1);
      if ($572) {
       label = 123;
      } else {
       label = 124;
      }
     }
     if ((label|0) == 123) {
      $fixup_type = 10;
      $573 = $1;
      $574 = ((($573)) + 24|0);
      HEAP32[$574>>2] = 1048576;
      break;
     }
     else if ((label|0) == 124) {
      $fixup_type = 9;
      $575 = $1;
      $576 = ((($575)) + 24|0);
      HEAP32[$576>>2] = 262144;
      break;
     }
    }
   } while(0);
   $577 = $sym;
   $578 = $fixup_type;
   $579 = $fixup_option;
   $580 = (_CreateFixup($577,$578,$579)|0);
   $581 = $1;
   $582 = ((($581)) + 24|0);
   $583 = ((($582)) + 16|0);
   HEAP32[$583>>2] = $580;
   $0 = 0;
   $820 = $0;
   STACKTOP = sp;return ($820|0);
  }
 } while(0);
 $584 = $1;
 $585 = ((($584)) + 16|0);
 $586 = HEAP32[$585>>2]|0;
 L184: do {
  switch ($586|0) {
  case 373:  {
   $587 = $3;
   $588 = ((($587)) + 36|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = ($589|0)==(171);
   if ($590) {
    $591 = (_EmitError(43)|0);
    $0 = $591;
    $820 = $0;
    STACKTOP = sp;return ($820|0);
   }
   $592 = $1;
   $593 = ((($592)) + 20|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = ($594|0)==(192);
   if ($595) {
    $fixup_option = 4;
    $596 = $1;
    $597 = ((($596)) + 98|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = $598&255;
    $600 = ($599|0)>(0);
    if ($600) {
     $fixup_type = 3;
     $601 = $1;
     $602 = ((($601)) + 24|0);
     HEAP32[$602>>2] = 262144;
     break L184;
    } else {
     $fixup_type = 2;
     $603 = $1;
     $604 = ((($603)) + 24|0);
     HEAP32[$604>>2] = 131072;
     break L184;
    }
   } else {
    label = 133;
   }
   break;
  }
  case 374:  {
   label = 133;
   break;
  }
  default: {
   $657 = $1;
   $658 = ((($657)) + 16|0);
   $659 = HEAP32[$658>>2]|0;
   $660 = ($659>>>0)>=(405);
   if ($660) {
    $661 = $1;
    $662 = ((($661)) + 16|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = ($663>>>0)<=(422);
    if ($664) {
     $665 = $1;
     $666 = ((($665)) + 20|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)!=(192);
     if ($668) {
      $669 = $3;
      $670 = ((($669)) + 36|0);
      $671 = HEAP32[$670>>2]|0;
      $672 = ($671|0)!=(171);
      if ($672) {
       $673 = (_EmitError(44)|0);
       $0 = $673;
       $820 = $0;
       STACKTOP = sp;return ($820|0);
      }
     }
     $674 = $1;
     $675 = ((($674)) + 24|0);
     HEAP32[$675>>2] = 65536;
     $fixup_option = 1;
     $fixup_type = 1;
     break L184;
    }
   }
   $676 = HEAP32[(544)>>2]|0;
   $677 = $676 & 240;
   $678 = ($677>>>0)>=(48);
   $679 = $1;
   $680 = ((($679)) + 20|0);
   $681 = HEAP32[$680>>2]|0;
   if (!($678)) {
    switch ($681|0) {
    case 192:  {
     $788 = $3;
     $789 = ((($788)) + 36|0);
     $790 = HEAP32[$789>>2]|0;
     $791 = ($790|0)==(171);
     if ($791) {
      $fixup_option = 1;
     } else {
      $fixup_option = 2;
     }
     $fixup_type = 1;
     $792 = $1;
     $793 = ((($792)) + 24|0);
     HEAP32[$793>>2] = 65536;
     break L184;
     break;
    }
    case 130: case 129:  {
     $794 = HEAP32[(560)>>2]|0;
     $795 = $794 >>> 5;
     $796 = $795 & 1;
     $797 = ($796|0)!=(0);
     if ($797) {
      $798 = $1;
      $799 = ((($798)) + 20|0);
      $800 = HEAP32[$799>>2]|0;
      $801 = ($800|0)==(130);
      $802 = $1;
      if ($801) {
       _jumpExtend($802,1);
       $fixup_type = 9;
       $803 = $1;
       $804 = ((($803)) + 101|0);
       $805 = HEAP8[$804>>0]|0;
       $806 = $805 & -5;
       $807 = $806 | 4;
       HEAP8[$804>>0] = $807;
       $808 = $1;
       $809 = ((($808)) + 24|0);
       HEAP32[$809>>2] = 262144;
       break L184;
      } else {
       _jumpExtend($802,0);
       $fixup_type = 2;
       $810 = $1;
       $811 = ((($810)) + 24|0);
       HEAP32[$811>>2] = 131072;
       break L184;
      }
     }
     break;
    }
    default: {
    }
    }
    $812 = (_EmitError(44)|0);
    $0 = $812;
    $820 = $0;
    STACKTOP = sp;return ($820|0);
   }
   switch ($681|0) {
   case 192:  {
    $682 = $3;
    $683 = ((($682)) + 36|0);
    $684 = HEAP32[$683>>2]|0;
    $685 = ($684|0)==(171);
    $686 = $685 ? 1 : 3;
    $fixup_option = $686;
    $fixup_type = 1;
    $687 = $1;
    $688 = ((($687)) + 24|0);
    HEAP32[$688>>2] = 65536;
    break L184;
    break;
   }
   case 129:  {
    $fixup_option = 1;
    $689 = $3;
    $690 = ((($689)) + 49|0);
    $691 = HEAP8[$690>>0]|0;
    $692 = $691&255;
    $693 = ($692|0)!=(254);
    $694 = $1;
    $695 = ((($694)) + 98|0);
    $696 = HEAP8[$695>>0]|0;
    $697 = $696&255;
    if ($693) {
     $698 = $3;
     $699 = ((($698)) + 49|0);
     $700 = HEAP8[$699>>0]|0;
     $701 = $700&255;
     $702 = ($697|0)!=($701|0);
     $703 = $702 ? 1 : 0;
     $704 = $703&255;
     $705 = $1;
     $706 = ((($705)) + 9|0);
     $707 = HEAP8[$706>>0]|0;
     $708 = $704 & 1;
     $709 = ($708 << 1)&255;
     $710 = $707 & -3;
     $711 = $710 | $709;
     HEAP8[$706>>0] = $711;
     $712 = $3;
     $713 = ((($712)) + 49|0);
     $714 = HEAP8[$713>>0]|0;
     $715 = $714&255;
     $716 = ($715|0)>=(1);
     $717 = $716 ? 262144 : 131072;
     $718 = $1;
     $719 = ((($718)) + 24|0);
     HEAP32[$719>>2] = $717;
     break L184;
    }
    $720 = ($697|0)>(0);
    if ($720) {
     $fixup_type = 3;
     $721 = $1;
     $722 = ((($721)) + 24|0);
     HEAP32[$722>>2] = 262144;
     break L184;
    } else {
     $fixup_type = 2;
     $723 = $1;
     $724 = ((($723)) + 24|0);
     HEAP32[$724>>2] = 131072;
     break L184;
    }
    break;
   }
   case 130:  {
    $725 = HEAP32[(560)>>2]|0;
    $726 = $725 >>> 5;
    $727 = $726 & 1;
    $728 = ($727|0)!=(0);
    if ($728) {
     $729 = $3;
     $730 = ((($729)) + 49|0);
     $731 = HEAP8[$730>>0]|0;
     $732 = $731&255;
     $733 = ($732|0)!=(254);
     $734 = $1;
     $735 = ((($734)) + 98|0);
     $736 = HEAP8[$735>>0]|0;
     $737 = $736&255;
     if ($733) {
      $738 = $3;
      $739 = ((($738)) + 49|0);
      $740 = HEAP8[$739>>0]|0;
      $741 = $740&255;
      $742 = ($737|0)!=($741|0);
      $743 = $742 ? 1 : 0;
      $744 = $743&255;
      $745 = $1;
      $746 = ((($745)) + 9|0);
      $747 = HEAP8[$746>>0]|0;
      $748 = $744 & 1;
      $749 = ($748 << 1)&255;
      $750 = $747 & -3;
      $751 = $750 | $749;
      HEAP8[$746>>0] = $751;
     } else {
      $752 = $sym;
      $753 = (_GetSymOfssize($752)|0);
      $754 = ($737|0)!=($753|0);
      $755 = $754 ? 1 : 0;
      $756 = $755&255;
      $757 = $1;
      $758 = ((($757)) + 9|0);
      $759 = HEAP8[$758>>0]|0;
      $760 = $756 & 1;
      $761 = ($760 << 1)&255;
      $762 = $759 & -3;
      $763 = $762 | $761;
      HEAP8[$758>>0] = $763;
     }
     $764 = $1;
     _jumpExtend($764,1);
     $765 = $1;
     $766 = ((($765)) + 101|0);
     $767 = HEAP8[$766>>0]|0;
     $768 = $767 & -5;
     $769 = $768 | 4;
     HEAP8[$766>>0] = $769;
     $770 = $1;
     $771 = ((($770)) + 98|0);
     $772 = HEAP8[$771>>0]|0;
     $773 = $772&255;
     $774 = ($773|0)!=(0);
     $775 = $1;
     $776 = ((($775)) + 9|0);
     $777 = HEAP8[$776>>0]|0;
     $778 = ($777&255) >>> 1;
     $779 = $778 & 1;
     $780 = $779&255;
     if ($774) {
      $781 = ($780|0)==(0);
      if ($781) {
       label = 165;
      } else {
       label = 166;
      }
     } else {
      $782 = ($780|0)==(1);
      if ($782) {
       label = 165;
      } else {
       label = 166;
      }
     }
     if ((label|0) == 165) {
      $fixup_type = 10;
      $783 = $1;
      $784 = ((($783)) + 24|0);
      HEAP32[$784>>2] = 1048576;
      break L184;
     }
     else if ((label|0) == 166) {
      $fixup_type = 9;
      $785 = $1;
      $786 = ((($785)) + 24|0);
      HEAP32[$786>>2] = 262144;
      break L184;
     }
    }
    break;
   }
   default: {
   }
   }
   $787 = (_EmitError(75)|0);
   $0 = $787;
   $820 = $0;
   STACKTOP = sp;return ($820|0);
  }
  }
 } while(0);
 L243: do {
  if ((label|0) == 133) {
   $605 = $1;
   $606 = ((($605)) + 20|0);
   $607 = HEAP32[$606>>2]|0;
   switch ($607|0) {
   case 192:  {
    $608 = $1;
    $609 = ((($608)) + 24|0);
    HEAP32[$609>>2] = 65536;
    $fixup_type = 1;
    $610 = $3;
    $611 = ((($610)) + 36|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = ($612|0)==(171);
    $614 = $613 ? 1 : 0;
    $fixup_option = $614;
    break L243;
    break;
   }
   case 129:  {
    break;
   }
   default: {
    break L243;
   }
   }
   $fixup_option = 1;
   $615 = $3;
   $616 = ((($615)) + 49|0);
   $617 = HEAP8[$616>>0]|0;
   $618 = $617&255;
   $619 = ($618|0)!=(254);
   do {
    if ($619) {
     $620 = $3;
     $621 = ((($620)) + 49|0);
     $622 = HEAP8[$621>>0]|0;
     $623 = $622&255;
     $624 = ($623|0)==(0);
     if ($624) {
      $fixup_type = 2;
      $625 = $1;
      $626 = ((($625)) + 24|0);
      HEAP32[$626>>2] = 131072;
     } else {
      $fixup_type = 3;
      $627 = $1;
      $628 = ((($627)) + 24|0);
      HEAP32[$628>>2] = 262144;
     }
     $629 = $1;
     $630 = ((($629)) + 98|0);
     $631 = HEAP8[$630>>0]|0;
     $632 = $631&255;
     $633 = $3;
     $634 = ((($633)) + 49|0);
     $635 = HEAP8[$634>>0]|0;
     $636 = $635&255;
     $637 = ($632|0)!=($636|0);
     $638 = $637 ? 1 : 0;
     $639 = $638&255;
     $640 = $1;
     $641 = ((($640)) + 9|0);
     $642 = HEAP8[$641>>0]|0;
     $643 = $639 & 1;
     $644 = ($643 << 1)&255;
     $645 = $642 & -3;
     $646 = $645 | $644;
     HEAP8[$641>>0] = $646;
    } else {
     $647 = $1;
     $648 = ((($647)) + 98|0);
     $649 = HEAP8[$648>>0]|0;
     $650 = $649&255;
     $651 = ($650|0)>(0);
     if ($651) {
      $fixup_type = 3;
      $652 = $1;
      $653 = ((($652)) + 24|0);
      HEAP32[$653>>2] = 262144;
      break;
     } else {
      $fixup_type = 2;
      $654 = $1;
      $655 = ((($654)) + 24|0);
      HEAP32[$655>>2] = 131072;
      break;
     }
    }
   } while(0);
   $656 = $sym;
   _set_frame($656);
  }
 } while(0);
 $813 = $sym;
 $814 = $fixup_type;
 $815 = $fixup_option;
 $816 = (_CreateFixup($813,$814,$815)|0);
 $817 = $1;
 $818 = ((($817)) + 24|0);
 $819 = ((($818)) + 16|0);
 HEAP32[$819>>2] = $816;
 $0 = 0;
 $820 = $0;
 STACKTOP = sp;return ($820|0);
}
function _FarCallToNear($CodeInfo) {
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $CodeInfo;
 $1 = HEAP32[4884>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  _EmitWarn(4,133,$vararg_buffer);
 }
 _OutputByte(14);
 $3 = $0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = 129;
 STACKTOP = sp;return;
}
function _jumpExtend($CodeInfo,$far_flag) {
 $CodeInfo = $CodeInfo|0;
 $far_flag = $far_flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $next_ins_size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $CodeInfo;
 $1 = $far_flag;
 $2 = HEAP32[4884>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  _EmitWarn(4,127,$vararg_buffer);
 }
 $4 = $1;
 $5 = ($4|0)!=(0);
 $6 = $0;
 do {
  if ($5) {
   $7 = ((($6)) + 9|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8&255) >>> 1;
   $10 = $9 & 1;
   $11 = ($10<<24>>24)!=(0);
   $12 = $0;
   $13 = ((($12)) + 98|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)!=(0);
   if ($11) {
    $17 = $16 ? 6 : 8;
    $next_ins_size = $17;
    break;
   } else {
    $18 = $16 ? 7 : 5;
    $next_ins_size = $18;
    break;
   }
  } else {
   $19 = ((($6)) + 98|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)!=(0);
   $23 = $22 ? 5 : 3;
   $next_ins_size = $23;
  }
 } while(0);
 $24 = $0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 6|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 ^ 1;
 $31 = $30&255;
 _OutputByte($31);
 $32 = $next_ins_size;
 $33 = $32&255;
 _OutputByte($33);
 $34 = $0;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = 374;
 $36 = HEAP16[(77958)>>1]|0;
 $37 = $36&65535;
 $38 = (68332 + ($37<<3)|0);
 $39 = $0;
 $40 = ((($39)) + 12|0);
 HEAP32[$40>>2] = $38;
 STACKTOP = sp;return;
}
function _ParseCmdline($cmdline,$pCntArgs) {
 $cmdline = $cmdline|0;
 $pCntArgs = $pCntArgs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i = 0, $len = 0, $paramfile = 0, $str = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $paramfile = sp + 32|0;
 $1 = $cmdline;
 $2 = $pCntArgs;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $str = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = ((6020) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $i;
   $12 = ((6020) + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _MemFree($13);
   $14 = $i;
   $15 = ((6020) + ($14<<2)|0);
   HEAP32[$15>>2] = 0;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 L7: while(1) {
  $18 = $str;
  $19 = ($18|0)!=(0|0);
  $20 = $str;
  if (!($19)) {
   label = 26;
   break;
  }
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  switch ($22|0) {
  case 9: case 32:  {
   $23 = $str;
   $24 = ((($23)) + 1|0);
   $str = $24;
   continue L7;
   break;
  }
  case 0:  {
   $25 = $1;
   $26 = (_getnextcmdstring($25)|0);
   $str = $26;
   continue L7;
   break;
  }
  case 45:  {
   $27 = $str;
   $28 = ((($27)) + 1|0);
   $str = $28;
   $29 = $str;
   $30 = $1;
   HEAP32[$30>>2] = $29;
   $31 = $1;
   _ProcessOption($31,$paramfile);
   $32 = $2;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   $35 = $1;
   $36 = HEAP32[$35>>2]|0;
   $str = $36;
   continue L7;
   break;
  }
  case 64:  {
   $37 = HEAP32[6148>>2]|0;
   $38 = ($37|0)>=(15);
   if ($38) {
    label = 12;
    break L7;
   }
   $40 = $str;
   $41 = ((($40)) + 1|0);
   $str = $41;
   $42 = HEAP32[6148>>2]|0;
   $43 = ($42|0)!=(0);
   $44 = $str;
   if ($43) {
    $45 = (_GetNameToken($paramfile,$44,4095,64)|0);
    $46 = HEAP32[6148>>2]|0;
    $47 = (6152 + ($46<<2)|0);
    HEAP32[$47>>2] = $45;
   } else {
    (_strcpy($paramfile,$44)|0);
    $48 = $str;
    $49 = $str;
    $50 = (_strlen($49)|0);
    $51 = (($48) + ($50)|0);
    $52 = HEAP32[6148>>2]|0;
    $53 = (6152 + ($52<<2)|0);
    HEAP32[$53>>2] = $51;
   }
   $54 = HEAP32[6148>>2]|0;
   $55 = (6212 + ($54<<2)|0);
   HEAP32[$55>>2] = 0;
   $str = 0;
   $56 = HEAP8[$paramfile>>0]|0;
   $57 = ($56<<24>>24)!=(0);
   if ($57) {
    $58 = (_getenv(($paramfile|0))|0);
    $str = $58;
   }
   $59 = $str;
   $60 = ($59|0)==(0|0);
   if ($60) {
    $61 = (_ReadParamFile($paramfile)|0);
    $str = $61;
    $62 = $str;
    $63 = HEAP32[6148>>2]|0;
    $64 = (6212 + ($63<<2)|0);
    HEAP32[$64>>2] = $62;
    $65 = $str;
    $66 = ($65|0)==(0|0);
    if ($66) {
     $67 = HEAP32[6148>>2]|0;
     $68 = (6152 + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $str = $69;
     continue L7;
    }
   }
   $70 = HEAP32[6148>>2]|0;
   $71 = (($70) + 1)|0;
   HEAP32[6148>>2] = $71;
   continue L7;
   break;
  }
  default: {
   label = 22;
   break L7;
  }
  }
 }
 if ((label|0) == 12) {
  (_EmitErr(100,$vararg_buffer)|0);
  $39 = $1;
  HEAP32[$39>>2] = 109841;
  $0 = 0;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 22) {
  $72 = HEAP32[6148>>2]|0;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $str;
   $75 = (_GetNameToken($paramfile,$74,4095,64)|0);
   $str = $75;
   _get_fname(0,$paramfile);
  } else {
   $76 = $str;
   $77 = (_strlen($76)|0);
   $len = $77;
   $78 = $str;
   _get_fname(0,$78);
   $79 = $len;
   $80 = $str;
   $81 = (($80) + ($79)|0);
   $str = $81;
  }
  $82 = $2;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$82>>2] = $84;
  $85 = $str;
  $86 = $1;
  HEAP32[$86>>2] = $85;
  $87 = HEAP32[(6020)>>2]|0;
  $0 = $87;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 26) {
  $88 = $1;
  HEAP32[$88>>2] = $20;
  $0 = 0;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _CmdlineFini() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (6132 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $i;
   $7 = (6132 + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _MemFree($8);
   $9 = $i;
   $10 = (6132 + ($9<<2)|0);
   HEAP32[$10>>2] = 0;
  }
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(9);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = ((6020) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $i;
   $20 = ((6020) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   _MemFree($21);
   $22 = $i;
   $23 = ((6020) + ($22<<2)|0);
   HEAP32[$23>>2] = 0;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(3);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = ((6056) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $q = $30;
  while(1) {
   $31 = $q;
   $32 = ($31|0)!=(0|0);
   if (!($32)) {
    break;
   }
   $33 = $q;
   $34 = HEAP32[$33>>2]|0;
   $p = $34;
   $35 = $q;
   _MemFree($35);
   $36 = $p;
   $q = $36;
  }
  $37 = $i;
  $38 = ((6056) + ($37<<2)|0);
  HEAP32[$38>>2] = 0;
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 STACKTOP = sp;return;
}
function _getnextcmdstring($cmdline) {
 $cmdline = $cmdline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cmdline;
 $2 = HEAP32[6148>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[6148>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[6148>>2] = $5;
  $6 = HEAP32[6148>>2]|0;
  $7 = (6212 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[6148>>2]|0;
   $11 = (6212 + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   _MemFree($12);
  }
  $13 = HEAP32[6148>>2]|0;
  $14 = (6152 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $0 = $15;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $16 = $1;
 $dst = $16;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $src = $18;
 while(1) {
  $19 = $src;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0|0);
  $22 = $src;
  if (!($21)) {
   break;
  }
  $23 = ((($22)) + 4|0);
  $src = $23;
  $24 = HEAP32[$22>>2]|0;
  $25 = $dst;
  $26 = ((($25)) + 4|0);
  $dst = $26;
  HEAP32[$25>>2] = $24;
 }
 $27 = HEAP32[$22>>2]|0;
 $28 = $dst;
 HEAP32[$28>>2] = $27;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _ProcessOption($cmdline,$buffer) {
 $cmdline = $cmdline|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $opt = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $cmdline;
 $1 = $buffer;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $p = $3;
 $4 = $p;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(48);
 do {
  if ($7) {
   $8 = $p;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)<=(57);
   if ($11) {
    $12 = $p;
    $13 = (_GetNumber($12)|0);
    $p = $13;
    $14 = HEAP32[6272>>2]|0;
    $15 = ($14>>>0)<(11);
    if (!($15)) {
     $25 = $0;
     $26 = HEAP32[$25>>2]|0;
     $p = $26;
     break;
    }
    $16 = $1;
    $17 = $p;
    $18 = (_GetNameToken($16,$17,16,0)|0);
    $p = $18;
    $19 = $p;
    $20 = $0;
    HEAP32[$20>>2] = $19;
    $21 = HEAP32[6272>>2]|0;
    $22 = (6276 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $1;
    _SetCpuCmdline($23,$24);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = ($27>>>0)<(80);
  if (!($28)) {
   break;
  }
  $29 = $p;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = $i;
  $33 = (6320 + (($32*12)|0)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($31|0)==($36|0);
  if ($37) {
   $38 = $i;
   $39 = (6320 + (($38*12)|0)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 1|0);
   $opt = $41;
   $j = 1;
   while(1) {
    $42 = $opt;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (_isalnum($44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     break;
    }
    $47 = $opt;
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = $j;
    $51 = $p;
    $52 = (($51) + ($50)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    $55 = ($49|0)==($54|0);
    if (!($55)) {
     break;
    }
    $56 = $opt;
    $57 = ((($56)) + 1|0);
    $opt = $57;
    $58 = $j;
    $59 = (($58) + 1)|0;
    $j = $59;
   }
   $60 = $opt;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = (_isalnum($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    label = 14;
    break;
   }
  }
  $139 = $i;
  $140 = (($139) + 1)|0;
  $i = $140;
 }
 do {
  if ((label|0) == 14) {
   $65 = $j;
   $66 = $p;
   $67 = (($66) + ($65)|0);
   $p = $67;
   $68 = $i;
   $69 = (6320 + (($68*12)|0)|0);
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[6272>>2] = $71;
   L22: while(1) {
    $72 = $opt;
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 << 24 >> 24;
    L24: do {
     switch ($74|0) {
     case 0:  {
      break L22;
      break;
     }
     case 35:  {
      $97 = $p;
      $98 = HEAP8[$97>>0]|0;
      $99 = $98 << 24 >> 24;
      $100 = ($99|0)>=(48);
      if ($100) {
       $101 = $p;
       $102 = HEAP8[$101>>0]|0;
       $103 = $102 << 24 >> 24;
       $104 = ($103|0)<=(57);
       if ($104) {
        $105 = $p;
        $106 = (_GetNumber($105)|0);
        $p = $106;
       }
      }
      break;
     }
     case 64: case 36:  {
      $107 = $1;
      HEAP32[7280>>2] = $107;
      $108 = $1;
      $109 = $p;
      $110 = $opt;
      $111 = HEAP8[$110>>0]|0;
      $112 = (_GetNameToken($108,$109,4095,$111)|0);
      $p = $112;
      break;
     }
     case 61:  {
      $113 = $p;
      $114 = HEAP8[$113>>0]|0;
      $115 = $114 << 24 >> 24;
      $116 = ($115|0)==(61);
      if (!($116)) {
       $117 = $p;
       $118 = HEAP8[$117>>0]|0;
       $119 = $118 << 24 >> 24;
       $120 = ($119|0)==(35);
       if (!($120)) {
        break L24;
       }
      }
      $121 = $p;
      $122 = ((($121)) + 1|0);
      $p = $122;
      break;
     }
     case 94:  {
      while(1) {
       $123 = $p;
       $124 = HEAP8[$123>>0]|0;
       $125 = $124 << 24 >> 24;
       $126 = (_isspace($125)|0);
       $127 = ($126|0)!=(0);
       $128 = $p;
       if (!($127)) {
        break;
       }
       $129 = ((($128)) + 1|0);
       $p = $129;
      }
      $130 = HEAP8[$128>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ($131|0)==(0);
      if ($132) {
       $133 = $0;
       $134 = (_getnextcmdstring($133)|0);
       $p = $134;
       $135 = $p;
       $136 = ($135|0)==(0|0);
       if ($136) {
        label = 32;
        break L22;
       }
      }
      break;
     }
     default: {
      (_InternalError(82954,903)|0);
     }
     }
    } while(0);
    $137 = $opt;
    $138 = ((($137)) + 1|0);
    $opt = $138;
   }
   if ((label|0) == 32) {
    _EmitWarn(1,251,$vararg_buffer);
    STACKTOP = sp;return;
   }
   $75 = $p;
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 << 24 >> 24;
   $78 = ($77|0)==(32);
   if (!($78)) {
    $79 = $p;
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = ($81|0)==(45);
    if (!($82)) {
     $83 = $p;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)==(0);
     if (!($86)) {
      $87 = $p;
      $88 = HEAP8[$87>>0]|0;
      $89 = $88 << 24 >> 24;
      $90 = ($89|0)==(9);
      if (!($90)) {
       break;
      }
     }
    }
   }
   $91 = $p;
   $92 = $0;
   HEAP32[$92>>2] = $91;
   $93 = $i;
   $94 = (6320 + (($93*12)|0)|0);
   $95 = ((($94)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_v[$96 & 255]();
   STACKTOP = sp;return;
  }
 } while(0);
 $141 = $0;
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + -1|0);
 HEAP32[$vararg_buffer1>>2] = $143;
 _EmitWarn(1,109,$vararg_buffer1);
 $144 = $0;
 HEAP32[$144>>2] = 109841;
 STACKTOP = sp;return;
}
function _GetNameToken($dst,$str,$max,$type) {
 $dst = $dst|0;
 $str = $str|0;
 $max = $max|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $equatefound = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $str;
 $2 = $max;
 $3 = $type;
 $equatefound = 0;
 L1: while(1) {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(34);
  if ($7) {
   label = 3;
   break;
  }
  while(1) {
   $39 = $2;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    break L1;
   }
   $41 = $1;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = ($43|0)==(0);
   if ($44) {
    break L1;
   }
   $45 = $1;
   $46 = HEAP8[$45>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = ($47|0)==(32);
   if ($48) {
    label = 16;
   } else {
    $49 = $1;
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = ($51|0)==(9);
    if ($52) {
     label = 16;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $53 = HEAP32[6148>>2]|0;
    $54 = ($53|0)!=(0);
    if ($54) {
     break L1;
    }
    $55 = $3;
    $56 = $55 << 24 >> 24;
    $57 = ($56|0)!=(64);
    if ($57) {
     break L1;
    }
   }
   $58 = $3;
   $59 = $58 << 24 >> 24;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = $1;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = ($63|0)==(45);
    if ($64) {
     break L1;
    }
   }
   $65 = $1;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 << 24 >> 24;
   $68 = ($67|0)==(61);
   if ($68) {
    $69 = $3;
    $70 = $69 << 24 >> 24;
    $71 = ($70|0)==(36);
    if ($71) {
     $72 = $equatefound;
     $73 = $72&255;
     $74 = ($73|0)==(0);
     if ($74) {
      $equatefound = 1;
      $75 = $1;
      $76 = ((($75)) + 1|0);
      $1 = $76;
      $77 = HEAP8[$75>>0]|0;
      $78 = $0;
      $79 = ((($78)) + 1|0);
      $0 = $79;
      HEAP8[$78>>0] = $77;
      $80 = $1;
      $81 = HEAP8[$80>>0]|0;
      $82 = $81 << 24 >> 24;
      $83 = ($82|0)==(34);
      if ($83) {
       continue L1;
      }
     }
    }
   }
   $84 = $1;
   $85 = ((($84)) + 1|0);
   $1 = $85;
   $86 = HEAP8[$84>>0]|0;
   $87 = $0;
   $88 = ((($87)) + 1|0);
   $0 = $88;
   HEAP8[$87>>0] = $86;
   $89 = $2;
   $90 = (($89) + -1)|0;
   $2 = $90;
  }
 }
 L21: do {
  if ((label|0) == 3) {
   $8 = $1;
   $9 = ((($8)) + 1|0);
   $1 = $9;
   while(1) {
    $10 = $2;
    $11 = ($10|0)!=(0);
    if (!($11)) {
     break L21;
    }
    $12 = $1;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)!=(0);
    if (!($15)) {
     break L21;
    }
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17 << 24 >> 24;
    $19 = ($18|0)==(34);
    $20 = $1;
    if ($19) {
     break;
    }
    $22 = HEAP8[$20>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = ($23|0)==(92);
    if ($24) {
     $25 = $1;
     $26 = ((($25)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 << 24 >> 24;
     $29 = ($28|0)==(34);
     if ($29) {
      $30 = $1;
      $31 = ((($30)) + 1|0);
      $1 = $31;
     }
    }
    $32 = $1;
    $33 = ((($32)) + 1|0);
    $1 = $33;
    $34 = HEAP8[$32>>0]|0;
    $35 = $0;
    $36 = ((($35)) + 1|0);
    $0 = $36;
    HEAP8[$35>>0] = $34;
    $37 = $2;
    $38 = (($37) + -1)|0;
    $2 = $38;
   }
   $21 = ((($20)) + 1|0);
   $1 = $21;
  }
 } while(0);
 $91 = $0;
 HEAP8[$91>>0] = 0;
 $92 = $1;
 STACKTOP = sp;return ($92|0);
}
function _ReadParamFile($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ch = 0, $env = 0, $file = 0, $len = 0, $str = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $env = 0;
 $2 = $1;
 $3 = (_fopen($2,87247)|0);
 $file = $3;
 $4 = $file;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $1;
  $7 = (_ErrnoStr()|0);
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  _Fatal(106,$vararg_buffer);
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $len = 0;
 $8 = $file;
 $9 = (_fseek($8,0,2)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $file;
  $12 = (_ftell($11)|0);
  $len = $12;
  $13 = $file;
  _rewind($13);
  $14 = $len;
  $15 = (($14) + 1)|0;
  $16 = (_MemAlloc($15)|0);
  $env = $16;
  $17 = $env;
  $18 = $len;
  $19 = $file;
  (_fread($17,1,$18,$19)|0);
  $20 = $len;
  $21 = $env;
  $22 = (($21) + ($20)|0);
  HEAP8[$22>>0] = 0;
 }
 $23 = $file;
 (_fclose($23)|0);
 $24 = $len;
 $25 = ($24|0)==(0);
 if ($25) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $26 = $env;
 $str = $26;
 while(1) {
  $27 = $str;
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $str;
  $31 = HEAP8[$30>>0]|0;
  $ch = $31;
  $32 = $ch;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)==(13);
  if ($34) {
   label = 11;
  } else {
   $35 = $ch;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)==(10);
   if ($37) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $38 = $str;
   HEAP8[$38>>0] = 32;
  }
  $39 = $str;
  $40 = ((($39)) + 1|0);
  $str = $40;
 }
 $41 = $env;
 $0 = $41;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _get_fname($type,$token) {
 $type = $type|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $or$cond = 0, $pName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 16|0;
 $0 = $type;
 $1 = $token;
 $2 = $1;
 $3 = (_GetFNamePart($2)|0);
 $pName = $3;
 $4 = $pName;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $0;
  $9 = ($8|0)<(4);
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $10 = $0;
  $11 = (6132 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $0;
   $15 = (6132 + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _MemFree($16);
  }
  $17 = $1;
  $18 = (_strlen($17)|0);
  $19 = (($18) + 1)|0;
  $20 = (_MemAlloc($19)|0);
  $21 = $0;
  $22 = (6132 + ($21<<2)|0);
  HEAP32[$22>>2] = $20;
  $23 = $0;
  $24 = (6132 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  (_strcpy($25,$26)|0);
  STACKTOP = sp;return;
 }
 HEAP8[$name>>0] = 0;
 $27 = $pName;
 $28 = $1;
 $29 = ($27|0)==($28|0);
 $30 = $0;
 $31 = ($30|0)<(4);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $0;
  $33 = (6132 + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $0;
   $37 = (6132 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   (_strcpy($name,$38)|0);
  }
 }
 $39 = $1;
 (_strcat($name,$39)|0);
 $40 = $0;
 $41 = ((6020) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = $0;
  $45 = ((6020) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  _MemFree($46);
 }
 $47 = (_strlen($name)|0);
 $48 = (($47) + 1)|0;
 $49 = (_MemAlloc($48)|0);
 $50 = $0;
 $51 = ((6020) + ($50<<2)|0);
 HEAP32[$51>>2] = $49;
 $52 = $0;
 $53 = ((6020) + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 (_strcpy($54,$name)|0);
 STACKTOP = sp;return;
}
function _GetNumber($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 HEAP32[6272>>2] = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = ($3|0)>=(48);
  if (!($4)) {
   label = 5;
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)<=(57);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = HEAP32[6272>>2]|0;
  $10 = ($9*10)|0;
  $11 = $0;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (($10) + ($13))|0;
  $15 = (($14) - 48)|0;
  HEAP32[6272>>2] = $15;
  $16 = $0;
  $17 = ((($16)) + 1|0);
  $0 = $17;
 }
 if ((label|0) == 5) {
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _SetCpuCmdline($value,$parm) {
 $value = $value|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $value;
 $1 = $parm;
 $2 = HEAP32[(6120)>>2]|0;
 $3 = $2 & -65529;
 HEAP32[(6120)>>2] = $3;
 $4 = $0;
 $5 = HEAP32[(6120)>>2]|0;
 $6 = $5 | $4;
 HEAP32[(6120)>>2] = $6;
 while(1) {
  $7 = $1;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(112);
  $14 = HEAP32[(6120)>>2]|0;
  $15 = ($14>>>0)>=(32);
  $or$cond = $13 & $15;
  if (!($or$cond)) {
   break;
  }
  $16 = HEAP32[(6120)>>2]|0;
  $17 = $16 | 8;
  HEAP32[(6120)>>2] = $17;
  $18 = $1;
  $19 = ((($18)) + 1|0);
  $1 = $19;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 HEAP32[$vararg_buffer>>2] = $20;
 _EmitWarn(1,134,$vararg_buffer);
 STACKTOP = sp;return;
}
function _Set_h() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _PrintUsage();
 _exit(1);
 // unreachable;
}
function _Set_ofmt() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 $1 = $0 & 255;
 HEAP32[(6100)>>2] = $1;
 $2 = HEAP32[6272>>2]|0;
 $3 = $2 >>> 8;
 HEAP32[(6104)>>2] = $3;
 return;
}
function _Set_Cp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6079)>>0] = 1;
 HEAP8[(6080)>>0] = 0;
 return;
}
function _Set_Cu() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6079)>>0] = 0;
 HEAP8[(6080)>>0] = 1;
 return;
}
function _Set_Cx() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6079)>>0] = 0;
 HEAP8[(6080)>>0] = 0;
 return;
}
function _Set_c() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _Set_D() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _queue_item(1,$0);
 return;
}
function _Set_EP() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6081)>>0] = 1;
 _Set_q();
 return;
}
function _Set_True() {
 var $0 = 0, $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[6272>>2]|0;
 $1 = (6004 + ($0)|0);
 $p = $1;
 $2 = $p;
 HEAP8[$2>>0] = 1;
 STACKTOP = sp;return;
}
function _Set_e() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 HEAP32[(6012)>>2] = $0;
 return;
}
function _Set_Fd() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _get_fname(4,$0);
 HEAP8[(6078)>>0] = 1;
 return;
}
function _Set_Fi() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _queue_item(0,$0);
 return;
}
function _Set_Fl() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _get_fname(2,$0);
 HEAP8[(6077)>>0] = 1;
 return;
}
function _Set_Fo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _get_fname(1,$0);
 return;
}
function _Set_FPx() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 HEAP32[(6008)>>2] = $0;
 return;
}
function _Set_fp() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(6120)>>2]|0;
 $1 = $0 & -8;
 HEAP32[(6120)>>2] = $1;
 $2 = HEAP32[6272>>2]|0;
 HEAP32[(6120)>>2] = $2;
 return;
}
function _Set_Fw() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _get_fname(3,$0);
 return;
}
function _Set_G() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 HEAP32[(6112)>>2] = $0;
 return;
}
function _Set_I() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7280>>2]|0;
 _queue_item(2,$0);
 return;
}
function _Set_m() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 HEAP32[(6116)>>2] = $0;
 return;
}
function _Set_n() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 $1 = HEAP32[7280>>2]|0;
 _set_option_n_name($0,$1);
 return;
}
function _Set_nologo() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[83932>>0] = 1;
 return;
}
function _Set_q() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Set_nologo();
 HEAP8[6004>>0] = 1;
 return;
}
function _Set_Sa() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6086)>>0] = 1;
 HEAP8[(6087)>>0] = 1;
 HEAP32[(6088)>>2] = 2;
 return;
}
function _Set_WX() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6018)>>0] = 1;
 return;
}
function _Set_W() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[6272>>2]|0;
 $1 = ($0>>>0)<=(4);
 if ($1) {
  $2 = HEAP32[6272>>2]|0;
  $3 = $2&255;
  HEAP8[(6017)>>0] = $3;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = 83261;
  _EmitWarn(1,195,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _Set_w() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Set_WX();
 HEAP8[(6017)>>0] = 0;
 return;
}
function _Set_Zd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6005)>>0] = 1;
 return;
}
function _Set_Zi() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _Set_Zd();
 HEAP8[(6006)>>0] = 1;
 $0 = HEAP32[6272>>2]|0;
 $1 = ($0>>>0)<=(3);
 if ($1) {
  $2 = HEAP32[6272>>2]|0;
  $3 = $2&255;
  HEAP8[(6007)>>0] = $3;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = 83258;
  _EmitWarn(1,195,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _Set_Zp() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $power = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $power = 0;
 while(1) {
  $0 = $power;
  $1 = $0&255;
  $2 = 1 << $1;
  $3 = ($2|0)<=(32);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $power;
  $5 = $4&255;
  $6 = 1 << $5;
  $7 = HEAP32[6272>>2]|0;
  $8 = ($6|0)==($7|0);
  $9 = $power;
  if ($8) {
   label = 4;
   break;
  }
  $10 = (($9) + 1)<<24>>24;
  $power = $10;
 }
 if ((label|0) == 4) {
  HEAP8[(6108)>>0] = $9;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  HEAP32[$vararg_buffer>>2] = 83255;
  _EmitWarn(1,195,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _Set_zcm() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(6073)>>0] = 0;
 return;
}
function _Set_zf() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 HEAP32[(6124)>>2] = $0;
 return;
}
function _Set_zt() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6272>>2]|0;
 $1 = $0&255;
 HEAP8[(6074)>>0] = $1;
 return;
}
function _set_option_n_name($idx,$name) {
 $idx = $idx|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $idx;
 $1 = $name;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(46);
 if ($5) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (_isalnum($8)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $1;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(95);
   if (!($14)) {
    $15 = $1;
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)==(64);
    if (!($18)) {
     $19 = $1;
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = ($21|0)==(36);
     if (!($22)) {
      $23 = $1;
      $24 = HEAP8[$23>>0]|0;
      $25 = $24 << 24 >> 24;
      $26 = ($25|0)==(63);
      if (!($26)) {
       (_EmitError(234)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $27 = $0;
 $28 = ((6020) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $0;
  $32 = ((6020) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  _MemFree($33);
 }
 $34 = $1;
 $35 = (_strlen($34)|0);
 $36 = (($35) + 1)|0;
 $37 = (_MemAlloc($36)|0);
 $38 = $0;
 $39 = ((6020) + ($38<<2)|0);
 HEAP32[$39>>2] = $37;
 $40 = $0;
 $41 = ((6020) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $1;
 (_strcpy($42,$43)|0);
 STACKTOP = sp;return;
}
function _queue_item($i,$string) {
 $i = $i|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $string;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $4 = (8 + ($3))|0;
 $5 = (_MemAlloc($4)|0);
 $p = $5;
 $6 = $p;
 HEAP32[$6>>2] = 0;
 $7 = $p;
 $8 = ((($7)) + 4|0);
 $9 = $1;
 (_strcpy($8,$9)|0);
 $10 = $0;
 $11 = ((6056) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $q = $12;
 $13 = $q;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $22 = $p;
  $23 = $0;
  $24 = ((6056) + ($23<<2)|0);
  HEAP32[$24>>2] = $22;
  STACKTOP = sp;return;
 }
 while(1) {
  $15 = $q;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $q;
  $19 = HEAP32[$18>>2]|0;
  $q = $19;
 }
 $20 = $p;
 $21 = $q;
 HEAP32[$21>>2] = $20;
 STACKTOP = sp;return;
}
function _codegen($CodeInfo,$oldofs) {
 $CodeInfo = $CodeInfo|0;
 $oldofs = $oldofs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $opnd1 = 0, $or$cond = 0, $retcode = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $tbl_op1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $oldofs;
 $retcode = -1;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 8;
 $10 = HEAP32[(544)>>2]|0;
 $11 = $10 & 8;
 $12 = ($9>>>0)>($11>>>0);
 if ($12) {
  (_EmitError(30)|0);
  $0 = -1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $opnd1 = $15;
 $16 = $opnd1;
 $17 = $16 & 458752;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $19 = $opnd1;
   $20 = ($19|0)==(65536);
   if ($20) {
    $opnd1 = 458752;
    break;
   }
   $21 = $opnd1;
   $22 = ($21|0)==(131072);
   if ($22) {
    $opnd1 = 393216;
   }
  }
 } while(0);
 $23 = $1;
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25>>>0)>=(1113);
 do {
  if ($26) {
   $27 = $1;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) - 1113)|0;
   $31 = (99872 + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 & 1;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $opnd1;
    $37 = $36 & 536870976;
    $38 = ($37|0)!=(0);
    if ($38) {
     $39 = $1;
     $40 = ((($39)) + 24|0);
     $41 = ((($40)) + 24|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $42 & 32;
     $44 = ($43|0)!=(0);
     if ($44) {
      $45 = $1;
      $46 = ((($45)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (($47) - 1113)|0;
      $49 = (99872 + ($48)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      $52 = $51 & 32;
      $53 = ($52|0)!=(0);
      if (!($53)) {
       (_EmitErr(49,$vararg_buffer)|0);
       $0 = -1;
       $125 = $0;
       STACKTOP = sp;return ($125|0);
      }
     }
     $54 = $opnd1;
     $55 = $54 & 64;
     $56 = ($55|0)!=(0);
     $57 = $opnd1;
     if ($56) {
      $58 = $57 | 32;
      $opnd1 = $58;
      break;
     } else {
      $59 = $57 | 268435456;
      $opnd1 = $59;
      break;
     }
    }
   }
  }
 } while(0);
 while(1) {
  $60 = $1;
  $61 = ((($60)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (20136 + (($64*12)|0)|0);
  $66 = HEAP32[$65>>2]|0;
  $tbl_op1 = $66;
  $67 = $tbl_op1;
  $68 = ($67|0)==(0);
  $69 = $opnd1;
  $70 = ($69|0)==(0);
  $or$cond = $68 & $70;
  if ($or$cond) {
   label = 18;
   break;
  }
  $75 = $opnd1;
  $76 = $tbl_op1;
  $77 = $75 & $76;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $tbl_op1;
   $switch$split2D = ($79|0)<(4259840);
   L29: do {
    if ($switch$split2D) {
     $switch$split12D = ($79|0)<(262144);
     if ($switch$split12D) {
      switch ($79|0) {
      case 131072:  {
       break;
      }
      default: {
       label = 29;
       break L29;
      }
      }
     } else {
      switch ($79|0) {
      case 262144:  {
       break;
      }
      default: {
       label = 29;
       break L29;
      }
      }
     }
     $80 = $1;
     $81 = $tbl_op1;
     $82 = (_check_operand_2($80,$81)|0);
     $retcode = $82;
    } else {
     $switch$split42D = ($79|0)<(8847360);
     if ($switch$split42D) {
      switch ($79|0) {
      case 4259840:  {
       break;
      }
      default: {
       label = 29;
       break L29;
      }
      }
      $95 = $1;
      $96 = ((($95)) + 24|0);
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(3);
      if (!($99)) {
       break;
      }
      $100 = $1;
      $101 = (_check_operand_2($100,0)|0);
      $retcode = $101;
      break;
     }
     switch ($79|0) {
     case 8847360:  {
      break;
     }
     default: {
      label = 29;
      break L29;
     }
     }
     $83 = $1;
     $84 = ((($83)) + 24|0);
     $85 = ((($84)) + 8|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)<=(255);
     if ($87) {
      $88 = $1;
      $89 = ((($88)) + 24|0);
      $90 = ((($89)) + 8|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)>=(-128);
      if ($92) {
       $93 = $1;
       $94 = (_check_operand_2($93,65536)|0);
       $retcode = $94;
      }
     }
    }
   } while(0);
   if ((label|0) == 29) {
    label = 0;
    $102 = $1;
    $103 = $1;
    $104 = ((($103)) + 24|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (_check_operand_2($102,$105)|0);
    $retcode = $106;
   }
   $107 = $retcode;
   $108 = ($107|0)==(0);
   if ($108) {
    label = 31;
    break;
   }
  }
  $112 = $1;
  $113 = ((($112)) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($114)) + 8|0);
  HEAP32[$113>>2] = $115;
  $116 = $1;
  $117 = ((($116)) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 2|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = ($120&255) >>> 3;
  $122 = $121 & 1;
  $123 = $122&255;
  $124 = ($123|0)==(0);
  if (!($124)) {
   label = 35;
   break;
  }
 }
 if ((label|0) == 18) {
  $71 = $1;
  _output_opc($71);
  $72 = HEAP32[(380)>>2]|0;
  $73 = ($72|0)!=(0|0);
  if ($73) {
   $74 = $2;
   _LstWrite(1,$74,0);
  }
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 else if ((label|0) == 31) {
  $109 = HEAP32[(380)>>2]|0;
  $110 = ($109|0)!=(0|0);
  if ($110) {
   $111 = $2;
   _LstWrite(1,$111,0);
  }
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 else if ((label|0) == 35) {
  (_EmitError(49)|0);
  $0 = -1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 return (0)|0;
}
function _output_opc($CodeInfo) {
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byte1 = 0, $fpfix = 0, $ins = 0, $lbyte = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $ins = $3;
 $fpfix = 0;
 $4 = HEAP8[(6005)>>0]|0;
 $5 = ($4<<24>>24)!=(0);
 if ($5) {
  $6 = (_get_curr_srcfile()|0);
  $7 = (_GetLineNumber()|0);
  _AddLinnumDataRef($6,$7);
 }
 $8 = $ins;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 64775;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(1089);
  if ($17) {
   $18 = $0;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(1095);
   if ($21) {
    $22 = $0;
    $23 = ((($22)) + 9|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 & -3;
    HEAP8[$23>>0] = $25;
   }
  }
 }
 $26 = $ins;
 $27 = ((($26)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $29 & 240;
 $31 = HEAP32[(544)>>2]|0;
 $32 = $31 & 240;
 $33 = ($30>>>0)>($32>>>0);
 if ($33) {
  label = 10;
 } else {
  $34 = $ins;
  $35 = ((($34)) + 4|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 & 7;
  $39 = HEAP32[(544)>>2]|0;
  $40 = $39 & 7;
  $41 = ($38>>>0)>($40>>>0);
  if ($41) {
   label = 10;
  } else {
   $42 = $ins;
   $43 = ((($42)) + 4|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = $45 & 65280;
   $47 = HEAP32[(544)>>2]|0;
   $48 = $47 & 65280;
   $49 = ($46>>>0)>($48>>>0);
   if ($49) {
    label = 10;
   }
  }
 }
 do {
  if ((label|0) == 10) {
   $50 = $ins;
   $51 = ((($50)) + 4|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = ($53|0)==(48);
   if ($54) {
    $55 = $0;
    $56 = ((($55)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) - 373)|0;
    $59 = (77956 + ($58<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = (68332 + ($61<<3)|0);
    $63 = ((($62)) + 4|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64&65535;
    $66 = $65 & 240;
    $67 = ($66|0)<=(48);
    if ($67) {
     (_EmitError(238)|0);
     break;
    }
   }
   (_EmitError(30)|0);
  }
 } while(0);
 $68 = HEAP32[(560)>>2]|0;
 $69 = $68 >>> 9;
 $70 = $69 & 1;
 $71 = ($70|0)==(1);
 if ($71) {
  $72 = $0;
  $73 = ((($72)) + 98|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)==(0);
  if ($76) {
   $77 = $ins;
   $78 = ((($77)) + 4|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79&65535;
   $81 = $80 & 7;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $ins;
    $84 = ((($83)) + 2|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85 & 7;
    $87 = $86&255;
    $88 = ($87|0)!=(5);
    if ($88) {
     $fpfix = 1;
     $89 = $0;
     _AddFloatingPointEmulationFixup($89);
    }
   }
  }
 }
 $90 = $0;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)!=(-2);
 do {
  if ($92) {
   $93 = $0;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) - 373)|0;
   $96 = (77956 + ($95<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97&65535;
   $99 = (68332 + ($98<<3)|0);
   $100 = ((($99)) + 2|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 & 7;
   $tmp = $102;
   $103 = HEAP32[(560)>>2]|0;
   $104 = $103 >>> 6;
   $105 = $104 & 1;
   $106 = ($105|0)==(1);
   if ($106) {
    $107 = $tmp;
    $108 = $107&255;
    $109 = ($108|0)==(2);
    if ($109) {
     $110 = $ins;
     $111 = ((($110)) + 2|0);
     $112 = HEAP8[$111>>0]|0;
     $113 = $112 & 7;
     $114 = $113&255;
     $115 = ($114|0)==(3);
     if ($115) {
      $tmp = 3;
     }
    }
   }
   $116 = $ins;
   $117 = ((($116)) + 2|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118 & 7;
   $120 = $119&255;
   $121 = $tmp;
   $122 = $121&255;
   $123 = ($120|0)!=($122|0);
   if ($123) {
    (_EmitError(28)|0);
    break;
   } else {
    $124 = $0;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) - 373)|0;
    $127 = (77956 + ($126<<1)|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128&65535;
    $130 = (68332 + ($129<<3)|0);
    $131 = ((($130)) + 6|0);
    $132 = HEAP8[$131>>0]|0;
    _OutputByte($132);
    break;
   }
  }
 } while(0);
 $133 = $ins;
 $134 = ((($133)) + 4|0);
 $135 = HEAP16[$134>>1]|0;
 $136 = $135&65535;
 $137 = $136 & 7;
 $138 = ($137|0)!=(0);
 do {
  if ($138) {
   $139 = $0;
   $140 = ((($139)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)==(751);
   $143 = $fpfix;
   if ($142) {
    $144 = ($143<<24>>24)!=(0);
    if (!($144)) {
     break;
    }
    _OutputByte(-112);
    break;
   }
   $145 = $143&255;
   $146 = ($145|0)!=(0);
   if (!($146)) {
    $147 = $ins;
    $148 = ((($147)) + 2|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149 & 7;
    $151 = $150&255;
    $152 = ($151|0)==(4);
    if (!($152)) {
     $153 = $ins;
     $154 = ((($153)) + 2|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155 & 7;
     $157 = $156&255;
     $158 = ($157|0)!=(5);
     if (!($158)) {
      break;
     }
     $159 = HEAP32[(544)>>2]|0;
     $160 = $159 & 240;
     $161 = ($160>>>0)<(32);
     if (!($161)) {
      break;
     }
     _OutputByte(-101);
     break;
    }
   }
   _OutputByte(-101);
  }
 } while(0);
 $162 = $ins;
 $163 = ((($162)) + 1|0);
 $164 = HEAP8[$163>>0]|0;
 $165 = $164&255;
 switch ($165|0) {
 case 1:  {
  $166 = $0;
  $167 = ((($166)) + 98|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = ($169|0)>=(1);
  if ($170) {
   $171 = $0;
   $172 = ((($171)) + 9|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173 & -3;
   $175 = $174 | 2;
   HEAP8[$172>>0] = $175;
  }
  break;
 }
 case 2:  {
  $176 = $0;
  $177 = ((($176)) + 98|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = ($179|0)==(0);
  if ($180) {
   $181 = $0;
   $182 = ((($181)) + 9|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183 & -3;
   $185 = $184 | 2;
   HEAP8[$182>>0] = $185;
  }
  break;
 }
 case 3:  {
  $186 = $0;
  $187 = ((($186)) + 98|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $190 = ($189|0)==(1);
  if ($190) {
   $191 = $0;
   $192 = ((($191)) + 9|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 & -2;
   $195 = $194 | 1;
   HEAP8[$192>>0] = $195;
  }
  break;
 }
 case 4:  {
  $196 = $0;
  $197 = ((($196)) + 98|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = ($199|0)!=(1);
  if ($200) {
   $201 = $0;
   $202 = ((($201)) + 9|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203 & -2;
   $205 = $204 | 1;
   HEAP8[$202>>0] = $205;
  }
  break;
 }
 case 21:  {
  $206 = $0;
  $207 = ((($206)) + 9|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = $208 & -3;
  HEAP8[$207>>0] = $209;
  break;
 }
 case 22: case 6:  {
  $210 = $0;
  $211 = ((($210)) + 8|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&255;
  $214 = $213 | 8;
  $215 = $214&255;
  HEAP8[$211>>0] = $215;
  break;
 }
 default: {
 }
 }
 $216 = $0;
 $217 = ((($216)) + 16|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = (22260 + ($218<<3)|0);
 $220 = ((($219)) + 3|0);
 $221 = HEAP8[$220>>0]|0;
 $222 = $221&255;
 $223 = $222 & 8;
 $224 = ($223|0)!=(0);
 L61: do {
  if (!($224)) {
   $225 = $ins;
   $226 = ((($225)) + 1|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = $227&255;
   switch ($228|0) {
   case 26: case 25: case 18:  {
    $229 = $0;
    $230 = ((($229)) + 9|0);
    $231 = HEAP8[$230>>0]|0;
    $232 = $231 & -3;
    $233 = $232 | 2;
    HEAP8[$230>>0] = $233;
    break L61;
    break;
   }
   case 27: case 19:  {
    _OutputByte(-14);
    break L61;
    break;
   }
   case 20: case 5:  {
    _OutputByte(-13);
    break L61;
    break;
   }
   default: {
    break L61;
   }
   }
  }
 } while(0);
 $234 = $0;
 $235 = ((($234)) + 9|0);
 $236 = HEAP8[$235>>0]|0;
 $237 = $236 & 1;
 $238 = $237&255;
 $239 = ($238|0)==(1);
 if ($239) {
  _OutputByte(103);
 }
 $240 = $0;
 $241 = ((($240)) + 9|0);
 $242 = HEAP8[$241>>0]|0;
 $243 = ($242&255) >>> 1;
 $244 = $243 & 1;
 $245 = $244&255;
 $246 = ($245|0)==(1);
 if ($246) {
  $247 = HEAP32[(544)>>2]|0;
  $248 = $247 & 240;
  $249 = ($248>>>0)<(48);
  if ($249) {
   (_EmitError(238)|0);
  }
  _OutputByte(102);
 }
 $250 = $0;
 $251 = ((($250)) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = ($252|0)!=(-2);
 if ($253) {
  $254 = $0;
  $255 = ((($254)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (83270 + ($256)|0);
  $258 = HEAP8[$257>>0]|0;
  _OutputByte($258);
 }
 $259 = $ins;
 $260 = ((($259)) + 2|0);
 $261 = HEAP8[$260>>0]|0;
 $262 = ($261&255) >>> 7;
 $263 = ($262<<24>>24)!=(0);
 if ($263) {
  $264 = $0;
  $265 = ((($264)) + 96|0);
  $266 = HEAP8[$265>>0]|0;
  $tmp = $266;
  $267 = $tmp;
  $268 = $267&255;
  $269 = $268 & 192;
  $270 = $tmp;
  $271 = $270&255;
  $272 = $271 >> 3;
  $273 = $272 & 7;
  $274 = $269 | $273;
  $275 = $tmp;
  $276 = $275&255;
  $277 = $276 << 3;
  $278 = $277 & 56;
  $279 = $274 | $278;
  $280 = $279&255;
  $281 = $0;
  $282 = ((($281)) + 96|0);
  HEAP8[$282>>0] = $280;
  $283 = $0;
  $284 = ((($283)) + 8|0);
  $285 = HEAP8[$284>>0]|0;
  $tmp = $285;
  $286 = $tmp;
  $287 = $286&255;
  $288 = $287 & 250;
  $289 = $tmp;
  $290 = $289&255;
  $291 = $290 & 4;
  $292 = $291 >> 2;
  $293 = $288 | $292;
  $294 = $tmp;
  $295 = $294&255;
  $296 = $295 & 1;
  $297 = $296 << 2;
  $298 = $293 | $297;
  $299 = $298&255;
  $300 = $0;
  $301 = ((($300)) + 8|0);
  HEAP8[$301>>0] = $299;
 }
 $302 = $0;
 $303 = ((($302)) + 16|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = (22260 + ($304<<3)|0);
 $306 = ((($305)) + 3|0);
 $307 = HEAP8[$306>>0]|0;
 $308 = $307&255;
 $309 = $308 & 8;
 $310 = ($309|0)!=(0);
 L83: do {
  if ($310) {
   $lbyte = 0;
   $311 = $ins;
   $312 = ((($311)) + 1|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   switch ($314|0) {
   case 26: case 25: case 18:  {
    $315 = $lbyte;
    $316 = $315&255;
    $317 = $316 | 1;
    $318 = $317&255;
    $lbyte = $318;
    break;
   }
   case 20:  {
    $319 = $lbyte;
    $320 = $319&255;
    $321 = $320 | 2;
    $322 = $321&255;
    $lbyte = $322;
    break;
   }
   case 27: case 19:  {
    $323 = $lbyte;
    $324 = $323&255;
    $325 = $324 | 3;
    $326 = $325&255;
    $lbyte = $326;
    break;
   }
   default: {
   }
   }
   $327 = $0;
   $328 = ((($327)) + 24|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = $329 & 64;
   $331 = ($330|0)!=(0);
   if ($331) {
    label = 72;
   } else {
    $332 = $0;
    $333 = ((($332)) + 24|0);
    $334 = ((($333)) + 24|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = $335 & 536870976;
    $337 = ($336|0)!=(0);
    if ($337) {
     label = 72;
    } else {
     $338 = $0;
     $339 = ((($338)) + 24|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = ($340|0)==(0);
     if ($341) {
      $342 = $0;
      $343 = ((($342)) + 16|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = (($344) - 1113)|0;
      $346 = (99872 + ($345)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = $347&255;
      $349 = $348 & 1;
      $350 = ($349|0)!=(0);
      if ($350) {
       label = 72;
      }
     }
    }
   }
   if ((label|0) == 72) {
    $351 = $lbyte;
    $352 = $351&255;
    $353 = $352 | 4;
    $354 = $353&255;
    $lbyte = $354;
   }
   $355 = $0;
   $356 = ((($355)) + 100|0);
   $357 = HEAP8[$356>>0]|0;
   $358 = ($357<<24>>24)!=(0);
   if ($358) {
    $359 = $0;
    $360 = ((($359)) + 100|0);
    $361 = HEAP8[$360>>0]|0;
    $362 = $361&255;
    $363 = (16 - ($362))|0;
    $364 = $363 << 3;
    $365 = $lbyte;
    $366 = $365&255;
    $367 = $366 | $364;
    $368 = $367&255;
    $lbyte = $368;
   } else {
    $369 = $lbyte;
    $370 = $369&255;
    $371 = $370 | 120;
    $372 = $371&255;
    $lbyte = $372;
   }
   $373 = $ins;
   $374 = ((($373)) + 1|0);
   $375 = HEAP8[$374>>0]|0;
   $376 = $375&255;
   $377 = ($376|0)>=(23);
   if (!($377)) {
    $378 = $0;
    $379 = ((($378)) + 8|0);
    $380 = HEAP8[$379>>0]|0;
    $381 = $380&255;
    $382 = $381 & 11;
    $383 = ($382|0)!=(0);
    if (!($383)) {
     $451 = $0;
     $452 = ((($451)) + 8|0);
     $453 = HEAP8[$452>>0]|0;
     $454 = $453&255;
     $455 = $454 & 4;
     $456 = ($455|0)!=(0);
     $457 = $456 ? 0 : 128;
     $458 = $lbyte;
     $459 = $458&255;
     $460 = $459 | $457;
     $461 = $460&255;
     $lbyte = $461;
     _OutputByte(-59);
     $462 = $lbyte;
     _OutputByte($462);
     break;
    }
   }
   $byte1 = 0;
   _OutputByte(-60);
   $384 = $ins;
   $385 = ((($384)) + 1|0);
   $386 = HEAP8[$385>>0]|0;
   $387 = $386&255;
   switch ($387|0) {
   case 27: case 25: case 23:  {
    $388 = $byte1;
    $389 = $388&255;
    $390 = $389 | 2;
    $391 = $390&255;
    $byte1 = $391;
    break;
   }
   case 26: case 24:  {
    $392 = $byte1;
    $393 = $392&255;
    $394 = $393 | 3;
    $395 = $394&255;
    $byte1 = $395;
    break;
   }
   default: {
    $396 = $ins;
    $397 = ((($396)) + 1|0);
    $398 = HEAP8[$397>>0]|0;
    $399 = $398&255;
    $400 = ($399|0)>=(16);
    if ($400) {
     $401 = $byte1;
     $402 = $401&255;
     $403 = $402 | 1;
     $404 = $403&255;
     $byte1 = $404;
    }
   }
   }
   $405 = $0;
   $406 = ((($405)) + 8|0);
   $407 = HEAP8[$406>>0]|0;
   $408 = $407&255;
   $409 = $408 & 1;
   $410 = ($409|0)!=(0);
   $411 = $410 ? 0 : 32;
   $412 = $byte1;
   $413 = $412&255;
   $414 = $413 | $411;
   $415 = $414&255;
   $byte1 = $415;
   $416 = $0;
   $417 = ((($416)) + 8|0);
   $418 = HEAP8[$417>>0]|0;
   $419 = $418&255;
   $420 = $419 & 2;
   $421 = ($420|0)!=(0);
   $422 = $421 ? 0 : 64;
   $423 = $byte1;
   $424 = $423&255;
   $425 = $424 | $422;
   $426 = $425&255;
   $byte1 = $426;
   $427 = $0;
   $428 = ((($427)) + 8|0);
   $429 = HEAP8[$428>>0]|0;
   $430 = $429&255;
   $431 = $430 & 4;
   $432 = ($431|0)!=(0);
   $433 = $432 ? 0 : 128;
   $434 = $byte1;
   $435 = $434&255;
   $436 = $435 | $433;
   $437 = $436&255;
   $byte1 = $437;
   $438 = $byte1;
   _OutputByte($438);
   $439 = $0;
   $440 = ((($439)) + 8|0);
   $441 = HEAP8[$440>>0]|0;
   $442 = $441&255;
   $443 = $442 & 8;
   $444 = ($443|0)!=(0);
   $445 = $444 ? 128 : 0;
   $446 = $lbyte;
   $447 = $446&255;
   $448 = $447 | $445;
   $449 = $448&255;
   $lbyte = $449;
   $450 = $lbyte;
   _OutputByte($450);
  } else {
   $463 = $0;
   $464 = ((($463)) + 8|0);
   $465 = HEAP8[$464>>0]|0;
   $466 = $465&255;
   $467 = ($466|0)!=(0);
   if ($467) {
    $468 = $0;
    $469 = ((($468)) + 98|0);
    $470 = HEAP8[$469>>0]|0;
    $471 = $470&255;
    $472 = ($471|0)!=(2);
    if ($472) {
     (_EmitError(71)|0);
    }
    $473 = $0;
    $474 = ((($473)) + 8|0);
    $475 = HEAP8[$474>>0]|0;
    $476 = $475&255;
    $477 = $476 | 64;
    $478 = $477&255;
    _OutputByte($478);
   }
   $479 = $ins;
   $480 = ((($479)) + 1|0);
   $481 = HEAP8[$480>>0]|0;
   $482 = $481&255;
   $483 = ($482|0)>=(16);
   if ($483) {
    _OutputByte(15);
    $484 = $ins;
    $485 = ((($484)) + 1|0);
    $486 = HEAP8[$485>>0]|0;
    $487 = $486&255;
    switch ($487|0) {
    case 17:  {
     _OutputByte(15);
     break L83;
     break;
    }
    case 25: case 27: case 23:  {
     _OutputByte(56);
     break L83;
     break;
    }
    case 26: case 24:  {
     _OutputByte(58);
     break L83;
     break;
    }
    default: {
     break L83;
    }
    }
   }
  }
 } while(0);
 $488 = $ins;
 $489 = ((($488)) + 2|0);
 $490 = HEAP8[$489>>0]|0;
 $491 = ($490&255) >>> 4;
 $492 = $491 & 7;
 $493 = $492&255;
 switch ($493|0) {
 case 3:  {
  $494 = $ins;
  $495 = ((($494)) + 6|0);
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&255;
  $498 = $0;
  $499 = ((($498)) + 96|0);
  $500 = HEAP8[$499>>0]|0;
  $501 = $500&255;
  $502 = $501 & 63;
  $503 = $497 | $502;
  $504 = $503&255;
  _OutputByte($504);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $505 = $ins;
  $506 = ((($505)) + 6|0);
  $507 = HEAP8[$506>>0]|0;
  $508 = $507&255;
  $509 = $0;
  $510 = ((($509)) + 101|0);
  $511 = HEAP8[$510>>0]|0;
  $512 = $511 & 1;
  $513 = $512&255;
  $514 = $508 | $513;
  $515 = $514&255;
  _OutputByte($515);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $516 = $0;
  $517 = ((($516)) + 101|0);
  $518 = HEAP8[$517>>0]|0;
  $519 = $518 & -2;
  HEAP8[$517>>0] = $519;
  break;
 }
 default: {
 }
 }
 $520 = $ins;
 $521 = ((($520)) + 1|0);
 $522 = HEAP8[$521>>0]|0;
 $523 = $522&255;
 $524 = ($523|0)!=(17);
 if ($524) {
  $525 = $ins;
  $526 = ((($525)) + 6|0);
  $527 = HEAP8[$526>>0]|0;
  $528 = $527&255;
  $529 = $0;
  $530 = ((($529)) + 101|0);
  $531 = HEAP8[$530>>0]|0;
  $532 = $531 & 1;
  $533 = $532&255;
  $534 = $528 | $533;
  $535 = $0;
  $536 = ((($535)) + 99|0);
  $537 = HEAP8[$536>>0]|0;
  $538 = $537&255;
  $539 = $534 | $538;
  $540 = $539&255;
  _OutputByte($540);
 }
 $541 = $ins;
 $542 = ((($541)) + 7|0);
 $543 = HEAP8[$542>>0]|0;
 $544 = $543&255;
 $545 = $0;
 $546 = ((($545)) + 96|0);
 $547 = HEAP8[$546>>0]|0;
 $548 = $547&255;
 $549 = $544 | $548;
 $550 = $549&255;
 $tmp = $550;
 $551 = $tmp;
 _OutputByte($551);
 $552 = $0;
 $553 = ((($552)) + 98|0);
 $554 = HEAP8[$553>>0]|0;
 $555 = $554&255;
 $556 = ($555|0)==(0);
 if ($556) {
  $557 = $0;
  $558 = ((($557)) + 9|0);
  $559 = HEAP8[$558>>0]|0;
  $560 = $559 & 1;
  $561 = $560&255;
  $562 = ($561|0)==(0);
  if ($562) {
   STACKTOP = sp;return;
  }
 }
 $563 = $0;
 $564 = ((($563)) + 98|0);
 $565 = HEAP8[$564>>0]|0;
 $566 = $565&255;
 $567 = ($566|0)==(1);
 if ($567) {
  $568 = $0;
  $569 = ((($568)) + 9|0);
  $570 = HEAP8[$569>>0]|0;
  $571 = $570 & 1;
  $572 = $571&255;
  $573 = ($572|0)==(1);
  if ($573) {
   STACKTOP = sp;return;
  }
 }
 $574 = $tmp;
 $575 = $574&255;
 $576 = $575 & 199;
 switch ($576|0) {
 case 132: case 68: case 4:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $577 = $0;
 $578 = ((($577)) + 97|0);
 $579 = HEAP8[$578>>0]|0;
 _OutputByte($579);
 STACKTOP = sp;return;
}
function _check_operand_2($CodeInfo,$opnd1) {
 $CodeInfo = $CodeInfo|0;
 $opnd1 = $opnd1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $opnd1;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = $1;
 if (!($7)) {
  $99 = $2;
  $100 = (_match_phase_3($8,$99)|0);
  $101 = ($100|0)==(0);
  if (!($101)) {
   $0 = -1;
   $163 = $0;
   STACKTOP = sp;return ($163|0);
  }
  $102 = $1;
  $103 = ((($102)) + 98|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = ($105|0)==(2);
  if ($106) {
   $107 = $1;
   $108 = ((($107)) + 24|0);
   $109 = ((($108)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)!=(0|0);
   if ($111) {
    $112 = $1;
    $113 = ((($112)) + 24|0);
    $114 = ((($113)) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($115)) + 16|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==(3);
    if ($118) {
     $119 = (_GetCurrOffset()|0);
     $120 = $1;
     $121 = ((($120)) + 24|0);
     $122 = ((($121)) + 16|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ((($123)) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($119) - ($125))|0;
     $127 = $126&255;
     $128 = $1;
     $129 = ((($128)) + 24|0);
     $130 = ((($129)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($131)) + 24|0);
     HEAP8[$132>>0] = $127;
    }
   }
   $133 = $1;
   $134 = ((($133)) + 24|0);
   $135 = ((($134)) + 24|0);
   $136 = ((($135)) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($137|0)!=(0|0);
   if ($138) {
    $139 = $1;
    $140 = ((($139)) + 24|0);
    $141 = ((($140)) + 24|0);
    $142 = ((($141)) + 16|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ((($143)) + 16|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(3);
    if ($146) {
     $147 = (_GetCurrOffset()|0);
     $148 = $1;
     $149 = ((($148)) + 24|0);
     $150 = ((($149)) + 24|0);
     $151 = ((($150)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ((($152)) + 12|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($147) - ($154))|0;
     $156 = $155&255;
     $157 = $1;
     $158 = ((($157)) + 24|0);
     $159 = ((($158)) + 24|0);
     $160 = ((($159)) + 16|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ((($161)) + 24|0);
     HEAP8[$162>>0] = $156;
    }
   }
  }
  $0 = 0;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (20136 + (($12*12)|0)|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $0 = -1;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $17 = $2;
 $18 = ($17|0)==(-1627389952);
 do {
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 8|0);
   $next = $22;
   $23 = $next;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (20136 + (($25*12)|0)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 & -1627389952;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $next;
    $31 = ((($30)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32&255) >>> 3;
    $34 = $33 & 1;
    $35 = $34&255;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = $1;
     $38 = ((($37)) + 101|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = ($39&255) >>> 6;
     $41 = $40 & 1;
     $42 = $41&255;
     $43 = ($42|0)==(0);
     if ($43) {
      $44 = $1;
      $45 = ((($44)) + 24|0);
      $46 = ((($45)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       $49 = $1;
       $50 = ((($49)) + 24|0);
       $51 = ((($50)) + 16|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0|0);
       if (!($55)) {
        $56 = $1;
        $57 = ((($56)) + 24|0);
        $58 = ((($57)) + 16|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ((($59)) + 36|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = ((($61)) + 16|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = ($63|0)!=(0);
        if (!($64)) {
         break;
        }
       }
      }
      (_EmitErr(182,$vararg_buffer)|0);
     }
    }
   }
  }
 } while(0);
 $65 = $1;
 _output_opc($65);
 $66 = $1;
 $67 = $2;
 _output_data($66,$67,0);
 $68 = $1;
 $69 = ((($68)) + 98|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ($71|0)==(2);
 if ($72) {
  $73 = $1;
  $74 = ((($73)) + 24|0);
  $75 = ((($74)) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0|0);
  if ($77) {
   $78 = $1;
   $79 = ((($78)) + 24|0);
   $80 = ((($79)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($81)) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(3);
   if ($84) {
    $85 = (_GetCurrOffset()|0);
    $86 = $1;
    $87 = ((($86)) + 24|0);
    $88 = ((($87)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($89)) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($85) - ($91))|0;
    $93 = $92&255;
    $94 = $1;
    $95 = ((($94)) + 24|0);
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ((($97)) + 24|0);
    HEAP8[$98>>0] = $93;
   }
  }
 }
 $0 = 0;
 $163 = $0;
 STACKTOP = sp;return ($163|0);
}
function _output_data($CodeInfo,$determinant,$index) {
 $CodeInfo = $CodeInfo|0;
 $determinant = $determinant|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $CodeInfo;
 $1 = $determinant;
 $2 = $index;
 $size = 0;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(585);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(586);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 7;
 $17 = $16&255;
 $18 = ($17|0)==(2);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 & 7;
 $25 = $24&255;
 $26 = ($25|0)==(3);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = $27 & 65536;
 $29 = ($28|0)!=(0);
 L13: do {
  if ($29) {
   $size = 1;
  } else {
   $30 = $1;
   $31 = $30 & 131072;
   $32 = ($31|0)!=(0);
   if ($32) {
    $size = 2;
    break;
   }
   $33 = $1;
   $34 = $33 & 262144;
   $35 = ($34|0)!=(0);
   if ($35) {
    $size = 4;
    break;
   }
   $36 = $1;
   $37 = $36 & 1048576;
   $38 = ($37|0)!=(0);
   if ($38) {
    $size = 6;
    break;
   }
   $39 = $1;
   $40 = $39 & 524288;
   $41 = ($40|0)!=(0);
   if ($41) {
    $size = 8;
    break;
   }
   $42 = $1;
   $43 = $42 & -16777216;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $0;
    $46 = ((($45)) + 96|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $48 & 192;
    switch ($49|0) {
    case 64:  {
     $size = 1;
     break L13;
     break;
    }
    case 0:  {
     $50 = $0;
     $51 = ((($50)) + 98|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = ($53|0)==(0);
     if ($54) {
      $55 = $0;
      $56 = ((($55)) + 9|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57 & 1;
      $59 = $58&255;
      $60 = ($59|0)==(0);
      if (!($60)) {
       label = 20;
      }
     } else {
      label = 20;
     }
     do {
      if ((label|0) == 20) {
       $61 = $0;
       $62 = ((($61)) + 98|0);
       $63 = HEAP8[$62>>0]|0;
       $64 = $63&255;
       $65 = ($64|0)==(1);
       if ($65) {
        $66 = $0;
        $67 = ((($66)) + 9|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = $68 & 1;
        $70 = $69&255;
        $71 = ($70|0)==(1);
        if ($71) {
         break;
        }
       }
       $78 = $0;
       $79 = ((($78)) + 98|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = $80&255;
       $82 = ($81|0)==(2);
       if ($82) {
        $83 = $0;
        $84 = ((($83)) + 12|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ((($85)) + 6|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = $87&255;
        $89 = $88 & 252;
        $90 = ($89|0)==(160);
        if ($90) {
         $91 = $0;
         $92 = ((($91)) + 12|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = ((($93)) + 1|0);
         $95 = HEAP8[$94>>0]|0;
         $96 = $95&255;
         $97 = ($96|0)==(0);
         if ($97) {
          $size = 8;
          break L13;
         }
        }
       }
       $98 = $0;
       $99 = ((($98)) + 96|0);
       $100 = HEAP8[$99>>0]|0;
       $101 = $100&255;
       $102 = $101 & 7;
       switch ($102|0) {
       case 4:  {
        $103 = $0;
        $104 = ((($103)) + 97|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = $106 & 7;
        $108 = ($107|0)!=(5);
        if ($108) {
         break L13;
        }
        break;
       }
       case 5:  {
        break;
       }
       default: {
        break L13;
       }
       }
       $size = 4;
       $109 = $0;
       $110 = ((($109)) + 98|0);
       $111 = HEAP8[$110>>0]|0;
       $112 = $111&255;
       $113 = ($112|0)==(2);
       if (!($113)) {
        break L13;
       }
       $114 = $2;
       $115 = $0;
       $116 = ((($115)) + 24|0);
       $117 = (($116) + (($114*24)|0)|0);
       $118 = ((($117)) + 8|0);
       $119 = $118;
       $120 = $119;
       $121 = HEAP32[$120>>2]|0;
       $122 = (($119) + 4)|0;
       $123 = $122;
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124>>>0)>(0);
       $126 = ($121>>>0)>=(2147483648);
       $127 = ($124|0)==(0);
       $128 = $127 & $126;
       $129 = $125 | $128;
       if (!($129)) {
        break L13;
       }
       $130 = $2;
       $131 = $0;
       $132 = ((($131)) + 24|0);
       $133 = (($132) + (($130*24)|0)|0);
       $134 = ((($133)) + 8|0);
       $135 = $134;
       $136 = $135;
       $137 = HEAP32[$136>>2]|0;
       $138 = (($135) + 4)|0;
       $139 = $138;
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140>>>0)<(4294967295);
       $142 = ($137>>>0)<(2147483648);
       $143 = ($140|0)==(-1);
       $144 = $143 & $142;
       $145 = $141 | $144;
       if (!($145)) {
        break L13;
       }
       (_EmitErr(49,$vararg_buffer)|0);
       break L13;
      }
     } while(0);
     $72 = $0;
     $73 = ((($72)) + 96|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = $75 & 7;
     $77 = ($76|0)==(6);
     if (!($77)) {
      break L13;
     }
     $size = 2;
     break L13;
     break;
    }
    case 128:  {
     $146 = $0;
     $147 = ((($146)) + 98|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = ($149|0)==(0);
     if ($150) {
      $151 = $0;
      $152 = ((($151)) + 9|0);
      $153 = HEAP8[$152>>0]|0;
      $154 = $153 & 1;
      $155 = $154&255;
      $156 = ($155|0)==(0);
      if (!($156)) {
       label = 36;
      }
     } else {
      label = 36;
     }
     do {
      if ((label|0) == 36) {
       $157 = $0;
       $158 = ((($157)) + 98|0);
       $159 = HEAP8[$158>>0]|0;
       $160 = $159&255;
       $161 = ($160|0)==(1);
       if ($161) {
        $162 = $0;
        $163 = ((($162)) + 9|0);
        $164 = HEAP8[$163>>0]|0;
        $165 = $164 & 1;
        $166 = $165&255;
        $167 = ($166|0)==(1);
        if ($167) {
         break;
        }
       }
       $size = 4;
       break L13;
      }
     } while(0);
     $size = 2;
     break L13;
     break;
    }
    default: {
     break L13;
    }
    }
   }
  }
 } while(0);
 $168 = $size;
 $169 = ($168|0)!=(0);
 if (!($169)) {
  STACKTOP = sp;return;
 }
 $170 = $2;
 $171 = $0;
 $172 = ((($171)) + 24|0);
 $173 = (($172) + (($170*24)|0)|0);
 $174 = ((($173)) + 16|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = HEAP32[4884>>2]|0;
  $178 = ($177>>>0)>(0);
  if ($178) {
   $179 = $2;
   $180 = $0;
   $181 = ((($180)) + 24|0);
   $182 = (($181) + (($179*24)|0)|0);
   $183 = ((($182)) + 16|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ((($184)) + 16|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = 1 << $186;
   $188 = HEAP32[(500)>>2]|0;
   $189 = ((($188)) + 4|0);
   $190 = HEAP16[$189>>1]|0;
   $191 = $190 << 16 >> 16;
   $192 = $187 & $191;
   $193 = ($192|0)!=(0);
   if ($193) {
    $194 = HEAP32[(500)>>2]|0;
    $195 = ((($194)) + 6|0);
    $196 = $2;
    $197 = $0;
    $198 = ((($197)) + 24|0);
    $199 = (($198) + (($196*24)|0)|0);
    $200 = ((($199)) + 16|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ((($201)) + 36|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)!=(0|0);
    if ($204) {
     $205 = $2;
     $206 = $0;
     $207 = ((($206)) + 24|0);
     $208 = (($207) + (($205*24)|0)|0);
     $209 = ((($208)) + 16|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ((($210)) + 36|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ((($212)) + 4|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = $214;
    } else {
     $215 = 83263;
    }
    HEAP32[$vararg_buffer1>>2] = $195;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $215;
    (_EmitErr(197,$vararg_buffer1)|0);
   }
  }
  $216 = HEAP8[81594>>0]|0;
  $217 = ($216<<24>>24)!=(0);
  if ($217) {
   $218 = (_GetCurrOffset()|0);
   $219 = $2;
   $220 = $0;
   $221 = ((($220)) + 24|0);
   $222 = (($221) + (($219*24)|0)|0);
   $223 = ((($222)) + 16|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($224)) + 12|0);
   HEAP32[$225>>2] = $218;
   $226 = $2;
   $227 = $0;
   $228 = ((($227)) + 24|0);
   $229 = (($228) + (($226*24)|0)|0);
   $230 = ((($229)) + 8|0);
   $231 = $size;
   $232 = $2;
   $233 = $0;
   $234 = ((($233)) + 24|0);
   $235 = (($234) + (($232*24)|0)|0);
   $236 = ((($235)) + 16|0);
   $237 = HEAP32[$236>>2]|0;
   _OutputBytes($230,$231,$237);
   STACKTOP = sp;return;
  }
 }
 $238 = $2;
 $239 = $0;
 $240 = ((($239)) + 24|0);
 $241 = (($240) + (($238*24)|0)|0);
 $242 = ((($241)) + 8|0);
 $243 = $size;
 _OutputBytes($242,$243,0);
 STACKTOP = sp;return;
}
function _match_phase_3($CodeInfo,$opnd1) {
 $CodeInfo = $CodeInfo|0;
 $opnd1 = $opnd1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $determinant = 0;
 var $opnd2 = 0, $or$cond = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $tbl_op2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CodeInfo;
 $2 = $opnd1;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (20136 + (($7*12)|0)|0);
 $9 = HEAP32[$8>>2]|0;
 $determinant = $9;
 $10 = $1;
 $11 = ((($10)) + 24|0);
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $opnd2 = $13;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)>=(1113);
 do {
  if ($17) {
   $18 = $1;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - 1113)|0;
   $22 = (99872 + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 & 1;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $1;
    $28 = ((($27)) + 24|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 536870976;
    $31 = ($30|0)!=(0);
    if (!($31)) {
     $56 = $1;
     $57 = ((($56)) + 24|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(-1627389952);
     if (!($59)) {
      break;
     }
     $60 = $opnd2;
     $61 = $60 & 64;
     $62 = ($61|0)!=(0);
     if (!($62)) {
      break;
     }
     $63 = $opnd2;
     $64 = $63 | 32;
     $opnd2 = $64;
     break;
    }
    $32 = $opnd2;
    $33 = $32 & 64;
    $34 = ($33|0)!=(0);
    $35 = $opnd2;
    if ($34) {
     $36 = $35 | 32;
     $opnd2 = $36;
     break;
    }
    $37 = $35 & 536870912;
    $38 = ($37|0)!=(0);
    $39 = $opnd2;
    if ($38) {
     $40 = $39 | 268435456;
     $opnd2 = $40;
     break;
    }
    $41 = $39 & 268435456;
    $42 = ($41|0)!=(0);
    $43 = $opnd2;
    if ($42) {
     $44 = $43 | 134217728;
     $opnd2 = $44;
     break;
    }
    $45 = $43 & 32;
    $46 = ($45|0)!=(0);
    if ($46) {
     $47 = $1;
     $48 = ((($47)) + 16|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($49) - 1113)|0;
     $51 = (99872 + ($50)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = $53 & 32;
     $55 = ($54|0)!=(0);
     if (!($55)) {
      (_EmitError(30)|0);
      $0 = -1;
      $398 = $0;
      STACKTOP = sp;return ($398|0);
     }
    }
   }
  }
 } while(0);
 L21: while(1) {
  $65 = $1;
  $66 = ((($65)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (20136 + (($69*12)|0)|0);
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $tbl_op2 = $72;
  $73 = $tbl_op2;
  $switch$split2D = ($73|0)<(2162688);
  L23: do {
   if ($switch$split2D) {
    $switch$split12D = ($73|0)<(458752);
    if (!($switch$split12D)) {
     switch ($73|0) {
     case 458752:  {
      break;
     }
     default: {
      label = 60;
      break L23;
     }
     }
     $74 = $opnd2;
     $75 = $tbl_op2;
     $76 = $74 & $75;
     $77 = ($76|0)!=(0);
     if ($77) {
      label = 18;
      break L21;
     } else {
      break;
     }
    }
    switch ($73|0) {
    case 65536:  {
     break;
    }
    default: {
     label = 60;
     break L23;
    }
    }
    $225 = HEAP32[(560)>>2]|0;
    $226 = $225 >>> 18;
    $227 = $226 & 1;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $1;
     $230 = ((($229)) + 16|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($231|0)==(427);
     if ($232) {
      break;
     }
     $233 = $1;
     $234 = ((($233)) + 16|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = ($235|0)==(424);
     if ($236) {
      break;
     }
     $237 = $1;
     $238 = ((($237)) + 16|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = ($239|0)==(429);
     if ($240) {
      break;
     }
    }
    $241 = $1;
    $242 = ((($241)) + 24|0);
    $243 = ((($242)) + 24|0);
    $244 = ((($243)) + 16|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ($245|0)!=(0|0);
    if ($246) {
     $247 = $1;
     $248 = ((($247)) + 24|0);
     $249 = ((($248)) + 24|0);
     $250 = ((($249)) + 16|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ((($251)) + 36|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ((($253)) + 16|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)!=(0);
     if ($256) {
      break;
     }
    }
    $257 = $1;
    $258 = ((($257)) + 101|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = ($259&255) >>> 3;
    $261 = $260 & 1;
    $262 = $261&255;
    $263 = ($262|0)==(0);
    do {
     if ($263) {
      $264 = $2;
      $265 = $264 & 33554434;
      $266 = ($265|0)!=(0);
      if ($266) {
       $267 = $1;
       $268 = ((($267)) + 24|0);
       $269 = ((($268)) + 24|0);
       $270 = ((($269)) + 8|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = $271&255;
       $273 = $272 << 24 >> 24;
       $274 = $1;
       $275 = ((($274)) + 24|0);
       $276 = ((($275)) + 24|0);
       $277 = ((($276)) + 8|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = $278&65535;
       $280 = $279 << 16 >> 16;
       $281 = ($273|0)==($280|0);
       if ($281) {
        $282 = $tbl_op2;
        $283 = $282 | 131072;
        $tbl_op2 = $283;
        break;
       }
      }
      $284 = $2;
      $285 = $284 & 201326604;
      $286 = ($285|0)!=(0);
      if ($286) {
       $287 = $1;
       $288 = ((($287)) + 24|0);
       $289 = ((($288)) + 24|0);
       $290 = ((($289)) + 8|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = $291&255;
       $293 = $292 << 24 >> 24;
       $294 = $1;
       $295 = ((($294)) + 24|0);
       $296 = ((($295)) + 24|0);
       $297 = ((($296)) + 8|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = ($293|0)==($298|0);
       if ($299) {
        $300 = $tbl_op2;
        $301 = $300 | 262144;
        $tbl_op2 = $301;
       }
      }
     }
    } while(0);
    $302 = $opnd2;
    $303 = $tbl_op2;
    $304 = $302 & $303;
    $305 = ($304|0)!=(0);
    if ($305) {
     label = 56;
     break L21;
    }
   } else {
    $switch$split42D = ($73|0)<(8847360);
    if ($switch$split42D) {
     switch ($73|0) {
     case 2162688:  {
      break;
     }
     default: {
      label = 60;
      break L23;
     }
     }
     $310 = $opnd2;
     $311 = $tbl_op2;
     $312 = $310 & $311;
     $313 = ($312|0)!=(0);
     if (!($313)) {
      break;
     }
     $314 = $1;
     $315 = ((($314)) + 24|0);
     $316 = ((($315)) + 24|0);
     $317 = ((($316)) + 8|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = ($318|0)==(1);
     if ($319) {
      label = 59;
      break L21;
     } else {
      break;
     }
    }
    switch ($73|0) {
    case 8847360:  {
     break;
    }
    default: {
     label = 60;
     break L23;
    }
    }
    $168 = $opnd2;
    $169 = $tbl_op2;
    $170 = $168 & $169;
    $171 = ($170|0)!=(0);
    if ($171) {
     $172 = $1;
     $173 = ((($172)) + 101|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = ($174&255) >>> 3;
     $176 = $175 & 1;
     $177 = $176&255;
     $178 = ($177|0)!=(0);
     $179 = $opnd2;
     $180 = ($179|0)!=(65536);
     $or$cond = $178 & $180;
     if (!($or$cond)) {
      $181 = $1;
      $182 = ((($181)) + 24|0);
      $183 = ((($182)) + 24|0);
      $184 = ((($183)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)<=(255);
      if ($186) {
       $187 = $1;
       $188 = ((($187)) + 24|0);
       $189 = ((($188)) + 24|0);
       $190 = ((($189)) + 8|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ($191|0)>=(-128);
       if ($192) {
        label = 37;
        break L21;
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 60) {
   label = 0;
   $323 = $opnd2;
   $324 = $tbl_op2;
   $325 = $323 & $324;
   $326 = ($325|0)!=(0);
   if ($326) {
    $327 = $1;
    $328 = (_check_3rd_operand($327)|0);
    $329 = ($328|0)==(-1);
    if (!($329)) {
     label = 62;
     break;
    }
   }
  }
  $372 = $1;
  $373 = ((($372)) + 12|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = ((($374)) + 8|0);
  HEAP32[$373>>2] = $375;
  $376 = $1;
  $377 = ((($376)) + 12|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = HEAP8[$378>>0]|0;
  $380 = $379&255;
  $381 = (20136 + (($380*12)|0)|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = $determinant;
  $384 = ($382|0)==($383|0);
  if (!($384)) {
   label = 73;
   break;
  }
  $385 = $1;
  $386 = ((($385)) + 12|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = ((($387)) + 2|0);
  $389 = HEAP8[$388>>0]|0;
  $390 = ($389&255) >>> 3;
  $391 = $390 & 1;
  $392 = $391&255;
  $393 = ($392|0)==(0);
  if (!($393)) {
   label = 73;
   break;
  }
 }
 if ((label|0) == 18) {
  $78 = $2;
  $79 = $78 & 1;
  $80 = ($79|0)!=(0);
  L66: do {
   if ($80) {
    $81 = $1;
    $82 = ((($81)) + 9|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83 & -3;
    HEAP8[$82>>0] = $84;
    $opnd2 = 65536;
    $85 = $1;
    $86 = ((($85)) + 24|0);
    $87 = ((($86)) + 24|0);
    $88 = ((($87)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)!=(0|0);
    if ($90) {
     $91 = $1;
     $92 = ((($91)) + 24|0);
     $93 = ((($92)) + 24|0);
     $94 = ((($93)) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ((($95)) + 16|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)!=(11);
     if ($98) {
      $99 = $1;
      $100 = ((($99)) + 24|0);
      $101 = ((($100)) + 24|0);
      $102 = ((($101)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ((($103)) + 16|0);
      HEAP32[$104>>2] = 4;
     }
    }
   } else {
    $105 = $2;
    $106 = $105 & 2;
    $107 = ($106|0)!=(0);
    if ($107) {
     $opnd2 = 131072;
     break;
    }
    $108 = $2;
    $109 = $108 & 12;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = $1;
     $112 = ((($111)) + 98|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = ($114|0)!=(0);
     $116 = $115 ? 0 : 1;
     $117 = $116&255;
     $118 = $1;
     $119 = ((($118)) + 9|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $117 & 1;
     $122 = ($121 << 1)&255;
     $123 = $120 & -3;
     $124 = $123 | $122;
     HEAP8[$119>>0] = $124;
     $opnd2 = 262144;
     break;
    }
    $125 = $2;
    $126 = $125 & -1627389952;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $2;
     $129 = $1;
     $130 = (_OperandSize($128,$129)|0);
     switch ($130|0) {
     case 1:  {
      $opnd2 = 65536;
      $131 = $1;
      $132 = ((($131)) + 9|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133 & -3;
      HEAP8[$132>>0] = $134;
      break L66;
      break;
     }
     case 2:  {
      $opnd2 = 131072;
      $135 = $1;
      $136 = ((($135)) + 98|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = $137&255;
      $139 = ($138|0)!=(0);
      $140 = $139 ? 1 : 0;
      $141 = $140&255;
      $142 = $1;
      $143 = ((($142)) + 9|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $141 & 1;
      $146 = ($145 << 1)&255;
      $147 = $144 & -3;
      $148 = $147 | $146;
      HEAP8[$143>>0] = $148;
      break L66;
      break;
     }
     case 4: case 8:  {
      $opnd2 = 262144;
      $149 = $1;
      $150 = ((($149)) + 98|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = ($152|0)!=(0);
      $154 = $153 ? 0 : 1;
      $155 = $154&255;
      $156 = $1;
      $157 = ((($156)) + 9|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $155 & 1;
      $160 = ($159 << 1)&255;
      $161 = $158 & -3;
      $162 = $161 | $160;
      HEAP8[$157>>0] = $162;
      break L66;
      break;
     }
     default: {
      (_EmitError(49)|0);
      break L66;
     }
     }
    }
   }
  } while(0);
  $163 = $1;
  _output_opc($163);
  $164 = $1;
  $165 = $2;
  _output_data($164,$165,0);
  $166 = $1;
  $167 = $opnd2;
  _output_data($166,$167,1);
  $0 = 0;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 else if ((label|0) == 37) {
  $193 = $1;
  $194 = ((($193)) + 24|0);
  $195 = ((($194)) + 24|0);
  $196 = ((($195)) + 16|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)!=(0|0);
  do {
   if ($198) {
    $199 = $1;
    $200 = ((($199)) + 24|0);
    $201 = ((($200)) + 24|0);
    $202 = ((($201)) + 16|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ((($203)) + 16|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)==(5);
    if (!($206)) {
     $207 = $1;
     $208 = ((($207)) + 24|0);
     $209 = ((($208)) + 24|0);
     $210 = ((($209)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ((($211)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(6);
     if (!($214)) {
      break;
     }
    }
    $215 = $1;
    $216 = ((($215)) + 24|0);
    $217 = ((($216)) + 24|0);
    $218 = ((($217)) + 16|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($219)) + 16|0);
    HEAP32[$220>>2] = 4;
   }
  } while(0);
  $221 = $1;
  _output_opc($221);
  $222 = $1;
  $223 = $2;
  _output_data($222,$223,0);
  $224 = $1;
  _output_data($224,65536,1);
  $0 = 0;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 else if ((label|0) == 56) {
  $306 = $1;
  _output_opc($306);
  $307 = $1;
  $308 = $2;
  _output_data($307,$308,0);
  $309 = $1;
  _output_data($309,65536,1);
  $0 = 0;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 else if ((label|0) == 59) {
  $320 = $1;
  _output_opc($320);
  $321 = $1;
  $322 = $2;
  _output_data($321,$322,0);
  $0 = 0;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 else if ((label|0) == 62) {
  $330 = $1;
  _output_opc($330);
  $331 = $2;
  $332 = $331 & -14745600;
  $333 = ($332|0)!=(0);
  if ($333) {
   $334 = $1;
   $335 = $2;
   _output_data($334,$335,0);
  }
  $336 = $opnd2;
  $337 = $336 & -14745600;
  $338 = ($337|0)!=(0);
  if ($338) {
   $339 = $1;
   $340 = $opnd2;
   _output_data($339,$340,1);
  }
  $341 = $1;
  $342 = ((($341)) + 12|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = HEAP8[$343>>0]|0;
  $345 = $344&255;
  $346 = (20136 + (($345*12)|0)|0);
  $347 = ((($346)) + 8|0);
  $348 = HEAP8[$347>>0]|0;
  $349 = $348&255;
  $350 = ($349|0)!=(0);
  if ($350) {
   $351 = $1;
   _output_3rd_operand($351);
  }
  $352 = $1;
  $353 = ((($352)) + 12|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = ((($354)) + 1|0);
  $356 = HEAP8[$355>>0]|0;
  $357 = $356&255;
  $358 = ($357|0)==(17);
  if ($358) {
   $359 = $1;
   $360 = ((($359)) + 12|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ((($361)) + 6|0);
   $363 = HEAP8[$362>>0]|0;
   $364 = $363&255;
   $365 = $1;
   $366 = ((($365)) + 101|0);
   $367 = HEAP8[$366>>0]|0;
   $368 = $367 & 1;
   $369 = $368&255;
   $370 = $364 | $369;
   $371 = $370&255;
   _OutputByte($371);
  }
  $0 = 0;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 else if ((label|0) == 73) {
  $394 = $1;
  $395 = ((($394)) + 12|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + -8|0);
  HEAP32[$395>>2] = $397;
  $0 = -1;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 return (0)|0;
}
function _check_3rd_operand($CodeInfo) {
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CodeInfo;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (20136 + (($6*12)|0)|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (20136 + (($16*12)|0)|0);
  $18 = ((($17)) + 8|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)==(5);
  if (!($21)) {
   $28 = $1;
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = (20136 + (($32*12)|0)|0);
   $34 = ((($33)) + 8|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   L4: do {
    switch ($36|0) {
    case 1:  {
     $37 = $1;
     $38 = ((($37)) + 24|0);
     $39 = ((($38)) + 48|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(257);
     if ($41) {
      $0 = 0;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     }
     break;
    }
    case 2:  {
     $42 = $1;
     $43 = ((($42)) + 24|0);
     $44 = ((($43)) + 48|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = $45 & 458752;
     $47 = ($46|0)!=(0);
     if ($47) {
      $48 = $1;
      $49 = ((($48)) + 24|0);
      $50 = ((($49)) + 48|0);
      $51 = ((($50)) + 8|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)>=(-128);
      if ($53) {
       $54 = $1;
       $55 = ((($54)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(539);
       if ($57) {
        $58 = $1;
        $59 = ((($58)) + 24|0);
        $60 = ((($59)) + 48|0);
        $61 = ((($60)) + 8|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = ($62|0)<(128);
        if (!($63)) {
         label = 11;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        $64 = $1;
        $65 = ((($64)) + 16|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ($66|0)!=(539);
        if (!($67)) {
         break L4;
        }
        $68 = $1;
        $69 = ((($68)) + 24|0);
        $70 = ((($69)) + 48|0);
        $71 = ((($70)) + 8|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ($72|0)<(256);
        if (!($73)) {
         break L4;
        }
       }
       $74 = $1;
       $75 = ((($74)) + 24|0);
       $76 = ((($75)) + 48|0);
       HEAP32[$76>>2] = 65536;
       $0 = 0;
       $100 = $0;
       STACKTOP = sp;return ($100|0);
      }
     }
     break;
    }
    case 4:  {
     $77 = $1;
     $78 = ((($77)) + 24|0);
     $79 = ((($78)) + 48|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 & 458752;
     $82 = ($81|0)!=(0);
     if ($82) {
      $0 = 0;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     }
     break;
    }
    case 3:  {
     $83 = $1;
     $84 = ((($83)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85>>>0)>=(1113);
     $87 = $1;
     $88 = ((($87)) + 24|0);
     $89 = ((($88)) + 48|0);
     $90 = HEAP32[$89>>2]|0;
     if ($86) {
      $91 = $90 & 96;
      $92 = ($91|0)!=(0);
      if (!($92)) {
       break L4;
      }
      $0 = 0;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     }
     $93 = ($90|0)==(32);
     if ($93) {
      $94 = $1;
      $95 = ((($94)) + 24|0);
      $96 = ((($95)) + 48|0);
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)==(0);
      if ($99) {
       $0 = 0;
       $100 = $0;
       STACKTOP = sp;return ($100|0);
      }
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $0 = -1;
   $100 = $0;
   STACKTOP = sp;return ($100|0);
  }
 }
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 $27 = $26 ? 0 : -1;
 $0 = $27;
 $100 = $0;
 STACKTOP = sp;return ($100|0);
}
function _output_3rd_operand($CodeInfo) {
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (20136 + (($5*12)|0)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(2);
 $11 = $0;
 if ($10) {
  _output_data($11,65536,2);
  STACKTOP = sp;return;
 }
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (20136 + (($15*12)|0)|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)==(4);
 $21 = $0;
 if ($20) {
  $22 = $0;
  $23 = ((($22)) + 24|0);
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  _output_data($21,$25,2);
  STACKTOP = sp;return;
 }
 $26 = ((($21)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (20136 + (($29*12)|0)|0);
 $31 = ((($30)) + 8|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)==(5);
 $35 = $0;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 if ($34) {
  $38 = (($37) - 802)|0;
  $39 = (($38>>>0) % 8)&-1;
  $40 = $0;
  $41 = ((($40)) + 24|0);
  $42 = ((($41)) + 48|0);
  $43 = ((($42)) + 8|0);
  HEAP32[$43>>2] = $39;
  $44 = $0;
  $45 = ((($44)) + 24|0);
  $46 = ((($45)) + 48|0);
  $47 = ((($46)) + 16|0);
  HEAP32[$47>>2] = 0;
  $48 = $0;
  _output_data($48,65536,2);
  STACKTOP = sp;return;
 }
 $49 = ($37>>>0)>=(1113);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 $50 = $0;
 $51 = ((($50)) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = (20136 + (($54*12)|0)|0);
 $56 = ((($55)) + 8|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = ($58|0)==(3);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 $60 = $0;
 $61 = ((($60)) + 24|0);
 $62 = ((($61)) + 48|0);
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 << 4;
 $66 = $0;
 $67 = ((($66)) + 24|0);
 $68 = ((($67)) + 48|0);
 $69 = ((($68)) + 8|0);
 HEAP32[$69>>2] = $65;
 $70 = $0;
 _output_data($70,65536,2);
 STACKTOP = sp;return;
}
function _coff_init($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = $0;
 $2 = ((($1)) + 152|0);
 HEAP32[$2>>2] = 210;
 STACKTOP = sp;return;
}
function _coff_write_module($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cm = 0, $cnt = 0, $dst = 0, $i = 0, $i1 = 0, $ifh = 0, $pName = 0, $sehp = 0, $src = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cm = sp + 44|0;
 $ifh = sp + 24|0;
 $0 = $modinfo;
 dest=$cm; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = ((($cm)) + 56|0);
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 4;
 $3 = HEAP32[(388)>>2]|0;
 $4 = ((($cm)) + 12|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP8[(6006)>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 L1: do {
  if ($6) {
   $i = 0;
   while(1) {
    $7 = $i;
    $8 = ($7|0)<(2);
    if (!($8)) {
     break;
    }
    $9 = $i;
    $10 = (7284 + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_CreateIntSegment($11,109841,0,1,1)|0);
    $13 = $i;
    $14 = ((($cm)) + 32|0);
    $15 = (($14) + (($13*12)|0)|0);
    HEAP32[$15>>2] = $12;
    $16 = (0|0)==($12|0);
    if ($16) {
     break;
    }
    $17 = $i;
    $18 = ((($cm)) + 32|0);
    $19 = (($18) + (($17*12)|0)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 60|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 65|0);
    HEAP8[$23>>0] = 66;
    $24 = HEAP32[(600)>>2]|0;
    $25 = $i;
    $26 = ($25*1200)|0;
    $27 = (($24) + ($26)|0);
    $28 = $i;
    $29 = ((($cm)) + 32|0);
    $30 = (($29) + (($28*12)|0)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 60|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 12|0);
    HEAP32[$34>>2] = $27;
    $35 = $i;
    $36 = ((($cm)) + 32|0);
    $37 = (($36) + (($35*12)|0)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 60|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 20|0);
    HEAP32[$41>>2] = 211;
    $42 = $i;
    $43 = ((($cm)) + 32|0);
    $44 = (($43) + (($42*12)|0)|0);
    $45 = ((($44)) + 4|0);
    HEAP32[$45>>2] = 0;
    $46 = $i;
    $47 = (($46) + 1)|0;
    $i = $47;
   }
   $48 = $i;
   $49 = ($48|0)==(2);
   if ($49) {
    $50 = ((($cm)) + 32|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($cm)) + 32|0);
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    _cv_write_debug_tables($51,$54,$cm);
    $i = 0;
    while(1) {
     $55 = $i;
     $56 = ($55|0)<(2);
     if (!($56)) {
      break L1;
     }
     $57 = $i;
     $58 = ((($cm)) + 32|0);
     $59 = (($58) + (($57*12)|0)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)!=(0);
     L12: do {
      if ($63) {
       $64 = $i;
       $65 = ((($cm)) + 32|0);
       $66 = (($65) + (($64*12)|0)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (_LclAlloc($69)|0);
       $71 = $i;
       $72 = ((($cm)) + 32|0);
       $73 = (($72) + (($71*12)|0)|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ((($74)) + 60|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ((($76)) + 12|0);
       HEAP32[$77>>2] = $70;
       $78 = $i;
       $79 = ((($cm)) + 32|0);
       $80 = (($79) + (($78*12)|0)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($81)) + 60|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ((($83)) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $dst = $85;
       $86 = $i;
       $87 = ((($cm)) + 32|0);
       $88 = (($87) + (($86*12)|0)|0);
       $89 = ((($88)) + 4|0);
       $90 = HEAP32[$89>>2]|0;
       $src = $90;
       while(1) {
        $91 = $src;
        $92 = ($91|0)!=(0|0);
        if (!($92)) {
         break L12;
        }
        $93 = $dst;
        $94 = $src;
        $95 = ((($94)) + 8|0);
        $96 = $src;
        $97 = ((($96)) + 4|0);
        $98 = HEAP32[$97>>2]|0;
        _memcpy(($93|0),($95|0),($98|0))|0;
        $99 = $src;
        $100 = ((($99)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = $dst;
        $103 = (($102) + ($101)|0);
        $dst = $103;
        $104 = $src;
        $105 = HEAP32[$104>>2]|0;
        $src = $105;
       }
      }
     } while(0);
     $106 = $i;
     $107 = (($106) + 1)|0;
     $i = $107;
    }
   }
  }
 } while(0);
 $108 = $0;
 $109 = ((($108)) + 28|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $cnt = 0;
  $112 = $0;
  $113 = ((($112)) + 236|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = (_CreateIntSegment(83276,109841,-1,$114,0)|0);
  $116 = ((($cm)) + 4|0);
  HEAP32[$116>>2] = $115;
  $117 = ($115|0)!=(0|0);
  if ($117) {
   $118 = ((($cm)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 60|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($121)) + 67|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123 & -3;
   $125 = $124 | 2;
   HEAP8[$122>>0] = $125;
   $126 = $0;
   $127 = ((($126)) + 28|0);
   $128 = HEAP32[$127>>2]|0;
   $sehp = $128;
   while(1) {
    $129 = $sehp;
    $130 = ($129|0)!=(0|0);
    if (!($130)) {
     break;
    }
    $131 = $sehp;
    $132 = HEAP32[$131>>2]|0;
    $sehp = $132;
    $133 = $cnt;
    $134 = (($133) + 1)|0;
    $cnt = $134;
   }
   $135 = $cnt;
   $136 = $135<<2;
   $137 = ((($cm)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($138)) + 36|0);
   HEAP32[$139>>2] = $136;
   $140 = $cnt;
   $141 = $140<<2;
   $142 = (_LclAlloc($141)|0);
   $143 = ((($cm)) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($144)) + 60|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ((($146)) + 12|0);
   HEAP32[$147>>2] = $142;
  }
 }
 $148 = $0;
 _coff_create_drectve($148,$cm);
 $149 = $0;
 $150 = ((($149)) + 237|0);
 $151 = HEAP8[$150>>0]|0;
 $152 = $151&255;
 $153 = ($152|0)==(2);
 if ($153) {
  HEAP16[$ifh>>1] = -31132;
 } else {
  HEAP16[$ifh>>1] = 332;
 }
 $154 = $0;
 $155 = ((($154)) + 8|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156&65535;
 $158 = ((($ifh)) + 2|0);
 HEAP16[$158>>1] = $157;
 $159 = ((($ifh)) + 4|0);
 (_time(($159|0))|0);
 $160 = ((($ifh)) + 16|0);
 HEAP16[$160>>1] = 0;
 $161 = ((($ifh)) + 18|0);
 HEAP16[$161>>1] = 0;
 $162 = HEAP32[(376)>>2]|0;
 (_fseek($162,20,0)|0);
 $163 = $0;
 (_coff_write_section_table($163,$cm)|0);
 $164 = $0;
 (_coff_write_data($164,$cm)|0);
 $165 = $0;
 $166 = (_coff_write_symbols($165,$cm)|0);
 $167 = ((($ifh)) + 12|0);
 HEAP32[$167>>2] = $166;
 $168 = ((($ifh)) + 12|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0);
 if ($170) {
  $171 = ((($cm)) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ((($cm)) + 20|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($172) + ($174))|0;
  $177 = $175;
 } else {
  $177 = 0;
 }
 $176 = ((($ifh)) + 8|0);
 HEAP32[$176>>2] = $177;
 $178 = ((($cm)) + 56|0);
 $179 = ((($178)) + 8|0);
 $180 = HEAP32[(376)>>2]|0;
 $181 = (_fwrite($179,1,4,$180)|0);
 $182 = ($181|0)!=(4);
 if ($182) {
  _WriteError();
 }
 $183 = ((($cm)) + 56|0);
 $184 = HEAP32[$183>>2]|0;
 $pName = $184;
 while(1) {
  $185 = $pName;
  $186 = ($185|0)!=(0|0);
  if (!($186)) {
   break;
  }
  $187 = $pName;
  $188 = ((($187)) + 4|0);
  $189 = (_strlen($188)|0);
  $190 = (($189) + 1)|0;
  $i1 = $190;
  $191 = $pName;
  $192 = ((($191)) + 4|0);
  $193 = $i1;
  $194 = HEAP32[(376)>>2]|0;
  $195 = (_fwrite($192,1,$193,$194)|0);
  $196 = $i1;
  $197 = ($195|0)!=($196|0);
  if ($197) {
   _WriteError();
  }
  $198 = $pName;
  $199 = HEAP32[$198>>2]|0;
  $pName = $199;
 }
 $200 = HEAP32[(376)>>2]|0;
 (_fseek($200,0,0)|0);
 $201 = HEAP32[(376)>>2]|0;
 $202 = (_fwrite($ifh,1,20,$201)|0);
 $203 = ($202|0)!=(20);
 if (!($203)) {
  STACKTOP = sp;return 0;
 }
 _WriteError();
 STACKTOP = sp;return 0;
}
function _coff_flushfunc($seg,$curr,$size,$pv) {
 $seg = $seg|0;
 $curr = $curr|0;
 $size = $size|0;
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $cm = 0, $currsize = 0, $i = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $seg;
 $2 = $curr;
 $3 = $size;
 $4 = $pv;
 $5 = $2;
 $6 = $1;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $currsize = $13;
 $14 = $currsize;
 $15 = $3;
 $16 = (($14) + ($15))|0;
 $17 = ($16>>>0)>(1200);
 if (!($17)) {
  $95 = $2;
  $0 = $95;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 $18 = $currsize;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $currsize;
  $21 = (($20) + 8)|0;
  $22 = (_LclAlloc($21)|0);
  $p = $22;
  $23 = $p;
  HEAP32[$23>>2] = 0;
  $24 = $currsize;
  $25 = $p;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $p;
  $28 = ((($27)) + 8|0);
  $29 = $1;
  $30 = ((($29)) + 60|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $currsize;
  _memcpy(($28|0),($33|0),($34|0))|0;
  $35 = $4;
  $cm = $35;
  $36 = $1;
  $37 = $cm;
  $38 = ((($37)) + 32|0);
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($36|0)==($40|0);
  $42 = $41 ? 1 : 0;
  $i = $42;
  $43 = $i;
  $44 = $cm;
  $45 = ((($44)) + 32|0);
  $46 = (($45) + (($43*12)|0)|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  $50 = $p;
  $51 = $i;
  $52 = $cm;
  $53 = ((($52)) + 32|0);
  $54 = (($53) + (($51*12)|0)|0);
  $55 = ((($54)) + 4|0);
  $56 = ((($55)) + 4|0);
  if ($49) {
   HEAP32[$56>>2] = $50;
   $57 = $i;
   $58 = $cm;
   $59 = ((($58)) + 32|0);
   $60 = (($59) + (($57*12)|0)|0);
   $61 = ((($60)) + 4|0);
   HEAP32[$61>>2] = $50;
  } else {
   $62 = HEAP32[$56>>2]|0;
   HEAP32[$62>>2] = $50;
   $63 = $p;
   $64 = $i;
   $65 = $cm;
   $66 = ((($65)) + 32|0);
   $67 = (($66) + (($64*12)|0)|0);
   $68 = ((($67)) + 4|0);
   $69 = ((($68)) + 4|0);
   HEAP32[$69>>2] = $63;
  }
  $70 = $1;
  $71 = ((($70)) + 60|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $currsize;
  $76 = (($74) + ($75))|0;
  $77 = $1;
  $78 = ((($77)) + 60|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 8|0);
  HEAP32[$80>>2] = $76;
  $81 = $1;
  $82 = ((($81)) + 60|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $1;
  $87 = ((($86)) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 4|0);
  HEAP32[$89>>2] = $85;
 }
 $90 = $1;
 $91 = ((($90)) + 60|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $0 = $94;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _coff_create_drectve($modinfo,$cm) {
 $modinfo = $modinfo|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0;
 var $exp = 0, $imp = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $q = 0, $size = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 72|0;
 $0 = $modinfo;
 $1 = $cm;
 $imp = 0;
 $2 = HEAP32[(15436)>>2]|0;
 $exp = $2;
 while(1) {
  $3 = $exp;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $exp;
  $6 = ((($5)) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 40|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9&255) >>> 2;
  $11 = $10 & 1;
  $12 = ($11<<24>>24)!=(0);
  if ($12) {
   break;
  }
  $13 = $exp;
  $14 = ((($13)) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $exp = $15;
 }
 $16 = HEAP8[(6078)>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(0);
 $19 = HEAP32[(6036)>>2]|0;
 $20 = ($19|0)!=(0|0);
 $or$cond = $18 | $20;
 L6: do {
  if (!($or$cond)) {
   $21 = HEAP32[(15412)>>2]|0;
   $imp = $21;
   while(1) {
    $22 = $imp;
    $23 = ($22|0)!=(0|0);
    if (!($23)) {
     break L6;
    }
    $24 = $imp;
    $25 = ((($24)) + 24|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($26&65535) >>> 11;
    $28 = $27 & 1;
    $29 = $28&255;
    $30 = $29&255;
    $31 = ($30|0)!=(0);
    do {
     if ($31) {
      $32 = $imp;
      $33 = ((($32)) + 28|0);
      $34 = ((($33)) + 3|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35&255) >>> 3;
      $37 = $36 & 1;
      $38 = $37&255;
      $39 = ($38|0)==(0);
      if (!($39)) {
       $40 = $imp;
       $41 = ((($40)) + 24|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = ($42&65535) >>> 3;
       $44 = $43 & 1;
       $45 = $44&255;
       $46 = $45&255;
       $47 = ($46|0)==(1);
       if (!($47)) {
        break;
       }
      }
      $48 = $imp;
      $49 = ((($48)) + 36|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)!=(0|0);
      if ($51) {
       $52 = $imp;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($54)) + 8|0);
       $56 = HEAP8[$55>>0]|0;
       $57 = $56 << 24 >> 24;
       $58 = ($57|0)!=(0);
       if ($58) {
        break L6;
       }
      }
     }
    } while(0);
    $59 = $imp;
    $60 = ((($59)) + 64|0);
    $61 = HEAP32[$60>>2]|0;
    $imp = $61;
   }
  }
 } while(0);
 $62 = $0;
 $63 = ((($62)) + 108|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 if (!($65)) {
  $66 = $0;
  $67 = ((($66)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)!=(0|0);
  $70 = $imp;
  $71 = ($70|0)!=(0|0);
  $or$cond3 = $69 | $71;
  $72 = $exp;
  $73 = ($72|0)!=(0|0);
  $or$cond5 = $or$cond3 | $73;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
 }
 $74 = $0;
 $75 = ((($74)) + 236|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = (_CreateIntSegment(83314,109841,-1,$76,0)|0);
 $78 = $1;
 HEAP32[$78>>2] = $77;
 $79 = ($77|0)!=(0|0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $size = 0;
 $80 = $1;
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 60|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($83)) + 67|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85 & -3;
 $87 = $86 | 2;
 HEAP8[$84>>0] = $87;
 $88 = $exp;
 $tmp = $88;
 while(1) {
  $89 = $tmp;
  $90 = ($89|0)!=(0|0);
  if (!($90)) {
   break;
  }
  $91 = $tmp;
  $92 = ((($91)) + 60|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 40|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ($95&255) >>> 2;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)!=(0);
  if ($98) {
   $99 = $tmp;
   $100 = (_Mangle($99,$buffer)|0);
   $101 = $size;
   $102 = (($101) + ($100))|0;
   $size = $102;
   $103 = $size;
   $104 = (($103) + 9)|0;
   $size = $104;
   $105 = HEAP8[(6075)>>0]|0;
   $106 = $105&255;
   $107 = ($106|0)==(1);
   if ($107) {
    $108 = $tmp;
    $109 = ((($108)) + 44|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = (($111) + 1)|0;
    $113 = $size;
    $114 = (($113) + ($112))|0;
    $size = $114;
   }
  }
  $115 = $tmp;
  $116 = ((($115)) + 68|0);
  $117 = HEAP32[$116>>2]|0;
  $tmp = $117;
 }
 $118 = $0;
 $119 = ((($118)) + 36|0);
 $120 = HEAP32[$119>>2]|0;
 $q = $120;
 while(1) {
  $121 = $q;
  $122 = ($121|0)!=(0|0);
  if (!($122)) {
   break;
  }
  $123 = $q;
  $124 = ((($123)) + 4|0);
  $125 = (_strlen($124)|0);
  $126 = (($125) + 13)|0;
  $127 = $size;
  $128 = (($127) + ($126))|0;
  $size = $128;
  $129 = $q;
  $130 = ((($129)) + 4|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131 << 24 >> 24;
  $133 = ($132|0)!=(34);
  if ($133) {
   $134 = $q;
   $135 = ((($134)) + 4|0);
   $136 = (_strchr($135,32)|0);
   $137 = ($136|0)!=(0|0);
   if ($137) {
    $138 = $size;
    $139 = (($138) + 2)|0;
    $size = $139;
   }
  }
  $140 = $q;
  $141 = HEAP32[$140>>2]|0;
  $q = $141;
 }
 $142 = (_GetStartLabel($buffer,1)|0);
 $143 = $size;
 $144 = (($143) + ($142))|0;
 $size = $144;
 $145 = $imp;
 $tmp = $145;
 while(1) {
  $146 = $tmp;
  $147 = ($146|0)!=(0|0);
  if (!($147)) {
   break;
  }
  $148 = $tmp;
  $149 = ((($148)) + 24|0);
  $150 = HEAP16[$149>>1]|0;
  $151 = ($150&65535) >>> 11;
  $152 = $151 & 1;
  $153 = $152&255;
  $154 = $153&255;
  $155 = ($154|0)!=(0);
  do {
   if ($155) {
    $156 = $tmp;
    $157 = ((($156)) + 28|0);
    $158 = ((($157)) + 3|0);
    $159 = HEAP8[$158>>0]|0;
    $160 = ($159&255) >>> 3;
    $161 = $160 & 1;
    $162 = $161&255;
    $163 = ($162|0)==(0);
    if (!($163)) {
     $164 = $tmp;
     $165 = ((($164)) + 24|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = ($166&65535) >>> 3;
     $168 = $167 & 1;
     $169 = $168&255;
     $170 = $169&255;
     $171 = ($170|0)==(1);
     if (!($171)) {
      break;
     }
    }
    $172 = $tmp;
    $173 = ((($172)) + 36|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ($174|0)!=(0|0);
    if ($175) {
     $176 = $tmp;
     $177 = ((($176)) + 36|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($178)) + 8|0);
     $180 = HEAP8[$179>>0]|0;
     $181 = $180 << 24 >> 24;
     $182 = ($181|0)!=(0);
     if ($182) {
      $183 = $size;
      $184 = (($183) + 9)|0;
      $size = $184;
      $185 = $tmp;
      $186 = (_Mangle($185,$buffer)|0);
      $187 = $size;
      $188 = (($187) + ($186))|0;
      $size = $188;
      $189 = $tmp;
      $190 = ((($189)) + 36|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ((($191)) + 8|0);
      $193 = (_strlen($192)|0);
      $194 = (1 + ($193))|0;
      $195 = $size;
      $196 = (($195) + ($194))|0;
      $size = $196;
      $197 = $tmp;
      $198 = ((($197)) + 44|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = (1 + ($200))|0;
      $202 = $size;
      $203 = (($202) + ($201))|0;
      $size = $203;
     }
    }
   }
  } while(0);
  $204 = $tmp;
  $205 = ((($204)) + 64|0);
  $206 = HEAP32[$205>>2]|0;
  $tmp = $206;
 }
 $207 = $size;
 $208 = $1;
 $209 = HEAP32[$208>>2]|0;
 $210 = ((($209)) + 36|0);
 HEAP32[$210>>2] = $207;
 $211 = $size;
 $212 = (($211) + 1)|0;
 $213 = (_LclAlloc($212)|0);
 $214 = $1;
 $215 = HEAP32[$214>>2]|0;
 $216 = ((($215)) + 60|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ((($217)) + 12|0);
 HEAP32[$218>>2] = $213;
 $219 = $1;
 $220 = HEAP32[$219>>2]|0;
 $221 = ((($220)) + 60|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ((($222)) + 12|0);
 $224 = HEAP32[$223>>2]|0;
 $p = $224;
 $225 = $exp;
 $tmp = $225;
 while(1) {
  $226 = $tmp;
  $227 = ($226|0)!=(0|0);
  if (!($227)) {
   break;
  }
  $228 = $tmp;
  $229 = ((($228)) + 60|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($230)) + 40|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = ($232&255) >>> 2;
  $234 = $233 & 1;
  $235 = ($234<<24>>24)!=(0);
  do {
   if ($235) {
    $236 = $tmp;
    (_Mangle($236,$buffer)|0);
    $237 = HEAP8[(6075)>>0]|0;
    $238 = $237&255;
    $239 = ($238|0)==(0);
    $240 = $p;
    if ($239) {
     HEAP32[$vararg_buffer>>2] = $buffer;
     $241 = (_sprintf($240,83323,$vararg_buffer)|0);
     $242 = $p;
     $243 = (($242) + ($241)|0);
     $p = $243;
     break;
    } else {
     $244 = $tmp;
     $245 = ((($244)) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $246;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $buffer;
     $247 = (_sprintf($240,83335,$vararg_buffer6)|0);
     $248 = $p;
     $249 = (($248) + ($247)|0);
     $p = $249;
     break;
    }
   }
  } while(0);
  $250 = $tmp;
  $251 = ((($250)) + 68|0);
  $252 = HEAP32[$251>>2]|0;
  $tmp = $252;
 }
 $253 = $0;
 $254 = ((($253)) + 36|0);
 $255 = HEAP32[$254>>2]|0;
 $q = $255;
 while(1) {
  $256 = $q;
  $257 = ($256|0)!=(0|0);
  if (!($257)) {
   break;
  }
  $258 = $q;
  $259 = ((($258)) + 4|0);
  $260 = HEAP8[$259>>0]|0;
  $261 = $260 << 24 >> 24;
  $262 = ($261|0)!=(34);
  if ($262) {
   $263 = $q;
   $264 = ((($263)) + 4|0);
   $265 = (_strchr($264,32)|0);
   $266 = ($265|0)!=(0|0);
   if ($266) {
    $267 = $p;
    $268 = $q;
    $269 = ((($268)) + 4|0);
    HEAP32[$vararg_buffer10>>2] = $269;
    $270 = (_sprintf($267,83350,$vararg_buffer10)|0);
    $271 = $p;
    $272 = (($271) + ($270)|0);
    $p = $272;
   } else {
    label = 50;
   }
  } else {
   label = 50;
  }
  if ((label|0) == 50) {
   label = 0;
   $273 = $p;
   $274 = $q;
   $275 = ((($274)) + 4|0);
   HEAP32[$vararg_buffer13>>2] = $275;
   $276 = (_sprintf($273,83368,$vararg_buffer13)|0);
   $277 = $p;
   $278 = (($277) + ($276)|0);
   $p = $278;
  }
  $279 = $q;
  $280 = HEAP32[$279>>2]|0;
  $q = $280;
 }
 $281 = $0;
 $282 = ((($281)) + 108|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = ($283|0)!=(0|0);
 if ($284) {
  (_GetStartLabel($buffer,0)|0);
  $285 = $p;
  HEAP32[$vararg_buffer16>>2] = $buffer;
  $286 = (_sprintf($285,83384,$vararg_buffer16)|0);
  $287 = $p;
  $288 = (($287) + ($286)|0);
  $p = $288;
 }
 $289 = $imp;
 $tmp = $289;
 while(1) {
  $290 = $tmp;
  $291 = ($290|0)!=(0|0);
  if (!($291)) {
   break;
  }
  $292 = $tmp;
  $293 = ((($292)) + 24|0);
  $294 = HEAP16[$293>>1]|0;
  $295 = ($294&65535) >>> 11;
  $296 = $295 & 1;
  $297 = $296&255;
  $298 = $297&255;
  $299 = ($298|0)!=(0);
  do {
   if ($299) {
    $300 = $tmp;
    $301 = ((($300)) + 28|0);
    $302 = ((($301)) + 3|0);
    $303 = HEAP8[$302>>0]|0;
    $304 = ($303&255) >>> 3;
    $305 = $304 & 1;
    $306 = $305&255;
    $307 = ($306|0)==(0);
    if (!($307)) {
     $308 = $tmp;
     $309 = ((($308)) + 24|0);
     $310 = HEAP16[$309>>1]|0;
     $311 = ($310&65535) >>> 3;
     $312 = $311 & 1;
     $313 = $312&255;
     $314 = $313&255;
     $315 = ($314|0)==(1);
     if (!($315)) {
      break;
     }
    }
    $316 = $tmp;
    $317 = ((($316)) + 36|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ($318|0)!=(0|0);
    if ($319) {
     $320 = $tmp;
     $321 = ((($320)) + 36|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ((($322)) + 8|0);
     $324 = HEAP8[$323>>0]|0;
     $325 = $324 << 24 >> 24;
     $326 = ($325|0)!=(0);
     if ($326) {
      $327 = $p;
      (_strcpy($327,83395)|0);
      $328 = $p;
      $329 = ((($328)) + 8|0);
      $p = $329;
      $330 = $tmp;
      $331 = $p;
      $332 = (_Mangle($330,$331)|0);
      $333 = $p;
      $334 = (($333) + ($332)|0);
      $p = $334;
      $335 = $p;
      $336 = ((($335)) + 1|0);
      $p = $336;
      HEAP8[$335>>0] = 61;
      $337 = $p;
      $338 = $tmp;
      $339 = ((($338)) + 36|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = ((($340)) + 8|0);
      (_strcpy($337,$341)|0);
      $342 = $p;
      $343 = (_strlen($342)|0);
      $344 = $p;
      $345 = (($344) + ($343)|0);
      $p = $345;
      $346 = $p;
      $347 = ((($346)) + 1|0);
      $p = $347;
      HEAP8[$346>>0] = 46;
      $348 = $p;
      $349 = $tmp;
      $350 = ((($349)) + 4|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = $tmp;
      $353 = ((($352)) + 44|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $354&255;
      _memcpy(($348|0),($351|0),($355|0))|0;
      $356 = $tmp;
      $357 = ((($356)) + 44|0);
      $358 = HEAP8[$357>>0]|0;
      $359 = $358&255;
      $360 = $p;
      $361 = (($360) + ($359)|0);
      $p = $361;
      $362 = $p;
      $363 = ((($362)) + 1|0);
      $p = $363;
      HEAP8[$362>>0] = 32;
     }
    }
   }
  } while(0);
  $364 = $tmp;
  $365 = ((($364)) + 64|0);
  $366 = HEAP32[$365>>2]|0;
  $tmp = $366;
 }
 $367 = $size;
 $368 = $p;
 $369 = $1;
 $370 = HEAP32[$369>>2]|0;
 $371 = ((($370)) + 60|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = ((($372)) + 12|0);
 $374 = HEAP32[$373>>2]|0;
 $375 = $368;
 $376 = $374;
 $377 = (($375) - ($376))|0;
 $378 = ($367|0)==($377|0);
 if ($378) {
  STACKTOP = sp;return;
 }
 (_InternalError(83302,1347)|0);
 STACKTOP = sp;return;
}
function _coff_write_section_table($modinfo,$cm) {
 $modinfo = $modinfo|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $cp = 0, $curr = 0, $fileoffset = 0, $fix = 0, $ish = 0, $len = 0, $or$cond = 0, $secname = 0;
 var $segtype = 0, $src = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $segtype = sp + 56|0;
 $ish = sp + 16|0;
 $buffer = sp + 88|0;
 $0 = $modinfo;
 $1 = $cm;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4*40)|0;
 $6 = (20 + ($5))|0;
 $fileoffset = $6;
 $7 = $fileoffset;
 $8 = $1;
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = $7;
 $10 = HEAP32[(15420)>>2]|0;
 $curr = $10;
 while(1) {
  $11 = $curr;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  HEAP32[$segtype>>2] = 0;
  $13 = $curr;
  $14 = ((($13)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  $19 = $curr;
  if ($18) {
   $20 = ((($19)) + 60|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 60|0);
   $23 = HEAP32[$22>>2]|0;
   $25 = $23;
  } else {
   $24 = (_ConvertSectionName($19,$segtype,$buffer)|0);
   $25 = $24;
  }
  $secname = $25;
  $26 = $secname;
  $27 = (_strlen($26)|0);
  $len = $27;
  $28 = $len;
  $29 = ($28>>>0)<=(8);
  if ($29) {
   $30 = $secname;
   (_strncpy($ish,$30,8)|0);
  } else {
   $31 = $1;
   $32 = $secname;
   $33 = $len;
   $34 = (_Coff_AllocString($31,$32,$33)|0);
   HEAP32[$vararg_buffer>>2] = $34;
   (_sprintf($ish,83310,$vararg_buffer)|0);
  }
  $35 = ((($ish)) + 8|0);
  HEAP32[$35>>2] = 0;
  $36 = ((($ish)) + 12|0);
  HEAP32[$36>>2] = 0;
  $37 = $curr;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($ish)) + 16|0);
  HEAP32[$40>>2] = $39;
  $41 = ((($ish)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0);
  $44 = $fileoffset;
  $45 = $43 ? $44 : 0;
  $46 = ((($ish)) + 20|0);
  HEAP32[$46>>2] = $45;
  $47 = ((($ish)) + 24|0);
  HEAP32[$47>>2] = 0;
  $48 = ((($ish)) + 28|0);
  HEAP32[$48>>2] = 0;
  $49 = ((($ish)) + 32|0);
  HEAP16[$49>>1] = 0;
  $50 = ((($ish)) + 34|0);
  HEAP16[$50>>1] = 0;
  $51 = ((($ish)) + 36|0);
  HEAP32[$51>>2] = 0;
  $52 = $curr;
  $53 = ((($52)) + 60|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 67|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56&255) >>> 1;
  $58 = $57 & 1;
  $59 = ($58<<24>>24)!=(0);
  $60 = $curr;
  do {
   if ($59) {
    $61 = $1;
    $62 = HEAP32[$61>>2]|0;
    $63 = ($60|0)==($62|0);
    $64 = ((($ish)) + 36|0);
    if ($63) {
     HEAP32[$64>>2] = 2560;
     break;
    } else {
     HEAP32[$64>>2] = 576;
     break;
    }
   } else {
    $65 = ((($60)) + 60|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 66|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = ($69|0)!=(255);
    if ($70) {
     $71 = $curr;
     $72 = ((($71)) + 60|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + 66|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = (($76) + 1)|0;
     $78 = $77 << 20;
     $79 = ((($ish)) + 36|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 | $78;
     HEAP32[$79>>2] = $81;
    }
    $82 = $curr;
    $83 = ((($82)) + 60|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 68|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = ($86&255) >>> 3;
    $88 = $87 & 7;
    $89 = ($88<<24>>24)!=(0);
    if ($89) {
     $90 = ((($ish)) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $91 | 4096;
     HEAP32[$90>>2] = $92;
    }
    $93 = $curr;
    $94 = ((($93)) + 60|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 44|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(1);
    if ($98) {
     $99 = ((($ish)) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 | 1610612768;
     HEAP32[$99>>2] = $101;
     break;
    }
    $102 = $curr;
    $103 = ((($102)) + 60|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + 67|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 & 1;
    $108 = ($107<<24>>24)!=(0);
    if ($108) {
     $109 = ((($ish)) + 36|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 | 1073741888;
     HEAP32[$109>>2] = $111;
     break;
    }
    $112 = $curr;
    $113 = ((($112)) + 60|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($114)) + 52|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)!=(0|0);
    if ($117) {
     $118 = $curr;
     $119 = ((($118)) + 60|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ((($120)) + 52|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($122)) + 4|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_strcmp($124,109557)|0);
     $126 = ($125|0)==(0);
     if ($126) {
      $127 = ((($ish)) + 36|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 | 1073741888;
      HEAP32[$127>>2] = $129;
      break;
     }
    }
    $130 = $curr;
    $131 = ((($130)) + 60|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ((($132)) + 44|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134|0)==(3);
    $136 = HEAP32[$segtype>>2]|0;
    $137 = ($136|0)==(3);
    $or$cond = $135 | $137;
    $138 = $curr;
    $139 = ((($138)) + 60|0);
    $140 = HEAP32[$139>>2]|0;
    if ($or$cond) {
     $141 = ((($140)) + 44|0);
     HEAP32[$141>>2] = 3;
     $142 = ((($ish)) + 36|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $143 | -1073741696;
     HEAP32[$142>>2] = $144;
     $145 = ((($ish)) + 20|0);
     HEAP32[$145>>2] = 0;
     break;
    }
    $146 = ((($140)) + 68|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147 & 7;
    $149 = $148&255;
    $150 = ($149|0)==(5);
    if ($150) {
     $151 = $curr;
     $152 = ((($151)) + 60|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ((($153)) + 16|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($155|0)==(0);
     if ($156) {
      $157 = ((($ish)) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $158 | -1073741696;
      HEAP32[$157>>2] = $159;
      $160 = ((($ish)) + 16|0);
      HEAP32[$160>>2] = 0;
      $161 = ((($ish)) + 20|0);
      HEAP32[$161>>2] = 0;
      break;
     }
    }
    $162 = ((($ish)) + 36|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = $163 | -1073741760;
    HEAP32[$162>>2] = $164;
   }
  } while(0);
  $165 = $curr;
  $166 = ((($165)) + 60|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($167)) + 65|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = ($169<<24>>24)!=(0);
  if ($170) {
   $171 = ((($ish)) + 36|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $172 & 33554431;
   HEAP32[$171>>2] = $173;
   $174 = $curr;
   $175 = ((($174)) + 60|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($176)) + 65|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $179 & 254;
   $181 = $180 << 24;
   $182 = ((($ish)) + 36|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $183 | $181;
   HEAP32[$182>>2] = $184;
  }
  $185 = ((($ish)) + 20|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)!=(0);
  if ($187) {
   $188 = ((($ish)) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $fileoffset;
   $191 = (($190) + ($189))|0;
   $fileoffset = $191;
  }
  $192 = $curr;
  $193 = ((($192)) + 60|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = ((($194)) + 24|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)!=(0|0);
  do {
   if ($197) {
    $198 = $curr;
    $199 = ((($198)) + 60|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = ((($200)) + 24|0);
    $202 = HEAP32[$201>>2]|0;
    $fix = $202;
    while(1) {
     $203 = $fix;
     $204 = ($203|0)!=(0|0);
     if (!($204)) {
      break;
     }
     $205 = $fix;
     $206 = ((($205)) + 36|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if ($208) {
      $209 = $fix;
      $210 = ((($209)) + 16|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ($211|0)==(3);
      if ($212) {
       $213 = $curr;
       $214 = ((($213)) + 60|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ((($215)) + 12|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $fix;
       $219 = ((($218)) + 12|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = $curr;
       $222 = ((($221)) + 60|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ((($223)) + 4|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = (($220) - ($225))|0;
       $227 = (($217) + ($226)|0);
       $cp = $227;
       $228 = $fix;
       $229 = ((($228)) + 12|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = $fix;
       $232 = ((($231)) + 24|0);
       $233 = HEAP8[$232>>0]|0;
       $234 = $233&255;
       $235 = (($230) + ($234))|0;
       $src = $235;
       $236 = $src;
       $237 = $cp;
       $238 = HEAP32[$237>>2]|0;
       $239 = (($238) - ($236))|0;
       HEAP32[$237>>2] = $239;
      }
      $240 = $fix;
      $241 = ((($240)) + 16|0);
      HEAP32[$241>>2] = 0;
     } else {
      $242 = $curr;
      $243 = ((($242)) + 60|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = ((($244)) + 36|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = (($246) + 1)|0;
      HEAP32[$245>>2] = $247;
     }
     $248 = $fix;
     $249 = ((($248)) + 4|0);
     $250 = HEAP32[$249>>2]|0;
     $fix = $250;
    }
    $251 = $fileoffset;
    $252 = (($251) + 1)|0;
    $253 = $252 & -2;
    $fileoffset = $253;
    $254 = $fileoffset;
    $255 = ((($ish)) + 24|0);
    HEAP32[$255>>2] = $254;
    $256 = $curr;
    $257 = ((($256)) + 60|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($258)) + 36|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260*10)|0;
    $262 = $fileoffset;
    $263 = (($262) + ($261))|0;
    $fileoffset = $263;
    $264 = $curr;
    $265 = ((($264)) + 60|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = ((($266)) + 36|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ($268>>>0)<=(65535);
    if ($269) {
     $270 = $curr;
     $271 = ((($270)) + 60|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ((($272)) + 36|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = $274&65535;
     $276 = ((($ish)) + 32|0);
     HEAP16[$276>>1] = $275;
     break;
    } else {
     $277 = ((($ish)) + 32|0);
     HEAP16[$277>>1] = -1;
     $278 = ((($ish)) + 36|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $279 | 16777216;
     HEAP32[$278>>2] = $280;
     $281 = $fileoffset;
     $282 = (($281) + 10)|0;
     $fileoffset = $282;
     break;
    }
   }
  } while(0);
  $283 = $curr;
  $284 = ((($283)) + 60|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = ((($285)) + 32|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = ($287|0)!=(0|0);
  if ($288) {
   $289 = $fileoffset;
   $290 = ((($ish)) + 28|0);
   HEAP32[$290>>2] = $289;
   $291 = $curr;
   $292 = ((($291)) + 60|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 32|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (_GetLinnumItems($295)|0);
   $297 = $296&65535;
   $298 = ((($ish)) + 34|0);
   HEAP16[$298>>1] = $297;
   $299 = ((($ish)) + 34|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $300&65535;
   $302 = ($301*6)|0;
   $303 = $fileoffset;
   $304 = (($303) + ($302))|0;
   $fileoffset = $304;
  }
  $305 = HEAP32[(376)>>2]|0;
  $306 = (_fwrite($ish,1,40,$305)|0);
  $307 = ($306|0)!=(40);
  if ($307) {
   _WriteError();
  }
  $308 = $curr;
  $309 = ((($308)) + 64|0);
  $310 = HEAP32[$309>>2]|0;
  $curr = $310;
 }
 STACKTOP = sp;return 0;
}
function _coff_write_data($modinfo,$cm) {
 $modinfo = $modinfo|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $il = 0, $index = 0, $last = 0, $line_numbers = 0, $lni = 0, $offset = 0, $pdw = 0, $section = 0, $sehp = 0, $sehp2 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $offset = sp + 36|0;
 $index = sp + 28|0;
 $il = sp + 52|0;
 $0 = $modinfo;
 $1 = $cm;
 HEAP32[$offset>>2] = 0;
 $2 = $0;
 $3 = $1;
 $4 = (_SetSymbolIndices($2,$3)|0);
 HEAP32[$index>>2] = $4;
 $5 = $0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 L1: do {
  if ($8) {
   $9 = $0;
   $10 = ((($9)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $sehp = $11;
   $12 = $1;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 60|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $pdw = $18;
   while(1) {
    $19 = $sehp;
    $20 = ($19|0)!=(0|0);
    if (!($20)) {
     break L1;
    }
    $21 = $sehp;
    $22 = HEAP32[$21>>2]|0;
    $sehp2 = $22;
    $23 = $sehp;
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 56|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $pdw;
    $29 = ((($28)) + 4|0);
    $pdw = $29;
    HEAP32[$28>>2] = $27;
    $30 = $sehp2;
    $sehp = $30;
   }
  }
 } while(0);
 $i = 0;
 $31 = HEAP32[(15420)>>2]|0;
 $section = $31;
 while(1) {
  $32 = $section;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $1;
  $35 = ((($34)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $i;
  $38 = (($36) + ($37))|0;
  $39 = $section;
  $40 = ((($39)) + 56|0);
  HEAP32[$40>>2] = $38;
  $41 = HEAP8[(6072)>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = $i;
   $45 = $section;
   $46 = ((($45)) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44))|0;
   HEAP32[$46>>2] = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
  $51 = $section;
  $52 = ((($51)) + 64|0);
  $53 = HEAP32[$52>>2]|0;
  $section = $53;
 }
 $54 = HEAP32[(15420)>>2]|0;
 $section = $54;
 while(1) {
  $55 = $section;
  $56 = ($55|0)!=(0|0);
  if (!($56)) {
   break;
  }
  $57 = $section;
  $58 = ((($57)) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $size = $59;
  $60 = $section;
  $61 = ((($60)) + 60|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 68|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64 & 7;
  $66 = $65&255;
  $67 = ($66|0)==(5);
  if ($67) {
   $68 = $section;
   $69 = ((($68)) + 60|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(0);
   if (!($73)) {
    label = 14;
   }
  } else {
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $74 = $section;
   $75 = ((($74)) + 60|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 44|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(3);
   if (!($79)) {
    $80 = $size;
    $81 = ($80|0)!=(0);
    if ($81) {
     $82 = $size;
     $83 = HEAP32[$offset>>2]|0;
     $84 = (($83) + ($82))|0;
     HEAP32[$offset>>2] = $84;
     $85 = HEAP32[$offset>>2]|0;
     $86 = $85 & 1;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $section;
      $89 = ((($88)) + 60|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ((($90)) + 24|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)!=(0|0);
      if ($93) {
       $94 = HEAP32[$offset>>2]|0;
       $95 = (($94) + 1)|0;
       HEAP32[$offset>>2] = $95;
       $96 = $size;
       $97 = (($96) + 1)|0;
       $size = $97;
      }
     }
     $98 = $section;
     $99 = ((($98)) + 60|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ((($100)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if ($103) {
      $104 = HEAP32[(376)>>2]|0;
      $105 = $size;
      (_fseek($104,$105,1)|0);
     } else {
      $106 = $section;
      $107 = ((($106)) + 60|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($108)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($110|0)!=(0);
      if ($111) {
       $112 = HEAP32[(376)>>2]|0;
       $113 = $section;
       $114 = ((($113)) + 60|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ((($115)) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       (_fseek($112,$117,1)|0);
       $118 = $section;
       $119 = ((($118)) + 60|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ((($120)) + 4|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = $size;
       $124 = (($123) - ($122))|0;
       $size = $124;
      }
      $125 = $section;
      $126 = ((($125)) + 60|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($127)) + 12|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = $size;
      $131 = HEAP32[(376)>>2]|0;
      $132 = (_fwrite($129,1,$130,$131)|0);
      $133 = $size;
      $134 = ($132|0)!=($133|0);
      if ($134) {
       _WriteError();
      }
     }
     $135 = $section;
     _coff_write_fixups($135,$offset,$index);
    }
    $136 = HEAP8[(6005)>>0]|0;
    $137 = $136&255;
    $138 = ($137|0)!=(0);
    if ($138) {
     $139 = $section;
     $140 = ((($139)) + 60|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ((($141)) + 32|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)!=(0|0);
     if ($144) {
      $line_numbers = 0;
      $last = 0;
      $145 = $section;
      $146 = ((($145)) + 60|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($147)) + 32|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = HEAP32[$149>>2]|0;
      $lni = $150;
      while(1) {
       $151 = $lni;
       $152 = ($151|0)!=(0|0);
       if (!($152)) {
        break;
       }
       $153 = $lni;
       $154 = ((($153)) + 4|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)==(0);
       if ($156) {
        $157 = $lni;
        $158 = ((($157)) + 12|0);
        $159 = HEAP32[$158>>2]|0;
        $last = $159;
        $160 = $1;
        $161 = ((($160)) + 8|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($162|0)!=(0|0);
        if ($163) {
         $164 = $lni;
         $165 = ((($164)) + 12|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ((($166)) + 56|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = $1;
         $170 = ((($169)) + 8|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = ((($171)) + 40|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ((($173)) + 16|0);
         HEAP32[$174>>2] = $168;
        }
        $175 = $lni;
        $176 = ((($175)) + 12|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = $1;
        $179 = ((($178)) + 8|0);
        HEAP32[$179>>2] = $177;
        $180 = $lni;
        $181 = ((($180)) + 12|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = ((($182)) + 40|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = ((($184)) + 16|0);
        HEAP32[$185>>2] = 0;
        $186 = ((($il)) + 4|0);
        HEAP16[$186>>1] = 0;
        $187 = $lni;
        $188 = ((($187)) + 12|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ((($189)) + 56|0);
        $191 = HEAP32[$190>>2]|0;
        HEAP16[$il>>1]=$191&65535;HEAP16[$il+2>>1]=$191>>>16;
        $192 = $lni;
        $193 = ((($192)) + 8|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = $194 & 1048575;
        $196 = $lni;
        $197 = ((($196)) + 12|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = ((($198)) + 40|0);
        $200 = HEAP32[$199>>2]|0;
        HEAP32[$200>>2] = $195;
        $201 = $1;
        $202 = ((($201)) + 16|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = HEAP32[$offset>>2]|0;
        $205 = (($203) + ($204))|0;
        $206 = $lni;
        $207 = ((($206)) + 12|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = ((($208)) + 40|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = ((($210)) + 8|0);
        HEAP32[$211>>2] = $205;
       } else {
        $212 = $last;
        $213 = ($212|0)!=(0|0);
        if (!($213)) {
         (_InternalError(83302,1185)|0);
        }
        $214 = $lni;
        $215 = ((($214)) + 4|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = $last;
        $218 = ((($217)) + 40|0);
        $219 = HEAP32[$218>>2]|0;
        $220 = HEAP32[$219>>2]|0;
        $221 = (($216) - ($220))|0;
        $222 = $221&65535;
        $223 = ((($il)) + 4|0);
        HEAP16[$223>>1] = $222;
        $224 = ((($il)) + 4|0);
        $225 = HEAP16[$224>>1]|0;
        $226 = $225&65535;
        $227 = ($226|0)==(0);
        if ($227) {
         $228 = ((($il)) + 4|0);
         HEAP16[$228>>1] = 32767;
        }
        $229 = $lni;
        $230 = ((($229)) + 8|0);
        $231 = HEAP32[$230>>2]|0;
        HEAP16[$il>>1]=$231&65535;HEAP16[$il+2>>1]=$231>>>16;
       }
       $232 = $last;
       $233 = ((($232)) + 40|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ((($234)) + 12|0);
       $236 = HEAP16[$235>>1]|0;
       $237 = (($236) + 1)<<16>>16;
       HEAP16[$235>>1] = $237;
       $238 = $lni;
       $239 = ((($238)) + 4|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = $last;
       $242 = ((($241)) + 40|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ((($243)) + 4|0);
       HEAP32[$244>>2] = $240;
       $245 = HEAP32[(376)>>2]|0;
       $246 = (_fwrite($il,1,6,$245)|0);
       $247 = ($246|0)!=(6);
       if ($247) {
        _WriteError();
       }
       $248 = HEAP32[$offset>>2]|0;
       $249 = (($248) + 6)|0;
       HEAP32[$offset>>2] = $249;
       $250 = $line_numbers;
       $251 = (($250) + 1)|0;
       $line_numbers = $251;
       $252 = $lni;
       $253 = HEAP32[$252>>2]|0;
       $lni = $253;
      }
      $254 = $line_numbers;
      $255 = $section;
      $256 = ((($255)) + 60|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = ((($257)) + 32|0);
      HEAP32[$258>>2] = $254;
     }
    }
   }
  }
  $259 = $section;
  $260 = ((($259)) + 64|0);
  $261 = HEAP32[$260>>2]|0;
  $section = $261;
 }
 $262 = HEAP32[$offset>>2]|0;
 $263 = $1;
 $264 = ((($263)) + 20|0);
 HEAP32[$264>>2] = $262;
 STACKTOP = sp;return 0;
}
function _coff_write_symbols($modinfo,$cm) {
 $modinfo = $modinfo|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $cntSymbols = 0, $curr = 0, $i = 0, $ias = 0, $is = 0, $lastfile = 0;
 var $len = 0, $p = 0, $q = 0, $sym = 0, $sym1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 16|0;
 $is = sp + 62|0;
 $ias = sp + 44|0;
 $buffer = sp + 80|0;
 $0 = $modinfo;
 $1 = $cm;
 $cntSymbols = 0;
 $lastfile = 0;
 $2 = HEAP8[(6095)>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($3) {
  $4 = HEAP32[(376)>>2]|0;
  $5 = (_fwrite(67752,1,18,$4)|0);
  $6 = ($5|0)!=(18);
  if ($6) {
   _WriteError();
  }
  $7 = $cntSymbols;
  $8 = (($7) + 1)|0;
  $cntSymbols = $8;
 }
 $9 = HEAP8[(6070)>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(0);
 if ($11) {
  (_strncpy($is,83284,8)|0);
  $12 = HEAP8[(6005)>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $19 = $17;
  } else {
   $19 = 0;
  }
  $18 = ((($is)) + 8|0);
  HEAP16[$18>>1]=$19&65535;HEAP16[$18+2>>1]=$19>>>16;
  $20 = ((($is)) + 12|0);
  HEAP16[$20>>1] = -2;
  $21 = ((($is)) + 14|0);
  HEAP16[$21>>1] = 0;
  $22 = ((($is)) + 16|0);
  HEAP8[$22>>0] = 103;
  $23 = $1;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$p>>2] = $25;
  $26 = HEAP32[$p>>2]|0;
  $27 = (_strlen($26)|0);
  $i = $27;
  $28 = $i;
  $29 = (($28>>>0) / 18)&-1;
  $30 = $i;
  $31 = (($30>>>0) % 18)&-1;
  $32 = ($31|0)!=(0);
  $33 = $32 ? 1 : 0;
  $34 = (($29) + ($33))|0;
  $35 = $34&255;
  $36 = ((($is)) + 17|0);
  HEAP8[$36>>0] = $35;
  $37 = HEAP32[(376)>>2]|0;
  $38 = (_fwrite($is,1,18,$37)|0);
  $39 = ($38|0)!=(18);
  if ($39) {
   _WriteError();
  }
  $40 = ((($is)) + 17|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $i = $42;
  while(1) {
   $43 = $i;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
   $45 = HEAP32[$p>>2]|0;
   (_strncpy($ias,$45,18)|0);
   $46 = HEAP32[(376)>>2]|0;
   $47 = (_fwrite($ias,1,18,$46)|0);
   $48 = ($47|0)!=(18);
   if ($48) {
    _WriteError();
   }
   $49 = $i;
   $50 = (($49) + -1)|0;
   $i = $50;
   $51 = HEAP32[$p>>2]|0;
   $52 = ((($51)) + 18|0);
   HEAP32[$p>>2] = $52;
  }
  $53 = ((($is)) + 17|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($55) + 1)|0;
  $57 = $cntSymbols;
  $58 = (($57) + ($56))|0;
  $cntSymbols = $58;
 }
 $i = 1;
 $59 = HEAP32[(15420)>>2]|0;
 $curr = $59;
 while(1) {
  $60 = $curr;
  $61 = ($60|0)!=(0|0);
  if (!($61)) {
   break;
  }
  $62 = $curr;
  $63 = ((($62)) + 60|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 60|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)!=(0|0);
  $68 = $curr;
  if ($67) {
   $69 = ((($68)) + 60|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 60|0);
   $72 = HEAP32[$71>>2]|0;
   $74 = $72;
  } else {
   $73 = (_ConvertSectionName($68,0,$buffer)|0);
   $74 = $73;
  }
  HEAP32[$p>>2] = $74;
  $75 = HEAP32[$p>>2]|0;
  $76 = (_strlen($75)|0);
  $len = $76;
  $77 = $len;
  $78 = ($77>>>0)<=(8);
  if ($78) {
   $79 = HEAP32[$p>>2]|0;
   (_strncpy($is,$79,8)|0);
  } else {
   HEAP16[$is>>1]=0&65535;HEAP16[$is+2>>1]=0>>>16;
   $80 = $1;
   $81 = HEAP32[$p>>2]|0;
   $82 = $len;
   $83 = (_Coff_AllocString($80,$81,$82)|0);
   $84 = ((($is)) + 4|0);
   HEAP16[$84>>1]=$83&65535;HEAP16[$84+2>>1]=$83>>>16;
  }
  $85 = ((($is)) + 8|0);
  HEAP16[$85>>1]=0&65535;HEAP16[$85+2>>1]=0>>>16;
  $86 = $i;
  $87 = $86&65535;
  $88 = ((($is)) + 12|0);
  HEAP16[$88>>1] = $87;
  $89 = ((($is)) + 14|0);
  HEAP16[$89>>1] = 0;
  $90 = ((($is)) + 16|0);
  HEAP8[$90>>0] = 3;
  $91 = ((($is)) + 17|0);
  HEAP8[$91>>0] = 0;
  $92 = HEAP8[(6072)>>0]|0;
  $93 = $92&255;
  $94 = ($93|0)==(0);
  if ($94) {
   $95 = ((($is)) + 17|0);
   HEAP8[$95>>0] = 1;
  }
  $96 = HEAP32[(376)>>2]|0;
  $97 = (_fwrite($is,1,18,$96)|0);
  $98 = ($97|0)!=(18);
  if ($98) {
   _WriteError();
  }
  $99 = $cntSymbols;
  $100 = (($99) + 1)|0;
  $cntSymbols = $100;
  $101 = HEAP8[(6072)>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)==(0);
  if ($103) {
   label = 30;
  } else {
   $104 = $curr;
   $105 = ((($104)) + 60|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($106)) + 68|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108&255) >>> 3;
   $110 = $109 & 7;
   $111 = $110&255;
   $112 = ($111|0)!=(0);
   if ($112) {
    label = 30;
   }
  }
  if ((label|0) == 30) {
   label = 0;
   $113 = $curr;
   $114 = ((($113)) + 36|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP16[$ias>>1]=$115&65535;HEAP16[$ias+2>>1]=$115>>>16;
   $116 = $curr;
   $117 = ((($116)) + 60|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($118)) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($120>>>0)>(65535);
   if ($121) {
    $130 = 65535;
   } else {
    $122 = $curr;
    $123 = ((($122)) + 60|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($124)) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $126&65535;
    $128 = $127&65535;
    $130 = $128;
   }
   $129 = $130&65535;
   $131 = ((($ias)) + 4|0);
   HEAP16[$131>>1] = $129;
   $132 = HEAP8[(6005)>>0]|0;
   $133 = ($132<<24>>24)!=(0);
   if ($133) {
    $134 = $curr;
    $135 = ((($134)) + 60|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ((($136)) + 32|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138&65535;
    $140 = ((($ias)) + 6|0);
    HEAP16[$140>>1] = $139;
   } else {
    $141 = ((($ias)) + 6|0);
    HEAP16[$141>>1] = 0;
   }
   $142 = $curr;
   $143 = ((($142)) + 60|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($144)) + 68|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = ($146&255) >>> 3;
   $148 = $147 & 7;
   $149 = ($148<<24>>24)!=(0);
   if ($149) {
    $150 = $curr;
    $151 = ((($150)) + 60|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ((($152)) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $curr;
    $156 = ((($155)) + 36|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (_CRC32Comdat($154,$157,0)|0);
    $159 = ((($ias)) + 8|0);
    HEAP16[$159>>1]=$158&65535;HEAP16[$159+2>>1]=$158>>>16;
    $160 = $curr;
    $161 = ((($160)) + 60|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 56|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = ((($ias)) + 12|0);
    HEAP16[$165>>1] = $164;
    $166 = $curr;
    $167 = ((($166)) + 60|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ((($168)) + 68|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = ($170&255) >>> 3;
    $172 = $171 & 7;
    $173 = ((($ias)) + 14|0);
    HEAP8[$173>>0] = $172;
   } else {
    $174 = ((($ias)) + 8|0);
    HEAP16[$174>>1]=0&65535;HEAP16[$174+2>>1]=0>>>16;
    $175 = ((($ias)) + 12|0);
    HEAP16[$175>>1] = 0;
    $176 = ((($ias)) + 14|0);
    HEAP8[$176>>0] = 0;
   }
   $177 = HEAP32[(376)>>2]|0;
   $178 = (_fwrite($ias,1,18,$177)|0);
   $179 = ($178|0)!=(18);
   if ($179) {
    _WriteError();
   }
   $180 = $cntSymbols;
   $181 = (($180) + 1)|0;
   $cntSymbols = $181;
  }
  $182 = $curr;
  $183 = ((($182)) + 64|0);
  $184 = HEAP32[$183>>2]|0;
  $curr = $184;
  $185 = $i;
  $186 = (($185) + 1)|0;
  $i = $186;
 }
 $187 = HEAP32[(15412)>>2]|0;
 $curr = $187;
 while(1) {
  $188 = $curr;
  $189 = ($188|0)!=(0|0);
  if (!($189)) {
   break;
  }
  $190 = $curr;
  $191 = ((($190)) + 28|0);
  $192 = ((($191)) + 3|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = ($193&255) >>> 2;
  $195 = $194 & 1;
  $196 = $195&255;
  $197 = ($196|0)==(0);
  if ($197) {
   $198 = $curr;
   $199 = ((($198)) + 28|0);
   $200 = ((($199)) + 3|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = ($201&255) >>> 3;
   $203 = $202 & 1;
   $204 = $203&255;
   $205 = ($204|0)==(1);
   if (!($205)) {
    label = 46;
   }
  } else {
   label = 46;
  }
  if ((label|0) == 46) {
   label = 0;
   $206 = $curr;
   $207 = (_Mangle($206,$buffer)|0);
   $len = $207;
   $208 = $curr;
   $209 = (_CoffGetType($208)|0);
   $210 = ((($is)) + 14|0);
   HEAP16[$210>>1] = $209;
   $211 = $curr;
   $212 = (_CoffGetClass($211)|0);
   $213 = $212&255;
   $214 = ((($is)) + 16|0);
   HEAP8[$214>>0] = $213;
   $215 = $curr;
   $216 = ((($215)) + 28|0);
   $217 = ((($216)) + 3|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = ($218&255) >>> 2;
   $220 = $219 & 1;
   $221 = $220&255;
   $222 = ($221|0)==(1);
   $223 = $curr;
   if ($222) {
    $224 = ((($223)) + 36|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ((($is)) + 8|0);
    HEAP16[$226>>1]=$225&65535;HEAP16[$226+2>>1]=$225>>>16;
   } else {
    $227 = ((($223)) + 8|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($is)) + 8|0);
    HEAP16[$229>>1]=$228&65535;HEAP16[$229+2>>1]=$228>>>16;
   }
   $230 = ((($is)) + 12|0);
   HEAP16[$230>>1] = 0;
   $231 = $curr;
   $232 = ((($231)) + 28|0);
   $233 = ((($232)) + 3|0);
   $234 = HEAP8[$233>>0]|0;
   $235 = ($234&255) >>> 2;
   $236 = $235 & 1;
   $237 = $236&255;
   $238 = ($237|0)==(0);
   if ($238) {
    $239 = $curr;
    $240 = ((($239)) + 40|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = ($241|0)!=(0|0);
    $244 = $242;
   } else {
    $244 = 0;
   }
   $243 = $244 ? 1 : 0;
   $245 = $243&255;
   $246 = ((($is)) + 17|0);
   HEAP8[$246>>0] = $245;
   $247 = $len;
   $248 = ($247>>>0)<=(8);
   if ($248) {
    (_strncpy($is,$buffer,8)|0);
   } else {
    HEAP16[$is>>1]=0&65535;HEAP16[$is+2>>1]=0>>>16;
    $249 = $1;
    $250 = $len;
    $251 = (_Coff_AllocString($249,$buffer,$250)|0);
    $252 = ((($is)) + 4|0);
    HEAP16[$252>>1]=$251&65535;HEAP16[$252+2>>1]=$251>>>16;
   }
   $253 = HEAP32[(376)>>2]|0;
   $254 = (_fwrite($is,1,18,$253)|0);
   $255 = ($254|0)!=(18);
   if ($255) {
    _WriteError();
   }
   $256 = $cntSymbols;
   $257 = (($256) + 1)|0;
   $cntSymbols = $257;
   $258 = $curr;
   $259 = ((($258)) + 28|0);
   $260 = ((($259)) + 3|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = ($261&255) >>> 2;
   $263 = $262 & 1;
   $264 = $263&255;
   $265 = ($264|0)==(0);
   if ($265) {
    $266 = $curr;
    $267 = ((($266)) + 40|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ($268|0)!=(0|0);
    if ($269) {
     dest=$ias; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
     $270 = $curr;
     $271 = ((($270)) + 40|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ((($272)) + 56|0);
     $274 = HEAP32[$273>>2]|0;
     HEAP16[$ias>>1]=$274&65535;HEAP16[$ias+2>>1]=$274>>>16;
     $275 = ((($ias)) + 4|0);
     HEAP16[$275>>1]=2&65535;HEAP16[$275+2>>1]=2>>>16;
     $276 = HEAP32[(376)>>2]|0;
     $277 = (_fwrite($ias,1,18,$276)|0);
     $278 = ($277|0)!=(18);
     if ($278) {
      _WriteError();
     }
     $279 = $cntSymbols;
     $280 = (($279) + 1)|0;
     $cntSymbols = $280;
    }
   }
  }
  $281 = $curr;
  $282 = ((($281)) + 64|0);
  $283 = HEAP32[$282>>2]|0;
  $curr = $283;
 }
 $284 = HEAP32[(332)>>2]|0;
 $q = $284;
 while(1) {
  $285 = $q;
  $286 = ($285|0)!=(0|0);
  if (!($286)) {
   break;
  }
  $287 = $q;
  $288 = ((($287)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $sym = $289;
  $290 = $sym;
  $291 = (_Mangle($290,$buffer)|0);
  $len = $291;
  $292 = HEAP8[(6005)>>0]|0;
  $293 = $292&255;
  $294 = ($293|0)!=(0);
  if ($294) {
   $295 = $sym;
   $296 = ((($295)) + 24|0);
   $297 = HEAP16[$296>>1]|0;
   $298 = ($297&65535) >>> 11;
   $299 = $298 & 1;
   $300 = $299&255;
   $301 = $300&255;
   $302 = ($301|0)!=(0);
   if ($302) {
    $303 = $sym;
    $304 = ((($303)) + 40|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = ((($305)) + 14|0);
    $307 = HEAP16[$306>>1]|0;
    $308 = $307&65535;
    $309 = $lastfile;
    $310 = ($308|0)!=($309|0);
    if ($310) {
     $311 = $sym;
     $312 = ((($311)) + 40|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ((($313)) + 14|0);
     $315 = HEAP16[$314>>1]|0;
     $316 = $315&65535;
     $lastfile = $316;
     (_strncpy($is,83284,8)|0);
     $317 = ((($is)) + 12|0);
     HEAP16[$317>>1] = -2;
     $318 = ((($is)) + 14|0);
     HEAP16[$318>>1] = 0;
     $319 = ((($is)) + 16|0);
     HEAP8[$319>>0] = 103;
     $320 = $sym;
     $321 = ((($320)) + 40|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ((($322)) + 14|0);
     $324 = HEAP16[$323>>1]|0;
     $325 = (_GetFileAuxEntries($324,$p)|0);
     $326 = $325&255;
     $327 = ((($is)) + 17|0);
     HEAP8[$327>>0] = $326;
     $328 = $sym;
     $329 = ((($328)) + 40|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = ((($330)) + 20|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = ((($is)) + 8|0);
     HEAP16[$333>>1]=$332&65535;HEAP16[$333+2>>1]=$332>>>16;
     $334 = HEAP32[(376)>>2]|0;
     $335 = (_fwrite($is,1,18,$334)|0);
     $336 = ($335|0)!=(18);
     if ($336) {
      _WriteError();
     }
     $337 = ((($is)) + 17|0);
     $338 = HEAP8[$337>>0]|0;
     $339 = $338&255;
     $i = $339;
     while(1) {
      $340 = $i;
      $341 = ($340|0)!=(0);
      if (!($341)) {
       break;
      }
      $342 = HEAP32[$p>>2]|0;
      (_strncpy($ias,$342,18)|0);
      $343 = HEAP32[(376)>>2]|0;
      $344 = (_fwrite($ias,1,18,$343)|0);
      $345 = ($344|0)!=(18);
      if ($345) {
       _WriteError();
      }
      $346 = $i;
      $347 = (($346) + -1)|0;
      $i = $347;
      $348 = HEAP32[$p>>2]|0;
      $349 = ((($348)) + 18|0);
      HEAP32[$p>>2] = $349;
     }
     $350 = ((($is)) + 17|0);
     $351 = HEAP8[$350>>0]|0;
     $352 = $351&255;
     $353 = (($352) + 1)|0;
     $354 = $cntSymbols;
     $355 = (($354) + ($353))|0;
     $cntSymbols = $355;
    }
   }
  }
  $356 = $sym;
  $357 = (_CoffGetType($356)|0);
  $358 = ((($is)) + 14|0);
  HEAP16[$358>>1] = $357;
  $359 = $sym;
  $360 = (_CoffGetClass($359)|0);
  $361 = $360&255;
  $362 = ((($is)) + 16|0);
  HEAP8[$362>>0] = $361;
  $363 = $sym;
  $364 = ((($363)) + 8|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = ((($is)) + 8|0);
  HEAP16[$366>>1]=$365&65535;HEAP16[$366+2>>1]=$365>>>16;
  $367 = $sym;
  $368 = ((($367)) + 16|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = ($369|0)==(1);
  do {
   if ($370) {
    $371 = $sym;
    $372 = ((($371)) + 12|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ($373|0)!=(0|0);
    if ($374) {
     $375 = $sym;
     $376 = ((($375)) + 12|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = (_GetSegIdx($377)|0);
     $379 = $378&65535;
     $380 = ((($is)) + 12|0);
     HEAP16[$380>>1] = $379;
     break;
    } else {
     $381 = ((($is)) + 12|0);
     HEAP16[$381>>1] = -1;
     break;
    }
   } else {
    $382 = ((($is)) + 12|0);
    HEAP16[$382>>1] = 0;
   }
  } while(0);
  $383 = ((($is)) + 17|0);
  HEAP8[$383>>0] = 0;
  $384 = HEAP8[(6005)>>0]|0;
  $385 = $384&255;
  $386 = ($385|0)!=(0);
  if ($386) {
   $387 = $sym;
   $388 = ((($387)) + 24|0);
   $389 = HEAP16[$388>>1]|0;
   $390 = ($389&65535) >>> 11;
   $391 = $390 & 1;
   $392 = $391&255;
   $393 = $392&255;
   $394 = ($393|0)!=(0);
   if ($394) {
    $395 = ((($is)) + 17|0);
    $396 = HEAP8[$395>>0]|0;
    $397 = (($396) + 1)<<24>>24;
    HEAP8[$395>>0] = $397;
   }
  }
  $398 = $len;
  $399 = ($398>>>0)<=(8);
  if ($399) {
   (_strncpy($is,$buffer,8)|0);
  } else {
   HEAP16[$is>>1]=0&65535;HEAP16[$is+2>>1]=0>>>16;
   $400 = $1;
   $401 = $len;
   $402 = (_Coff_AllocString($400,$buffer,$401)|0);
   $403 = ((($is)) + 4|0);
   HEAP16[$403>>1]=$402&65535;HEAP16[$403+2>>1]=$402>>>16;
  }
  $404 = HEAP32[(376)>>2]|0;
  $405 = (_fwrite($is,1,18,$404)|0);
  $406 = ($405|0)!=(18);
  if ($406) {
   _WriteError();
  }
  $407 = $cntSymbols;
  $408 = (($407) + 1)|0;
  $cntSymbols = $408;
  $409 = HEAP8[(6005)>>0]|0;
  $410 = $409&255;
  $411 = ($410|0)!=(0);
  if ($411) {
   $412 = $sym;
   $413 = ((($412)) + 24|0);
   $414 = HEAP16[$413>>1]|0;
   $415 = ($414&65535) >>> 11;
   $416 = $415 & 1;
   $417 = $416&255;
   $418 = $417&255;
   $419 = ($418|0)!=(0);
   if ($419) {
    $420 = $cntSymbols;
    $421 = (($420) + 1)|0;
    HEAP16[$ias>>1]=$421&65535;HEAP16[$ias+2>>1]=$421>>>16;
    $422 = $sym;
    $423 = ((($422)) + 36|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = ((($ias)) + 4|0);
    HEAP16[$425>>1]=$424&65535;HEAP16[$425+2>>1]=$424>>>16;
    $426 = $sym;
    $427 = ((($426)) + 40|0);
    $428 = HEAP32[$427>>2]|0;
    $429 = ((($428)) + 8|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = ((($ias)) + 8|0);
    HEAP16[$431>>1]=$430&65535;HEAP16[$431+2>>1]=$430>>>16;
    $432 = $sym;
    $433 = ((($432)) + 40|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ((($434)) + 16|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = ((($ias)) + 8|0);
    $438 = ((($437)) + 4|0);
    HEAP16[$438>>1]=$436&65535;HEAP16[$438+2>>1]=$436>>>16;
    $439 = HEAP32[(376)>>2]|0;
    $440 = (_fwrite($ias,1,18,$439)|0);
    $441 = ($440|0)!=(18);
    if ($441) {
     _WriteError();
    }
    (_strncpy($is,83290,8)|0);
    $442 = ((($is)) + 14|0);
    HEAP16[$442>>1] = 0;
    $443 = ((($is)) + 17|0);
    HEAP8[$443>>0] = 1;
    $444 = ((($is)) + 16|0);
    HEAP8[$444>>0] = 101;
    $445 = HEAP32[(376)>>2]|0;
    $446 = (_fwrite($is,1,18,$445)|0);
    $447 = ($446|0)!=(18);
    if ($447) {
     _WriteError();
    }
    HEAP16[$ias>>1]=0&65535;HEAP16[$ias+2>>1]=0>>>16;
    $448 = $sym;
    $449 = ((($448)) + 40|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = HEAP32[$450>>2]|0;
    $452 = $451&65535;
    $453 = ((($ias)) + 4|0);
    HEAP16[$453>>1] = $452;
    $454 = $sym;
    $455 = ((($454)) + 40|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = ((($456)) + 16|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = ($458|0)!=(0);
    if ($459) {
     $460 = $sym;
     $461 = ((($460)) + 40|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = ((($462)) + 16|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = (($464) + 2)|0;
     $466 = ((($ias)) + 8|0);
     $467 = ((($466)) + 4|0);
     HEAP16[$467>>1]=$465&65535;HEAP16[$467+2>>1]=$465>>>16;
    } else {
     $468 = ((($ias)) + 8|0);
     $469 = ((($468)) + 4|0);
     HEAP16[$469>>1]=0&65535;HEAP16[$469+2>>1]=0>>>16;
    }
    $470 = HEAP32[(376)>>2]|0;
    $471 = (_fwrite($ias,1,18,$470)|0);
    $472 = ($471|0)!=(18);
    if ($472) {
     _WriteError();
    }
    (_strncpy($is,83294,8)|0);
    $473 = ((($is)) + 14|0);
    HEAP16[$473>>1] = 0;
    $474 = ((($is)) + 17|0);
    HEAP8[$474>>0] = 0;
    $475 = ((($is)) + 16|0);
    HEAP8[$475>>0] = 101;
    $476 = $sym;
    $477 = ((($476)) + 40|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ((($478)) + 12|0);
    $480 = HEAP16[$479>>1]|0;
    $481 = $480&65535;
    $482 = ((($is)) + 8|0);
    HEAP16[$482>>1]=$481&65535;HEAP16[$482+2>>1]=$481>>>16;
    $483 = HEAP32[(376)>>2]|0;
    $484 = (_fwrite($is,1,18,$483)|0);
    $485 = ($484|0)!=(18);
    if ($485) {
     _WriteError();
    }
    (_strncpy($is,83298,8)|0);
    $486 = ((($is)) + 14|0);
    HEAP16[$486>>1] = 0;
    $487 = ((($is)) + 17|0);
    HEAP8[$487>>0] = 1;
    $488 = ((($is)) + 16|0);
    HEAP8[$488>>0] = 101;
    $489 = $sym;
    $490 = ((($489)) + 8|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = $sym;
    $493 = ((($492)) + 36|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = (($491) + ($494))|0;
    $496 = ((($is)) + 8|0);
    HEAP16[$496>>1]=$495&65535;HEAP16[$496+2>>1]=$495>>>16;
    $497 = HEAP32[(376)>>2]|0;
    $498 = (_fwrite($is,1,18,$497)|0);
    $499 = ($498|0)!=(18);
    if ($499) {
     _WriteError();
    }
    HEAP16[$ias>>1]=0&65535;HEAP16[$ias+2>>1]=0>>>16;
    $500 = $sym;
    $501 = ((($500)) + 40|0);
    $502 = HEAP32[$501>>2]|0;
    $503 = ((($502)) + 4|0);
    $504 = HEAP32[$503>>2]|0;
    $505 = $504&65535;
    $506 = ((($ias)) + 4|0);
    HEAP16[$506>>1] = $505;
    $507 = HEAP32[(376)>>2]|0;
    $508 = (_fwrite($ias,1,18,$507)|0);
    $509 = ($508|0)!=(18);
    if ($509) {
     _WriteError();
    }
    $510 = $cntSymbols;
    $511 = (($510) + 6)|0;
    $cntSymbols = $511;
   }
  }
  $512 = $q;
  $513 = HEAP32[$512>>2]|0;
  $q = $513;
 }
 $514 = HEAP32[(15444)>>2]|0;
 $curr = $514;
 while(1) {
  $515 = $curr;
  $516 = ($515|0)!=(0|0);
  if (!($516)) {
   break;
  }
  $517 = $curr;
  $518 = (_Mangle($517,$buffer)|0);
  $len = $518;
  $519 = $len;
  $520 = ($519>>>0)<=(8);
  if ($520) {
   (_strncpy($is,$buffer,8)|0);
  } else {
   HEAP16[$is>>1]=0&65535;HEAP16[$is+2>>1]=0>>>16;
   $521 = $1;
   $522 = $len;
   $523 = (_Coff_AllocString($521,$buffer,$522)|0);
   $524 = ((($is)) + 4|0);
   HEAP16[$524>>1]=$523&65535;HEAP16[$524+2>>1]=$523>>>16;
  }
  $525 = ((($is)) + 8|0);
  HEAP16[$525>>1]=0&65535;HEAP16[$525+2>>1]=0>>>16;
  $526 = ((($is)) + 12|0);
  HEAP16[$526>>1] = 0;
  $527 = ((($is)) + 14|0);
  HEAP16[$527>>1] = 0;
  $528 = ((($is)) + 16|0);
  HEAP8[$528>>0] = 105;
  $529 = ((($is)) + 17|0);
  HEAP8[$529>>0] = 1;
  $530 = HEAP32[(376)>>2]|0;
  $531 = (_fwrite($is,1,18,$530)|0);
  $532 = ($531|0)!=(18);
  if ($532) {
   _WriteError();
  }
  $533 = $cntSymbols;
  $534 = (($533) + 1)|0;
  $cntSymbols = $534;
  dest=$ias; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $535 = $curr;
  $536 = ((($535)) + 8|0);
  $537 = HEAP32[$536>>2]|0;
  $sym1 = $537;
  $538 = $sym1;
  $539 = ($538|0)!=(0|0);
  if ($539) {
   $540 = $sym1;
   $541 = ((($540)) + 56|0);
   $542 = HEAP32[$541>>2]|0;
   HEAP16[$ias>>1]=$542&65535;HEAP16[$ias+2>>1]=$542>>>16;
  }
  $543 = ((($ias)) + 4|0);
  HEAP16[$543>>1]=3&65535;HEAP16[$543+2>>1]=3>>>16;
  $544 = HEAP32[(376)>>2]|0;
  $545 = (_fwrite($ias,1,18,$544)|0);
  $546 = ($545|0)!=(18);
  if ($546) {
   _WriteError();
  }
  $547 = $cntSymbols;
  $548 = (($547) + 1)|0;
  $cntSymbols = $548;
  $549 = $curr;
  $550 = ((($549)) + 64|0);
  $551 = HEAP32[$550>>2]|0;
  $curr = $551;
 }
 $552 = $cntSymbols;
 STACKTOP = sp;return ($552|0);
}
function _Coff_AllocString($cm,$string,$len) {
 $cm = $cm|0;
 $string = $string|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $oldsize = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cm;
 $1 = $string;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 56|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $oldsize = $6;
 $7 = $2;
 $8 = (($7) + 1)|0;
 $9 = $0;
 $10 = ((($9)) + 56|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($8))|0;
 HEAP32[$11>>2] = $13;
 $14 = $2;
 $15 = (($14) + 8)|0;
 $16 = (_LclAlloc($15)|0);
 $name = $16;
 $17 = $name;
 HEAP32[$17>>2] = 0;
 $18 = $name;
 $19 = ((($18)) + 4|0);
 $20 = $1;
 (_strcpy($19,$20)|0);
 $21 = $0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = $name;
 $26 = $0;
 $27 = ((($26)) + 56|0);
 $28 = ((($27)) + 4|0);
 if ($24) {
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$29>>2] = $25;
  $30 = $name;
  $31 = $0;
  $32 = ((($31)) + 56|0);
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = $30;
  $36 = $oldsize;
  STACKTOP = sp;return ($36|0);
 } else {
  HEAP32[$28>>2] = $25;
  $34 = $0;
  $35 = ((($34)) + 56|0);
  HEAP32[$35>>2] = $25;
  $36 = $oldsize;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _CRC32Comdat($lpBuffer,$dwBufLen,$dwCRC) {
 $lpBuffer = $lpBuffer|0;
 $dwBufLen = $dwBufLen|0;
 $dwCRC = $dwCRC|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byt = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lpBuffer;
 $1 = $dwBufLen;
 $2 = $dwCRC;
 $3 = HEAP8[83309>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 if (!($4)) {
  HEAP8[83309>>0] = 1;
  _InitCRC32();
 }
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 $8 = ($7|0)!=(0);
 $or$cond = $6 & $8;
 if (!($or$cond)) {
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 while(1) {
  $9 = $0;
  $10 = ((($9)) + 1|0);
  $0 = $10;
  $11 = HEAP8[$9>>0]|0;
  $byt = $11;
  $12 = $byt;
  $13 = $12&255;
  $14 = $2;
  $15 = $14&255;
  $16 = $15&255;
  $17 = $13 ^ $16;
  $18 = $17&255;
  $byt = $18;
  $19 = $2;
  $20 = $19 >>> 8;
  $2 = $20;
  $21 = $2;
  $22 = $byt;
  $23 = $22&255;
  $24 = (7292 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $21 ^ $25;
  $2 = $26;
  $27 = $1;
  $28 = (($27) + -1)|0;
  $1 = $28;
  $$old = $1;
  $$old1 = ($$old|0)!=(0);
  if (!($$old1)) {
   break;
  }
 }
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function _CoffGetType($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4&65535) >>> 11;
 $6 = $5 & 1;
 $7 = $6&255;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $0 = 32;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _CoffGetClass($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(2);
 $6 = $1;
 do {
  if ($5) {
   $7 = ((($6)) + 28|0);
   $8 = ((($7)) + 3|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9&255) >>> 2;
   $11 = $10 & 1;
   $12 = $11&255;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $1;
    $15 = ((($14)) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $0 = 105;
     break;
    }
   }
   $0 = 2;
  } else {
   $18 = ((($6)) + 24|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = ($19&65535) >>> 7;
   $21 = $20 & 1;
   $22 = $21&255;
   $23 = $22&255;
   $24 = ($23|0)==(1);
   if ($24) {
    $0 = 2;
    break;
   }
   $25 = $1;
   $26 = ((($25)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(129);
   if ($28) {
    $29 = $1;
    $30 = ((($29)) + 24|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = ($31&65535) >>> 11;
    $33 = $32 & 1;
    $34 = $33&255;
    $35 = $34&255;
    $36 = ($35|0)==(0);
    if ($36) {
     $0 = 6;
     break;
    }
   }
   $0 = 3;
  }
 } while(0);
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _GetFileAuxEntries($file,$fname) {
 $file = $file|0;
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $curr = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $fname;
 $2 = $0;
 $3 = $2&65535;
 $4 = (_GetFName($3)|0);
 $curr = $4;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $curr;
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  HEAP32[$9>>2] = $8;
 }
 $10 = $curr;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_strlen($11)|0);
 $len = $12;
 $13 = $len;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  (_InternalError(83302,363)|0);
 }
 $15 = $len;
 $16 = (($15>>>0) / 18)&-1;
 $17 = $len;
 $18 = (($17>>>0) % 18)&-1;
 $19 = ($18|0)!=(0);
 $20 = $19 ? 1 : 0;
 $21 = (($16) + ($20))|0;
 STACKTOP = sp;return ($21|0);
}
function _InitCRC32() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, $i = 0, $j = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(256);
  if (!($1)) {
   break;
  }
  $j = 0;
  $2 = $i;
  $crc = $2;
  while(1) {
   $3 = $j;
   $4 = ($3|0)<(8);
   $5 = $crc;
   if (!($4)) {
    break;
   }
   $6 = $5 >>> 1;
   $7 = $crc;
   $8 = $7 & 1;
   $9 = Math_imul(-306674912, $8)|0;
   $10 = $6 ^ $9;
   $crc = $10;
   $11 = $j;
   $12 = (($11) + 1)|0;
   $j = $12;
  }
  $13 = $i;
  $14 = (7292 + ($13<<2)|0);
  HEAP32[$14>>2] = $5;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _SetSymbolIndices($ModuleInfo,$cm) {
 $ModuleInfo = $ModuleInfo|0;
 $cm = $cm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $i = 0, $index = 0, $lastfile = 0, $lastfproc = 0, $q = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ModuleInfo;
 $1 = $cm;
 $lastfile = 0;
 $index = 0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP8[(6095)>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if ($7) {
  $8 = $index;
  $9 = (($8) + 1)|0;
  $index = $9;
 }
 $10 = HEAP8[(6070)>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_strlen($15)|0);
  $i = $16;
  $17 = $i;
  $18 = (($17>>>0) / 18)&-1;
  $19 = (($18) + 1)|0;
  $20 = $index;
  $21 = (($20) + ($19))|0;
  $index = $21;
  $22 = $i;
  $23 = (($22>>>0) % 18)&-1;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $index;
   $26 = (($25) + 1)|0;
   $index = $26;
  }
 }
 $27 = $index;
 $28 = $1;
 $29 = ((($28)) + 28|0);
 HEAP32[$29>>2] = $27;
 $30 = $0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $index;
 $34 = (($33) + ($32))|0;
 $index = $34;
 $35 = HEAP8[(6072)>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $0;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $index;
  $42 = (($41) + ($40))|0;
  $index = $42;
 }
 $43 = HEAP32[(15412)>>2]|0;
 $curr = $43;
 while(1) {
  $44 = $curr;
  $45 = ($44|0)!=(0|0);
  if (!($45)) {
   break;
  }
  $46 = $curr;
  $47 = ((($46)) + 28|0);
  $48 = ((($47)) + 3|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = ($49&255) >>> 2;
  $51 = $50 & 1;
  $52 = $51&255;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = $curr;
   $55 = ((($54)) + 28|0);
   $56 = ((($55)) + 3|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57&255) >>> 3;
   $59 = $58 & 1;
   $60 = $59&255;
   $61 = ($60|0)==(1);
   if (!($61)) {
    label = 12;
   }
  } else {
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $62 = $index;
   $63 = (($62) + 1)|0;
   $index = $63;
   $64 = $curr;
   $65 = ((($64)) + 56|0);
   HEAP32[$65>>2] = $62;
   $66 = $curr;
   $67 = ((($66)) + 28|0);
   $68 = ((($67)) + 3|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = ($69&255) >>> 2;
   $71 = $70 & 1;
   $72 = $71&255;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = $curr;
    $75 = ((($74)) + 40|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = $index;
     $79 = (($78) + 1)|0;
     $index = $79;
    }
   }
  }
  $80 = $curr;
  $81 = ((($80)) + 64|0);
  $82 = HEAP32[$81>>2]|0;
  $curr = $82;
 }
 $83 = HEAP8[(6071)>>0]|0;
 $84 = $83&255;
 $85 = ($84|0)==(0);
 L22: do {
  if ($85) {
   $86 = HEAP32[(15436)>>2]|0;
   $curr = $86;
   while(1) {
    $87 = $curr;
    $88 = ($87|0)!=(0|0);
    if (!($88)) {
     break L22;
    }
    $89 = $curr;
    $90 = ((($89)) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(1);
    if ($92) {
     $93 = $curr;
     $94 = ((($93)) + 24|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = ($95&65535) >>> 7;
     $97 = $96 & 1;
     $98 = $97&255;
     $99 = $98&255;
     $100 = ($99|0)==(0);
     if ($100) {
      $101 = $curr;
      $102 = ((($101)) + 24|0);
      $103 = HEAP16[$102>>1]|0;
      $104 = ($103&65535) >>> 14;
      $105 = $104 & 1;
      $106 = $105&255;
      $107 = $106&255;
      $108 = ($107|0)==(0);
      if ($108) {
       $109 = $curr;
       $110 = ((($109)) + 24|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = $111 & -16385;
       $113 = $112 | 16384;
       HEAP16[$110>>1] = $113;
       $114 = $curr;
       _AddPublicData($114);
      }
     }
    }
    $115 = $curr;
    $116 = ((($115)) + 68|0);
    $117 = HEAP32[$116>>2]|0;
    $curr = $117;
   }
  }
 } while(0);
 $118 = $0;
 $119 = ((($118)) + 12|0);
 $120 = HEAP32[$119>>2]|0;
 $q = $120;
 while(1) {
  $121 = $q;
  $122 = ($121|0)!=(0|0);
  if (!($122)) {
   break;
  }
  $123 = $q;
  $124 = ((($123)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $sym = $125;
  $126 = HEAP8[(6005)>>0]|0;
  $127 = $126&255;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $sym;
   $130 = ((($129)) + 24|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = ($131&65535) >>> 11;
   $133 = $132 & 1;
   $134 = $133&255;
   $135 = $134&255;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $sym;
    $138 = ((($137)) + 40|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($139)) + 14|0);
    $141 = HEAP16[$140>>1]|0;
    $142 = $141&65535;
    $143 = $lastfile;
    $144 = ($142|0)!=($143|0);
    if ($144) {
     $145 = $1;
     $146 = ((($145)) + 24|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($147|0)==(0);
     $149 = $index;
     if ($148) {
      $150 = $1;
      $151 = ((($150)) + 24|0);
      HEAP32[$151>>2] = $149;
     } else {
      $152 = $lastfproc;
      $153 = ((($152)) + 40|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 20|0);
      HEAP32[$155>>2] = $149;
     }
     $156 = $sym;
     $lastfproc = $156;
     $157 = $sym;
     $158 = ((($157)) + 40|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($159)) + 14|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = (_GetFileAuxEntries($161,0)|0);
     $163 = (1 + ($162))|0;
     $164 = $index;
     $165 = (($164) + ($163))|0;
     $index = $165;
     $166 = $sym;
     $167 = ((($166)) + 40|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ((($168)) + 14|0);
     $170 = HEAP16[$169>>1]|0;
     $171 = $170&65535;
     $lastfile = $171;
    }
    $172 = $index;
    $173 = (($172) + 1)|0;
    $index = $173;
    $174 = $sym;
    $175 = ((($174)) + 56|0);
    HEAP32[$175>>2] = $172;
    $176 = $index;
    $177 = (($176) + 6)|0;
    $index = $177;
   } else {
    label = 34;
   }
  } else {
   label = 34;
  }
  if ((label|0) == 34) {
   label = 0;
   $178 = $index;
   $179 = (($178) + 1)|0;
   $index = $179;
   $180 = $sym;
   $181 = ((($180)) + 56|0);
   HEAP32[$181>>2] = $178;
  }
  $182 = $q;
  $183 = HEAP32[$182>>2]|0;
  $q = $183;
 }
 $184 = $index;
 STACKTOP = sp;return ($184|0);
}
function _coff_write_fixups($section,$poffset,$pindex) {
 $section = $section|0;
 $poffset = $poffset|0;
 $pindex = $pindex|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fix = 0, $index = 0, $ir = 0, $offset = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ir = sp + 52|0;
 $0 = $section;
 $1 = $poffset;
 $2 = $pindex;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $offset = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $index = $6;
 $7 = $0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)>(65535);
 if ($12) {
  $13 = $0;
  $14 = ((($13)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP16[$ir>>1]=$18&65535;HEAP16[$ir+2>>1]=$18>>>16;
  $19 = ((($ir)) + 4|0);
  HEAP16[$19>>1]=0&65535;HEAP16[$19+2>>1]=0>>>16;
  $20 = ((($ir)) + 8|0);
  HEAP16[$20>>1] = 0;
  $21 = HEAP32[(376)>>2]|0;
  $22 = (_fwrite($ir,1,10,$21)|0);
  $23 = ($22|0)!=(10);
  if ($23) {
   _WriteError();
  }
  $24 = $offset;
  $25 = (($24) + 10)|0;
  $offset = $25;
 }
 $26 = $0;
 $27 = ((($26)) + 60|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 36|0);
 HEAP32[$29>>2] = 0;
 $30 = $0;
 $31 = ((($30)) + 60|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $fix = $34;
 while(1) {
  $35 = $fix;
  $36 = ($35|0)!=(0|0);
  if (!($36)) {
   break;
  }
  $37 = $0;
  $38 = ((($37)) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 64|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(2);
  $44 = $fix;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  L10: do {
   if ($43) {
    switch ($46|0) {
    case 0:  {
     break L10;
     break;
    }
    case 3:  {
     $47 = $fix;
     $48 = ((($47)) + 24|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = (($50) - 4)|0;
     $52 = (4 + ($51))|0;
     $53 = $52&65535;
     $54 = ((($ir)) + 8|0);
     HEAP16[$54>>1] = $53;
     label = 25;
     break L10;
     break;
    }
    case 6:  {
     $55 = ((($ir)) + 8|0);
     HEAP16[$55>>1] = 2;
     label = 25;
     break L10;
     break;
    }
    case 12:  {
     $56 = ((($ir)) + 8|0);
     HEAP16[$56>>1] = 3;
     label = 25;
     break L10;
     break;
    }
    case 13:  {
     $57 = ((($ir)) + 8|0);
     HEAP16[$57>>1] = 11;
     label = 25;
     break L10;
     break;
    }
    case 7:  {
     $58 = ((($ir)) + 8|0);
     HEAP16[$58>>1] = 1;
     label = 25;
     break L10;
     break;
    }
    case 8:  {
     $59 = ((($ir)) + 8|0);
     HEAP16[$59>>1] = 10;
     label = 25;
     break L10;
     break;
    }
    default: {
     $60 = $fix;
     $61 = ((($60)) + 16|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $0;
     $64 = ((($63)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $fix;
     $67 = ((($66)) + 12|0);
     $68 = HEAP32[$67>>2]|0;
     HEAP32[$vararg_buffer>>2] = $62;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $65;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $68;
     (_EmitErr(196,$vararg_buffer)|0);
     break L10;
    }
    }
   } else {
    switch ($46|0) {
    case 0:  {
     break L10;
     break;
    }
    case 2:  {
     $69 = ((($ir)) + 8|0);
     HEAP16[$69>>1] = 2;
     label = 25;
     break L10;
     break;
    }
    case 5:  {
     $70 = ((($ir)) + 8|0);
     HEAP16[$70>>1] = 1;
     label = 25;
     break L10;
     break;
    }
    case 3:  {
     $71 = ((($ir)) + 8|0);
     HEAP16[$71>>1] = 20;
     label = 25;
     break L10;
     break;
    }
    case 6:  {
     $72 = ((($ir)) + 8|0);
     HEAP16[$72>>1] = 6;
     label = 25;
     break L10;
     break;
    }
    case 12:  {
     $73 = ((($ir)) + 8|0);
     HEAP16[$73>>1] = 7;
     label = 25;
     break L10;
     break;
    }
    case 13:  {
     $74 = ((($ir)) + 8|0);
     HEAP16[$74>>1] = 11;
     label = 25;
     break L10;
     break;
    }
    case 8:  {
     $75 = ((($ir)) + 8|0);
     HEAP16[$75>>1] = 10;
     label = 25;
     break L10;
     break;
    }
    default: {
     $76 = $fix;
     $77 = ((($76)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $0;
     $80 = ((($79)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $fix;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $78;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $81;
     $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
     HEAP32[$vararg_ptr7>>2] = $84;
     (_EmitErr(196,$vararg_buffer3)|0);
     break L10;
    }
    }
   }
  } while(0);
  if ((label|0) == 25) {
   label = 0;
   $85 = $fix;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 24|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = ($89&65535) >>> 6;
   $91 = $90 & 1;
   $92 = $91&255;
   $93 = $92&255;
   $94 = ($93|0)==(1);
   $95 = $fix;
   if ($94) {
    $96 = ((($95)) + 28|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $fix;
    $99 = ((($98)) + 36|0);
    HEAP32[$99>>2] = $97;
   } else {
    $100 = ((($95)) + 36|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($101)) + 16|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)==(1);
    if ($104) {
     $105 = $fix;
     $106 = ((($105)) + 36|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ((($107)) + 24|0);
     $109 = HEAP16[$108>>1]|0;
     $110 = ($109&65535) >>> 14;
     $111 = $110 & 1;
     $112 = $111&255;
     $113 = $112&255;
     $114 = ($113|0)==(0);
     if ($114) {
      $115 = $fix;
      $116 = ((($115)) + 36|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ((($117)) + 24|0);
      $119 = HEAP16[$118>>1]|0;
      $120 = ($119&65535) >>> 7;
      $121 = $120 & 1;
      $122 = $121&255;
      $123 = $122&255;
      $124 = ($123|0)==(0);
      if ($124) {
       $125 = $fix;
       $126 = ((($125)) + 36|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ((($127)) + 24|0);
       $129 = HEAP16[$128>>1]|0;
       $130 = $129 & -16385;
       $131 = $130 | 16384;
       HEAP16[$128>>1] = $131;
       $132 = $fix;
       $133 = ((($132)) + 36|0);
       $134 = HEAP32[$133>>2]|0;
       _AddPublicData($134);
       $135 = $index;
       $136 = (($135) + 1)|0;
       $index = $136;
       $137 = $fix;
       $138 = ((($137)) + 36|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ((($139)) + 56|0);
       HEAP32[$140>>2] = $135;
       $141 = HEAP8[(6005)>>0]|0;
       $142 = $141&255;
       $143 = ($142|0)!=(0);
       if ($143) {
        $144 = $fix;
        $145 = ((($144)) + 36|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = ((($146)) + 24|0);
        $148 = HEAP16[$147>>1]|0;
        $149 = ($148&65535) >>> 11;
        $150 = $149 & 1;
        $151 = $150&255;
        $152 = $151&255;
        $153 = ($152|0)!=(0);
        if ($153) {
         $154 = $index;
         $155 = (($154) + 6)|0;
         $index = $155;
        }
       }
      }
     }
    }
   }
   $156 = $fix;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   HEAP16[$ir>>1]=$158&65535;HEAP16[$ir+2>>1]=$158>>>16;
   $159 = $fix;
   $160 = ((($159)) + 36|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((($161)) + 56|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ((($ir)) + 4|0);
   HEAP16[$164>>1]=$163&65535;HEAP16[$164+2>>1]=$163>>>16;
   $165 = HEAP32[(376)>>2]|0;
   $166 = (_fwrite($ir,1,10,$165)|0);
   $167 = ($166|0)!=(10);
   if ($167) {
    _WriteError();
   }
   $168 = $offset;
   $169 = (($168) + 10)|0;
   $offset = $169;
   $170 = $0;
   $171 = ((($170)) + 60|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ((($172)) + 36|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + 1)|0;
   HEAP32[$173>>2] = $175;
  }
  $176 = $fix;
  $177 = ((($176)) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  $fix = $178;
 }
 $179 = $offset;
 $180 = $1;
 HEAP32[$180>>2] = $179;
 $181 = $index;
 $182 = $2;
 HEAP32[$182>>2] = $181;
 STACKTOP = sp;return;
}
function _GetLinnumItems($q) {
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $curr = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $i = 0;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  $5 = $i;
  if (!($4)) {
   break;
  }
  $6 = (($5) + 1)|0;
  $i = $6;
  $7 = $curr;
  $8 = HEAP32[$7>>2]|0;
  $curr = $8;
 }
 STACKTOP = sp;return ($5|0);
}
function _GetStartLabel($buffer,$msg) {
 $buffer = $buffer|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size = 0, $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $temp = sp + 16|0;
 $0 = $buffer;
 $1 = $msg;
 $size = 0;
 $2 = HEAP32[(428)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $42 = $size;
  STACKTOP = sp;return ($42|0);
 }
 $4 = HEAP32[(428)>>2]|0;
 (_Mangle($4,$temp)|0);
 $5 = HEAP8[(6076)>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 do {
  if ($6) {
   $7 = $0;
   (_strcpy($7,$temp)|0);
  } else {
   $8 = HEAP32[(428)>>2]|0;
   $9 = ((($8)) + 48|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(1);
   if ($11) {
    $12 = HEAP32[(428)>>2]|0;
    $13 = ((($12)) + 48|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)!=(3);
    if ($15) {
     $16 = HEAP32[(428)>>2]|0;
     $17 = ((($16)) + 48|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)!=(2);
     if ($19) {
      $20 = HEAP32[(428)>>2]|0;
      $21 = ((($20)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 << 24 >> 24;
      $25 = ($24|0)!=(95);
      if (!($25)) {
       $35 = $0;
       $36 = ((($temp)) + 1|0);
       (_strcpy($35,$36)|0);
       break;
      }
      $26 = $1;
      $27 = $26&255;
      $28 = ($27|0)!=(0);
      $29 = HEAP32[(528)>>2]|0;
      $30 = ($29|0)!=(2);
      $or$cond = $28 & $30;
      if ($or$cond) {
       $31 = HEAP32[(428)>>2]|0;
       $32 = ((($31)) + 4|0);
       $33 = HEAP32[$32>>2]|0;
       HEAP32[$vararg_buffer>>2] = $33;
       _EmitWarn(2,194,$vararg_buffer);
      }
      $34 = $0;
      (_strcpy($34,$temp)|0);
      break;
     }
    }
   }
   $37 = $0;
   $38 = ((($temp)) + 1|0);
   (_strcpy($37,$38)|0);
  }
 } while(0);
 $39 = $0;
 $40 = (_strlen($39)|0);
 $41 = (($40) + 8)|0;
 $size = $41;
 $42 = $size;
 STACKTOP = sp;return ($42|0);
}
function _conditional_assembly_prepare($directive) {
 $directive = $directive|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $directive;
 $1 = $0;
 switch ($1|0) {
 case 294: case 292: case 290: case 289: case 284: case 288: case 287: case 293: case 291: case 286: case 285: case 283:  {
  $2 = HEAP32[8316>>2]|0;
  $3 = ($2|0)!=(0);
  if ($3) {
   $4 = HEAP32[8320>>2]|0;
   $5 = (($4) + 1)|0;
   HEAP32[8320>>2] = $5;
   STACKTOP = sp;return;
  }
  $6 = HEAP32[8324>>2]|0;
  $7 = ($6|0)==(20);
  if ($7) {
   (_EmitError(100)|0);
   STACKTOP = sp;return;
  } else {
   $8 = HEAP32[8324>>2]|0;
   $9 = 1 << $8;
   $10 = $9 ^ -1;
   $11 = HEAP32[8328>>2]|0;
   $12 = $11 & $10;
   HEAP32[8328>>2] = $12;
   $13 = HEAP32[8324>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[8324>>2] = $14;
   STACKTOP = sp;return;
  }
  break;
 }
 case 307: case 305: case 303: case 302: case 297: case 301: case 300: case 306: case 304: case 299: case 298: case 296: case 295:  {
  $15 = HEAP32[8324>>2]|0;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   $35 = $0;
   $36 = (_GetResWName($35,0)|0);
   HEAP32[$vararg_buffer>>2] = $36;
   (_EmitErr(80,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
  $17 = HEAP32[8320>>2]|0;
  $18 = ($17|0)>(0);
  if ($18) {
   STACKTOP = sp;return;
  }
  $19 = HEAP32[8328>>2]|0;
  $20 = HEAP32[8324>>2]|0;
  $21 = (($20) - 1)|0;
  $22 = 1 << $21;
  $23 = $19 & $22;
  $24 = ($23|0)!=(0);
  if ($24) {
   (_EmitError(273)|0);
   STACKTOP = sp;return;
  }
  $25 = HEAP32[8316>>2]|0;
  $26 = ($25|0)==(1);
  $27 = $26 ? 0 : 2;
  HEAP32[8316>>2] = $27;
  $28 = $0;
  $29 = ($28|0)==(295);
  if (!($29)) {
   STACKTOP = sp;return;
  }
  $30 = HEAP32[8324>>2]|0;
  $31 = (($30) - 1)|0;
  $32 = 1 << $31;
  $33 = HEAP32[8328>>2]|0;
  $34 = $33 | $32;
  HEAP32[8328>>2] = $34;
  STACKTOP = sp;return;
  break;
 }
 case 308:  {
  $37 = HEAP32[8324>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   $45 = $0;
   $46 = (_GetResWName($45,0)|0);
   HEAP32[$vararg_buffer1>>2] = $46;
   (_EmitErr(80,$vararg_buffer1)|0);
   STACKTOP = sp;return;
  }
  $39 = HEAP32[8320>>2]|0;
  $40 = ($39|0)>(0);
  if ($40) {
   $41 = HEAP32[8320>>2]|0;
   $42 = (($41) + -1)|0;
   HEAP32[8320>>2] = $42;
   STACKTOP = sp;return;
  } else {
   $43 = HEAP32[8324>>2]|0;
   $44 = (($43) + -1)|0;
   HEAP32[8324>>2] = $44;
   HEAP32[8316>>2] = 0;
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _CondAsmDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $NextIfState = 0, $directive = 0, $opndx = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $string1 = 0, $string2 = 0, $sym = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 120|0;
 $vararg_buffer19 = sp + 112|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer13 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 152|0;
 $opndx = sp;
 $value = sp + 124|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $directive = $7;
 $8 = HEAP32[8316>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 4;
  } else {
   $12 = HEAP32[(560)>>2]|0;
   $13 = $12 >>> 13;
   $14 = $13 & 1;
   $15 = ($14|0)!=(0);
   if ($15) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   _LstWriteSrcLine();
  }
  $0 = 0;
  $396 = $0;
  STACKTOP = sp;return ($396|0);
 }
 $16 = HEAP32[(560)>>2]|0;
 $17 = $16 >>> 11;
 $18 = $17 & 1;
 $19 = ($18|0)==(1);
 do {
  if ($19) {
   $20 = HEAP8[87007>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)==(0);
   $23 = HEAP32[(552)>>2]|0;
   $24 = ($23|0)==(2);
   $or$cond = $22 | $24;
   if (!($or$cond)) {
    $25 = HEAP32[(560)>>2]|0;
    $26 = $25 >>> 13;
    $27 = $26 & 1;
    $28 = ($27|0)!=(0);
    if (!($28)) {
     break;
    }
   }
   _LstWriteSrcLine();
  }
 } while(0);
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$1>>2] = $30;
 $31 = $directive;
 $32 = (15660 + (($31*12)|0)|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 L16: do {
  switch ($34|0) {
  case 1:  {
   $35 = $2;
   $36 = HEAP32[(616)>>2]|0;
   $37 = (_EvalOperand($1,$35,$36,$opndx,2)|0);
   $38 = (-1)==($37|0);
   if ($38) {
    $39 = ((($opndx)) + 40|0);
    HEAP32[$39>>2] = 0;
    HEAP32[$opndx>>2] = 0;
    $40 = HEAP32[(616)>>2]|0;
    HEAP32[$1>>2] = $40;
   }
   $41 = ((($opndx)) + 40|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   do {
    if (!($43)) {
     $44 = ((($opndx)) + 40|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)==(1);
     if ($46) {
      $47 = ((($opndx)) + 52|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48 & 1;
      $50 = $49&255;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($opndx)) + 56|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ((($53)) + 8|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = HEAP32[$opndx>>2]|0;
       $57 = (($56) + ($55))|0;
       HEAP32[$opndx>>2] = $57;
       _EmitWarn(2,65,$vararg_buffer);
       break;
      }
     }
     $58 = (_EmitError(65)|0);
     $0 = $58;
     $396 = $0;
     STACKTOP = sp;return ($396|0);
    }
   } while(0);
   $59 = $directive;
   $60 = ($59|0)==(283);
   $61 = $directive;
   $62 = ($61|0)==(296);
   $or$cond3 = $60 | $62;
   $63 = HEAP32[$opndx>>2]|0;
   $64 = ($63|0)!=(0);
   if ($or$cond3) {
    $65 = $64 ? 0 : 1;
    $NextIfState = $65;
    break L16;
   } else {
    $66 = $64 ^ 1;
    $67 = $66 ? 0 : 1;
    $NextIfState = $67;
    break L16;
   }
   break;
  }
  case 2:  {
   $68 = HEAP32[$1>>2]|0;
   $69 = $2;
   $70 = (($69) + ($68<<4)|0);
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $string1 = $72;
   $73 = HEAP32[$1>>2]|0;
   $74 = $2;
   $75 = (($74) + ($73<<4)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($77|0)!=(9);
   if (!($78)) {
    $79 = HEAP32[$1>>2]|0;
    $80 = $2;
    $81 = (($80) + ($79<<4)|0);
    $82 = ((($81)) + 1|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83 << 24 >> 24;
    $85 = ($84|0)!=(60);
    if (!($85)) {
     $96 = HEAP32[$1>>2]|0;
     $97 = (($96) + 1)|0;
     HEAP32[$1>>2] = $97;
     $98 = HEAP32[$1>>2]|0;
     $99 = $2;
     $100 = (($99) + ($98<<4)|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101&255;
     $103 = ($102|0)!=(44);
     $104 = HEAP32[$1>>2]|0;
     if ($103) {
      $105 = $2;
      $106 = (($105) + ($104<<4)|0);
      $107 = ((($106)) + 12|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP32[$vararg_buffer10>>2] = $108;
      $109 = (_EmitErr(39,$vararg_buffer10)|0);
      $0 = $109;
      $396 = $0;
      STACKTOP = sp;return ($396|0);
     }
     $110 = (($104) + 1)|0;
     HEAP32[$1>>2] = $110;
     $111 = HEAP32[$1>>2]|0;
     $112 = $2;
     $113 = (($112) + ($111<<4)|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $string2 = $115;
     $116 = HEAP32[$1>>2]|0;
     $117 = $2;
     $118 = (($117) + ($116<<4)|0);
     $119 = HEAP8[$118>>0]|0;
     $120 = $119&255;
     $121 = ($120|0)!=(9);
     if (!($121)) {
      $122 = HEAP32[$1>>2]|0;
      $123 = $2;
      $124 = (($123) + ($122<<4)|0);
      $125 = ((($124)) + 1|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = $126 << 24 >> 24;
      $128 = ($127|0)!=(60);
      if (!($128)) {
       $139 = HEAP32[$1>>2]|0;
       $140 = (($139) + 1)|0;
       HEAP32[$1>>2] = $140;
       $141 = $directive;
       switch ($141|0) {
       case 300: case 287:  {
        $142 = $string1;
        $143 = $string2;
        $144 = (_check_dif($142,$143,1)|0);
        $145 = $144&255;
        $146 = ($145|0)!=(0);
        $147 = $146 ? 0 : 1;
        $NextIfState = $147;
        break L16;
        break;
       }
       case 301: case 288:  {
        $148 = $string1;
        $149 = $string2;
        $150 = (_check_dif($148,$149,0)|0);
        $151 = $150&255;
        $152 = ($151|0)!=(0);
        $153 = $152 ? 0 : 1;
        $NextIfState = $153;
        break L16;
        break;
       }
       case 302: case 289:  {
        $154 = $string1;
        $155 = $string2;
        $156 = (_check_dif($154,$155,1)|0);
        $157 = ($156<<24>>24)!=(0);
        $158 = $157 ^ 1;
        $159 = $158 ? 0 : 1;
        $NextIfState = $159;
        break L16;
        break;
       }
       default: {
        $160 = $string1;
        $161 = $string2;
        $162 = (_check_dif($160,$161,0)|0);
        $163 = ($162<<24>>24)!=(0);
        $164 = $163 ^ 1;
        $165 = $164 ? 0 : 1;
        $NextIfState = $165;
        break L16;
       }
       }
      }
     }
     $129 = HEAP32[$1>>2]|0;
     $130 = $2;
     $131 = (($130) + ($129<<4)|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = ($133|0)==(8);
     if ($134) {
      $135 = $string2;
      $136 = (_SymFind($135)|0);
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = $string2;
       HEAP32[$vararg_buffer13>>2] = $138;
       (_EmitErr(102,$vararg_buffer13)|0);
      } else {
       label = 35;
      }
     } else {
      label = 35;
     }
     if ((label|0) == 35) {
      (_EmitError(144)|0);
     }
     $0 = -1;
     $396 = $0;
     STACKTOP = sp;return ($396|0);
    }
   }
   $86 = HEAP32[$1>>2]|0;
   $87 = $2;
   $88 = (($87) + ($86<<4)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ($90|0)==(8);
   if ($91) {
    $92 = $string1;
    $93 = (_SymFind($92)|0);
    $94 = ($93|0)==(0|0);
    if ($94) {
     $95 = $string1;
     HEAP32[$vararg_buffer8>>2] = $95;
     (_EmitErr(102,$vararg_buffer8)|0);
    } else {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    (_EmitError(144)|0);
   }
   $0 = -1;
   $396 = $0;
   STACKTOP = sp;return ($396|0);
   break;
  }
  case 3:  {
   $166 = HEAP32[$1>>2]|0;
   $167 = $2;
   $168 = (($167) + ($166<<4)|0);
   $169 = ((($168)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $string1 = $170;
   $171 = HEAP32[$1>>2]|0;
   $172 = $2;
   $173 = (($172) + ($171<<4)|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = ($175|0)!=(9);
   if (!($176)) {
    $177 = HEAP32[$1>>2]|0;
    $178 = $2;
    $179 = (($178) + ($177<<4)|0);
    $180 = ((($179)) + 1|0);
    $181 = HEAP8[$180>>0]|0;
    $182 = $181 << 24 >> 24;
    $183 = ($182|0)!=(60);
    if (!($183)) {
     $194 = HEAP32[$1>>2]|0;
     $195 = (($194) + 1)|0;
     HEAP32[$1>>2] = $195;
     $196 = $directive;
     $197 = ($196|0)==(291);
     $198 = $directive;
     $199 = ($198|0)==(304);
     $or$cond5 = $197 | $199;
     $200 = $string1;
     $201 = (_check_blank($200)|0);
     if ($or$cond5) {
      $202 = $201&255;
      $203 = ($202|0)!=(0);
      $204 = $203 ? 0 : 1;
      $NextIfState = $204;
      break L16;
     } else {
      $205 = ($201<<24>>24)!=(0);
      $206 = $205 ^ 1;
      $207 = $206 ? 0 : 1;
      $NextIfState = $207;
      break L16;
     }
    }
   }
   $184 = HEAP32[$1>>2]|0;
   $185 = $2;
   $186 = (($185) + ($184<<4)|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = ($188|0)==(8);
   if ($189) {
    $190 = $string1;
    $191 = (_SymFind($190)|0);
    $192 = ($191|0)==(0|0);
    if ($192) {
     $193 = $string1;
     HEAP32[$vararg_buffer16>>2] = $193;
     (_EmitErr(102,$vararg_buffer16)|0);
    } else {
     label = 47;
    }
   } else {
    label = 47;
   }
   if ((label|0) == 47) {
    (_EmitError(144)|0);
   }
   $0 = -1;
   $396 = $0;
   STACKTOP = sp;return ($396|0);
   break;
  }
  case 5:  {
   $NextIfState = 0;
   break;
  }
  case 6:  {
   $208 = HEAP32[(560)>>2]|0;
   $209 = $208 >>> 10;
   $210 = $209 & 1;
   $211 = ($210|0)==(0);
   if ($211) {
    (_EmitError(190)|0);
    break L16;
   } else {
    $NextIfState = 0;
    break L16;
   }
   break;
  }
  case 4:  {
   $NextIfState = 1;
   $212 = HEAP32[$1>>2]|0;
   $213 = $2;
   $214 = (($213) + ($212<<4)|0);
   $215 = HEAP8[$214>>0]|0;
   $216 = $215&255;
   $217 = ($216|0)==(0);
   do {
    if (!($217)) {
     $218 = HEAP32[$1>>2]|0;
     $219 = $2;
     $220 = (($219) + ($218<<4)|0);
     $221 = HEAP8[$220>>0]|0;
     $222 = $221&255;
     $223 = ($222|0)==(8);
     if ($223) {
      $224 = HEAP8[(6083)>>0]|0;
      $225 = $224&255;
      $226 = ($225|0)==(0);
      do {
       if ($226) {
        $227 = HEAP32[$1>>2]|0;
        $228 = (($227) + 1)|0;
        $229 = $2;
        $230 = (($229) + ($228<<4)|0);
        $231 = HEAP8[$230>>0]|0;
        $232 = $231&255;
        $233 = ($232|0)==(46);
        if ($233) {
         $234 = HEAP32[$1>>2]|0;
         $235 = $2;
         $236 = (($235) + ($234<<4)|0);
         $237 = ((($236)) + 4|0);
         $238 = HEAP32[$237>>2]|0;
         $239 = (_SymFind($238)|0);
         $sym = $239;
         $240 = ($239|0)!=(0|0);
         if ($240) {
          $241 = $sym;
          $242 = ((($241)) + 16|0);
          $243 = HEAP32[$242>>2]|0;
          $244 = ($243|0)==(7);
          if (!($244)) {
           $245 = $sym;
           $246 = ((($245)) + 52|0);
           $247 = HEAP32[$246>>2]|0;
           $248 = ($247|0)!=(0|0);
           if (!($248)) {
            label = 69;
            break;
           }
          }
          HEAP32[$value>>2] = 0;
          while(1) {
           $249 = HEAP32[$1>>2]|0;
           $250 = (($249) + 2)|0;
           HEAP32[$1>>2] = $250;
           $251 = $sym;
           $252 = ((($251)) + 16|0);
           $253 = HEAP32[$252>>2]|0;
           $254 = ($253|0)!=(7);
           if ($254) {
            $255 = $sym;
            $256 = ((($255)) + 52|0);
            $257 = HEAP32[$256>>2]|0;
            $sym = $257;
           }
           $258 = $sym;
           $259 = HEAP32[$1>>2]|0;
           $260 = $2;
           $261 = (($260) + ($259<<4)|0);
           $262 = ((($261)) + 4|0);
           $263 = HEAP32[$262>>2]|0;
           $264 = (_SearchNameInStruct($258,$263,$value,0)|0);
           $sym = $264;
           $265 = $sym;
           $266 = ($265|0)!=(0|0);
           if (!($266)) {
            break;
           }
           $267 = HEAP32[$1>>2]|0;
           $268 = (($267) + 1)|0;
           $269 = $2;
           $270 = (($269) + ($268<<4)|0);
           $271 = HEAP8[$270>>0]|0;
           $272 = $271&255;
           $273 = ($272|0)==(46);
           if (!($273)) {
            break;
           }
          }
          $274 = $sym;
          $275 = ($274|0)!=(0|0);
          $276 = $275 ? 0 : 1;
          $NextIfState = $276;
         } else {
          label = 69;
         }
        } else {
         label = 69;
        }
       } else {
        label = 69;
       }
      } while(0);
      if ((label|0) == 69) {
       $277 = HEAP32[$1>>2]|0;
       $278 = $2;
       $279 = (($278) + ($277<<4)|0);
       $280 = ((($279)) + 4|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = (_check_defd($281)|0);
       $283 = $282&255;
       $284 = ($283|0)!=(0);
       $285 = $284 ? 0 : 1;
       $NextIfState = $285;
      }
      $286 = HEAP32[$1>>2]|0;
      $287 = (($286) + 1)|0;
      HEAP32[$1>>2] = $287;
      break;
     } else {
      $288 = HEAP32[$1>>2]|0;
      $289 = $2;
      $290 = (($289) + ($288<<4)|0);
      $291 = HEAP8[$290>>0]|0;
      $292 = $291&255;
      $293 = ($292|0)==(7);
      if ($293) {
       $294 = HEAP32[$1>>2]|0;
       $295 = $2;
       $296 = (($295) + ($294<<4)|0);
       $297 = ((($296)) + 8|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = ($298|0)==(187);
       if ($299) {
        $300 = HEAP32[(588)>>2]|0;
        $301 = ($300|0)!=(0|0);
        if ($301) {
         $302 = HEAP32[(588)>>2]|0;
         $303 = ((($302)) + 24|0);
         $304 = HEAP16[$303>>1]|0;
         $305 = ($304&65535) >>> 1;
         $306 = $305 & 1;
         $307 = $306&255;
         $308 = $307&255;
         $309 = ($308|0)!=(0);
         $311 = $309;
        } else {
         $311 = 0;
        }
        $310 = $311 ? 0 : 1;
        $NextIfState = $310;
        $312 = HEAP32[$1>>2]|0;
        $313 = (($312) + 1)|0;
        HEAP32[$1>>2] = $313;
        break;
       }
      }
      $314 = HEAP8[(6083)>>0]|0;
      $315 = $314&255;
      $316 = ($315|0)==(0);
      if (!($316)) {
       break;
      }
      $317 = HEAP32[$1>>2]|0;
      $318 = $2;
      $319 = (($318) + ($317<<4)|0);
      $320 = HEAP8[$319>>0]|0;
      $321 = $320&255;
      $322 = ($321|0)==(7);
      if (!($322)) {
       $323 = HEAP32[$1>>2]|0;
       $324 = $2;
       $325 = (($324) + ($323<<4)|0);
       $326 = HEAP8[$325>>0]|0;
       $327 = $326&255;
       $328 = ($327|0)==(6);
       if (!($328)) {
        $329 = HEAP32[$1>>2]|0;
        $330 = $2;
        $331 = (($330) + ($329<<4)|0);
        $332 = HEAP8[$331>>0]|0;
        $333 = $332&255;
        $334 = ($333|0)==(1);
        if (!($334)) {
         $335 = HEAP32[$1>>2]|0;
         $336 = $2;
         $337 = (($336) + ($335<<4)|0);
         $338 = HEAP8[$337>>0]|0;
         $339 = $338&255;
         $340 = ($339|0)==(3);
         if (!($340)) {
          $341 = HEAP32[$1>>2]|0;
          $342 = $2;
          $343 = (($342) + ($341<<4)|0);
          $344 = HEAP8[$343>>0]|0;
          $345 = $344&255;
          $346 = ($345|0)==(2);
          if (!($346)) {
           break;
          }
         }
        }
       }
      }
      $347 = HEAP32[$1>>2]|0;
      $348 = (($347) + 1)|0;
      $349 = $2;
      $350 = (($349) + ($348<<4)|0);
      $351 = HEAP8[$350>>0]|0;
      $352 = $351&255;
      $353 = ($352|0)==(0);
      if (!($353)) {
       break;
      }
      $NextIfState = 0;
      $354 = HEAP32[$1>>2]|0;
      $355 = (($354) + 1)|0;
      HEAP32[$1>>2] = $355;
      break;
     }
    }
   } while(0);
   $356 = HEAP32[$1>>2]|0;
   $357 = $2;
   $358 = (($357) + ($356<<4)|0);
   $359 = HEAP8[$358>>0]|0;
   $360 = $359&255;
   $361 = ($360|0)!=(0);
   L124: do {
    if ($361) {
     $362 = HEAP32[$1>>2]|0;
     $363 = (($362) - 1)|0;
     $364 = $2;
     $365 = (($364) + ($363<<4)|0);
     $366 = ((($365)) + 12|0);
     $367 = HEAP32[$366>>2]|0;
     HEAP32[$vararg_buffer19>>2] = $367;
     _EmitWarn(2,248,$vararg_buffer19);
     while(1) {
      $368 = HEAP32[$1>>2]|0;
      $369 = $2;
      $370 = (($369) + ($368<<4)|0);
      $371 = HEAP8[$370>>0]|0;
      $372 = $371&255;
      $373 = ($372|0)!=(0);
      if (!($373)) {
       break L124;
      }
      $374 = HEAP32[$1>>2]|0;
      $375 = (($374) + 1)|0;
      HEAP32[$1>>2] = $375;
     }
    }
   } while(0);
   $376 = $directive;
   $377 = ($376|0)==(294);
   $378 = $directive;
   $379 = ($378|0)==(307);
   $or$cond7 = $377 | $379;
   if ($or$cond7) {
    $380 = $NextIfState;
    $381 = ($380|0)==(0);
    $382 = $381 ? 1 : 0;
    $NextIfState = $382;
   }
   break;
  }
  default: {
   $NextIfState = 0;
  }
  }
 } while(0);
 $383 = HEAP32[$1>>2]|0;
 $384 = $2;
 $385 = (($384) + ($383<<4)|0);
 $386 = HEAP8[$385>>0]|0;
 $387 = $386&255;
 $388 = ($387|0)!=(0);
 if ($388) {
  $389 = HEAP32[$1>>2]|0;
  $390 = $2;
  $391 = (($390) + ($389<<4)|0);
  $392 = ((($391)) + 4|0);
  $393 = HEAP32[$392>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $393;
  $394 = (_EmitErr(209,$vararg_buffer22)|0);
  $0 = $394;
  $396 = $0;
  STACKTOP = sp;return ($396|0);
 } else {
  $395 = $NextIfState;
  HEAP32[8316>>2] = $395;
  $0 = 0;
  $396 = $0;
  STACKTOP = sp;return ($396|0);
 }
 return (0)|0;
}
function _ErrorDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $direct = 0, $erridx = 0, $errmsg = 0, $idloc = 0, $j = 0, $opndx = 0, $or$cond = 0, $or$cond4 = 0, $size = 0, $string1 = 0, $string2 = 0, $sym = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr21 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer33 = sp + 152|0;
 $vararg_buffer30 = sp + 144|0;
 $vararg_buffer25 = sp + 128|0;
 $vararg_buffer22 = sp + 120|0;
 $vararg_buffer18 = sp + 112|0;
 $vararg_buffer15 = sp + 104|0;
 $vararg_buffer12 = sp + 96|0;
 $vararg_buffer9 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 200|0;
 $opndx = sp;
 $value = sp + 164|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $errmsg = -2;
 $erridx = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $direct = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$1>>2] = $9;
 $10 = $direct;
 $11 = (15660 + (($10*12)|0)|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 L1: do {
  switch ($13|0) {
  case 1:  {
   $14 = $2;
   $15 = HEAP32[(616)>>2]|0;
   $16 = (_EvalOperand($1,$14,$15,$opndx,0)|0);
   $17 = (-1)==($16|0);
   if ($17) {
    $0 = -1;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
   }
   $18 = ((($opndx)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   do {
    if (!($20)) {
     $21 = ((($opndx)) + 40|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(1);
     if ($23) {
      $24 = ((($opndx)) + 52|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $25 & 1;
      $27 = $26&255;
      $28 = ($27|0)==(0);
      if ($28) {
       $29 = ((($opndx)) + 56|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)!=(0|0);
       if ($31) {
        $32 = ((($opndx)) + 56|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ((($33)) + 16|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($35|0)==(0);
        if ($36) {
         break;
        }
       }
      }
     }
     $37 = (_EmitError(65)|0);
     $0 = $37;
     $440 = $0;
     STACKTOP = sp;return ($440|0);
    }
   } while(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = $2;
   $40 = (($39) + ($38<<4)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = ($42|0)==(44);
   if ($43) {
    $44 = HEAP32[$1>>2]|0;
    $45 = (($44) + 1)|0;
    $46 = $2;
    $47 = (($46) + ($45<<4)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = HEAP32[$1>>2]|0;
     $52 = (($51) + 1)|0;
     HEAP32[$1>>2] = $52;
     $53 = HEAP32[$1>>2]|0;
     $54 = (($53) + 1)|0;
     HEAP32[$1>>2] = $54;
     $erridx = $53;
    }
   }
   $55 = HEAP32[4884>>2]|0;
   $56 = ($55|0)==(0);
   if (!($56)) {
    $57 = $direct;
    $58 = ($57|0)==(273);
    if ($58) {
     $59 = HEAP32[$opndx>>2]|0;
     $60 = ($59|0)!=(0);
     if ($60) {
      $errmsg = 115;
     } else {
      label = 17;
     }
    } else {
     label = 17;
    }
    if ((label|0) == 17) {
     $61 = $direct;
     $62 = ($61|0)==(272);
     if ($62) {
      $63 = HEAP32[$opndx>>2]|0;
      $64 = ($63|0)!=(0);
      if (!($64)) {
       $errmsg = 116;
      }
     }
    }
    $65 = $errmsg;
    $66 = ($65|0)!=(-2);
    if ($66) {
     $67 = $errmsg;
     $68 = HEAP32[$opndx>>2]|0;
     $69 = $erridx;
     $70 = $2;
     $71 = (_GetErrText($69,$70)|0);
     HEAP32[$vararg_buffer>>2] = $68;
     $vararg_ptr5 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $71;
     (_EmitErr($67,$vararg_buffer)|0);
    }
   }
   break;
  }
  case 4:  {
   $72 = HEAP32[$1>>2]|0;
   $73 = $2;
   $74 = (($73) + ($72<<4)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = ($76|0)!=(8);
   $78 = HEAP32[$1>>2]|0;
   if ($77) {
    $79 = $2;
    $80 = (($79) + ($78<<4)|0);
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $82;
    $83 = (_EmitErr(209,$vararg_buffer6)|0);
    $0 = $83;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
   }
   $idloc = $78;
   while(1) {
    $84 = HEAP32[$1>>2]|0;
    $85 = (($84) + 1)|0;
    HEAP32[$1>>2] = $85;
    $86 = HEAP32[$1>>2]|0;
    $87 = $2;
    $88 = (($87) + ($86<<4)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ($90|0)==(46);
    if ($91) {
     continue;
    }
    $92 = HEAP32[$1>>2]|0;
    $93 = $2;
    $94 = (($93) + ($92<<4)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = ($96|0)==(8);
    if (!($97)) {
     break;
    }
   }
   $98 = HEAP32[$1>>2]|0;
   $99 = $2;
   $100 = (($99) + ($98<<4)|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ($102|0)==(44);
   if ($103) {
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 1)|0;
    $106 = $2;
    $107 = (($106) + ($105<<4)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = HEAP32[$1>>2]|0;
     $112 = (($111) + 1)|0;
     HEAP32[$1>>2] = $112;
     $113 = HEAP32[$1>>2]|0;
     $114 = (($113) + 1)|0;
     HEAP32[$1>>2] = $114;
     $erridx = $113;
    }
   }
   $115 = HEAP32[4884>>2]|0;
   $116 = ($115|0)==(0);
   if (!($116)) {
    $117 = HEAP8[(6083)>>0]|0;
    $118 = $117&255;
    $119 = ($118|0)==(0);
    do {
     if ($119) {
      $120 = $idloc;
      $121 = (($120) + 1)|0;
      $122 = $2;
      $123 = (($122) + ($121<<4)|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = $124&255;
      $126 = ($125|0)==(46);
      if ($126) {
       $127 = $idloc;
       $128 = $2;
       $129 = (($128) + ($127<<4)|0);
       $130 = ((($129)) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = (_SymFind($131)|0);
       $sym = $132;
       $133 = ($132|0)!=(0|0);
       if ($133) {
        $134 = $sym;
        $135 = ((($134)) + 16|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==(7);
        if (!($137)) {
         $138 = $sym;
         $139 = ((($138)) + 52|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($140|0)!=(0|0);
         if (!($141)) {
          label = 47;
          break;
         }
        }
        $142 = $idloc;
        $j = $142;
        HEAP32[$value>>2] = 0;
        while(1) {
         $143 = $j;
         $144 = (($143) + 2)|0;
         $j = $144;
         $145 = $sym;
         $146 = ((($145)) + 16|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = ($147|0)!=(7);
         if ($148) {
          $149 = $sym;
          $150 = ((($149)) + 52|0);
          $151 = HEAP32[$150>>2]|0;
          $sym = $151;
         }
         $152 = $sym;
         $153 = $j;
         $154 = $2;
         $155 = (($154) + ($153<<4)|0);
         $156 = ((($155)) + 4|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = (_SearchNameInStruct($152,$157,$value,0)|0);
         $sym = $158;
         $159 = $sym;
         $160 = ($159|0)!=(0|0);
         if (!($160)) {
          break;
         }
         $161 = $j;
         $162 = (($161) + 1)|0;
         $163 = $2;
         $164 = (($163) + ($162<<4)|0);
         $165 = HEAP8[$164>>0]|0;
         $166 = $165&255;
         $167 = ($166|0)==(46);
         if (!($167)) {
          break;
         }
        }
        $168 = $j;
        $169 = $2;
        $170 = (($169) + ($168<<4)|0);
        $171 = HEAP8[$170>>0]|0;
        $172 = $171&255;
        $173 = ($172|0)==(8);
        $174 = $j;
        if ($173) {
         $175 = (($174) + 1)|0;
         $j = $175;
        } else {
         $176 = $2;
         $177 = (($176) + ($174<<4)|0);
         $178 = HEAP8[$177>>0]|0;
         $179 = $178&255;
         $180 = ($179|0)!=(0);
         if ($180) {
          $181 = $j;
          $182 = $2;
          $183 = (($182) + ($181<<4)|0);
          $184 = HEAP8[$183>>0]|0;
          $185 = $184&255;
          $186 = ($185|0)!=(44);
          if ($186) {
           $187 = $j;
           $188 = $2;
           $189 = (($188) + ($187<<4)|0);
           $190 = ((($189)) + 4|0);
           $191 = HEAP32[$190>>2]|0;
           HEAP32[$vararg_buffer9>>2] = $191;
           $192 = (_EmitErr(209,$vararg_buffer9)|0);
           $0 = $192;
           $440 = $0;
           STACKTOP = sp;return ($440|0);
          }
         }
        }
        $193 = $j;
        $194 = $2;
        $195 = (($194) + ($193<<4)|0);
        $196 = ((($195)) + 12|0);
        $197 = HEAP32[$196>>2]|0;
        $198 = $idloc;
        $199 = $2;
        $200 = (($199) + ($198<<4)|0);
        $201 = ((($200)) + 12|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = $197;
        $204 = $202;
        $205 = (($203) - ($204))|0;
        $size = $205;
        $206 = HEAP32[(612)>>2]|0;
        $207 = $idloc;
        $208 = $2;
        $209 = (($208) + ($207<<4)|0);
        $210 = ((($209)) + 12|0);
        $211 = HEAP32[$210>>2]|0;
        $212 = $size;
        _memcpy(($206|0),($211|0),($212|0))|0;
        $213 = HEAP32[(612)>>2]|0;
        $214 = $size;
        $215 = (($213) + ($214)|0);
        HEAP8[$215>>0] = 0;
       } else {
        label = 47;
       }
      } else {
       label = 47;
      }
     } else {
      label = 47;
     }
    } while(0);
    if ((label|0) == 47) {
     $216 = $idloc;
     $217 = $2;
     $218 = (($217) + ($216<<4)|0);
     $219 = ((($218)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (_SymFind($220)|0);
     $sym = $221;
     $222 = HEAP32[(612)>>2]|0;
     $223 = $idloc;
     $224 = $2;
     $225 = (($224) + ($223<<4)|0);
     $226 = ((($225)) + 4|0);
     $227 = HEAP32[$226>>2]|0;
     (_strcpy($222,$227)|0);
    }
    $228 = $sym;
    $229 = ($228|0)!=(0|0);
    if ($229) {
     $230 = $sym;
     $231 = ((($230)) + 16|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ($232|0)==(0);
     if ($233) {
      $sym = 0;
     }
    }
    $234 = $direct;
    $235 = ($234|0)==(280);
    $236 = $sym;
    $237 = ($236|0)!=(0|0);
    $or$cond = $235 & $237;
    if ($or$cond) {
     $238 = HEAP32[(612)>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $238;
     (_EmitErr(117,$vararg_buffer12)|0);
     break L1;
    }
    $239 = $direct;
    $240 = ($239|0)==(281);
    $241 = $sym;
    $242 = ($241|0)==(0|0);
    $or$cond4 = $240 & $242;
    if ($or$cond4) {
     $243 = HEAP32[(612)>>2]|0;
     HEAP32[$vararg_buffer15>>2] = $243;
     (_EmitErr(118,$vararg_buffer15)|0);
    }
   }
   break;
  }
  case 3:  {
   $244 = HEAP32[$1>>2]|0;
   $245 = $2;
   $246 = (($245) + ($244<<4)|0);
   $247 = ((($246)) + 4|0);
   $248 = HEAP32[$247>>2]|0;
   $string1 = $248;
   $249 = HEAP32[$1>>2]|0;
   $250 = $2;
   $251 = (($250) + ($249<<4)|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = ($253|0)!=(9);
   if (!($254)) {
    $255 = HEAP32[$1>>2]|0;
    $256 = $2;
    $257 = (($256) + ($255<<4)|0);
    $258 = ((($257)) + 1|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $259 << 24 >> 24;
    $261 = ($260|0)!=(60);
    if (!($261)) {
     $266 = HEAP32[$1>>2]|0;
     $267 = (($266) + 1)|0;
     HEAP32[$1>>2] = $267;
     $268 = HEAP32[$1>>2]|0;
     $269 = $2;
     $270 = (($269) + ($268<<4)|0);
     $271 = HEAP8[$270>>0]|0;
     $272 = $271&255;
     $273 = ($272|0)==(44);
     if ($273) {
      $274 = HEAP32[$1>>2]|0;
      $275 = (($274) + 1)|0;
      $276 = $2;
      $277 = (($276) + ($275<<4)|0);
      $278 = HEAP8[$277>>0]|0;
      $279 = $278&255;
      $280 = ($279|0)!=(0);
      if ($280) {
       $281 = HEAP32[$1>>2]|0;
       $282 = (($281) + 1)|0;
       HEAP32[$1>>2] = $282;
       $283 = HEAP32[$1>>2]|0;
       $284 = (($283) + 1)|0;
       HEAP32[$1>>2] = $284;
       $erridx = $283;
      }
     }
     $285 = HEAP32[4884>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      break L1;
     }
     $287 = $direct;
     $288 = ($287|0)==(278);
     if ($288) {
      $289 = $string1;
      $290 = (_check_blank($289)|0);
      $291 = $290&255;
      $292 = ($291|0)!=(0);
      if ($292) {
       $errmsg = 119;
      } else {
       label = 65;
      }
     } else {
      label = 65;
     }
     if ((label|0) == 65) {
      $293 = $direct;
      $294 = ($293|0)==(279);
      if ($294) {
       $295 = $string1;
       $296 = (_check_blank($295)|0);
       $297 = ($296<<24>>24)!=(0);
       if (!($297)) {
        $errmsg = 120;
       }
      }
     }
     $298 = $errmsg;
     $299 = ($298|0)!=(-2);
     if (!($299)) {
      break L1;
     }
     $300 = $errmsg;
     $301 = $string1;
     $302 = $erridx;
     $303 = $2;
     $304 = (_GetErrText($302,$303)|0);
     HEAP32[$vararg_buffer18>>2] = $301;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = $304;
     (_EmitErr($300,$vararg_buffer18)|0);
     break L1;
    }
   }
   $262 = HEAP32[$1>>2]|0;
   $263 = $2;
   $264 = (($263) + ($262<<4)|0);
   $265 = (_TextItemError($264)|0);
   $0 = $265;
   $440 = $0;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 2:  {
   $305 = HEAP32[$1>>2]|0;
   $306 = $2;
   $307 = (($306) + ($305<<4)|0);
   $308 = ((($307)) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $string1 = $309;
   $310 = HEAP32[$1>>2]|0;
   $311 = $2;
   $312 = (($311) + ($310<<4)|0);
   $313 = HEAP8[$312>>0]|0;
   $314 = $313&255;
   $315 = ($314|0)!=(9);
   if (!($315)) {
    $316 = HEAP32[$1>>2]|0;
    $317 = $2;
    $318 = (($317) + ($316<<4)|0);
    $319 = ((($318)) + 1|0);
    $320 = HEAP8[$319>>0]|0;
    $321 = $320 << 24 >> 24;
    $322 = ($321|0)!=(60);
    if (!($322)) {
     $327 = HEAP32[$1>>2]|0;
     $328 = (($327) + 1)|0;
     HEAP32[$1>>2] = $328;
     $329 = HEAP32[$1>>2]|0;
     $330 = $2;
     $331 = (($330) + ($329<<4)|0);
     $332 = HEAP8[$331>>0]|0;
     $333 = $332&255;
     $334 = ($333|0)!=(44);
     $335 = HEAP32[$1>>2]|0;
     if ($334) {
      $336 = $2;
      $337 = (($336) + ($335<<4)|0);
      $338 = ((($337)) + 12|0);
      $339 = HEAP32[$338>>2]|0;
      HEAP32[$vararg_buffer22>>2] = $339;
      $340 = (_EmitErr(39,$vararg_buffer22)|0);
      $0 = $340;
      $440 = $0;
      STACKTOP = sp;return ($440|0);
     }
     $341 = (($335) + 1)|0;
     HEAP32[$1>>2] = $341;
     $342 = HEAP32[$1>>2]|0;
     $343 = $2;
     $344 = (($343) + ($342<<4)|0);
     $345 = ((($344)) + 4|0);
     $346 = HEAP32[$345>>2]|0;
     $string2 = $346;
     $347 = HEAP32[$1>>2]|0;
     $348 = $2;
     $349 = (($348) + ($347<<4)|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = $350&255;
     $352 = ($351|0)!=(9);
     if (!($352)) {
      $353 = HEAP32[$1>>2]|0;
      $354 = $2;
      $355 = (($354) + ($353<<4)|0);
      $356 = ((($355)) + 1|0);
      $357 = HEAP8[$356>>0]|0;
      $358 = $357 << 24 >> 24;
      $359 = ($358|0)!=(60);
      if (!($359)) {
       $364 = HEAP32[$1>>2]|0;
       $365 = (($364) + 1)|0;
       HEAP32[$1>>2] = $365;
       $366 = HEAP32[$1>>2]|0;
       $367 = $2;
       $368 = (($367) + ($366<<4)|0);
       $369 = HEAP8[$368>>0]|0;
       $370 = $369&255;
       $371 = ($370|0)==(44);
       if ($371) {
        $372 = HEAP32[$1>>2]|0;
        $373 = (($372) + 1)|0;
        $374 = $2;
        $375 = (($374) + ($373<<4)|0);
        $376 = HEAP8[$375>>0]|0;
        $377 = $376&255;
        $378 = ($377|0)!=(0);
        if ($378) {
         $379 = HEAP32[$1>>2]|0;
         $380 = (($379) + 1)|0;
         HEAP32[$1>>2] = $380;
         $381 = HEAP32[$1>>2]|0;
         $382 = (($381) + 1)|0;
         HEAP32[$1>>2] = $382;
         $erridx = $381;
        }
       }
       $383 = HEAP32[4884>>2]|0;
       $384 = ($383|0)==(0);
       if ($384) {
        break L1;
       }
       $385 = $direct;
       switch ($385|0) {
       case 274:  {
        $386 = $string1;
        $387 = $string2;
        $388 = (_check_dif($386,$387,1)|0);
        $389 = ($388<<24>>24)!=(0);
        if ($389) {
         $errmsg = 121;
        }
        break;
       }
       case 275:  {
        $390 = $string1;
        $391 = $string2;
        $392 = (_check_dif($390,$391,0)|0);
        $393 = ($392<<24>>24)!=(0);
        if ($393) {
         $errmsg = 121;
        }
        break;
       }
       case 276:  {
        $394 = $string1;
        $395 = $string2;
        $396 = (_check_dif($394,$395,1)|0);
        $397 = ($396<<24>>24)!=(0);
        if (!($397)) {
         $errmsg = 122;
        }
        break;
       }
       default: {
        $398 = $string1;
        $399 = $string2;
        $400 = (_check_dif($398,$399,0)|0);
        $401 = ($400<<24>>24)!=(0);
        if (!($401)) {
         $errmsg = 122;
        }
       }
       }
       $402 = $errmsg;
       $403 = ($402|0)!=(-2);
       if (!($403)) {
        break L1;
       }
       $404 = $errmsg;
       $405 = $string1;
       $406 = $string2;
       $407 = $erridx;
       $408 = $2;
       $409 = (_GetErrText($407,$408)|0);
       HEAP32[$vararg_buffer25>>2] = $405;
       $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
       HEAP32[$vararg_ptr28>>2] = $406;
       $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
       HEAP32[$vararg_ptr29>>2] = $409;
       (_EmitErr($404,$vararg_buffer25)|0);
       break L1;
      }
     }
     $360 = HEAP32[$1>>2]|0;
     $361 = $2;
     $362 = (($361) + ($360<<4)|0);
     $363 = (_TextItemError($362)|0);
     $0 = $363;
     $440 = $0;
     STACKTOP = sp;return ($440|0);
    }
   }
   $323 = HEAP32[$1>>2]|0;
   $324 = $2;
   $325 = (($324) + ($323<<4)|0);
   $326 = (_TextItemError($325)|0);
   $0 = $326;
   $440 = $0;
   STACKTOP = sp;return ($440|0);
   break;
  }
  case 6:  {
   $410 = HEAP32[(560)>>2]|0;
   $411 = $410 >>> 10;
   $412 = $411 & 1;
   $413 = ($412|0)==(0);
   if ($413) {
    $414 = (_EmitError(190)|0);
    $0 = $414;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
   } else {
    label = 95;
   }
   break;
  }
  default: {
   label = 95;
  }
  }
 } while(0);
 if ((label|0) == 95) {
  $415 = HEAP32[$1>>2]|0;
  $416 = $2;
  $417 = (($416) + ($415<<4)|0);
  $418 = HEAP8[$417>>0]|0;
  $419 = $418&255;
  $420 = ($419|0)!=(0);
  if ($420) {
   $421 = HEAP32[$1>>2]|0;
   $422 = (($421) + 1)|0;
   HEAP32[$1>>2] = $422;
   $erridx = $421;
  }
  $423 = HEAP32[4884>>2]|0;
  $424 = ($423|0)==(0);
  if (!($424)) {
   $425 = $erridx;
   $426 = $2;
   $427 = (_GetErrText($425,$426)|0);
   HEAP32[$vararg_buffer30>>2] = $427;
   (_EmitErr(114,$vararg_buffer30)|0);
  }
 }
 $428 = HEAP32[$1>>2]|0;
 $429 = $2;
 $430 = (($429) + ($428<<4)|0);
 $431 = HEAP8[$430>>0]|0;
 $432 = $431&255;
 $433 = ($432|0)!=(0);
 if ($433) {
  $434 = HEAP32[$1>>2]|0;
  $435 = $2;
  $436 = (($435) + ($434<<4)|0);
  $437 = ((($436)) + 12|0);
  $438 = HEAP32[$437>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $438;
  $439 = (_EmitErr(209,$vararg_buffer33)|0);
  $0 = $439;
  $440 = $0;
  STACKTOP = sp;return ($440|0);
 } else {
  $0 = 0;
  $440 = $0;
  STACKTOP = sp;return ($440|0);
 }
 return (0)|0;
}
function _CondCheckOpen() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[8324>>2]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = 83422;
 (_EmitErr(80,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _GetIfNestLevel() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8324>>2]|0;
 return ($0|0);
}
function _SetIfNestLevel($newlevel) {
 $newlevel = $newlevel|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $newlevel;
 $1 = $0;
 HEAP32[8324>>2] = $1;
 STACKTOP = sp;return;
}
function _CondInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8316>>2] = 0;
 HEAP32[8324>>2] = 0;
 HEAP32[8320>>2] = 0;
 return;
}
function _check_dif($string1,$string2,$sensitive) {
 $string1 = $string1|0;
 $string2 = $string2|0;
 $sensitive = $sensitive|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string1;
 $2 = $string2;
 $3 = $sensitive;
 $4 = $3;
 $5 = ($4<<24>>24)!=(0);
 $6 = $1;
 $7 = $2;
 if ($5) {
  $8 = (_strcmp($6,$7)|0);
  $9 = ($8|0)!=(0);
  $10 = $9&1;
  $11 = $10&255;
  $0 = $11;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = (_strcasecmp($6,$7)|0);
  $13 = ($12|0)!=(0);
  $14 = $13&1;
  $15 = $14&255;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _check_blank($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $string;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = (_isspace($7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   label = 4;
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 1|0);
  $1 = $11;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _check_defd($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $5 = $1;
  $6 = (_SymFind($5)|0);
  $sym = $6;
  $7 = $sym;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $sym;
   $10 = ((($9)) + 24|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = ($11&65535) >>> 1;
   $13 = $12 & 1;
   $14 = $13&255;
   $0 = $14;
   $15 = $0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $0 = 0;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _GetErrText($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $tokenarray;
 $2 = HEAP32[(612)>>2]|0;
 HEAP8[$2>>0] = 0;
 $3 = $0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $31 = HEAP32[(612)>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $5 = $0;
 $6 = $1;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(9);
 if (!($10)) {
  $11 = $0;
  $12 = $1;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(60);
  if (!($17)) {
   $21 = HEAP32[(612)>>2]|0;
   HEAP8[$21>>0] = 58;
   $22 = HEAP32[(612)>>2]|0;
   $23 = ((($22)) + 1|0);
   HEAP8[$23>>0] = 32;
   $24 = HEAP32[(612)>>2]|0;
   $25 = ((($24)) + 2|0);
   $26 = $0;
   $27 = $1;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   (_strcpy($25,$30)|0);
   $31 = HEAP32[(612)>>2]|0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $18 = $0;
 $19 = $1;
 $20 = (($19) + ($18<<4)|0);
 (_TextItemError($20)|0);
 $31 = HEAP32[(612)>>2]|0;
 STACKTOP = sp;return ($31|0);
}
function _ContextDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $directive = 0, $j = 0, $next = 0, $or$cond = 0, $prev = 0, $start = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $start = $3;
 $4 = $1;
 $5 = $2;
 $6 = (($5) + ($4<<4)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $directive = $8;
 $9 = $1;
 $10 = (($9) + 1)|0;
 $1 = $10;
 L1: while(1) {
  $11 = $1;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(8);
  if (!($16)) {
   break;
  }
  $j = 0;
  $type = -1;
  while(1) {
   $17 = $j;
   $18 = ($17>>>0)<(6);
   if (!($18)) {
    break;
   }
   $19 = $j;
   $20 = (8332 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = $2;
   $24 = (($23) + ($22<<4)|0);
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_strcasecmp($21,$26)|0);
   $28 = ($27|0)==(0);
   $29 = $j;
   if ($28) {
    label = 6;
    break;
   }
   $32 = (($29) + 1)|0;
   $j = $32;
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = (8356 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $type = $31;
  }
  $33 = $type;
  $34 = ($33|0)==(-1);
  if ($34) {
   break;
  }
  $35 = HEAP8[(6083)>>0]|0;
  $36 = ($35<<24>>24)!=(0);
  if ($36) {
   $37 = $type;
   $38 = ($37|0)==(16);
   if ($38) {
    break;
   }
   $39 = $type;
   $40 = $39 & -17;
   $type = $40;
  }
  $41 = $directive;
  $42 = ($41|0)==(371);
  L16: do {
   if ($42) {
    $prev = 0;
    $43 = HEAP32[(444)>>2]|0;
    $curr = $43;
    while(1) {
     $44 = $curr;
     $45 = ($44|0)!=(0|0);
     $46 = $type;
     $47 = ($46|0)!=(0);
     $48 = $45 ? $47 : 0;
     if (!($48)) {
      break;
     }
     $49 = $curr;
     $50 = HEAP32[$49>>2]|0;
     $next = $50;
     $51 = $curr;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $type;
     $55 = $53 & $54;
     $56 = ($55|0)!=(0);
     $57 = $curr;
     L21: do {
      if ($56) {
       $58 = ((($57)) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $59 ^ -1;
       $61 = $type;
       $62 = $61 & $60;
       $type = $62;
       $63 = $prev;
       $64 = ($63|0)!=(0|0);
       $65 = $next;
       if ($64) {
        $66 = $prev;
        HEAP32[$66>>2] = $65;
       } else {
        HEAP32[(444)>>2] = $65;
       }
       $67 = HEAP32[(448)>>2]|0;
       $68 = $curr;
       HEAP32[$68>>2] = $67;
       $69 = $curr;
       HEAP32[(448)>>2] = $69;
       $70 = $curr;
       $71 = ((($70)) + 4|0);
       $72 = HEAP32[$71>>2]|0;
       switch ($72|0) {
       case 1:  {
        $73 = $curr;
        $74 = ((($73)) + 8|0);
        _SetSegAssumeTable($74);
        $75 = $curr;
        $76 = ((($75)) + 8|0);
        $77 = ((($76)) + 48|0);
        $78 = $curr;
        $79 = ((($78)) + 8|0);
        $80 = ((($79)) + 176|0);
        _SetStdAssumeTable($77,$80);
        break L21;
        break;
       }
       case 2:  {
        $81 = $curr;
        $82 = ((($81)) + 8|0);
        $83 = HEAP8[$82>>0]|0;
        HEAP8[(548)>>0] = $83;
        break L21;
        break;
       }
       case 16:  {
        $84 = $curr;
        $85 = ((($84)) + 8|0);
        $86 = HEAP8[$85>>0]|0;
        HEAP8[(549)>>0] = $86;
        $87 = $curr;
        $88 = ((($87)) + 8|0);
        $89 = ((($88)) + 1|0);
        $90 = HEAP8[$89>>0]|0;
        HEAP8[(551)>>0] = $90;
        break L21;
        break;
       }
       case 4:  {
        $91 = $curr;
        $92 = ((($91)) + 8|0);
        $93 = HEAP32[$92>>2]|0;
        HEAP32[(552)>>2] = $93;
        $94 = $curr;
        $95 = ((($94)) + 8|0);
        $96 = ((($95)) + 4|0);
        $97 = HEAP8[$96>>0]|0;
        $98 = $97 & 1;
        $99 = $98&255;
        $100 = HEAP32[(560)>>2]|0;
        $101 = $99 & 1;
        $102 = $101 << 11;
        $103 = $100 & -2049;
        $104 = $103 | $102;
        HEAP32[(560)>>2] = $104;
        $105 = $curr;
        $106 = ((($105)) + 8|0);
        $107 = ((($106)) + 4|0);
        $108 = HEAP8[$107>>0]|0;
        $109 = ($108&255) >>> 1;
        $110 = $109 & 1;
        $111 = $110&255;
        $112 = HEAP32[(560)>>2]|0;
        $113 = $111 & 1;
        $114 = $113 << 12;
        $115 = $112 & -4097;
        $116 = $115 | $114;
        HEAP32[(560)>>2] = $116;
        $117 = $curr;
        $118 = ((($117)) + 8|0);
        $119 = ((($118)) + 4|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120&255) >>> 2;
        $122 = $121 & 1;
        $123 = $122&255;
        $124 = HEAP32[(560)>>2]|0;
        $125 = $123 & 1;
        $126 = $125 << 13;
        $127 = $124 & -8193;
        $128 = $127 | $126;
        HEAP32[(560)>>2] = $128;
        $129 = $curr;
        $130 = ((($129)) + 8|0);
        $131 = ((($130)) + 4|0);
        $132 = HEAP8[$131>>0]|0;
        $133 = ($132&255) >>> 3;
        $134 = $133 & 1;
        $135 = $134&255;
        $136 = HEAP32[(560)>>2]|0;
        $137 = $135 & 1;
        $138 = $137 << 14;
        $139 = $136 & -16385;
        $140 = $139 | $138;
        HEAP32[(560)>>2] = $140;
        break L21;
        break;
       }
       case 8:  {
        $141 = $curr;
        $142 = ((($141)) + 8|0);
        $143 = HEAP16[$142>>1]|0;
        HEAP16[(540)>>1] = $143;
        $144 = HEAP32[8432>>2]|0;
        $145 = ($144|0)!=(0|0);
        if ($145) {
         $146 = $curr;
         $147 = ((($146)) + 8|0);
         $148 = HEAP16[$147>>1]|0;
         $149 = $148 << 16 >> 16;
         $150 = HEAP32[8432>>2]|0;
         $151 = ((($150)) + 8|0);
         HEAP32[$151>>2] = $149;
        }
        $152 = $curr;
        $153 = ((($152)) + 8|0);
        $154 = ((($153)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        HEAP32[(544)>>2] = $155;
        break L21;
        break;
       }
       default: {
        break L21;
       }
       }
      } else {
       $prev = $57;
      }
     } while(0);
     $156 = $next;
     $curr = $156;
    }
    $157 = $type;
    $158 = ($157|0)!=(0);
    if ($158) {
     label = 30;
     break L1;
    }
   } else {
    $j = 0;
    while(1) {
     $165 = $j;
     $166 = ($165>>>0)<(6);
     $167 = $type;
     $168 = ($167|0)!=(0);
     $169 = $166 ? $168 : 0;
     if (!($169)) {
      break L16;
     }
     $170 = $type;
     $171 = $j;
     $172 = (8356 + ($171<<2)|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $170 & $173;
     $175 = ($174|0)!=(0);
     L43: do {
      if ($175) {
       $176 = $j;
       $177 = (8356 + ($176<<2)|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $178 ^ -1;
       $180 = $type;
       $181 = $180 & $179;
       $type = $181;
       $182 = HEAP32[(448)>>2]|0;
       $183 = ($182|0)!=(0|0);
       if ($183) {
        $184 = HEAP32[(448)>>2]|0;
        $curr = $184;
        $185 = $curr;
        $186 = HEAP32[$185>>2]|0;
        HEAP32[(448)>>2] = $186;
       } else {
        $187 = (_LclAlloc(440)|0);
        $curr = $187;
       }
       $188 = $j;
       $189 = (8356 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = $curr;
       $192 = ((($191)) + 4|0);
       HEAP32[$192>>2] = $190;
       $193 = HEAP32[(444)>>2]|0;
       $194 = $curr;
       HEAP32[$194>>2] = $193;
       $195 = $curr;
       HEAP32[(444)>>2] = $195;
       $196 = $j;
       $197 = (8356 + ($196<<2)|0);
       $198 = HEAP32[$197>>2]|0;
       switch ($198|0) {
       case 1:  {
        $199 = $curr;
        $200 = ((($199)) + 8|0);
        _GetSegAssumeTable($200);
        $201 = $curr;
        $202 = ((($201)) + 8|0);
        $203 = ((($202)) + 48|0);
        $204 = $curr;
        $205 = ((($204)) + 8|0);
        $206 = ((($205)) + 176|0);
        _GetStdAssumeTable($203,$206);
        break L43;
        break;
       }
       case 2:  {
        $207 = HEAP8[(548)>>0]|0;
        $208 = $curr;
        $209 = ((($208)) + 8|0);
        HEAP8[$209>>0] = $207;
        break L43;
        break;
       }
       case 16:  {
        $210 = HEAP8[(549)>>0]|0;
        $211 = $curr;
        $212 = ((($211)) + 8|0);
        HEAP8[$212>>0] = $210;
        $213 = HEAP8[(551)>>0]|0;
        $214 = $curr;
        $215 = ((($214)) + 8|0);
        $216 = ((($215)) + 1|0);
        HEAP8[$216>>0] = $213;
        break L43;
        break;
       }
       case 4:  {
        $217 = HEAP32[(552)>>2]|0;
        $218 = $curr;
        $219 = ((($218)) + 8|0);
        HEAP32[$219>>2] = $217;
        $220 = HEAP32[(560)>>2]|0;
        $221 = $220 >>> 11;
        $222 = $221 & 1;
        $223 = $222&255;
        $224 = $curr;
        $225 = ((($224)) + 8|0);
        $226 = ((($225)) + 4|0);
        $227 = HEAP8[$226>>0]|0;
        $228 = $223 & 1;
        $229 = $227 & -2;
        $230 = $229 | $228;
        HEAP8[$226>>0] = $230;
        $231 = HEAP32[(560)>>2]|0;
        $232 = $231 >>> 12;
        $233 = $232 & 1;
        $234 = $233&255;
        $235 = $curr;
        $236 = ((($235)) + 8|0);
        $237 = ((($236)) + 4|0);
        $238 = HEAP8[$237>>0]|0;
        $239 = $234 & 1;
        $240 = ($239 << 1)&255;
        $241 = $238 & -3;
        $242 = $241 | $240;
        HEAP8[$237>>0] = $242;
        $243 = HEAP32[(560)>>2]|0;
        $244 = $243 >>> 13;
        $245 = $244 & 1;
        $246 = $245&255;
        $247 = $curr;
        $248 = ((($247)) + 8|0);
        $249 = ((($248)) + 4|0);
        $250 = HEAP8[$249>>0]|0;
        $251 = $246 & 1;
        $252 = ($251 << 2)&255;
        $253 = $250 & -5;
        $254 = $253 | $252;
        HEAP8[$249>>0] = $254;
        $255 = HEAP32[(560)>>2]|0;
        $256 = $255 >>> 14;
        $257 = $256 & 1;
        $258 = $257&255;
        $259 = $curr;
        $260 = ((($259)) + 8|0);
        $261 = ((($260)) + 4|0);
        $262 = HEAP8[$261>>0]|0;
        $263 = $258 & 1;
        $264 = ($263 << 3)&255;
        $265 = $262 & -9;
        $266 = $265 | $264;
        HEAP8[$261>>0] = $266;
        break L43;
        break;
       }
       case 8:  {
        $267 = HEAP16[(540)>>1]|0;
        $268 = $curr;
        $269 = ((($268)) + 8|0);
        HEAP16[$269>>1] = $267;
        $270 = HEAP32[(544)>>2]|0;
        $271 = $curr;
        $272 = ((($271)) + 8|0);
        $273 = ((($272)) + 4|0);
        HEAP32[$273>>2] = $270;
        break L43;
        break;
       }
       default: {
        break L43;
       }
       }
      }
     } while(0);
     $274 = $j;
     $275 = (($274) + 1)|0;
     $j = $275;
    }
   }
  } while(0);
  $276 = $1;
  $277 = (($276) + 1)|0;
  $1 = $277;
  $278 = $1;
  $279 = $2;
  $280 = (($279) + ($278<<4)|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = ($282|0)==(44);
  if (!($283)) {
   continue;
  }
  $284 = $1;
  $285 = (($284) + 1)|0;
  $286 = $2;
  $287 = (($286) + ($285<<4)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $288&255;
  $290 = ($289|0)!=(0);
  if (!($290)) {
   continue;
  }
  $291 = $1;
  $292 = (($291) + 1)|0;
  $1 = $292;
 }
 if ((label|0) == 30) {
  $159 = $start;
  $160 = $2;
  $161 = (($160) + ($159<<4)|0);
  $162 = ((($161)) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  HEAP32[$vararg_buffer>>2] = $163;
  $164 = (_EmitErr(142,$vararg_buffer)|0);
  $0 = $164;
  $307 = $0;
  STACKTOP = sp;return ($307|0);
 }
 $293 = $1;
 $294 = $2;
 $295 = (($294) + ($293<<4)|0);
 $296 = HEAP8[$295>>0]|0;
 $297 = $296&255;
 $298 = ($297|0)!=(0);
 $299 = $type;
 $300 = ($299|0)==(-1);
 $or$cond = $298 | $300;
 if ($or$cond) {
  $301 = $1;
  $302 = $2;
  $303 = (($302) + ($301<<4)|0);
  $304 = ((($303)) + 12|0);
  $305 = HEAP32[$304>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $305;
  $306 = (_EmitErr(209,$vararg_buffer2)|0);
  $0 = $306;
  $307 = $0;
  STACKTOP = sp;return ($307|0);
 } else {
  $0 = 0;
  $307 = $0;
  STACKTOP = sp;return ($307|0);
 }
 return (0)|0;
}
function _ContextSaveState() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dst = 0, $i = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 $0 = HEAP32[(444)>>2]|0;
 $src = $0;
 while(1) {
  $1 = $src;
  $2 = ($1|0)!=(0|0);
  $3 = $i;
  if (!($2)) {
   break;
  }
  $4 = (($3) + 1)|0;
  $i = $4;
  $5 = $src;
  $6 = HEAP32[$5>>2]|0;
  $src = $6;
 }
 $7 = ($3|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $i;
 HEAP32[(456)>>2] = $8;
 $9 = $i;
 $10 = ($9*440)|0;
 $11 = (_LclAlloc($10)|0);
 HEAP32[(452)>>2] = $11;
 $12 = HEAP32[(444)>>2]|0;
 $src = $12;
 $13 = HEAP32[(452)>>2]|0;
 $dst = $13;
 while(1) {
  $14 = $src;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $dst;
  $17 = $src;
  _memcpy(($16|0),($17|0),440)|0;
  $18 = $src;
  $19 = HEAP32[$18>>2]|0;
  $src = $19;
  $20 = $dst;
  $21 = ((($20)) + 440|0);
  $dst = $21;
 }
 STACKTOP = sp;return;
}
function _ContextInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 $1 = $0;
 $2 = ($1|0)>(0);
 if ($2) {
  _ContextRestoreState();
 }
 STACKTOP = sp;return;
}
function _ContextRestoreState() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(456)>>2]|0;
 $i = $0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[(448)>>2]|0;
  $4 = ($3|0)!=(0|0);
  if ($4) {
   $5 = HEAP32[(448)>>2]|0;
   $dst = $5;
   $6 = $dst;
   $7 = HEAP32[$6>>2]|0;
   HEAP32[(448)>>2] = $7;
  } else {
   $8 = (_LclAlloc(440)|0);
   $dst = $8;
  }
  $9 = $dst;
  $10 = $i;
  $11 = (($10) - 1)|0;
  $12 = HEAP32[(452)>>2]|0;
  $13 = (($12) + (($11*440)|0)|0);
  _memcpy(($9|0),($13|0),440)|0;
  $14 = HEAP32[(444)>>2]|0;
  $15 = $dst;
  HEAP32[$15>>2] = $14;
  $16 = $dst;
  HEAP32[(444)>>2] = $16;
  $17 = $i;
  $18 = (($17) + -1)|0;
  $i = $18;
 }
 STACKTOP = sp;return;
}
function _ModelDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $distance = 0, $index = 0, $init = 0;
 var $initv = 0, $language = 0, $model = 0, $or$cond = 0, $ostype = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 44|0;
 $language = sp + 32|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = HEAP32[(512)>>2]|0;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  _SetModel();
  $0 = 0;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = $2;
 $11 = (($10) + ($9<<4)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (_EmitError(246)|0);
  $0 = $15;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = $2;
 $18 = (($17) + ($16<<4)|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_FindToken($20,8380,7)|0);
 $index = $21;
 $22 = $index;
 $23 = ($22|0)>=(0);
 if (!($23)) {
  $30 = HEAP32[$1>>2]|0;
  $31 = $2;
  $32 = (($31) + ($30<<4)|0);
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $34;
  $35 = (_EmitErr(209,$vararg_buffer2)|0);
  $0 = $35;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $24 = HEAP32[(512)>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  _EmitWarn(2,95,$vararg_buffer);
 }
 $26 = $index;
 $27 = (($26) + 1)|0;
 $model = $27;
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[$1>>2] = $29;
 $init = 0;
 L16: while(1) {
  $36 = HEAP32[$1>>2]|0;
  $37 = HEAP32[(616)>>2]|0;
  $38 = (($37) - 1)|0;
  $39 = ($36|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = HEAP32[$1>>2]|0;
  $41 = $2;
  $42 = (($41) + ($40<<4)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44|0)==(44);
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$1>>2] = $47;
  $48 = HEAP32[$1>>2]|0;
  $49 = $2;
  $50 = (($49) + ($48<<4)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)!=(44);
  if (!($53)) {
   continue;
  }
  $54 = $2;
  $55 = (_GetLangType($1,$54,$language)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $initv = 1;
  } else {
   $57 = HEAP32[$1>>2]|0;
   $58 = $2;
   $59 = (($58) + ($57<<4)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (_FindToken($61,8440,4)|0);
   $index = $62;
   $63 = $index;
   $64 = ($63|0)<(0);
   if ($64) {
    break;
   }
   $65 = $index;
   $66 = (83466 + ($65<<1)|0);
   $67 = ((($66)) + 1|0);
   $68 = HEAP8[$67>>0]|0;
   $initv = $68;
   $69 = $initv;
   $70 = $69&255;
   switch ($70|0) {
   case 2:  {
    $71 = $model;
    $72 = ($71|0)==(7);
    if ($72) {
     label = 18;
     break L16;
    }
    $74 = $index;
    $75 = (83466 + ($74<<1)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $distance = $77;
    break;
   }
   case 4:  {
    $78 = $index;
    $79 = (83466 + ($78<<1)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $ostype = $81;
    break;
   }
   default: {
   }
   }
   $82 = HEAP32[$1>>2]|0;
   $83 = (($82) + 1)|0;
   HEAP32[$1>>2] = $83;
  }
  $84 = $initv;
  $85 = $84&255;
  $86 = $init;
  $87 = $86&255;
  $88 = $85 & $87;
  $89 = ($88|0)!=(0);
  if ($89) {
   label = 23;
   break;
  }
  $92 = $initv;
  $93 = $92&255;
  $94 = $init;
  $95 = $94&255;
  $96 = $95 | $93;
  $97 = $96&255;
  $init = $97;
 }
 if ((label|0) == 18) {
  $73 = (_EmitError(200)|0);
  $0 = $73;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 23) {
  $90 = HEAP32[$1>>2]|0;
  $91 = (($90) + -1)|0;
  HEAP32[$1>>2] = $91;
 }
 $98 = HEAP32[$1>>2]|0;
 $99 = $2;
 $100 = (($99) + ($98<<4)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = HEAP32[$1>>2]|0;
  $105 = $2;
  $106 = (($105) + ($104<<4)|0);
  $107 = ((($106)) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $108;
  $109 = (_EmitErr(209,$vararg_buffer4)|0);
  $0 = $109;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $110 = $model;
 $111 = ($110|0)==(7);
 L41: do {
  if ($111) {
   $112 = HEAP32[(544)>>2]|0;
   $113 = $112 & 240;
   $114 = ($113>>>0)<(48);
   if ($114) {
    $115 = (_EmitError(30)|0);
    $0 = $115;
    $136 = $0;
    STACKTOP = sp;return ($136|0);
   }
   $116 = HEAP32[(544)>>2]|0;
   $117 = $116 & 240;
   $118 = ($117>>>0)>=(112);
   if ($118) {
    $119 = HEAP32[(6100)>>2]|0;
    switch ($119|0) {
    case 2:  {
     HEAP32[(500)>>2] = 8408;
     break L41;
     break;
    }
    case 3:  {
     HEAP32[(500)>>2] = 8420;
     break L41;
     break;
    }
    default: {
     break L41;
    }
    }
   }
  }
 } while(0);
 $120 = $model;
 HEAP32[(512)>>2] = $120;
 $121 = $init;
 $122 = $121&255;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 if ($124) {
  $125 = HEAP32[$language>>2]|0;
  HEAP32[(516)>>2] = $125;
 }
 $126 = $init;
 $127 = $126&255;
 $128 = $127 & 2;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $distance;
  HEAP32[(508)>>2] = $130;
 }
 $131 = $init;
 $132 = $131&255;
 $133 = $132 & 4;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = $ostype;
  HEAP32[(520)>>2] = $135;
 }
 _SetModelDefaultSegNames();
 _SetModel();
 $0 = 0;
 $136 = $0;
 STACKTOP = sp;return ($136|0);
}
function _SetCPU($newcpu) {
 $newcpu = $newcpu|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $newcpu;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = $0;
  $4 = $3 & 240;
  $5 = ($4|0)!=(0);
  if ($5) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = HEAP32[(544)>>2]|0;
   $7 = $6 & -65529;
   HEAP32[(544)>>2] = $7;
   $8 = $0;
   $9 = $8 & 248;
   $10 = HEAP32[(544)>>2]|0;
   $11 = $10 | $9;
   HEAP32[(544)>>2] = $11;
   $12 = HEAP32[(544)>>2]|0;
   $13 = $12 & 7;
   $14 = ($13|0)!=(1);
   if ($14) {
    $15 = $0;
    $16 = $15 & 7;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[(544)>>2]|0;
     $19 = $18 & -8;
     HEAP32[(544)>>2] = $19;
     $20 = HEAP32[(544)>>2]|0;
     $21 = $20 & 240;
     $22 = ($21>>>0)<(32);
     $23 = HEAP32[(544)>>2]|0;
     if ($22) {
      $24 = $23 | 2;
      HEAP32[(544)>>2] = $24;
      break;
     }
     $25 = $23 & 240;
     $26 = ($25>>>0)<(48);
     $27 = HEAP32[(544)>>2]|0;
     if ($26) {
      $28 = $27 | 3;
      HEAP32[(544)>>2] = $28;
      break;
     } else {
      $29 = $27 | 4;
      HEAP32[(544)>>2] = $29;
      break;
     }
    }
   }
  }
 } while(0);
 $30 = $0;
 $31 = $30 & 7;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = HEAP32[(544)>>2]|0;
  $34 = $33 & -8;
  HEAP32[(544)>>2] = $34;
  $35 = $0;
  $36 = $35 & 7;
  $37 = HEAP32[(544)>>2]|0;
  $38 = $37 | $36;
  HEAP32[(544)>>2] = $38;
 }
 $39 = $0;
 $40 = $39 & 240;
 $41 = ($40|0)==(112);
 if ($41) {
  $42 = HEAP32[(544)>>2]|0;
  $43 = $42 | 65280;
  HEAP32[(544)>>2] = $43;
 }
 $44 = $0;
 $45 = $44 & 65280;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP32[(544)>>2]|0;
  $48 = $47 & -65281;
  HEAP32[(544)>>2] = $48;
  $49 = $0;
  $50 = $49 & 65280;
  $51 = HEAP32[(544)>>2]|0;
  $52 = $51 | $50;
  HEAP32[(544)>>2] = $52;
 }
 $53 = HEAP32[(544)>>2]|0;
 $54 = $53 & 240;
 $temp = $54;
 $55 = $temp;
 switch ($55|0) {
 case 16:  {
  HEAP16[(540)>>1] = 3;
  break;
 }
 case 32:  {
  HEAP16[(540)>>1] = 7;
  break;
 }
 case 48:  {
  HEAP16[(540)>>1] = 15;
  break;
 }
 case 64:  {
  HEAP16[(540)>>1] = 31;
  break;
 }
 case 80:  {
  HEAP16[(540)>>1] = 63;
  break;
 }
 case 96: case 112:  {
  HEAP16[(540)>>1] = 95;
  break;
 }
 default: {
  HEAP16[(540)>>1] = 1;
 }
 }
 $56 = HEAP32[(544)>>2]|0;
 $57 = $56 & 8;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = HEAP16[(540)>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $60 | 128;
  $62 = $61&65535;
  HEAP16[(540)>>1] = $62;
 }
 $63 = HEAP32[(544)>>2]|0;
 $64 = $63 & 7;
 $temp = $64;
 $65 = $temp;
 switch ($65|0) {
 case 2:  {
  $66 = HEAP16[(540)>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = $67 | 256;
  $69 = $68&65535;
  HEAP16[(540)>>1] = $69;
  break;
 }
 case 3:  {
  $70 = HEAP16[(540)>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = $71 | 256;
  $73 = $72 | 1024;
  $74 = $73&65535;
  HEAP16[(540)>>1] = $74;
  break;
 }
 case 4:  {
  $75 = HEAP16[(540)>>1]|0;
  $76 = $75 << 16 >> 16;
  $77 = $76 | 256;
  $78 = $77 | 1024;
  $79 = $78 | 2048;
  $80 = $79&65535;
  HEAP16[(540)>>1] = $80;
  break;
 }
 default: {
 }
 }
 $81 = HEAP32[(512)>>2]|0;
 $82 = ($81|0)==(0);
 if (!($82)) {
  $90 = HEAP16[(540)>>1]|0;
  $91 = $90 << 16 >> 16;
  $92 = (_CreateVariable(83474,$91)|0);
  HEAP32[8432>>2] = $92;
  STACKTOP = sp;return 0;
 }
 $83 = HEAP32[(544)>>2]|0;
 $84 = $83 & 240;
 $85 = ($84>>>0)>=(112);
 if ($85) {
  (_SetDefaultOfssize(2)|0);
  $90 = HEAP16[(540)>>1]|0;
  $91 = $90 << 16 >> 16;
  $92 = (_CreateVariable(83474,$91)|0);
  HEAP32[8432>>2] = $92;
  STACKTOP = sp;return 0;
 } else {
  $86 = HEAP32[(544)>>2]|0;
  $87 = $86 & 240;
  $88 = ($87>>>0)>=(48);
  $89 = $88 ? 1 : 0;
  (_SetDefaultOfssize($89)|0);
  $90 = HEAP16[(540)>>1]|0;
  $91 = $90 << 16 >> 16;
  $92 = (_CreateVariable(83474,$91)|0);
  HEAP32[8432>>2] = $92;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _CpuDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newcpu = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (15660 + (($7*12)|0)|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $newcpu = $10;
 $11 = $1;
 $12 = (($11) + 1)|0;
 $1 = $12;
 $13 = $1;
 $14 = $2;
 $15 = (($14) + ($13<<4)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $1;
  $20 = $2;
  $21 = (($20) + ($19<<4)|0);
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $24 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $24;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 } else {
  $25 = $newcpu;
  $26 = (_SetCPU($25)|0);
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _SetModel() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $textvalue = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(512)>>2]|0;
 $1 = ($0|0)==(7);
 if ($1) {
  HEAP32[(536)>>2] = 1;
  $2 = HEAP32[(544)>>2]|0;
  $3 = $2 & 240;
  $4 = ($3>>>0)>=(112);
  $5 = $4 ? 2 : 1;
  (_SetDefaultOfssize($5)|0);
  $6 = HEAP32[(544)>>2]|0;
  $7 = $6 & 240;
  $8 = ($7|0)==(112);
  $9 = HEAP32[(516)>>2]|0;
  $10 = ($9|0)==(7);
  $or$cond3 = $8 & $10;
  $11 = HEAP32[(6100)>>2]|0;
  $12 = ($11|0)!=(3);
  $or$cond5 = $or$cond3 & $12;
  if ($or$cond5) {
   HEAP32[(528)>>2] = 2;
  }
  _DefineFlatGroup();
 } else {
  HEAP32[(536)>>2] = 0;
 }
 $13 = HEAP32[(512)>>2]|0;
 (_ModelSimSegmInit($13)|0);
 _ModelAssumeInit();
 $14 = HEAP32[(560)>>2]|0;
 $15 = $14 >>> 11;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  _LstWriteSrcLine();
 }
 _RunLineQueue();
 $18 = HEAP32[4884>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[(512)>>2]|0;
 $21 = 1 << $20;
 $22 = 112 & $21;
 $23 = ($22|0)!=(0);
 if ($23) {
  $value = 1;
 } else {
  $value = 0;
 }
 $24 = $value;
 $25 = (_AddPredefinedConstant(83549,$24)|0);
 HEAP32[8456>>2] = $25;
 $26 = (_SimGetSegName(0)|0);
 (_AddPredefinedText(83559,$26)|0);
 $27 = HEAP32[(512)>>2]|0;
 switch ($27|0) {
 case 5: case 3:  {
  $value = 1;
  break;
 }
 case 6:  {
  $value = 2;
  break;
 }
 default: {
  $value = 0;
 }
 }
 $28 = $value;
 $29 = (_AddPredefinedConstant(83565,$28)|0);
 HEAP32[8460>>2] = $29;
 $30 = HEAP32[(512)>>2]|0;
 $31 = ($30|0)==(7);
 $32 = $31 ? 109458 : 81669;
 $textvalue = $32;
 $33 = $textvalue;
 (_AddPredefinedText(83575,$33)|0);
 $34 = HEAP32[(508)>>2]|0;
 $35 = ($34|0)==(1);
 if ($35) {
  $textvalue = 109523;
 }
 $36 = $textvalue;
 (_AddPredefinedText(83581,$36)|0);
 $37 = HEAP32[(512)>>2]|0;
 $38 = (_AddPredefinedConstant(83588,$37)|0);
 HEAP32[8464>>2] = $38;
 $39 = HEAP32[(516)>>2]|0;
 $40 = (_AddPredefinedConstant(83595,$39)|0);
 HEAP32[8436>>2] = $40;
 $41 = HEAP8[(557)>>0]|0;
 $42 = $41&255;
 $43 = ($42|0)==(2);
 $44 = HEAP32[(528)>>2]|0;
 $45 = ($44|0)==(2);
 $or$cond = $43 & $45;
 if ($or$cond) {
  $46 = (_AddPredefinedConstant(83606,0)|0);
  HEAP32[15504>>2] = $46;
 }
 $47 = HEAP32[(524)>>2]|0;
 $48 = ($47|0)==(2);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _pe_create_PE_header();
 STACKTOP = sp;return;
}
function _FindToken($token,$table,$size) {
 $token = $token|0;
 $table = $table|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $token;
 $2 = $table;
 $3 = $size;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (_strcasecmp($8,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $i;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $i = $13;
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $2 = $15;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _SetDefaultOfssize($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = HEAP32[(584)>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = $0;
  $4 = $3&255;
  HEAP8[(557)>>0] = $4;
 }
 $5 = (_SetOfssize()|0);
 STACKTOP = sp;return ($5|0);
}
function _AddPredefinedConstant($name,$value) {
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = (_CreateVariable($2,$3)|0);
 $sym = $4;
 $5 = $sym;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $12 = $sym;
  STACKTOP = sp;return ($12|0);
 }
 $7 = $sym;
 $8 = ((($7)) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -33;
 $11 = $10 | 32;
 HEAP16[$8>>1] = $11;
 $12 = $sym;
 STACKTOP = sp;return ($12|0);
}
function _data_dir($i,$tokenarray,$type_sym) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $type_sym = $type_sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $currofs = 0, $idx = 0, $is_float = 0, $mem_type = 0, $name = 0, $no_of_bytes = 0, $old_offset = 0, $or$cond = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 96|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = $type_sym;
 $sym = 0;
 $is_float = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)>(1);
 if ($5) {
  $6 = HEAP32[(560)>>2]|0;
  $7 = $6 >>> 6;
  $8 = $7 & 1;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   $11 = $2;
   $12 = (($11) + ($10<<4)|0);
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $15 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $15;
   $360 = $0;
   STACKTOP = sp;return ($360|0);
  }
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = $2;
 $19 = (($18) + ($17<<4)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$1>>2]|0;
  $24 = $2;
  $25 = (($24) + ($23<<4)|0);
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $27;
  $28 = (_EmitErr(209,$vararg_buffer2)|0);
  $0 = $28;
  $360 = $0;
  STACKTOP = sp;return ($360|0);
 }
 $29 = $3;
 $30 = ($29|0)!=(0|0);
 do {
  if ($30) {
   $mem_type = 196;
   $31 = $3;
   $32 = ((($31)) + 40|0);
   $33 = ((($32)) + 2|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)!=(3);
   do {
    if ($36) {
     $37 = $3;
     $38 = ((($37)) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      $41 = $3;
      $42 = ((($41)) + 60|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($43)) + 9|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = ($45&255) >>> 2;
      $47 = $46 & 1;
      $48 = $47&255;
      $49 = ($48|0)==(1);
      if (!($49)) {
       break;
      }
     }
     $50 = (_EmitError(215)|0);
     $0 = $50;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
   } while(0);
   $51 = HEAP32[4884>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    label = 13;
   } else {
    $53 = HEAP8[87036>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)==(0);
    if ($55) {
     label = 13;
    }
   }
   if ((label|0) == 13) {
    $56 = HEAP32[$1>>2]|0;
    $57 = (($56) + 1)|0;
    $58 = $2;
    _ExpandLiterals($57,$58);
   }
   $59 = $3;
   $60 = ((($59)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $no_of_bytes = $61;
   $62 = $no_of_bytes;
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = $3;
    $65 = ((($64)) + 40|0);
    $66 = ((($65)) + 2|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = ($68|0)==(3);
    if ($69) {
     $70 = $3;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $72;
     $73 = (_EmitErr(160,$vararg_buffer5)|0);
     $0 = $73;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
   }
  } else {
   $74 = HEAP32[$1>>2]|0;
   $75 = $2;
   $76 = (($75) + ($74<<4)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = ($78|0)==(6);
   $80 = HEAP32[$1>>2]|0;
   $81 = $2;
   $82 = (($81) + ($80<<4)|0);
   do {
    if ($79) {
     $83 = ((($82)) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $idx = $84;
    } else {
     $85 = HEAP8[$82>>0]|0;
     $86 = $85&255;
     $87 = ($86|0)==(3);
     if ($87) {
      $88 = HEAP32[$1>>2]|0;
      $89 = $2;
      $90 = (($89) + ($88<<4)|0);
      $91 = ((($90)) + 1|0);
      $92 = HEAP8[$91>>0]|0;
      $93 = $92&255;
      $94 = ($93|0)==(8);
      if ($94) {
       $95 = HEAP32[$1>>2]|0;
       $96 = $2;
       $97 = (($96) + ($95<<4)|0);
       $98 = ((($97)) + 8|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (15660 + (($99*12)|0)|0);
       $101 = ((($100)) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       $idx = $102;
       break;
      }
     }
     $103 = HEAP32[$1>>2]|0;
     $104 = $2;
     $105 = (($104) + ($103<<4)|0);
     $106 = ((($105)) + 4|0);
     $107 = HEAP32[$106>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $107;
     $108 = (_EmitErr(160,$vararg_buffer8)|0);
     $0 = $108;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
   } while(0);
   $109 = $idx;
   $110 = (15660 + (($109*12)|0)|0);
   $111 = ((($110)) + 10|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $mem_type = $113;
   $114 = $mem_type;
   $115 = $114 & 192;
   $116 = ($115|0)==(128);
   if ($116) {
    $117 = HEAP32[$1>>2]|0;
    $118 = $2;
    $119 = (($118) + ($117<<4)|0);
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $121;
    $122 = (_EmitErr(209,$vararg_buffer11)|0);
    $0 = $122;
    $360 = $0;
    STACKTOP = sp;return ($360|0);
   } else {
    $123 = $mem_type;
    $124 = $123 & 31;
    $125 = (($124) + 1)|0;
    $no_of_bytes = $125;
    $126 = $mem_type;
    $127 = $126 & 32;
    $128 = ($127|0)!=(0);
    if (!($128)) {
     break;
    }
    $is_float = 1;
    break;
   }
  }
 } while(0);
 $129 = HEAP32[$1>>2]|0;
 $130 = ($129|0)==(1);
 if ($130) {
  $131 = $2;
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $133;
 } else {
  $134 = 0;
 }
 $name = $134;
 $135 = HEAP32[66812>>2]|0;
 $136 = ($135|0)!=(0|0);
 do {
  if ($136) {
   $137 = HEAP32[4884>>2]|0;
   $138 = ($137|0)==(0);
   if (!($138)) {
    $160 = HEAP32[66812>>2]|0;
    $161 = ((($160)) + 60|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($162)) + 4|0);
    $164 = HEAP32[$163>>2]|0;
    $sym = $164;
    $165 = $sym;
    $166 = ((($165)) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $currofs = $167;
    $168 = HEAP32[66812>>2]|0;
    $169 = ((($168)) + 60|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ((($170)) + 4|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ((($172)) + 60|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = HEAP32[66812>>2]|0;
    $176 = ((($175)) + 60|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ((($177)) + 4|0);
    HEAP32[$178>>2] = $174;
    break;
   }
   $139 = HEAP32[$1>>2]|0;
   $140 = $2;
   $141 = $name;
   $142 = $mem_type;
   $143 = $3;
   $144 = $no_of_bytes;
   $145 = (_CreateStructField($139,$140,$141,$142,$143,$144)|0);
   $sym = $145;
   $146 = ($145|0)!=(0|0);
   if (!($146)) {
    $0 = -1;
    $360 = $0;
    STACKTOP = sp;return ($360|0);
   }
   $147 = HEAP8[87035>>0]|0;
   $148 = ($147<<24>>24)!=(0);
   $149 = HEAP32[4884>>2]|0;
   $150 = ($149|0)==(0);
   $or$cond = $148 & $150;
   if ($or$cond) {
    $151 = HEAP32[(600)>>2]|0;
    _StoreLine($151,0,0);
   }
   $152 = $sym;
   $153 = ((($152)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   $currofs = $154;
   $155 = $sym;
   $156 = ((($155)) + 24|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 & -1025;
   $159 = $158 | 1024;
   HEAP16[$156>>1] = $159;
  } else {
   $179 = HEAP32[(584)>>2]|0;
   $180 = ($179|0)==(0|0);
   if ($180) {
    $181 = (_EmitError(82)|0);
    $0 = $181;
    $360 = $0;
    STACKTOP = sp;return ($360|0);
   }
   $182 = HEAP32[4884>>2]|0;
   $183 = ($182|0)==(0);
   if ($183) {
    $184 = HEAP32[(600)>>2]|0;
    _StoreLine($184,0,0);
   }
   $185 = HEAP8[(575)>>0]|0;
   $186 = ($185<<24>>24)!=(0);
   if ($186) {
    _omf_OutSelect(1);
   }
   $187 = HEAP32[(560)>>2]|0;
   $188 = $187 >>> 11;
   $189 = $188 & 1;
   $190 = ($189|0)!=(0);
   if ($190) {
    $191 = (_GetCurrOffset()|0);
    $currofs = $191;
   }
   $192 = $name;
   $193 = ($192|0)!=(0|0);
   if ($193) {
    $194 = $name;
    $195 = (_SymLookup($194)|0);
    $sym = $195;
    $196 = HEAP32[4884>>2]|0;
    $197 = ($196|0)==(0);
    $198 = $sym;
    L74: do {
     if ($197) {
      $199 = ((($198)) + 16|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($200|0)==(2);
      if ($201) {
       $202 = $sym;
       $203 = ((($202)) + 28|0);
       $204 = ((($203)) + 3|0);
       $205 = HEAP8[$204>>0]|0;
       $206 = ($205&255) >>> 3;
       $207 = $206 & 1;
       $208 = $207&255;
       $209 = ($208|0)==(1);
       if ($209) {
        $210 = $sym;
        $211 = ((($210)) + 24|0);
        $212 = HEAP16[$211>>1]|0;
        $213 = ($212&65535) >>> 11;
        $214 = $213 & 1;
        $215 = $214&255;
        $216 = $215&255;
        $217 = ($216|0)==(0);
        if ($217) {
         $218 = $sym;
         $219 = $mem_type;
         $220 = $3;
         (_checktypes($218,$219,$220)|0);
         $221 = $sym;
         _sym_ext2int($221);
         $222 = $sym;
         $223 = ((($222)) + 36|0);
         HEAP32[$223>>2] = 0;
         $224 = $sym;
         $225 = ((($224)) + 40|0);
         HEAP32[$225>>2] = 0;
         $226 = $sym;
         $227 = ((($226)) + 32|0);
         HEAP32[$227>>2] = 0;
        } else {
         label = 51;
        }
       } else {
        label = 51;
       }
      } else {
       label = 51;
      }
      do {
       if ((label|0) == 51) {
        $228 = $sym;
        $229 = ((($228)) + 16|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ($230|0)==(0);
        $232 = $sym;
        if ($231) {
         _sym_remove_table(15404,$232);
         $233 = $sym;
         $234 = ((($233)) + 16|0);
         HEAP32[$234>>2] = 1;
         $235 = $sym;
         $236 = ((($235)) + 48|0);
         $237 = HEAP32[$236>>2]|0;
         $238 = ($237|0)==(0);
         if (!($238)) {
          break;
         }
         $239 = HEAP32[(516)>>2]|0;
         $240 = $sym;
         $241 = ((($240)) + 48|0);
         HEAP32[$241>>2] = $239;
         break;
        }
        $242 = ((($232)) + 16|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ($243|0)==(1);
        $245 = $sym;
        if (!($244)) {
         $266 = ((($245)) + 4|0);
         $267 = HEAP32[$266>>2]|0;
         HEAP32[$vararg_buffer17>>2] = $267;
         $268 = (_EmitErr(143,$vararg_buffer17)|0);
         $0 = $268;
         $360 = $0;
         STACKTOP = sp;return ($360|0);
        }
        $246 = ((($245)) + 12|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = HEAP32[(584)>>2]|0;
        $249 = ($247|0)!=($248|0);
        do {
         if (!($249)) {
          $250 = $sym;
          $251 = ((($250)) + 8|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = (_GetCurrOffset()|0);
          $254 = ($252|0)!=($253|0);
          if ($254) {
           break;
          }
          $257 = $sym;
          $258 = $mem_type;
          $259 = $3;
          $260 = (_checktypes($257,$258,$259)|0);
          $261 = ($260|0)==(-1);
          if (!($261)) {
           $262 = $sym;
           $263 = ((($262)) + 36|0);
           HEAP32[$263>>2] = 0;
           $264 = $sym;
           $265 = ((($264)) + 40|0);
           HEAP32[$265>>2] = 0;
           break L74;
          }
          $0 = -1;
          $360 = $0;
          STACKTOP = sp;return ($360|0);
         }
        } while(0);
        $255 = $name;
        HEAP32[$vararg_buffer14>>2] = $255;
        $256 = (_EmitErr(56,$vararg_buffer14)|0);
        $0 = $256;
        $360 = $0;
        STACKTOP = sp;return ($360|0);
       }
      } while(0);
      $269 = HEAP32[(584)>>2]|0;
      $270 = ((($269)) + 60|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ((($271)) + 20|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = $sym;
      $275 = ((($274)) + 64|0);
      HEAP32[$275>>2] = $273;
      $276 = $sym;
      $277 = HEAP32[(584)>>2]|0;
      $278 = ((($277)) + 60|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = ((($279)) + 20|0);
      HEAP32[$280>>2] = $276;
     } else {
      $281 = ((($198)) + 8|0);
      $282 = HEAP32[$281>>2]|0;
      $old_offset = $282;
     }
    } while(0);
    $283 = $sym;
    _SetSymSegOfs($283);
    $284 = HEAP32[4884>>2]|0;
    $285 = ($284|0)!=(0);
    if ($285) {
     $286 = $sym;
     $287 = ((($286)) + 8|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $old_offset;
     $290 = ($288|0)!=($289|0);
     if ($290) {
      HEAP8[(574)>>0] = 1;
     }
    }
    $291 = $sym;
    $292 = ((($291)) + 24|0);
    $293 = HEAP16[$292>>1]|0;
    $294 = $293 & -3;
    $295 = $294 | 2;
    HEAP16[$292>>1] = $295;
    $296 = $sym;
    $297 = ((($296)) + 24|0);
    $298 = HEAP16[$297>>1]|0;
    $299 = $298 & -1025;
    $300 = $299 | 1024;
    HEAP16[$297>>1] = $300;
    $301 = $mem_type;
    $302 = $sym;
    $303 = ((($302)) + 20|0);
    HEAP32[$303>>2] = $301;
    $304 = $3;
    $305 = $sym;
    $306 = ((($305)) + 52|0);
    HEAP32[$306>>2] = $304;
    $307 = $sym;
    (_BackPatch($307)|0);
   }
   $308 = $3;
   $309 = ($308|0)!=(0|0);
   if ($309) {
    while(1) {
     $310 = $3;
     $311 = ((($310)) + 20|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = ($312|0)==(196);
     $314 = $3;
     if (!($313)) {
      break;
     }
     $315 = ((($314)) + 52|0);
     $316 = HEAP32[$315>>2]|0;
     $3 = $316;
    }
    $317 = ((($314)) + 40|0);
    $318 = ((($317)) + 2|0);
    $319 = HEAP8[$318>>0]|0;
    $320 = $319&255;
    $321 = ($320|0)==(3);
    if ($321) {
     $3 = 0;
    }
   }
  }
 } while(0);
 $322 = HEAP32[$1>>2]|0;
 $323 = (($322) + 1)|0;
 HEAP32[$1>>2] = $323;
 $324 = $2;
 $325 = $sym;
 $326 = $no_of_bytes;
 $327 = $3;
 $328 = HEAP32[66812>>2]|0;
 $329 = ($328|0)!=(0|0);
 $330 = $329&1;
 $331 = $330&255;
 $332 = $is_float;
 $333 = HEAP32[(616)>>2]|0;
 $334 = (_data_item($1,$324,$325,$326,$327,1,$331,$332,1,$333)|0);
 $335 = ($334|0)==(-1);
 if ($335) {
  $0 = -1;
  $360 = $0;
  STACKTOP = sp;return ($360|0);
 }
 $336 = HEAP32[$1>>2]|0;
 $337 = $2;
 $338 = (($337) + ($336<<4)|0);
 $339 = HEAP8[$338>>0]|0;
 $340 = $339&255;
 $341 = ($340|0)!=(0);
 if ($341) {
  $342 = HEAP32[$1>>2]|0;
  $343 = $2;
  $344 = (($343) + ($342<<4)|0);
  $345 = ((($344)) + 12|0);
  $346 = HEAP32[$345>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $346;
  $347 = (_EmitErr(209,$vararg_buffer20)|0);
  $0 = $347;
  $360 = $0;
  STACKTOP = sp;return ($360|0);
 }
 $348 = HEAP32[66812>>2]|0;
 $349 = ($348|0)!=(0|0);
 if ($349) {
  $350 = $sym;
  _UpdateStructSize($350);
 }
 $351 = HEAP32[(560)>>2]|0;
 $352 = $351 >>> 11;
 $353 = $352 & 1;
 $354 = ($353|0)!=(0);
 if ($354) {
  $355 = HEAP32[66812>>2]|0;
  $356 = ($355|0)!=(0|0);
  $357 = $356 ? 6 : 0;
  $358 = $currofs;
  $359 = $sym;
  _LstWrite($357,$358,$359);
 }
 $0 = 0;
 $360 = $0;
 STACKTOP = sp;return ($360|0);
}
function _checktypes($sym,$mem_type,$type_sym) {
 $sym = $sym|0;
 $mem_type = $mem_type|0;
 $type_sym = $type_sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem_type2 = 0, $tmp = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $sym;
 $2 = $mem_type;
 $3 = $type_sym;
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(192);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $mem_type2 = $10;
  $11 = $3;
  $tmp = $11;
  while(1) {
   $12 = $2;
   $13 = ($12|0)==(196);
   if (!($13)) {
    break;
   }
   $14 = $tmp;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $2 = $16;
   $17 = $tmp;
   $18 = ((($17)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $tmp = $19;
  }
  $20 = $1;
  $tmp = $20;
  while(1) {
   $21 = $mem_type2;
   $22 = ($21|0)==(196);
   if (!($22)) {
    break;
   }
   $23 = $tmp;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $mem_type2 = $25;
   $26 = $tmp;
   $27 = ((($26)) + 52|0);
   $28 = HEAP32[$27>>2]|0;
   $tmp = $28;
  }
  $29 = $mem_type2;
  $30 = $2;
  $31 = ($29|0)!=($30|0);
  if ($31) {
   $32 = $1;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$vararg_buffer>>2] = $34;
   $35 = (_EmitErr(136,$vararg_buffer)|0);
   $0 = $35;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
 }
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _data_item($start_pos,$tokenarray,$sym,$no_of_bytes,$type_sym,$dup,$inside_struct,$is_float,$first,$end) {
 $start_pos = $start_pos|0;
 $tokenarray = $tokenarray|0;
 $sym = $sym|0;
 $no_of_bytes = $no_of_bytes|0;
 $type_sym = $type_sym|0;
 $dup = $dup|0;
 $inside_struct = $inside_struct|0;
 $is_float = $is_float|0;
 $first = $first|0;
 $end = $end|0;
 var $$old = 0, $$old20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fixup = 0, $fixup_type = 0, $i = 0, $initwarn = 0, $level = 0, $opndx = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pchar = 0, $string_len = 0, $tmp = 0, $tmp1 = 0, $total = 0, $vararg_buffer = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_ptr64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer61 = sp + 184|0;
 $vararg_buffer58 = sp + 176|0;
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer52 = sp + 160|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer43 = sp + 136|0;
 $vararg_buffer40 = sp + 128|0;
 $vararg_buffer37 = sp + 120|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $i = sp + 220|0;
 $opndx = sp;
 $1 = $start_pos;
 $2 = $tokenarray;
 $3 = $sym;
 $4 = $no_of_bytes;
 $5 = $type_sym;
 $6 = $dup;
 $7 = $inside_struct;
 $8 = $is_float;
 $9 = $first;
 $10 = $end;
 $total = 0;
 $initwarn = 0;
 L1: while(1) {
  $11 = $6;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 250;
   break;
  }
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$i>>2] = $14;
  while(1) {
   $15 = HEAP32[$i>>2]|0;
   $16 = $2;
   $17 = (($16) + ($15<<4)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)==(9);
   do {
    if ($20) {
     $21 = HEAP32[$i>>2]|0;
     $22 = $2;
     $23 = (($22) + ($21<<4)|0);
     $24 = ((($23)) + 1|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = ($26|0)==(60);
     if ($27) {
      $$old = $5;
      $$old20 = ($$old|0)!=(0|0);
      if (!($$old20)) {
       label = 16;
       break;
      }
     } else {
      $28 = HEAP32[$i>>2]|0;
      $29 = $2;
      $30 = (($29) + ($28<<4)|0);
      $31 = ((($30)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32 << 24 >> 24;
      $34 = ($33|0)==(123);
      $35 = $5;
      $36 = ($35|0)!=(0|0);
      $or$cond21 = $34 & $36;
      if (!($or$cond21)) {
       label = 16;
       break;
      }
     }
     while(1) {
      $37 = $5;
      $38 = ((($37)) + 52|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)!=(0|0);
      if (!($40)) {
       break;
      }
      $41 = $5;
      $42 = ((($41)) + 52|0);
      $43 = HEAP32[$42>>2]|0;
      $5 = $43;
     }
     $44 = $7;
     $45 = $44&255;
     $46 = ($45|0)==(0);
     if ($46) {
      $47 = HEAP32[$i>>2]|0;
      $48 = $2;
      $49 = $5;
      $50 = (_InitStructuredVar($47,$48,$49,0)|0);
      $51 = ($50|0)==(-1);
      if ($51) {
       label = 12;
       break L1;
      }
     } else {
      $52 = $5;
      $53 = ((($52)) + 40|0);
      $54 = ((($53)) + 2|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = ($56|0)==(3);
      $58 = HEAP32[4884>>2]|0;
      $59 = ($58|0)==(0);
      $or$cond = $57 & $59;
      if ($or$cond) {
       $60 = HEAP32[$i>>2]|0;
       $61 = $2;
       $62 = (($61) + ($60<<4)|0);
       $63 = ((($62)) + 12|0);
       $64 = HEAP32[$63>>2]|0;
       HEAP32[$vararg_buffer>>2] = $64;
       _EmitWarn(2,151,$vararg_buffer);
      }
     }
     $65 = $total;
     $66 = (($65) + 1)|0;
     $total = $66;
     $67 = HEAP32[$i>>2]|0;
     $68 = (($67) + 1)|0;
     HEAP32[$i>>2] = $68;
    } else {
     label = 16;
    }
   } while(0);
   L20: do {
    if ((label|0) == 16) {
     label = 0;
     $69 = HEAP32[$i>>2]|0;
     $70 = $2;
     $71 = (($70) + ($69<<4)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = ($73|0)==(63);
     if ($74) {
      $75 = ((($opndx)) + 40|0);
      HEAP32[$75>>2] = -2;
     } else {
      $76 = $2;
      $77 = $10;
      $78 = (_EvalOperand($i,$76,$77,$opndx,0)|0);
      $79 = ($78|0)==(-1);
      if ($79) {
       label = 19;
       break L1;
      }
     }
     $80 = HEAP32[$i>>2]|0;
     $81 = $2;
     $82 = (($81) + ($80<<4)|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = ($84|0)==(7);
     if ($85) {
      $86 = HEAP32[$i>>2]|0;
      $87 = $2;
      $88 = (($87) + ($86<<4)|0);
      $89 = ((($88)) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==(185);
      if ($91) {
       $92 = ((($opndx)) + 40|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)!=(0);
       if ($94) {
        label = 23;
        break L1;
       }
       $107 = HEAP32[$opndx>>2]|0;
       $108 = ($107|0)<(0);
       if ($108) {
        label = 29;
        break L1;
       }
       $110 = HEAP32[$i>>2]|0;
       $111 = (($110) + 1)|0;
       HEAP32[$i>>2] = $111;
       $112 = HEAP32[$i>>2]|0;
       $113 = $2;
       $114 = (($113) + ($112<<4)|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = $115&255;
       $117 = ($116|0)!=(40);
       if ($117) {
        label = 31;
        break L1;
       }
       $119 = HEAP32[$i>>2]|0;
       $120 = (($119) + 1)|0;
       HEAP32[$i>>2] = $120;
       $121 = $3;
       $122 = ($121|0)!=(0|0);
       if ($122) {
        $123 = $3;
        $124 = ((($123)) + 24|0);
        $125 = HEAP16[$124>>1]|0;
        $126 = $125 & -513;
        $127 = $126 | 512;
        HEAP16[$124>>1] = $127;
       }
       $128 = HEAP32[$opndx>>2]|0;
       $129 = ($128|0)==(0);
       L35: do {
        if ($129) {
         $level = 1;
         while(1) {
          $130 = HEAP32[$i>>2]|0;
          $131 = $2;
          $132 = (($131) + ($130<<4)|0);
          $133 = HEAP8[$132>>0]|0;
          $134 = $133&255;
          $135 = ($134|0)!=(0);
          if (!($135)) {
           break L35;
          }
          $136 = HEAP32[$i>>2]|0;
          $137 = $2;
          $138 = (($137) + ($136<<4)|0);
          $139 = HEAP8[$138>>0]|0;
          $140 = $139&255;
          $141 = ($140|0)==(40);
          if ($141) {
           $142 = $level;
           $143 = (($142) + 1)|0;
           $level = $143;
          } else {
           $144 = HEAP32[$i>>2]|0;
           $145 = $2;
           $146 = (($145) + ($144<<4)|0);
           $147 = HEAP8[$146>>0]|0;
           $148 = $147&255;
           $149 = ($148|0)==(41);
           if ($149) {
            $150 = $level;
            $151 = (($150) + -1)|0;
            $level = $151;
           }
          }
          $152 = $level;
          $153 = ($152|0)==(0);
          if ($153) {
           break L35;
          }
          $154 = HEAP32[$i>>2]|0;
          $155 = (($154) + 1)|0;
          HEAP32[$i>>2] = $155;
         }
        } else {
         $156 = $2;
         $157 = $3;
         $158 = $4;
         $159 = $5;
         $160 = HEAP32[$opndx>>2]|0;
         $161 = $7;
         $162 = $8;
         $163 = $9;
         $164 = $10;
         $165 = (_data_item($i,$156,$157,$158,$159,$160,$161,$162,$163,$164)|0);
         $166 = ($165|0)==(-1);
         if ($166) {
          label = 44;
          break L1;
         }
        }
       } while(0);
       $167 = HEAP32[$i>>2]|0;
       $168 = $2;
       $169 = (($168) + ($167<<4)|0);
       $170 = HEAP8[$169>>0]|0;
       $171 = $170&255;
       $172 = ($171|0)!=(41);
       if ($172) {
        label = 46;
        break L1;
       }
       $174 = $3;
       $175 = ($174|0)!=(0|0);
       if ($175) {
        $176 = $9;
        $177 = $176&255;
        $178 = ($177|0)!=(0);
        $179 = HEAP32[4884>>2]|0;
        $180 = ($179|0)==(0);
        $or$cond3 = $178 & $180;
        if ($or$cond3) {
         $181 = HEAP32[$opndx>>2]|0;
         $182 = $4;
         $183 = Math_imul($181, $182)|0;
         $184 = $3;
         $185 = ((($184)) + 28|0);
         HEAP32[$185>>2] = $183;
         $186 = HEAP32[$opndx>>2]|0;
         $187 = $3;
         $188 = ((($187)) + 32|0);
         HEAP32[$188>>2] = $186;
         $9 = 0;
        }
       }
       $189 = HEAP32[$i>>2]|0;
       $190 = (($189) + 1)|0;
       HEAP32[$i>>2] = $190;
       break;
      }
     }
     $191 = $5;
     $192 = ($191|0)!=(0|0);
     if ($192) {
      $193 = $5;
      $tmp1 = $193;
      while(1) {
       $194 = $tmp1;
       $195 = ((($194)) + 52|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = ($196|0)!=(0|0);
       $198 = $tmp1;
       if (!($197)) {
        break;
       }
       $199 = ((($198)) + 52|0);
       $200 = HEAP32[$199>>2]|0;
       $tmp1 = $200;
      }
      $201 = ((($198)) + 40|0);
      $202 = ((($201)) + 2|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = $203&255;
      $205 = ($204|0)!=(3);
      if ($205) {
       label = 56;
       break L1;
      }
     }
     $210 = ((($opndx)) + 40|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(-2);
     if ($212) {
      $213 = HEAP32[$i>>2]|0;
      $214 = $2;
      $215 = (($214) + ($213<<4)|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = ($217|0)==(63);
      if ($218) {
       $219 = $4;
       HEAP32[$opndx>>2] = $219;
       $220 = HEAP32[$i>>2]|0;
       $221 = (($220) + 1)|0;
       $222 = $2;
       $223 = (($222) + ($221<<4)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = $224&255;
       $226 = ($225|0)!=(44);
       if ($226) {
        $227 = HEAP32[$i>>2]|0;
        $228 = $1;
        $229 = HEAP32[$228>>2]|0;
        $230 = ($227|0)==($229|0);
        if ($230) {
         $231 = $6;
         $232 = HEAP32[$opndx>>2]|0;
         $233 = Math_imul($232, $231)|0;
         HEAP32[$opndx>>2] = $233;
         $234 = $6;
         $235 = $total;
         $236 = (($235) + ($234))|0;
         $total = $236;
         $6 = 1;
        } else {
         label = 62;
        }
       } else {
        label = 62;
       }
       if ((label|0) == 62) {
        label = 0;
        $237 = $total;
        $238 = (($237) + 1)|0;
        $total = $238;
       }
       $239 = $7;
       $240 = ($239<<24>>24)!=(0);
       if (!($240)) {
        $241 = HEAP32[(584)>>2]|0;
        $242 = HEAP32[$opndx>>2]|0;
        (_SetCurrOffset($241,$242,1,1)|0);
       }
       $243 = HEAP32[$i>>2]|0;
       $244 = (($243) + 1)|0;
       HEAP32[$i>>2] = $244;
       break;
      }
     }
     $245 = HEAP32[4884>>2]|0;
     $246 = ($245|0)==(1);
     do {
      if ($246) {
       $247 = $7;
       $248 = $247&255;
       $249 = ($248|0)==(0);
       if ($249) {
        $250 = HEAP32[(584)>>2]|0;
        $251 = ((($250)) + 60|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ((($252)) + 44|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ($254|0)==(3);
        if (!($255)) {
         $256 = HEAP32[(584)>>2]|0;
         $257 = ((($256)) + 60|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = ((($258)) + 44|0);
         $260 = HEAP32[$259>>2]|0;
         $261 = ($260|0)==(5);
         if (!($261)) {
          break;
         }
        }
        $262 = $initwarn;
        $263 = $262&255;
        $264 = ($263|0)==(0);
        if ($264) {
         $265 = HEAP32[(584)>>2]|0;
         $266 = ((($265)) + 60|0);
         $267 = HEAP32[$266>>2]|0;
         $268 = ((($267)) + 44|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = ($269|0)==(3);
         $271 = $270 ? 109636 : 109376;
         HEAP32[$vararg_buffer34>>2] = $271;
         _EmitWarn(2,184,$vararg_buffer34);
         $initwarn = 1;
        }
       }
      }
     } while(0);
     $272 = ((($opndx)) + 40|0);
     $273 = HEAP32[$272>>2]|0;
     switch ($273|0) {
     case -2:  {
      label = 73;
      break L1;
      break;
     }
     case 3:  {
      $285 = $7;
      $286 = ($285<<24>>24)!=(0);
      if (!($286)) {
       $287 = $4;
       _output_float($opndx,$287);
      }
      $288 = $total;
      $289 = (($288) + 1)|0;
      $total = $289;
      break L20;
      break;
     }
     case 0:  {
      $290 = $8;
      $291 = ($290<<24>>24)!=(0);
      if ($291) {
       label = 81;
       break L1;
      }
      $293 = ((($opndx)) + 16|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = ($294|0)!=(0|0);
      if ($295) {
       $296 = ((($opndx)) + 16|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ((($297)) + 4|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = ((($299)) + 1|0);
       $pchar = $300;
       $301 = ((($opndx)) + 16|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = ((($302)) + 8|0);
       $304 = HEAP32[$303>>2]|0;
       $string_len = $304;
       $305 = $string_len;
       $306 = ($305|0)==(0);
       if ($306) {
        $307 = $7;
        $308 = ($307<<24>>24)!=(0);
        if (!($308)) {
         label = 86;
         break L1;
        }
        $309 = $3;
        $310 = ((($309)) + 24|0);
        $311 = HEAP16[$310>>1]|0;
        $312 = $311 & -513;
        $313 = $312 | 512;
        HEAP16[$310>>1] = $313;
       }
       $315 = $4;
       $316 = ($315|0)!=(1);
       if ($316) {
        $317 = $string_len;
        $318 = $4;
        $319 = ($317>>>0)>($318>>>0);
        if ($319) {
         label = 89;
         break L1;
        }
       }
       $321 = $3;
       $322 = ($321|0)!=(0|0);
       $323 = HEAP32[4884>>2]|0;
       $324 = ($323|0)==(0);
       $or$cond5 = $322 & $324;
       $325 = $string_len;
       $326 = ($325|0)>(0);
       $or$cond7 = $or$cond5 & $326;
       if ($or$cond7) {
        $327 = $total;
        $328 = (($327) + 1)|0;
        $total = $328;
        $329 = $4;
        $330 = ($329|0)==(1);
        $331 = $string_len;
        $332 = ($331|0)>(1);
        $or$cond9 = $330 & $332;
        if ($or$cond9) {
         $333 = $string_len;
         $334 = (($333) - 1)|0;
         $335 = $total;
         $336 = (($335) + ($334))|0;
         $total = $336;
         $337 = $3;
         $338 = ((($337)) + 24|0);
         $339 = HEAP16[$338>>1]|0;
         $340 = $339 & -513;
         $341 = $340 | 512;
         HEAP16[$338>>1] = $341;
         $342 = $9;
         $343 = ($342<<24>>24)!=(0);
         if ($343) {
          $344 = $3;
          $345 = ((($344)) + 32|0);
          HEAP32[$345>>2] = 1;
          $346 = $3;
          $347 = ((($346)) + 28|0);
          HEAP32[$347>>2] = 1;
          $9 = 0;
         }
        }
       }
       $348 = $7;
       $349 = ($348<<24>>24)!=(0);
       if ($349) {
        break L20;
       }
       $350 = $string_len;
       $351 = ($350|0)>(1);
       $352 = $4;
       $353 = ($352>>>0)>(1);
       $or$cond11 = $351 & $353;
       if ($or$cond11) {
        $354 = $pchar;
        $355 = $string_len;
        $356 = (_little_endian($354,$355)|0);
        $pchar = $356;
       }
       $357 = $pchar;
       $358 = $string_len;
       _OutputBytes($357,$358,0);
       $359 = $4;
       $360 = $string_len;
       $361 = ($359>>>0)>($360>>>0);
       if (!($361)) {
        break L20;
       }
       $362 = $4;
       $363 = $string_len;
       $364 = (($362) - ($363))|0;
       _FillDataBytes(0,$364);
       break L20;
      }
      $365 = $7;
      $366 = ($365<<24>>24)!=(0);
      do {
       if (!($366)) {
        $367 = $4;
        $368 = ($367>>>0)>(16);
        if ($368) {
         _OutputBytes($opndx,16,0);
         $369 = ((($opndx)) + 15|0);
         $370 = HEAP8[$369>>0]|0;
         $371 = $370&255;
         $372 = ($371|0)<(128);
         $373 = $372 ? 0 : 255;
         $374 = $373&255;
         $tmp = $374;
         $375 = $tmp;
         $376 = $4;
         $377 = (($376) - 16)|0;
         _FillDataBytes($375,$377);
         break;
        }
        $378 = $4;
        $379 = ($378>>>0)>(8);
        do {
         if ($379) {
          $380 = ((($opndx)) + 52|0);
          $381 = HEAP8[$380>>0]|0;
          $382 = ($381&255) >>> 5;
          $383 = $382 & 1;
          $384 = $383&255;
          $385 = ($384|0)!=(0);
          if ($385) {
           $386 = $opndx;
           $387 = $386;
           $388 = HEAP32[$387>>2]|0;
           $389 = (($386) + 4)|0;
           $390 = $389;
           $391 = HEAP32[$390>>2]|0;
           $392 = ($391|0)<(0);
           if ($392) {
            $393 = ((($opndx)) + 8|0);
            $394 = $393;
            $395 = $394;
            $396 = HEAP32[$395>>2]|0;
            $397 = (($394) + 4)|0;
            $398 = $397;
            $399 = HEAP32[$398>>2]|0;
            $400 = ($396|0)==(0);
            $401 = ($399|0)==(0);
            $402 = $400 & $401;
            if (!($402)) {
             break;
            }
            $403 = ((($opndx)) + 8|0);
            $404 = $403;
            $405 = $404;
            HEAP32[$405>>2] = -1;
            $406 = (($404) + 4)|0;
            $407 = $406;
            HEAP32[$407>>2] = -1;
           }
          }
         }
        } while(0);
        $408 = $4;
        _OutputBytes($opndx,$408,0);
        $409 = $4;
        $410 = ($409>>>0)<=(8);
        if ($410) {
         $411 = ((($opndx)) + 7|0);
         $412 = HEAP8[$411>>0]|0;
         $413 = $412&255;
         $414 = ($413|0)<(128);
         $415 = $414 ? 0 : 255;
         $416 = $415&255;
         $tmp = $416;
         $417 = $tmp;
         $418 = $417 << 24 >> 24;
         $419 = $418&255;
         $420 = $4;
         _memset(($opndx|0),($419|0),($420|0))|0;
         $421 = $opndx;
         $422 = $421;
         $423 = HEAP32[$422>>2]|0;
         $424 = (($421) + 4)|0;
         $425 = $424;
         $426 = HEAP32[$425>>2]|0;
         $427 = ($423|0)!=(0);
         $428 = ($426|0)!=(0);
         $429 = $427 | $428;
         if (!($429)) {
          break;
         }
         $430 = $opndx;
         $431 = $430;
         $432 = HEAP32[$431>>2]|0;
         $433 = (($430) + 4)|0;
         $434 = $433;
         $435 = HEAP32[$434>>2]|0;
         $436 = ($432|0)!=(-1);
         $437 = ($435|0)!=(-1);
         $438 = $436 | $437;
         if ($438) {
          label = 110;
          break L1;
         } else {
          break;
         }
        }
        $448 = $4;
        $449 = ($448|0)==(10);
        if ($449) {
         $450 = ((($opndx)) + 8|0);
         $451 = $450;
         $452 = $451;
         $453 = HEAP32[$452>>2]|0;
         $454 = (($451) + 4)|0;
         $455 = $454;
         $456 = HEAP32[$455>>2]|0;
         $457 = ($456>>>0)>(0);
         $458 = ($453>>>0)>(65535);
         $459 = ($456|0)==(0);
         $460 = $459 & $458;
         $461 = $457 | $460;
         if ($461) {
          $462 = ((($opndx)) + 8|0);
          $463 = $462;
          $464 = $463;
          $465 = HEAP32[$464>>2]|0;
          $466 = (($463) + 4)|0;
          $467 = $466;
          $468 = HEAP32[$467>>2]|0;
          $469 = ($468>>>0)<(4294967295);
          $470 = ($465>>>0)<(4294901761);
          $471 = ($468|0)==(-1);
          $472 = $471 & $470;
          $473 = $469 | $472;
          if ($473) {
           label = 116;
           break L1;
          }
         }
        }
       }
      } while(0);
      $483 = $total;
      $484 = (($483) + 1)|0;
      $total = $484;
      break L20;
      break;
     }
     case 1:  {
      $485 = $4;
      $486 = ($485>>>0)>(8);
      if ($486) {
       $487 = $3;
       $488 = ($487|0)!=(0|0);
       if ($488) {
        $489 = $3;
        $490 = ((($489)) + 4|0);
        $491 = HEAP32[$490>>2]|0;
        $492 = $491;
       } else {
        $492 = 109841;
       }
       HEAP32[$vararg_buffer46>>2] = $492;
       (_EmitErr(231,$vararg_buffer46)|0);
       break L20;
      }
      $493 = ((($opndx)) + 52|0);
      $494 = HEAP8[$493>>0]|0;
      $495 = $494 & 1;
      $496 = $495&255;
      $497 = ($496|0)==(1);
      if ($497) {
       (_EmitError(170)|0);
       break L20;
      }
      $498 = HEAP8[(556)>>0]|0;
      $499 = $498&255;
      $500 = ($499|0)!=(2);
      if ($500) {
       $501 = ((($opndx)) + 4|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = ($502|0)!=(0);
       if ($503) {
        $504 = ((($opndx)) + 4|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($505|0)!=(-1);
        if ($506) {
         label = 130;
         break L1;
        }
        $507 = HEAP32[$opndx>>2]|0;
        $508 = ($507|0)>=(0);
        if ($508) {
         label = 130;
         break L1;
        }
       }
      }
      $510 = $8;
      $511 = ($510<<24>>24)!=(0);
      if ($511) {
       (_EmitError(212)|0);
       break L20;
      }
      $512 = $total;
      $513 = (($512) + 1)|0;
      $total = $513;
      $514 = $7;
      $515 = ($514<<24>>24)!=(0);
      if ($515) {
       break L20;
      }
      $516 = ((($opndx)) + 36|0);
      $517 = HEAP32[$516>>2]|0;
      L146: do {
       switch ($517|0) {
       case 170:  {
        $518 = $4;
        $519 = ($518>>>0)<(2);
        if ($519) {
         (_EmitError(76)|0);
        }
        $fixup_type = 8;
        break;
       }
       case 167:  {
        $520 = $4;
        switch ($520|0) {
        case 1:  {
         $521 = HEAP32[4884>>2]|0;
         $522 = ($521|0)==(0);
         do {
          if ($522) {
           $523 = ((($opndx)) + 56|0);
           $524 = HEAP32[$523>>2]|0;
           $525 = ($524|0)!=(0|0);
           if (!($525)) {
            break;
           }
           $526 = ((($opndx)) + 56|0);
           $527 = HEAP32[$526>>2]|0;
           $528 = ((($527)) + 16|0);
           $529 = HEAP32[$528>>2]|0;
           $530 = ($529|0)==(0);
           if (!($530)) {
            break;
           }
           $fixup_type = 0;
           break L146;
          }
         } while(0);
         (_EmitError(57)|0);
         $fixup_type = 4;
         break L146;
         break;
        }
        case 2:  {
         $fixup_type = 5;
         break L146;
         break;
        }
        case 8:  {
         $531 = HEAP8[(556)>>0]|0;
         $532 = $531&255;
         $533 = ($532|0)==(2);
         if ($533) {
          $fixup_type = 7;
          break L146;
         }
         break;
        }
        default: {
        }
        }
        $534 = ((($opndx)) + 56|0);
        $535 = HEAP32[$534>>2]|0;
        $536 = ($535|0)!=(0|0);
        if ($536) {
         $537 = ((($opndx)) + 56|0);
         $538 = HEAP32[$537>>2]|0;
         $539 = (_GetSymOfssize($538)|0);
         $540 = ($539|0)==(0);
         if ($540) {
          $fixup_type = 5;
          break L146;
         }
        }
        $fixup_type = 6;
        break;
       }
       case 159:  {
        $541 = $4;
        $542 = ($541>>>0)<(4);
        if ($542) {
         (_EmitError(57)|0);
        }
        $fixup_type = 12;
        break;
       }
       case 169:  {
        $543 = $4;
        $544 = ($543>>>0)<(4);
        if ($544) {
         (_EmitError(57)|0);
        }
        $fixup_type = 13;
        break;
       }
       case 162:  {
        $fixup_type = 4;
        break;
       }
       case 156:  {
        $fixup_type = 11;
        break;
       }
       case 164:  {
        $fixup_type = 5;
        $545 = $4;
        $546 = ($545>>>0)<(2);
        if ($546) {
         (_EmitError(76)|0);
        }
        break;
       }
       case 158: case 157:  {
        $fixup_type = 0;
        (_EmitError(65)|0);
        break;
       }
       case 163:  {
        $fixup_type = 6;
        $547 = $4;
        $548 = ($547>>>0)<(4);
        if ($548) {
         (_EmitError(76)|0);
        }
        break;
       }
       default: {
        $549 = $4;
        $550 = ($549>>>0)<(2);
        L148: do {
         if ($550) {
          $551 = HEAP32[4884>>2]|0;
          $552 = ($551|0)==(0);
          do {
           if ($552) {
            $553 = ((($opndx)) + 56|0);
            $554 = HEAP32[$553>>2]|0;
            $555 = ($554|0)!=(0|0);
            if (!($555)) {
             break;
            }
            $556 = ((($opndx)) + 56|0);
            $557 = HEAP32[$556>>2]|0;
            $558 = ((($557)) + 16|0);
            $559 = HEAP32[$558>>2]|0;
            $560 = ($559|0)==(0);
            if ($560) {
             break L148;
            }
           }
          } while(0);
          $561 = ((($opndx)) + 56|0);
          $562 = HEAP32[$561>>2]|0;
          $563 = ($562|0)!=(0|0);
          do {
           if ($563) {
            $564 = ((($opndx)) + 56|0);
            $565 = HEAP32[$564>>2]|0;
            $566 = ((($565)) + 16|0);
            $567 = HEAP32[$566>>2]|0;
            $568 = ($567|0)==(2);
            if (!($568)) {
             label = 171;
             break;
            }
            $569 = ((($opndx)) + 52|0);
            $570 = HEAP8[$569>>0]|0;
            $571 = ($570&255) >>> 2;
            $572 = $571 & 1;
            $573 = $572&255;
            $574 = ($573|0)==(1);
            if (!($574)) {
             label = 171;
            }
           } else {
            label = 171;
           }
          } while(0);
          if ((label|0) == 171) {
           label = 0;
           (_EmitError(76)|0);
          }
          $fixup_type = 4;
          break L146;
         }
        } while(0);
        $575 = ((($opndx)) + 56|0);
        $576 = HEAP32[$575>>2]|0;
        $577 = ($576|0)!=(0|0);
        do {
         if ($577) {
          $578 = ((($opndx)) + 56|0);
          $579 = HEAP32[$578>>2]|0;
          $580 = ((($579)) + 16|0);
          $581 = HEAP32[$580>>2]|0;
          $582 = ($581|0)==(3);
          if (!($582)) {
           $583 = ((($opndx)) + 56|0);
           $584 = HEAP32[$583>>2]|0;
           $585 = ((($584)) + 16|0);
           $586 = HEAP32[$585>>2]|0;
           $587 = ($586|0)==(4);
           if (!($587)) {
            break;
           }
          }
          $fixup_type = 8;
          break L146;
         }
        } while(0);
        $588 = $4;
        switch ($588|0) {
        case 2:  {
         $589 = ((($opndx)) + 52|0);
         $590 = HEAP8[$589>>0]|0;
         $591 = ($590&255) >>> 1;
         $592 = $591 & 1;
         $593 = $592&255;
         $594 = ($593|0)==(1);
         L181: do {
          if ($594) {
           $595 = ((($opndx)) + 44|0);
           $596 = HEAP32[$595>>2]|0;
           $597 = ((($opndx)) + 49|0);
           $598 = HEAP8[$597>>0]|0;
           $599 = $598&255;
           $600 = ((($opndx)) + 64|0);
           $601 = HEAP32[$600>>2]|0;
           $602 = (_SizeFromMemtype($596,$599,$601)|0);
           $603 = $4;
           $604 = ($602>>>0)>($603>>>0);
           if (!($604)) {
            break;
           }
           $605 = ((($opndx)) + 56|0);
           $606 = HEAP32[$605>>2]|0;
           $607 = ($606|0)!=(0|0);
           if ($607) {
            $608 = ((($opndx)) + 56|0);
            $609 = HEAP32[$608>>2]|0;
            $610 = ((($609)) + 4|0);
            $611 = HEAP32[$610>>2]|0;
            $612 = $611;
           } else {
            $612 = 109841;
           }
           HEAP32[$vararg_buffer49>>2] = $612;
           (_EmitErr(172,$vararg_buffer49)|0);
          } else {
           $613 = ((($opndx)) + 56|0);
           $614 = HEAP32[$613>>2]|0;
           $615 = ($614|0)!=(0|0);
           do {
            if ($615) {
             $616 = ((($opndx)) + 56|0);
             $617 = HEAP32[$616>>2]|0;
             $618 = ((($617)) + 16|0);
             $619 = HEAP32[$618>>2]|0;
             $620 = ($619|0)==(2);
             if (!($620)) {
              break;
             }
             $621 = ((($opndx)) + 52|0);
             $622 = HEAP8[$621>>0]|0;
             $623 = ($622&255) >>> 2;
             $624 = $623 & 1;
             $625 = $624&255;
             $626 = ($625|0)==(1);
             if ($626) {
              break L181;
             }
            }
           } while(0);
           $627 = ((($opndx)) + 56|0);
           $628 = HEAP32[$627>>2]|0;
           $629 = ($628|0)!=(0|0);
           if (!($629)) {
            break;
           }
           $630 = ((($opndx)) + 56|0);
           $631 = HEAP32[$630>>2]|0;
           $632 = ((($631)) + 16|0);
           $633 = HEAP32[$632>>2]|0;
           $634 = ($633|0)!=(0);
           if (!($634)) {
            break;
           }
           $635 = ((($opndx)) + 56|0);
           $636 = HEAP32[$635>>2]|0;
           $637 = (_GetSymOfssize($636)|0);
           $638 = ($637|0)>(0);
           if (!($638)) {
            break;
           }
           $639 = ((($opndx)) + 56|0);
           $640 = HEAP32[$639>>2]|0;
           $641 = ($640|0)!=(0|0);
           if ($641) {
            $642 = ((($opndx)) + 56|0);
            $643 = HEAP32[$642>>2]|0;
            $644 = ((($643)) + 4|0);
            $645 = HEAP32[$644>>2]|0;
            $646 = $645;
           } else {
            $646 = 109841;
           }
           HEAP32[$vararg_buffer52>>2] = $646;
           (_EmitErr(172,$vararg_buffer52)|0);
          }
         } while(0);
         $fixup_type = 5;
         break L146;
         break;
        }
        case 4:  {
         $647 = ((($opndx)) + 52|0);
         $648 = HEAP8[$647>>0]|0;
         $649 = ($648&255) >>> 1;
         $650 = $649 & 1;
         $651 = $650&255;
         $652 = ($651|0)==(1);
         if (!($652)) {
          $686 = HEAP8[(556)>>0]|0;
          $687 = $686&255;
          $688 = ($687|0)==(0);
          if (!($688)) {
           $fixup_type = 6;
           break L146;
          }
          $689 = ((($opndx)) + 44|0);
          $690 = HEAP32[$689>>2]|0;
          $691 = ($690|0)==(129);
          do {
           if ($691) {
            $692 = HEAP32[(6100)>>2]|0;
            $693 = ($692|0)==(2);
            $694 = HEAP32[(6100)>>2]|0;
            $695 = ($694|0)==(3);
            $or$cond13 = $693 | $695;
            if (!($or$cond13)) {
             break;
            }
            $fixup_type = 5;
            $696 = $3;
            $697 = ((($696)) + 4|0);
            $698 = HEAP32[$697>>2]|0;
            HEAP32[$vararg_buffer58>>2] = $698;
            (_EmitErr(136,$vararg_buffer58)|0);
            break L146;
           }
          } while(0);
          $fixup_type = 9;
          break L146;
         }
         $653 = ((($opndx)) + 44|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654|0)==(130);
         if ($655) {
          $656 = ((($opndx)) + 49|0);
          $657 = HEAP8[$656>>0]|0;
          $658 = $657&255;
          $659 = ($658|0)!=(254);
          do {
           if ($659) {
            $660 = ((($opndx)) + 49|0);
            $661 = HEAP8[$660>>0]|0;
            $662 = $661&255;
            $663 = ($662|0)!=(0);
            if (!($663)) {
             break;
            }
            $664 = ((($opndx)) + 56|0);
            $665 = HEAP32[$664>>2]|0;
            $666 = ($665|0)!=(0|0);
            if ($666) {
             $667 = ((($opndx)) + 56|0);
             $668 = HEAP32[$667>>2]|0;
             $669 = ((($668)) + 4|0);
             $670 = HEAP32[$669>>2]|0;
             $671 = $670;
            } else {
             $671 = 109841;
            }
            HEAP32[$vararg_buffer55>>2] = $671;
            (_EmitErr(172,$vararg_buffer55)|0);
           }
          } while(0);
          $fixup_type = 9;
          break L146;
         }
         $672 = ((($opndx)) + 44|0);
         $673 = HEAP32[$672>>2]|0;
         $674 = ($673|0)==(129);
         if (!($674)) {
          break L146;
         }
         $675 = ((($opndx)) + 49|0);
         $676 = HEAP8[$675>>0]|0;
         $677 = $676&255;
         $678 = ($677|0)==(0);
         if ($678) {
          $fixup_type = 5;
          break L146;
         }
         $679 = ((($opndx)) + 56|0);
         $680 = HEAP32[$679>>2]|0;
         $681 = ($680|0)!=(0|0);
         do {
          if ($681) {
           $682 = ((($opndx)) + 56|0);
           $683 = HEAP32[$682>>2]|0;
           $684 = (_GetSymOfssize($683)|0);
           $685 = ($684|0)==(0);
           if (!($685)) {
            break;
           }
           $fixup_type = 5;
           break L146;
          }
         } while(0);
         $fixup_type = 6;
         break L146;
         break;
        }
        case 6:  {
         $699 = HEAP32[(6100)>>2]|0;
         $700 = ($699|0)==(2);
         $701 = HEAP32[(6100)>>2]|0;
         $702 = ($701|0)==(3);
         $or$cond15 = $700 | $702;
         if ($or$cond15) {
          $fixup_type = 6;
          break L146;
         } else {
          $fixup_type = 10;
          break L146;
         }
         break;
        }
        default: {
         $703 = ((($opndx)) + 52|0);
         $704 = HEAP8[$703>>0]|0;
         $705 = ($704&255) >>> 1;
         $706 = $705 & 1;
         $707 = $706&255;
         $708 = ($707|0)==(1);
         do {
          if ($708) {
           $709 = ((($opndx)) + 44|0);
           $710 = HEAP32[$709>>2]|0;
           $711 = ($710|0)==(130);
           if (!($711)) {
            break;
           }
           $712 = ((($opndx)) + 49|0);
           $713 = HEAP8[$712>>0]|0;
           $714 = $713&255;
           $715 = ($714|0)==(1);
           if (!($715)) {
            break;
           }
           $fixup_type = 10;
           break L146;
          }
         } while(0);
         $716 = HEAP8[(556)>>0]|0;
         $717 = $716&255;
         $718 = ($717|0)==(1);
         if ($718) {
          $fixup_type = 6;
          break L146;
         }
         $719 = HEAP8[(556)>>0]|0;
         $720 = $719&255;
         $721 = ($720|0)==(2);
         if ($721) {
          $fixup_type = 7;
          break L146;
         } else {
          $fixup_type = 9;
          break L146;
         }
        }
        }
       }
       }
      } while(0);
      $722 = $fixup_type;
      $723 = 1 << $722;
      $724 = HEAP32[(500)>>2]|0;
      $725 = ((($724)) + 4|0);
      $726 = HEAP16[$725>>1]|0;
      $727 = $726 << 16 >> 16;
      $728 = $723 & $727;
      $729 = ($728|0)!=(0);
      if ($729) {
       label = 227;
       break L1;
      }
      $fixup = 0;
      $741 = HEAP8[81594>>0]|0;
      $742 = ($741<<24>>24)!=(0);
      if ($742) {
       HEAP32[15452>>2] = 0;
       (_segm_override($opndx,0)|0);
       $743 = HEAP32[(536)>>2]|0;
       $744 = ($743|0)==(2);
       do {
        if ($744) {
         $745 = ((($opndx)) + 36|0);
         $746 = HEAP32[$745>>2]|0;
         $747 = ($746|0)==(167);
         if (!($747)) {
          $748 = ((($opndx)) + 36|0);
          $749 = HEAP32[$748>>2]|0;
          $750 = ($749|0)==(170);
          if (!($750)) {
           label = 235;
           break;
          }
         }
         $751 = ((($opndx)) + 56|0);
         $752 = HEAP32[$751>>2]|0;
         _set_frame2($752);
        } else {
         label = 235;
        }
       } while(0);
       if ((label|0) == 235) {
        label = 0;
        $753 = ((($opndx)) + 56|0);
        $754 = HEAP32[$753>>2]|0;
        _set_frame($754);
       }
       $755 = ((($opndx)) + 56|0);
       $756 = HEAP32[$755>>2]|0;
       $757 = $fixup_type;
       $758 = (_CreateFixup($756,$757,0)|0);
       $fixup = $758;
      }
      $759 = $4;
      $760 = $fixup;
      _OutputBytes($opndx,$759,$760);
      break L20;
      break;
     }
     case 2:  {
      (_EmitError(170)|0);
      break L20;
      break;
     }
     default: {
      label = 239;
      break L1;
     }
     }
    }
   } while(0);
   $762 = $3;
   $763 = ($762|0)!=(0|0);
   if ($763) {
    $764 = $9;
    $765 = $764&255;
    $766 = ($765|0)!=(0);
    $767 = HEAP32[4884>>2]|0;
    $768 = ($767|0)==(0);
    $or$cond17 = $766 & $768;
    if ($or$cond17) {
     $769 = $total;
     $770 = $3;
     $771 = ((($770)) + 32|0);
     HEAP32[$771>>2] = $769;
     $772 = $total;
     $773 = $4;
     $774 = Math_imul($772, $773)|0;
     $775 = $3;
     $776 = ((($775)) + 28|0);
     HEAP32[$776>>2] = $774;
    }
   }
   $777 = HEAP32[$i>>2]|0;
   $778 = $10;
   $779 = ($777|0)<($778|0);
   if (!($779)) {
    break;
   }
   $780 = HEAP32[$i>>2]|0;
   $781 = $2;
   $782 = (($781) + ($780<<4)|0);
   $783 = HEAP8[$782>>0]|0;
   $784 = $783&255;
   $785 = ($784|0)==(44);
   if (!($785)) {
    break;
   }
   $786 = HEAP32[$i>>2]|0;
   $787 = (($786) + 1)|0;
   HEAP32[$i>>2] = $787;
   $788 = HEAP32[$i>>2]|0;
   $789 = $2;
   $790 = (($789) + ($788<<4)|0);
   $791 = HEAP8[$790>>0]|0;
   $792 = $791&255;
   $793 = ($792|0)!=(0);
   if (!($793)) {
    break;
   }
   $794 = HEAP32[$i>>2]|0;
   $795 = $2;
   $796 = (($795) + ($794<<4)|0);
   $797 = HEAP8[$796>>0]|0;
   $798 = $797&255;
   $799 = ($798|0)!=(41);
   if (!($799)) {
    break;
   }
   $9 = 0;
   $800 = $3;
   $801 = ($800|0)!=(0|0);
   if (!($801)) {
    continue;
   }
   $802 = $3;
   $803 = ((($802)) + 24|0);
   $804 = HEAP16[$803>>1]|0;
   $805 = $804 & -513;
   $806 = $805 | 512;
   HEAP16[$803>>1] = $806;
  }
  $807 = $6;
  $808 = (($807) + -1)|0;
  $6 = $808;
 }
 switch (label|0) {
  case 12: {
   $0 = -1;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 19: {
   $0 = -1;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 23: {
   $95 = ((($opndx)) + 56|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0|0);
   if ($97) {
    $98 = ((($opndx)) + 56|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($99)) + 16|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = ((($opndx)) + 56|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($104)) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     HEAP32[$vararg_buffer22>>2] = $106;
     (_EmitErr(102,$vararg_buffer22)|0);
    } else {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    (_EmitError(65)|0);
   }
   $0 = -1;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 29: {
   $109 = (_EmitError(208)|0);
   $0 = $109;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 31: {
   HEAP32[$vararg_buffer25>>2] = 108305;
   $118 = (_EmitErr(230,$vararg_buffer25)|0);
   $0 = $118;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 44: {
   $0 = -1;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 46: {
   HEAP32[$vararg_buffer28>>2] = 108307;
   $173 = (_EmitErr(230,$vararg_buffer28)|0);
   $0 = $173;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 56: {
   $206 = $5;
   $207 = ((($206)) + 4|0);
   $208 = HEAP32[$207>>2]|0;
   HEAP32[$vararg_buffer31>>2] = $208;
   $209 = (_EmitErr(229,$vararg_buffer31)|0);
   $0 = $209;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 73: {
   $274 = HEAP32[$i>>2]|0;
   $275 = $2;
   $276 = (($275) + ($274<<4)|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $277&255;
   $279 = ($278|0)!=(0);
   if ($279) {
    $280 = HEAP32[$i>>2]|0;
    $281 = $2;
    $282 = (($281) + ($280<<4)|0);
    $283 = ((($282)) + 12|0);
    $284 = HEAP32[$283>>2]|0;
    HEAP32[$vararg_buffer37>>2] = $284;
    (_EmitErr(209,$vararg_buffer37)|0);
   } else {
    (_EmitError(45)|0);
   }
   $0 = -1;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 81: {
   $292 = (_EmitError(212)|0);
   $0 = $292;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 86: {
   $314 = (_EmitError(163)|0);
   $0 = $314;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 89: {
   $320 = (_EmitError(55)|0);
   $0 = $320;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 110: {
   $439 = ((($opndx)) + 56|0);
   $440 = HEAP32[$439>>2]|0;
   $441 = ($440|0)!=(0|0);
   if ($441) {
    $442 = ((($opndx)) + 56|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = ((($443)) + 4|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $445;
   } else {
    $446 = 109841;
   }
   HEAP32[$vararg_buffer40>>2] = $446;
   $447 = (_EmitErr(172,$vararg_buffer40)|0);
   $0 = $447;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 116: {
   $474 = ((($opndx)) + 56|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = ($475|0)!=(0|0);
   if ($476) {
    $477 = ((($opndx)) + 56|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ((($478)) + 4|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = $480;
   } else {
    $481 = 109841;
   }
   HEAP32[$vararg_buffer43>>2] = $481;
   $482 = (_EmitErr(172,$vararg_buffer43)|0);
   $0 = $482;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 130: {
   $509 = (_EmitConstError($opndx)|0);
   $0 = $509;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 227: {
   $730 = HEAP32[(500)>>2]|0;
   $731 = ((($730)) + 6|0);
   $732 = ((($opndx)) + 56|0);
   $733 = HEAP32[$732>>2]|0;
   $734 = ($733|0)!=(0|0);
   if ($734) {
    $735 = ((($opndx)) + 56|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = ((($736)) + 4|0);
    $738 = HEAP32[$737>>2]|0;
    $739 = $738;
   } else {
    $739 = 83263;
   }
   HEAP32[$vararg_buffer61>>2] = $731;
   $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
   HEAP32[$vararg_ptr64>>2] = $739;
   $740 = (_EmitErr(197,$vararg_buffer61)|0);
   $0 = $740;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 239: {
   $761 = (_EmitError(45)|0);
   $0 = $761;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
  case 250: {
   $809 = $3;
   $810 = ($809|0)!=(0|0);
   $811 = HEAP32[4884>>2]|0;
   $812 = ($811|0)==(0);
   $or$cond19 = $810 & $812;
   if ($or$cond19) {
    $813 = $total;
    $814 = $3;
    $815 = ((($814)) + 40|0);
    $816 = HEAP32[$815>>2]|0;
    $817 = (($816) + ($813))|0;
    HEAP32[$815>>2] = $817;
    $818 = $total;
    $819 = $4;
    $820 = Math_imul($818, $819)|0;
    $821 = $3;
    $822 = ((($821)) + 36|0);
    $823 = HEAP32[$822>>2]|0;
    $824 = (($823) + ($820))|0;
    HEAP32[$822>>2] = $824;
   }
   $825 = HEAP32[$i>>2]|0;
   $826 = $1;
   HEAP32[$826>>2] = $825;
   $0 = 0;
   $827 = $0;
   STACKTOP = sp;return ($827|0);
   break;
  }
 }
 return (0)|0;
}
function _InitStructuredVar($index,$tokenarray,$symtype,$embedded) {
 $index = $index|0;
 $tokenarray = $tokenarray|0;
 $symtype = $symtype|0;
 $embedded = $embedded|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $dwMax = 0, $dwRecInit = 0, $f = 0, $i = 0, $is_record_set = 0, $j = 0, $j1 = 0, $j2 = 0, $lvl = 0, $max_item = 0, $nextofs = 0, $no_of_bytes = 0, $no_of_bytes3 = 0;
 var $old_stringbufferend = 0, $old_tokencount = 0, $opndx = 0, $tc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 120|0;
 $vararg_buffer10 = sp + 112|0;
 $vararg_buffer7 = sp + 104|0;
 $vararg_buffer4 = sp + 96|0;
 $vararg_buffer1 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $i = sp + 168|0;
 $dwRecInit = sp + 72|0;
 $opndx = sp;
 $j = sp + 152|0;
 $j1 = sp + 132|0;
 $j2 = sp + 128|0;
 $1 = $index;
 $2 = $tokenarray;
 $3 = $symtype;
 $4 = $embedded;
 $5 = HEAP32[(616)>>2]|0;
 $old_tokencount = $5;
 $6 = HEAP32[(612)>>2]|0;
 $old_stringbufferend = $6;
 $7 = $3;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(7);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 40|0);
  $13 = ((($12)) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(3);
  if (!($16)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(83621,210)|0);
 }
 $17 = $1;
 $18 = $2;
 $19 = (($18) + ($17<<4)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(9);
 L6: do {
  if ($22) {
   $23 = $1;
   $24 = $2;
   $25 = (($24) + ($23<<4)|0);
   $26 = ((($25)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)!=(60);
   if ($29) {
    $30 = $1;
    $31 = $2;
    $32 = (($31) + ($30<<4)|0);
    $33 = ((($32)) + 1|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = ($35|0)!=(123);
    if ($36) {
     $37 = (_EmitError(216)|0);
     $0 = $37;
     $465 = $0;
     STACKTOP = sp;return ($465|0);
    }
   }
   $38 = HEAP32[(616)>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$i>>2] = $39;
   $40 = $1;
   $41 = $2;
   $42 = (($41) + ($40<<4)|0);
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$i>>2]|0;
   $46 = $2;
   $47 = (_Tokenize($44,$45,$46,1)|0);
   HEAP32[(616)>>2] = $47;
   $48 = $1;
   $49 = (($48) + 1)|0;
   $1 = $49;
  } else {
   $50 = $4;
   $51 = ($50|0)!=(0|0);
   do {
    if ($51) {
     $52 = $1;
     $53 = $2;
     $54 = (($53) + ($52<<4)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = ($56|0)==(44);
     if (!($57)) {
      $58 = $1;
      $59 = $2;
      $60 = (($59) + ($58<<4)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = ($62|0)==(0);
      if (!($63)) {
       break;
      }
     }
     $64 = HEAP32[(616)>>2]|0;
     HEAP32[$i>>2] = $64;
     break L6;
    }
   } while(0);
   $65 = $4;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $4;
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69;
   } else {
    $70 = 109841;
   }
   HEAP32[$vararg_buffer>>2] = $70;
   $71 = (_EmitErr(152,$vararg_buffer)|0);
   $0 = $71;
   $465 = $0;
   STACKTOP = sp;return ($465|0);
  }
 } while(0);
 $72 = $3;
 $73 = ((($72)) + 40|0);
 $74 = ((($73)) + 2|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($76|0)==(4);
 if ($77) {
  $78 = $dwRecInit;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $80 = (($78) + 4)|0;
  $81 = $80;
  HEAP32[$81>>2] = 0;
  $is_record_set = 0;
 }
 $82 = $3;
 $83 = ((($82)) + 60|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 $f = $85;
 L28: while(1) {
  $86 = $f;
  $87 = ($86|0)!=(0|0);
  if (!($87)) {
   break;
  }
  $88 = $f;
  $89 = ((($88)) + 20|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==(193);
  L31: do {
   if ($91) {
    $92 = HEAP32[$i>>2]|0;
    $93 = $2;
    $94 = (($93) + ($92<<4)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = ($96|0)==(44);
    if ($97) {
     label = 23;
    } else {
     $98 = HEAP32[$i>>2]|0;
     $99 = $2;
     $100 = (($99) + ($98<<4)|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101&255;
     $103 = ($102|0)==(0);
     if ($103) {
      label = 23;
     } else {
      $119 = $2;
      $120 = HEAP32[(616)>>2]|0;
      (_EvalOperand($i,$119,$120,$opndx,0)|0);
      $is_record_set = 1;
     }
    }
    do {
     if ((label|0) == 23) {
      label = 0;
      $104 = $f;
      $105 = ((($104)) + 64|0);
      $106 = HEAP8[$105>>0]|0;
      $107 = ($106<<24>>24)!=(0);
      if ($107) {
       $108 = HEAP32[(616)>>2]|0;
       $109 = (($108) + 1)|0;
       HEAP32[$j>>2] = $109;
       $110 = $f;
       $111 = ((($110)) + 64|0);
       $112 = HEAP32[$j>>2]|0;
       $113 = $2;
       $114 = (_Tokenize($111,$112,$113,1)|0);
       $max_item = $114;
       $115 = $2;
       $116 = $max_item;
       (_EvalOperand($j,$115,$116,$opndx,0)|0);
       $is_record_set = 1;
       break;
      } else {
       HEAP32[$opndx>>2] = 0;
       $117 = ((($opndx)) + 40|0);
       HEAP32[$117>>2] = 0;
       $118 = ((($opndx)) + 16|0);
       HEAP32[$118>>2] = 0;
       break;
      }
     }
    } while(0);
    $121 = ((($opndx)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)!=(0);
    if ($123) {
     label = 29;
    } else {
     $124 = ((($opndx)) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)!=(0|0);
     if ($126) {
      label = 29;
     }
    }
    if ((label|0) == 29) {
     label = 0;
     (_EmitError(65)|0);
    }
    $127 = $f;
    $128 = ((($127)) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129>>>0)<(32);
    if ($130) {
     $131 = $f;
     $132 = ((($131)) + 36|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = 1 << $133;
     $dwMax = $134;
     $135 = HEAP32[$opndx>>2]|0;
     $136 = $dwMax;
     $137 = ($135>>>0)>=($136>>>0);
     if ($137) {
      $138 = $f;
      $139 = ((($138)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $140;
      (_EmitErr(172,$vararg_buffer1)|0);
     }
    }
    $141 = $opndx;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($141) + 4)|0;
    $145 = $144;
    $146 = HEAP32[$145>>2]|0;
    $147 = $f;
    $148 = ((($147)) + 8|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (_bitshift64Shl(($143|0),($146|0),($149|0))|0);
    $151 = tempRet0;
    $152 = $dwRecInit;
    $153 = $152;
    $154 = HEAP32[$153>>2]|0;
    $155 = (($152) + 4)|0;
    $156 = $155;
    $157 = HEAP32[$156>>2]|0;
    $158 = $154 | $150;
    $159 = $157 | $151;
    $160 = $dwRecInit;
    $161 = $160;
    HEAP32[$161>>2] = $158;
    $162 = (($160) + 4)|0;
    $163 = $162;
    HEAP32[$163>>2] = $159;
   } else {
    $164 = $f;
    $165 = ((($164)) + 64|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166 << 24 >> 24;
    $168 = ($167|0)==(0);
    if ($168) {
     $169 = HEAP32[$i>>2]|0;
     $170 = $2;
     $171 = $f;
     $172 = ((($171)) + 52|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $f;
     (_InitStructuredVar($169,$170,$173,$174)|0);
     $175 = HEAP32[$i>>2]|0;
     $176 = $2;
     $177 = (($176) + ($175<<4)|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178&255;
     $180 = ($179|0)==(9);
     if (!($180)) {
      break;
     }
     $181 = HEAP32[$i>>2]|0;
     $182 = (($181) + 1)|0;
     HEAP32[$i>>2] = $182;
     break;
    }
    $183 = $f;
    $184 = ((($183)) + 24|0);
    $185 = HEAP16[$184>>1]|0;
    $186 = ($185&65535) >>> 9;
    $187 = $186 & 1;
    $188 = $187&255;
    $189 = $188&255;
    $190 = ($189|0)!=(0);
    if ($190) {
     $191 = HEAP32[$i>>2]|0;
     $192 = $2;
     $193 = (($192) + ($191<<4)|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = $194&255;
     $196 = ($195|0)!=(0);
     if ($196) {
      $197 = HEAP32[$i>>2]|0;
      $198 = $2;
      $199 = (($198) + ($197<<4)|0);
      $200 = HEAP8[$199>>0]|0;
      $201 = $200&255;
      $202 = ($201|0)!=(44);
      if ($202) {
       $203 = $f;
       $204 = $2;
       $205 = (_InitializeArray($203,$i,$204)|0);
       $206 = (-1)==($205|0);
       if ($206) {
        break L28;
       } else {
        break;
       }
      }
     }
    }
    $207 = $f;
    $208 = ((($207)) + 36|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = $f;
    $211 = ((($210)) + 40|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = ($209|0)==($212|0);
    do {
     if ($213) {
      $214 = HEAP32[$i>>2]|0;
      $215 = $2;
      $216 = (($215) + ($214<<4)|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = $217&255;
      $219 = ($218|0)==(9);
      if ($219) {
       $220 = HEAP32[$i>>2]|0;
       $221 = $2;
       $222 = (($221) + ($220<<4)|0);
       $223 = ((($222)) + 8|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = ($224>>>0)>(1);
       if ($225) {
        $226 = HEAP32[$i>>2]|0;
        $227 = $2;
        $228 = (($227) + ($226<<4)|0);
        $229 = ((($228)) + 1|0);
        $230 = HEAP8[$229>>0]|0;
        $231 = $230 << 24 >> 24;
        $232 = ($231|0)==(34);
        if (!($232)) {
         $233 = HEAP32[$i>>2]|0;
         $234 = $2;
         $235 = (($234) + ($233<<4)|0);
         $236 = ((($235)) + 1|0);
         $237 = HEAP8[$236>>0]|0;
         $238 = $237 << 24 >> 24;
         $239 = ($238|0)==(39);
         if (!($239)) {
          break;
         }
        }
        (_EmitError(155)|0);
        $240 = HEAP32[$i>>2]|0;
        $241 = (($240) + 1)|0;
        HEAP32[$i>>2] = $241;
        break L31;
       }
      }
     }
    } while(0);
    $242 = $f;
    $243 = ((($242)) + 20|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $f;
    $246 = ((($245)) + 52|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (_SizeFromMemtype($244,254,$247)|0);
    $no_of_bytes = $248;
    $249 = HEAP32[$i>>2]|0;
    $250 = $2;
    $251 = (($250) + ($249<<4)|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = ($253|0)==(0);
    if (!($254)) {
     $255 = HEAP32[$i>>2]|0;
     $256 = $2;
     $257 = (($256) + ($255<<4)|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = ($259|0)==(44);
     if (!($260)) {
      $281 = HEAP32[$i>>2]|0;
      HEAP32[$j2>>2] = $281;
      $lvl = 0;
      $c = 0;
      L72: while(1) {
       $282 = HEAP32[$i>>2]|0;
       $283 = $2;
       $284 = (($283) + ($282<<4)|0);
       $285 = HEAP8[$284>>0]|0;
       $286 = $285&255;
       $287 = ($286|0)!=(0);
       if (!($287)) {
        break;
       }
       $288 = HEAP32[$i>>2]|0;
       $289 = $2;
       $290 = (($289) + ($288<<4)|0);
       $291 = HEAP8[$290>>0]|0;
       $292 = $291&255;
       $293 = ($292|0)==(40);
       do {
        if ($293) {
         $294 = $lvl;
         $295 = (($294) + 1)|0;
         $lvl = $295;
        } else {
         $296 = HEAP32[$i>>2]|0;
         $297 = $2;
         $298 = (($297) + ($296<<4)|0);
         $299 = HEAP8[$298>>0]|0;
         $300 = $299&255;
         $301 = ($300|0)==(41);
         $302 = $lvl;
         if ($301) {
          $303 = (($302) + -1)|0;
          $lvl = $303;
          break;
         }
         $304 = ($302|0)==(0);
         if ($304) {
          $305 = HEAP32[$i>>2]|0;
          $306 = $2;
          $307 = (($306) + ($305<<4)|0);
          $308 = HEAP8[$307>>0]|0;
          $309 = $308&255;
          $310 = ($309|0)==(44);
          if ($310) {
           break L72;
          }
         }
         $311 = HEAP32[$i>>2]|0;
         $312 = $2;
         $313 = (($312) + ($311<<4)|0);
         $314 = HEAP8[$313>>0]|0;
         $315 = $314&255;
         $316 = ($315|0)==(7);
         if ($316) {
          $317 = HEAP32[$i>>2]|0;
          $318 = $2;
          $319 = (($318) + ($317<<4)|0);
          $320 = ((($319)) + 8|0);
          $321 = HEAP32[$320>>2]|0;
          $322 = ($321|0)==(185);
          if (!($322)) {
           break;
          }
          $323 = $c;
          $324 = (($323) + 1)<<24>>24;
          $c = $324;
         }
        }
       } while(0);
       $325 = HEAP32[$i>>2]|0;
       $326 = (($325) + 1)|0;
       HEAP32[$i>>2] = $326;
      }
      $327 = $c;
      $328 = ($327<<24>>24)!=(0);
      if ($328) {
       $329 = HEAP32[$j2>>2]|0;
       $330 = $2;
       $331 = (($330) + ($329<<4)|0);
       $332 = ((($331)) + 12|0);
       $333 = HEAP32[$332>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $333;
       (_EmitErr(152,$vararg_buffer4)|0);
       break;
      }
      $334 = $2;
      $335 = $no_of_bytes;
      $336 = $f;
      $337 = ((($336)) + 52|0);
      $338 = HEAP32[$337>>2]|0;
      $339 = $f;
      $340 = ((($339)) + 20|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = $341 & 32;
      $343 = $342&255;
      $344 = HEAP32[$i>>2]|0;
      $345 = (_data_item($j2,$334,0,$335,$338,1,0,$343,0,$344)|0);
      $346 = (-1)==($345|0);
      if (!($346)) {
       break;
      }
      $347 = $f;
      $348 = ((($347)) + 4|0);
      $349 = HEAP32[$348>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $349;
      (_EmitErr(231,$vararg_buffer7)|0);
      break;
     }
    }
    $261 = HEAP32[(616)>>2]|0;
    $tc = $261;
    $262 = HEAP32[(616)>>2]|0;
    $263 = (($262) + 1)|0;
    HEAP32[$j1>>2] = $263;
    $264 = $f;
    $265 = ((($264)) + 64|0);
    $266 = HEAP32[$j1>>2]|0;
    $267 = $2;
    $268 = (_Tokenize($265,$266,$267,1)|0);
    HEAP32[(616)>>2] = $268;
    $269 = $2;
    $270 = $no_of_bytes;
    $271 = $f;
    $272 = ((($271)) + 52|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = $f;
    $275 = ((($274)) + 20|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $276 & 32;
    $278 = $277&255;
    $279 = HEAP32[(616)>>2]|0;
    (_data_item($j1,$269,0,$270,$273,1,0,$278,0,$279)|0);
    $280 = $tc;
    HEAP32[(616)>>2] = $280;
   }
  } while(0);
  $350 = $3;
  $351 = ((($350)) + 40|0);
  $352 = ((($351)) + 2|0);
  $353 = HEAP8[$352>>0]|0;
  $354 = $353&255;
  $355 = ($354|0)!=(4);
  if ($355) {
   $356 = $f;
   $357 = ((($356)) + 60|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = ($358|0)==(0|0);
   if ($359) {
    label = 69;
   } else {
    $360 = $3;
    $361 = ((($360)) + 40|0);
    $362 = ((($361)) + 2|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = $363&255;
    $365 = ($364|0)==(2);
    if ($365) {
     label = 69;
    } else {
     $369 = $f;
     $370 = ((($369)) + 60|0);
     $371 = HEAP32[$370>>2]|0;
     $372 = ((($371)) + 8|0);
     $373 = HEAP32[$372>>2]|0;
     $nextofs = $373;
    }
   }
   if ((label|0) == 69) {
    label = 0;
    $366 = $3;
    $367 = ((($366)) + 36|0);
    $368 = HEAP32[$367>>2]|0;
    $nextofs = $368;
   }
   $374 = $f;
   $375 = ((($374)) + 8|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = $f;
   $378 = ((($377)) + 36|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = (($376) + ($379))|0;
   $381 = $nextofs;
   $382 = ($380>>>0)<($381>>>0);
   if ($382) {
    $383 = HEAP32[(584)>>2]|0;
    $384 = $nextofs;
    $385 = $f;
    $386 = ((($385)) + 8|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = $f;
    $389 = ((($388)) + 36|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = (($387) + ($390))|0;
    $392 = (($384) - ($391))|0;
    (_SetCurrOffset($383,$392,1,1)|0);
   }
  }
  $393 = $3;
  $394 = ((($393)) + 40|0);
  $395 = ((($394)) + 2|0);
  $396 = HEAP8[$395>>0]|0;
  $397 = $396&255;
  $398 = ($397|0)==(2);
  if ($398) {
   break;
  }
  $399 = $f;
  $400 = ((($399)) + 60|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = ($401|0)!=(0|0);
  L105: do {
   if ($402) {
    $403 = HEAP32[$i>>2]|0;
    $404 = $2;
    $405 = (($404) + ($403<<4)|0);
    $406 = HEAP8[$405>>0]|0;
    $407 = $406&255;
    $408 = ($407|0)!=(0);
    if ($408) {
     $409 = HEAP32[$i>>2]|0;
     $410 = $2;
     $411 = (($410) + ($409<<4)|0);
     $412 = HEAP8[$411>>0]|0;
     $413 = $412&255;
     $414 = ($413|0)==(44);
     $415 = HEAP32[$i>>2]|0;
     if ($414) {
      $416 = (($415) + 1)|0;
      HEAP32[$i>>2] = $416;
      break;
     }
     $417 = $2;
     $418 = (($417) + ($415<<4)|0);
     $419 = ((($418)) + 12|0);
     $420 = HEAP32[$419>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $420;
     (_EmitErr(209,$vararg_buffer10)|0);
     while(1) {
      $421 = HEAP32[$i>>2]|0;
      $422 = $2;
      $423 = (($422) + ($421<<4)|0);
      $424 = HEAP8[$423>>0]|0;
      $425 = $424&255;
      $426 = ($425|0)!=(0);
      if (!($426)) {
       break L105;
      }
      $427 = HEAP32[$i>>2]|0;
      $428 = $2;
      $429 = (($428) + ($427<<4)|0);
      $430 = HEAP8[$429>>0]|0;
      $431 = $430&255;
      $432 = ($431|0)!=(44);
      if (!($432)) {
       break L105;
      }
      $433 = HEAP32[$i>>2]|0;
      $434 = (($433) + 1)|0;
      HEAP32[$i>>2] = $434;
     }
    }
   }
  } while(0);
  $435 = $f;
  $436 = ((($435)) + 60|0);
  $437 = HEAP32[$436>>2]|0;
  $f = $437;
 }
 $438 = $3;
 $439 = ((($438)) + 40|0);
 $440 = ((($439)) + 2|0);
 $441 = HEAP8[$440>>0]|0;
 $442 = $441&255;
 $443 = ($442|0)==(4);
 do {
  if ($443) {
   $444 = $3;
   $445 = ((($444)) + 20|0);
   $446 = HEAP32[$445>>2]|0;
   switch ($446|0) {
   case 0:  {
    $no_of_bytes3 = 1;
    break;
   }
   case 1:  {
    $no_of_bytes3 = 2;
    break;
   }
   case 7:  {
    $no_of_bytes3 = 8;
    break;
   }
   default: {
    $no_of_bytes3 = 4;
   }
   }
   $447 = $is_record_set;
   $448 = ($447<<24>>24)!=(0);
   if ($448) {
    $449 = $no_of_bytes3;
    _OutputBytes($dwRecInit,$449,0);
    break;
   } else {
    $450 = HEAP32[(584)>>2]|0;
    $451 = $no_of_bytes3;
    (_SetCurrOffset($450,$451,1,1)|0);
    break;
   }
  }
 } while(0);
 $452 = HEAP32[$i>>2]|0;
 $453 = $2;
 $454 = (($453) + ($452<<4)|0);
 $455 = HEAP8[$454>>0]|0;
 $456 = $455&255;
 $457 = ($456|0)!=(0);
 if ($457) {
  $458 = HEAP32[$i>>2]|0;
  $459 = $2;
  $460 = (($459) + ($458<<4)|0);
  $461 = ((($460)) + 12|0);
  $462 = HEAP32[$461>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $462;
  (_EmitErr(153,$vararg_buffer13)|0);
 }
 $463 = $old_tokencount;
 HEAP32[(616)>>2] = $463;
 $464 = $old_stringbufferend;
 HEAP32[(612)>>2] = $464;
 $0 = 0;
 $465 = $0;
 STACKTOP = sp;return ($465|0);
}
function _output_float($opnd,$size) {
 $opnd = $opnd|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 16|0;
 $0 = $opnd;
 $1 = $size;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(192);
 if (!($5)) {
  $31 = $0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = $0;
  $38 = ((($37)) + 52|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39&255) >>> 5;
  $41 = $40 & 1;
  $42 = $41&255;
  $43 = $42&255;
  $44 = $0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 1|0);
  $48 = HEAP8[$47>>0]|0;
  _atofloat($buffer,$35,$36,$43,$48);
  $49 = $1;
  _OutputBytes($buffer,$49,0);
  STACKTOP = sp;return;
 }
 dest=$buffer; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_SizeFromMemtype($8,254,0)|0);
 $i = $9;
 $10 = $i;
 $11 = $1;
 $12 = ($10>>>0)>($11>>>0);
 if ($12) {
  (_EmitErr(55,$vararg_buffer)|0);
  $49 = $1;
  _OutputBytes($buffer,$49,0);
  STACKTOP = sp;return;
 } else {
  $13 = $0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $i;
  $19 = $0;
  $20 = ((($19)) + 52|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21&255) >>> 5;
  $23 = $22 & 1;
  $24 = $23&255;
  $25 = $24&255;
  $26 = $0;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  _atofloat($buffer,$17,$18,$25,$30);
  $49 = $1;
  _OutputBytes($buffer,$49,0);
  STACKTOP = sp;return;
 }
}
function _little_endian($src,$len) {
 $src = $src|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $len;
 $2 = HEAP32[(612)>>2]|0;
 $dst = $2;
 while(1) {
  $3 = $1;
  $4 = ($3>>>0)>(1);
  $5 = $1;
  if (!($4)) {
   break;
  }
  $6 = (($5) + -1)|0;
  $1 = $6;
  $7 = $0;
  $8 = $1;
  $9 = (($7) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $dst;
  HEAP8[$11>>0] = $10;
  $12 = $0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $dst;
  $15 = $1;
  $16 = (($14) + ($15)|0);
  HEAP8[$16>>0] = $13;
  $17 = $dst;
  $18 = ((($17)) + 1|0);
  $dst = $18;
  $19 = $0;
  $20 = ((($19)) + 1|0);
  $0 = $20;
  $21 = $1;
  $22 = (($21) + -1)|0;
  $1 = $22;
 }
 $23 = ($5|0)!=(0);
 if (!($23)) {
  $27 = HEAP32[(612)>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $24 = $0;
 $25 = HEAP8[$24>>0]|0;
 $26 = $dst;
 HEAP8[$26>>0] = $25;
 $27 = HEAP32[(612)>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _InitializeArray($f,$pi,$tokenarray) {
 $f = $f|0;
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bArray = 0, $filler = 0, $i = 0, $j = 0, $lvl = 0;
 var $no_of_bytes = 0, $old_tokencount = 0, $oldofs = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $j = sp + 24|0;
 $lvl = sp + 20|0;
 $1 = $f;
 $2 = $pi;
 $3 = $tokenarray;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $i = $5;
 $6 = (_GetCurrOffset()|0);
 $oldofs = $6;
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_SizeFromMemtype($9,254,$12)|0);
 $no_of_bytes = $13;
 $14 = $i;
 $15 = $3;
 $16 = (($15) + ($14<<4)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(9);
 do {
  if ($19) {
   label = 4;
  } else {
   $20 = $i;
   $21 = $3;
   $22 = (($21) + ($20<<4)|0);
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)!=(60);
   if ($26) {
    $27 = $i;
    $28 = $3;
    $29 = (($28) + ($27<<4)|0);
    $30 = ((($29)) + 1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(123);
    if ($33) {
     label = 4;
     break;
    }
   }
   $160 = $2;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + 1)|0;
   HEAP32[$160>>2] = $162;
   $163 = HEAP32[(616)>>2]|0;
   $old_tokencount = $163;
   $164 = HEAP32[(616)>>2]|0;
   $165 = (($164) + 1)|0;
   HEAP32[$j>>2] = $165;
   $166 = $i;
   $167 = $3;
   $168 = (($167) + ($166<<4)|0);
   $169 = ((($168)) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)==(0);
   if ($171) {
    $172 = $1;
    $173 = ((($172)) + 64|0);
    $174 = HEAP32[$j>>2]|0;
    $175 = $3;
    $176 = (_Tokenize($173,$174,$175,1)|0);
    HEAP32[(616)>>2] = $176;
   } else {
    $177 = $i;
    $178 = $3;
    $179 = (($178) + ($177<<4)|0);
    $180 = ((($179)) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = HEAP32[$j>>2]|0;
    $183 = $3;
    $184 = (_Tokenize($181,$182,$183,1)|0);
    HEAP32[(616)>>2] = $184;
   }
   $185 = $3;
   $186 = $no_of_bytes;
   $187 = $1;
   $188 = ((($187)) + 52|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $1;
   $191 = ((($190)) + 20|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $192 & 32;
   $194 = $193&255;
   $195 = HEAP32[(616)>>2]|0;
   $196 = (_data_item($j,$185,0,$186,$189,1,0,$194,0,$195)|0);
   $rc = $196;
   $197 = $old_tokencount;
   HEAP32[(616)>>2] = $197;
  }
 } while(0);
 L10: do {
  if ((label|0) == 4) {
   $34 = $i;
   HEAP32[$j>>2] = $34;
   HEAP32[$lvl>>2] = 0;
   $bArray = 0;
   L12: while(1) {
    $35 = HEAP32[$j>>2]|0;
    $36 = $3;
    $37 = (($36) + ($35<<4)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = ($39|0)!=(0);
    if (!($40)) {
     break;
    }
    $41 = HEAP32[$j>>2]|0;
    $42 = $3;
    $43 = (($42) + ($41<<4)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ($45|0)==(40);
    do {
     if ($46) {
      $47 = HEAP32[$lvl>>2]|0;
      $48 = (($47) + 1)|0;
      HEAP32[$lvl>>2] = $48;
     } else {
      $49 = HEAP32[$j>>2]|0;
      $50 = $3;
      $51 = (($50) + ($49<<4)|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($53|0)==(41);
      $55 = HEAP32[$lvl>>2]|0;
      if ($54) {
       $56 = (($55) + -1)|0;
       HEAP32[$lvl>>2] = $56;
       break;
      }
      $57 = ($55|0)==(0);
      if ($57) {
       $58 = HEAP32[$j>>2]|0;
       $59 = $3;
       $60 = (($59) + ($58<<4)|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = $61&255;
       $63 = ($62|0)==(44);
       if ($63) {
        break L12;
       }
      }
      $64 = HEAP32[$j>>2]|0;
      $65 = $3;
      $66 = (($65) + ($64<<4)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = ($68|0)==(7);
      if ($69) {
       $70 = HEAP32[$j>>2]|0;
       $71 = $3;
       $72 = (($71) + ($70<<4)|0);
       $73 = ((($72)) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(185);
       if ($75) {
        $bArray = 1;
        break;
       }
      }
      $76 = $no_of_bytes;
      $77 = ($76|0)==(1);
      if ($77) {
       $78 = HEAP32[$j>>2]|0;
       $79 = $3;
       $80 = (($79) + ($78<<4)|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = $81&255;
       $83 = ($82|0)==(9);
       if ($83) {
        $84 = HEAP32[$j>>2]|0;
        $85 = $3;
        $86 = (($85) + ($84<<4)|0);
        $87 = ((($86)) + 1|0);
        $88 = HEAP8[$87>>0]|0;
        $89 = $88 << 24 >> 24;
        $90 = ($89|0)==(34);
        if (!($90)) {
         $91 = HEAP32[$j>>2]|0;
         $92 = $3;
         $93 = (($92) + ($91<<4)|0);
         $94 = ((($93)) + 1|0);
         $95 = HEAP8[$94>>0]|0;
         $96 = $95 << 24 >> 24;
         $97 = ($96|0)==(39);
         if (!($97)) {
          break;
         }
        }
        $bArray = 1;
       }
      }
     }
    } while(0);
    $98 = HEAP32[$j>>2]|0;
    $99 = (($98) + 1)|0;
    HEAP32[$j>>2] = $99;
   }
   $100 = HEAP32[$j>>2]|0;
   $101 = $2;
   HEAP32[$101>>2] = $100;
   $102 = $bArray;
   $103 = $102 << 24 >> 24;
   $104 = ($103|0)==(0);
   if ($104) {
    $105 = $i;
    $106 = $3;
    $107 = (($106) + ($105<<4)|0);
    $108 = ((($107)) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    HEAP32[$vararg_buffer>>2] = $109;
    $110 = (_EmitErr(152,$vararg_buffer)|0);
    $0 = $110;
    $254 = $0;
    STACKTOP = sp;return ($254|0);
   }
   $111 = HEAP32[$j>>2]|0;
   $112 = $3;
   $113 = (($112) + ($111<<4)|0);
   $114 = ((($113)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $i;
   $117 = $3;
   $118 = (($117) + ($116<<4)|0);
   $119 = ((($118)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $115;
   $122 = $120;
   $123 = (($121) - ($122))|0;
   HEAP32[$lvl>>2] = $123;
   $124 = HEAP32[$lvl>>2]|0;
   $125 = ($124|0)==(2);
   do {
    if ($125) {
     $126 = $1;
     $127 = ((($126)) + 36|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $1;
     $130 = ((($129)) + 40|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($128|0)==($131|0);
     if ($132) {
      $133 = $i;
      $134 = $3;
      $135 = (($134) + ($133<<4)|0);
      $136 = ((($135)) + 1|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = $137 << 24 >> 24;
      $139 = ($138|0)==(34);
      if (!($139)) {
       $140 = $i;
       $141 = $3;
       $142 = (($141) + ($140<<4)|0);
       $143 = ((($142)) + 1|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144 << 24 >> 24;
       $146 = ($145|0)==(39);
       if (!($146)) {
        break;
       }
      }
      $rc = 0;
      break L10;
     }
    }
   } while(0);
   $147 = $i;
   HEAP32[$lvl>>2] = $147;
   $148 = $3;
   $149 = $no_of_bytes;
   $150 = $1;
   $151 = ((($150)) + 52|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $1;
   $154 = ((($153)) + 20|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $155 & 32;
   $157 = $156&255;
   $158 = HEAP32[$j>>2]|0;
   $159 = (_data_item($lvl,$148,0,$149,$152,1,0,$157,0,$158)|0);
   $rc = $159;
  }
 } while(0);
 $198 = (_GetCurrOffset()|0);
 $199 = $oldofs;
 $200 = (($198) - ($199))|0;
 $no_of_bytes = $200;
 $201 = $no_of_bytes;
 $202 = $1;
 $203 = ((($202)) + 36|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($201>>>0)>($204>>>0);
 do {
  if ($205) {
   $206 = $i;
   $207 = $3;
   $208 = (($207) + ($206<<4)|0);
   $209 = ((($208)) + 12|0);
   $210 = HEAP32[$209>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $210;
   (_EmitErr(154,$vararg_buffer1)|0);
   $rc = -1;
  } else {
   $211 = $no_of_bytes;
   $212 = $1;
   $213 = ((($212)) + 36|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($211>>>0)<($214>>>0);
   if ($215) {
    $filler = 0;
    $216 = HEAP32[(584)>>2]|0;
    $217 = ($216|0)!=(0|0);
    if ($217) {
     $218 = HEAP32[(584)>>2]|0;
     $219 = ((($218)) + 60|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ((($220)) + 44|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)==(3);
     if ($223) {
      $224 = HEAP32[(584)>>2]|0;
      $225 = $1;
      $226 = ((($225)) + 36|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = $no_of_bytes;
      $229 = (($227) - ($228))|0;
      (_SetCurrOffset($224,$229,1,1)|0);
      break;
     }
    }
    $230 = $1;
    $231 = ((($230)) + 36|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $1;
    $234 = ((($233)) + 40|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = ($232|0)==($235|0);
    do {
     if ($236) {
      $237 = $1;
      $238 = ((($237)) + 64|0);
      $239 = HEAP8[$238>>0]|0;
      $240 = $239 << 24 >> 24;
      $241 = ($240|0)==(34);
      if (!($241)) {
       $242 = $1;
       $243 = ((($242)) + 64|0);
       $244 = HEAP8[$243>>0]|0;
       $245 = $244 << 24 >> 24;
       $246 = ($245|0)==(39);
       if (!($246)) {
        break;
       }
      }
      $filler = 32;
     }
    } while(0);
    $247 = $filler;
    $248 = $1;
    $249 = ((($248)) + 36|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $no_of_bytes;
    $252 = (($250) - ($251))|0;
    _FillDataBytes($247,$252);
   }
  }
 } while(0);
 $253 = $rc;
 $0 = $253;
 $254 = $0;
 STACKTOP = sp;return ($254|0);
}
function _cv_write_debug_tables($symbols,$types,$pv) {
 $symbols = $symbols|0;
 $types = $types|0;
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cv = 0, $i = 0, $len = 0, $objname = 0, $or$cond = 0, $sym = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 36|0;
 $cv = sp;
 $0 = $symbols;
 $1 = $types;
 $2 = $pv;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $1;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(3);
  if ($10) {
   $11 = $0;
   $12 = ((($11)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(3);
   if (!($14)) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  (_InternalError(83628,986)|0);
 }
 $15 = $0;
 $16 = ((($15)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$cv>>2] = $19;
 $20 = $0;
 $21 = ((($cv)) + 4|0);
 HEAP32[$21>>2] = $20;
 $22 = $1;
 $23 = ((($22)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($cv)) + 8|0);
 HEAP32[$27>>2] = $26;
 $28 = $1;
 $29 = ((($cv)) + 12|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($cv)) + 24|0);
 HEAP16[$30>>1] = 4096;
 $31 = ((($cv)) + 20|0);
 HEAP32[$31>>2] = 0;
 $32 = $2;
 $33 = ((($cv)) + 16|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP8[(6006)>>0]|0;
 $35 = $34&255;
 $36 = ((($cv)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$37>>2] = $35;
 $38 = ((($cv)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 4|0);
 HEAP32[$38>>2] = $40;
 $41 = HEAP8[(6006)>>0]|0;
 $42 = $41&255;
 $43 = HEAP32[$cv>>2]|0;
 HEAP32[$43>>2] = $42;
 $44 = HEAP32[$cv>>2]|0;
 $45 = ((($44)) + 4|0);
 HEAP32[$cv>>2] = $45;
 $46 = HEAP32[(392)>>2]|0;
 $objname = $46;
 $47 = $objname;
 $48 = (_strlen($47)|0);
 HEAP32[$i>>2] = $48;
 while(1) {
  $49 = HEAP32[$i>>2]|0;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   break;
  }
  $51 = $objname;
  $52 = HEAP32[$i>>2]|0;
  $53 = (($51) + ($52)|0);
  $54 = ((($53)) + -1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55 << 24 >> 24;
  $57 = ($56|0)==(47);
  if ($57) {
   break;
  }
  $58 = $objname;
  $59 = HEAP32[$i>>2]|0;
  $60 = (($58) + ($59)|0);
  $61 = ((($60)) + -1|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(92);
  if ($64) {
   break;
  }
  $65 = HEAP32[$i>>2]|0;
  $66 = (($65) + -1)|0;
  HEAP32[$i>>2] = $66;
 }
 $67 = HEAP32[$i>>2]|0;
 $68 = $objname;
 $69 = (($68) + ($67)|0);
 $objname = $69;
 $70 = $objname;
 $71 = (_strlen($70)|0);
 $len = $71;
 $72 = $len;
 $73 = (7 + ($72))|0;
 $74 = $73&65535;
 $75 = HEAP32[$cv>>2]|0;
 HEAP8[$75>>0]=$74&255;HEAP8[$75+1>>0]=$74>>8;
 $76 = HEAP32[$cv>>2]|0;
 $77 = ((($76)) + 2|0);
 HEAP8[$77>>0]=9&255;HEAP8[$77+1>>0]=9>>8;
 $78 = HEAP32[$cv>>2]|0;
 $79 = ((($78)) + 4|0);
 HEAP8[$79>>0]=1&255;HEAP8[$79+1>>0]=(1>>8)&255;HEAP8[$79+2>>0]=(1>>16)&255;HEAP8[$79+3>>0]=1>>24;
 $80 = HEAP32[$cv>>2]|0;
 $81 = ((($80)) + 8|0);
 HEAP32[$cv>>2] = $81;
 $82 = $len;
 $83 = $82&255;
 $84 = HEAP32[$cv>>2]|0;
 $85 = ((($84)) + 1|0);
 HEAP32[$cv>>2] = $85;
 HEAP8[$84>>0] = $83;
 $86 = HEAP32[$cv>>2]|0;
 $87 = $objname;
 $88 = $len;
 _memcpy(($86|0),($87|0),($88|0))|0;
 $89 = $len;
 $90 = HEAP32[$cv>>2]|0;
 $91 = (($90) + ($89)|0);
 HEAP32[$cv>>2] = $91;
 $92 = (_strlen(89672)|0);
 $len = $92;
 $93 = $len;
 $94 = (7 + ($93))|0;
 $95 = $94&65535;
 $96 = HEAP32[$cv>>2]|0;
 HEAP8[$96>>0]=$95&255;HEAP8[$96+1>>0]=$95>>8;
 $97 = HEAP32[$cv>>2]|0;
 $98 = ((($97)) + 2|0);
 HEAP8[$98>>0]=1&255;HEAP8[$98+1>>0]=1>>8;
 $99 = HEAP8[(557)>>0]|0;
 $100 = $99&255;
 $101 = ($100|0)==(2);
 if ($101) {
  $106 = 208;
 } else {
  $102 = HEAP32[(544)>>2]|0;
  $103 = $102 & 240;
  $104 = $103 >>> 4;
  $106 = $104;
 }
 $105 = $106&255;
 $107 = HEAP32[$cv>>2]|0;
 $108 = ((($107)) + 4|0);
 HEAP8[$108>>0] = $105;
 $109 = HEAP32[$cv>>2]|0;
 $110 = ((($109)) + 4|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[$cv>>2]|0;
  $115 = ((($114)) + 4|0);
  HEAP8[$115>>0] = 1;
 }
 $116 = HEAP32[$cv>>2]|0;
 $117 = ((($116)) + 5|0);
 HEAP8[$117>>0] = 3;
 $118 = HEAP32[$cv>>2]|0;
 $119 = ((($118)) + 6|0);
 HEAP8[$119>>0]=0&255;HEAP8[$119+1>>0]=0>>8;
 $120 = HEAP32[(512)>>2]|0;
 $121 = ($120|0)!=(0);
 if ($121) {
  $122 = HEAP32[(512)>>2]|0;
  $123 = ($122|0)==(6);
  if ($123) {
   $124 = HEAP32[$cv>>2]|0;
   $125 = ((($124)) + 6|0);
   $126 = HEAPU8[$125>>0]|(HEAPU8[$125+1>>0]<<8);
   $127 = $126 & -225;
   $128 = $127 | 64;
   HEAP8[$125>>0]=$128&255;HEAP8[$125+1>>0]=$128>>8;
  } else {
   $129 = HEAP32[(512)>>2]|0;
   $130 = 1 << $129;
   $131 = 104 & $130;
   $132 = ($131|0)!=(0);
   $133 = $132 ? 1 : 0;
   $134 = $133&255;
   $135 = HEAP32[$cv>>2]|0;
   $136 = ((($135)) + 6|0);
   $137 = $134&255;
   $138 = HEAPU8[$136>>0]|(HEAPU8[$136+1>>0]<<8);
   $139 = $137 & 7;
   $140 = ($139 << 5)&65535;
   $141 = $138 & -225;
   $142 = $141 | $140;
   HEAP8[$136>>0]=$142&255;HEAP8[$136+1>>0]=$142>>8;
  }
  $143 = HEAP32[(512)>>2]|0;
  $144 = 1 << $143;
  $145 = 112 & $144;
  $146 = ($145|0)!=(0);
  $147 = $146 ? 1 : 0;
  $148 = $147&255;
  $149 = HEAP32[$cv>>2]|0;
  $150 = ((($149)) + 6|0);
  $151 = $148&255;
  $152 = HEAPU8[$150>>0]|(HEAPU8[$150+1>>0]<<8);
  $153 = $151 & 7;
  $154 = ($153 << 8)&65535;
  $155 = $152 & -1793;
  $156 = $155 | $154;
  HEAP8[$150>>0]=$156&255;HEAP8[$150+1>>0]=$156>>8;
 }
 $157 = HEAP32[$cv>>2]|0;
 $158 = ((($157)) + 8|0);
 HEAP32[$cv>>2] = $158;
 $159 = $len;
 $160 = $159&255;
 $161 = HEAP32[$cv>>2]|0;
 $162 = ((($161)) + 1|0);
 HEAP32[$cv>>2] = $162;
 HEAP8[$161>>0] = $160;
 $163 = HEAP32[$cv>>2]|0;
 $164 = $len;
 _memcpy(($163|0),(89672|0),($164|0))|0;
 $165 = $len;
 $166 = HEAP32[$cv>>2]|0;
 $167 = (($166) + ($165)|0);
 HEAP32[$cv>>2] = $167;
 $sym = 0;
 while(1) {
  $168 = $sym;
  $169 = (_SymEnum($168,$i)|0);
  $sym = $169;
  $170 = ($169|0)!=(0|0);
  if (!($170)) {
   break;
  }
  $171 = $sym;
  $172 = ((($171)) + 16|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($173|0)==(7);
  if (!($174)) {
   continue;
  }
  $175 = $sym;
  $176 = ((($175)) + 40|0);
  $177 = ((($176)) + 2|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = ($179|0)!=(3);
  if (!($180)) {
   continue;
  }
  $181 = $sym;
  $182 = ((($181)) + 40|0);
  $183 = HEAP16[$182>>1]|0;
  $184 = $183&65535;
  $185 = ($184|0)==(0);
  if (!($185)) {
   continue;
  }
  $186 = ((($cv)) + 24|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = ($188|0)>=(4096);
  if (!($189)) {
   (_InternalError(83628,1058)|0);
  }
  $190 = $sym;
  _cv_write_type($cv,$190);
 }
 $sym = 0;
 L36: while(1) {
  $191 = $sym;
  $192 = (_SymEnum($191,$i)|0);
  $sym = $192;
  $193 = ($192|0)!=(0|0);
  if (!($193)) {
   break;
  }
  $194 = $sym;
  $195 = ((($194)) + 16|0);
  $196 = HEAP32[$195>>2]|0;
  switch ($196|0) {
  case 7:  {
   $197 = HEAP8[(6007)>>0]|0;
   $198 = $197&255;
   $199 = ($198|0)<(2);
   if ($199) {
    continue L36;
   }
   break;
  }
  case 1:  {
   break;
  }
  default: {
   continue L36;
  }
  }
  $200 = HEAP8[(6007)>>0]|0;
  $201 = $200&255;
  $202 = ($201|0)<(3);
  $203 = $sym;
  $204 = ((($203)) + 24|0);
  $205 = HEAP16[$204>>1]|0;
  if ($202) {
   $206 = ($205&65535) >>> 4;
   $207 = $206 & 1;
   $208 = $207&255;
   $209 = $208&255;
   $210 = ($209|0)!=(0);
   if ($210) {
    continue;
   }
  } else {
   $211 = ($205&65535) >>> 6;
   $212 = $211 & 1;
   $213 = $212&255;
   $214 = $213&255;
   $215 = ($214|0)!=(0);
   if ($215) {
    continue;
   }
  }
  $216 = $sym;
  $217 = ((($216)) + 24|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = ($218&65535) >>> 5;
  $220 = $219 & 1;
  $221 = $220&255;
  $222 = $221&255;
  $223 = ($222|0)!=(0);
  if ($223) {
   continue;
  }
  $224 = ((($cv)) + 24|0);
  $225 = HEAP16[$224>>1]|0;
  $226 = $225&65535;
  $227 = ($226|0)>=(4096);
  if (!($227)) {
   (_InternalError(83628,1082)|0);
  }
  $228 = $sym;
  _cv_write_symbol($cv,$228);
 }
 $229 = ((($cv)) + 12|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($230)) + 60|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ((($232)) + 20|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = ((($cv)) + 12|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = ((($cv)) + 8|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = ((($cv)) + 16|0);
 $240 = HEAP32[$239>>2]|0;
 (FUNCTION_TABLE_iiiii[$234 & 255]($236,$238,1200,$240)|0);
 $241 = ((($cv)) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = ((($242)) + 60|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ((($244)) + 20|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($cv)) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = HEAP32[$cv>>2]|0;
 $250 = ((($cv)) + 16|0);
 $251 = HEAP32[$250>>2]|0;
 (FUNCTION_TABLE_iiiii[$246 & 255]($248,$249,1200,$251)|0);
 $252 = $1;
 $253 = ((($252)) + 60|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + 8|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = $1;
 $258 = ((($257)) + 36|0);
 HEAP32[$258>>2] = $256;
 $259 = $1;
 $260 = ((($259)) + 60|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ((($261)) + 4|0);
 HEAP32[$262>>2] = 0;
 $263 = $0;
 $264 = ((($263)) + 60|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = ((($265)) + 8|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = $0;
 $269 = ((($268)) + 36|0);
 HEAP32[$269>>2] = $267;
 $270 = $0;
 $271 = ((($270)) + 60|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = ((($272)) + 4|0);
 HEAP32[$273>>2] = 0;
 STACKTOP = sp;return;
}
function _cv_write_type($cv,$sym) {
 $cv = $cv|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $count = 0, $namesize = 0, $property = 0, $size = 0, $tmp = 0, $type = 0, $typelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp;
 $0 = $cv;
 $1 = $sym;
 $2 = $1;
 $type = $2;
 $3 = $1;
 $4 = ((($3)) + 40|0);
 $5 = ((($4)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(3);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(195);
  if (!($12)) {
   STACKTOP = sp;return;
  }
  $13 = $1;
  $14 = ((($13)) + 28|0);
  $15 = ((($14)) + 2|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)!=(128);
  if ($18) {
   $19 = $1;
   $20 = ((($19)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $1;
    $24 = ((($23)) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 40|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27&65535;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $0;
     $31 = ((($30)) + 20|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0);
     if ($33) {
      $34 = $0;
      $35 = $1;
      $36 = ((($35)) + 32|0);
      $37 = HEAP32[$36>>2]|0;
      _cv_write_type($34,$37);
     }
    }
   }
  }
  $38 = $0;
  $39 = $1;
  $40 = (_cv_write_ptr_type($38,$39)|0);
  $41 = $1;
  $42 = ((($41)) + 40|0);
  HEAP16[$42>>1] = $40;
  STACKTOP = sp;return;
 }
 $43 = ((($9)) + 40|0);
 $44 = ((($43)) + 2|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($46|0)==(0);
 if ($47) {
  STACKTOP = sp;return;
 }
 $48 = $1;
 $49 = ((($48)) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50>>>0)>=(32768);
 $52 = $51 ? 4 : 0;
 $typelen = $52;
 $53 = $0;
 $54 = ((($53)) + 20|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0);
 $57 = $56 ? 8 : 0;
 $58 = $57&65535;
 $property = $58;
 HEAP32[$count>>2] = 0;
 $59 = ((($count)) + 4|0);
 HEAP32[$59>>2] = 0;
 $60 = ((($count)) + 8|0);
 HEAP32[$60>>2] = 0;
 $61 = $type;
 $62 = $0;
 _cv_enum_fields($61,212,$62,$count);
 $63 = $1;
 $64 = ((($63)) + 44|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $1;
  $69 = ((($68)) + 44|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71;
 } else {
  $72 = 9;
 }
 $namesize = $72;
 $73 = $0;
 $74 = ((($73)) + 24|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = (($75) + 1)<<16>>16;
 HEAP16[$74>>1] = $76;
 $77 = $1;
 $78 = ((($77)) + 40|0);
 HEAP16[$78>>1] = $75;
 $79 = $type;
 $80 = ((($79)) + 40|0);
 $81 = ((($80)) + 2|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 switch ($83|0) {
 case 2:  {
  $84 = $typelen;
  $85 = (12 + ($84))|0;
  $86 = (($85) + 1)|0;
  $87 = $namesize;
  $88 = (($86) + ($87))|0;
  $89 = (($88) + 3)|0;
  $90 = $89 & -4;
  $size = $90;
  $91 = $0;
  $92 = ((($91)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 60|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($95)) + 20|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $0;
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $0;
  $102 = ((($101)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $size;
  $105 = $0;
  $106 = ((($105)) + 16|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiiii[$97 & 255]($100,$103,$104,$107)|0);
  $109 = $0;
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = $108;
  $111 = $size;
  $112 = (($111) - 2)|0;
  $113 = $112&65535;
  $114 = $0;
  $115 = ((($114)) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  HEAP8[$116>>0]=$113&255;HEAP8[$116+1>>0]=$113>>8;
  $117 = $0;
  $118 = ((($117)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($119)) + 2|0);
  HEAP8[$120>>0]=6&255;HEAP8[$120+1>>0]=6>>8;
  $121 = HEAP32[$count>>2]|0;
  $122 = $121&65535;
  $123 = $0;
  $124 = ((($123)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($125)) + 4|0);
  HEAP8[$126>>0]=$122&255;HEAP8[$126+1>>0]=$122>>8;
  $127 = $0;
  $128 = ((($127)) + 24|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = (($129) + 1)<<16>>16;
  HEAP16[$128>>1] = $130;
  $131 = $0;
  $132 = ((($131)) + 8|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($133)) + 6|0);
  HEAP8[$134>>0]=$129&255;HEAP8[$134+1>>0]=$129>>8;
  $135 = $property;
  $136 = $0;
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ((($138)) + 8|0);
  HEAP8[$139>>0]=$135&255;HEAP8[$139+1>>0]=$135>>8;
  $140 = $0;
  $141 = ((($140)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($142)) + 10|0);
  $tmp = $143;
  break;
 }
 case 4:  {
  $144 = $property;
  $145 = $144&65535;
  $146 = $145 | 1;
  $147 = $146&65535;
  $property = $147;
  label = 15;
  break;
 }
 case 1:  {
  label = 15;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 15) {
  $148 = $typelen;
  $149 = (16 + ($148))|0;
  $150 = (($149) + 1)|0;
  $151 = $namesize;
  $152 = (($150) + ($151))|0;
  $153 = (($152) + 3)|0;
  $154 = $153 & -4;
  $size = $154;
  $155 = $0;
  $156 = ((($155)) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($157)) + 60|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ((($159)) + 20|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $0;
  $163 = ((($162)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $0;
  $166 = ((($165)) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $size;
  $169 = $0;
  $170 = ((($169)) + 16|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (FUNCTION_TABLE_iiiii[$161 & 255]($164,$167,$168,$171)|0);
  $173 = $0;
  $174 = ((($173)) + 8|0);
  HEAP32[$174>>2] = $172;
  $175 = $size;
  $176 = (($175) - 2)|0;
  $177 = $176&65535;
  $178 = $0;
  $179 = ((($178)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  HEAP8[$180>>0]=$177&255;HEAP8[$180+1>>0]=$177>>8;
  $181 = $0;
  $182 = ((($181)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ((($183)) + 2|0);
  HEAP8[$184>>0]=5&255;HEAP8[$184+1>>0]=5>>8;
  $185 = HEAP32[$count>>2]|0;
  $186 = $185&65535;
  $187 = $0;
  $188 = ((($187)) + 8|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ((($189)) + 4|0);
  HEAP8[$190>>0]=$186&255;HEAP8[$190+1>>0]=$186>>8;
  $191 = $0;
  $192 = ((($191)) + 24|0);
  $193 = HEAP16[$192>>1]|0;
  $194 = (($193) + 1)<<16>>16;
  HEAP16[$192>>1] = $194;
  $195 = $0;
  $196 = ((($195)) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ((($197)) + 6|0);
  HEAP8[$198>>0]=$193&255;HEAP8[$198+1>>0]=$193>>8;
  $199 = $property;
  $200 = $0;
  $201 = ((($200)) + 8|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ((($202)) + 8|0);
  HEAP8[$203>>0]=$199&255;HEAP8[$203+1>>0]=$199>>8;
  $204 = $0;
  $205 = ((($204)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($206)) + 10|0);
  HEAP8[$207>>0]=0&255;HEAP8[$207+1>>0]=0>>8;
  $208 = $0;
  $209 = ((($208)) + 8|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($210)) + 12|0);
  HEAP8[$211>>0]=0&255;HEAP8[$211+1>>0]=0>>8;
  $212 = $0;
  $213 = ((($212)) + 8|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($214)) + 14|0);
  $tmp = $215;
 }
 $216 = $typelen;
 $217 = ($216|0)!=(0);
 if ($217) {
  $218 = $tmp;
  HEAP16[$218>>1] = -32764;
  $219 = $1;
  $220 = ((($219)) + 36|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $tmp;
  $223 = ((($222)) + 4|0);
  HEAP32[$223>>2] = $221;
  $224 = $tmp;
  $225 = ((($224)) + 8|0);
  $tmp = $225;
 } else {
  $226 = $1;
  $227 = ((($226)) + 36|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228&65535;
  $230 = $tmp;
  HEAP16[$230>>1] = $229;
  $231 = $tmp;
  $232 = ((($231)) + 2|0);
  $tmp = $232;
 }
 $233 = $namesize;
 $234 = $233&255;
 $235 = $tmp;
 $236 = ((($235)) + 1|0);
 $tmp = $236;
 HEAP8[$235>>0] = $234;
 $237 = $tmp;
 $238 = $1;
 $239 = ((($238)) + 44|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240&255;
 $242 = ($241|0)!=(0);
 if ($242) {
  $243 = $1;
  $244 = ((($243)) + 4|0);
  $245 = HEAP32[$244>>2]|0;
  $247 = $245;
 } else {
  $247 = 83651;
 }
 $246 = $namesize;
 _memcpy(($237|0),($247|0),($246|0))|0;
 $248 = $namesize;
 $249 = $tmp;
 $250 = (($249) + ($248)|0);
 $tmp = $250;
 $251 = $tmp;
 $252 = $0;
 $253 = ((($252)) + 12|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + 60|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ((($256)) + 12|0);
 $258 = HEAP32[$257>>2]|0;
 _PadBytes($251,$258);
 $259 = $size;
 $260 = $0;
 $261 = ((($260)) + 8|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (($262) + ($259)|0);
 HEAP32[$261>>2] = $263;
 $264 = $0;
 $265 = ((($264)) + 12|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ((($266)) + 60|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ((($268)) + 20|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = $0;
 $272 = ((($271)) + 12|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = $0;
 $275 = ((($274)) + 8|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = $0;
 $278 = ((($277)) + 16|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = (FUNCTION_TABLE_iiiii[$270 & 255]($273,$276,4,$279)|0);
 $281 = $0;
 $282 = ((($281)) + 8|0);
 HEAP32[$282>>2] = $280;
 $283 = ((($count)) + 4|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = (4 + ($284))|0;
 $size = $285;
 $286 = $size;
 $287 = (($286) - 2)|0;
 $288 = $287&65535;
 $289 = $0;
 $290 = ((($289)) + 8|0);
 $291 = HEAP32[$290>>2]|0;
 HEAP8[$291>>0]=$288&255;HEAP8[$291+1>>0]=$288>>8;
 $292 = $0;
 $293 = ((($292)) + 8|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = ((($294)) + 2|0);
 HEAP8[$295>>0]=516&255;HEAP8[$295+1>>0]=516>>8;
 $296 = $0;
 $297 = ((($296)) + 8|0);
 $298 = HEAP32[$297>>2]|0;
 $299 = ((($298)) + 4|0);
 HEAP32[$297>>2] = $299;
 $300 = ((($count)) + 8|0);
 HEAP32[$300>>2] = 0;
 $301 = $type;
 $302 = $0;
 _cv_enum_fields($301,213,$302,$count);
 STACKTOP = sp;return;
}
function _cv_write_symbol($cv,$sym) {
 $cv = $cv|0;
 $sym = $sym|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $Ofssize = 0;
 var $cnt = 0, $fixup = 0, $i = 0, $lcl = 0, $len = 0, $locals = 0, $ofs = 0, $proc = 0, $rlctype = 0, $tmp = 0, $typeref = 0, $typeref1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cnt = sp + 16|0;
 $locals = sp + 8|0;
 $0 = $cv;
 $1 = $sym;
 $2 = $1;
 $3 = (_GetSymOfssize($2)|0);
 $4 = $3&255;
 $Ofssize = $4;
 $5 = $1;
 $6 = $Ofssize;
 $7 = (_GetCVStructLen($5,$6)|0);
 $8 = $7&65535;
 $len = $8;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = ((($21)) + 44|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (1 + ($24))|0;
 $26 = $len;
 $27 = (($25) + ($26))|0;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_iiiii[$15 & 255]($18,$20,$27,$30)|0);
 $32 = $0;
 HEAP32[$32>>2] = $31;
 $33 = $1;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(7);
 $37 = $1;
 if ($36) {
  $38 = ((($37)) + 44|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = (5 + ($40))|0;
  $42 = $41&65535;
  $43 = $0;
  $44 = HEAP32[$43>>2]|0;
  HEAP8[$44>>0]=$42&255;HEAP8[$44+1>>0]=$42>>8;
  $45 = $0;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 2|0);
  HEAP8[$47>>0]=4&255;HEAP8[$47+1>>0]=4>>8;
  $48 = $1;
  $49 = ((($48)) + 40|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = ($50<<16>>16)!=(0);
  $52 = $1;
  if ($51) {
   $53 = ((($52)) + 40|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $0;
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 4|0);
   HEAP8[$57>>0]=$54&255;HEAP8[$57+1>>0]=$54>>8;
  } else {
   $58 = $Ofssize;
   $59 = (_GetTyperef($52,$58)|0);
   $60 = $0;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 4|0);
   HEAP8[$62>>0]=$59&255;HEAP8[$62+1>>0]=$59>>8;
  }
  $63 = $0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = HEAPU8[$65>>0]|(HEAPU8[$65+1>>0]<<8);
  $67 = $66&65535;
  $68 = ($67|0)==(0);
  if ($68) {
   STACKTOP = sp;return;
  }
  $69 = $len;
  $70 = $0;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($69)|0);
  HEAP32[$70>>2] = $72;
  $73 = $1;
  $74 = ((($73)) + 44|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $0;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 1|0);
  HEAP32[$76>>2] = $78;
  HEAP8[$77>>0] = $75;
  $79 = $0;
  $80 = HEAP32[$79>>2]|0;
  $81 = $1;
  $82 = ((($81)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $1;
  $85 = ((($84)) + 44|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  _memcpy(($80|0),($83|0),($87|0))|0;
  $88 = $1;
  $89 = ((($88)) + 44|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $0;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($91)|0);
  HEAP32[$92>>2] = $94;
  STACKTOP = sp;return;
 }
 $95 = ((($37)) + 24|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = ($96&65535) >>> 11;
 $98 = $97 & 1;
 $99 = $98&255;
 $100 = $99&255;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = HEAP8[(6007)>>0]|0;
  $103 = $102&255;
  $104 = ($103|0)>=(1);
  if ($104) {
   $105 = $1;
   $proc = $105;
   $106 = $proc;
   $107 = ((($106)) + 60|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($108)) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   HEAP32[$locals>>2] = $110;
   $111 = $proc;
   $112 = ((($111)) + 60|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($locals)) + 4|0);
   HEAP32[$116>>2] = $115;
   $i = 0;
   while(1) {
    $117 = $i;
    $118 = ($117|0)<(2);
    if (!($118)) {
     break;
    }
    $119 = $i;
    $120 = (($cnt) + ($119<<2)|0);
    HEAP32[$120>>2] = 0;
    $121 = $i;
    $122 = (($locals) + ($121<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $lcl = $123;
    while(1) {
     $124 = $lcl;
     $125 = ($124|0)!=(0|0);
     $126 = $i;
     if (!($125)) {
      break;
     }
     $127 = (($cnt) + ($126<<2)|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($128) + 1)|0;
     HEAP32[$127>>2] = $129;
     $130 = $lcl;
     $131 = ((($130)) + 20|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(195);
     if ($133) {
      $134 = $0;
      $135 = $lcl;
      $136 = (_cv_write_ptr_type($134,$135)|0);
      $$sink = $136;
     } else {
      $137 = $lcl;
      $138 = $Ofssize;
      $139 = (_GetTyperef($137,$138)|0);
      $$sink = $139;
     }
     $140 = $$sink&65535;
     $141 = $140&65535;
     $typeref = $141;
     $142 = $lcl;
     $143 = ((($142)) + 24|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = ($144&65535) >>> 9;
     $146 = $145 & 1;
     $147 = $146&255;
     $148 = ($147<<24>>24)!=(0);
     if ($148) {
      $149 = $0;
      $150 = $lcl;
      $151 = $typeref;
      $152 = $Ofssize;
      _cv_write_array_type($149,$150,$151,$152);
      $153 = $0;
      $154 = ((($153)) + 24|0);
      $155 = HEAP16[$154>>1]|0;
      $156 = $155&65535;
      $157 = (($156) - 1)|0;
      $158 = $157&65535;
      $typeref = $158;
     }
     $159 = $typeref;
     $160 = $lcl;
     $161 = ((($160)) + 56|0);
     HEAP16[$161>>1] = $159;
     $162 = $lcl;
     $163 = ((($162)) + 68|0);
     $164 = HEAP32[$163>>2]|0;
     $lcl = $164;
    }
    $165 = (($126) + 1)|0;
    $i = $165;
   }
   $166 = $Ofssize;
   $167 = $166&255;
   $168 = ($167|0)==(0);
   $169 = $1;
   $170 = ((($169)) + 44|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   if ($168) {
    $173 = (28 + ($172))|0;
    $174 = $173&65535;
    $175 = $0;
    $176 = HEAP32[$175>>2]|0;
    HEAP8[$176>>0]=$174&255;HEAP8[$176+1>>0]=$174>>8;
    $177 = $1;
    $178 = ((($177)) + 24|0);
    $179 = HEAP16[$178>>1]|0;
    $180 = ($179&65535) >>> 7;
    $181 = $180 & 1;
    $182 = $181&255;
    $183 = $182&255;
    $184 = ($183|0)!=(0);
    $185 = $184 ? 261 : 260;
    $186 = $185&65535;
    $187 = $0;
    $188 = HEAP32[$187>>2]|0;
    $189 = ((($188)) + 2|0);
    HEAP8[$189>>0]=$186&255;HEAP8[$189+1>>0]=$186>>8;
    $190 = $0;
    $191 = HEAP32[$190>>2]|0;
    $192 = ((($191)) + 4|0);
    HEAP8[$192>>0]=0&255;HEAP8[$192+1>>0]=(0>>8)&255;HEAP8[$192+2>>0]=(0>>16)&255;HEAP8[$192+3>>0]=0>>24;
    $193 = $0;
    $194 = HEAP32[$193>>2]|0;
    $195 = ((($194)) + 8|0);
    HEAP8[$195>>0]=0&255;HEAP8[$195+1>>0]=(0>>8)&255;HEAP8[$195+2>>0]=(0>>16)&255;HEAP8[$195+3>>0]=0>>24;
    $196 = $0;
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($197)) + 12|0);
    HEAP8[$198>>0]=0&255;HEAP8[$198+1>>0]=(0>>8)&255;HEAP8[$198+2>>0]=(0>>16)&255;HEAP8[$198+3>>0]=0>>24;
    $199 = $1;
    $200 = ((($199)) + 36|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $201&65535;
    $203 = $0;
    $204 = HEAP32[$203>>2]|0;
    $205 = ((($204)) + 16|0);
    HEAP8[$205>>0]=$202&255;HEAP8[$205+1>>0]=$202>>8;
    $206 = $1;
    $207 = ((($206)) + 60|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ((($208)) + 41|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = $0;
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($213)) + 18|0);
    HEAP8[$214>>0]=$211&255;HEAP8[$214+1>>0]=$211>>8;
    $215 = $1;
    $216 = ((($215)) + 36|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $217&65535;
    $219 = $0;
    $220 = HEAP32[$219>>2]|0;
    $221 = ((($220)) + 20|0);
    HEAP8[$221>>0]=$218&255;HEAP8[$221+1>>0]=$218>>8;
    $222 = $0;
    $223 = HEAP32[$222>>2]|0;
    $224 = ((($223)) + 22|0);
    HEAP8[$224>>0]=0&255;HEAP8[$224+1>>0]=0>>8;
    $225 = $0;
    $226 = HEAP32[$225>>2]|0;
    $227 = ((($226)) + 24|0);
    HEAP8[$227>>0]=0&255;HEAP8[$227+1>>0]=0>>8;
    $228 = $0;
    $229 = ((($228)) + 24|0);
    $230 = HEAP16[$229>>1]|0;
    $231 = $0;
    $232 = HEAP32[$231>>2]|0;
    $233 = ((($232)) + 26|0);
    HEAP8[$233>>0]=$230&255;HEAP8[$233+1>>0]=$230>>8;
    $234 = $1;
    $235 = ((($234)) + 20|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)==(130);
    $238 = $237 ? 4 : 0;
    $239 = $238&255;
    $240 = $0;
    $241 = HEAP32[$240>>2]|0;
    $242 = ((($241)) + 28|0);
    HEAP8[$242>>0] = $239;
    $rlctype = 9;
    $ofs = 22;
   } else {
    $243 = (36 + ($172))|0;
    $244 = $243&65535;
    $245 = $0;
    $246 = HEAP32[$245>>2]|0;
    HEAP8[$246>>0]=$244&255;HEAP8[$246+1>>0]=$244>>8;
    $247 = $1;
    $248 = ((($247)) + 24|0);
    $249 = HEAP16[$248>>1]|0;
    $250 = ($249&65535) >>> 7;
    $251 = $250 & 1;
    $252 = $251&255;
    $253 = $252&255;
    $254 = ($253|0)!=(0);
    $255 = $254 ? 517 : 516;
    $256 = $255&65535;
    $257 = $0;
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($258)) + 2|0);
    HEAP8[$259>>0]=$256&255;HEAP8[$259+1>>0]=$256>>8;
    $260 = $0;
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($261)) + 4|0);
    HEAP8[$262>>0]=0&255;HEAP8[$262+1>>0]=(0>>8)&255;HEAP8[$262+2>>0]=(0>>16)&255;HEAP8[$262+3>>0]=0>>24;
    $263 = $0;
    $264 = HEAP32[$263>>2]|0;
    $265 = ((($264)) + 8|0);
    HEAP8[$265>>0]=0&255;HEAP8[$265+1>>0]=(0>>8)&255;HEAP8[$265+2>>0]=(0>>16)&255;HEAP8[$265+3>>0]=0>>24;
    $266 = $0;
    $267 = HEAP32[$266>>2]|0;
    $268 = ((($267)) + 12|0);
    HEAP8[$268>>0]=0&255;HEAP8[$268+1>>0]=(0>>8)&255;HEAP8[$268+2>>0]=(0>>16)&255;HEAP8[$268+3>>0]=0>>24;
    $269 = $1;
    $270 = ((($269)) + 36|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = $0;
    $273 = HEAP32[$272>>2]|0;
    $274 = ((($273)) + 16|0);
    HEAP8[$274>>0]=$271&255;HEAP8[$274+1>>0]=($271>>8)&255;HEAP8[$274+2>>0]=($271>>16)&255;HEAP8[$274+3>>0]=$271>>24;
    $275 = $1;
    $276 = ((($275)) + 60|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = ((($277)) + 41|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = $0;
    $282 = HEAP32[$281>>2]|0;
    $283 = ((($282)) + 20|0);
    HEAP8[$283>>0]=$280&255;HEAP8[$283+1>>0]=($280>>8)&255;HEAP8[$283+2>>0]=($280>>16)&255;HEAP8[$283+3>>0]=$280>>24;
    $284 = $1;
    $285 = ((($284)) + 36|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $0;
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 24|0);
    HEAP8[$289>>0]=$286&255;HEAP8[$289+1>>0]=($286>>8)&255;HEAP8[$289+2>>0]=($286>>16)&255;HEAP8[$289+3>>0]=$286>>24;
    $290 = $0;
    $291 = HEAP32[$290>>2]|0;
    $292 = ((($291)) + 28|0);
    HEAP8[$292>>0]=0&255;HEAP8[$292+1>>0]=(0>>8)&255;HEAP8[$292+2>>0]=(0>>16)&255;HEAP8[$292+3>>0]=0>>24;
    $293 = $0;
    $294 = HEAP32[$293>>2]|0;
    $295 = ((($294)) + 32|0);
    HEAP8[$295>>0]=0&255;HEAP8[$295+1>>0]=0>>8;
    $296 = $0;
    $297 = ((($296)) + 24|0);
    $298 = HEAP16[$297>>1]|0;
    $299 = $0;
    $300 = HEAP32[$299>>2]|0;
    $301 = ((($300)) + 34|0);
    HEAP8[$301>>0]=$298&255;HEAP8[$301+1>>0]=$298>>8;
    $302 = $1;
    $303 = ((($302)) + 20|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = ($304|0)==(130);
    $306 = $305 ? 4 : 0;
    $307 = $proc;
    $308 = ((($307)) + 60|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = ((($309)) + 40|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = ($311&255) >>> 7;
    $313 = $312&255;
    $314 = ($313|0)!=(0);
    $315 = $314 ? 1 : 0;
    $316 = $306 | $315;
    $317 = $316&255;
    $318 = $0;
    $319 = HEAP32[$318>>2]|0;
    $320 = ((($319)) + 36|0);
    HEAP8[$320>>0] = $317;
    $rlctype = 10;
    $ofs = 28;
   }
   $321 = $0;
   $322 = $1;
   $323 = HEAP32[$cnt>>2]|0;
   _cv_write_type_procedure($321,$322,$323);
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 do {
  if ((label|0) == 24) {
   $324 = $1;
   $325 = ((($324)) + 20|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ($326|0)==(129);
   if (!($327)) {
    $328 = $1;
    $329 = ((($328)) + 20|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330|0)==(130);
    if (!($331)) {
     $383 = $1;
     $384 = ((($383)) + 24|0);
     $385 = HEAP16[$384>>1]|0;
     $386 = ($385&65535) >>> 4;
     $387 = $386 & 1;
     $388 = $387&255;
     $389 = ($388<<24>>24)!=(0);
     if ($389) {
      $390 = $len;
      $391 = (($390) - 2)|0;
      $392 = (($391) + 1)|0;
      $393 = $1;
      $394 = ((($393)) + 44|0);
      $395 = HEAP8[$394>>0]|0;
      $396 = $395&255;
      $397 = (($392) + ($396))|0;
      $398 = $397&65535;
      $399 = $0;
      $400 = HEAP32[$399>>2]|0;
      HEAP8[$400>>0]=$398&255;HEAP8[$400+1>>0]=$398>>8;
      $401 = $0;
      $402 = HEAP32[$401>>2]|0;
      $403 = ((($402)) + 2|0);
      HEAP8[$403>>0]=3&255;HEAP8[$403+1>>0]=3>>8;
      $404 = HEAP16[67770>>1]|0;
      $405 = $0;
      $406 = HEAP32[$405>>2]|0;
      $407 = ((($406)) + 4|0);
      HEAP8[$407>>0]=$404&255;HEAP8[$407+1>>0]=$404>>8;
      $408 = $1;
      $409 = ((($408)) + 8|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = ($410|0)>=(32768);
      if ($411) {
       $412 = $0;
       $413 = HEAP32[$412>>2]|0;
       $414 = ((($413)) + 6|0);
       HEAP8[$414>>0]=-32764&255;HEAP8[$414+1>>0]=-32764>>8;
       $415 = $0;
       $416 = HEAP32[$415>>2]|0;
       $417 = ((($416)) + 6|0);
       $tmp = $417;
       $418 = $1;
       $419 = ((($418)) + 8|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = $tmp;
       HEAP32[$421>>2] = $420;
      } else {
       $422 = $1;
       $423 = ((($422)) + 8|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = $424&65535;
       $426 = $0;
       $427 = HEAP32[$426>>2]|0;
       $428 = ((($427)) + 6|0);
       HEAP8[$428>>0]=$425&255;HEAP8[$428+1>>0]=$425>>8;
      }
      $429 = $len;
      $430 = $0;
      $431 = HEAP32[$430>>2]|0;
      $432 = (($431) + ($429)|0);
      HEAP32[$430>>2] = $432;
      $433 = $1;
      $434 = ((($433)) + 44|0);
      $435 = HEAP8[$434>>0]|0;
      $436 = $0;
      $437 = HEAP32[$436>>2]|0;
      $438 = ((($437)) + 1|0);
      HEAP32[$436>>2] = $438;
      HEAP8[$437>>0] = $435;
      $439 = $0;
      $440 = HEAP32[$439>>2]|0;
      $441 = $1;
      $442 = ((($441)) + 4|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = $1;
      $445 = ((($444)) + 44|0);
      $446 = HEAP8[$445>>0]|0;
      $447 = $446&255;
      _memcpy(($440|0),($443|0),($447|0))|0;
      $448 = $1;
      $449 = ((($448)) + 44|0);
      $450 = HEAP8[$449>>0]|0;
      $451 = $450&255;
      $452 = $0;
      $453 = HEAP32[$452>>2]|0;
      $454 = (($453) + ($451)|0);
      HEAP32[$452>>2] = $454;
      STACKTOP = sp;return;
     }
     $455 = $1;
     $456 = ((($455)) + 24|0);
     $457 = HEAP16[$456>>1]|0;
     $458 = ($457&65535) >>> 9;
     $459 = $458 & 1;
     $460 = $459&255;
     $461 = ($460<<24>>24)!=(0);
     if ($461) {
      $462 = $0;
      $463 = ((($462)) + 24|0);
      $464 = HEAP16[$463>>1]|0;
      $typeref1 = $464;
      $465 = $0;
      $466 = $1;
      $467 = $Ofssize;
      _cv_write_array_type($465,$466,0,$467);
     } else {
      $468 = $1;
      $469 = $Ofssize;
      $470 = (_GetTyperef($468,$469)|0);
      $typeref1 = $470;
     }
     $471 = $Ofssize;
     $472 = $471&255;
     $473 = ($472|0)==(0);
     $474 = $1;
     $475 = ((($474)) + 44|0);
     $476 = HEAP8[$475>>0]|0;
     $477 = $476&255;
     if ($473) {
      $478 = (9 + ($477))|0;
      $479 = $478&65535;
      $480 = $0;
      $481 = HEAP32[$480>>2]|0;
      HEAP8[$481>>0]=$479&255;HEAP8[$481+1>>0]=$479>>8;
      $482 = $1;
      $483 = ((($482)) + 24|0);
      $484 = HEAP16[$483>>1]|0;
      $485 = ($484&65535) >>> 7;
      $486 = $485 & 1;
      $487 = $486&255;
      $488 = $487&255;
      $489 = ($488|0)!=(0);
      $490 = $489 ? 258 : 257;
      $491 = $490&65535;
      $492 = $0;
      $493 = HEAP32[$492>>2]|0;
      $494 = ((($493)) + 2|0);
      HEAP8[$494>>0]=$491&255;HEAP8[$494+1>>0]=$491>>8;
      $495 = $0;
      $496 = HEAP32[$495>>2]|0;
      $497 = ((($496)) + 4|0);
      HEAP8[$497>>0]=0&255;HEAP8[$497+1>>0]=0>>8;
      $498 = $0;
      $499 = HEAP32[$498>>2]|0;
      $500 = ((($499)) + 6|0);
      HEAP8[$500>>0]=0&255;HEAP8[$500+1>>0]=0>>8;
      $501 = $typeref1;
      $502 = $0;
      $503 = HEAP32[$502>>2]|0;
      $504 = ((($503)) + 8|0);
      HEAP8[$504>>0]=$501&255;HEAP8[$504+1>>0]=$501>>8;
      $rlctype = 9;
      $ofs = 4;
      break;
     }
     $505 = (11 + ($477))|0;
     $506 = $505&65535;
     $507 = $0;
     $508 = HEAP32[$507>>2]|0;
     HEAP8[$508>>0]=$506&255;HEAP8[$508+1>>0]=$506>>8;
     $509 = HEAP8[(579)>>0]|0;
     $510 = $509&255;
     $511 = $510 & 1;
     $512 = ($511|0)!=(0);
     if ($512) {
      $513 = $1;
      $514 = ((($513)) + 12|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ((($515)) + 60|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ((($517)) + 52|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = ($519|0)!=(0|0);
      if ($520) {
       $521 = $1;
       $522 = ((($521)) + 12|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = ((($523)) + 60|0);
       $525 = HEAP32[$524>>2]|0;
       $526 = ((($525)) + 52|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = ((($527)) + 4|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = (_strcmp($529,83636)|0);
       $531 = ($530|0)==(0);
       if ($531) {
        $532 = $1;
        $533 = ((($532)) + 24|0);
        $534 = HEAP16[$533>>1]|0;
        $535 = ($534&65535) >>> 7;
        $536 = $535 & 1;
        $537 = $536&255;
        $538 = $537&255;
        $539 = ($538|0)!=(0);
        $540 = $539 ? 526 : 525;
        $541 = $540&65535;
        $542 = $0;
        $543 = HEAP32[$542>>2]|0;
        $544 = ((($543)) + 2|0);
        HEAP8[$544>>0]=$541&255;HEAP8[$544+1>>0]=$541>>8;
       } else {
        label = 43;
       }
      } else {
       label = 43;
      }
     } else {
      label = 43;
     }
     if ((label|0) == 43) {
      $545 = $1;
      $546 = ((($545)) + 24|0);
      $547 = HEAP16[$546>>1]|0;
      $548 = ($547&65535) >>> 7;
      $549 = $548 & 1;
      $550 = $549&255;
      $551 = $550&255;
      $552 = ($551|0)!=(0);
      $553 = $552 ? 514 : 513;
      $554 = $553&65535;
      $555 = $0;
      $556 = HEAP32[$555>>2]|0;
      $557 = ((($556)) + 2|0);
      HEAP8[$557>>0]=$554&255;HEAP8[$557+1>>0]=$554>>8;
     }
     $558 = $0;
     $559 = HEAP32[$558>>2]|0;
     $560 = ((($559)) + 4|0);
     HEAP8[$560>>0]=0&255;HEAP8[$560+1>>0]=(0>>8)&255;HEAP8[$560+2>>0]=(0>>16)&255;HEAP8[$560+3>>0]=0>>24;
     $561 = $0;
     $562 = HEAP32[$561>>2]|0;
     $563 = ((($562)) + 8|0);
     HEAP8[$563>>0]=0&255;HEAP8[$563+1>>0]=0>>8;
     $564 = $typeref1;
     $565 = $0;
     $566 = HEAP32[$565>>2]|0;
     $567 = ((($566)) + 10|0);
     HEAP8[$567>>0]=$564&255;HEAP8[$567+1>>0]=$564>>8;
     $rlctype = 10;
     $ofs = 4;
     break;
    }
   }
   $332 = $Ofssize;
   $333 = $332&255;
   $334 = ($333|0)==(0);
   $335 = $1;
   $336 = ((($335)) + 44|0);
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   if ($334) {
    $339 = (8 + ($338))|0;
    $340 = $339&65535;
    $341 = $0;
    $342 = HEAP32[$341>>2]|0;
    HEAP8[$342>>0]=$340&255;HEAP8[$342+1>>0]=$340>>8;
    $343 = $0;
    $344 = HEAP32[$343>>2]|0;
    $345 = ((($344)) + 2|0);
    HEAP8[$345>>0]=265&255;HEAP8[$345+1>>0]=265>>8;
    $346 = $0;
    $347 = HEAP32[$346>>2]|0;
    $348 = ((($347)) + 4|0);
    HEAP8[$348>>0]=0&255;HEAP8[$348+1>>0]=0>>8;
    $349 = $0;
    $350 = HEAP32[$349>>2]|0;
    $351 = ((($350)) + 6|0);
    HEAP8[$351>>0]=0&255;HEAP8[$351+1>>0]=0>>8;
    $352 = $1;
    $353 = ((($352)) + 20|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($354|0)==(130);
    $356 = $355 ? 4 : 0;
    $357 = $356&255;
    $358 = $0;
    $359 = HEAP32[$358>>2]|0;
    $360 = ((($359)) + 8|0);
    HEAP8[$360>>0] = $357;
    $rlctype = 9;
    $ofs = 4;
    break;
   } else {
    $361 = (10 + ($338))|0;
    $362 = $361&65535;
    $363 = $0;
    $364 = HEAP32[$363>>2]|0;
    HEAP8[$364>>0]=$362&255;HEAP8[$364+1>>0]=$362>>8;
    $365 = $0;
    $366 = HEAP32[$365>>2]|0;
    $367 = ((($366)) + 2|0);
    HEAP8[$367>>0]=521&255;HEAP8[$367+1>>0]=521>>8;
    $368 = $0;
    $369 = HEAP32[$368>>2]|0;
    $370 = ((($369)) + 4|0);
    HEAP8[$370>>0]=0&255;HEAP8[$370+1>>0]=(0>>8)&255;HEAP8[$370+2>>0]=(0>>16)&255;HEAP8[$370+3>>0]=0>>24;
    $371 = $0;
    $372 = HEAP32[$371>>2]|0;
    $373 = ((($372)) + 8|0);
    HEAP8[$373>>0]=0&255;HEAP8[$373+1>>0]=0>>8;
    $374 = $1;
    $375 = ((($374)) + 20|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($376|0)==(130);
    $378 = $377 ? 4 : 0;
    $379 = $378&255;
    $380 = $0;
    $381 = HEAP32[$380>>2]|0;
    $382 = ((($381)) + 10|0);
    HEAP8[$382>>0] = $379;
    $rlctype = 10;
    $ofs = 4;
    break;
   }
  }
 } while(0);
 $568 = $ofs;
 $569 = $0;
 $570 = HEAP32[$569>>2]|0;
 $571 = (($570) + ($568)|0);
 HEAP32[$569>>2] = $571;
 $572 = $0;
 $573 = ((($572)) + 4|0);
 $574 = HEAP32[$573>>2]|0;
 $575 = ((($574)) + 60|0);
 $576 = HEAP32[$575>>2]|0;
 $577 = ((($576)) + 4|0);
 $578 = HEAP32[$577>>2]|0;
 $579 = $0;
 $580 = HEAP32[$579>>2]|0;
 $581 = $0;
 $582 = ((($581)) + 4|0);
 $583 = HEAP32[$582>>2]|0;
 $584 = ((($583)) + 60|0);
 $585 = HEAP32[$584>>2]|0;
 $586 = ((($585)) + 12|0);
 $587 = HEAP32[$586>>2]|0;
 $588 = $580;
 $589 = $587;
 $590 = (($588) - ($589))|0;
 $591 = (($578) + ($590))|0;
 $592 = $0;
 $593 = ((($592)) + 4|0);
 $594 = HEAP32[$593>>2]|0;
 $595 = ((($594)) + 60|0);
 $596 = HEAP32[$595>>2]|0;
 $597 = ((($596)) + 8|0);
 HEAP32[$597>>2] = $591;
 $598 = HEAP32[(6100)>>2]|0;
 $599 = ($598|0)==(2);
 $600 = $1;
 if ($599) {
  $601 = (_CreateFixup($600,13,0)|0);
  $fixup = $601;
  $602 = $0;
  $603 = ((($602)) + 4|0);
  $604 = HEAP32[$603>>2]|0;
  $605 = ((($604)) + 60|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = ((($606)) + 8|0);
  $608 = HEAP32[$607>>2]|0;
  $609 = $fixup;
  $610 = ((($609)) + 12|0);
  HEAP32[$610>>2] = $608;
  $611 = $fixup;
  $612 = $0;
  $613 = ((($612)) + 4|0);
  $614 = HEAP32[$613>>2]|0;
  $615 = $0;
  $616 = HEAP32[$615>>2]|0;
  _store_fixup($611,$614,$616);
  $617 = $1;
  $618 = (_CreateFixup($617,8,0)|0);
  $fixup = $618;
  $619 = $0;
  $620 = ((($619)) + 4|0);
  $621 = HEAP32[$620>>2]|0;
  $622 = ((($621)) + 60|0);
  $623 = HEAP32[$622>>2]|0;
  $624 = ((($623)) + 8|0);
  $625 = HEAP32[$624>>2]|0;
  $626 = $rlctype;
  $627 = ($626|0)==(10);
  $628 = $627 ? 4 : 2;
  $629 = (($625) + ($628))|0;
  $630 = $fixup;
  $631 = ((($630)) + 12|0);
  HEAP32[$631>>2] = $629;
  $632 = $fixup;
  $633 = $0;
  $634 = ((($633)) + 4|0);
  $635 = HEAP32[$634>>2]|0;
  $636 = $0;
  $637 = HEAP32[$636>>2]|0;
  _store_fixup($632,$635,$637);
 } else {
  $638 = $rlctype;
  $639 = (_CreateFixup($600,$638,0)|0);
  $fixup = $639;
  $640 = $0;
  $641 = ((($640)) + 4|0);
  $642 = HEAP32[$641>>2]|0;
  $643 = ((($642)) + 60|0);
  $644 = HEAP32[$643>>2]|0;
  $645 = ((($644)) + 8|0);
  $646 = HEAP32[$645>>2]|0;
  $647 = $fixup;
  $648 = ((($647)) + 12|0);
  HEAP32[$648>>2] = $646;
  $649 = $fixup;
  $650 = $0;
  $651 = ((($650)) + 4|0);
  $652 = HEAP32[$651>>2]|0;
  $653 = $0;
  $654 = HEAP32[$653>>2]|0;
  _store_fixup($649,$652,$654);
 }
 $655 = $len;
 $656 = $ofs;
 $657 = (($655) - ($656))|0;
 $658 = $0;
 $659 = HEAP32[$658>>2]|0;
 $660 = (($659) + ($657)|0);
 HEAP32[$658>>2] = $660;
 $661 = $1;
 $662 = ((($661)) + 44|0);
 $663 = HEAP8[$662>>0]|0;
 $664 = $0;
 $665 = HEAP32[$664>>2]|0;
 $666 = ((($665)) + 1|0);
 HEAP32[$664>>2] = $666;
 HEAP8[$665>>0] = $663;
 $667 = $0;
 $668 = HEAP32[$667>>2]|0;
 $669 = $1;
 $670 = ((($669)) + 4|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = $1;
 $673 = ((($672)) + 44|0);
 $674 = HEAP8[$673>>0]|0;
 $675 = $674&255;
 _memcpy(($668|0),($671|0),($675|0))|0;
 $676 = $1;
 $677 = ((($676)) + 44|0);
 $678 = HEAP8[$677>>0]|0;
 $679 = $678&255;
 $680 = $0;
 $681 = HEAP32[$680>>2]|0;
 $682 = (($681) + ($679)|0);
 HEAP32[$680>>2] = $682;
 $683 = $1;
 $684 = ((($683)) + 24|0);
 $685 = HEAP16[$684>>1]|0;
 $686 = ($685&65535) >>> 11;
 $687 = $686 & 1;
 $688 = $687&255;
 $689 = $688&255;
 $690 = ($689|0)!=(0);
 if (!($690)) {
  STACKTOP = sp;return;
 }
 $691 = HEAP8[(6007)>>0]|0;
 $692 = $691&255;
 $693 = ($692|0)>=(1);
 if (!($693)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $694 = $i;
  $695 = ($694|0)<(2);
  if (!($695)) {
   break;
  }
  $696 = $i;
  $697 = (($locals) + ($696<<2)|0);
  $698 = HEAP32[$697>>2]|0;
  $lcl = $698;
  while(1) {
   $699 = $lcl;
   $700 = ($699|0)!=(0|0);
   if (!($700)) {
    break;
   }
   $701 = $lcl;
   $702 = ((($701)) + 16|0);
   $703 = HEAP32[$702>>2]|0;
   $704 = ($703|0)==(10);
   do {
    if ($704) {
     $len = 8;
     $705 = $0;
     $706 = ((($705)) + 4|0);
     $707 = HEAP32[$706>>2]|0;
     $708 = ((($707)) + 60|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = ((($709)) + 20|0);
     $711 = HEAP32[$710>>2]|0;
     $712 = $0;
     $713 = ((($712)) + 4|0);
     $714 = HEAP32[$713>>2]|0;
     $715 = $0;
     $716 = HEAP32[$715>>2]|0;
     $717 = $lcl;
     $718 = ((($717)) + 44|0);
     $719 = HEAP8[$718>>0]|0;
     $720 = $719&255;
     $721 = (1 + ($720))|0;
     $722 = $len;
     $723 = (($721) + ($722))|0;
     $724 = $0;
     $725 = ((($724)) + 16|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = (FUNCTION_TABLE_iiiii[$711 & 255]($714,$716,$723,$726)|0);
     $728 = $0;
     HEAP32[$728>>2] = $727;
     $729 = $lcl;
     $730 = ((($729)) + 44|0);
     $731 = HEAP8[$730>>0]|0;
     $732 = $731&255;
     $733 = (7 + ($732))|0;
     $734 = $733&65535;
     $735 = $0;
     $736 = HEAP32[$735>>2]|0;
     HEAP8[$736>>0]=$734&255;HEAP8[$736+1>>0]=$734>>8;
     $737 = $0;
     $738 = HEAP32[$737>>2]|0;
     $739 = ((($738)) + 2|0);
     HEAP8[$739>>0]=2&255;HEAP8[$739+1>>0]=2>>8;
     $740 = $lcl;
     $741 = ((($740)) + 56|0);
     $742 = HEAP16[$741>>1]|0;
     $743 = $0;
     $744 = HEAP32[$743>>2]|0;
     $745 = ((($744)) + 4|0);
     HEAP8[$745>>0]=$742&255;HEAP8[$745+1>>0]=$742>>8;
     $746 = $lcl;
     $747 = (_cv_get_register($746)|0);
     $748 = $0;
     $749 = HEAP32[$748>>2]|0;
     $750 = ((($749)) + 6|0);
     HEAP8[$750>>0]=$747&255;HEAP8[$750+1>>0]=$747>>8;
    } else {
     $751 = $Ofssize;
     $752 = $751&255;
     $753 = ($752|0)==(0);
     if ($753) {
      $len = 8;
      $754 = $0;
      $755 = ((($754)) + 4|0);
      $756 = HEAP32[$755>>2]|0;
      $757 = ((($756)) + 60|0);
      $758 = HEAP32[$757>>2]|0;
      $759 = ((($758)) + 20|0);
      $760 = HEAP32[$759>>2]|0;
      $761 = $0;
      $762 = ((($761)) + 4|0);
      $763 = HEAP32[$762>>2]|0;
      $764 = $0;
      $765 = HEAP32[$764>>2]|0;
      $766 = $lcl;
      $767 = ((($766)) + 44|0);
      $768 = HEAP8[$767>>0]|0;
      $769 = $768&255;
      $770 = (1 + ($769))|0;
      $771 = $len;
      $772 = (($770) + ($771))|0;
      $773 = $0;
      $774 = ((($773)) + 16|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = (FUNCTION_TABLE_iiiii[$760 & 255]($763,$765,$772,$775)|0);
      $777 = $0;
      HEAP32[$777>>2] = $776;
      $778 = $lcl;
      $779 = ((($778)) + 44|0);
      $780 = HEAP8[$779>>0]|0;
      $781 = $780&255;
      $782 = (7 + ($781))|0;
      $783 = $782&65535;
      $784 = $0;
      $785 = HEAP32[$784>>2]|0;
      HEAP8[$785>>0]=$783&255;HEAP8[$785+1>>0]=$783>>8;
      $786 = $0;
      $787 = HEAP32[$786>>2]|0;
      $788 = ((($787)) + 2|0);
      HEAP8[$788>>0]=256&255;HEAP8[$788+1>>0]=256>>8;
      $789 = $lcl;
      $790 = ((($789)) + 8|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = $791&65535;
      $793 = $0;
      $794 = HEAP32[$793>>2]|0;
      $795 = ((($794)) + 4|0);
      HEAP8[$795>>0]=$792&255;HEAP8[$795+1>>0]=$792>>8;
      $796 = $lcl;
      $797 = ((($796)) + 56|0);
      $798 = HEAP16[$797>>1]|0;
      $799 = $0;
      $800 = HEAP32[$799>>2]|0;
      $801 = ((($800)) + 6|0);
      HEAP8[$801>>0]=$798&255;HEAP8[$801+1>>0]=$798>>8;
      break;
     }
     $802 = $Ofssize;
     $803 = $802&255;
     $804 = ($803|0)==(2);
     if (!($804)) {
      $805 = $proc;
      $806 = ((($805)) + 60|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ((($807)) + 42|0);
      $809 = HEAP16[$808>>1]|0;
      $810 = $809&65535;
      $811 = (15660 + (($810*12)|0)|0);
      $812 = ((($811)) + 10|0);
      $813 = HEAP8[$812>>0]|0;
      $814 = $813&255;
      $815 = ($814|0)!=(5);
      if (!($815)) {
       $len = 10;
       $893 = $0;
       $894 = ((($893)) + 4|0);
       $895 = HEAP32[$894>>2]|0;
       $896 = ((($895)) + 60|0);
       $897 = HEAP32[$896>>2]|0;
       $898 = ((($897)) + 20|0);
       $899 = HEAP32[$898>>2]|0;
       $900 = $0;
       $901 = ((($900)) + 4|0);
       $902 = HEAP32[$901>>2]|0;
       $903 = $0;
       $904 = HEAP32[$903>>2]|0;
       $905 = $lcl;
       $906 = ((($905)) + 44|0);
       $907 = HEAP8[$906>>0]|0;
       $908 = $907&255;
       $909 = (1 + ($908))|0;
       $910 = $len;
       $911 = (($909) + ($910))|0;
       $912 = $0;
       $913 = ((($912)) + 16|0);
       $914 = HEAP32[$913>>2]|0;
       $915 = (FUNCTION_TABLE_iiiii[$899 & 255]($902,$904,$911,$914)|0);
       $916 = $0;
       HEAP32[$916>>2] = $915;
       $917 = $lcl;
       $918 = ((($917)) + 44|0);
       $919 = HEAP8[$918>>0]|0;
       $920 = $919&255;
       $921 = (9 + ($920))|0;
       $922 = $921&65535;
       $923 = $0;
       $924 = HEAP32[$923>>2]|0;
       HEAP8[$924>>0]=$922&255;HEAP8[$924+1>>0]=$922>>8;
       $925 = $0;
       $926 = HEAP32[$925>>2]|0;
       $927 = ((($926)) + 2|0);
       HEAP8[$927>>0]=512&255;HEAP8[$927+1>>0]=512>>8;
       $928 = $lcl;
       $929 = ((($928)) + 8|0);
       $930 = HEAP32[$929>>2]|0;
       $931 = $0;
       $932 = HEAP32[$931>>2]|0;
       $933 = ((($932)) + 4|0);
       HEAP8[$933>>0]=$930&255;HEAP8[$933+1>>0]=($930>>8)&255;HEAP8[$933+2>>0]=($930>>16)&255;HEAP8[$933+3>>0]=$930>>24;
       $934 = $lcl;
       $935 = ((($934)) + 56|0);
       $936 = HEAP16[$935>>1]|0;
       $937 = $0;
       $938 = HEAP32[$937>>2]|0;
       $939 = ((($938)) + 8|0);
       HEAP8[$939>>0]=$936&255;HEAP8[$939+1>>0]=$936>>8;
       break;
      }
     }
     $len = 12;
     $816 = $0;
     $817 = ((($816)) + 4|0);
     $818 = HEAP32[$817>>2]|0;
     $819 = ((($818)) + 60|0);
     $820 = HEAP32[$819>>2]|0;
     $821 = ((($820)) + 20|0);
     $822 = HEAP32[$821>>2]|0;
     $823 = $0;
     $824 = ((($823)) + 4|0);
     $825 = HEAP32[$824>>2]|0;
     $826 = $0;
     $827 = HEAP32[$826>>2]|0;
     $828 = $lcl;
     $829 = ((($828)) + 44|0);
     $830 = HEAP8[$829>>0]|0;
     $831 = $830&255;
     $832 = (1 + ($831))|0;
     $833 = $len;
     $834 = (($832) + ($833))|0;
     $835 = $0;
     $836 = ((($835)) + 16|0);
     $837 = HEAP32[$836>>2]|0;
     $838 = (FUNCTION_TABLE_iiiii[$822 & 255]($825,$827,$834,$837)|0);
     $839 = $0;
     HEAP32[$839>>2] = $838;
     $840 = $lcl;
     $841 = ((($840)) + 44|0);
     $842 = HEAP8[$841>>0]|0;
     $843 = $842&255;
     $844 = (11 + ($843))|0;
     $845 = $844&65535;
     $846 = $0;
     $847 = HEAP32[$846>>2]|0;
     HEAP8[$847>>0]=$845&255;HEAP8[$847+1>>0]=$845>>8;
     $848 = $0;
     $849 = HEAP32[$848>>2]|0;
     $850 = ((($849)) + 2|0);
     HEAP8[$850>>0]=524&255;HEAP8[$850+1>>0]=524>>8;
     $851 = $lcl;
     $852 = ((($851)) + 8|0);
     $853 = HEAP32[$852>>2]|0;
     $854 = $0;
     $855 = HEAP32[$854>>2]|0;
     $856 = ((($855)) + 4|0);
     HEAP8[$856>>0]=$853&255;HEAP8[$856+1>>0]=($853>>8)&255;HEAP8[$856+2>>0]=($853>>16)&255;HEAP8[$856+3>>0]=$853>>24;
     $857 = $lcl;
     $858 = ((($857)) + 56|0);
     $859 = HEAP16[$858>>1]|0;
     $860 = $0;
     $861 = HEAP32[$860>>2]|0;
     $862 = ((($861)) + 10|0);
     HEAP8[$862>>0]=$859&255;HEAP8[$862+1>>0]=$859>>8;
     $863 = $proc;
     $864 = ((($863)) + 60|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = ((($865)) + 42|0);
     $867 = HEAP16[$866>>1]|0;
     $868 = $867&65535;
     $869 = (15660 + (($868*12)|0)|0);
     $870 = ((($869)) + 8|0);
     $871 = HEAP16[$870>>1]|0;
     $872 = $871&65535;
     $873 = ($872|0)==(112);
     $874 = $proc;
     $875 = ((($874)) + 60|0);
     $876 = HEAP32[$875>>2]|0;
     $877 = ((($876)) + 42|0);
     $878 = HEAP16[$877>>1]|0;
     if ($873) {
      $879 = (_cv_get_x64_regno($878)|0);
      $880 = $0;
      $881 = HEAP32[$880>>2]|0;
      $882 = ((($881)) + 8|0);
      HEAP8[$882>>0]=$879&255;HEAP8[$882+1>>0]=$879>>8;
      break;
     } else {
      $883 = $878&65535;
      $884 = (15660 + (($883*12)|0)|0);
      $885 = ((($884)) + 10|0);
      $886 = HEAP8[$885>>0]|0;
      $887 = $886&255;
      $888 = (($887) + 17)|0;
      $889 = $888&65535;
      $890 = $0;
      $891 = HEAP32[$890>>2]|0;
      $892 = ((($891)) + 8|0);
      HEAP8[$892>>0]=$889&255;HEAP8[$892+1>>0]=$889>>8;
      break;
     }
    }
   } while(0);
   $940 = $lcl;
   $941 = ((($940)) + 56|0);
   HEAP16[$941>>1] = 0;
   $942 = $len;
   $943 = $0;
   $944 = HEAP32[$943>>2]|0;
   $945 = (($944) + ($942)|0);
   HEAP32[$943>>2] = $945;
   $946 = $lcl;
   $947 = ((($946)) + 44|0);
   $948 = HEAP8[$947>>0]|0;
   $949 = $0;
   $950 = HEAP32[$949>>2]|0;
   $951 = ((($950)) + 1|0);
   HEAP32[$949>>2] = $951;
   HEAP8[$950>>0] = $948;
   $952 = $0;
   $953 = HEAP32[$952>>2]|0;
   $954 = $lcl;
   $955 = ((($954)) + 4|0);
   $956 = HEAP32[$955>>2]|0;
   $957 = $lcl;
   $958 = ((($957)) + 44|0);
   $959 = HEAP8[$958>>0]|0;
   $960 = $959&255;
   _memcpy(($953|0),($956|0),($960|0))|0;
   $961 = $lcl;
   $962 = ((($961)) + 44|0);
   $963 = HEAP8[$962>>0]|0;
   $964 = $963&255;
   $965 = $0;
   $966 = HEAP32[$965>>2]|0;
   $967 = (($966) + ($964)|0);
   HEAP32[$965>>2] = $967;
   $968 = $lcl;
   $969 = ((($968)) + 68|0);
   $970 = HEAP32[$969>>2]|0;
   $lcl = $970;
  }
  $971 = $i;
  $972 = (($971) + 1)|0;
  $i = $972;
 }
 $973 = $0;
 $974 = ((($973)) + 4|0);
 $975 = HEAP32[$974>>2]|0;
 $976 = ((($975)) + 60|0);
 $977 = HEAP32[$976>>2]|0;
 $978 = ((($977)) + 20|0);
 $979 = HEAP32[$978>>2]|0;
 $980 = $0;
 $981 = ((($980)) + 4|0);
 $982 = HEAP32[$981>>2]|0;
 $983 = $0;
 $984 = HEAP32[$983>>2]|0;
 $985 = $0;
 $986 = ((($985)) + 16|0);
 $987 = HEAP32[$986>>2]|0;
 $988 = (FUNCTION_TABLE_iiiii[$979 & 255]($982,$984,4,$987)|0);
 $989 = $0;
 HEAP32[$989>>2] = $988;
 $990 = $0;
 $991 = HEAP32[$990>>2]|0;
 HEAP8[$991>>0]=2&255;HEAP8[$991+1>>0]=2>>8;
 $992 = $0;
 $993 = HEAP32[$992>>2]|0;
 $994 = ((($993)) + 2|0);
 HEAP8[$994>>0]=6&255;HEAP8[$994+1>>0]=6>>8;
 $995 = $0;
 $996 = HEAP32[$995>>2]|0;
 $997 = ((($996)) + 4|0);
 HEAP32[$995>>2] = $997;
 STACKTOP = sp;return;
}
function _GetCVStructLen($sym,$Ofssize) {
 $sym = $sym|0;
 $Ofssize = $Ofssize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $Ofssize;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $cond = ($4|0)==(7);
 if ($cond) {
  $len = 6;
  $53 = $len;
  STACKTOP = sp;return ($53|0);
 }
 $5 = $0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7&65535) >>> 11;
 $9 = $8 & 1;
 $10 = $9&255;
 $11 = $10&255;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP8[(6007)>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)>=(1);
  if ($15) {
   $16 = $1;
   $17 = $16&255;
   $18 = ($17|0)==(0);
   $19 = $18 ? 29 : 37;
   $20 = $19&65535;
   $len = $20;
   $53 = $len;
   STACKTOP = sp;return ($53|0);
  }
 }
 $21 = $0;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(129);
 if (!($24)) {
  $25 = $0;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(130);
  if (!($28)) {
   $34 = $0;
   $35 = ((($34)) + 24|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = ($36&65535) >>> 4;
   $38 = $37 & 1;
   $39 = $38&255;
   $40 = ($39<<24>>24)!=(0);
   if ($40) {
    $41 = $0;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)>=(32768);
    $45 = $44 ? 2 : 0;
    $46 = (8 + ($45))|0;
    $47 = $46&65535;
    $len = $47;
    $53 = $len;
    STACKTOP = sp;return ($53|0);
   } else {
    $48 = $1;
    $49 = $48&255;
    $50 = ($49|0)==(0);
    $51 = $50 ? 10 : 12;
    $52 = $51&65535;
    $len = $52;
    $53 = $len;
    STACKTOP = sp;return ($53|0);
   }
  }
 }
 $29 = $1;
 $30 = $29&255;
 $31 = ($30|0)==(0);
 $32 = $31 ? 9 : 11;
 $33 = $32&65535;
 $len = $33;
 $53 = $len;
 STACKTOP = sp;return ($53|0);
}
function _GetTyperef($sym,$Ofssize) {
 $sym = $sym|0;
 $Ofssize = $Ofssize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $size = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 8|0;
 $1 = $sym;
 $2 = $Ofssize;
 ;HEAP16[$value>>1]=0|0;
 $3 = $1;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 L1: do {
  if ($7) {
   $11 = $2;
   $12 = $11&255;
   $13 = $1;
   $14 = ((($13)) + 52|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_SizeFromMemtype($10,$12,$15)|0);
   $size = $16;
   $17 = $1;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 32;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = HEAP16[$value>>1]|0;
    $23 = $22 & -241;
    $24 = $23 | 64;
    HEAP16[$value>>1] = $24;
    $25 = $size;
    switch ($25|0) {
    case 4:  {
     $26 = HEAP16[$value>>1]|0;
     $27 = $26 & -8;
     HEAP16[$value>>1] = $27;
     break L1;
     break;
    }
    case 8:  {
     $28 = HEAP16[$value>>1]|0;
     $29 = $28 & -8;
     $30 = $29 | 1;
     HEAP16[$value>>1] = $30;
     break L1;
     break;
    }
    case 10:  {
     $31 = HEAP16[$value>>1]|0;
     $32 = $31 & -8;
     $33 = $32 | 2;
     HEAP16[$value>>1] = $33;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
   $34 = $size;
   $35 = ($34|0)<=(8);
   if (!($35)) {
    $65 = HEAP16[$value>>1]|0;
    $66 = $65 & -241;
    $67 = $66 | 112;
    HEAP16[$value>>1] = $67;
    $68 = HEAP16[$value>>1]|0;
    $69 = $68 & -8;
    $70 = $69 | 7;
    HEAP16[$value>>1] = $70;
    break;
   }
   $36 = $1;
   $37 = ((($36)) + 20|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 64;
   $40 = ($39|0)!=(0);
   $41 = HEAP16[$value>>1]|0;
   $42 = $41 & -241;
   if ($40) {
    $43 = $42 | 16;
    HEAP16[$value>>1] = $43;
   } else {
    $44 = $42 | 32;
    HEAP16[$value>>1] = $44;
   }
   $45 = $size;
   switch ($45|0) {
   case 1:  {
    $46 = HEAP16[$value>>1]|0;
    $47 = $46 & -8;
    HEAP16[$value>>1] = $47;
    break L1;
    break;
   }
   case 2:  {
    $48 = HEAP16[$value>>1]|0;
    $49 = $48 & -8;
    $50 = $49 | 1;
    HEAP16[$value>>1] = $50;
    break L1;
    break;
   }
   case 4:  {
    $51 = HEAP16[$value>>1]|0;
    $52 = $51 & -8;
    $53 = $52 | 2;
    HEAP16[$value>>1] = $53;
    break L1;
    break;
   }
   case 8:  {
    $54 = HEAP16[$value>>1]|0;
    $55 = $54 & -8;
    $56 = $55 | 3;
    HEAP16[$value>>1] = $56;
    break L1;
    break;
   }
   case 6:  {
    $57 = HEAP16[$value>>1]|0;
    $58 = $57 & -241;
    HEAP16[$value>>1] = $58;
    $59 = HEAP16[$value>>1]|0;
    $60 = $59 & -8;
    $61 = $60 | 3;
    HEAP16[$value>>1] = $61;
    $62 = HEAP16[$value>>1]|0;
    $63 = $62 & -1793;
    $64 = $63 | 1280;
    HEAP16[$value>>1] = $64;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   switch ($10|0) {
   case 195:  {
    $71 = HEAP16[$value>>1]|0;
    $72 = $71 & -8;
    $73 = $72 | 3;
    HEAP16[$value>>1] = $73;
    $74 = HEAP16[$value>>1]|0;
    $75 = $74 & -241;
    HEAP16[$value>>1] = $75;
    $76 = $1;
    $77 = ((($76)) + 28|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    switch ($79|0) {
    case 0:  {
     $80 = $1;
     $81 = ((($80)) + 28|0);
     $82 = ((($81)) + 3|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = ($83&255) >>> 4;
     $85 = $84 & 1;
     $86 = $85&255;
     $87 = ($86|0)!=(0);
     $88 = $87 ? 2 : 1;
     $89 = $88&65535;
     $90 = HEAP16[$value>>1]|0;
     $91 = $89 & 7;
     $92 = ($91 << 8)&65535;
     $93 = $90 & -1793;
     $94 = $93 | $92;
     HEAP16[$value>>1] = $94;
     break L1;
     break;
    }
    case 1:  {
     $95 = $1;
     $96 = ((($95)) + 28|0);
     $97 = ((($96)) + 3|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = ($98&255) >>> 4;
     $100 = $99 & 1;
     $101 = $100&255;
     $102 = ($101|0)!=(0);
     $103 = $102 ? 5 : 4;
     $104 = $103&65535;
     $105 = HEAP16[$value>>1]|0;
     $106 = $104 & 7;
     $107 = ($106 << 8)&65535;
     $108 = $105 & -1793;
     $109 = $108 | $107;
     HEAP16[$value>>1] = $109;
     break L1;
     break;
    }
    case 2:  {
     $110 = HEAP16[$value>>1]|0;
     $111 = $110 & -1793;
     $112 = $111 | 1536;
     HEAP16[$value>>1] = $112;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
    break;
   }
   case 193:  {
    $113 = $1;
    $114 = ((($113)) + 40|0);
    $115 = HEAP16[$114>>1]|0;
    $116 = ($115<<16>>16)!=(0);
    if (!($116)) {
     break L1;
    }
    $117 = $1;
    $118 = ((($117)) + 40|0);
    $119 = HEAP16[$118>>1]|0;
    $0 = $119;
    $145 = $0;
    STACKTOP = sp;return ($145|0);
    break;
   }
   case 129:  {
    $120 = HEAP16[$value>>1]|0;
    $121 = $120 & -1793;
    $122 = $121 | 256;
    HEAP16[$value>>1] = $122;
    break L1;
    break;
   }
   case 130:  {
    $123 = HEAP16[$value>>1]|0;
    $124 = $123 & -1793;
    $125 = $124 | 512;
    HEAP16[$value>>1] = $125;
    break L1;
    break;
   }
   case 196:  {
    $126 = $1;
    $127 = ((($126)) + 52|0);
    $128 = HEAP32[$127>>2]|0;
    $1 = $128;
    while(1) {
     $129 = $1;
     $130 = ((($129)) + 52|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($131|0)!=(0|0);
     $133 = $1;
     if (!($132)) {
      break;
     }
     $134 = ((($133)) + 52|0);
     $135 = HEAP32[$134>>2]|0;
     $1 = $135;
    }
    $136 = ((($133)) + 40|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = ($137<<16>>16)!=(0);
    $139 = $1;
    if ($138) {
     $140 = ((($139)) + 40|0);
     $141 = HEAP16[$140>>1]|0;
     $0 = $141;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
    } else {
     $142 = $2;
     $143 = (_GetTyperef($139,$142)|0);
     $0 = $143;
     $145 = $0;
     STACKTOP = sp;return ($145|0);
    }
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $144 = HEAP16[$value>>1]|0;
 $0 = $144;
 $145 = $0;
 STACKTOP = sp;return ($145|0);
}
function _cv_write_ptr_type($cv,$sym) {
 $cv = $cv|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $size = 0, $tmpmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cv;
 $2 = $sym;
 $size = 12;
 $3 = $2;
 $4 = ((($3)) + 28|0);
 $5 = ((($4)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(192);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $13 = $2;
  $14 = ((($13)) + 28|0);
  $15 = ((($14)) + 2|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)==(128);
  if (!($18)) {
   $24 = $1;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 60|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $size;
   $38 = $1;
   $39 = ((($38)) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_iiiii[$30 & 255]($33,$36,$37,$40)|0);
   $42 = $1;
   $43 = ((($42)) + 8|0);
   HEAP32[$43>>2] = $41;
   $44 = $size;
   $45 = (($44) - 2)|0;
   $46 = $45&65535;
   $47 = $1;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   HEAP8[$49>>0]=$46&255;HEAP8[$49+1>>0]=$46>>8;
   $50 = $1;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 2|0);
   HEAP8[$53>>0]=2&255;HEAP8[$53+1>>0]=2>>8;
   $54 = $2;
   $55 = ((($54)) + 28|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(0);
   $59 = $2;
   $60 = ((($59)) + 28|0);
   $61 = ((($60)) + 3|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62&255) >>> 4;
   $64 = $63 & 1;
   $65 = $64&255;
   $66 = ($65|0)!=(0);
   if ($58) {
    $67 = $66 ? 1 : 0;
    $68 = $67&65535;
    $69 = $1;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($71)) + 4|0);
    HEAP8[$72>>0]=$68&255;HEAP8[$72+1>>0]=$68>>8;
   } else {
    $73 = $66 ? 11 : 10;
    $74 = $73&65535;
    $75 = $1;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 4|0);
    HEAP8[$78>>0]=$74&255;HEAP8[$78+1>>0]=$74>>8;
   }
   $79 = $2;
   $80 = ((($79)) + 28|0);
   $81 = ((($80)) + 1|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)>(1);
   $85 = $2;
   do {
    if ($84) {
     $86 = $2;
     $87 = ((($86)) + 28|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = (_GetTyperef($85,$88)|0);
     $90 = $1;
     $91 = ((($90)) + 8|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($92)) + 6|0);
     HEAP8[$93>>0]=$89&255;HEAP8[$93+1>>0]=$89>>8;
    } else {
     $94 = ((($85)) + 32|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)!=(0|0);
     $97 = $2;
     if (!($96)) {
      $120 = ((($97)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $tmpmt = $121;
      $122 = $2;
      $123 = ((($122)) + 28|0);
      $124 = ((($123)) + 2|0);
      $125 = HEAP8[$124>>0]|0;
      $126 = $125&255;
      $127 = $2;
      $128 = ((($127)) + 20|0);
      HEAP32[$128>>2] = $126;
      $129 = $2;
      $130 = $2;
      $131 = ((($130)) + 28|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = (_GetTyperef($129,$132)|0);
      $134 = $1;
      $135 = ((($134)) + 8|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ((($136)) + 6|0);
      HEAP8[$137>>0]=$133&255;HEAP8[$137+1>>0]=$133>>8;
      $138 = $tmpmt;
      $139 = $2;
      $140 = ((($139)) + 20|0);
      HEAP32[$140>>2] = $138;
      break;
     }
     $98 = ((($97)) + 32|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ((($99)) + 40|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = ($101<<16>>16)!=(0);
     $103 = $2;
     if ($102) {
      $104 = ((($103)) + 32|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($105)) + 40|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = $1;
      $109 = ((($108)) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($110)) + 6|0);
      HEAP8[$111>>0]=$107&255;HEAP8[$111+1>>0]=$107>>8;
      break;
     } else {
      $112 = $2;
      $113 = ((($112)) + 28|0);
      $114 = HEAP8[$113>>0]|0;
      $115 = (_GetTyperef($103,$114)|0);
      $116 = $1;
      $117 = ((($116)) + 8|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ((($118)) + 6|0);
      HEAP8[$119>>0]=$115&255;HEAP8[$119+1>>0]=$115>>8;
      break;
     }
    }
   } while(0);
   $141 = $1;
   $142 = ((($141)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 8|0);
   HEAP32[$144>>2] = 0;
   $145 = $size;
   $146 = $1;
   $147 = ((($146)) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + ($145)|0);
   HEAP32[$147>>2] = $149;
   $150 = $1;
   $151 = ((($150)) + 24|0);
   $152 = HEAP16[$151>>1]|0;
   $153 = (($152) + 1)<<16>>16;
   HEAP16[$151>>1] = $153;
   $0 = $152;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 }
 $19 = $2;
 $20 = $2;
 $21 = ((($20)) + 28|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = (_GetTyperef($19,$22)|0);
 $0 = $23;
 $154 = $0;
 STACKTOP = sp;return ($154|0);
}
function _cv_write_array_type($cv,$sym,$elemtype,$Ofssize) {
 $cv = $cv|0;
 $sym = $sym|0;
 $elemtype = $elemtype|0;
 $Ofssize = $Ofssize|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $size = 0, $tmp = 0, $typelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cv;
 $1 = $sym;
 $2 = $elemtype;
 $3 = $Ofssize;
 $4 = $1;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>=(32768);
 $8 = $7 ? 4 : 0;
 $typelen = $8;
 $9 = $typelen;
 $10 = (12 + ($9))|0;
 $11 = (($10) + 1)|0;
 $12 = (($11) + 3)|0;
 $13 = $12 & -4;
 $size = $13;
 $14 = $0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $size;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (FUNCTION_TABLE_iiiii[$20 & 255]($23,$26,$27,$30)|0);
 $32 = $0;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $size;
 $35 = (($34) - 2)|0;
 $36 = $35&65535;
 $37 = $0;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP8[$39>>0]=$36&255;HEAP8[$39+1>>0]=$36>>8;
 $40 = $0;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 2|0);
 HEAP8[$43>>0]=3&255;HEAP8[$43+1>>0]=3>>8;
 $44 = $2;
 $45 = $44&65535;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $2;
  $$sink = $47;
 } else {
  $48 = $1;
  $49 = $3;
  $50 = (_GetTyperef($48,$49)|0);
  $$sink = $50;
 }
 $51 = $$sink&65535;
 $52 = $51&65535;
 $53 = $0;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 4|0);
 HEAP8[$56>>0]=$52&255;HEAP8[$56+1>>0]=$52>>8;
 $57 = HEAP16[67774>>1]|0;
 $58 = $0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 6|0);
 HEAP8[$61>>0]=$57&255;HEAP8[$61+1>>0]=$57>>8;
 $62 = $0;
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 10|0);
 $tmp = $65;
 $66 = $typelen;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $0;
  $69 = ((($68)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 8|0);
  HEAP8[$71>>0]=-32764&255;HEAP8[$71+1>>0]=-32764>>8;
  $72 = $1;
  $73 = ((($72)) + 36|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $tmp;
  HEAP32[$75>>2] = $74;
  $76 = $tmp;
  $77 = ((($76)) + 4|0);
  $tmp = $77;
 } else {
  $78 = $1;
  $79 = ((($78)) + 36|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80&65535;
  $82 = $0;
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($84)) + 8|0);
  HEAP8[$85>>0]=$81&255;HEAP8[$85+1>>0]=$81>>8;
 }
 $86 = $tmp;
 $87 = ((($86)) + 1|0);
 $tmp = $87;
 HEAP8[$86>>0] = 0;
 $88 = $tmp;
 $89 = $0;
 $90 = ((($89)) + 12|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ((($91)) + 60|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($93)) + 12|0);
 $95 = HEAP32[$94>>2]|0;
 _PadBytes($88,$95);
 $96 = $size;
 $97 = $0;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + ($96)|0);
 HEAP32[$98>>2] = $100;
 $101 = $0;
 $102 = ((($101)) + 24|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = (($103) + 1)<<16>>16;
 HEAP16[$102>>1] = $104;
 STACKTOP = sp;return;
}
function _cv_write_type_procedure($cv,$sym,$cnt) {
 $cv = $cv|0;
 $sym = $sym|0;
 $cnt = $cnt|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $param = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cv;
 $1 = $sym;
 $2 = $cnt;
 $size = 12;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $size;
 $17 = $0;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iiiii[$9 & 255]($12,$15,$16,$19)|0);
 $21 = $0;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $size;
 $24 = (($23) - 2)|0;
 $25 = $24&65535;
 $26 = $0;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP8[$28>>0]=$25&255;HEAP8[$28+1>>0]=$25>>8;
 $29 = $0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 2|0);
 HEAP8[$32>>0]=8&255;HEAP8[$32+1>>0]=8>>8;
 $33 = HEAP16[67772>>1]|0;
 $34 = $0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 HEAP8[$37>>0]=$33&255;HEAP8[$37+1>>0]=$33>>8;
 $38 = $0;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 6|0);
 HEAP8[$41>>0] = 0;
 $42 = $0;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 7|0);
 HEAP8[$45>>0] = 0;
 $46 = $2;
 $47 = $46&65535;
 $48 = $0;
 $49 = ((($48)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 8|0);
 HEAP8[$51>>0]=$47&255;HEAP8[$51+1>>0]=$47>>8;
 $52 = $0;
 $53 = ((($52)) + 24|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = (($54) + 1)<<16>>16;
 HEAP16[$53>>1] = $55;
 $56 = $0;
 $57 = ((($56)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 10|0);
 HEAP8[$59>>0]=$55&255;HEAP8[$59+1>>0]=$55>>8;
 $60 = $size;
 $61 = $0;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($60)|0);
 HEAP32[$62>>2] = $64;
 $65 = $2;
 $66 = $65<<1;
 $67 = (6 + ($66))|0;
 $size = $67;
 $68 = $0;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($70)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $0;
 $76 = ((($75)) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $0;
 $79 = ((($78)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $size;
 $82 = $0;
 $83 = ((($82)) + 16|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (FUNCTION_TABLE_iiiii[$74 & 255]($77,$80,$81,$84)|0);
 $86 = $0;
 $87 = ((($86)) + 8|0);
 HEAP32[$87>>2] = $85;
 $88 = $size;
 $89 = (($88) - 2)|0;
 $90 = $89&65535;
 $91 = $0;
 $92 = ((($91)) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 HEAP8[$93>>0]=$90&255;HEAP8[$93+1>>0]=$90>>8;
 $94 = $0;
 $95 = ((($94)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($96)) + 2|0);
 HEAP8[$97>>0]=513&255;HEAP8[$97+1>>0]=513>>8;
 $98 = $2;
 $99 = $98&65535;
 $100 = $0;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 4|0);
 HEAP8[$103>>0]=$99&255;HEAP8[$103+1>>0]=$99>>8;
 $104 = $0;
 $105 = ((($104)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($106)) + 6|0);
 $ptr = $107;
 $108 = $1;
 $109 = ((($108)) + 60|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $param = $112;
 while(1) {
  $113 = $param;
  $114 = ($113|0)!=(0|0);
  if (!($114)) {
   break;
  }
  $115 = $param;
  $116 = ((($115)) + 56|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $ptr;
  $119 = ((($118)) + 2|0);
  $ptr = $119;
  HEAP16[$118>>1] = $117;
  $120 = $param;
  $121 = ((($120)) + 68|0);
  $122 = HEAP32[$121>>2]|0;
  $param = $122;
 }
 $123 = $size;
 $124 = $0;
 $125 = ((($124)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + ($123)|0);
 HEAP32[$125>>2] = $127;
 $128 = $0;
 $129 = ((($128)) + 24|0);
 $130 = HEAP16[$129>>1]|0;
 $131 = (($130) + 1)<<16>>16;
 HEAP16[$129>>1] = $131;
 STACKTOP = sp;return;
}
function _cv_get_register($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $flags = 0, $i = 0, $rc = 0, $regno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $rc = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(2);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = ((($4)) + 32|0);
  $6 = (($5) + ($3<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)!=(0);
  if ($8) {
   $9 = $i;
   $10 = $0;
   $11 = ((($10)) + 32|0);
   $12 = (($11) + ($9<<1)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $15 = (15660 + (($14*12)|0)|0);
   $16 = HEAP32[$15>>2]|0;
   $flags = $16;
   $17 = $i;
   $18 = $0;
   $19 = ((($18)) + 32|0);
   $20 = (($19) + ($17<<1)|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   $23 = (15660 + (($22*12)|0)|0);
   $24 = ((($23)) + 10|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = (1 + ($26))|0;
   $28 = $27&65535;
   $regno = $28;
   $29 = $flags;
   $30 = $29 & 2;
   $31 = ($30|0)!=(0);
   do {
    if ($31) {
     $32 = $regno;
     $33 = $32&65535;
     $34 = (($33) + 8)|0;
     $35 = $34&65535;
     $regno = $35;
    } else {
     $36 = $flags;
     $37 = $36 & 4;
     $38 = ($37|0)!=(0);
     if ($38) {
      $39 = $regno;
      $40 = $39&65535;
      $41 = (($40) + 16)|0;
      $42 = $41&65535;
      $regno = $42;
      break;
     }
     $43 = $flags;
     $44 = $43 & 6144;
     $45 = ($44|0)!=(0);
     if ($45) {
      $46 = $regno;
      $47 = $46&65535;
      $48 = (($47) + 24)|0;
      $49 = $48&65535;
      $regno = $49;
     }
    }
   } while(0);
   $50 = $regno;
   $51 = $50&65535;
   $52 = $i;
   $53 = $52<<3;
   $54 = $51 << $53;
   $55 = $rc;
   $56 = $55&65535;
   $57 = $56 | $54;
   $58 = $57&65535;
   $rc = $58;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 $61 = $rc;
 STACKTOP = sp;return ($61|0);
}
function _cv_get_x64_regno($regno) {
 $regno = $regno|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $regno;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>=(99);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = ($6|0)<=(106);
  if ($7) {
   $8 = $1;
   $9 = $8&65535;
   $10 = (($9) - 99)|0;
   $11 = (83640 + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = (($13) + 328)|0;
   $15 = $14&65535;
   $0 = $15;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $16 = $1;
 $17 = $16&65535;
 $18 = ($17|0)>=(107);
 if ($18) {
  $19 = $1;
  $20 = $19&65535;
  $21 = ($20|0)<=(114);
  if ($21) {
   $22 = $1;
   $23 = $22&65535;
   $24 = (($23) - 107)|0;
   $25 = (($24) + 328)|0;
   $26 = (($25) + 8)|0;
   $27 = $26&65535;
   $0 = $27;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $28 = $1;
 $29 = $28&65535;
 $30 = (($29) - 91)|0;
 $31 = (($30) + 360)|0;
 $32 = $31&65535;
 $0 = $32;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _PadBytes($curr,$base) {
 $curr = $curr|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $curr;
 $1 = $base;
 while(1) {
  $2 = $0;
  $3 = $1;
  $4 = $2;
  $5 = $3;
  $6 = (($4) - ($5))|0;
  $7 = $6 & 3;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $1;
  $11 = $9;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = $13 & 3;
  $15 = (3 - ($14))|0;
  $16 = (83648 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $0;
  $19 = ((($18)) + 1|0);
  $0 = $19;
  HEAP8[$18>>0] = $17;
 }
 STACKTOP = sp;return;
}
function _cv_cntproc($type,$mbr,$cv,$cc) {
 $type = $type|0;
 $mbr = $mbr|0;
 $cv = $cv|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $numsize = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $mbr;
 $2 = $cv;
 $3 = $cc;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 40|0);
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(4);
 if ($12) {
  $20 = 0;
 } else {
  $13 = $1;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  $20 = $19;
 }
 $offset = $20;
 $21 = $offset;
 $22 = ($21>>>0)>=(32768);
 $23 = $22 ? 4 : 0;
 $numsize = $23;
 $24 = $numsize;
 $25 = (8 + ($24))|0;
 $26 = $1;
 $27 = ((($26)) + 44|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($25) + ($29))|0;
 $31 = (($30) + 1)|0;
 $32 = (($31) + 3)|0;
 $33 = $32 & -4;
 $34 = $3;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = $1;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(196);
 if ($41) {
  $42 = $1;
  $43 = ((($42)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 40|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $2;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = $2;
   $54 = $1;
   $55 = ((($54)) + 52|0);
   $56 = HEAP32[$55>>2]|0;
   _cv_write_type($53,$56);
   $57 = $2;
   $58 = ((($57)) + 20|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + -1)|0;
   HEAP32[$58>>2] = $60;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $61 = $1;
  $62 = ((($61)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(193);
  if ($64) {
   $65 = $1;
   $66 = ((($65)) + 40|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $2;
    $71 = $0;
    $72 = $1;
    _cv_write_bitfield($70,$71,$72);
   }
  }
 }
 $73 = $1;
 $74 = ((($73)) + 24|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = ($75&65535) >>> 9;
 $77 = $76 & 1;
 $78 = $77&255;
 $79 = ($78<<24>>24)!=(0);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = $2;
 $81 = ((($80)) + 24|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = $1;
 $84 = ((($83)) + 56|0);
 HEAP16[$84>>1] = $82;
 $85 = $2;
 $86 = $1;
 _cv_write_array_type($85,$86,0,0);
 STACKTOP = sp;return;
}
function _cv_enum_fields($sym,$enumfunc,$cv,$cc) {
 $sym = $sym|0;
 $enumfunc = $enumfunc|0;
 $cv = $cv|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $curr = 0, $i = 0, $pold = 0, $tmpname = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmpname = sp + 32|0;
 $0 = $sym;
 $1 = $enumfunc;
 $2 = $cv;
 $3 = $cc;
 $4 = $0;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $curr = $7;
 $i = 0;
 while(1) {
  $8 = $curr;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $curr;
  $11 = ((($10)) + 44|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)!=(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = $0;
    $16 = $curr;
    $17 = $2;
    $18 = $3;
    FUNCTION_TABLE_viiii[$14 & 255]($15,$16,$17,$18);
   } else {
    $19 = $curr;
    $20 = ((($19)) + 52|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(0|0);
    if ($22) {
     $23 = $curr;
     $24 = ((($23)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $3;
     $27 = ((($26)) + 8|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($25))|0;
     HEAP32[$27>>2] = $29;
     $30 = $curr;
     $31 = ((($30)) + 52|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $1;
     $34 = $2;
     $35 = $3;
     _cv_enum_fields($32,$33,$34,$35);
     $36 = $curr;
     $37 = ((($36)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $3;
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) - ($38))|0;
     HEAP32[$40>>2] = $42;
     break;
    }
    $43 = $0;
    $44 = ((($43)) + 40|0);
    $45 = ((($44)) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = ($47|0)==(2);
    if ($48) {
     $49 = $curr;
     $50 = ((($49)) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $pold = $51;
     $52 = $i;
     $53 = (($52) + 1)|0;
     $i = $53;
     HEAP32[$vararg_buffer>>2] = $53;
     $54 = (_sprintf($tmpname,83661,$vararg_buffer)|0);
     $55 = $54&255;
     $56 = $curr;
     $57 = ((($56)) + 44|0);
     HEAP8[$57>>0] = $55;
     $58 = $curr;
     $59 = ((($58)) + 4|0);
     HEAP32[$59>>2] = $tmpname;
     $60 = $1;
     $61 = $0;
     $62 = $curr;
     $63 = $2;
     $64 = $3;
     FUNCTION_TABLE_viiii[$60 & 255]($61,$62,$63,$64);
     $65 = $pold;
     $66 = $curr;
     $67 = ((($66)) + 4|0);
     HEAP32[$67>>2] = $65;
     $68 = $curr;
     $69 = ((($68)) + 44|0);
     HEAP8[$69>>0] = 0;
    }
   }
  } while(0);
  $70 = $curr;
  $71 = ((($70)) + 60|0);
  $72 = HEAP32[$71>>2]|0;
  $curr = $72;
 }
 STACKTOP = sp;return;
}
function _cv_memberproc($type,$mbr,$cv,$cc) {
 $type = $type|0;
 $mbr = $mbr|0;
 $cv = $cv|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $offset = 0, $size = 0, $tmp = 0, $typelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $mbr;
 $2 = $cv;
 $3 = $cc;
 $4 = $0;
 $5 = ((($4)) + 40|0);
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(4);
 if ($9) {
  $17 = 0;
 } else {
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) + ($15))|0;
  $17 = $16;
 }
 $offset = $17;
 $18 = $offset;
 $19 = ($18>>>0)>=(32768);
 $20 = $19 ? 4 : 0;
 $typelen = $20;
 $21 = $typelen;
 $22 = (8 + ($21))|0;
 $23 = (($22) + 1)|0;
 $24 = $1;
 $25 = ((($24)) + 44|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (($23) + ($27))|0;
 $29 = (($28) + 3)|0;
 $30 = $29 & -4;
 $size = $30;
 $31 = $2;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 60|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $size;
 $45 = $2;
 $46 = ((($45)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiiii[$37 & 255]($40,$43,$44,$47)|0);
 $49 = $2;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP8[$53>>0]=1030&255;HEAP8[$53+1>>0]=1030>>8;
 $54 = $1;
 $55 = ((($54)) + 24|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = ($56&65535) >>> 9;
 $58 = $57 & 1;
 $59 = $58&255;
 $60 = ($59<<24>>24)!=(0);
 $61 = $1;
 if ($60) {
  $62 = ((($61)) + 56|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $2;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 2|0);
  HEAP8[$67>>0]=$63&255;HEAP8[$67+1>>0]=$63>>8;
  $68 = $1;
  $69 = ((($68)) + 56|0);
  HEAP16[$69>>1] = 0;
 } else {
  $70 = (_GetTyperef($61,0)|0);
  $71 = $2;
  $72 = ((($71)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 2|0);
  HEAP8[$74>>0]=$70&255;HEAP8[$74+1>>0]=$70>>8;
 }
 $75 = $2;
 $76 = ((($75)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79 & -4;
 $81 = $80 | 3;
 HEAP16[$78>>1] = $81;
 $82 = $2;
 $83 = ((($82)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 4|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86 & -29;
 HEAP16[$85>>1] = $87;
 $88 = $2;
 $89 = ((($88)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($90)) + 4|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = $92 & -33;
 HEAP16[$91>>1] = $93;
 $94 = $2;
 $95 = ((($94)) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($96)) + 4|0);
 $98 = HEAP16[$97>>1]|0;
 $99 = $98 & -65;
 HEAP16[$97>>1] = $99;
 $100 = $2;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 4|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104 & -129;
 HEAP16[$103>>1] = $105;
 $106 = $2;
 $107 = ((($106)) + 8|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($108)) + 4|0);
 $110 = HEAP16[$109>>1]|0;
 $111 = $110 & 255;
 HEAP16[$109>>1] = $111;
 $112 = $2;
 $113 = ((($112)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($114)) + 8|0);
 $tmp = $115;
 $116 = $typelen;
 $117 = ($116|0)==(0);
 if ($117) {
  $118 = $offset;
  $119 = $118&65535;
  $120 = $2;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($122)) + 6|0);
  HEAP8[$123>>0]=$119&255;HEAP8[$123+1>>0]=$119>>8;
 } else {
  $124 = $2;
  $125 = ((($124)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 6|0);
  HEAP8[$127>>0]=-32764&255;HEAP8[$127+1>>0]=-32764>>8;
  $128 = $offset;
  $129 = $tmp;
  HEAP32[$129>>2] = $128;
  $130 = $tmp;
  $131 = ((($130)) + 4|0);
  $tmp = $131;
 }
 $132 = $1;
 $133 = ((($132)) + 44|0);
 $134 = HEAP8[$133>>0]|0;
 $135 = $tmp;
 $136 = ((($135)) + 1|0);
 $tmp = $136;
 HEAP8[$135>>0] = $134;
 $137 = $tmp;
 $138 = $1;
 $139 = ((($138)) + 4|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $1;
 $142 = ((($141)) + 44|0);
 $143 = HEAP8[$142>>0]|0;
 $144 = $143&255;
 _memcpy(($137|0),($140|0),($144|0))|0;
 $145 = $1;
 $146 = ((($145)) + 44|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 $149 = $tmp;
 $150 = (($149) + ($148)|0);
 $tmp = $150;
 $151 = $tmp;
 $152 = $2;
 $153 = ((($152)) + 12|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($154)) + 60|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 _PadBytes($151,$158);
 $159 = $size;
 $160 = $2;
 $161 = ((($160)) + 8|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + ($159)|0);
 HEAP32[$161>>2] = $163;
 STACKTOP = sp;return;
}
function _cv_write_bitfield($cv,$type,$sym) {
 $cv = $cv|0;
 $type = $type|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cv;
 $1 = $type;
 $2 = $sym;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iiiii[$9 & 255]($12,$15,8,$18)|0);
 $20 = $0;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = ((($22)) + 24|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (($24) + 1)<<16>>16;
 HEAP16[$23>>1] = $25;
 $26 = $2;
 $27 = ((($26)) + 40|0);
 HEAP16[$27>>1] = $24;
 $28 = $0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP8[$30>>0]=6&255;HEAP8[$30+1>>0]=6>>8;
 $31 = $0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 2|0);
 HEAP8[$34>>0]=518&255;HEAP8[$34+1>>0]=518>>8;
 $35 = $2;
 $36 = ((($35)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37&255;
 $39 = $0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 HEAP8[$42>>0] = $38;
 $43 = $2;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45&255;
 $47 = $0;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 5|0);
 HEAP8[$50>>0] = $46;
 $51 = $1;
 $52 = (_GetTyperef($51,0)|0);
 $53 = $0;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 6|0);
 HEAP8[$56>>0]=$52&255;HEAP8[$56+1>>0]=$52>>8;
 $57 = $0;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 8|0);
 HEAP32[$58>>2] = $60;
 STACKTOP = sp;return;
}
function _IncludeDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $name = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[(380)>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  _LstWriteSrcLine();
 }
 $5 = $1;
 $6 = (($5) + 1)|0;
 $1 = $6;
 $7 = $1;
 $8 = $2;
 $9 = (($8) + ($7<<4)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (_EmitError(112)|0);
  $0 = $13;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $14 = $1;
 $15 = $2;
 $16 = (($15) + ($14<<4)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(9);
 do {
  if ($19) {
   $20 = $1;
   $21 = $2;
   $22 = (($21) + ($20<<4)|0);
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(60);
   if ($26) {
    $27 = $1;
    $28 = (($27) + 1)|0;
    $29 = $2;
    $30 = (($29) + ($28<<4)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)!=(0);
    $34 = $1;
    if (!($33)) {
     $41 = $2;
     $42 = (($41) + ($34<<4)|0);
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $name = $44;
     break;
    }
    $35 = (($34) + 1)|0;
    $36 = $2;
    $37 = (($36) + ($35<<4)|0);
    $38 = ((($37)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$vararg_buffer>>2] = $39;
    $40 = (_EmitErr(209,$vararg_buffer)|0);
    $0 = $40;
    $71 = $0;
    STACKTOP = sp;return ($71|0);
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 L15: do {
  if ((label|0) == 10) {
   $45 = $1;
   $46 = $2;
   $47 = (($46) + ($45<<4)|0);
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $name = $49;
   $50 = HEAP32[(616)>>2]|0;
   $51 = $2;
   $52 = (($51) + ($50<<4)|0);
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + -1|0);
   $p = $55;
   while(1) {
    $56 = $p;
    $57 = $name;
    $58 = ($56>>>0)>($57>>>0);
    if (!($58)) {
     break L15;
    }
    $59 = $p;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = (_isspace($61)|0);
    $63 = ($62|0)!=(0);
    if (!($63)) {
     break L15;
    }
    $64 = $p;
    HEAP8[$64>>0] = 0;
    $65 = $p;
    $66 = ((($65)) + -1|0);
    $p = $66;
   }
  }
 } while(0);
 $67 = $name;
 $68 = (_SearchFile($67,1)|0);
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $2;
  _ProcessFile($70);
 }
 $0 = 0;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _StubDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $tokenarray;
 STACKTOP = sp;return -1;
}
function _SegOrderDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = $2;
 $6 = (($5) + ($4<<4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $1;
  $11 = (($10) + 1)|0;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $17 = HEAP32[(6100)>>2]|0;
 $18 = ($17|0)==(2);
 $19 = HEAP32[(6100)>>2]|0;
 $20 = ($19|0)==(3);
 $or$cond = $18 | $20;
 if ($or$cond) {
  label = 5;
 } else {
  $21 = HEAP32[(6100)>>2]|0;
  $22 = ($21|0)==(0);
  $23 = HEAP32[(524)>>2]|0;
  $24 = ($23|0)==(2);
  $or$cond3 = $22 & $24;
  if ($or$cond3) {
   label = 5;
  } else {
   $33 = $1;
   $34 = $2;
   $35 = (($34) + ($33<<4)|0);
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (15660 + (($37*12)|0)|0);
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[(532)>>2] = $40;
  }
 }
 if ((label|0) == 5) {
  $25 = HEAP32[4884>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $1;
   $28 = $2;
   $29 = (($28) + ($27<<4)|0);
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_strupr($31)|0);
   HEAP32[$vararg_buffer4>>2] = $32;
   _EmitWarn(2,224,$vararg_buffer4);
  }
 }
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _RadixDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldradix = 0, $opndx = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $1 = sp + 80|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP8[(548)>>0]|0;
 $oldradix = $3;
 HEAP8[(548)>>0] = 10;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$1>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = $2;
 $8 = (($7) + ($6<<4)|0);
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = $2;
 (_Tokenize($10,$11,$12,1)|0);
 $13 = $oldradix;
 HEAP8[(548)>>0] = $13;
 $14 = $2;
 $15 = HEAP32[(616)>>2]|0;
 $16 = (_EvalOperand($1,$14,$15,$opndx,2)|0);
 $17 = ($16|0)==(-1);
 if ($17) {
  $0 = -1;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $18 = ((($opndx)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = (_EmitError(65)|0);
  $0 = $21;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $22 = HEAP32[$1>>2]|0;
 $23 = $2;
 $24 = (($23) + ($22<<4)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = HEAP32[$1>>2]|0;
  $29 = $2;
  $30 = (($29) + ($28<<4)|0);
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  $33 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $33;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $34 = HEAP32[$opndx>>2]|0;
 $35 = ($34|0)>(16);
 if (!($35)) {
  $36 = HEAP32[$opndx>>2]|0;
  $37 = ($36|0)<(2);
  if (!($37)) {
   $38 = ((($opndx)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $42 = HEAP32[$opndx>>2]|0;
    $43 = $42&255;
    HEAP8[(548)>>0] = $43;
    $0 = 0;
    $44 = $0;
    STACKTOP = sp;return ($44|0);
   }
  }
 }
 $41 = (_EmitError(181)|0);
 $0 = $41;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _AliasDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $subst = 0, $sym = 0, $sym2 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $1 = $4;
 $5 = $1;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(9);
 if (!($10)) {
  $11 = $1;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(60);
  if (!($17)) {
   $19 = $1;
   $20 = (($19) + 1)|0;
   $21 = $2;
   $22 = (($21) + ($20<<4)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)!=(3);
   if (!($25)) {
    $26 = $1;
    $27 = (($26) + 1)|0;
    $28 = $2;
    $29 = (($28) + ($27<<4)|0);
    $30 = ((($29)) + 1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)!=(48);
    if (!($33)) {
     $41 = $1;
     $42 = (($41) + 2)|0;
     $43 = $2;
     $44 = (($43) + ($42<<4)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = ($46|0)!=(9);
     if (!($47)) {
      $48 = $1;
      $49 = (($48) + 2)|0;
      $50 = $2;
      $51 = (($50) + ($49<<4)|0);
      $52 = ((($51)) + 1|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53 << 24 >> 24;
      $55 = ($54|0)!=(60);
      if (!($55)) {
       $57 = $1;
       $58 = (($57) + 2)|0;
       $59 = $2;
       $60 = (($59) + ($58<<4)|0);
       $61 = ((($60)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $subst = $62;
       $63 = $1;
       $64 = (($63) + 3)|0;
       $65 = $2;
       $66 = (($65) + ($64<<4)|0);
       $67 = HEAP8[$66>>0]|0;
       $68 = $67&255;
       $69 = ($68|0)!=(0);
       $70 = $1;
       if ($69) {
        $71 = (($70) + 3)|0;
        $72 = $2;
        $73 = (($72) + ($71<<4)|0);
        $74 = ((($73)) + 4|0);
        $75 = HEAP32[$74>>2]|0;
        HEAP32[$vararg_buffer2>>2] = $75;
        $76 = (_EmitErr(209,$vararg_buffer2)|0);
        $0 = $76;
        $185 = $0;
        STACKTOP = sp;return ($185|0);
       }
       $77 = $2;
       $78 = (($77) + ($70<<4)|0);
       $79 = ((($78)) + 4|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (_SymFind($80)|0);
       $sym = $81;
       $82 = $sym;
       $83 = ($82|0)==(0|0);
       if (!($83)) {
        $84 = $sym;
        $85 = ((($84)) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($86|0)==(0);
        if (!($87)) {
         $131 = $sym;
         $132 = ((($131)) + 16|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($133|0)!=(8);
         if (!($134)) {
          $135 = $sym;
          $136 = ((($135)) + 8|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = ((($137)) + 4|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = $subst;
          $141 = (_strcmp($139,$140)|0);
          $142 = ($141|0)!=(0);
          if (!($142)) {
           $147 = HEAP32[4884>>2]|0;
           $148 = ($147|0)!=(0);
           do {
            if ($148) {
             $149 = HEAP32[(6100)>>2]|0;
             $150 = ($149|0)==(2);
             $151 = HEAP32[(6100)>>2]|0;
             $152 = ($151|0)==(3);
             $or$cond = $150 | $152;
             if ($or$cond) {
              $153 = $sym;
              $154 = ((($153)) + 8|0);
              $155 = HEAP32[$154>>2]|0;
              $156 = ((($155)) + 16|0);
              $157 = HEAP32[$156>>2]|0;
              $158 = ($157|0)==(0);
              if ($158) {
               $159 = $subst;
               HEAP32[$vararg_buffer11>>2] = $159;
               $160 = (_EmitErr(102,$vararg_buffer11)|0);
               $0 = $160;
               $185 = $0;
               STACKTOP = sp;return ($185|0);
              }
              $161 = $sym;
              $162 = ((($161)) + 8|0);
              $163 = HEAP32[$162>>2]|0;
              $164 = ((($163)) + 16|0);
              $165 = HEAP32[$164>>2]|0;
              $166 = ($165|0)!=(2);
              if (!($166)) {
               break;
              }
              $167 = $sym;
              $168 = ((($167)) + 8|0);
              $169 = HEAP32[$168>>2]|0;
              $170 = ((($169)) + 16|0);
              $171 = HEAP32[$170>>2]|0;
              $172 = ($171|0)!=(1);
              if (!($172)) {
               $173 = $sym;
               $174 = ((($173)) + 8|0);
               $175 = HEAP32[$174>>2]|0;
               $176 = ((($175)) + 24|0);
               $177 = HEAP16[$176>>1]|0;
               $178 = ($177&65535) >>> 7;
               $179 = $178 & 1;
               $180 = $179&255;
               $181 = $180&255;
               $182 = ($181|0)==(0);
               if (!($182)) {
                break;
               }
              }
              $183 = $subst;
              HEAP32[$vararg_buffer14>>2] = $183;
              $184 = (_EmitErr(268,$vararg_buffer14)|0);
              $0 = $184;
              $185 = $0;
              STACKTOP = sp;return ($185|0);
             }
            }
           } while(0);
           $0 = 0;
           $185 = $0;
           STACKTOP = sp;return ($185|0);
          }
         }
         $143 = $sym;
         $144 = ((($143)) + 4|0);
         $145 = HEAP32[$144>>2]|0;
         HEAP32[$vararg_buffer8>>2] = $145;
         $146 = (_EmitErr(143,$vararg_buffer8)|0);
         $0 = $146;
         $185 = $0;
         STACKTOP = sp;return ($185|0);
        }
       }
       $88 = $subst;
       $89 = (_SymFind($88)|0);
       $sym2 = $89;
       $90 = $sym2;
       $91 = ($90|0)==(0|0);
       if ($91) {
        $92 = $subst;
        $93 = (_SymCreate($92)|0);
        $sym2 = $93;
        $94 = $sym2;
        $95 = ((($94)) + 16|0);
        HEAP32[$95>>2] = 0;
        $96 = $sym2;
        _sym_add_table(15404,$96);
       } else {
        $97 = $sym2;
        $98 = ((($97)) + 16|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($99|0)!=(0);
        if ($100) {
         $101 = $sym2;
         $102 = ((($101)) + 16|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ($103|0)!=(1);
         if ($104) {
          $105 = $sym2;
          $106 = ((($105)) + 16|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = ($107|0)!=(2);
          if ($108) {
           $109 = $subst;
           HEAP32[$vararg_buffer5>>2] = $109;
           $110 = (_EmitErr(268,$vararg_buffer5)|0);
           $0 = $110;
           $185 = $0;
           STACKTOP = sp;return ($185|0);
          }
         }
        }
       }
       $111 = $sym;
       $112 = ($111|0)==(0|0);
       if ($112) {
        $113 = $1;
        $114 = $2;
        $115 = (($114) + ($113<<4)|0);
        $116 = ((($115)) + 4|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = (_SymCreate($117)|0);
        $sym = $118;
       } else {
        $119 = $sym;
        _sym_remove_table(15404,$119);
       }
       $120 = $sym;
       $121 = ((($120)) + 16|0);
       HEAP32[$121>>2] = 8;
       $122 = $sym2;
       $123 = $sym;
       $124 = ((($123)) + 8|0);
       HEAP32[$124>>2] = $122;
       $125 = $sym2;
       $126 = ((($125)) + 48|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $sym;
       $129 = ((($128)) + 48|0);
       HEAP32[$129>>2] = $127;
       $130 = $sym;
       _sym_add_table((15444),$130);
       $0 = 0;
       $185 = $0;
       STACKTOP = sp;return ($185|0);
      }
     }
     $56 = (_EmitError(144)|0);
     $0 = $56;
     $185 = $0;
     STACKTOP = sp;return ($185|0);
    }
   }
   $34 = $1;
   $35 = (($34) + 1)|0;
   $36 = $2;
   $37 = (($36) + ($35<<4)|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer>>2] = $39;
   $40 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $40;
   $185 = $0;
   STACKTOP = sp;return ($185|0);
  }
 }
 $18 = (_EmitError(144)|0);
 $0 = $18;
 $185 = $0;
 STACKTOP = sp;return ($185|0);
}
function _EchoDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $i;
 $1 = $tokenarray;
 $2 = HEAP32[4884>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP8[(6081)>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return 0;
 }
 $7 = $0;
 $8 = (($7) + 1)|0;
 $9 = $1;
 $10 = (($9) + ($8<<4)|0);
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 (_printf(83666,$vararg_buffer)|0);
 STACKTOP = sp;return 0;
}
function _IncBinDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch = 0, $file = 0, $fileoffset = 0, $opndx = 0, $sizemax = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $1 = sp + 96|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $fileoffset = 0;
 $sizemax = -1;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_EmitError(112)|0);
  $0 = $11;
  $152 = $0;
  STACKTOP = sp;return ($152|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = $2;
 $14 = (($13) + ($12<<4)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(9);
 if (!($17)) {
  $71 = (_EmitError(241)|0);
  $0 = $71;
  $152 = $0;
  STACKTOP = sp;return ($152|0);
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = $2;
 $20 = (($19) + ($18<<4)|0);
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)==(34);
 do {
  if ($24) {
   label = 6;
  } else {
   $25 = HEAP32[$1>>2]|0;
   $26 = $2;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 1|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(39);
   if ($31) {
    label = 6;
   } else {
    $51 = HEAP32[$1>>2]|0;
    $52 = $2;
    $53 = (($52) + ($51<<4)|0);
    $54 = ((($53)) + 1|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 << 24 >> 24;
    $57 = ($56|0)==(60);
    if ($57) {
     $58 = HEAP32[(612)>>2]|0;
     $59 = HEAP32[$1>>2]|0;
     $60 = $2;
     $61 = (($60) + ($59<<4)|0);
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[$1>>2]|0;
     $65 = $2;
     $66 = (($65) + ($64<<4)|0);
     $67 = ((($66)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 1)|0;
     _memcpy(($58|0),($63|0),($69|0))|0;
     break;
    }
    $70 = (_EmitError(241)|0);
    $0 = $70;
    $152 = $0;
    STACKTOP = sp;return ($152|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $32 = HEAP32[(612)>>2]|0;
  $33 = HEAP32[$1>>2]|0;
  $34 = $2;
  $35 = (($34) + ($33<<4)|0);
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 1|0);
  $39 = HEAP32[$1>>2]|0;
  $40 = $2;
  $41 = (($40) + ($39<<4)|0);
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  _memcpy(($32|0),($38|0),($43|0))|0;
  $44 = HEAP32[$1>>2]|0;
  $45 = $2;
  $46 = (($45) + ($44<<4)|0);
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[(612)>>2]|0;
  $50 = (($49) + ($48)|0);
  HEAP8[$50>>0] = 0;
 }
 $72 = HEAP32[$1>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$1>>2] = $73;
 $74 = HEAP32[$1>>2]|0;
 $75 = $2;
 $76 = (($75) + ($74<<4)|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = ($78|0)==(44);
 do {
  if ($79) {
   $80 = HEAP32[$1>>2]|0;
   $81 = (($80) + 1)|0;
   HEAP32[$1>>2] = $81;
   $82 = $2;
   $83 = HEAP32[(616)>>2]|0;
   $84 = (_EvalOperand($1,$82,$83,$opndx,0)|0);
   $85 = ($84|0)==(-1);
   if ($85) {
    $0 = -1;
    $152 = $0;
    STACKTOP = sp;return ($152|0);
   }
   $86 = ((($opndx)) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = HEAP32[$opndx>>2]|0;
    $fileoffset = $89;
   } else {
    $90 = ((($opndx)) + 40|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)!=(-2);
    if ($92) {
     $93 = (_EmitError(65)|0);
     $0 = $93;
     $152 = $0;
     STACKTOP = sp;return ($152|0);
    }
   }
   $94 = HEAP32[$1>>2]|0;
   $95 = $2;
   $96 = (($95) + ($94<<4)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($98|0)==(44);
   if ($99) {
    $100 = HEAP32[$1>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[$1>>2] = $101;
    $102 = $2;
    $103 = HEAP32[(616)>>2]|0;
    $104 = (_EvalOperand($1,$102,$103,$opndx,0)|0);
    $105 = ($104|0)==(-1);
    if ($105) {
     $0 = -1;
     $152 = $0;
     STACKTOP = sp;return ($152|0);
    }
    $106 = ((($opndx)) + 40|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $109 = HEAP32[$opndx>>2]|0;
     $sizemax = $109;
     break;
    }
    $110 = ((($opndx)) + 40|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(-2);
    if ($112) {
     $113 = (_EmitError(65)|0);
     $0 = $113;
     $152 = $0;
     STACKTOP = sp;return ($152|0);
    }
   }
  }
 } while(0);
 $114 = HEAP32[$1>>2]|0;
 $115 = $2;
 $116 = (($115) + ($114<<4)|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = HEAP32[$1>>2]|0;
  $121 = $2;
  $122 = (($121) + ($120<<4)|0);
  $123 = ((($122)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP32[$vararg_buffer>>2] = $124;
  $125 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $125;
  $152 = $0;
  STACKTOP = sp;return ($152|0);
 }
 $126 = HEAP32[(584)>>2]|0;
 $127 = ($126|0)==(0|0);
 if ($127) {
  $128 = (_EmitError(82)|0);
  $0 = $128;
  $152 = $0;
  STACKTOP = sp;return ($152|0);
 }
 $129 = HEAP8[(575)>>0]|0;
 $130 = ($129<<24>>24)!=(0);
 if ($130) {
  _omf_OutSelect(1);
 }
 $131 = HEAP32[(612)>>2]|0;
 $132 = (_SearchFile($131,0)|0);
 $file = $132;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = $fileoffset;
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = $file;
   $137 = $fileoffset;
   (_fseek($136,$137,0)|0);
  }
  while(1) {
   $138 = $sizemax;
   $139 = ($138|0)!=(0);
   if (!($139)) {
    break;
   }
   $140 = $file;
   $141 = (_fgetc($140)|0);
   $ch = $141;
   $142 = $ch;
   $143 = ($142|0)==(-1);
   if ($143) {
    $144 = $file;
    $145 = (_feof($144)|0);
    $146 = ($145|0)!=(0);
    if ($146) {
     break;
    }
   }
   $147 = $ch;
   $148 = $147&255;
   _OutputByte($148);
   $149 = $sizemax;
   $150 = (($149) + -1)|0;
   $sizemax = $150;
  }
  $151 = $file;
  (_fclose($151)|0);
 }
 $0 = 0;
 $152 = $0;
 STACKTOP = sp;return ($152|0);
}
function _IncludeLibDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $5 = $1;
 $6 = (($5) + 1)|0;
 $1 = $6;
 $7 = $1;
 $8 = $2;
 $9 = (($8) + ($7<<4)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if ($12) {
  _EmitWarn(2,88,$vararg_buffer);
 }
 $13 = $1;
 $14 = $2;
 $15 = (($14) + ($13<<4)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(9);
 do {
  if ($18) {
   $19 = $1;
   $20 = $2;
   $21 = (($20) + ($19<<4)|0);
   $22 = ((($21)) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(60);
   if ($25) {
    $26 = $1;
    $27 = (($26) + 1)|0;
    $28 = $2;
    $29 = (($28) + ($27<<4)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = ($31|0)!=(0);
    $33 = $1;
    if (!($32)) {
     $40 = $2;
     $41 = (($40) + ($33<<4)|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $name = $43;
     break;
    }
    $34 = (($33) + 1)|0;
    $35 = $2;
    $36 = (($35) + ($34<<4)|0);
    $37 = ((($36)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $38;
    $39 = (_EmitErr(209,$vararg_buffer1)|0);
    $0 = $39;
    $67 = $0;
    STACKTOP = sp;return ($67|0);
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 L15: do {
  if ((label|0) == 10) {
   $44 = $1;
   $45 = $2;
   $46 = (($45) + ($44<<4)|0);
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $name = $48;
   $49 = HEAP32[(616)>>2]|0;
   $50 = $2;
   $51 = (($50) + ($49<<4)|0);
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + -1|0);
   $p = $54;
   while(1) {
    $55 = $p;
    $56 = $name;
    $57 = ($55>>>0)>($56>>>0);
    if (!($57)) {
     break L15;
    }
    $58 = $p;
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = (_isspace($60)|0);
    $62 = ($61|0)!=(0);
    if (!($62)) {
     break L15;
    }
    $63 = $p;
    HEAP8[$63>>0] = 0;
    $64 = $p;
    $65 = ((($64)) + -1|0);
    $p = $65;
   }
  }
 } while(0);
 $66 = $name;
 (_IncludeLibrary($66)|0);
 $0 = 0;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _NameDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $5 = $1;
 $6 = (($5) + 1)|0;
 $1 = $6;
 $7 = HEAP32[66812>>2]|0;
 $8 = ($7|0)!=(0|0);
 do {
  if (!($8)) {
   $9 = $1;
   $10 = $2;
   $11 = (($10) + ($9<<4)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)==(3);
   if ($14) {
    $15 = $1;
    $16 = $2;
    $17 = (($16) + ($15<<4)|0);
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(359);
    if ($20) {
     break;
    }
    $21 = $1;
    $22 = $2;
    $23 = (($22) + ($21<<4)|0);
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(341);
    if ($26) {
     break;
    }
    $27 = $1;
    $28 = $2;
    $29 = (($28) + ($27<<4)|0);
    $30 = ((($29)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(340);
    if ($32) {
     break;
    }
    $33 = $1;
    $34 = $2;
    $35 = (($34) + ($33<<4)|0);
    $36 = ((($35)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(342);
    if ($38) {
     break;
    }
    $39 = $1;
    $40 = $2;
    $41 = (($40) + ($39<<4)|0);
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(343);
    if ($44) {
     break;
    }
    $45 = $1;
    $46 = $2;
    $47 = (($46) + ($45<<4)|0);
    $48 = ((($47)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(344);
    if ($50) {
     break;
    }
   }
   $51 = $1;
   $52 = $2;
   $53 = (($52) + ($51<<4)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)==(58);
   if (!($56)) {
    $0 = 0;
    $64 = $0;
    STACKTOP = sp;return ($64|0);
   }
  }
 } while(0);
 $57 = $1;
 $58 = (($57) - 1)|0;
 $59 = $2;
 $60 = (($59) + ($58<<4)|0);
 $61 = ((($60)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$vararg_buffer>>2] = $62;
 $63 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _IncludeLibrary($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = HEAP32[(356)>>2]|0;
 $q = $2;
 while(1) {
  $3 = $q;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $q;
  $6 = ((($5)) + 4|0);
  $7 = $1;
  $8 = (_strcmp($6,$7)|0);
  $9 = ($8|0)==(0);
  $10 = $q;
  if ($9) {
   label = 4;
   break;
  }
  $12 = HEAP32[$10>>2]|0;
  $q = $12;
 }
 if ((label|0) == 4) {
  $11 = ((($10)) + 4|0);
  $0 = $11;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $13 = $1;
  $14 = (_strlen($13)|0);
  $15 = (8 + ($14))|0;
  $16 = (_LclAlloc($15)|0);
  $q = $16;
  $17 = $q;
  $18 = ((($17)) + 4|0);
  $19 = $1;
  (_strcpy($18,$19)|0);
  $20 = $q;
  _QEnqueue((356),$20);
  $21 = $q;
  $22 = ((($21)) + 4|0);
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _elf_init($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = $0;
 $2 = ((($1)) + 244|0);
 HEAP8[$2>>0] = 3;
 $3 = $0;
 $4 = ((($3)) + 152|0);
 HEAP32[$4>>2] = 214;
 STACKTOP = sp;return;
}
function _elf_write_module($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $em = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $em = sp;
 $0 = $modinfo;
 dest=$em; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[(388)>>2]|0;
 $2 = ((($em)) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($em)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strlen($4)|0);
 $6 = ((($em)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5)|0);
 HEAP32[$6>>2] = $8;
 while(1) {
  $9 = ((($em)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[(388)>>2]|0;
  $12 = ($10>>>0)>($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = ((($em)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + -1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(47);
  if (!($18)) {
   break;
  }
  $19 = ((($em)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + -1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(92);
  if (!($24)) {
   break;
  }
  $25 = ((($em)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + -1|0);
  HEAP32[$25>>2] = $27;
 }
 $28 = HEAP32[(376)>>2]|0;
 (_fseek($28,0,0)|0);
 $29 = $0;
 $30 = ((($29)) + 237|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $cond = ($32|0)==(2);
 $33 = ((($em)) + 56|0);
 if ($cond) {
  ;HEAP8[$33>>0]=HEAP8[83670>>0]|0;HEAP8[$33+1>>0]=HEAP8[83670+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[83670+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[83670+3>>0]|0;
  $34 = ((($em)) + 56|0);
  $35 = ((($34)) + 4|0);
  HEAP8[$35>>0] = 2;
  $36 = ((($em)) + 56|0);
  $37 = ((($36)) + 5|0);
  HEAP8[$37>>0] = 1;
  $38 = ((($em)) + 56|0);
  $39 = ((($38)) + 6|0);
  HEAP8[$39>>0] = 1;
  $40 = $0;
  $41 = ((($40)) + 244|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ((($em)) + 56|0);
  $44 = ((($43)) + 7|0);
  HEAP8[$44>>0] = $42;
  $45 = ((($em)) + 56|0);
  $46 = ((($45)) + 8|0);
  HEAP8[$46>>0] = 0;
  $47 = ((($em)) + 56|0);
  $48 = ((($47)) + 16|0);
  HEAP16[$48>>1] = 1;
  $49 = ((($em)) + 56|0);
  $50 = ((($49)) + 18|0);
  HEAP16[$50>>1] = 62;
  $51 = ((($em)) + 56|0);
  $52 = ((($51)) + 20|0);
  HEAP32[$52>>2] = 1;
  $53 = ((($em)) + 56|0);
  $54 = ((($53)) + 24|0);
  $55 = $54;
  $56 = $55;
  HEAP32[$56>>2] = 0;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = 0;
  $59 = ((($em)) + 56|0);
  $60 = ((($59)) + 32|0);
  $61 = $60;
  $62 = $61;
  HEAP32[$62>>2] = 0;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = 0;
  $65 = ((($em)) + 56|0);
  $66 = ((($65)) + 40|0);
  $67 = $66;
  $68 = $67;
  HEAP32[$68>>2] = 64;
  $69 = (($67) + 4)|0;
  $70 = $69;
  HEAP32[$70>>2] = 0;
  $71 = ((($em)) + 56|0);
  $72 = ((($71)) + 48|0);
  HEAP32[$72>>2] = 0;
  $73 = ((($em)) + 56|0);
  $74 = ((($73)) + 52|0);
  HEAP16[$74>>1] = 64;
  $75 = ((($em)) + 56|0);
  $76 = ((($75)) + 54|0);
  HEAP16[$76>>1] = 0;
  $77 = ((($em)) + 56|0);
  $78 = ((($77)) + 56|0);
  HEAP16[$78>>1] = 0;
  $79 = ((($em)) + 56|0);
  $80 = ((($79)) + 58|0);
  HEAP16[$80>>1] = 64;
  $81 = $0;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (1 + ($83))|0;
  $85 = (($84) + 3)|0;
  $86 = (_get_num_reloc_sections()|0);
  $87 = (($85) + ($86))|0;
  $88 = $87&65535;
  $89 = ((($em)) + 56|0);
  $90 = ((($89)) + 60|0);
  HEAP16[$90>>1] = $88;
  $91 = $0;
  $92 = ((($91)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (1 + ($93))|0;
  $95 = (($94) + 0)|0;
  $96 = $95&65535;
  $97 = ((($em)) + 56|0);
  $98 = ((($97)) + 62|0);
  HEAP16[$98>>1] = $96;
  $99 = ((($em)) + 56|0);
  $100 = HEAP32[(376)>>2]|0;
  $101 = (_fwrite($99,1,64,$100)|0);
  $102 = ($101|0)!=(64);
  if ($102) {
   _WriteError();
  }
  $103 = $0;
  $104 = ((($em)) + 56|0);
  $105 = ((($104)) + 60|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106&65535;
  $108 = ((($em)) + 56|0);
  $109 = ((($108)) + 58|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $112 = Math_imul($107, $111)|0;
  $113 = (64 + ($112))|0;
  (_elf_write_section_table64($103,$em,$113)|0);
  $182 = $0;
  (_elf_write_data($182,$em)|0);
  STACKTOP = sp;return 0;
 } else {
  ;HEAP8[$33>>0]=HEAP8[83670>>0]|0;HEAP8[$33+1>>0]=HEAP8[83670+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[83670+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[83670+3>>0]|0;
  $114 = ((($em)) + 56|0);
  $115 = ((($114)) + 4|0);
  HEAP8[$115>>0] = 1;
  $116 = ((($em)) + 56|0);
  $117 = ((($116)) + 5|0);
  HEAP8[$117>>0] = 1;
  $118 = ((($em)) + 56|0);
  $119 = ((($118)) + 6|0);
  HEAP8[$119>>0] = 1;
  $120 = $0;
  $121 = ((($120)) + 244|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = ((($em)) + 56|0);
  $124 = ((($123)) + 7|0);
  HEAP8[$124>>0] = $122;
  $125 = ((($em)) + 56|0);
  $126 = ((($125)) + 8|0);
  HEAP8[$126>>0] = 0;
  $127 = ((($em)) + 56|0);
  $128 = ((($127)) + 16|0);
  HEAP16[$128>>1] = 1;
  $129 = ((($em)) + 56|0);
  $130 = ((($129)) + 18|0);
  HEAP16[$130>>1] = 3;
  $131 = ((($em)) + 56|0);
  $132 = ((($131)) + 20|0);
  HEAP32[$132>>2] = 1;
  $133 = ((($em)) + 56|0);
  $134 = ((($133)) + 24|0);
  HEAP32[$134>>2] = 0;
  $135 = ((($em)) + 56|0);
  $136 = ((($135)) + 28|0);
  HEAP32[$136>>2] = 0;
  $137 = ((($em)) + 56|0);
  $138 = ((($137)) + 32|0);
  HEAP32[$138>>2] = 52;
  $139 = ((($em)) + 56|0);
  $140 = ((($139)) + 36|0);
  HEAP32[$140>>2] = 0;
  $141 = ((($em)) + 56|0);
  $142 = ((($141)) + 40|0);
  HEAP16[$142>>1] = 52;
  $143 = ((($em)) + 56|0);
  $144 = ((($143)) + 42|0);
  HEAP16[$144>>1] = 0;
  $145 = ((($em)) + 56|0);
  $146 = ((($145)) + 44|0);
  HEAP16[$146>>1] = 0;
  $147 = ((($em)) + 56|0);
  $148 = ((($147)) + 46|0);
  HEAP16[$148>>1] = 40;
  $149 = $0;
  $150 = ((($149)) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (1 + ($151))|0;
  $153 = (($152) + 3)|0;
  $154 = (_get_num_reloc_sections()|0);
  $155 = (($153) + ($154))|0;
  $156 = $155&65535;
  $157 = ((($em)) + 56|0);
  $158 = ((($157)) + 48|0);
  HEAP16[$158>>1] = $156;
  $159 = $0;
  $160 = ((($159)) + 8|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (1 + ($161))|0;
  $163 = (($162) + 0)|0;
  $164 = $163&65535;
  $165 = ((($em)) + 56|0);
  $166 = ((($165)) + 50|0);
  HEAP16[$166>>1] = $164;
  $167 = ((($em)) + 56|0);
  $168 = HEAP32[(376)>>2]|0;
  $169 = (_fwrite($167,1,52,$168)|0);
  $170 = ($169|0)!=(52);
  if ($170) {
   _WriteError();
  }
  $171 = $0;
  $172 = ((($em)) + 56|0);
  $173 = ((($172)) + 48|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = ((($em)) + 56|0);
  $177 = ((($176)) + 46|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $178&65535;
  $180 = Math_imul($175, $179)|0;
  $181 = (52 + ($180))|0;
  (_elf_write_section_table32($171,$em,$181)|0);
  $182 = $0;
  (_elf_write_data($182,$em)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _get_num_reloc_sections() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $num = 0;
 $0 = HEAP32[(15420)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $num;
   $10 = (($9) + 1)|0;
   $num = $10;
  }
  $11 = $curr;
  $12 = ((($11)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $curr = $13;
 }
 $14 = $num;
 STACKTOP = sp;return ($14|0);
}
function _elf_write_section_table64($modinfo,$em,$fileoffset) {
 $modinfo = $modinfo|0;
 $em = $em|0;
 $fileoffset = $fileoffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $i = 0, $p = 0, $shdr64 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $shdr64 = sp;
 $0 = $modinfo;
 $1 = $em;
 $2 = $fileoffset;
 $3 = $2;
 $4 = (($3) + 15)|0;
 $5 = $4 & -16;
 $2 = $5;
 $6 = $1;
 _set_shstrtab_values($6);
 dest=$shdr64; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[(376)>>2]|0;
 $8 = (_fwrite($shdr64,1,64,$7)|0);
 $9 = ($8|0)!=(64);
 if ($9) {
  _WriteError();
 }
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $p = $13;
 $14 = $p;
 $15 = ((($14)) + 1|0);
 $p = $15;
 $16 = HEAP32[(15420)>>2]|0;
 $curr = $16;
 while(1) {
  $17 = $curr;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  dest=$shdr64; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = $p;
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $19;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  HEAP32[$shdr64>>2] = $26;
  $27 = $p;
  $28 = (_strlen($27)|0);
  $29 = (($28) + 1)|0;
  $30 = $p;
  $31 = (($30) + ($29)|0);
  $p = $31;
  $32 = $curr;
  $33 = ((($32)) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 67|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36&255) >>> 1;
  $38 = $37 & 1;
  $39 = $38&255;
  $40 = ($39|0)==(1);
  do {
   if ($40) {
    $41 = ((($shdr64)) + 4|0);
    HEAP32[$41>>2] = 7;
    $42 = ((($shdr64)) + 8|0);
    $43 = $42;
    $44 = $43;
    HEAP32[$44>>2] = 0;
    $45 = (($43) + 4)|0;
    $46 = $45;
    HEAP32[$46>>2] = 0;
   } else {
    $47 = $curr;
    $48 = ((($47)) + 60|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 44|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)!=(3);
    $53 = $52 ? 1 : 8;
    $54 = ((($shdr64)) + 4|0);
    HEAP32[$54>>2] = $53;
    $55 = $curr;
    $56 = ((($55)) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($57)) + 44|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(1);
    if ($60) {
     $61 = ((($shdr64)) + 8|0);
     $62 = $61;
     $63 = $62;
     HEAP32[$63>>2] = 6;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = 0;
     break;
    }
    $66 = $curr;
    $67 = ((($66)) + 60|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($68)) + 67|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 & 1;
    $72 = $71&255;
    $73 = ($72|0)==(1);
    if ($73) {
     $74 = ((($shdr64)) + 8|0);
     $75 = $74;
     $76 = $75;
     HEAP32[$76>>2] = 2;
     $77 = (($75) + 4)|0;
     $78 = $77;
     HEAP32[$78>>2] = 0;
     break;
    }
    $79 = $curr;
    $80 = ((($79)) + 60|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 52|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)!=(0|0);
    if ($84) {
     $85 = $curr;
     $86 = ((($85)) + 60|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($87)) + 52|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($89)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (_strcmp($91,109557)|0);
     $93 = ($92|0)==(0);
     if ($93) {
      $94 = ((($shdr64)) + 8|0);
      $95 = $94;
      $96 = $95;
      HEAP32[$96>>2] = 2;
      $97 = (($95) + 4)|0;
      $98 = $97;
      HEAP32[$98>>2] = 0;
      break;
     }
    }
    $99 = ((($shdr64)) + 8|0);
    $100 = $99;
    $101 = $100;
    HEAP32[$101>>2] = 3;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = 0;
   }
  } while(0);
  $104 = ((($shdr64)) + 16|0);
  $105 = $104;
  $106 = $105;
  HEAP32[$106>>2] = 0;
  $107 = (($105) + 4)|0;
  $108 = $107;
  HEAP32[$108>>2] = 0;
  $109 = $2;
  $110 = ((($shdr64)) + 24|0);
  $111 = $110;
  $112 = $111;
  HEAP32[$112>>2] = $109;
  $113 = (($111) + 4)|0;
  $114 = $113;
  HEAP32[$114>>2] = 0;
  $115 = $2;
  $116 = $curr;
  $117 = ((($116)) + 60|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 32|0);
  HEAP32[$119>>2] = $115;
  $120 = $curr;
  $121 = ((($120)) + 36|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = ((($shdr64)) + 32|0);
  $126 = $125;
  $127 = $126;
  HEAP32[$127>>2] = $122;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $124;
  $130 = ((($shdr64)) + 40|0);
  HEAP32[$130>>2] = 0;
  $131 = ((($shdr64)) + 44|0);
  HEAP32[$131>>2] = 0;
  $132 = $curr;
  $133 = (_Get_Alignment($132)|0);
  $134 = ((($shdr64)) + 48|0);
  $135 = $134;
  $136 = $135;
  HEAP32[$136>>2] = $133;
  $137 = (($135) + 4)|0;
  $138 = $137;
  HEAP32[$138>>2] = 0;
  $139 = ((($shdr64)) + 56|0);
  $140 = $139;
  $141 = $140;
  HEAP32[$141>>2] = 0;
  $142 = (($140) + 4)|0;
  $143 = $142;
  HEAP32[$143>>2] = 0;
  $144 = HEAP32[(376)>>2]|0;
  $145 = (_fwrite($shdr64,1,64,$144)|0);
  $146 = ($145|0)!=(64);
  if ($146) {
   _WriteError();
  }
  $147 = $curr;
  $148 = (_get_relocation_count($147)|0);
  $149 = $curr;
  $150 = ((($149)) + 60|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 36|0);
  HEAP32[$152>>2] = $148;
  $153 = ((($shdr64)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)!=(8);
  if ($155) {
   $156 = ((($shdr64)) + 32|0);
   $157 = $156;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = (($157) + 4)|0;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $163 = $2;
   $164 = (_i64Add(($163|0),0,($159|0),($162|0))|0);
   $165 = tempRet0;
   $2 = $164;
   $166 = $2;
   $167 = (($166) + 15)|0;
   $168 = $167 & -16;
   $2 = $168;
  }
  $169 = $curr;
  $170 = ((($169)) + 64|0);
  $171 = HEAP32[$170>>2]|0;
  $curr = $171;
 }
 $172 = $1;
 _set_symtab_values($172);
 $i = 0;
 while(1) {
  $173 = $i;
  $174 = ($173|0)<(3);
  if (!($174)) {
   break;
  }
  $175 = $p;
  $176 = $1;
  $177 = ((($176)) + 16|0);
  $178 = ((($177)) + 8|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $175;
  $181 = $179;
  $182 = (($180) - ($181))|0;
  HEAP32[$shdr64>>2] = $182;
  $183 = $p;
  $184 = (_strlen($183)|0);
  $185 = (($184) + 1)|0;
  $186 = $p;
  $187 = (($186) + ($185)|0);
  $p = $187;
  $188 = $i;
  $189 = (8684 + ($188<<3)|0);
  $190 = ((($189)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ((($shdr64)) + 4|0);
  HEAP32[$192>>2] = $191;
  $193 = ((($shdr64)) + 8|0);
  $194 = $193;
  $195 = $194;
  HEAP32[$195>>2] = 0;
  $196 = (($194) + 4)|0;
  $197 = $196;
  HEAP32[$197>>2] = 0;
  $198 = $2;
  $199 = ((($shdr64)) + 24|0);
  $200 = $199;
  $201 = $200;
  HEAP32[$201>>2] = $198;
  $202 = (($200) + 4)|0;
  $203 = $202;
  HEAP32[$203>>2] = 0;
  $204 = $2;
  $205 = $i;
  $206 = $1;
  $207 = ((($206)) + 16|0);
  $208 = (($207) + (($205*12)|0)|0);
  $209 = ((($208)) + 4|0);
  HEAP32[$209>>2] = $204;
  $210 = $i;
  $211 = $1;
  $212 = ((($211)) + 16|0);
  $213 = (($212) + (($210*12)|0)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($shdr64)) + 32|0);
  $216 = $215;
  $217 = $216;
  HEAP32[$217>>2] = $214;
  $218 = (($216) + 4)|0;
  $219 = $218;
  HEAP32[$219>>2] = 0;
  $220 = $i;
  $221 = ($220|0)==(1);
  if ($221) {
   $222 = $0;
   $223 = ((($222)) + 8|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = (1 + ($224))|0;
   $226 = (($225) + 2)|0;
   $227 = ((($shdr64)) + 40|0);
   HEAP32[$227>>2] = $226;
   $228 = $1;
   $229 = ((($228)) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($shdr64)) + 44|0);
   HEAP32[$231>>2] = $230;
   $232 = ((($shdr64)) + 48|0);
   $233 = $232;
   $234 = $233;
   HEAP32[$234>>2] = 4;
   $235 = (($233) + 4)|0;
   $236 = $235;
   HEAP32[$236>>2] = 0;
   $237 = ((($shdr64)) + 56|0);
   $238 = $237;
   $239 = $238;
   HEAP32[$239>>2] = 24;
   $240 = (($238) + 4)|0;
   $241 = $240;
   HEAP32[$241>>2] = 0;
  } else {
   $242 = ((($shdr64)) + 40|0);
   HEAP32[$242>>2] = 0;
   $243 = ((($shdr64)) + 44|0);
   HEAP32[$243>>2] = 0;
   $244 = ((($shdr64)) + 48|0);
   $245 = $244;
   $246 = $245;
   HEAP32[$246>>2] = 1;
   $247 = (($245) + 4)|0;
   $248 = $247;
   HEAP32[$248>>2] = 0;
   $249 = ((($shdr64)) + 56|0);
   $250 = $249;
   $251 = $250;
   HEAP32[$251>>2] = 0;
   $252 = (($250) + 4)|0;
   $253 = $252;
   HEAP32[$253>>2] = 0;
  }
  $254 = HEAP32[(376)>>2]|0;
  $255 = (_fwrite($shdr64,1,64,$254)|0);
  $256 = ($255|0)!=(64);
  if ($256) {
   _WriteError();
  }
  $257 = ((($shdr64)) + 32|0);
  $258 = $257;
  $259 = $258;
  $260 = HEAP32[$259>>2]|0;
  $261 = (($258) + 4)|0;
  $262 = $261;
  $263 = HEAP32[$262>>2]|0;
  $264 = $2;
  $265 = (_i64Add(($264|0),0,($260|0),($263|0))|0);
  $266 = tempRet0;
  $2 = $265;
  $267 = $2;
  $268 = (($267) + 15)|0;
  $269 = $268 & -16;
  $2 = $269;
  $270 = $i;
  $271 = (($270) + 1)|0;
  $i = $271;
 }
 $272 = HEAP32[(15420)>>2]|0;
 $curr = $272;
 while(1) {
  $273 = $curr;
  $274 = ($273|0)!=(0|0);
  if (!($274)) {
   break;
  }
  $275 = $curr;
  $276 = ((($275)) + 60|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ((($277)) + 24|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = ($279|0)==(0|0);
  if (!($280)) {
   dest=$shdr64; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $281 = $p;
   $282 = $1;
   $283 = ((($282)) + 16|0);
   $284 = ((($283)) + 8|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $281;
   $287 = $285;
   $288 = (($286) - ($287))|0;
   HEAP32[$shdr64>>2] = $288;
   $289 = $p;
   $290 = (_strlen($289)|0);
   $291 = (($290) + 1)|0;
   $292 = $p;
   $293 = (($292) + ($291)|0);
   $p = $293;
   $294 = ((($shdr64)) + 4|0);
   HEAP32[$294>>2] = 4;
   $295 = ((($shdr64)) + 8|0);
   $296 = $295;
   $297 = $296;
   HEAP32[$297>>2] = 0;
   $298 = (($296) + 4)|0;
   $299 = $298;
   HEAP32[$299>>2] = 0;
   $300 = ((($shdr64)) + 16|0);
   $301 = $300;
   $302 = $301;
   HEAP32[$302>>2] = 0;
   $303 = (($301) + 4)|0;
   $304 = $303;
   HEAP32[$304>>2] = 0;
   $305 = $2;
   $306 = ((($shdr64)) + 24|0);
   $307 = $306;
   $308 = $307;
   HEAP32[$308>>2] = $305;
   $309 = (($307) + 4)|0;
   $310 = $309;
   HEAP32[$310>>2] = 0;
   $311 = $2;
   $312 = $curr;
   $313 = ((($312)) + 60|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ((($314)) + 8|0);
   HEAP32[$315>>2] = $311;
   $316 = $curr;
   $317 = ((($316)) + 60|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ((($318)) + 36|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = ($320*24)|0;
   $322 = ((($shdr64)) + 32|0);
   $323 = $322;
   $324 = $323;
   HEAP32[$324>>2] = $321;
   $325 = (($323) + 4)|0;
   $326 = $325;
   HEAP32[$326>>2] = 0;
   $327 = $0;
   $328 = ((($327)) + 8|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (1 + ($329))|0;
   $331 = (($330) + 1)|0;
   $332 = ((($shdr64)) + 40|0);
   HEAP32[$332>>2] = $331;
   $333 = $curr;
   $334 = ((($333)) + 12|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = (_GetSegIdx($335)|0);
   $337 = ((($shdr64)) + 44|0);
   HEAP32[$337>>2] = $336;
   $338 = ((($shdr64)) + 48|0);
   $339 = $338;
   $340 = $339;
   HEAP32[$340>>2] = 4;
   $341 = (($339) + 4)|0;
   $342 = $341;
   HEAP32[$342>>2] = 0;
   $343 = ((($shdr64)) + 56|0);
   $344 = $343;
   $345 = $344;
   HEAP32[$345>>2] = 24;
   $346 = (($344) + 4)|0;
   $347 = $346;
   HEAP32[$347>>2] = 0;
   $348 = HEAP32[(376)>>2]|0;
   $349 = (_fwrite($shdr64,1,64,$348)|0);
   $350 = ($349|0)!=(64);
   if ($350) {
    _WriteError();
   }
   $351 = ((($shdr64)) + 32|0);
   $352 = $351;
   $353 = $352;
   $354 = HEAP32[$353>>2]|0;
   $355 = (($352) + 4)|0;
   $356 = $355;
   $357 = HEAP32[$356>>2]|0;
   $358 = $2;
   $359 = (_i64Add(($358|0),0,($354|0),($357|0))|0);
   $360 = tempRet0;
   $2 = $359;
   $361 = $2;
   $362 = (($361) + 15)|0;
   $363 = $362 & -16;
   $2 = $363;
  }
  $364 = $curr;
  $365 = ((($364)) + 64|0);
  $366 = HEAP32[$365>>2]|0;
  $curr = $366;
 }
 STACKTOP = sp;return 0;
}
function _elf_write_section_table32($modinfo,$em,$fileoffset) {
 $modinfo = $modinfo|0;
 $em = $em|0;
 $fileoffset = $fileoffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $i = 0, $p = 0, $shdr32 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $shdr32 = sp;
 $0 = $modinfo;
 $1 = $em;
 $2 = $fileoffset;
 $3 = $2;
 $4 = (($3) + 15)|0;
 $5 = $4 & -16;
 $2 = $5;
 $6 = $1;
 _set_shstrtab_values($6);
 dest=$shdr32; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = HEAP32[(376)>>2]|0;
 $8 = (_fwrite($shdr32,1,40,$7)|0);
 $9 = ($8|0)!=(40);
 if ($9) {
  _WriteError();
 }
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $p = $13;
 $14 = $p;
 $15 = ((($14)) + 1|0);
 $p = $15;
 $16 = HEAP32[(15420)>>2]|0;
 $curr = $16;
 while(1) {
  $17 = $curr;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  dest=$shdr32; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = $p;
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $19;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  HEAP32[$shdr32>>2] = $26;
  $27 = $p;
  $28 = (_strlen($27)|0);
  $29 = (($28) + 1)|0;
  $30 = $p;
  $31 = (($30) + ($29)|0);
  $p = $31;
  $32 = $curr;
  $33 = ((($32)) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 67|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36&255) >>> 1;
  $38 = $37 & 1;
  $39 = $38&255;
  $40 = ($39|0)==(1);
  do {
   if ($40) {
    $41 = ((($shdr32)) + 4|0);
    HEAP32[$41>>2] = 7;
    $42 = ((($shdr32)) + 8|0);
    HEAP32[$42>>2] = 0;
   } else {
    $43 = $curr;
    $44 = ((($43)) + 60|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 44|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(3);
    $49 = $48 ? 1 : 8;
    $50 = ((($shdr32)) + 4|0);
    HEAP32[$50>>2] = $49;
    $51 = $curr;
    $52 = ((($51)) + 60|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 44|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(1);
    if ($56) {
     $57 = ((($shdr32)) + 8|0);
     HEAP32[$57>>2] = 6;
     break;
    }
    $58 = $curr;
    $59 = ((($58)) + 60|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 67|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 & 1;
    $64 = $63&255;
    $65 = ($64|0)==(1);
    if ($65) {
     $66 = ((($shdr32)) + 8|0);
     HEAP32[$66>>2] = 2;
     break;
    }
    $67 = $curr;
    $68 = ((($67)) + 60|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 52|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)!=(0|0);
    if ($72) {
     $73 = $curr;
     $74 = ((($73)) + 60|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 52|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (_strcmp($79,109557)|0);
     $81 = ($80|0)==(0);
     if ($81) {
      $82 = ((($shdr32)) + 8|0);
      HEAP32[$82>>2] = 2;
      break;
     }
    }
    $83 = ((($shdr32)) + 8|0);
    HEAP32[$83>>2] = 3;
   }
  } while(0);
  $84 = ((($shdr32)) + 12|0);
  HEAP32[$84>>2] = 0;
  $85 = $2;
  $86 = ((($shdr32)) + 16|0);
  HEAP32[$86>>2] = $85;
  $87 = $2;
  $88 = $curr;
  $89 = ((($88)) + 60|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 32|0);
  HEAP32[$91>>2] = $87;
  $92 = $curr;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($shdr32)) + 20|0);
  HEAP32[$95>>2] = $94;
  $96 = ((($shdr32)) + 24|0);
  HEAP32[$96>>2] = 0;
  $97 = ((($shdr32)) + 28|0);
  HEAP32[$97>>2] = 0;
  $98 = $curr;
  $99 = (_Get_Alignment($98)|0);
  $100 = ((($shdr32)) + 32|0);
  HEAP32[$100>>2] = $99;
  $101 = ((($shdr32)) + 36|0);
  HEAP32[$101>>2] = 0;
  $102 = HEAP32[(376)>>2]|0;
  $103 = (_fwrite($shdr32,1,40,$102)|0);
  $104 = ($103|0)!=(40);
  if ($104) {
   _WriteError();
  }
  $105 = $curr;
  $106 = (_get_relocation_count($105)|0);
  $107 = $curr;
  $108 = ((($107)) + 60|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 36|0);
  HEAP32[$110>>2] = $106;
  $111 = ((($shdr32)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)!=(8);
  if ($113) {
   $114 = ((($shdr32)) + 20|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $2;
   $117 = (($116) + ($115))|0;
   $2 = $117;
   $118 = $2;
   $119 = (($118) + 15)|0;
   $120 = $119 & -16;
   $2 = $120;
  }
  $121 = $curr;
  $122 = ((($121)) + 64|0);
  $123 = HEAP32[$122>>2]|0;
  $curr = $123;
 }
 $124 = $1;
 _set_symtab_values($124);
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = ($125|0)<(3);
  if (!($126)) {
   break;
  }
  $127 = $p;
  $128 = $1;
  $129 = ((($128)) + 16|0);
  $130 = ((($129)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $127;
  $133 = $131;
  $134 = (($132) - ($133))|0;
  HEAP32[$shdr32>>2] = $134;
  $135 = $p;
  $136 = (_strlen($135)|0);
  $137 = (($136) + 1)|0;
  $138 = $p;
  $139 = (($138) + ($137)|0);
  $p = $139;
  $140 = $i;
  $141 = (8684 + ($140<<3)|0);
  $142 = ((($141)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($shdr32)) + 4|0);
  HEAP32[$144>>2] = $143;
  $145 = ((($shdr32)) + 8|0);
  HEAP32[$145>>2] = 0;
  $146 = $2;
  $147 = ((($shdr32)) + 16|0);
  HEAP32[$147>>2] = $146;
  $148 = $2;
  $149 = $i;
  $150 = $1;
  $151 = ((($150)) + 16|0);
  $152 = (($151) + (($149*12)|0)|0);
  $153 = ((($152)) + 4|0);
  HEAP32[$153>>2] = $148;
  $154 = $i;
  $155 = $1;
  $156 = ((($155)) + 16|0);
  $157 = (($156) + (($154*12)|0)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($shdr32)) + 20|0);
  HEAP32[$159>>2] = $158;
  $160 = $i;
  $161 = ($160|0)==(1);
  if ($161) {
   $162 = $0;
   $163 = ((($162)) + 8|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (1 + ($164))|0;
   $166 = (($165) + 2)|0;
   $167 = ((($shdr32)) + 24|0);
   HEAP32[$167>>2] = $166;
   $168 = $1;
   $169 = ((($168)) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($shdr32)) + 28|0);
   HEAP32[$171>>2] = $170;
   $172 = ((($shdr32)) + 32|0);
   HEAP32[$172>>2] = 4;
   $173 = ((($shdr32)) + 36|0);
   HEAP32[$173>>2] = 16;
  } else {
   $174 = ((($shdr32)) + 24|0);
   HEAP32[$174>>2] = 0;
   $175 = ((($shdr32)) + 28|0);
   HEAP32[$175>>2] = 0;
   $176 = ((($shdr32)) + 32|0);
   HEAP32[$176>>2] = 1;
   $177 = ((($shdr32)) + 36|0);
   HEAP32[$177>>2] = 0;
  }
  $178 = HEAP32[(376)>>2]|0;
  $179 = (_fwrite($shdr32,1,40,$178)|0);
  $180 = ($179|0)!=(40);
  if ($180) {
   _WriteError();
  }
  $181 = ((($shdr32)) + 20|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = $2;
  $184 = (($183) + ($182))|0;
  $2 = $184;
  $185 = $2;
  $186 = (($185) + 15)|0;
  $187 = $186 & -16;
  $2 = $187;
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 $190 = HEAP32[(15420)>>2]|0;
 $curr = $190;
 while(1) {
  $191 = $curr;
  $192 = ($191|0)!=(0|0);
  if (!($192)) {
   break;
  }
  $193 = $curr;
  $194 = ((($193)) + 60|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($195)) + 24|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)==(0|0);
  if (!($198)) {
   dest=$shdr32; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $199 = $p;
   $200 = $1;
   $201 = ((($200)) + 16|0);
   $202 = ((($201)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $199;
   $205 = $203;
   $206 = (($204) - ($205))|0;
   HEAP32[$shdr32>>2] = $206;
   $207 = $p;
   $208 = (_strlen($207)|0);
   $209 = (($208) + 1)|0;
   $210 = $p;
   $211 = (($210) + ($209)|0);
   $p = $211;
   $212 = ((($shdr32)) + 4|0);
   HEAP32[$212>>2] = 9;
   $213 = ((($shdr32)) + 8|0);
   HEAP32[$213>>2] = 0;
   $214 = ((($shdr32)) + 12|0);
   HEAP32[$214>>2] = 0;
   $215 = $2;
   $216 = ((($shdr32)) + 16|0);
   HEAP32[$216>>2] = $215;
   $217 = $2;
   $218 = $curr;
   $219 = ((($218)) + 60|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((($220)) + 8|0);
   HEAP32[$221>>2] = $217;
   $222 = $curr;
   $223 = ((($222)) + 60|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($224)) + 36|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $226<<3;
   $228 = ((($shdr32)) + 20|0);
   HEAP32[$228>>2] = $227;
   $229 = $0;
   $230 = ((($229)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (1 + ($231))|0;
   $233 = (($232) + 1)|0;
   $234 = ((($shdr32)) + 24|0);
   HEAP32[$234>>2] = $233;
   $235 = $curr;
   $236 = ((($235)) + 12|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (_GetSegIdx($237)|0);
   $239 = ((($shdr32)) + 28|0);
   HEAP32[$239>>2] = $238;
   $240 = ((($shdr32)) + 32|0);
   HEAP32[$240>>2] = 4;
   $241 = ((($shdr32)) + 36|0);
   HEAP32[$241>>2] = 8;
   $242 = HEAP32[(376)>>2]|0;
   $243 = (_fwrite($shdr32,1,40,$242)|0);
   $244 = ($243|0)!=(40);
   if ($244) {
    _WriteError();
   }
   $245 = ((($shdr32)) + 20|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $2;
   $248 = (($247) + ($246))|0;
   $2 = $248;
   $249 = $2;
   $250 = (($249) + 15)|0;
   $251 = $250 & -16;
   $2 = $251;
  }
  $252 = $curr;
  $253 = ((($252)) + 64|0);
  $254 = HEAP32[$253>>2]|0;
  $curr = $254;
 }
 STACKTOP = sp;return 0;
}
function _elf_write_data($modinfo,$em) {
 $modinfo = $modinfo|0;
 $em = $em|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $curr = 0, $i = 0, $or$cond = 0, $size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $modinfo;
 $1 = $em;
 $2 = HEAP32[(15420)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $curr;
  $9 = ((($8)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($7) - ($12))|0;
  $size = $13;
  $14 = $curr;
  $15 = ((($14)) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(3);
  $20 = $size;
  $21 = ($20|0)!=(0);
  $or$cond = $19 & $21;
  if ($or$cond) {
   $22 = HEAP32[(376)>>2]|0;
   $23 = $curr;
   $24 = ((($23)) + 60|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $curr;
   $29 = ((($28)) + 60|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($27) + ($32))|0;
   (_fseek($22,$33,0)|0);
   $34 = $curr;
   $35 = ((($34)) + 60|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0|0);
   if (!($39)) {
    (_InternalError(83675,1234)|0);
   }
   $40 = $curr;
   $41 = ((($40)) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $size;
   $46 = HEAP32[(376)>>2]|0;
   $47 = (_fwrite($44,1,$45,$46)|0);
   $48 = $size;
   $49 = ($47|0)!=($48|0);
   if ($49) {
    _WriteError();
   }
  }
  $50 = $curr;
  $51 = ((($50)) + 64|0);
  $52 = HEAP32[$51>>2]|0;
  $curr = $52;
 }
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = ($53|0)<(3);
  if (!($54)) {
   break;
  }
  $55 = $i;
  $56 = $1;
  $57 = ((($56)) + 16|0);
  $58 = (($57) + (($55*12)|0)|0);
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = HEAP32[(376)>>2]|0;
   $63 = $i;
   $64 = $1;
   $65 = ((($64)) + 16|0);
   $66 = (($65) + (($63*12)|0)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   (_fseek($62,$68,0)|0);
   $69 = $i;
   $70 = $1;
   $71 = ((($70)) + 16|0);
   $72 = (($71) + (($69*12)|0)|0);
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $i;
   $76 = $1;
   $77 = ((($76)) + 16|0);
   $78 = (($77) + (($75*12)|0)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = HEAP32[(376)>>2]|0;
   $81 = (_fwrite($74,1,$79,$80)|0);
   $82 = $i;
   $83 = $1;
   $84 = ((($83)) + 16|0);
   $85 = (($84) + (($82*12)|0)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($81|0)!=($86|0);
   if ($87) {
    _WriteError();
   }
  }
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 $90 = HEAP32[(15420)>>2]|0;
 $curr = $90;
 while(1) {
  $91 = $curr;
  $92 = ($91|0)!=(0|0);
  if (!($92)) {
   break;
  }
  $93 = $curr;
  $94 = ((($93)) + 60|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0);
  do {
   if ($98) {
    $99 = HEAP32[(376)>>2]|0;
    $100 = $curr;
    $101 = ((($100)) + 60|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ((($102)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    (_fseek($99,$104,0)|0);
    $105 = $0;
    $106 = ((($105)) + 237|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = ($108|0)==(2);
    if ($109) {
     $110 = $curr;
     _write_relocs64($110);
     break;
    } else {
     $111 = $1;
     $112 = $curr;
     _write_relocs32($111,$112);
     break;
    }
   }
  } while(0);
  $113 = $curr;
  $114 = ((($113)) + 64|0);
  $115 = HEAP32[$114>>2]|0;
  $curr = $115;
 }
 $116 = $1;
 $117 = ((($116)) + 12|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = ($118<<24>>24)!=(0);
 if (!($119)) {
  STACKTOP = sp;return 0;
 }
 _EmitWarn(2,262,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _write_relocs64($curr) {
 $curr = $curr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $elftype = 0, $fixup = 0, $reloc64 = 0, $symidx = 0, $vararg_buffer = 0;
 var $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer = sp + 24|0;
 $reloc64 = sp;
 $0 = $curr;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $fixup = $5;
 while(1) {
  $6 = $fixup;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $fixup;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $symidx = $12;
  $13 = $fixup;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $reloc64;
  $17 = $16;
  HEAP32[$17>>2] = $15;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = 0;
  $20 = $fixup;
  $21 = ((($20)) + 24|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (0 - ($23))|0;
  $25 = ($24|0)<(0);
  $26 = $25 << 31 >> 31;
  $27 = ((($reloc64)) + 16|0);
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $26;
  $32 = $fixup;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  L4: do {
   switch ($34|0) {
   case 3:  {
    $elftype = 2;
    break;
   }
   case 7:  {
    $elftype = 1;
    break;
   }
   case 12:  {
    $elftype = 8;
    break;
   }
   case 6:  {
    $elftype = 10;
    break;
   }
   case 5:  {
    $elftype = 12;
    break;
   }
   case 2:  {
    $elftype = 13;
    break;
   }
   case 4:  {
    $elftype = 14;
    break;
   }
   case 1:  {
    $elftype = 15;
    break;
   }
   default: {
    $elftype = 0;
    $35 = $fixup;
    $36 = ((($35)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37>>>0)<(14);
    if ($38) {
     $39 = HEAP32[(500)>>2]|0;
     $40 = ((($39)) + 6|0);
     $41 = $fixup;
     $42 = ((($41)) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $0;
     $45 = ((($44)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $fixup;
     $48 = ((($47)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     HEAP32[$vararg_buffer>>2] = $40;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $43;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $46;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $49;
     (_EmitErr(198,$vararg_buffer)|0);
     break L4;
    } else {
     $50 = $fixup;
     $51 = ((($50)) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $0;
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $fixup;
     $57 = ((($56)) + 12|0);
     $58 = HEAP32[$57>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $52;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $55;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = $58;
     (_EmitErr(196,$vararg_buffer4)|0);
     break L4;
    }
   }
   }
  } while(0);
  $59 = $symidx;
  $60 = $elftype;
  $61 = $60&255;
  $62 = (_i64Add(0,($59|0),($61|0),0)|0);
  $63 = tempRet0;
  $64 = ((($reloc64)) + 8|0);
  $65 = $64;
  $66 = $65;
  HEAP32[$66>>2] = $62;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $63;
  $69 = HEAP32[(376)>>2]|0;
  $70 = (_fwrite($reloc64,1,24,$69)|0);
  $71 = ($70|0)!=(24);
  if ($71) {
   _WriteError();
  }
  $72 = $fixup;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $fixup = $74;
 }
 STACKTOP = sp;return;
}
function _write_relocs32($em,$curr) {
 $em = $em|0;
 $curr = $curr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $elftype = 0, $fixup = 0, $reloc32 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $reloc32 = sp + 32|0;
 $0 = $em;
 $1 = $curr;
 $2 = $1;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $fixup = $6;
 while(1) {
  $7 = $fixup;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $fixup;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$reloc32>>2] = $11;
  $12 = $fixup;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  L4: do {
   switch ($14|0) {
   case 6:  {
    $elftype = 1;
    break;
   }
   case 3:  {
    $elftype = 2;
    break;
   }
   case 12:  {
    $elftype = 8;
    break;
   }
   case 5:  {
    $15 = $0;
    $16 = ((($15)) + 12|0);
    HEAP8[$16>>0] = 1;
    $elftype = 20;
    break;
   }
   case 2:  {
    $17 = $0;
    $18 = ((($17)) + 12|0);
    HEAP8[$18>>0] = 1;
    $elftype = 21;
    break;
   }
   case 4:  {
    $19 = $0;
    $20 = ((($19)) + 12|0);
    HEAP8[$20>>0] = 1;
    $elftype = 22;
    break;
   }
   case 1:  {
    $21 = $0;
    $22 = ((($21)) + 12|0);
    HEAP8[$22>>0] = 1;
    $elftype = 23;
    break;
   }
   default: {
    $elftype = 0;
    $23 = $fixup;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25>>>0)<(14);
    if ($26) {
     $27 = HEAP32[(500)>>2]|0;
     $28 = ((($27)) + 6|0);
     $29 = $fixup;
     $30 = ((($29)) + 16|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $1;
     $33 = ((($32)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $fixup;
     $36 = ((($35)) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     HEAP32[$vararg_buffer>>2] = $28;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $31;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $34;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $37;
     (_EmitErr(198,$vararg_buffer)|0);
     break L4;
    } else {
     $38 = $fixup;
     $39 = ((($38)) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $1;
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $fixup;
     $45 = ((($44)) + 12|0);
     $46 = HEAP32[$45>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $40;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $43;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = $46;
     (_EmitErr(196,$vararg_buffer4)|0);
     break L4;
    }
   }
   }
  } while(0);
  $47 = $fixup;
  $48 = ((($47)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 << 8;
  $53 = $elftype;
  $54 = $53&255;
  $55 = (($52) + ($54))|0;
  $56 = ((($reloc32)) + 4|0);
  HEAP32[$56>>2] = $55;
  $57 = HEAP32[(376)>>2]|0;
  $58 = (_fwrite($reloc32,1,8,$57)|0);
  $59 = ($58|0)!=(8);
  if ($59) {
   _WriteError();
  }
  $60 = $fixup;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $fixup = $62;
 }
 STACKTOP = sp;return;
}
function _set_shstrtab_values($em) {
 $em = $em|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $curr = 0, $i = 0, $p = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 24|0;
 $0 = $em;
 $size = 1;
 $1 = HEAP32[(15420)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = $curr;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 60|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  $10 = $curr;
  if ($9) {
   $11 = ((($10)) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 60|0);
   $14 = HEAP32[$13>>2]|0;
   $16 = $14;
  } else {
   $15 = (_ElfConvertSectionName($10,$buffer)|0);
   $16 = $15;
  }
  $p = $16;
  $17 = $p;
  $18 = (_strlen($17)|0);
  $19 = (($18) + 1)|0;
  $20 = $size;
  $21 = (($20) + ($19))|0;
  $size = $21;
  $22 = $curr;
  $23 = ((($22)) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $p;
   $29 = (_strlen($28)|0);
   $30 = HEAP8[(557)>>0]|0;
   $31 = $30&255;
   $32 = ($31|0)==(2);
   $33 = $32 ? 6 : 5;
   $34 = (($29) + ($33))|0;
   $35 = $size;
   $36 = (($35) + ($34))|0;
   $size = $36;
  }
  $37 = $curr;
  $38 = ((($37)) + 64|0);
  $39 = HEAP32[$38>>2]|0;
  $curr = $39;
 }
 $i = 0;
 while(1) {
  $40 = $i;
  $41 = ($40|0)<(3);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = (8684 + ($42<<3)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_strlen($44)|0);
  $46 = (($45) + 1)|0;
  $47 = $size;
  $48 = (($47) + ($46))|0;
  $size = $48;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $size;
 $52 = $0;
 $53 = ((($52)) + 16|0);
 HEAP32[$53>>2] = $51;
 $54 = $size;
 $55 = (_LclAlloc($54)|0);
 $56 = $0;
 $57 = ((($56)) + 16|0);
 $58 = ((($57)) + 8|0);
 HEAP32[$58>>2] = $55;
 $59 = $0;
 $60 = ((($59)) + 16|0);
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $p = $62;
 $63 = $p;
 $64 = ((($63)) + 1|0);
 $p = $64;
 HEAP8[$63>>0] = 0;
 $65 = HEAP32[(15420)>>2]|0;
 $curr = $65;
 while(1) {
  $66 = $curr;
  $67 = ($66|0)!=(0|0);
  if (!($67)) {
   break;
  }
  $68 = $p;
  $69 = $curr;
  $70 = ((($69)) + 60|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 60|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0|0);
  $75 = $curr;
  if ($74) {
   $76 = ((($75)) + 60|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($77)) + 60|0);
   $79 = HEAP32[$78>>2]|0;
   $81 = $79;
  } else {
   $80 = (_ElfConvertSectionName($75,$buffer)|0);
   $81 = $80;
  }
  (_strcpy($68,$81)|0);
  $82 = $p;
  $83 = (_strlen($82)|0);
  $84 = (($83) + 1)|0;
  $85 = $p;
  $86 = (($85) + ($84)|0);
  $p = $86;
  $87 = $curr;
  $88 = ((($87)) + 64|0);
  $89 = HEAP32[$88>>2]|0;
  $curr = $89;
 }
 $i = 0;
 while(1) {
  $90 = $i;
  $91 = ($90|0)<(3);
  if (!($91)) {
   break;
  }
  $92 = $p;
  $93 = $i;
  $94 = (8684 + ($93<<3)|0);
  $95 = HEAP32[$94>>2]|0;
  (_strcpy($92,$95)|0);
  $96 = $p;
  $97 = (_strlen($96)|0);
  $98 = (($97) + 1)|0;
  $99 = $p;
  $100 = (($99) + ($98)|0);
  $p = $100;
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $103 = HEAP32[(15420)>>2]|0;
 $curr = $103;
 while(1) {
  $104 = $curr;
  $105 = ($104|0)!=(0|0);
  if (!($105)) {
   break;
  }
  $106 = $curr;
  $107 = ((($106)) + 60|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)!=(0|0);
  if ($111) {
   $112 = $p;
   $113 = HEAP8[(557)>>0]|0;
   $114 = $113&255;
   $115 = ($114|0)==(2);
   $116 = $115 ? 83707 : 83713;
   (_strcpy($112,$116)|0);
   $117 = $p;
   $118 = (_strlen($117)|0);
   $119 = $p;
   $120 = (($119) + ($118)|0);
   $p = $120;
   $121 = $p;
   $122 = $curr;
   $123 = ((($122)) + 60|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($124)) + 60|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0|0);
   $128 = $curr;
   if ($127) {
    $129 = ((($128)) + 60|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($130)) + 60|0);
    $132 = HEAP32[$131>>2]|0;
    $134 = $132;
   } else {
    $133 = (_ElfConvertSectionName($128,$buffer)|0);
    $134 = $133;
   }
   (_strcpy($121,$134)|0);
   $135 = $p;
   $136 = (_strlen($135)|0);
   $137 = (($136) + 1)|0;
   $138 = $p;
   $139 = (($138) + ($137)|0);
   $p = $139;
  }
  $140 = $curr;
  $141 = ((($140)) + 64|0);
  $142 = HEAP32[$141>>2]|0;
  $curr = $142;
 }
 $143 = $size;
 $144 = $p;
 $145 = $0;
 $146 = ((($145)) + 16|0);
 $147 = ((($146)) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $144;
 $150 = $148;
 $151 = (($149) - ($150))|0;
 $152 = ($143|0)==($151|0);
 if ($152) {
  STACKTOP = sp;return;
 }
 (_InternalError(83675,742)|0);
 STACKTOP = sp;return;
}
function _Get_Alignment($curr) {
 $curr = $curr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $curr;
 $2 = $1;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 66|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(255);
 if ($8) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 66|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = 1 << $14;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _get_relocation_count($curr) {
 $curr = $curr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fix = 0, $relocs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $curr;
 $relocs = 0;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $fix = $5;
 while(1) {
  $6 = $fix;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $fix;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $fix = $10;
  $11 = $relocs;
  $12 = (($11) + 1)|0;
  $relocs = $12;
 }
 $13 = $relocs;
 STACKTOP = sp;return ($13|0);
}
function _set_symtab_values($em) {
 $em = $em|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $curr = 0, $entries = 0, $fix = 0, $locals = 0, $localscurr = 0, $p2 = 0, $q = 0, $strsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $locals = sp + 8|0;
 $0 = $em;
 ;HEAP32[$locals>>2]=0|0;HEAP32[$locals+4>>2]=0|0;
 $1 = $0;
 HEAP32[$1>>2] = 2;
 $2 = HEAP32[(15420)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
  $8 = $curr;
  $9 = ((($8)) + 56|0);
  HEAP32[$9>>2] = $6;
  $10 = $curr;
  $11 = ((($10)) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $curr = $12;
 }
 $13 = HEAP32[(15420)>>2]|0;
 $curr = $13;
 while(1) {
  $14 = $curr;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $curr;
  $17 = ((($16)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(0);
  L8: do {
   if ($21) {
    $22 = $curr;
    $23 = ((($22)) + 60|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 24|0);
    $26 = HEAP32[$25>>2]|0;
    $fix = $26;
    while(1) {
     $27 = $fix;
     $28 = ($27|0)!=(0|0);
     if (!($28)) {
      break L8;
     }
     $29 = $fix;
     $30 = ((($29)) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($31)) + 24|0);
     $33 = HEAP16[$32>>1]|0;
     $34 = ($33&65535) >>> 6;
     $35 = $34 & 1;
     $36 = $35&255;
     $37 = ($36<<24>>24)!=(0);
     $38 = $fix;
     if ($37) {
      $39 = ((($38)) + 28|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = $fix;
      $42 = ((($41)) + 36|0);
      HEAP32[$42>>2] = $40;
     } else {
      $43 = ((($38)) + 36|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ((($44)) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(1);
      if ($47) {
       $48 = $fix;
       $49 = ((($48)) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ((($50)) + 24|0);
       $52 = HEAP16[$51>>1]|0;
       $53 = ($52&65535) >>> 14;
       $54 = $53 & 1;
       $55 = $54&255;
       $56 = $55&255;
       $57 = ($56|0)==(0);
       if ($57) {
        $58 = $fix;
        $59 = ((($58)) + 36|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = ((($60)) + 24|0);
        $62 = HEAP16[$61>>1]|0;
        $63 = ($62&65535) >>> 7;
        $64 = $63 & 1;
        $65 = $64&255;
        $66 = $65&255;
        $67 = ($66|0)==(0);
        if ($67) {
         $68 = $fix;
         $69 = ((($68)) + 36|0);
         $70 = HEAP32[$69>>2]|0;
         $71 = ((($70)) + 24|0);
         $72 = HEAP16[$71>>1]|0;
         $73 = $72 & -16385;
         $74 = $73 | 16384;
         HEAP16[$71>>1] = $74;
         $75 = (_LclAlloc(8)|0);
         $localscurr = $75;
         $76 = $localscurr;
         HEAP32[$76>>2] = 0;
         $77 = $fix;
         $78 = ((($77)) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = $localscurr;
         $81 = ((($80)) + 4|0);
         HEAP32[$81>>2] = $79;
         $82 = ((($locals)) + 4|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = ($83|0)!=(0|0);
         $85 = $localscurr;
         if ($84) {
          $86 = ((($locals)) + 4|0);
          $87 = HEAP32[$86>>2]|0;
          HEAP32[$87>>2] = $85;
          $88 = $localscurr;
          $89 = ((($locals)) + 4|0);
          HEAP32[$89>>2] = $88;
         } else {
          $90 = ((($locals)) + 4|0);
          HEAP32[$90>>2] = $85;
          HEAP32[$locals>>2] = $85;
         }
         $91 = $0;
         $92 = HEAP32[$91>>2]|0;
         $93 = (($92) + 1)|0;
         HEAP32[$91>>2] = $93;
         $94 = $fix;
         $95 = ((($94)) + 36|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ((($96)) + 56|0);
         HEAP32[$97>>2] = $92;
        }
       }
      }
     }
     $98 = $fix;
     $99 = ((($98)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $fix = $100;
    }
   }
  } while(0);
  $101 = $curr;
  $102 = ((($101)) + 64|0);
  $103 = HEAP32[$102>>2]|0;
  $curr = $103;
 }
 $104 = $0;
 $105 = HEAP32[$104>>2]|0;
 $106 = $0;
 $107 = ((($106)) + 4|0);
 HEAP32[$107>>2] = $105;
 $108 = HEAP32[(15412)>>2]|0;
 $curr = $108;
 while(1) {
  $109 = $curr;
  $110 = ($109|0)!=(0|0);
  if (!($110)) {
   break;
  }
  $111 = $curr;
  $112 = ((($111)) + 28|0);
  $113 = ((($112)) + 3|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = ($114&255) >>> 2;
  $116 = $115 & 1;
  $117 = $116&255;
  $118 = ($117|0)==(0);
  if ($118) {
   $119 = $curr;
   $120 = ((($119)) + 28|0);
   $121 = ((($120)) + 3|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = ($122&255) >>> 3;
   $124 = $123 & 1;
   $125 = $124&255;
   $126 = ($125|0)==(1);
   if (!($126)) {
    label = 24;
   }
  } else {
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   $127 = $0;
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + 1)|0;
   HEAP32[$127>>2] = $129;
   $130 = $curr;
   $131 = ((($130)) + 56|0);
   HEAP32[$131>>2] = $128;
  }
  $132 = $curr;
  $133 = ((($132)) + 64|0);
  $134 = HEAP32[$133>>2]|0;
  $curr = $134;
 }
 $135 = HEAP32[(332)>>2]|0;
 $q = $135;
 while(1) {
  $136 = $q;
  $137 = ($136|0)!=(0|0);
  $138 = $0;
  $139 = HEAP32[$138>>2]|0;
  if (!($137)) {
   break;
  }
  $140 = (($139) + 1)|0;
  HEAP32[$138>>2] = $140;
  $141 = $q;
  $142 = ((($141)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($143)) + 56|0);
  HEAP32[$144>>2] = $139;
  $145 = $q;
  $146 = HEAP32[$145>>2]|0;
  $q = $146;
 }
 $entries = $139;
 $147 = HEAP8[(557)>>0]|0;
 $148 = $147&255;
 $149 = ($148|0)==(2);
 $150 = $0;
 $151 = $entries;
 $152 = HEAP32[$locals>>2]|0;
 if ($149) {
  $153 = (_set_symtab64($150,$151,$152)|0);
  $strsize = $153;
 } else {
  $154 = (_set_symtab32($150,$151,$152)|0);
  $strsize = $154;
 }
 $155 = $strsize;
 $156 = $0;
 $157 = ((($156)) + 16|0);
 $158 = ((($157)) + 24|0);
 HEAP32[$158>>2] = $155;
 $159 = $strsize;
 $160 = (_LclAlloc($159)|0);
 $161 = $0;
 $162 = ((($161)) + 16|0);
 $163 = ((($162)) + 24|0);
 $164 = ((($163)) + 8|0);
 HEAP32[$164>>2] = $160;
 $165 = $0;
 $166 = ((($165)) + 16|0);
 $167 = ((($166)) + 24|0);
 $168 = ((($167)) + 8|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $strsize;
 _memset(($169|0),0,($170|0))|0;
 $171 = $0;
 $172 = ((($171)) + 16|0);
 $173 = ((($172)) + 24|0);
 $174 = ((($173)) + 8|0);
 $175 = HEAP32[$174>>2]|0;
 $p2 = $175;
 $176 = $p2;
 $177 = ((($176)) + 1|0);
 $p2 = $177;
 HEAP8[$176>>0] = 0;
 $178 = $p2;
 $179 = $0;
 $180 = ((($179)) + 8|0);
 $181 = HEAP32[$180>>2]|0;
 (_strcpy($178,$181)|0);
 $182 = $p2;
 $183 = (_strlen($182)|0);
 $184 = (($183) + 1)|0;
 $185 = $p2;
 $186 = (($185) + ($184)|0);
 $p2 = $186;
 $187 = HEAP32[$locals>>2]|0;
 $localscurr = $187;
 while(1) {
  $188 = $localscurr;
  $189 = ($188|0)!=(0|0);
  if (!($189)) {
   break;
  }
  $190 = $localscurr;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $p2;
  $194 = (_Mangle($192,$193)|0);
  $195 = (($194) + 1)|0;
  $196 = $p2;
  $197 = (($196) + ($195)|0);
  $p2 = $197;
  $198 = $localscurr;
  $199 = HEAP32[$198>>2]|0;
  $localscurr = $199;
 }
 $200 = HEAP32[(15412)>>2]|0;
 $curr = $200;
 while(1) {
  $201 = $curr;
  $202 = ($201|0)!=(0|0);
  if (!($202)) {
   break;
  }
  $203 = $curr;
  $204 = ((($203)) + 28|0);
  $205 = ((($204)) + 3|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = ($206&255) >>> 2;
  $208 = $207 & 1;
  $209 = $208&255;
  $210 = ($209|0)==(0);
  if ($210) {
   $211 = $curr;
   $212 = ((($211)) + 28|0);
   $213 = ((($212)) + 3|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = ($214&255) >>> 3;
   $216 = $215 & 1;
   $217 = $216&255;
   $218 = ($217|0)==(1);
   if (!($218)) {
    label = 39;
   }
  } else {
   label = 39;
  }
  if ((label|0) == 39) {
   label = 0;
   $219 = $curr;
   $220 = $p2;
   $221 = (_Mangle($219,$220)|0);
   $222 = (($221) + 1)|0;
   $223 = $p2;
   $224 = (($223) + ($222)|0);
   $p2 = $224;
  }
  $225 = $curr;
  $226 = ((($225)) + 64|0);
  $227 = HEAP32[$226>>2]|0;
  $curr = $227;
 }
 $228 = HEAP32[(332)>>2]|0;
 $q = $228;
 while(1) {
  $229 = $q;
  $230 = ($229|0)!=(0|0);
  if (!($230)) {
   break;
  }
  $231 = $q;
  $232 = ((($231)) + 4|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $p2;
  $235 = (_Mangle($233,$234)|0);
  $236 = (($235) + 1)|0;
  $237 = $p2;
  $238 = (($237) + ($236)|0);
  $p2 = $238;
  $239 = $q;
  $240 = HEAP32[$239>>2]|0;
  $q = $240;
 }
 STACKTOP = sp;return;
}
function _set_symtab64($em,$entries,$localshead) {
 $em = $em|0;
 $entries = $entries|0;
 $localshead = $localshead|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buffer = 0, $curr = 0, $len = 0, $localscurr = 0, $p64 = 0, $q = 0, $strsize = 0, $stt = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 40|0;
 $0 = $em;
 $1 = $entries;
 $2 = $localshead;
 $strsize = 1;
 $3 = $1;
 $4 = ($3*24)|0;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $4;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_LclAlloc($11)|0);
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = ((($14)) + 12|0);
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $12;
 $17 = $0;
 $18 = ((($17)) + 16|0);
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 16|0);
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 _memset(($21|0),0,($25|0))|0;
 $26 = $0;
 $27 = ((($26)) + 16|0);
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $p64 = $30;
 $31 = $p64;
 $32 = ((($31)) + 24|0);
 $p64 = $32;
 $33 = $strsize;
 $34 = $p64;
 HEAP32[$34>>2] = $33;
 $35 = $0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_strlen($37)|0);
 $39 = (($38) + 1)|0;
 $40 = $strsize;
 $41 = (($40) + ($39))|0;
 $strsize = $41;
 $42 = $p64;
 $43 = ((($42)) + 8|0);
 $44 = $43;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = 0;
 $48 = $p64;
 $49 = ((($48)) + 16|0);
 $50 = $49;
 $51 = $50;
 HEAP32[$51>>2] = 0;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = $p64;
 $55 = ((($54)) + 4|0);
 HEAP8[$55>>0] = 4;
 $56 = $p64;
 $57 = ((($56)) + 6|0);
 HEAP16[$57>>1] = -15;
 $58 = $p64;
 $59 = ((($58)) + 24|0);
 $p64 = $59;
 $60 = HEAP32[(15420)>>2]|0;
 $curr = $60;
 while(1) {
  $61 = $curr;
  $62 = ($61|0)!=(0|0);
  if (!($62)) {
   break;
  }
  $63 = $p64;
  $64 = ((($63)) + 4|0);
  HEAP8[$64>>0] = 3;
  $65 = $curr;
  $66 = ((($65)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_GetSegIdx($67)|0);
  $69 = $68&65535;
  $70 = $p64;
  $71 = ((($70)) + 6|0);
  HEAP16[$71>>1] = $69;
  $72 = $p64;
  $73 = ((($72)) + 24|0);
  $p64 = $73;
  $74 = $curr;
  $75 = ((($74)) + 64|0);
  $76 = HEAP32[$75>>2]|0;
  $curr = $76;
 }
 $77 = $2;
 $localscurr = $77;
 while(1) {
  $78 = $localscurr;
  $79 = ($78|0)!=(0|0);
  if (!($79)) {
   break;
  }
  $80 = $localscurr;
  $81 = ((($80)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_Mangle($82,$buffer)|0);
  $len = $83;
  $84 = $strsize;
  $85 = $p64;
  HEAP32[$85>>2] = $84;
  $86 = $localscurr;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $curr = $90;
  $91 = $curr;
  $92 = ($91|0)!=(0|0);
  if ($92) {
   $93 = $curr;
   $94 = ((($93)) + 60|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 44|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)!=(1);
   if ($98) {
    $stt = 1;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $stt = 2;
  }
  $99 = $stt;
  $100 = $99&255;
  $101 = $100 & 15;
  $102 = (0 + ($101))|0;
  $103 = $102&255;
  $104 = $p64;
  $105 = ((($104)) + 4|0);
  HEAP8[$105>>0] = $103;
  $106 = $localscurr;
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)<(0);
  $112 = $111 << 31 >> 31;
  $113 = $p64;
  $114 = ((($113)) + 8|0);
  $115 = $114;
  $116 = $115;
  HEAP32[$116>>2] = $110;
  $117 = (($115) + 4)|0;
  $118 = $117;
  HEAP32[$118>>2] = $112;
  $119 = $curr;
  $120 = ($119|0)!=(0|0);
  if ($120) {
   $121 = $curr;
   $122 = (_GetSegIdx($121)|0);
   $123 = $122&65535;
   $124 = $p64;
   $125 = ((($124)) + 6|0);
   HEAP16[$125>>1] = $123;
  } else {
   $126 = $p64;
   $127 = ((($126)) + 6|0);
   HEAP16[$127>>1] = -15;
  }
  $128 = $len;
  $129 = (($128) + 1)|0;
  $130 = $strsize;
  $131 = (($130) + ($129))|0;
  $strsize = $131;
  $132 = $p64;
  $133 = ((($132)) + 24|0);
  $p64 = $133;
  $134 = $localscurr;
  $135 = HEAP32[$134>>2]|0;
  $localscurr = $135;
 }
 $136 = HEAP32[(15412)>>2]|0;
 $curr = $136;
 while(1) {
  $137 = $curr;
  $138 = ($137|0)!=(0|0);
  if (!($138)) {
   break;
  }
  $139 = $curr;
  $140 = ((($139)) + 28|0);
  $141 = ((($140)) + 3|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = ($142&255) >>> 2;
  $144 = $143 & 1;
  $145 = $144&255;
  $146 = ($145|0)==(0);
  if ($146) {
   $147 = $curr;
   $148 = ((($147)) + 28|0);
   $149 = ((($148)) + 3|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = ($150&255) >>> 3;
   $152 = $151 & 1;
   $153 = $152&255;
   $154 = ($153|0)==(1);
   if (!($154)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $155 = $curr;
   $156 = (_Mangle($155,$buffer)|0);
   $len = $156;
   $157 = $strsize;
   $158 = $p64;
   HEAP32[$158>>2] = $157;
   $159 = $curr;
   $160 = ((($159)) + 28|0);
   $161 = ((($160)) + 3|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = ($162&255) >>> 2;
   $164 = $163 & 1;
   $165 = $164&255;
   $166 = ($165|0)==(1);
   if ($166) {
    $167 = $p64;
    $168 = ((($167)) + 4|0);
    HEAP8[$168>>0] = 21;
    $169 = $curr;
    $170 = ((($169)) + 36|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $p64;
    $173 = ((($172)) + 8|0);
    $174 = $173;
    $175 = $174;
    HEAP32[$175>>2] = $171;
    $176 = (($174) + 4)|0;
    $177 = $176;
    HEAP32[$177>>2] = 0;
    $178 = $p64;
    $179 = ((($178)) + 6|0);
    HEAP16[$179>>1] = -14;
   } else {
    $180 = $curr;
    $181 = ((($180)) + 28|0);
    $182 = ((($181)) + 3|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = ($183&255) >>> 2;
    $185 = $184 & 1;
    $186 = $185&255;
    $187 = ($186|0)==(0);
    if ($187) {
     $188 = $curr;
     $189 = ((($188)) + 40|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($190|0)!=(0|0);
     $193 = $191;
    } else {
     $193 = 0;
    }
    $192 = $193 ? 32 : 16;
    $194 = $192&255;
    $195 = $p64;
    $196 = ((($195)) + 4|0);
    HEAP8[$196>>0] = $194;
    $197 = $curr;
    $198 = ((($197)) + 8|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($199|0)<(0);
    $201 = $200 << 31 >> 31;
    $202 = $p64;
    $203 = ((($202)) + 8|0);
    $204 = $203;
    $205 = $204;
    HEAP32[$205>>2] = $199;
    $206 = (($204) + 4)|0;
    $207 = $206;
    HEAP32[$207>>2] = $201;
    $208 = $p64;
    $209 = ((($208)) + 6|0);
    HEAP16[$209>>1] = 0;
   }
   $210 = $len;
   $211 = (($210) + 1)|0;
   $212 = $strsize;
   $213 = (($212) + ($211))|0;
   $strsize = $213;
   $214 = $p64;
   $215 = ((($214)) + 24|0);
   $p64 = $215;
  }
  $216 = $curr;
  $217 = ((($216)) + 64|0);
  $218 = HEAP32[$217>>2]|0;
  $curr = $218;
 }
 $219 = HEAP32[(332)>>2]|0;
 $q = $219;
 while(1) {
  $220 = $q;
  $221 = ($220|0)!=(0|0);
  if (!($221)) {
   break;
  }
  $222 = $q;
  $223 = ((($222)) + 4|0);
  $224 = HEAP32[$223>>2]|0;
  $sym = $224;
  $225 = $sym;
  $226 = (_Mangle($225,$buffer)|0);
  $len = $226;
  $227 = $sym;
  $228 = ((($227)) + 12|0);
  $229 = HEAP32[$228>>2]|0;
  $curr = $229;
  $230 = $curr;
  $231 = ($230|0)!=(0|0);
  if ($231) {
   $232 = $curr;
   $233 = ((($232)) + 60|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ((($234)) + 44|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($236|0)!=(1);
   if ($237) {
    $stt = 1;
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
  if ((label|0) == 30) {
   label = 0;
   $stt = 2;
  }
  $238 = $strsize;
  $239 = $p64;
  HEAP32[$239>>2] = $238;
  $240 = $stt;
  $241 = $240&255;
  $242 = $241 & 15;
  $243 = (16 + ($242))|0;
  $244 = $243&255;
  $245 = $p64;
  $246 = ((($245)) + 4|0);
  HEAP8[$246>>0] = $244;
  $247 = $sym;
  $248 = ((($247)) + 8|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($249|0)<(0);
  $251 = $250 << 31 >> 31;
  $252 = $p64;
  $253 = ((($252)) + 8|0);
  $254 = $253;
  $255 = $254;
  HEAP32[$255>>2] = $249;
  $256 = (($254) + 4)|0;
  $257 = $256;
  HEAP32[$257>>2] = $251;
  $258 = $sym;
  $259 = ((($258)) + 16|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = ($260|0)==(1);
  do {
   if ($261) {
    $262 = $curr;
    $263 = ($262|0)!=(0|0);
    if ($263) {
     $264 = $curr;
     $265 = (_GetSegIdx($264)|0);
     $266 = $265&65535;
     $267 = $p64;
     $268 = ((($267)) + 6|0);
     HEAP16[$268>>1] = $266;
     break;
    } else {
     $269 = $p64;
     $270 = ((($269)) + 6|0);
     HEAP16[$270>>1] = -15;
     break;
    }
   } else {
    $271 = $p64;
    $272 = ((($271)) + 6|0);
    HEAP16[$272>>1] = 0;
   }
  } while(0);
  $273 = $len;
  $274 = (($273) + 1)|0;
  $275 = $strsize;
  $276 = (($275) + ($274))|0;
  $strsize = $276;
  $277 = $p64;
  $278 = ((($277)) + 24|0);
  $p64 = $278;
  $279 = $q;
  $280 = HEAP32[$279>>2]|0;
  $q = $280;
 }
 $281 = $strsize;
 STACKTOP = sp;return ($281|0);
}
function _set_symtab32($em,$entries,$localshead) {
 $em = $em|0;
 $entries = $entries|0;
 $localshead = $localshead|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $curr = 0, $len = 0, $localscurr = 0, $p32 = 0, $q = 0, $strsize = 0, $stt = 0;
 var $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 40|0;
 $0 = $em;
 $1 = $entries;
 $2 = $localshead;
 $strsize = 1;
 $3 = $1;
 $4 = $3<<4;
 $5 = $0;
 $6 = ((($5)) + 16|0);
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $4;
 $8 = $0;
 $9 = ((($8)) + 16|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_LclAlloc($11)|0);
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = ((($14)) + 12|0);
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $12;
 $17 = $0;
 $18 = ((($17)) + 16|0);
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 16|0);
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 _memset(($21|0),0,($25|0))|0;
 $26 = $0;
 $27 = ((($26)) + 16|0);
 $28 = ((($27)) + 12|0);
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $p32 = $30;
 $31 = $p32;
 $32 = ((($31)) + 16|0);
 $p32 = $32;
 $33 = $strsize;
 $34 = $p32;
 HEAP32[$34>>2] = $33;
 $35 = $0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_strlen($37)|0);
 $39 = (($38) + 1)|0;
 $40 = $strsize;
 $41 = (($40) + ($39))|0;
 $strsize = $41;
 $42 = $p32;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = $p32;
 $45 = ((($44)) + 8|0);
 HEAP32[$45>>2] = 0;
 $46 = $p32;
 $47 = ((($46)) + 12|0);
 HEAP8[$47>>0] = 4;
 $48 = $p32;
 $49 = ((($48)) + 14|0);
 HEAP16[$49>>1] = -15;
 $50 = $p32;
 $51 = ((($50)) + 16|0);
 $p32 = $51;
 $52 = HEAP32[(15420)>>2]|0;
 $curr = $52;
 while(1) {
  $53 = $curr;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   break;
  }
  $55 = $p32;
  $56 = ((($55)) + 12|0);
  HEAP8[$56>>0] = 3;
  $57 = $curr;
  $58 = ((($57)) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_GetSegIdx($59)|0);
  $61 = $60&65535;
  $62 = $p32;
  $63 = ((($62)) + 14|0);
  HEAP16[$63>>1] = $61;
  $64 = $p32;
  $65 = ((($64)) + 16|0);
  $p32 = $65;
  $66 = $curr;
  $67 = ((($66)) + 64|0);
  $68 = HEAP32[$67>>2]|0;
  $curr = $68;
 }
 $69 = $2;
 $localscurr = $69;
 while(1) {
  $70 = $localscurr;
  $71 = ($70|0)!=(0|0);
  if (!($71)) {
   break;
  }
  $72 = $localscurr;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_Mangle($74,$buffer)|0);
  $len = $75;
  $76 = $strsize;
  $77 = $p32;
  HEAP32[$77>>2] = $76;
  $78 = $localscurr;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  $curr = $82;
  $83 = $curr;
  $84 = ($83|0)!=(0|0);
  if ($84) {
   $85 = $curr;
   $86 = ((($85)) + 60|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 44|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)!=(1);
   if ($90) {
    $stt = 1;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $stt = 2;
  }
  $91 = $stt;
  $92 = $91&255;
  $93 = $92 & 15;
  $94 = (0 + ($93))|0;
  $95 = $94&255;
  $96 = $p32;
  $97 = ((($96)) + 12|0);
  HEAP8[$97>>0] = $95;
  $98 = $localscurr;
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $p32;
  $104 = ((($103)) + 4|0);
  HEAP32[$104>>2] = $102;
  $105 = $curr;
  $106 = ($105|0)!=(0|0);
  if ($106) {
   $107 = $curr;
   $108 = (_GetSegIdx($107)|0);
   $109 = $108&65535;
   $110 = $p32;
   $111 = ((($110)) + 14|0);
   HEAP16[$111>>1] = $109;
  } else {
   $112 = $p32;
   $113 = ((($112)) + 14|0);
   HEAP16[$113>>1] = -15;
  }
  $114 = $len;
  $115 = (($114) + 1)|0;
  $116 = $strsize;
  $117 = (($116) + ($115))|0;
  $strsize = $117;
  $118 = $p32;
  $119 = ((($118)) + 16|0);
  $p32 = $119;
  $120 = $localscurr;
  $121 = HEAP32[$120>>2]|0;
  $localscurr = $121;
 }
 $122 = HEAP32[(15412)>>2]|0;
 $curr = $122;
 while(1) {
  $123 = $curr;
  $124 = ($123|0)!=(0|0);
  if (!($124)) {
   break;
  }
  $125 = $curr;
  $126 = ((($125)) + 28|0);
  $127 = ((($126)) + 3|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = ($128&255) >>> 2;
  $130 = $129 & 1;
  $131 = $130&255;
  $132 = ($131|0)==(0);
  if ($132) {
   $133 = $curr;
   $134 = ((($133)) + 28|0);
   $135 = ((($134)) + 3|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = ($136&255) >>> 3;
   $138 = $137 & 1;
   $139 = $138&255;
   $140 = ($139|0)==(1);
   if (!($140)) {
    label = 18;
   }
  } else {
   label = 18;
  }
  if ((label|0) == 18) {
   label = 0;
   $141 = $curr;
   $142 = (_Mangle($141,$buffer)|0);
   $len = $142;
   $143 = $strsize;
   $144 = $p32;
   HEAP32[$144>>2] = $143;
   $145 = $curr;
   $146 = ((($145)) + 28|0);
   $147 = ((($146)) + 3|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = ($148&255) >>> 2;
   $150 = $149 & 1;
   $151 = $150&255;
   $152 = ($151|0)==(1);
   if ($152) {
    $153 = $p32;
    $154 = ((($153)) + 12|0);
    HEAP8[$154>>0] = 21;
    $155 = $curr;
    $156 = ((($155)) + 36|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $p32;
    $159 = ((($158)) + 4|0);
    HEAP32[$159>>2] = $157;
    $160 = $p32;
    $161 = ((($160)) + 14|0);
    HEAP16[$161>>1] = -14;
   } else {
    $162 = $curr;
    $163 = ((($162)) + 28|0);
    $164 = ((($163)) + 3|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = ($165&255) >>> 2;
    $167 = $166 & 1;
    $168 = $167&255;
    $169 = ($168|0)==(0);
    if ($169) {
     $170 = $curr;
     $171 = ((($170)) + 40|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($172|0)!=(0|0);
     $175 = $173;
    } else {
     $175 = 0;
    }
    $174 = $175 ? 32 : 16;
    $176 = $174&255;
    $177 = $p32;
    $178 = ((($177)) + 12|0);
    HEAP8[$178>>0] = $176;
    $179 = $curr;
    $180 = ((($179)) + 8|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $p32;
    $183 = ((($182)) + 4|0);
    HEAP32[$183>>2] = $181;
    $184 = $p32;
    $185 = ((($184)) + 14|0);
    HEAP16[$185>>1] = 0;
   }
   $186 = $len;
   $187 = (($186) + 1)|0;
   $188 = $strsize;
   $189 = (($188) + ($187))|0;
   $strsize = $189;
   $190 = $p32;
   $191 = ((($190)) + 16|0);
   $p32 = $191;
  }
  $192 = $curr;
  $193 = ((($192)) + 64|0);
  $194 = HEAP32[$193>>2]|0;
  $curr = $194;
 }
 $195 = HEAP32[(332)>>2]|0;
 $q = $195;
 while(1) {
  $196 = $q;
  $197 = ($196|0)!=(0|0);
  if (!($197)) {
   break;
  }
  $198 = $q;
  $199 = ((($198)) + 4|0);
  $200 = HEAP32[$199>>2]|0;
  $sym = $200;
  $201 = $sym;
  $202 = (_Mangle($201,$buffer)|0);
  $len = $202;
  $203 = $sym;
  $204 = ((($203)) + 12|0);
  $205 = HEAP32[$204>>2]|0;
  $curr = $205;
  $206 = $curr;
  $207 = ($206|0)!=(0|0);
  if ($207) {
   $208 = $curr;
   $209 = ((($208)) + 60|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($210)) + 44|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ($212|0)!=(1);
   if ($213) {
    $stt = 1;
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
  if ((label|0) == 30) {
   label = 0;
   $stt = 2;
  }
  $214 = $strsize;
  $215 = $p32;
  HEAP32[$215>>2] = $214;
  $216 = $stt;
  $217 = $216&255;
  $218 = $217 & 15;
  $219 = (16 + ($218))|0;
  $220 = $219&255;
  $221 = $p32;
  $222 = ((($221)) + 12|0);
  HEAP8[$222>>0] = $220;
  $223 = $sym;
  $224 = ((($223)) + 8|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $p32;
  $227 = ((($226)) + 4|0);
  HEAP32[$227>>2] = $225;
  $228 = $sym;
  $229 = ((($228)) + 16|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ($230|0)==(1);
  do {
   if ($231) {
    $232 = $curr;
    $233 = ($232|0)!=(0|0);
    if ($233) {
     $234 = $curr;
     $235 = (_GetSegIdx($234)|0);
     $236 = $235&65535;
     $237 = $p32;
     $238 = ((($237)) + 14|0);
     HEAP16[$238>>1] = $236;
     break;
    } else {
     $239 = $p32;
     $240 = ((($239)) + 14|0);
     HEAP16[$240>>1] = -15;
     break;
    }
   } else {
    $241 = $p32;
    $242 = ((($241)) + 14|0);
    HEAP16[$242>>1] = 0;
   }
  } while(0);
  $243 = $len;
  $244 = (($243) + 1)|0;
  $245 = $strsize;
  $246 = (($245) + ($244))|0;
  $strsize = $246;
  $247 = $p32;
  $248 = ((($247)) + 16|0);
  $p32 = $248;
  $249 = $q;
  $250 = HEAP32[$249>>2]|0;
  $q = $250;
 }
 $251 = $strsize;
 STACKTOP = sp;return ($251|0);
}
function _ElfConvertSectionName($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $buffer;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(4);
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  if (!($4)) {
   label = 10;
   break;
  }
  $8 = $i;
  $9 = (8708 + (($8*12)|0)|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $i;
  $13 = (8708 + (($12*12)|0)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (_memcmp($7,$11,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = $i;
   $19 = (8708 + (($18*12)|0)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $1;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)==(0);
   $29 = $i;
   $30 = (8708 + (($29*12)|0)|0);
   if ($28) {
    label = 5;
    break;
   }
   $33 = ((($30)) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 & 1;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $i;
    $39 = (8708 + (($38*12)|0)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $1;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($41)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46 << 24 >> 24;
    $48 = ($47|0)==(36);
    if ($48) {
     label = 8;
     break;
    }
   }
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 if ((label|0) == 5) {
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $0 = $32;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 8) {
  $49 = $2;
  $50 = $i;
  $51 = (8708 + (($50*12)|0)|0);
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  (_strcpy($49,$53)|0);
  $54 = $2;
  $55 = $1;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $i;
  $59 = (8708 + (($58*12)|0)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61)|0);
  (_strcat($54,$62)|0);
  $63 = $2;
  $0 = $63;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 10) {
  $0 = $7;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _StartupExitDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $j = 0, $opndx = 0, $or$cond = 0;
 var $p = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr27 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 136|0;
 $vararg_buffer24 = sp + 128|0;
 $vararg_buffer21 = sp + 120|0;
 $vararg_buffer17 = sp + 112|0;
 $vararg_buffer13 = sp + 104|0;
 $vararg_buffer9 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 160|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $rc = 0;
 _LstWriteSrcLine();
 $3 = HEAP32[(512)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_EmitError(96)|0);
  $0 = $5;
  $115 = $0;
  STACKTOP = sp;return ($115|0);
 }
 $6 = HEAP8[(556)>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(0);
 $9 = HEAP32[$1>>2]|0;
 $10 = $2;
 $11 = (($10) + ($9<<4)|0);
 if ($8) {
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_EmitErr(221,$vararg_buffer)|0);
  $0 = $14;
  $115 = $0;
  STACKTOP = sp;return ($115|0);
 }
 $15 = ((($11)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 L9: do {
  switch ($16|0) {
  case 265:  {
   $count = 0;
   $17 = HEAP32[(512)>>2]|0;
   $18 = ($17|0)==(1);
   if ($18) {
    _AddLineQueue(83743);
   }
   HEAP32[$vararg_buffer2>>2] = 83757;
   _AddLineQueueX(83752,$vararg_buffer2);
   $19 = HEAP32[(520)>>2]|0;
   $20 = ($19|0)!=(0);
   $21 = HEAP32[(512)>>2]|0;
   $22 = ($21|0)==(1);
   $or$cond = $20 | $22;
   L14: do {
    if (!($or$cond)) {
     $23 = HEAP32[(508)>>2]|0;
     $24 = ($23|0)==(0);
     do {
      if ($24) {
       $25 = HEAP16[(540)>>1]|0;
       $26 = $25 << 16 >> 16;
       $27 = $26 & 127;
       $28 = ($27|0)<=(1);
       if ($28) {
        $p = 8756;
        $count = 12;
        break;
       } else {
        $p = 8852;
        $count = 7;
        break;
       }
      } else {
       $p = 8908;
       $count = 2;
      }
     } while(0);
     while(1) {
      $29 = $count;
      $30 = ($29|0)!=(0);
      if (!($30)) {
       break L14;
      }
      $31 = $p;
      $32 = HEAP32[$31>>2]|0;
      $33 = $p;
      $34 = ((($33)) + 4|0);
      $35 = HEAP16[$34>>1]|0;
      $36 = $35 << 16 >> 16;
      $37 = $p;
      $38 = ((($37)) + 6|0);
      $39 = HEAP16[$38>>1]|0;
      $40 = $39 << 16 >> 16;
      HEAP32[$vararg_buffer5>>2] = $36;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $40;
      _AddLineQueueX($32,$vararg_buffer5);
      $41 = $count;
      $42 = (($41) + -1)|0;
      $count = $42;
      $43 = $p;
      $44 = ((($43)) + 8|0);
      $p = $44;
     }
    }
   } while(0);
   $45 = HEAP32[(560)>>2]|0;
   $46 = $45 & -32769;
   $47 = $46 | 32768;
   HEAP32[(560)>>2] = $47;
   $48 = HEAP32[$1>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$1>>2] = $49;
   break;
  }
  case 264:  {
   $50 = HEAP32[(520)>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $p = 8924;
    $count = 2;
   } else {
    $p = 8940;
    $count = 4;
   }
   $52 = HEAP32[$1>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$1>>2] = $53;
   $54 = HEAP32[$1>>2]|0;
   $55 = $2;
   $56 = (($55) + ($54<<4)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = HEAP32[(520)>>2]|0;
    $61 = ($60|0)==(1);
    $62 = HEAP32[$1>>2]|0;
    do {
     if ($61) {
      $63 = $2;
      $64 = (($63) + ($62<<4)|0);
      $65 = ((($64)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      HEAP32[$vararg_buffer9>>2] = 9;
      $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
      HEAP32[$vararg_ptr12>>2] = $66;
      _AddLineQueueX(83766,$vararg_buffer9);
      $67 = HEAP32[(616)>>2]|0;
      HEAP32[$1>>2] = $67;
     } else {
      $j = $62;
      $68 = $2;
      $69 = HEAP32[(616)>>2]|0;
      $70 = (_EvalOperand($1,$68,$69,$opndx,0)|0);
      $71 = ($70|0)==(-1);
      if ($71) {
       $0 = -1;
       $115 = $0;
       STACKTOP = sp;return ($115|0);
      }
      $72 = ((($opndx)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(0);
      if ($74) {
       $75 = HEAP32[$opndx>>2]|0;
       $76 = ($75|0)<(256);
       if ($76) {
        $77 = HEAP32[$opndx>>2]|0;
        HEAP32[$vararg_buffer13>>2] = 9;
        $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
        HEAP32[$vararg_ptr16>>2] = $77;
        _AddLineQueueX(83776,$vararg_buffer13);
        break;
       }
      }
      $78 = $j;
      $79 = $2;
      $80 = (($79) + ($78<<4)|0);
      $81 = ((($80)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      HEAP32[$vararg_buffer17>>2] = 1;
      $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $82;
      _AddLineQueueX(83766,$vararg_buffer17);
      HEAP32[$vararg_buffer21>>2] = 5;
      _AddLineQueueX(83794,$vararg_buffer21);
     }
    } while(0);
    $83 = $p;
    $84 = ((($83)) + 8|0);
    $p = $84;
    $85 = $count;
    $86 = (($85) + -1)|0;
    $count = $86;
   }
   while(1) {
    $87 = $count;
    $88 = ($87|0)!=(0);
    if (!($88)) {
     break L9;
    }
    $89 = $p;
    $90 = HEAP32[$89>>2]|0;
    $91 = $p;
    $92 = ((($91)) + 4|0);
    $93 = HEAP16[$92>>1]|0;
    $94 = $93 << 16 >> 16;
    $95 = $p;
    $96 = ((($95)) + 6|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97 << 16 >> 16;
    HEAP32[$vararg_buffer24>>2] = $94;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $98;
    _AddLineQueueX($90,$vararg_buffer24);
    $99 = $count;
    $100 = (($99) + -1)|0;
    $count = $100;
    $101 = $p;
    $102 = ((($101)) + 8|0);
    $p = $102;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $103 = HEAP32[$1>>2]|0;
 $104 = $2;
 $105 = (($104) + ($103<<4)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = HEAP32[$1>>2]|0;
  $110 = $2;
  $111 = (($110) + ($109<<4)|0);
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  HEAP32[$vararg_buffer28>>2] = $113;
  (_EmitErr(209,$vararg_buffer28)|0);
  $rc = -1;
 }
 _RunLineQueue();
 $114 = $rc;
 $0 = $114;
 $115 = $0;
 STACKTOP = sp;return ($115|0);
}
function _EndDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CodeInfo = 0, $opndx = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 192|0;
 $vararg_buffer2 = sp + 184|0;
 $vararg_buffer = sp + 176|0;
 $1 = sp + 200|0;
 $opndx = sp + 104|0;
 $CodeInfo = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 _LstWriteSrcLine();
 $5 = HEAP32[(560)>>2]|0;
 $6 = $5 >>> 15;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[(616)>>2]|0;
  $11 = ($9|0)<($10|0);
  $12 = HEAP32[4884>>2]|0;
  $13 = ($12|0)==(0);
  $or$cond = $11 & $13;
  if ($or$cond) {
   _EmitWarn(2,242,$vararg_buffer);
  }
  $14 = HEAP32[(616)>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$1>>2] = $15;
  $16 = HEAP32[$1>>2]|0;
  $17 = $2;
  $18 = (($17) + ($16<<4)|0);
  HEAP8[$18>>0] = 8;
  $19 = HEAP32[$1>>2]|0;
  $20 = $2;
  $21 = (($20) + ($19<<4)|0);
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = 83757;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 1)|0;
  $25 = $2;
  $26 = (($25) + ($24<<4)|0);
  HEAP8[$26>>0] = 0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 1)|0;
  $29 = $2;
  $30 = (($29) + ($28<<4)|0);
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = 109841;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[(616)>>2] = $33;
 }
 $34 = $2;
 $35 = HEAP32[(616)>>2]|0;
 $36 = (_EvalOperand($1,$34,$35,$opndx,2)|0);
 $37 = ($36|0)==(-1);
 if ($37) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $38 = HEAP32[$1>>2]|0;
 $39 = $2;
 $40 = (($39) + ($38<<4)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = HEAP32[$1>>2]|0;
  $45 = $2;
  $46 = (($45) + ($44<<4)|0);
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $48;
  $49 = (_EmitErr(209,$vararg_buffer2)|0);
  $0 = $49;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $50 = HEAP32[66812>>2]|0;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  while(1) {
   $52 = HEAP32[66812>>2]|0;
   $53 = ((($52)) + 64|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)!=(0|0);
   $56 = HEAP32[66812>>2]|0;
   if (!($55)) {
    break;
   }
   $57 = ((($56)) + 64|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[66812>>2] = $58;
  }
  $59 = ((($56)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $60;
  (_EmitErr(142,$vararg_buffer4)|0);
 }
 _ProcCheckOpen();
 $61 = ((($opndx)) + 40|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(1);
 do {
  if ($63) {
   $64 = ((($opndx)) + 52|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 & 1;
   $67 = $66&255;
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = ((($opndx)) + 44|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(129);
    if (!($71)) {
     $72 = ((($opndx)) + 44|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(130);
     if (!($74)) {
      $75 = ((($opndx)) + 44|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(192);
      if (!($77)) {
       label = 28;
       break;
      }
      $78 = ((($opndx)) + 36|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(167);
      if (!($80)) {
       label = 28;
       break;
      }
     }
    }
    $81 = ((($opndx)) + 56|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)!=(0|0);
    if ($83) {
     $84 = ((($opndx)) + 56|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($85)) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(1);
     if (!($88)) {
      $89 = ((($opndx)) + 56|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ((($90)) + 16|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==(2);
      if (!($93)) {
       label = 28;
       break;
      }
     }
     $94 = HEAP32[(6100)>>2]|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = ((($CodeInfo)) + 24|0);
      $97 = ((($96)) + 16|0);
      HEAP32[$97>>2] = 0;
      $98 = ((($CodeInfo)) + 16|0);
      HEAP32[$98>>2] = 561;
      $99 = HEAP16[(78332)>>1]|0;
      $100 = $99&65535;
      $101 = (68332 + ($100<<3)|0);
      $102 = ((($CodeInfo)) + 12|0);
      HEAP32[$102>>2] = $101;
      $103 = ((($CodeInfo)) + 101|0);
      HEAP8[$103>>0] = 0;
      $104 = ((($CodeInfo)) + 20|0);
      HEAP32[$104>>2] = 192;
      (_idata_fixup($CodeInfo,0,$opndx)|0);
      $105 = ((($CodeInfo)) + 24|0);
      $106 = ((($105)) + 16|0);
      $107 = HEAP32[$106>>2]|0;
      HEAP32[(428)>>2] = $107;
      $108 = HEAP32[$opndx>>2]|0;
      HEAP32[(432)>>2] = $108;
      break;
     }
     $109 = ((($opndx)) + 56|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($110)) + 16|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)!=(2);
     if ($113) {
      $114 = ((($opndx)) + 56|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($115)) + 24|0);
      $117 = HEAP16[$116>>1]|0;
      $118 = ($117&65535) >>> 7;
      $119 = $118 & 1;
      $120 = $119&255;
      $121 = $120&255;
      $122 = ($121|0)==(0);
      if ($122) {
       $123 = ((($opndx)) + 56|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ((($124)) + 24|0);
       $126 = HEAP16[$125>>1]|0;
       $127 = $126 & -129;
       $128 = $127 | 128;
       HEAP16[$125>>1] = $128;
       $129 = ((($opndx)) + 56|0);
       $130 = HEAP32[$129>>2]|0;
       _AddPublicData($130);
      }
     }
     $131 = ((($opndx)) + 56|0);
     $132 = HEAP32[$131>>2]|0;
     HEAP32[(428)>>2] = $132;
    } else {
     label = 28;
    }
   } else {
    label = 28;
   }
  } else {
   label = 28;
  }
 } while(0);
 if ((label|0) == 28) {
  $133 = ((($opndx)) + 40|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ($134|0)!=(-2);
  if ($135) {
   $136 = (_EmitError(188)|0);
   $0 = $136;
   $143 = $0;
   STACKTOP = sp;return ($143|0);
  }
 }
 (_SegmentModuleExit()|0);
 $137 = HEAP32[(476)>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = HEAP32[(476)>>2]|0;
  (FUNCTION_TABLE_ii[$139 & 255](320)|0);
 }
 $140 = HEAP32[(560)>>2]|0;
 $141 = $140 & -65537;
 $142 = $141 | 65536;
 HEAP32[(560)>>2] = $142;
 $0 = 0;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function _EqualSgnDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(8);
 $7 = $2;
 if ($6) {
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $11 = (_CreateAssemblyTimeVariable($7)|0);
 $sym = $11;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $13 = HEAP32[(560)>>2]|0;
 $14 = $13 >>> 11;
 $15 = $14 & 1;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = $sym;
  _LstWrite(2,0,$17);
 }
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _CreateVariable($name,$value) {
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $sym = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $value;
 $3 = $1;
 $4 = (_SymFind($3)|0);
 $sym = $4;
 $5 = $sym;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = (_SymCreate($7)|0);
   $sym = $8;
   $9 = HEAP8[87035>>0]|0;
   $10 = $sym;
   $11 = ((($10)) + 24|0);
   $12 = $9&255;
   $13 = HEAP16[$11>>1]|0;
   $14 = $12 & 1;
   $15 = ($14 << 12)&65535;
   $16 = $13 & -4097;
   $17 = $16 | $15;
   HEAP16[$11>>1] = $17;
  } else {
   $18 = $sym;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   $22 = $sym;
   if ($21) {
    _sym_remove_table(15404,$22);
    $23 = $sym;
    $24 = ((($23)) + 24|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25 & -8193;
    $27 = $26 | 8192;
    HEAP16[$24>>1] = $27;
    $28 = HEAP8[87035>>0]|0;
    $29 = $sym;
    $30 = ((($29)) + 24|0);
    $31 = $28&255;
    $32 = HEAP16[$30>>1]|0;
    $33 = $31 & 1;
    $34 = ($33 << 12)&65535;
    $35 = $32 & -4097;
    $36 = $35 | $34;
    HEAP16[$30>>1] = $36;
    break;
   }
   $37 = ((($22)) + 24|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = ($38&65535) >>> 4;
   $40 = $39 & 1;
   $41 = $40&255;
   $42 = $41&255;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $1;
    HEAP32[$vararg_buffer>>2] = $44;
    (_EmitErr(143,$vararg_buffer)|0);
    $0 = 0;
    $78 = $0;
    STACKTOP = sp;return ($78|0);
   }
   $45 = HEAP8[87035>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $sym;
    $49 = ((($48)) + 24|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = ($50&65535) >>> 12;
    $52 = $51 & 1;
    $53 = $52&255;
    $54 = $53&255;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = $sym;
     _SaveVariableState($56);
    }
   }
  }
 } while(0);
 $57 = $sym;
 $58 = ((($57)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59 & -3;
 $61 = $60 | 2;
 HEAP16[$58>>1] = $61;
 $62 = $sym;
 $63 = ((($62)) + 16|0);
 HEAP32[$63>>2] = 1;
 $64 = $sym;
 $65 = ((($64)) + 24|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 & -65;
 $68 = $67 | 64;
 HEAP16[$65>>1] = $68;
 $69 = $2;
 $70 = $sym;
 $71 = ((($70)) + 8|0);
 HEAP32[$71>>2] = $69;
 $72 = $sym;
 $73 = ((($72)) + 24|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74 & -17;
 $76 = $75 | 16;
 HEAP16[$73>>1] = $76;
 $77 = $sym;
 $0 = $77;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _CreateConstant($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argbuffer = 0, $cmpvalue = 0, $i = 0, $name = 0, $opnd = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $rc = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 88|0;
 $vararg_buffer4 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $i = sp + 100|0;
 $opnd = sp;
 $argbuffer = sp + 120|0;
 $1 = $tokenarray;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $name = $4;
 HEAP32[$i>>2] = 2;
 $cmpvalue = 0;
 $5 = $name;
 $6 = (_SymFind($5)|0);
 $sym = $6;
 $7 = $1;
 $8 = ((($7)) + 32|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(9);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 32|0);
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(60);
  if ($17) {
   $18 = $1;
   $19 = $sym;
   $20 = $name;
   $21 = (_SetTextMacro($18,$19,$20,0)|0);
   $0 = $21;
   $306 = $0;
   STACKTOP = sp;return ($306|0);
  }
 }
 $22 = $sym;
 $23 = ($22|0)==(0|0);
 do {
  if (!($23)) {
   $24 = $sym;
   $25 = ((($24)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = $sym;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(2);
    if ($31) {
     $32 = $sym;
     $33 = ((($32)) + 28|0);
     $34 = ((($33)) + 3|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = ($35&255) >>> 3;
     $37 = $36 & 1;
     $38 = $37&255;
     $39 = ($38|0)==(1);
     if ($39) {
      $40 = $sym;
      $41 = ((($40)) + 24|0);
      $42 = HEAP16[$41>>1]|0;
      $43 = ($42&65535) >>> 11;
      $44 = $43 & 1;
      $45 = $44&255;
      $46 = $45&255;
      $47 = ($46|0)==(0);
      if ($47) {
       break;
      }
     }
    }
    $48 = $sym;
    $49 = ((($48)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(10);
    if ($51) {
     $52 = $1;
     $53 = $sym;
     $54 = $name;
     $55 = $1;
     $56 = ((($55)) + 32|0);
     $57 = ((($56)) + 12|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (_SetTextMacro($52,$53,$54,$58)|0);
     $0 = $59;
     $306 = $0;
     STACKTOP = sp;return ($306|0);
    }
    $60 = $sym;
    $61 = ((($60)) + 24|0);
    $62 = HEAP16[$61>>1]|0;
    $63 = ($62&65535) >>> 4;
    $64 = $63 & 1;
    $65 = $64&255;
    $66 = $65&255;
    $67 = ($66|0)==(0);
    if ($67) {
     $68 = $name;
     HEAP32[$vararg_buffer>>2] = $68;
     (_EmitErr(143,$vararg_buffer)|0);
     $0 = 0;
     $306 = $0;
     STACKTOP = sp;return ($306|0);
    }
    $69 = $sym;
    $70 = ((($69)) + 28|0);
    $71 = ((($70)) + 2|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = HEAP32[4884>>2]|0;
    $75 = $74 & 255;
    $76 = ($73|0)==($75|0);
    if ($76) {
     $cmpvalue = 1;
    }
    $77 = HEAP32[4884>>2]|0;
    $78 = $77&255;
    $79 = $sym;
    $80 = ((($79)) + 28|0);
    $81 = ((($80)) + 2|0);
    HEAP8[$81>>0] = $78;
   }
  }
 } while(0);
 $82 = $1;
 $83 = ((($82)) + 32|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ($85|0)==(10);
 $87 = HEAP32[(616)>>2]|0;
 $88 = ($87|0)==(3);
 $or$cond = $86 & $88;
 $89 = $1;
 $90 = ((($89)) + 32|0);
 do {
  if ($or$cond) {
   $91 = ((($90)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   $p = $92;
   label = 18;
  } else {
   $167 = ((($90)) + 12|0);
   $168 = HEAP32[$167>>2]|0;
   $p = $168;
   $169 = HEAP32[4884>>2]|0;
   $170 = ($169|0)==(0);
   if ($170) {
    $171 = $p;
    (_strcpy($argbuffer,$171)|0);
    $172 = $p;
    $173 = $1;
    $174 = (_ExpandLineItems($172,2,$173,0,1)|0);
    $175 = ($174|0)!=(0);
    if ($175) {
     $p = $argbuffer;
    }
    $176 = $1;
    $177 = ((($176)) + 32|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $180 = ($179|0)==(10);
    $181 = HEAP32[(616)>>2]|0;
    $182 = ($181|0)==(3);
    $or$cond3 = $180 & $182;
    if ($or$cond3) {
     label = 18;
     break;
    }
   }
   $183 = $1;
   $184 = HEAP32[(616)>>2]|0;
   $185 = (_EvalOperand($i,$183,$184,$opnd,3)|0);
   $rc = $185;
   $186 = ((($opnd)) + 16|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0|0);
   if ($188) {
    $189 = ((($opnd)) + 40|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)==(0);
    if ($191) {
     $192 = HEAP32[$i>>2]|0;
     $193 = (($192) + -1)|0;
     HEAP32[$i>>2] = $193;
     label = 19;
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $93 = $1;
  $94 = ((($93)) + 32|0);
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $1;
  $98 = ((($97)) + 32|0);
  $99 = ((($98)) + 1|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100 << 24 >> 24;
  $102 = $1;
  $103 = ((($102)) + 32|0);
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  _myatoi128($96,$opnd,$101,$105);
  label = 19;
 }
 do {
  if ((label|0) == 19) {
   $106 = ((($opnd)) + 36|0);
   HEAP32[$106>>2] = -2;
   $107 = ((($opnd)) + 40|0);
   HEAP32[$107>>2] = 0;
   $108 = ((($opnd)) + 44|0);
   HEAP32[$108>>2] = 192;
   $109 = ((($opnd)) + 52|0);
   HEAP8[$109>>0] = 0;
   $110 = ((($opnd)) + 8|0);
   $111 = $110;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = ($113|0)==(0);
   $118 = ($116|0)==(0);
   $119 = $117 & $118;
   if ($119) {
    $120 = $opnd;
    $121 = $120;
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 4)|0;
    $124 = $123;
    $125 = HEAP32[$124>>2]|0;
    $126 = HEAP8[(556)>>0]|0;
    $127 = $126&255;
    $128 = (296 + ($127<<3)|0);
    $129 = $128;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($129) + 4)|0;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = ($125|0)>($134|0);
    $136 = ($122>>>0)>=($131>>>0);
    $137 = ($125|0)==($134|0);
    $138 = $137 & $136;
    $139 = $135 | $138;
    if ($139) {
     $140 = $opnd;
     $141 = $140;
     $142 = HEAP32[$141>>2]|0;
     $143 = (($140) + 4)|0;
     $144 = $143;
     $145 = HEAP32[$144>>2]|0;
     $146 = HEAP8[(556)>>0]|0;
     $147 = $146&255;
     $148 = (272 + ($147<<3)|0);
     $149 = $148;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($149) + 4)|0;
     $153 = $152;
     $154 = HEAP32[$153>>2]|0;
     $155 = ($145|0)<($154|0);
     $156 = ($142>>>0)<=($151>>>0);
     $157 = ($145|0)==($154|0);
     $158 = $157 & $156;
     $159 = $155 | $158;
     if ($159) {
      $rc = 0;
      $160 = HEAP32[$i>>2]|0;
      $161 = (($160) + 1)|0;
      HEAP32[$i>>2] = $161;
      break;
     }
    }
   }
   $162 = $1;
   $163 = $sym;
   $164 = $name;
   $165 = $p;
   $166 = (_SetTextMacro($162,$163,$164,$165)|0);
   $0 = $166;
   $306 = $0;
   STACKTOP = sp;return ($306|0);
  }
 } while(0);
 $194 = $rc;
 $195 = ($194|0)!=(-1);
 do {
  if ($195) {
   $196 = HEAP32[$i>>2]|0;
   $197 = $1;
   $198 = (($197) + ($196<<4)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = ($200|0)==(0);
   if ($201) {
    $202 = ((($opnd)) + 40|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)==(0);
    if ($204) {
     $205 = ((($opnd)) + 8|0);
     $206 = $205;
     $207 = $206;
     $208 = HEAP32[$207>>2]|0;
     $209 = (($206) + 4)|0;
     $210 = $209;
     $211 = HEAP32[$210>>2]|0;
     $212 = ($208|0)==(0);
     $213 = ($211|0)==(0);
     $214 = $212 & $213;
     if (!($214)) {
      label = 35;
     }
    } else {
     label = 35;
    }
    if ((label|0) == 35) {
     $215 = ((($opnd)) + 40|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(1);
     if (!($217)) {
      break;
     }
     $218 = ((($opnd)) + 52|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219 & 1;
     $221 = $220&255;
     $222 = ($221|0)==(0);
     if (!($222)) {
      break;
     }
     $223 = ((($opnd)) + 56|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ($224|0)!=(0|0);
     if (!($225)) {
      break;
     }
     $226 = ((($opnd)) + 56|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ((($227)) + 16|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ($229|0)==(1);
     if (!($230)) {
      break;
     }
    }
    $231 = ((($opnd)) + 36|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = ($232|0)==(-2);
    if ($233) {
     $234 = $sym;
     $235 = ($234|0)!=(0|0);
     do {
      if ($235) {
       $243 = $sym;
       $244 = ((($243)) + 16|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = ($245|0)==(0);
       $247 = $sym;
       if ($246) {
        _sym_remove_table(15404,$247);
        $248 = $sym;
        $249 = ((($248)) + 24|0);
        $250 = HEAP16[$249>>1]|0;
        $251 = $250 & -8193;
        $252 = $251 | 8192;
        HEAP16[$249>>1] = $252;
        break;
       }
       $253 = ((($247)) + 16|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ($254|0)==(2);
       if ($255) {
        $256 = $sym;
        _sym_ext2int($256);
        break;
       }
       $257 = $cmpvalue;
       $258 = ($257<<24>>24)!=(0);
       if ($258) {
        $259 = ((($opnd)) + 40|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = ($260|0)==(0);
        if ($261) {
         $262 = $sym;
         $263 = ((($262)) + 8|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = HEAP32[$opnd>>2]|0;
         $266 = ($264|0)!=($265|0);
         if (!($266)) {
          $267 = $sym;
          $268 = ((($267)) + 36|0);
          $269 = HEAP32[$268>>2]|0;
          $270 = ((($opnd)) + 4|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = ($269|0)!=($271|0);
          if (!($272)) {
           break;
          }
         }
         $273 = $name;
         HEAP32[$vararg_buffer4>>2] = $273;
         (_EmitErr(143,$vararg_buffer4)|0);
         $0 = 0;
         $306 = $0;
         STACKTOP = sp;return ($306|0);
        }
        $274 = ((($opnd)) + 40|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ($275|0)==(1);
        if ($276) {
         $277 = $sym;
         $278 = ((($277)) + 8|0);
         $279 = HEAP32[$278>>2]|0;
         $280 = ((($opnd)) + 56|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = ((($281)) + 8|0);
         $283 = HEAP32[$282>>2]|0;
         $284 = HEAP32[$opnd>>2]|0;
         $285 = (($283) + ($284))|0;
         $286 = ($279|0)!=($285|0);
         if (!($286)) {
          $287 = $sym;
          $288 = ((($287)) + 12|0);
          $289 = HEAP32[$288>>2]|0;
          $290 = ((($opnd)) + 56|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = ((($291)) + 12|0);
          $293 = HEAP32[$292>>2]|0;
          $294 = ($289|0)!=($293|0);
          if (!($294)) {
           break;
          }
         }
         $295 = $name;
         HEAP32[$vararg_buffer7>>2] = $295;
         (_EmitErr(143,$vararg_buffer7)|0);
         $0 = 0;
         $306 = $0;
         STACKTOP = sp;return ($306|0);
        }
       }
      } else {
       $236 = $name;
       $237 = (_SymCreate($236)|0);
       $sym = $237;
       $238 = HEAP32[4884>>2]|0;
       $239 = $238&255;
       $240 = $sym;
       $241 = ((($240)) + 28|0);
       $242 = ((($241)) + 2|0);
       HEAP8[$242>>0] = $239;
      }
     } while(0);
     $296 = $sym;
     $297 = ((($296)) + 24|0);
     $298 = HEAP16[$297>>1]|0;
     $299 = $298 & -65;
     HEAP16[$297>>1] = $299;
     $300 = $sym;
     _SetValue($300,$opnd);
     $301 = $sym;
     $0 = $301;
     $306 = $0;
     STACKTOP = sp;return ($306|0);
    }
   }
  }
 } while(0);
 $302 = $1;
 $303 = $sym;
 $304 = $name;
 $305 = (_SetTextMacro($302,$303,$304,$argbuffer)|0);
 $0 = $305;
 $306 = $0;
 STACKTOP = sp;return ($306|0);
}
function _EquDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(8);
 $7 = $2;
 if ($6) {
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $11 = (_CreateConstant($7)|0);
 $sym = $11;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $13 = $sym;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(1);
 if (!($16)) {
  (_InternalError(83923,516)|0);
 }
 $17 = HEAP32[(560)>>2]|0;
 $18 = $17 >>> 11;
 $19 = $18 & 1;
 $20 = ($19|0)==(1);
 if ($20) {
  $21 = $sym;
  _LstWrite(2,0,$21);
 }
 $0 = 0;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _CreateAssemblyTimeVariable($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $name = 0, $opnd = 0, $or$cond = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $i = sp + 84|0;
 $opnd = sp;
 $1 = $tokenarray;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $name = $4;
 HEAP32[$i>>2] = 2;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(10);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 48|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = HEAP32[$i>>2]|0;
   $16 = $1;
   $17 = (($16) + ($15<<4)|0);
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$i>>2]|0;
   $21 = $1;
   $22 = (($21) + ($20<<4)|0);
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = HEAP32[$i>>2]|0;
   $27 = $1;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   _myatoi128($19,$opnd,$25,$30);
   label = 4;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 L4: do {
  if ((label|0) == 8) {
   $83 = $1;
   $84 = HEAP32[(616)>>2]|0;
   $85 = (_EvalOperand($i,$83,$84,$opnd,0)|0);
   $86 = ($85|0)==(-1);
   if ($86) {
    $0 = 0;
    $263 = $0;
    STACKTOP = sp;return ($263|0);
   }
   $87 = HEAP32[$i>>2]|0;
   $88 = $1;
   $89 = (($88) + ($87<<4)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = HEAP32[$i>>2]|0;
    $94 = $1;
    $95 = (($94) + ($93<<4)|0);
    $96 = ((($95)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP32[$vararg_buffer>>2] = $97;
    (_EmitErr(209,$vararg_buffer)|0);
    $0 = 0;
    $263 = $0;
    STACKTOP = sp;return ($263|0);
   }
   $98 = ((($opnd)) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)!=(0);
   if ($100) {
    $101 = ((($opnd)) + 40|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)!=(1);
    if (!($103)) {
     $104 = ((($opnd)) + 52|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = $105 & 1;
     $107 = $106&255;
     $108 = ($107|0)==(1);
     if (!($108)) {
      label = 15;
     }
    }
   } else {
    label = 15;
   }
   do {
    if ((label|0) == 15) {
     $109 = ((($opnd)) + 56|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)!=(0|0);
     if ($111) {
      $112 = ((($opnd)) + 56|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($113)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)!=(1);
      if ($116) {
       break;
      }
     }
     $136 = ((($opnd)) + 8|0);
     $137 = $136;
     $138 = $137;
     $139 = HEAP32[$138>>2]|0;
     $140 = (($137) + 4)|0;
     $141 = $140;
     $142 = HEAP32[$141>>2]|0;
     $143 = ($139|0)!=(0);
     $144 = ($142|0)!=(0);
     $145 = $143 | $144;
     if (!($145)) {
      $146 = ((($opnd)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($147|0)!=(0|0);
      if ($148) {
       label = 4;
       break L4;
      } else {
       break L4;
      }
     }
     (_EmitConstError($opnd)|0);
     $0 = 0;
     $263 = $0;
     STACKTOP = sp;return ($263|0);
    }
   } while(0);
   $117 = ((($opnd)) + 56|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)!=(0|0);
   if ($119) {
    $120 = ((($opnd)) + 56|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ((($121)) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)==(0);
    if ($124) {
     $125 = ((($opnd)) + 52|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126 & 1;
     $128 = $127&255;
     $129 = ($128|0)==(0);
     if ($129) {
      $130 = HEAP8[87035>>0]|0;
      $131 = $130&255;
      $132 = ($131|0)==(0);
      $133 = HEAP32[4884>>2]|0;
      $134 = ($133|0)==(0);
      $or$cond = $132 & $134;
      if ($or$cond) {
       $135 = HEAP32[(600)>>2]|0;
       _StoreLine($135,0,0);
      }
     } else {
      label = 22;
     }
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    (_EmitError(65)|0);
   }
   $0 = 0;
   $263 = $0;
   STACKTOP = sp;return ($263|0);
  }
 } while(0);
 do {
  if ((label|0) == 4) {
   $31 = ((($opnd)) + 40|0);
   HEAP32[$31>>2] = 0;
   $32 = ((($opnd)) + 44|0);
   HEAP32[$32>>2] = 192;
   $33 = ((($opnd)) + 8|0);
   $34 = $33;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($36|0)!=(0);
   $41 = ($39|0)!=(0);
   $42 = $40 | $41;
   if (!($42)) {
    $43 = $opnd;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP8[(556)>>0]|0;
    $50 = $49&255;
    $51 = (296 + ($50<<3)|0);
    $52 = $51;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = (($52) + 4)|0;
    $56 = $55;
    $57 = HEAP32[$56>>2]|0;
    $58 = ($48|0)<($57|0);
    $59 = ($45>>>0)<($54>>>0);
    $60 = ($48|0)==($57|0);
    $61 = $60 & $59;
    $62 = $58 | $61;
    if (!($62)) {
     $63 = $opnd;
     $64 = $63;
     $65 = HEAP32[$64>>2]|0;
     $66 = (($63) + 4)|0;
     $67 = $66;
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP8[(556)>>0]|0;
     $70 = $69&255;
     $71 = (272 + ($70<<3)|0);
     $72 = $71;
     $73 = $72;
     $74 = HEAP32[$73>>2]|0;
     $75 = (($72) + 4)|0;
     $76 = $75;
     $77 = HEAP32[$76>>2]|0;
     $78 = ($68|0)>($77|0);
     $79 = ($65>>>0)>($74>>>0);
     $80 = ($68|0)==($77|0);
     $81 = $80 & $79;
     $82 = $78 | $81;
     if (!($82)) {
      break;
     }
    }
   }
   (_EmitConstError($opnd)|0);
   $0 = 0;
   $263 = $0;
   STACKTOP = sp;return ($263|0);
  }
 } while(0);
 $149 = $name;
 $150 = (_SymFind($149)|0);
 $sym = $150;
 $151 = $sym;
 $152 = ($151|0)==(0|0);
 L44: do {
  if ($152) {
   label = 29;
  } else {
   $153 = $sym;
   $154 = ((($153)) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($155|0)==(0);
   if ($156) {
    label = 29;
   } else {
    $176 = $sym;
    $177 = ((($176)) + 16|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(2);
    if ($179) {
     $180 = $sym;
     $181 = ((($180)) + 28|0);
     $182 = ((($181)) + 3|0);
     $183 = HEAP8[$182>>0]|0;
     $184 = ($183&255) >>> 3;
     $185 = $184 & 1;
     $186 = $185&255;
     $187 = ($186|0)==(1);
     if ($187) {
      $188 = $sym;
      $189 = ((($188)) + 20|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ($190|0)==(192);
      if ($191) {
       $192 = $sym;
       _sym_ext2int($192);
       $193 = HEAP8[87035>>0]|0;
       $194 = $sym;
       $195 = ((($194)) + 24|0);
       $196 = $193&255;
       $197 = HEAP16[$195>>1]|0;
       $198 = $196 & 1;
       $199 = ($198 << 12)&65535;
       $200 = $197 & -4097;
       $201 = $200 | $199;
       HEAP16[$195>>1] = $201;
       break;
      }
     }
    }
    $202 = $sym;
    $203 = ((($202)) + 16|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)!=(1);
    do {
     if (!($205)) {
      $206 = $sym;
      $207 = ((($206)) + 24|0);
      $208 = HEAP16[$207>>1]|0;
      $209 = ($208&65535) >>> 6;
      $210 = $209 & 1;
      $211 = $210&255;
      $212 = $211&255;
      $213 = ($212|0)==(0);
      if ($213) {
       $214 = HEAP32[$opnd>>2]|0;
       $215 = $sym;
       $216 = ((($215)) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($214|0)!=($217|0);
       if ($218) {
        break;
       }
       $219 = ((($opnd)) + 4|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = $sym;
       $222 = ((($221)) + 36|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($220|0)!=($223|0);
       if ($224) {
        break;
       }
      }
      $228 = HEAP8[87035>>0]|0;
      $229 = $228&255;
      $230 = ($229|0)!=(0);
      if (!($230)) {
       break L44;
      }
      $231 = $sym;
      $232 = ((($231)) + 24|0);
      $233 = HEAP16[$232>>1]|0;
      $234 = ($233&65535) >>> 12;
      $235 = $234 & 1;
      $236 = $235&255;
      $237 = $236&255;
      $238 = ($237|0)==(0);
      if (!($238)) {
       break L44;
      }
      $239 = $sym;
      _SaveVariableState($239);
      break L44;
     }
    } while(0);
    $225 = $sym;
    $226 = ((($225)) + 4|0);
    $227 = HEAP32[$226>>2]|0;
    HEAP32[$vararg_buffer2>>2] = $227;
    (_EmitErr(143,$vararg_buffer2)|0);
    $0 = 0;
    $263 = $0;
    STACKTOP = sp;return ($263|0);
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $157 = $sym;
  $158 = ($157|0)==(0|0);
  if ($158) {
   $159 = $name;
   $160 = (_SymCreate($159)|0);
   $sym = $160;
  } else {
   $161 = $sym;
   _sym_remove_table(15404,$161);
   $162 = $sym;
   $163 = ((($162)) + 24|0);
   $164 = HEAP16[$163>>1]|0;
   $165 = $164 & -8193;
   $166 = $165 | 8192;
   HEAP16[$163>>1] = $166;
  }
  $167 = HEAP8[87035>>0]|0;
  $168 = $sym;
  $169 = ((($168)) + 24|0);
  $170 = $167&255;
  $171 = HEAP16[$169>>1]|0;
  $172 = $170 & 1;
  $173 = ($172 << 12)&65535;
  $174 = $171 & -4097;
  $175 = $174 | $173;
  HEAP16[$169>>1] = $175;
 }
 $240 = $sym;
 $241 = ((($240)) + 24|0);
 $242 = HEAP16[$241>>1]|0;
 $243 = $242 & -65;
 $244 = $243 | 64;
 HEAP16[$241>>1] = $244;
 $245 = $sym;
 $246 = ((($245)) + 24|0);
 $247 = HEAP16[$246>>1]|0;
 $248 = ($247&65535) >>> 5;
 $249 = $248 & 1;
 $250 = $249&255;
 $251 = $250&255;
 $252 = ($251|0)!=(0);
 if ($252) {
  $253 = $sym;
  $254 = ((($253)) + 40|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = ($255|0)!=(0|0);
  if ($256) {
   $257 = $sym;
   $258 = ((($257)) + 40|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = $sym;
   FUNCTION_TABLE_vii[$259 & 255]($260,$opnd);
  } else {
   label = 48;
  }
 } else {
  label = 48;
 }
 if ((label|0) == 48) {
  $261 = $sym;
  _SetValue($261,$opnd);
 }
 $262 = $sym;
 $0 = $262;
 $263 = $0;
 STACKTOP = sp;return ($263|0);
}
function _SetValue($sym,$opndx) {
 $sym = $sym|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $dir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $opndx;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & -17;
 $6 = $5 | 16;
 HEAP16[$3>>1] = $6;
 $7 = $0;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = 1;
 $9 = $0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & -3;
 $13 = $12 | 2;
 HEAP16[$10>>1] = $13;
 $14 = $1;
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 $18 = $1;
 if ($17) {
  $19 = ((($18)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = ((($21)) + 20|0);
  HEAP32[$22>>2] = $20;
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = $1;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = ((($30)) + 36|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = ((($32)) + 12|0);
  HEAP32[$33>>2] = 0;
  $34 = $0;
  $35 = ((($34)) + 24|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 & -2049;
  HEAP16[$35>>1] = $37;
  STACKTOP = sp;return;
 }
 $38 = ((($18)) + 56|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 24|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = ($41&65535) >>> 11;
 $43 = $42 & 1;
 $44 = $43&255;
 $45 = $0;
 $46 = ((($45)) + 24|0);
 $47 = $44&255;
 $48 = HEAP16[$46>>1]|0;
 $49 = $47 & 1;
 $50 = ($49 << 11)&65535;
 $51 = $48 & -2049;
 $52 = $51 | $50;
 HEAP16[$46>>1] = $52;
 $53 = $0;
 $54 = ((($53)) + 24|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = ($55&65535) >>> 11;
 $57 = $56 & 1;
 $58 = $57&255;
 $59 = ($58<<24>>24)!=(0);
 if ($59) {
  $60 = $0;
  $dir = $60;
  $61 = $1;
  $62 = ((($61)) + 56|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 60|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $dir;
  $67 = ((($66)) + 60|0);
  HEAP32[$67>>2] = $65;
 }
 $68 = $1;
 $69 = ((($68)) + 44|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $0;
 $72 = ((($71)) + 20|0);
 HEAP32[$72>>2] = $70;
 $73 = $1;
 $74 = ((($73)) + 56|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($75)) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(196);
 if ($78) {
  $79 = $1;
  $80 = ((($79)) + 52|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81&255) >>> 1;
  $83 = $82 & 1;
  $84 = $83&255;
  $85 = ($84|0)==(0);
  if ($85) {
   $86 = $1;
   $87 = ((($86)) + 56|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($88)) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $0;
   $92 = ((($91)) + 20|0);
   HEAP32[$92>>2] = $90;
   $93 = $1;
   $94 = ((($93)) + 56|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 52|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $0;
   $99 = ((($98)) + 52|0);
   HEAP32[$99>>2] = $97;
  }
 }
 $100 = $0;
 $101 = ((($100)) + 36|0);
 HEAP32[$101>>2] = 0;
 $102 = $1;
 $103 = ((($102)) + 56|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 12|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $0;
 $108 = ((($107)) + 12|0);
 HEAP32[$108>>2] = $106;
 $109 = $0;
 $110 = ((($109)) + 24|0);
 $111 = HEAP16[$110>>1]|0;
 $112 = ($111&65535) >>> 6;
 $113 = $112 & 1;
 $114 = $113&255;
 $115 = ($114<<24>>24)!=(0);
 if (!($115)) {
  $136 = HEAP32[4884>>2]|0;
  $137 = ($136|0)!=(0);
  if ($137) {
   $138 = $0;
   $139 = ((($138)) + 8|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $1;
   $142 = ((($141)) + 56|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $1;
   $147 = HEAP32[$146>>2]|0;
   $148 = (($145) + ($147))|0;
   $149 = ($140|0)!=($148|0);
   if ($149) {
    HEAP8[(574)>>0] = 1;
   }
  }
  $150 = $1;
  $151 = ((($150)) + 56|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ((($152)) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $1;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + ($156))|0;
  $158 = $0;
  $159 = ((($158)) + 8|0);
  HEAP32[$159>>2] = $157;
  $160 = $0;
  (_BackPatch($160)|0);
  STACKTOP = sp;return;
 }
 $116 = $1;
 $117 = ((($116)) + 56|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $1;
 $122 = HEAP32[$121>>2]|0;
 $123 = (($120) + ($122))|0;
 $124 = $0;
 $125 = ((($124)) + 8|0);
 HEAP32[$125>>2] = $123;
 $126 = HEAP32[4884>>2]|0;
 $127 = ($126|0)==(1);
 if (!($127)) {
  STACKTOP = sp;return;
 }
 $128 = $0;
 $129 = ((($128)) + 24|0);
 $130 = HEAP16[$129>>1]|0;
 $131 = ($130&65535) >>> 13;
 $132 = $131 & 1;
 $133 = $132&255;
 $134 = $133&255;
 $135 = ($134|0)!=(0);
 if (!($135)) {
  STACKTOP = sp;return;
 }
 HEAP8[(574)>>0] = 1;
 STACKTOP = sp;return;
}
function _write_logo() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP8[83932>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP8[83932>>0] = 1;
  $4 = (_MsgGetEx(2)|0);
  $5 = (_MsgGetEx(3)|0);
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  (_printf(83933,$vararg_buffer)|0);
  $0 = 4;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _PrintUsage() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $p2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 (_write_logo()|0);
 $p = 83941;
 while(1) {
  $0 = $p;
  $1 = HEAP8[$0>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = ($2|0)!=(10);
  if (!($3)) {
   break;
  }
  $4 = $p;
  $5 = $p;
  $6 = (_strlen($5)|0);
  $7 = (($4) + ($6)|0);
  $8 = ((($7)) + 1|0);
  $p2 = $8;
  $9 = $p;
  $10 = $p2;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  (_printf(86918,$vararg_buffer)|0);
  $11 = $p2;
  $12 = $p2;
  $13 = (_strlen($12)|0);
  $14 = (($11) + ($13)|0);
  $15 = ((($14)) + 1|0);
  $p = $15;
 }
 STACKTOP = sp;return;
}
function _PrintNote($msgnum,$varargs) {
 $msgnum = $msgnum|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args1 = 0, $args2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args1 = sp + 16|0;
 $args2 = sp;
 $0 = $msgnum;
 HEAP32[$args1>>2] = $varargs;
 HEAP32[$args2>>2] = $varargs;
 $1 = $0;
 _PrtMsg(0,$1,$args1,$args2);
 STACKTOP = sp;return;
}
function _EmitErr($msgnum,$varargs) {
 $msgnum = $msgnum|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args1 = 0, $args2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $args1 = sp + 24|0;
 $args2 = sp + 8|0;
 $0 = $msgnum;
 HEAP32[$args1>>2] = $varargs;
 HEAP32[$args2>>2] = $varargs;
 $1 = $0;
 _PrtMsg(2,$1,$args1,$args2);
 $2 = HEAP32[320>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[320>>2] = $3;
 HEAP8[81594>>0] = 0;
 _print_source_nesting_structure();
 $4 = HEAP32[(6012)>>2]|0;
 $5 = ($4|0)!=(-1);
 if (!($5)) {
  STACKTOP = sp;return -1;
 }
 $6 = HEAP32[320>>2]|0;
 $7 = HEAP32[(6012)>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = ($6|0)==($8|0);
 if (!($9)) {
  STACKTOP = sp;return -1;
 }
 _Fatal(113,$vararg_buffer);
 STACKTOP = sp;return -1;
}
function _Fatal($msgnum,$varargs) {
 $msgnum = $msgnum|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args1 = 0, $args2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args1 = sp + 16|0;
 $args2 = sp;
 $0 = $msgnum;
 HEAP32[$args1>>2] = $varargs;
 HEAP32[$args2>>2] = $varargs;
 $1 = $0;
 _PrtMsg(1,$1,$args1,$args2);
 $2 = HEAP32[320>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[320>>2] = $3;
 $4 = HEAP32[(388)>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  _longjmp((4728|0),2);
  // unreachable;
 } else {
  _exit(1);
  // unreachable;
 }
}
function _EmitError($msgnum) {
 $msgnum = $msgnum|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $msgnum;
 $1 = $0;
 $2 = (_EmitErr($1,$vararg_buffer)|0);
 STACKTOP = sp;return ($2|0);
}
function _EmitWarn($level,$msgnum,$varargs) {
 $level = $level|0;
 $msgnum = $msgnum|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args1 = 0, $args2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args1 = sp + 16|0;
 $args2 = sp;
 $0 = $level;
 $1 = $msgnum;
 $2 = $0;
 $3 = HEAP8[(6017)>>0]|0;
 $4 = $3&255;
 $5 = ($2|0)<=($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 HEAP32[$args1>>2] = $varargs;
 HEAP32[$args2>>2] = $varargs;
 $6 = HEAP8[(6018)>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = $1;
 if ($7) {
  _PrtMsg(2,$8,$args1,$args2);
  $11 = HEAP32[320>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[320>>2] = $12;
 } else {
  _PrtMsg(4,$8,$args1,$args2);
  $9 = HEAP32[(324)>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[(324)>>2] = $10;
 }
 _print_source_nesting_structure();
 STACKTOP = sp;return;
}
function _ErrnoStr() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(2);
 if ($2) {
  $6 = 86960;
  return ($6|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_myltoa($4,86928,10,0,0)|0);
 $6 = $5;
 return ($6|0);
}
function _WriteError() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(392)>>2]|0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _Fatal(108,$vararg_buffer);
 STACKTOP = sp;return;
}
function _InternalError($file,$line) {
 $file = $file|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buffer = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 24|0;
 $0 = $file;
 $1 = $line;
 $2 = HEAP32[320>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[320>>2] = $3;
 (_GetCurrSrcPos($buffer)|0);
 $4 = HEAP32[66864>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buffer;
 (_fprintf($4,89655,$vararg_buffer)|0);
 $5 = HEAP32[66864>>2]|0;
 $6 = (_MsgGetEx(110)|0);
 $7 = $0;
 $8 = $1;
 HEAP32[$vararg_buffer1>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $8;
 (_fprintf($5,$6,$vararg_buffer1)|0);
 _close_files();
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _PrtMsg($severity,$msgnum,$args1,$args2) {
 $severity = $severity|0;
 $msgnum = $msgnum|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $severity;
 $1 = $msgnum;
 $2 = $args1;
 $3 = $args2;
 (_write_logo()|0);
 $4 = HEAP32[(384)>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[(400)>>2]|0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = HEAP32[(400)>>2]|0;
  $9 = (_fopen($8,87580)|0);
  HEAP32[(384)>>2] = $9;
  $10 = HEAP32[(384)>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = HEAP32[(400)>>2]|0;
   $p = $12;
   HEAP32[(400)>>2] = 0;
   HEAP8[(6016)>>0] = 0;
   $13 = $p;
   $14 = (_ErrnoStr()|0);
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr2>>2] = $14;
   (_EmitErr(106,$vararg_buffer)|0);
  }
 }
 $15 = HEAP8[(6016)>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[66864>>2]|0;
  $19 = $0;
  $20 = $1;
  $21 = $2;
  _PutMsg($18,$19,$20,$21);
  $22 = HEAP32[66864>>2]|0;
  (_fflush($22)|0);
 }
 $23 = HEAP32[(384)>>2]|0;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[(384)>>2]|0;
 $26 = $0;
 $27 = $1;
 $28 = $3;
 _PutMsg($25,$26,$27,$28);
 STACKTOP = sp;return;
}
function _PutMsg($fp,$severity,$msgnum,$args) {
 $fp = $fp|0;
 $severity = $severity|0;
 $msgnum = $msgnum|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $j = 0, $or$cond = 0, $or$cond3 = 0, $pMsg = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 48|0;
 $0 = $fp;
 $1 = $severity;
 $2 = $msgnum;
 $3 = $args;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = (_GetCurrSrcPos($buffer)|0);
  $j = $8;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $j;
   $11 = $0;
   (_fwrite($buffer,1,$10,$11)|0);
  }
 }
 $12 = $2;
 $13 = (_MsgGetEx($12)|0);
 $pMsg = $13;
 $14 = $1;
 switch ($14|0) {
 case 1:  {
  $15 = (_MsgGetEx(6)|0);
  $type = $15;
  break;
 }
 case 2:  {
  $16 = (_MsgGetEx(4)|0);
  $type = $16;
  break;
 }
 case 4:  {
  $17 = (_MsgGetEx(5)|0);
  $type = $17;
  break;
 }
 default: {
  $type = 0;
  $i = 0;
 }
 }
 $18 = $type;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $type;
  $21 = $1;
  $22 = ($21*1000)|0;
  $23 = $2;
  $24 = (($22) + ($23))|0;
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $24;
  $25 = (_sprintf($buffer,86967,$vararg_buffer)|0);
  $i = $25;
 }
 $26 = $i;
 $27 = (($buffer) + ($26)|0);
 $28 = $pMsg;
 $29 = $3;
 $30 = (_vsprintf($27,$28,$29)|0);
 $31 = $i;
 $32 = (($31) + ($30))|0;
 $i = $32;
 $33 = $i;
 $34 = $0;
 (_fwrite($buffer,1,$33,$34)|0);
 $35 = $0;
 (_fwrite(88051,1,1,$35)|0);
 $36 = HEAP32[(380)>>2]|0;
 $37 = ($36|0)!=(0|0);
 $38 = $1;
 $39 = ($38|0)!=(0);
 $or$cond = $37 & $39;
 $40 = HEAP32[4884>>2]|0;
 $41 = ($40|0)==(0);
 $or$cond3 = $or$cond & $41;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $42 = $0;
 $43 = HEAP32[(384)>>2]|0;
 $44 = ($42|0)==($43|0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = (_GetCurrOffset()|0);
 _LstWrite(4,$45,0);
 HEAP32[$vararg_buffer5>>2] = $buffer;
 _LstPrintf(86977,$vararg_buffer5);
 _LstNL();
 STACKTOP = sp;return;
}
function _myltoa($value,$buffer,$radix,$sign,$addzero) {
 $value = $value|0;
 $buffer = $buffer|0;
 $radix = $radix|0;
 $sign = $sign|0;
 $addzero = $addzero|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $p = 0, $tmpbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpbuf = sp + 24|0;
 $1 = $value;
 $2 = $buffer;
 $3 = $radix;
 $4 = $sign;
 $5 = $addzero;
 $6 = $2;
 $dst = $6;
 $7 = $4;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = $dst;
  $10 = ((($9)) + 1|0);
  $dst = $10;
  HEAP8[$9>>0] = 45;
  $11 = $1;
  $12 = (0 - ($11))|0;
  $1 = $12;
 } else {
  $13 = $1;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = $dst;
   $16 = ((($15)) + 1|0);
   $dst = $16;
   HEAP8[$15>>0] = 48;
   $17 = $dst;
   HEAP8[$17>>0] = 0;
   $18 = $2;
   $0 = $18;
   $51 = $0;
   STACKTOP = sp;return ($51|0);
  }
 }
 $19 = ((($tmpbuf)) + 33|0);
 $p = $19;
 $20 = $p;
 HEAP8[$20>>0] = 0;
 while(1) {
  $21 = $1;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $1;
  $24 = $3;
  $25 = (($23>>>0) % ($24>>>0))&-1;
  $26 = (113286 + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $p;
  $29 = ((($28)) + -1|0);
  $p = $29;
  HEAP8[$29>>0] = $27;
  $30 = $1;
  $31 = $3;
  $32 = (($30>>>0) / ($31>>>0))&-1;
  $1 = $32;
 }
 $33 = $5;
 $34 = $33&255;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $p;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)>(57);
  if ($39) {
   $40 = $dst;
   $41 = ((($40)) + 1|0);
   $dst = $41;
   HEAP8[$40>>0] = 48;
  }
 }
 $42 = $dst;
 $43 = $p;
 $44 = ((($tmpbuf)) + 33|0);
 $45 = ((($44)) + 1|0);
 $46 = $p;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 _memcpy(($42|0),($43|0),($49|0))|0;
 $50 = $2;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _RunMacro($macro,$idx,$tokenarray,$out,$mflags,$is_exitm) {
 $macro = $macro|0;
 $idx = $idx|0;
 $tokenarray = $tokenarray|0;
 $out = $out|0;
 $mflags = $mflags|0;
 $is_exitm = $is_exitm|0;
 var $$alloca_mul = 0, $$old = 0, $$old9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0;
 var $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0;
 var $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0;
 var $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0;
 var $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0;
 var $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0;
 var $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0;
 var $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bracket_level = 0, $cnt = 0, $cnt2 = 0, $cnt_opnum = 0, $cntgoto = 0, $currparm = 0;
 var $end = 0, $i = 0, $info = 0, $inside_angle_brackets = 0, $inside_literal = 0, $is_exitm2 = 0, $len = 0, $len4 = 0, $lnode = 0, $max = 0, $mi = 0, $old_tokencount = 0, $oldifnesting = 0, $oldstat = 0, $opndx = 0, $or$cond = 0, $or$cond10 = 0, $or$cond5 = 0, $or$cond8 = 0, $p = 0;
 var $p1 = 0, $p3 = 0, $parm_end_delim = 0, $parmidx = 0, $parmstrings = 0, $ptr = 0, $savedStringBuffer = 0, $size = 0, $skipcomma = 0, $sym = 0, $tmp = 0, $tmp2 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0;
 var $vararg_buffer35 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $varargcnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer26 = sp + 112|0;
 $vararg_buffer23 = sp + 104|0;
 $vararg_buffer19 = sp + 96|0;
 $vararg_buffer15 = sp + 88|0;
 $vararg_buffer11 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $i = sp + 296|0;
 $opndx = sp;
 $mi = sp + 232|0;
 $is_exitm2 = sp + 336|0;
 $oldstat = sp + 156|0;
 $1 = $macro;
 $2 = $idx;
 $3 = $tokenarray;
 $4 = $out;
 $5 = $mflags;
 $6 = $is_exitm;
 $7 = HEAP32[(612)>>2]|0;
 $savedStringBuffer = $7;
 $bracket_level = -1;
 $8 = HEAP8[87007>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(40);
 if ($10) {
  (_EmitError(100)|0);
  $0 = -1;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 $11 = ((($mi)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $info = $14;
 $parm_end_delim = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17&255) >>> 1;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)!=(0);
 if ($20) {
  $21 = $2;
  $22 = $3;
  $23 = (($22) + ($21<<4)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(40);
  if ($26) {
   $27 = $2;
   $28 = (($27) + 1)|0;
   $2 = $28;
   $parm_end_delim = 41;
   $bracket_level = 1;
  }
  $29 = $4;
  HEAP8[$29>>0] = 0;
 }
 $30 = $1;
 $31 = ((($30)) + 28|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32&255) >>> 4;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)!=(0);
 if ($35) {
  $36 = $bracket_level;
  $37 = ($36|0)>(0);
  L13: do {
   if ($37) {
    while(1) {
     $38 = $bracket_level;
     $39 = ($38|0)!=(0);
     if (!($39)) {
      break L13;
     }
     $40 = $2;
     $41 = $3;
     $42 = (($41) + ($40<<4)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = ($44|0)!=(0);
     if (!($45)) {
      break L13;
     }
     $46 = $2;
     $47 = $3;
     $48 = (($47) + ($46<<4)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = ($50|0)==(40);
     if ($51) {
      $52 = $bracket_level;
      $53 = (($52) + 1)|0;
      $bracket_level = $53;
     } else {
      $54 = $2;
      $55 = $3;
      $56 = (($55) + ($54<<4)|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57&255;
      $59 = ($58|0)==(41);
      if ($59) {
       $60 = $bracket_level;
       $61 = (($60) + -1)|0;
       $bracket_level = $61;
      }
     }
     $62 = $2;
     $63 = (($62) + 1)|0;
     $2 = $63;
    }
   } else {
    $64 = HEAP32[(616)>>2]|0;
    $2 = $64;
   }
  } while(0);
  $65 = $2;
  $0 = $65;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 $66 = $info;
 $67 = HEAP16[$66>>1]|0;
 $68 = ($67<<16>>16)!=(0);
 if ($68) {
  $69 = $info;
  $70 = HEAP16[$69>>1]|0;
  $71 = $70&65535;
  $72 = $71<<2;
  $73 = (($72) + 1200)|0;
  $$alloca_mul = $73;
  $74 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $75 = ((($mi)) + 12|0);
  HEAP32[$75>>2] = $74;
  $76 = ((($mi)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $info;
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (($77) + ($80<<2)|0);
  $parmstrings = $81;
  $82 = $parmstrings;
  $currparm = $82;
 }
 $parmidx = 0;
 $83 = $1;
 $84 = ((($83)) + 28|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85&255) >>> 2;
 $87 = $86 & 1;
 $88 = ($87<<24>>24)!=(0);
 if ($88) {
  $89 = $5;
  $90 = $89 & 1;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $3;
   $93 = ((($92)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (_strlen($94)|0);
   HEAP32[$i>>2] = $95;
   $96 = $currparm;
   $97 = $parmidx;
   $98 = ((($mi)) + 12|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($97<<2)|0);
   HEAP32[$100>>2] = $96;
   $101 = $currparm;
   $102 = $3;
   $103 = ((($102)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$i>>2]|0;
   $106 = (($105) + 1)|0;
   _memcpy(($101|0),($104|0),($106|0))|0;
   $107 = $currparm;
   $108 = HEAP32[$i>>2]|0;
   $109 = (($108) + 1)|0;
   $110 = (($109) + 4)|0;
   $111 = (($110) - 1)|0;
   $112 = $111 & -4;
   $113 = (($107) + ($112)|0);
   $currparm = $113;
  } else {
   $114 = $parmidx;
   $115 = ((($mi)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($114<<2)|0);
   HEAP32[$117>>2] = 109841;
  }
  $118 = $parmidx;
  $119 = (($118) + 1)|0;
  $parmidx = $119;
 }
 $120 = $6;
 HEAP8[$120>>0] = 0;
 $121 = HEAP32[(616)>>2]|0;
 $122 = $3;
 $123 = (($122) + ($121<<4)|0);
 $124 = ((($123)) + 8|0);
 HEAP32[$124>>2] = 0;
 $varargcnt = 0;
 $skipcomma = 0;
 L37: while(1) {
  $125 = $parmidx;
  $126 = $info;
  $127 = HEAP16[$126>>1]|0;
  $128 = $127&65535;
  $129 = ($125|0)<($128|0);
  if (!($129)) {
   label = 187;
   break;
  }
  $130 = $2;
  $131 = $3;
  $132 = (($131) + ($130<<4)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = ($134|0)==(44);
  $136 = $skipcomma;
  $137 = ($136|0)!=(0);
  $or$cond = $135 & $137;
  if ($or$cond) {
   $138 = $2;
   $139 = (($138) + 1)|0;
   $2 = $139;
  }
  $skipcomma = 1;
  $140 = $2;
  $141 = $3;
  $142 = (($141) + ($140<<4)|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = ($144|0)==(0);
  do {
   if ($145) {
    label = 34;
   } else {
    $146 = $2;
    $147 = $3;
    $148 = (($147) + ($146<<4)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149&255;
    $151 = $parm_end_delim;
    $152 = ($150|0)==($151|0);
    if ($152) {
     label = 34;
    } else {
     $153 = $2;
     $154 = $3;
     $155 = (($154) + ($153<<4)|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = ($157|0)==(44);
     if ($158) {
      $159 = $1;
      $160 = ((($159)) + 28|0);
      $161 = HEAP8[$160>>0]|0;
      $162 = $161 & 1;
      $163 = $162&255;
      $164 = ($163|0)==(0);
      if ($164) {
       label = 34;
       break;
      }
      $165 = $parmidx;
      $166 = $info;
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = (($168) - 1)|0;
      $170 = ($165|0)!=($169|0);
      if ($170) {
       label = 34;
       break;
      }
     }
     $inside_literal = 0;
     $inside_angle_brackets = 0;
     $206 = HEAP32[(616)>>2]|0;
     $old_tokencount = $206;
     $207 = $currparm;
     HEAP8[$207>>0] = 0;
     $208 = $currparm;
     $ptr = $208;
     L50: while(1) {
      $209 = $2;
      $210 = $3;
      $211 = (($210) + ($209<<4)|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      $214 = ($213|0)!=(0);
      if ($214) {
       $215 = $2;
       $216 = $3;
       $217 = (($216) + ($215<<4)|0);
       $218 = HEAP8[$217>>0]|0;
       $219 = $218&255;
       $220 = ($219|0)!=(44);
       $221 = $inside_literal;
       $222 = ($221|0)!=(0);
       $or$cond10 = $220 | $222;
       if (!($or$cond10)) {
        break;
       }
      } else {
       $$old = $inside_literal;
       $$old9 = ($$old|0)!=(0);
       if (!($$old9)) {
        break;
       }
      }
      $223 = $2;
      $224 = $3;
      $225 = (($224) + ($223<<4)|0);
      $226 = HEAP8[$225>>0]|0;
      $227 = $226&255;
      $228 = ($227|0)==(0);
      $229 = $2;
      $230 = $3;
      $231 = (($230) + ($229<<4)|0);
      L56: do {
       if ($228) {
        $232 = ((($231)) + 8|0);
        $233 = HEAP32[$232>>2]|0;
        $2 = $233;
        $234 = $inside_literal;
        $235 = (($234) + -1)|0;
        $inside_literal = $235;
        $236 = $2;
        $237 = $3;
        $238 = (($237) + ($236<<4)|0);
        $239 = ((($238)) + 1|0);
        $240 = HEAP8[$239>>0]|0;
        $241 = $240 << 24 >> 24;
        $242 = ($241|0)==(60);
        if ($242) {
         $inside_angle_brackets = 0;
         break;
        } else {
         $243 = $ptr;
         $244 = ((($243)) + 1|0);
         $ptr = $244;
         HEAP8[$243>>0] = 125;
         break;
        }
       } else {
        $245 = HEAP8[$231>>0]|0;
        $246 = $245&255;
        $247 = ($246|0)==(37);
        $248 = $2;
        if (!($247)) {
         $559 = $3;
         $560 = (($559) + ($248<<4)|0);
         $561 = HEAP8[$560>>0]|0;
         $562 = $561&255;
         $563 = ($562|0)==(9);
         do {
          if ($563) {
           $564 = $2;
           $565 = $3;
           $566 = (($565) + ($564<<4)|0);
           $567 = ((($566)) + 1|0);
           $568 = HEAP8[$567>>0]|0;
           $569 = $568 << 24 >> 24;
           $570 = ($569|0)==(123);
           if (!($570)) {
            break;
           }
           $571 = $2;
           $572 = $3;
           $573 = (($572) + ($571<<4)|0);
           $574 = ((($573)) + 4|0);
           $575 = HEAP32[$574>>2]|0;
           $p = $575;
           $576 = $2;
           $tmp = $576;
           $577 = $ptr;
           $578 = ((($577)) + 1|0);
           $ptr = $578;
           HEAP8[$577>>0] = 123;
           $579 = $inside_literal;
           $580 = (($579) + 1)|0;
           $inside_literal = $580;
           $581 = HEAP32[(616)>>2]|0;
           $2 = $581;
           $582 = $p;
           $583 = $2;
           $584 = (($583) + 1)|0;
           $585 = $3;
           $586 = (_Tokenize($582,$584,$585,3)|0);
           HEAP32[(616)>>2] = $586;
           $587 = $tmp;
           $588 = HEAP32[(616)>>2]|0;
           $589 = $3;
           $590 = (($589) + ($588<<4)|0);
           $591 = ((($590)) + 8|0);
           HEAP32[$591>>2] = $587;
           break L56;
          }
         } while(0);
         $592 = $inside_angle_brackets;
         $593 = ($592|0)==(0);
         do {
          if ($593) {
           $594 = $bracket_level;
           $595 = ($594|0)>(0);
           do {
            if ($595) {
             $596 = $2;
             $597 = $3;
             $598 = (($597) + ($596<<4)|0);
             $599 = HEAP8[$598>>0]|0;
             $600 = $599&255;
             $601 = ($600|0)==(40);
             if ($601) {
              $602 = $bracket_level;
              $603 = (($602) + 1)|0;
              $bracket_level = $603;
              break;
             }
             $604 = $2;
             $605 = $3;
             $606 = (($605) + ($604<<4)|0);
             $607 = HEAP8[$606>>0]|0;
             $608 = $607&255;
             $609 = ($608|0)==(41);
             if (!($609)) {
              break;
             }
             $610 = $bracket_level;
             $611 = (($610) + -1)|0;
             $bracket_level = $611;
             $612 = $bracket_level;
             $613 = ($612|0)==(0);
             if ($613) {
              break L50;
             }
            }
           } while(0);
           $614 = $2;
           $615 = $3;
           $616 = (($615) + ($614<<4)|0);
           $617 = HEAP8[$616>>0]|0;
           $618 = $617&255;
           $619 = ($618|0)==(9);
           do {
            if ($619) {
             $620 = $2;
             $621 = $3;
             $622 = (($621) + ($620<<4)|0);
             $623 = ((($622)) + 1|0);
             $624 = HEAP8[$623>>0]|0;
             $625 = $624 << 24 >> 24;
             $626 = ($625|0)==(60);
             $627 = $inside_angle_brackets;
             $628 = ($627|0)==(0);
             $or$cond5 = $626 & $628;
             if (!($or$cond5)) {
              break;
             }
             $629 = $2;
             $630 = $3;
             $631 = (($630) + ($629<<4)|0);
             $632 = ((($631)) + 4|0);
             $633 = HEAP32[$632>>2]|0;
             $634 = (_strchr($633,37)|0);
             $635 = ($634|0)!=(0|0);
             if (!($635)) {
              $636 = $ptr;
              $637 = $2;
              $638 = $3;
              $639 = (($638) + ($637<<4)|0);
              $640 = ((($639)) + 4|0);
              $641 = HEAP32[$640>>2]|0;
              $642 = $2;
              $643 = $3;
              $644 = (($643) + ($642<<4)|0);
              $645 = ((($644)) + 8|0);
              $646 = HEAP32[$645>>2]|0;
              _memcpy(($636|0),($641|0),($646|0))|0;
              $647 = $2;
              $648 = $3;
              $649 = (($648) + ($647<<4)|0);
              $650 = ((($649)) + 8|0);
              $651 = HEAP32[$650>>2]|0;
              $652 = $ptr;
              $653 = (($652) + ($651)|0);
              $ptr = $653;
              break L56;
             }
             $654 = $2;
             $tmp2 = $654;
             $655 = $2;
             $656 = (($655) + 1)|0;
             $657 = $3;
             $658 = (($657) + ($656<<4)|0);
             $659 = ((($658)) + 12|0);
             $660 = HEAP32[$659>>2]|0;
             $661 = $2;
             $662 = $3;
             $663 = (($662) + ($661<<4)|0);
             $664 = ((($663)) + 12|0);
             $665 = HEAP32[$664>>2]|0;
             $666 = ((($665)) + 1|0);
             $667 = $660;
             $668 = $666;
             $669 = (($667) - ($668))|0;
             $size = $669;
             $670 = HEAP32[(612)>>2]|0;
             $p1 = $670;
             $671 = $p1;
             $672 = $2;
             $673 = $3;
             $674 = (($673) + ($672<<4)|0);
             $675 = ((($674)) + 12|0);
             $676 = HEAP32[$675>>2]|0;
             $677 = ((($676)) + 1|0);
             $678 = $size;
             _memcpy(($671|0),($677|0),($678|0))|0;
             while(1) {
              $679 = $p1;
              $680 = $size;
              $681 = (($679) + ($680)|0);
              $682 = ((($681)) + -1|0);
              $683 = HEAP8[$682>>0]|0;
              $684 = $683 << 24 >> 24;
              $685 = ($684|0)!=(62);
              if (!($685)) {
               break;
              }
              $686 = $size;
              $687 = (($686) + -1)|0;
              $size = $687;
             }
             $688 = $p1;
             $689 = $size;
             $690 = (($688) + ($689)|0);
             $691 = ((($690)) + -1|0);
             HEAP8[$691>>0] = 0;
             $692 = $p1;
             $693 = $size;
             $694 = (($693) + 1)|0;
             $695 = (($694) + 4)|0;
             $696 = (($695) - 1)|0;
             $697 = $696 & -4;
             $698 = (($692) + ($697)|0);
             HEAP32[(612)>>2] = $698;
             $699 = $inside_literal;
             $700 = (($699) + 1)|0;
             $inside_literal = $700;
             $inside_angle_brackets = 1;
             $701 = HEAP32[(616)>>2]|0;
             $2 = $701;
             $702 = $p1;
             $703 = $2;
             $704 = (($703) + 1)|0;
             $705 = $3;
             $706 = (_Tokenize($702,$704,$705,1)|0);
             HEAP32[(616)>>2] = $706;
             $707 = $tmp2;
             $708 = HEAP32[(616)>>2]|0;
             $709 = $3;
             $710 = (($709) + ($708<<4)|0);
             $711 = ((($710)) + 8|0);
             HEAP32[$711>>2] = $707;
             $712 = $ptr;
             $713 = $p1;
             $714 = $2;
             $715 = (($714) + 1)|0;
             $716 = $3;
             $717 = (($716) + ($715<<4)|0);
             $718 = ((($717)) + 12|0);
             $719 = HEAP32[$718>>2]|0;
             $720 = $p1;
             $721 = $719;
             $722 = $720;
             $723 = (($721) - ($722))|0;
             _memcpy(($712|0),($713|0),($723|0))|0;
             $724 = $2;
             $725 = (($724) + 1)|0;
             $726 = $3;
             $727 = (($726) + ($725<<4)|0);
             $728 = ((($727)) + 12|0);
             $729 = HEAP32[$728>>2]|0;
             $730 = $p1;
             $731 = $729;
             $732 = $730;
             $733 = (($731) - ($732))|0;
             $734 = $ptr;
             $735 = (($734) + ($733)|0);
             $ptr = $735;
             break L56;
            }
           } while(0);
           $736 = $2;
           $737 = $3;
           $738 = (($737) + ($736<<4)|0);
           $739 = HEAP8[$738>>0]|0;
           $740 = $739&255;
           $741 = ($740|0)==(8);
           if (!($741)) {
            break;
           }
           $742 = $2;
           $743 = $3;
           $744 = (($743) + ($742<<4)|0);
           $745 = ((($744)) + 4|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = (_SymFind($746)|0);
           $sym = $747;
           $748 = ($747|0)!=(0|0);
           if (!($748)) {
            break;
           }
           $749 = $sym;
           $750 = ((($749)) + 16|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = ($751|0)==(9);
           do {
            if ($752) {
             $753 = $sym;
             $754 = ((($753)) + 24|0);
             $755 = HEAP16[$754>>1]|0;
             $756 = ($755&65535) >>> 1;
             $757 = $756 & 1;
             $758 = $757&255;
             $759 = $758&255;
             $760 = ($759|0)==(1);
             if (!($760)) {
              break;
             }
             $761 = $sym;
             $762 = ((($761)) + 28|0);
             $763 = HEAP8[$762>>0]|0;
             $764 = ($763&255) >>> 1;
             $765 = $764 & 1;
             $766 = $765&255;
             $767 = ($766|0)==(1);
             if (!($767)) {
              break;
             }
             $768 = $2;
             $769 = (($768) + 1)|0;
             $770 = $3;
             $771 = (($770) + ($769<<4)|0);
             $772 = HEAP8[$771>>0]|0;
             $773 = $772&255;
             $774 = ($773|0)==(40);
             if (!($774)) {
              break;
             }
             $775 = $sym;
             $776 = $2;
             $777 = (($776) + 1)|0;
             $778 = $3;
             $779 = $ptr;
             $780 = (_RunMacro($775,$777,$778,$779,0,$is_exitm2)|0);
             $2 = $780;
             $781 = $2;
             $782 = ($781|0)<(0);
             if ($782) {
              label = 136;
              break L37;
             }
             $785 = $ptr;
             $786 = (_strlen($785)|0);
             $787 = $ptr;
             $788 = (($787) + ($786)|0);
             $ptr = $788;
             $789 = $2;
             $790 = $3;
             $791 = (($790) + ($789<<4)|0);
             $792 = HEAP8[$791>>0]|0;
             $793 = $792&255;
             $794 = ($793|0)!=(0);
             do {
              if ($794) {
               $795 = $2;
               $796 = $3;
               $797 = (($796) + ($795<<4)|0);
               $798 = HEAP8[$797>>0]|0;
               $799 = $798&255;
               $800 = ($799|0)!=(44);
               if (!($800)) {
                break;
               }
               $801 = $2;
               $802 = $3;
               $803 = (($802) + ($801<<4)|0);
               $804 = ((($803)) + 12|0);
               $805 = HEAP32[$804>>2]|0;
               $806 = $2;
               $807 = (($806) - 1)|0;
               $808 = $3;
               $809 = (($808) + ($807<<4)|0);
               $810 = ((($809)) + 12|0);
               $811 = HEAP32[$810>>2]|0;
               $812 = ((($811)) + 1|0);
               $813 = $805;
               $814 = $812;
               $815 = (($813) - ($814))|0;
               HEAP32[$i>>2] = $815;
               $816 = $ptr;
               $817 = $2;
               $818 = (($817) - 1)|0;
               $819 = $3;
               $820 = (($819) + ($818<<4)|0);
               $821 = ((($820)) + 12|0);
               $822 = HEAP32[$821>>2]|0;
               $823 = ((($822)) + 1|0);
               $824 = HEAP32[$i>>2]|0;
               _memcpy(($816|0),($823|0),($824|0))|0;
               $825 = HEAP32[$i>>2]|0;
               $826 = $ptr;
               $827 = (($826) + ($825)|0);
               $ptr = $827;
              }
             } while(0);
             $828 = $2;
             $829 = (($828) + -1)|0;
             $2 = $829;
             $830 = $ptr;
             $831 = $parmstrings;
             $832 = ((($831)) + 1200|0);
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              break L56;
             }
             (_InternalError(87008,458)|0);
             break L56;
            }
           } while(0);
           $834 = $sym;
           $835 = ((($834)) + 16|0);
           $836 = HEAP32[$835>>2]|0;
           $837 = ($836|0)==(10);
           if (!($837)) {
            break;
           }
           $838 = $sym;
           $839 = ((($838)) + 24|0);
           $840 = HEAP16[$839>>1]|0;
           $841 = ($840&65535) >>> 1;
           $842 = $841 & 1;
           $843 = $842&255;
           $844 = $843&255;
           $845 = ($844|0)==(1);
           if (!($845)) {
            break;
           }
           $846 = $1;
           $847 = ((($846)) + 24|0);
           $848 = HEAP16[$847>>1]|0;
           $849 = ($848&65535) >>> 5;
           $850 = $849 & 1;
           $851 = $850&255;
           $852 = $851&255;
           $853 = ($852|0)!=(0);
           if (!($853)) {
            break;
           }
           $854 = $info;
           $855 = ((($854)) + 2|0);
           $856 = HEAP16[$855>>1]|0;
           $857 = $856&65535;
           $858 = $parmidx;
           $859 = 1 << $858;
           $860 = $857 & $859;
           $861 = ($860|0)!=(0);
           if (!($861)) {
            break;
           }
           $862 = $ptr;
           $863 = $sym;
           $864 = ((($863)) + 8|0);
           $865 = HEAP32[$864>>2]|0;
           (_strcpy($862,$865)|0);
           $866 = $ptr;
           $867 = $3;
           (_ExpandTMacro($866,$867,0,0)|0);
           $868 = $ptr;
           $869 = (_strlen($868)|0);
           $870 = $ptr;
           $871 = (($870) + ($869)|0);
           $ptr = $871;
           $872 = $2;
           $873 = (($872) + 1)|0;
           $874 = $3;
           $875 = (($874) + ($873<<4)|0);
           $876 = HEAP8[$875>>0]|0;
           $877 = $876&255;
           $878 = ($877|0)!=(0);
           do {
            if ($878) {
             $879 = $2;
             $880 = (($879) + 1)|0;
             $881 = $3;
             $882 = (($881) + ($880<<4)|0);
             $883 = HEAP8[$882>>0]|0;
             $884 = $883&255;
             $885 = ($884|0)!=(44);
             if (!($885)) {
              break;
             }
             $886 = $2;
             $887 = (($886) + 1)|0;
             $888 = $3;
             $889 = (($888) + ($887<<4)|0);
             $890 = ((($889)) + 12|0);
             $891 = HEAP32[$890>>2]|0;
             $892 = $2;
             $893 = $3;
             $894 = (($893) + ($892<<4)|0);
             $895 = ((($894)) + 12|0);
             $896 = HEAP32[$895>>2]|0;
             $897 = $sym;
             $898 = ((($897)) + 44|0);
             $899 = HEAP8[$898>>0]|0;
             $900 = $899&255;
             $901 = (($896) + ($900)|0);
             $902 = $891;
             $903 = $901;
             $904 = (($902) - ($903))|0;
             HEAP32[$i>>2] = $904;
             $905 = $ptr;
             $906 = $2;
             $907 = $3;
             $908 = (($907) + ($906<<4)|0);
             $909 = ((($908)) + 12|0);
             $910 = HEAP32[$909>>2]|0;
             $911 = $sym;
             $912 = ((($911)) + 44|0);
             $913 = HEAP8[$912>>0]|0;
             $914 = $913&255;
             $915 = (($910) + ($914)|0);
             $916 = HEAP32[$i>>2]|0;
             _memcpy(($905|0),($915|0),($916|0))|0;
             $917 = HEAP32[$i>>2]|0;
             $918 = $ptr;
             $919 = (($918) + ($917)|0);
             $ptr = $919;
            }
           } while(0);
           $920 = $ptr;
           $921 = $parmstrings;
           $922 = ((($921)) + 1200|0);
           $923 = ($920>>>0)<($922>>>0);
           if ($923) {
            break L56;
           }
           (_InternalError(87008,472)|0);
           break L56;
          }
         } while(0);
         $924 = $2;
         $925 = (($924) + 1)|0;
         $926 = $3;
         $927 = (($926) + ($925<<4)|0);
         $928 = ((($927)) + 12|0);
         $929 = HEAP32[$928>>2]|0;
         $930 = $2;
         $931 = $3;
         $932 = (($931) + ($930<<4)|0);
         $933 = ((($932)) + 12|0);
         $934 = HEAP32[$933>>2]|0;
         $935 = $929;
         $936 = $934;
         $937 = (($935) - ($936))|0;
         HEAP32[$i>>2] = $937;
         $938 = $inside_literal;
         $939 = ($938|0)!=(0);
         L112: do {
          if (!($939)) {
           $940 = $2;
           $941 = (($940) + 1)|0;
           $942 = $3;
           $943 = (($942) + ($941<<4)|0);
           $944 = HEAP8[$943>>0]|0;
           $945 = $944&255;
           $946 = ($945|0)==(44);
           if (!($946)) {
            $947 = $2;
            $948 = (($947) + 1)|0;
            $949 = $3;
            $950 = (($949) + ($948<<4)|0);
            $951 = HEAP8[$950>>0]|0;
            $952 = $951&255;
            $953 = $parm_end_delim;
            $954 = ($952|0)==($953|0);
            if (!($954)) {
             break;
            }
           }
           while(1) {
            $955 = $2;
            $956 = $3;
            $957 = (($956) + ($955<<4)|0);
            $958 = ((($957)) + 12|0);
            $959 = HEAP32[$958>>2]|0;
            $960 = HEAP32[$i>>2]|0;
            $961 = (($959) + ($960)|0);
            $962 = ((($961)) + -1|0);
            $963 = HEAP8[$962>>0]|0;
            $964 = $963 << 24 >> 24;
            $965 = (_isspace($964)|0);
            $966 = ($965|0)!=(0);
            if (!($966)) {
             break L112;
            }
            $967 = HEAP32[$i>>2]|0;
            $968 = (($967) + -1)|0;
            HEAP32[$i>>2] = $968;
           }
          }
         } while(0);
         $969 = $2;
         $970 = $3;
         $971 = (($970) + ($969<<4)|0);
         $972 = HEAP8[$971>>0]|0;
         $973 = $972&255;
         $974 = ($973|0)==(9);
         do {
          if ($974) {
           $975 = $2;
           $976 = $3;
           $977 = (($976) + ($975<<4)|0);
           $978 = ((($977)) + 1|0);
           $979 = HEAP8[$978>>0]|0;
           $980 = $979 << 24 >> 24;
           $981 = ($980|0)==(0);
           if (!($981)) {
            break;
           }
           $982 = $2;
           $983 = $3;
           $984 = (($983) + ($982<<4)|0);
           $985 = ((($984)) + 12|0);
           $986 = HEAP32[$985>>2]|0;
           $p3 = $986;
           $987 = $p3;
           $988 = HEAP32[$i>>2]|0;
           $989 = (($987) + ($988)|0);
           $end = $989;
           $990 = $ptr;
           $991 = HEAP32[$i>>2]|0;
           $992 = (($990) + ($991)|0);
           $993 = $parmstrings;
           $994 = ((($993)) + 1200|0);
           $995 = ($992>>>0)<($994>>>0);
           if (!($995)) {
            (_InternalError(87008,491)|0);
           }
           while(1) {
            $996 = $p3;
            $997 = $end;
            $998 = ($996>>>0)<($997>>>0);
            if (!($998)) {
             break L56;
            }
            $999 = $p3;
            $1000 = HEAP8[$999>>0]|0;
            $1001 = $1000 << 24 >> 24;
            $1002 = ($1001|0)==(33);
            if ($1002) {
             $1003 = $p3;
             $1004 = ((($1003)) + 1|0);
             $p3 = $1004;
            }
            $1005 = $p3;
            $1006 = HEAP8[$1005>>0]|0;
            $1007 = $ptr;
            $1008 = ((($1007)) + 1|0);
            $ptr = $1008;
            HEAP8[$1007>>0] = $1006;
            $1009 = $p3;
            $1010 = ((($1009)) + 1|0);
            $p3 = $1010;
           }
          }
         } while(0);
         $1011 = $ptr;
         $1012 = HEAP32[$i>>2]|0;
         $1013 = (($1011) + ($1012)|0);
         $1014 = $parmstrings;
         $1015 = ((($1014)) + 1200|0);
         $1016 = ($1013>>>0)<($1015>>>0);
         if (!($1016)) {
          (_InternalError(87008,499)|0);
         }
         $1017 = $ptr;
         $1018 = $2;
         $1019 = $3;
         $1020 = (($1019) + ($1018<<4)|0);
         $1021 = ((($1020)) + 12|0);
         $1022 = HEAP32[$1021>>2]|0;
         $1023 = HEAP32[$i>>2]|0;
         _memcpy(($1017|0),($1022|0),($1023|0))|0;
         $1024 = HEAP32[$i>>2]|0;
         $1025 = $ptr;
         $1026 = (($1025) + ($1024)|0);
         $ptr = $1026;
         break;
        }
        $249 = (($248) + 1)|0;
        $2 = $249;
        while(1) {
         $250 = $2;
         $251 = $3;
         $252 = (($251) + ($250<<4)|0);
         $253 = HEAP8[$252>>0]|0;
         $254 = $253&255;
         $255 = ($254|0)==(37);
         $256 = $2;
         if (!($255)) {
          break;
         }
         $257 = (($256) + 1)|0;
         $2 = $257;
        }
        HEAP32[$i>>2] = $256;
        $cnt_opnum = 1;
        $258 = HEAP32[$i>>2]|0;
        $259 = $3;
        $260 = (($259) + ($258<<4)|0);
        $261 = HEAP8[$260>>0]|0;
        $262 = $261&255;
        $263 = ($262|0)==(8);
        do {
         if ($263) {
          $264 = HEAP32[$i>>2]|0;
          $265 = $3;
          $266 = (($265) + ($264<<4)|0);
          $267 = ((($266)) + 4|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = (_SymFind($268)|0);
          $sym = $269;
          $270 = $sym;
          $271 = ($270|0)!=(0|0);
          if ($271) {
           $272 = $sym;
           $273 = ((($272)) + 24|0);
           $274 = HEAP16[$273>>1]|0;
           $275 = ($274&65535) >>> 1;
           $276 = $275 & 1;
           $277 = $276&255;
           $278 = $277&255;
           $279 = ($278|0)!=(0);
           if (!($279)) {
            break;
           }
           $280 = $sym;
           $281 = ((($280)) + 16|0);
           $282 = HEAP32[$281>>2]|0;
           $283 = ($282|0)==(10);
           if (!($283)) {
            $284 = $sym;
            $285 = ((($284)) + 16|0);
            $286 = HEAP32[$285>>2]|0;
            $287 = ($286|0)==(9);
            if (!($287)) {
             break;
            }
            $288 = $sym;
            $289 = ((($288)) + 28|0);
            $290 = HEAP8[$289>>0]|0;
            $291 = ($290&255) >>> 1;
            $292 = $291 & 1;
            $293 = $292&255;
            $294 = ($293|0)==(1);
            if (!($294)) {
             break;
            }
            $295 = HEAP32[$i>>2]|0;
            $296 = (($295) + 1)|0;
            $297 = $3;
            $298 = (($297) + ($296<<4)|0);
            $299 = HEAP8[$298>>0]|0;
            $300 = $299&255;
            $301 = ($300|0)==(40);
            if (!($301)) {
             break;
            }
           }
           $cnt_opnum = 0;
          }
         }
        } while(0);
        $cnt = 0;
        L150: while(1) {
         $302 = HEAP32[$i>>2]|0;
         $303 = $3;
         $304 = (($303) + ($302<<4)|0);
         $305 = HEAP8[$304>>0]|0;
         $306 = $305&255;
         $307 = ($306|0)!=(0);
         if (!($307)) {
          break;
         }
         $308 = HEAP32[$i>>2]|0;
         $309 = $3;
         $310 = (($309) + ($308<<4)|0);
         $311 = HEAP8[$310>>0]|0;
         $312 = $311&255;
         $313 = ($312|0)!=(44);
         if (!($313)) {
          break;
         }
         $314 = HEAP32[$i>>2]|0;
         $315 = $3;
         $316 = (($315) + ($314<<4)|0);
         $317 = ((($316)) + 4|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = HEAP8[$318>>0]|0;
         $320 = $319 << 24 >> 24;
         $321 = (_isalpha($320)|0);
         $322 = ($321|0)!=(0);
         do {
          if ($322) {
           label = 71;
          } else {
           $323 = HEAP32[$i>>2]|0;
           $324 = $3;
           $325 = (($324) + ($323<<4)|0);
           $326 = ((($325)) + 4|0);
           $327 = HEAP32[$326>>2]|0;
           $328 = HEAP8[$327>>0]|0;
           $329 = $328 << 24 >> 24;
           $330 = ($329|0)==(95);
           if ($330) {
            label = 71;
            break;
           }
           $331 = HEAP32[$i>>2]|0;
           $332 = $3;
           $333 = (($332) + ($331<<4)|0);
           $334 = ((($333)) + 4|0);
           $335 = HEAP32[$334>>2]|0;
           $336 = HEAP8[$335>>0]|0;
           $337 = $336 << 24 >> 24;
           $338 = ($337|0)==(64);
           if ($338) {
            label = 71;
            break;
           }
           $339 = HEAP32[$i>>2]|0;
           $340 = $3;
           $341 = (($340) + ($339<<4)|0);
           $342 = ((($341)) + 4|0);
           $343 = HEAP32[$342>>2]|0;
           $344 = HEAP8[$343>>0]|0;
           $345 = $344 << 24 >> 24;
           $346 = ($345|0)==(36);
           if ($346) {
            label = 71;
            break;
           }
           $347 = HEAP32[$i>>2]|0;
           $348 = $3;
           $349 = (($348) + ($347<<4)|0);
           $350 = ((($349)) + 4|0);
           $351 = HEAP32[$350>>2]|0;
           $352 = HEAP8[$351>>0]|0;
           $353 = $352 << 24 >> 24;
           $354 = ($353|0)==(63);
           if ($354) {
            label = 71;
            break;
           }
           $355 = HEAP32[$i>>2]|0;
           $356 = $3;
           $357 = (($356) + ($355<<4)|0);
           $358 = ((($357)) + 4|0);
           $359 = HEAP32[$358>>2]|0;
           $360 = HEAP8[$359>>0]|0;
           $361 = $360 << 24 >> 24;
           $362 = ($361|0)==(46);
           if ($362) {
            $363 = HEAP32[(560)>>2]|0;
            $364 = $363 >>> 4;
            $365 = $364 & 1;
            $366 = ($365|0)==(1);
            if ($366) {
             label = 71;
             break;
            }
           }
           $403 = $parm_end_delim;
           $404 = ($403|0)==(41);
           do {
            if ($404) {
             $405 = HEAP32[$i>>2]|0;
             $406 = $3;
             $407 = (($406) + ($405<<4)|0);
             $408 = HEAP8[$407>>0]|0;
             $409 = $408&255;
             $410 = ($409|0)==(40);
             if ($410) {
              $411 = $cnt;
              $412 = (($411) + 1)|0;
              $cnt = $412;
              break;
             }
             $413 = HEAP32[$i>>2]|0;
             $414 = $3;
             $415 = (($414) + ($413<<4)|0);
             $416 = HEAP8[$415>>0]|0;
             $417 = $416&255;
             $418 = ($417|0)==(41);
             if (!($418)) {
              break;
             }
             $419 = $cnt;
             $420 = ($419|0)==(0);
             if ($420) {
              break L150;
             }
             $421 = $cnt;
             $422 = (($421) + -1)|0;
             $cnt = $422;
            }
           } while(0);
           $423 = HEAP32[$i>>2]|0;
           $424 = $3;
           $425 = (($424) + ($423<<4)|0);
           $426 = HEAP8[$425>>0]|0;
           $427 = $426&255;
           $428 = ($427|0)==(9);
           if ($428) {
            $429 = HEAP32[$i>>2]|0;
            $430 = $3;
            $431 = (($430) + ($429<<4)|0);
            $432 = ((($431)) + 1|0);
            $433 = HEAP8[$432>>0]|0;
            $434 = $433 << 24 >> 24;
            $435 = ($434|0)==(0);
            if ($435) {
             break L150;
            }
           }
           $436 = HEAP32[$i>>2]|0;
           $437 = $3;
           $438 = (($437) + ($436<<4)|0);
           $439 = HEAP8[$438>>0]|0;
           $440 = $439&255;
           $441 = ($440|0)==(46);
           if ($441) {
            break;
           }
           $442 = HEAP32[$i>>2]|0;
           $443 = $3;
           $444 = (($443) + ($442<<4)|0);
           $445 = HEAP8[$444>>0]|0;
           $446 = $445&255;
           $447 = ($446|0)==(38);
           if ($447) {
            break;
           }
           $448 = HEAP32[$i>>2]|0;
           $449 = $3;
           $450 = (($449) + ($448<<4)|0);
           $451 = HEAP8[$450>>0]|0;
           $452 = $451&255;
           $453 = ($452|0)==(37);
           if ($453) {
            break;
           }
           $454 = $cnt_opnum;
           $455 = (($454) + 1)|0;
           $cnt_opnum = $455;
          }
         } while(0);
         do {
          if ((label|0) == 71) {
           label = 0;
           $367 = HEAP32[$i>>2]|0;
           $368 = (($367) + 1)|0;
           $369 = $3;
           $370 = (($369) + ($368<<4)|0);
           $371 = HEAP8[$370>>0]|0;
           $372 = $371&255;
           $373 = ($372|0)==(40);
           if (!($373)) {
            break;
           }
           $374 = HEAP32[$i>>2]|0;
           $375 = (($374) + 2)|0;
           HEAP32[$i>>2] = $375;
           $cnt2 = 1;
           while(1) {
            $376 = $cnt2;
            $377 = ($376|0)!=(0);
            if ($377) {
             $378 = HEAP32[$i>>2]|0;
             $379 = $3;
             $380 = (($379) + ($378<<4)|0);
             $381 = HEAP8[$380>>0]|0;
             $382 = $381&255;
             $383 = ($382|0)!=(0);
             $1490 = $383;
            } else {
             $1490 = 0;
            }
            $384 = HEAP32[$i>>2]|0;
            if (!($1490)) {
             break;
            }
            $385 = $3;
            $386 = (($385) + ($384<<4)|0);
            $387 = HEAP8[$386>>0]|0;
            $388 = $387&255;
            $389 = ($388|0)==(40);
            do {
             if ($389) {
              $390 = $cnt2;
              $391 = (($390) + 1)|0;
              $cnt2 = $391;
             } else {
              $392 = HEAP32[$i>>2]|0;
              $393 = $3;
              $394 = (($393) + ($392<<4)|0);
              $395 = HEAP8[$394>>0]|0;
              $396 = $395&255;
              $397 = ($396|0)==(41);
              if (!($397)) {
               break;
              }
              $398 = $cnt2;
              $399 = (($398) + -1)|0;
              $cnt2 = $399;
             }
            } while(0);
            $400 = HEAP32[$i>>2]|0;
            $401 = (($400) + 1)|0;
            HEAP32[$i>>2] = $401;
           }
           $402 = (($384) + -1)|0;
           HEAP32[$i>>2] = $402;
          }
         } while(0);
         $456 = HEAP32[$i>>2]|0;
         $457 = (($456) + 1)|0;
         HEAP32[$i>>2] = $457;
        }
        $458 = HEAP32[$i>>2]|0;
        $459 = $2;
        $460 = ($458|0)==($459|0);
        if ($460) {
         $461 = $2;
         $462 = (($461) + -1)|0;
         $2 = $462;
         break;
        }
        $463 = HEAP32[$i>>2]|0;
        $464 = $3;
        $465 = (($464) + ($463<<4)|0);
        $466 = ((($465)) + 12|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = $2;
        $469 = $3;
        $470 = (($469) + ($468<<4)|0);
        $471 = ((($470)) + 12|0);
        $472 = HEAP32[$471>>2]|0;
        $473 = $467;
        $474 = $472;
        $475 = (($473) - ($474))|0;
        $cnt = $475;
        while(1) {
         $476 = $2;
         $477 = $3;
         $478 = (($477) + ($476<<4)|0);
         $479 = ((($478)) + 12|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $cnt;
         $482 = (($480) + ($481)|0);
         $483 = ((($482)) + -1|0);
         $484 = HEAP8[$483>>0]|0;
         $485 = $484 << 24 >> 24;
         $486 = (_isspace($485)|0);
         $487 = ($486|0)!=(0);
         if (!($487)) {
          break;
         }
         $488 = $cnt;
         $489 = (($488) + -1)|0;
         $cnt = $489;
        }
        $490 = $ptr;
        $491 = $2;
        $492 = $3;
        $493 = (($492) + ($491<<4)|0);
        $494 = ((($493)) + 12|0);
        $495 = HEAP32[$494>>2]|0;
        $496 = $cnt;
        _memcpy(($490|0),($495|0),($496|0))|0;
        $497 = $ptr;
        $498 = $cnt;
        $499 = (($497) + ($498)|0);
        HEAP8[$499>>0] = 0;
        $500 = $ptr;
        $501 = $3;
        $502 = (_ExpandText($500,$501,0)|0);
        $503 = ($502|0)==(-1);
        if ($503) {
         label = 101;
         break L37;
        }
        $505 = HEAP32[$i>>2]|0;
        $506 = (($505) - 1)|0;
        $2 = $506;
        $507 = $cnt_opnum;
        $508 = ($507|0)!=(0);
        if ($508) {
         $509 = $ptr;
         $510 = HEAP32[(616)>>2]|0;
         $511 = (($510) + 1)|0;
         $512 = $3;
         $513 = (_Tokenize($509,$511,$512,1)|0);
         $max = $513;
         $514 = HEAP32[(616)>>2]|0;
         $515 = (($514) + 1)|0;
         HEAP32[$i>>2] = $515;
         $516 = $3;
         $517 = $max;
         $518 = (_EvalOperand($i,$516,$517,$opndx,2)|0);
         $519 = ($518|0)==(-1);
         do {
          if ($519) {
           $520 = $opndx;
           $521 = $520;
           HEAP32[$521>>2] = 0;
           $522 = (($520) + 4)|0;
           $523 = $522;
           HEAP32[$523>>2] = 0;
          } else {
           $524 = ((($opndx)) + 40|0);
           $525 = HEAP32[$524>>2]|0;
           $526 = ($525|0)!=(0);
           if (!($526)) {
            break;
           }
           (_EmitError(65)|0);
           $527 = $opndx;
           $528 = $527;
           HEAP32[$528>>2] = 0;
           $529 = (($527) + 4)|0;
           $530 = $529;
           HEAP32[$530>>2] = 0;
          }
         } while(0);
         $531 = HEAP32[$opndx>>2]|0;
         $532 = HEAP32[(612)>>2]|0;
         $533 = HEAP8[(548)>>0]|0;
         $534 = $533&255;
         $535 = ((($opndx)) + 4|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ($536|0)<(0);
         $538 = $537&1;
         $539 = $538&255;
         (_myltoa($531,$532,$534,$539,0)|0);
         $540 = HEAP32[$i>>2]|0;
         $541 = $max;
         $542 = ($540|0)!=($541|0);
         if ($542) {
          $543 = HEAP32[(612)>>2]|0;
          $544 = HEAP32[$i>>2]|0;
          $545 = $3;
          $546 = (($545) + ($544<<4)|0);
          $547 = ((($546)) + 12|0);
          $548 = HEAP32[$547>>2]|0;
          (_strcat($543,$548)|0);
         }
         $549 = $ptr;
         $550 = HEAP32[(612)>>2]|0;
         (_strcpy($549,$550)|0);
        }
        $551 = $ptr;
        $552 = (_strlen($551)|0);
        $553 = $ptr;
        $554 = (($553) + ($552)|0);
        $ptr = $554;
        $555 = $ptr;
        $556 = $parmstrings;
        $557 = ((($556)) + 1200|0);
        $558 = ($555>>>0)<($557>>>0);
        if ($558) {
         break;
        }
        (_InternalError(87008,373)|0);
       }
      } while(0);
      $1027 = $2;
      $1028 = (($1027) + 1)|0;
      $2 = $1028;
     }
     $1029 = $ptr;
     HEAP8[$1029>>0] = 0;
     $1030 = $old_tokencount;
     HEAP32[(616)>>2] = $1030;
     $1031 = $savedStringBuffer;
     HEAP32[(612)>>2] = $1031;
     $1032 = $1;
     $1033 = ((($1032)) + 28|0);
     $1034 = HEAP8[$1033>>0]|0;
     $1035 = $1034 & 1;
     $1036 = $1035&255;
     $1037 = ($1036|0)!=(0);
     if ($1037) {
      $1038 = $parmidx;
      $1039 = $info;
      $1040 = HEAP16[$1039>>1]|0;
      $1041 = $1040&65535;
      $1042 = (($1041) - 1)|0;
      $1043 = ($1038|0)==($1042|0);
      if ($1043) {
       $1044 = $varargcnt;
       $1045 = ($1044|0)==(0);
       if ($1045) {
        $1046 = $currparm;
        $1047 = $parmidx;
        $1048 = ((($mi)) + 12|0);
        $1049 = HEAP32[$1048>>2]|0;
        $1050 = (($1049) + ($1047<<2)|0);
        HEAP32[$1050>>2] = $1046;
       }
       $1051 = $1;
       $1052 = ((($1051)) + 24|0);
       $1053 = HEAP16[$1052>>1]|0;
       $1054 = ($1053&65535) >>> 5;
       $1055 = $1054 & 1;
       $1056 = $1055&255;
       $1057 = $1056&255;
       $1058 = ($1057|0)!=(0);
       if ($1058) {
        $1059 = $currparm;
        $1060 = $ptr;
        $1061 = $currparm;
        $1062 = $1060;
        $1063 = $1061;
        $1064 = (($1062) - ($1063))|0;
        $1065 = (($1064) + 1)|0;
        $1066 = (($1065) + 4)|0;
        $1067 = (($1066) - 1)|0;
        $1068 = $1067 & -4;
        $1069 = (($1059) + ($1068)|0);
        $1071 = $1069;
       } else {
        $1070 = $ptr;
        $1071 = $1070;
       }
       $currparm = $1071;
       $1072 = $2;
       $1073 = $3;
       $1074 = (($1073) + ($1072<<4)|0);
       $1075 = HEAP8[$1074>>0]|0;
       $1076 = $1075&255;
       $1077 = ($1076|0)==(44);
       if ($1077) {
        $1078 = $2;
        $1079 = (($1078) + 1)|0;
        $2 = $1079;
        $1080 = $1;
        $1081 = ((($1080)) + 28|0);
        $1082 = HEAP8[$1081>>0]|0;
        $1083 = ($1082&255) >>> 1;
        $1084 = $1083 & 1;
        $1085 = $1084&255;
        $1086 = ($1085|0)==(0);
        if ($1086) {
         label = 178;
        } else {
         $1087 = $2;
         $1088 = $3;
         $1089 = (($1088) + ($1087<<4)|0);
         $1090 = HEAP8[$1089>>0]|0;
         $1091 = $1090&255;
         $1092 = $parm_end_delim;
         $1093 = ($1091|0)!=($1092|0);
         if ($1093) {
          label = 178;
         }
        }
        if ((label|0) == 178) {
         label = 0;
         $1094 = $parmidx;
         $1095 = (($1094) + -1)|0;
         $parmidx = $1095;
         $1096 = $1;
         $1097 = ((($1096)) + 24|0);
         $1098 = HEAP16[$1097>>1]|0;
         $1099 = ($1098&65535) >>> 5;
         $1100 = $1099 & 1;
         $1101 = $1100&255;
         $1102 = ($1101<<24>>24)!=(0);
         if (!($1102)) {
          $1103 = $currparm;
          $1104 = ((($1103)) + 1|0);
          $currparm = $1104;
          HEAP8[$1103>>0] = 44;
         }
         $1105 = $currparm;
         HEAP8[$1105>>0] = 0;
        }
        $skipcomma = 0;
       }
       $1106 = $varargcnt;
       $1107 = (($1106) + 1)|0;
       $varargcnt = $1107;
       break;
      }
     }
     $1108 = $currparm;
     $1109 = HEAP8[$1108>>0]|0;
     $1110 = ($1109<<24>>24)!=(0);
     if ($1110) {
      $1111 = $currparm;
      $1112 = $parmidx;
      $1113 = ((($mi)) + 12|0);
      $1114 = HEAP32[$1113>>2]|0;
      $1115 = (($1114) + ($1112<<2)|0);
      HEAP32[$1115>>2] = $1111;
      $1116 = $currparm;
      $1117 = $ptr;
      $1118 = $currparm;
      $1119 = $1117;
      $1120 = $1118;
      $1121 = (($1119) - ($1120))|0;
      $1122 = (($1121) + 1)|0;
      $1123 = (($1122) + 4)|0;
      $1124 = (($1123) - 1)|0;
      $1125 = $1124 & -4;
      $1126 = (($1116) + ($1125)|0);
      $currparm = $1126;
      break;
     } else {
      $1127 = $parmidx;
      $1128 = ((($mi)) + 12|0);
      $1129 = HEAP32[$1128>>2]|0;
      $1130 = (($1129) + ($1127<<2)|0);
      HEAP32[$1130>>2] = 109841;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 34) {
   label = 0;
   $171 = $parmidx;
   $172 = $info;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<3)|0);
   $176 = ((($175)) + 4|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177 & 1;
   $179 = ($178<<24>>24)!=(0);
   if ($179) {
    label = 35;
    break;
   }
   $194 = $varargcnt;
   $195 = ($194|0)==(0);
   if ($195) {
    $196 = $parmidx;
    $197 = $info;
    $198 = ((($197)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (($199) + ($196<<3)|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $parmidx;
    $203 = ((($mi)) + 12|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = (($204) + ($202<<2)|0);
    HEAP32[$205>>2] = $201;
   }
  }
  $1131 = $parmidx;
  $1132 = (($1131) + 1)|0;
  $parmidx = $1132;
 }
 if ((label|0) == 35) {
  $180 = $1;
  $181 = ((($180)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = HEAP8[$182>>0]|0;
  $184 = $183 << 24 >> 24;
  $185 = ($184|0)==(0);
  $186 = $1;
  if ($185) {
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) + 1)|0;
   HEAP32[$vararg_buffer>>2] = $189;
   (_EmitErr(87,$vararg_buffer)|0);
  } else {
   $190 = ((($186)) + 4|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $parmidx;
   $193 = (($192) + 1)|0;
   HEAP32[$vararg_buffer11>>2] = $191;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $193;
   (_EmitErr(220,$vararg_buffer11)|0);
  }
  $0 = -1;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 else if ((label|0) == 101) {
  $504 = $savedStringBuffer;
  HEAP32[(612)>>2] = $504;
  $0 = -1;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 else if ((label|0) == 136) {
  $783 = $savedStringBuffer;
  HEAP32[(612)>>2] = $783;
  $784 = $2;
  $0 = $784;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 else if ((label|0) == 187) {
  $1133 = $bracket_level;
  $1134 = ($1133|0)>=(0);
  $1135 = $2;
  $1136 = $3;
  $1137 = (($1136) + ($1135<<4)|0);
  $1138 = HEAP8[$1137>>0]|0;
  $1139 = $1138&255;
  if ($1134) {
   $1140 = ($1139|0)!=(41);
   do {
    if ($1140) {
     $1141 = $2;
     HEAP32[$i>>2] = $1141;
     while(1) {
      $1142 = $2;
      $1143 = HEAP32[(616)>>2]|0;
      $1144 = ($1142|0)<($1143|0);
      if (!($1144)) {
       break;
      }
      $1145 = $2;
      $1146 = $3;
      $1147 = (($1146) + ($1145<<4)|0);
      $1148 = HEAP8[$1147>>0]|0;
      $1149 = $1148&255;
      $1150 = ($1149|0)!=(41);
      if (!($1150)) {
       break;
      }
      $1151 = $2;
      $1152 = (($1151) + 1)|0;
      $2 = $1152;
     }
     $1153 = $2;
     $1154 = HEAP32[(616)>>2]|0;
     $1155 = ($1153|0)==($1154|0);
     if (!($1155)) {
      $1156 = $1;
      $1157 = ((($1156)) + 4|0);
      $1158 = HEAP32[$1157>>2]|0;
      $1159 = HEAP32[$i>>2]|0;
      $1160 = $3;
      $1161 = (($1160) + ($1159<<4)|0);
      $1162 = ((($1161)) + 12|0);
      $1163 = HEAP32[$1162>>2]|0;
      HEAP32[$vararg_buffer15>>2] = $1158;
      $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
      HEAP32[$vararg_ptr18>>2] = $1163;
      _EmitWarn(1,149,$vararg_buffer15);
      break;
     }
     (_EmitError(244)|0);
     $0 = -1;
     $1489 = $0;
     STACKTOP = sp;return ($1489|0);
    }
   } while(0);
   $1164 = $2;
   $1165 = (($1164) + 1)|0;
   $2 = $1165;
  } else {
   $1166 = ($1139|0)!=(0);
   if ($1166) {
    $1167 = $5;
    $1168 = $1167 & 4;
    $1169 = ($1168|0)!=(0);
    if (!($1169)) {
     $1170 = $1;
     $1171 = ((($1170)) + 4|0);
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = $2;
     $1174 = $3;
     $1175 = (($1174) + ($1173<<4)|0);
     $1176 = ((($1175)) + 12|0);
     $1177 = HEAP32[$1176>>2]|0;
     HEAP32[$vararg_buffer19>>2] = $1172;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $1177;
     _EmitWarn(1,149,$vararg_buffer19);
    }
   }
  }
  $1178 = $1;
  $1179 = ((($1178)) + 24|0);
  $1180 = HEAP16[$1179>>1]|0;
  $1181 = ($1180&65535) >>> 5;
  $1182 = $1181 & 1;
  $1183 = $1182&255;
  $1184 = $1183&255;
  $1185 = ($1184|0)==(1);
  if ($1185) {
   $1186 = $1;
   $1187 = ((($1186)) + 8|0);
   $1188 = HEAP32[$1187>>2]|0;
   $1189 = ($1188|0)!=(0|0);
   if ($1189) {
    $1190 = $varargcnt;
    $1191 = ((($mi)) + 20|0);
    HEAP32[$1191>>2] = $1190;
    $1192 = $1;
    $1193 = ((($1192)) + 8|0);
    $1194 = HEAP32[$1193>>2]|0;
    $1195 = $4;
    $1196 = $3;
    (FUNCTION_TABLE_iiii[$1194 & 255]($mi,$1195,$1196)|0);
    $1197 = $6;
    HEAP8[$1197>>0] = 1;
    $1198 = $2;
    $0 = $1198;
    $1489 = $0;
    STACKTOP = sp;return ($1489|0);
   }
  }
  $1199 = HEAP32[8972>>2]|0;
  $1200 = ((($mi)) + 8|0);
  HEAP32[$1200>>2] = $1199;
  $1201 = $info;
  $1202 = ((($1201)) + 2|0);
  $1203 = HEAP16[$1202>>1]|0;
  $1204 = $1203&65535;
  $1205 = HEAP32[8972>>2]|0;
  $1206 = (($1205) + ($1204))|0;
  HEAP32[8972>>2] = $1206;
  $1207 = $info;
  $1208 = ((($1207)) + 8|0);
  $1209 = HEAP32[$1208>>2]|0;
  $1210 = ((($mi)) + 4|0);
  HEAP32[$1210>>2] = $1209;
  HEAP32[$mi>>2] = 0;
  $1211 = $info;
  $1212 = HEAP16[$1211>>1]|0;
  $1213 = $1212&65535;
  $1214 = ((($mi)) + 20|0);
  HEAP32[$1214>>2] = $1213;
  $1215 = ((($mi)) + 4|0);
  $1216 = HEAP32[$1215>>2]|0;
  $1217 = ($1216|0)!=(0|0);
  if ($1217) {
   $1218 = $1;
   $1219 = ((($1218)) + 28|0);
   $1220 = HEAP8[$1219>>0]|0;
   $1221 = ($1220&255) >>> 1;
   $1222 = $1221 & 1;
   $1223 = $1222&255;
   $1224 = ($1223|0)==(0);
   if ($1224) {
    $1225 = $1;
    $1226 = ((($1225)) + 4|0);
    $1227 = HEAP32[$1226>>2]|0;
    $1228 = HEAP8[$1227>>0]|0;
    $1229 = $1228 << 24 >> 24;
    $1230 = ($1229|0)!=(0);
    if ($1230) {
     _LstWriteSrcLine();
    }
   }
   $1231 = $5;
   $1232 = $1231 & 2;
   $1233 = ($1232|0)!=(0);
   if (!($1233)) {
    $1234 = (_PushInputStatus($oldstat)|0);
    $3 = $1234;
   }
   $1235 = $1;
   $1236 = ((($mi)) + 16|0);
   HEAP32[$1236>>2] = $1235;
   _PushMacro($mi);
   $1237 = HEAP8[87007>>0]|0;
   $1238 = (($1237) + 1)<<24>>24;
   HEAP8[87007>>0] = $1238;
   $1239 = (_GetIfNestLevel()|0);
   $oldifnesting = $1239;
   $cntgoto = 0;
   while(1) {
    $1240 = HEAP32[(600)>>2]|0;
    $1241 = (_GetTextLine($1240)|0);
    $1242 = ($1241|0)!=(0|0);
    if (!($1242)) {
     break;
    }
    $1243 = HEAP32[(600)>>2]|0;
    $1244 = $3;
    $1245 = (_PreprocessLine($1243,$1244)|0);
    $1246 = ($1245|0)==(0);
    if ($1246) {
     continue;
    }
    $1247 = $3;
    $1248 = HEAP8[$1247>>0]|0;
    $1249 = $1248&255;
    $1250 = ($1249|0)==(58);
    $1251 = $3;
    if ($1250) {
     $1252 = ((($1251)) + 16|0);
     $1253 = HEAP8[$1252>>0]|0;
     $1254 = $1253&255;
     $1255 = ($1254|0)!=(8);
     $1256 = $3;
     if ($1255) {
      $1257 = ((($1256)) + 12|0);
      $1258 = HEAP32[$1257>>2]|0;
      HEAP32[$vararg_buffer23>>2] = $1258;
      (_EmitErr(209,$vararg_buffer23)|0);
      continue;
     }
     $1259 = ((($1256)) + 32|0);
     $1260 = HEAP8[$1259>>0]|0;
     $1261 = $1260&255;
     $1262 = ($1261|0)!=(0);
     if (!($1262)) {
      continue;
     }
     $1263 = $3;
     $1264 = ((($1263)) + 32|0);
     $1265 = ((($1264)) + 12|0);
     $1266 = HEAP32[$1265>>2]|0;
     HEAP32[$vararg_buffer26>>2] = $1266;
     (_EmitErr(209,$vararg_buffer26)|0);
     continue;
    }
    $1267 = HEAP8[$1251>>0]|0;
    $1268 = $1267&255;
    $1269 = ($1268|0)==(3);
    if ($1269) {
     $1270 = $3;
     $1271 = ((($1270)) + 8|0);
     $1272 = HEAP32[$1271>>2]|0;
     $1273 = ($1272|0)==(317);
     if ($1273) {
      label = 219;
      break;
     }
     $1372 = $3;
     $1373 = ((($1372)) + 8|0);
     $1374 = HEAP32[$1373>>2]|0;
     $1375 = ($1374|0)==(319);
     if ($1375) {
      $1376 = $3;
      $1377 = ((($1376)) + 16|0);
      $1378 = HEAP8[$1377>>0]|0;
      $1379 = $1378&255;
      $1380 = ($1379|0)!=(0);
      $1381 = $3;
      if (!($1380)) {
       label = 259;
       break;
      }
      $1382 = ((($1381)) + 16|0);
      $1383 = ((($1382)) + 4|0);
      $1384 = HEAP32[$1383>>2]|0;
      $1385 = (_strlen($1384)|0);
      $len4 = $1385;
      HEAP32[$i>>2] = 1;
      $1386 = ((($mi)) + 4|0);
      $1387 = HEAP32[$1386>>2]|0;
      $lnode = $1387;
      L296: while(1) {
       $1388 = $lnode;
       $1389 = ($1388|0)!=(0|0);
       if (!($1389)) {
        break;
       }
       $1390 = $lnode;
       $1391 = ((($1390)) + 5|0);
       $ptr = $1391;
       $1392 = $ptr;
       $1393 = HEAP8[$1392>>0]|0;
       $1394 = $1393 << 24 >> 24;
       $1395 = ($1394|0)==(58);
       do {
        if ($1395) {
         $1396 = $lnode;
         $1397 = ((($1396)) + 4|0);
         $1398 = HEAP8[$1397>>0]|0;
         $1399 = ($1398<<24>>24)!=(0);
         if ($1399) {
          $1400 = HEAP32[(612)>>2]|0;
          $1401 = $lnode;
          $1402 = ((($1401)) + 5|0);
          $1403 = ((($mi)) + 20|0);
          $1404 = HEAP32[$1403>>2]|0;
          $1405 = ((($mi)) + 8|0);
          $1406 = HEAP32[$1405>>2]|0;
          $1407 = ((($mi)) + 12|0);
          $1408 = HEAP32[$1407>>2]|0;
          _fill_placeholders($1400,$1402,$1404,$1406,$1408);
          $1409 = HEAP32[(612)>>2]|0;
          $ptr = $1409;
         }
         $1410 = $ptr;
         $1411 = ((($1410)) + 1|0);
         $ptr = $1411;
         while(1) {
          $1412 = $ptr;
          $1413 = HEAP8[$1412>>0]|0;
          $1414 = $1413 << 24 >> 24;
          $1415 = (_isspace($1414)|0);
          $1416 = ($1415|0)!=(0);
          $1417 = $ptr;
          if (!($1416)) {
           break;
          }
          $1418 = ((($1417)) + 1|0);
          $ptr = $1418;
         }
         $1419 = $3;
         $1420 = ((($1419)) + 16|0);
         $1421 = ((($1420)) + 4|0);
         $1422 = HEAP32[$1421>>2]|0;
         $1423 = $len4;
         $1424 = (_strncasecmp($1417,$1422,$1423)|0);
         $1425 = ($1424|0)==(0);
         if (!($1425)) {
          break;
         }
         $1426 = $ptr;
         $1427 = $len4;
         $1428 = (($1426) + ($1427)|0);
         $1429 = HEAP8[$1428>>0]|0;
         $1430 = $1429 << 24 >> 24;
         $1431 = (_isalnum($1430)|0);
         $1432 = ($1431|0)!=(0);
         do {
          if ($1432) {
           $1458 = 1;
          } else {
           $1433 = $ptr;
           $1434 = $len4;
           $1435 = (($1433) + ($1434)|0);
           $1436 = HEAP8[$1435>>0]|0;
           $1437 = $1436 << 24 >> 24;
           $1438 = ($1437|0)==(95);
           if ($1438) {
            $1458 = 1;
            break;
           }
           $1439 = $ptr;
           $1440 = $len4;
           $1441 = (($1439) + ($1440)|0);
           $1442 = HEAP8[$1441>>0]|0;
           $1443 = $1442 << 24 >> 24;
           $1444 = ($1443|0)==(64);
           if ($1444) {
            $1458 = 1;
            break;
           }
           $1445 = $ptr;
           $1446 = $len4;
           $1447 = (($1445) + ($1446)|0);
           $1448 = HEAP8[$1447>>0]|0;
           $1449 = $1448 << 24 >> 24;
           $1450 = ($1449|0)==(36);
           if ($1450) {
            $1458 = 1;
            break;
           }
           $1451 = $ptr;
           $1452 = $len4;
           $1453 = (($1451) + ($1452)|0);
           $1454 = HEAP8[$1453>>0]|0;
           $1455 = $1454 << 24 >> 24;
           $1456 = ($1455|0)==(63);
           $1458 = $1456;
          }
         } while(0);
         $1457 = $1458&1;
         $1459 = ($1457|0)==(0);
         if ($1459) {
          break L296;
         }
        }
       } while(0);
       $1460 = $lnode;
       $1461 = HEAP32[$1460>>2]|0;
       $lnode = $1461;
       $1462 = HEAP32[$i>>2]|0;
       $1463 = (($1462) + 1)|0;
       HEAP32[$i>>2] = $1463;
      }
      $1464 = $lnode;
      $1465 = ($1464|0)!=(0|0);
      if (!($1465)) {
       label = 257;
       break;
      }
      $1470 = $lnode;
      HEAP32[$mi>>2] = $1470;
      $1471 = HEAP32[$i>>2]|0;
      _SetLineNumber($1471);
      $1472 = $oldifnesting;
      _SetIfNestLevel($1472);
      $1473 = $cntgoto;
      $1474 = (($1473) + 1)|0;
      $cntgoto = $1474;
      continue;
     }
    }
    $1478 = $3;
    (_ParseLine($1478)|0);
    $1479 = HEAP8[(6081)>>0]|0;
    $1480 = $1479&255;
    $1481 = ($1480|0)==(1);
    if (!($1481)) {
     continue;
    }
    $1482 = HEAP32[(600)>>2]|0;
    _WritePreprocessedLine($1482);
   }
   if ((label|0) == 219) {
    $1274 = HEAP32[(560)>>2]|0;
    $1275 = $1274 >>> 11;
    $1276 = $1275 & 1;
    $1277 = ($1276|0)!=(0);
    $1278 = HEAP32[(552)>>2]|0;
    $1279 = ($1278|0)==(2);
    $or$cond8 = $1277 & $1279;
    if ($or$cond8) {
     _LstWriteSrcLine();
    }
    $1280 = $3;
    $1281 = ((($1280)) + 16|0);
    $1282 = HEAP8[$1281>>0]|0;
    $1283 = $1282&255;
    $1284 = ($1283|0)!=(0);
    L326: do {
     if ($1284) {
      $1285 = $3;
      $1286 = ((($1285)) + 16|0);
      $1287 = HEAP8[$1286>>0]|0;
      $1288 = $1287&255;
      $1289 = ($1288|0)!=(9);
      if (!($1289)) {
       $1290 = $3;
       $1291 = ((($1290)) + 16|0);
       $1292 = ((($1291)) + 1|0);
       $1293 = HEAP8[$1292>>0]|0;
       $1294 = $1293 << 24 >> 24;
       $1295 = ($1294|0)!=(60);
       if (!($1295)) {
        $1298 = HEAP32[(616)>>2]|0;
        $1299 = ($1298|0)>(2);
        if ($1299) {
         $1300 = $3;
         $1301 = ((($1300)) + 32|0);
         $1302 = ((($1301)) + 12|0);
         $1303 = HEAP32[$1302>>2]|0;
         HEAP32[$vararg_buffer29>>2] = $1303;
         (_EmitErr(209,$vararg_buffer29)|0);
         break;
        }
        $1304 = $4;
        $1305 = ($1304|0)!=(0|0);
        if (!($1305)) {
         break;
        }
        $1306 = HEAP32[$mi>>2]|0;
        $1307 = ((($1306)) + 4|0);
        $1308 = HEAP8[$1307>>0]|0;
        $1309 = $1308&255;
        $1310 = ($1309|0)!=(0);
        do {
         if (!($1310)) {
          $1311 = HEAP32[$mi>>2]|0;
          $1312 = ((($1311)) + 5|0);
          $1313 = $3;
          $1314 = ((($1313)) + 16|0);
          $1315 = ((($1314)) + 12|0);
          $1316 = HEAP32[$1315>>2]|0;
          $1317 = HEAP32[(600)>>2]|0;
          $1318 = $1316;
          $1319 = $1317;
          $1320 = (($1318) - ($1319))|0;
          $1321 = (($1312) + ($1320)|0);
          $1322 = HEAP8[$1321>>0]|0;
          $1323 = $1322 << 24 >> 24;
          $1324 = ($1323|0)!=(60);
          if ($1324) {
           break;
          }
          $1335 = $3;
          $1336 = ((($1335)) + 32|0);
          $1337 = ((($1336)) + 12|0);
          $1338 = HEAP32[$1337>>2]|0;
          $1339 = $3;
          $1340 = ((($1339)) + 16|0);
          $1341 = ((($1340)) + 12|0);
          $1342 = HEAP32[$1341>>2]|0;
          $1343 = ((($1342)) + 1|0);
          $1344 = $1338;
          $1345 = $1343;
          $1346 = (($1344) - ($1345))|0;
          $len = $1346;
          $1347 = $4;
          $1348 = $3;
          $1349 = ((($1348)) + 16|0);
          $1350 = ((($1349)) + 12|0);
          $1351 = HEAP32[$1350>>2]|0;
          $1352 = ((($1351)) + 1|0);
          $1353 = $len;
          _memcpy(($1347|0),($1352|0),($1353|0))|0;
          while(1) {
           $1354 = $4;
           $1355 = $len;
           $1356 = (($1354) + ($1355)|0);
           $1357 = ((($1356)) + -1|0);
           $1358 = HEAP8[$1357>>0]|0;
           $1359 = $1358 << 24 >> 24;
           $1360 = ($1359|0)!=(62);
           if (!($1360)) {
            break;
           }
           $1361 = $len;
           $1362 = (($1361) + -1)|0;
           $len = $1362;
          }
          $1363 = $4;
          $1364 = $len;
          $1365 = (($1363) + ($1364)|0);
          $1366 = ((($1365)) + -1|0);
          HEAP8[$1366>>0] = 0;
          break L326;
         }
        } while(0);
        $1325 = $4;
        $1326 = $3;
        $1327 = ((($1326)) + 16|0);
        $1328 = ((($1327)) + 4|0);
        $1329 = HEAP32[$1328>>2]|0;
        $1330 = $3;
        $1331 = ((($1330)) + 16|0);
        $1332 = ((($1331)) + 8|0);
        $1333 = HEAP32[$1332>>2]|0;
        $1334 = (($1333) + 1)|0;
        _memcpy(($1325|0),($1329|0),($1334|0))|0;
        break;
       }
      }
      $1296 = $3;
      $1297 = ((($1296)) + 16|0);
      (_TextItemError($1297)|0);
     }
    } while(0);
    $1367 = $cntgoto;
    $1368 = ($1367|0)!=(0);
    if ($1368) {
     HEAP32[$mi>>2] = 0;
     _SetLineNumber(0);
     $1369 = $oldifnesting;
     _SetIfNestLevel($1369);
    }
    $1370 = $3;
    _SkipMacro($1370);
    $1371 = $6;
    HEAP8[$1371>>0] = 1;
   }
   else if ((label|0) == 257) {
    $1466 = $3;
    $1467 = ((($1466)) + 16|0);
    $1468 = ((($1467)) + 4|0);
    $1469 = HEAP32[$1468>>2]|0;
    HEAP32[$vararg_buffer32>>2] = $1469;
    (_EmitErr(264,$vararg_buffer32)|0);
    label = 260;
   }
   else if ((label|0) == 259) {
    $1475 = ((($1381)) + 12|0);
    $1476 = HEAP32[$1475>>2]|0;
    HEAP32[$vararg_buffer35>>2] = $1476;
    (_EmitErr(209,$vararg_buffer35)|0);
    label = 260;
   }
   if ((label|0) == 260) {
    $1477 = $3;
    _SkipMacro($1477);
   }
   $1483 = HEAP8[87007>>0]|0;
   $1484 = (($1483) + -1)<<24>>24;
   HEAP8[87007>>0] = $1484;
   $1485 = $5;
   $1486 = $1485 & 2;
   $1487 = ($1486|0)!=(0);
   if (!($1487)) {
    _PopInputStatus($oldstat);
   }
  }
  $1488 = $2;
  $0 = $1488;
  $1489 = $0;
  STACKTOP = sp;return ($1489|0);
 }
 return (0)|0;
}
function _ExpandText($line,$tokenarray,$substitute) {
 $line = $line|0;
 $tokenarray = $tokenarray|0;
 $substitute = $substitute|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $i = 0, $is_exitm = 0, $j = 0, $lvl = 0, $macro_proc = 0, $old_stringbufferend = 0, $old_tokencount = 0, $p = 0, $pDst = 0, $pIdent = 0;
 var $pSrc = 0, $quoted_string = 0, $rc = 0, $sp = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $is_exitm = sp + 146|0;
 $sp = sp + 16|0;
 $1 = $line;
 $2 = $tokenarray;
 $3 = $substitute;
 $4 = HEAP32[(616)>>2]|0;
 $old_tokencount = $4;
 $5 = HEAP32[(612)>>2]|0;
 $old_stringbufferend = $5;
 $quoted_string = 0;
 $macro_proc = 0;
 $6 = $1;
 HEAP32[$sp>>2] = $6;
 $7 = HEAP32[(612)>>2]|0;
 $pDst = $7;
 $8 = HEAP32[(612)>>2]|0;
 $9 = ((($8)) + 600|0);
 HEAP32[(612)>>2] = $9;
 $rc = 0;
 $lvl = 0;
 L1: while(1) {
  $10 = $lvl;
  $11 = ($10|0)>=(0);
  if (!($11)) {
   break;
  }
  $12 = $lvl;
  $13 = (($sp) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $pSrc = $14;
  L4: while(1) {
   $15 = $pSrc;
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)!=(0);
   if (!($17)) {
    break;
   }
   $18 = $pSrc;
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = (_isalpha($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    label = 12;
   } else {
    $23 = $pSrc;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(95);
    if ($26) {
     label = 12;
    } else {
     $27 = $pSrc;
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 << 24 >> 24;
     $30 = ($29|0)==(64);
     if ($30) {
      label = 12;
     } else {
      $31 = $pSrc;
      $32 = HEAP8[$31>>0]|0;
      $33 = $32 << 24 >> 24;
      $34 = ($33|0)==(36);
      if ($34) {
       label = 12;
      } else {
       $35 = $pSrc;
       $36 = HEAP8[$35>>0]|0;
       $37 = $36 << 24 >> 24;
       $38 = ($37|0)==(63);
       if ($38) {
        label = 12;
       } else {
        $39 = $pSrc;
        $40 = HEAP8[$39>>0]|0;
        $41 = $40 << 24 >> 24;
        $42 = ($41|0)==(46);
        if ($42) {
         $43 = HEAP32[(560)>>2]|0;
         $44 = $43 >>> 4;
         $45 = $44 & 1;
         $46 = ($45|0)==(1);
         if ($46) {
          label = 12;
         }
        }
       }
      }
     }
    }
   }
   do {
    if ((label|0) == 12) {
     label = 0;
     $47 = $3;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      $49 = $quoted_string;
      $50 = $49 << 24 >> 24;
      $51 = ($50|0)==(0);
      if (!($51)) {
       break;
      }
     }
     $52 = $pDst;
     $pIdent = $52;
     while(1) {
      $53 = $pSrc;
      $54 = ((($53)) + 1|0);
      $pSrc = $54;
      $55 = HEAP8[$53>>0]|0;
      $56 = $pDst;
      $57 = ((($56)) + 1|0);
      $pDst = $57;
      HEAP8[$56>>0] = $55;
      $58 = $pSrc;
      $59 = HEAP8[$58>>0]|0;
      $60 = $59 << 24 >> 24;
      $61 = (_isalnum($60)|0);
      $62 = ($61|0)!=(0);
      if ($62) {
       continue;
      }
      $63 = $pSrc;
      $64 = HEAP8[$63>>0]|0;
      $65 = $64 << 24 >> 24;
      $66 = ($65|0)==(95);
      if ($66) {
       continue;
      }
      $67 = $pSrc;
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $70 = ($69|0)==(64);
      if ($70) {
       continue;
      }
      $71 = $pSrc;
      $72 = HEAP8[$71>>0]|0;
      $73 = $72 << 24 >> 24;
      $74 = ($73|0)==(36);
      if ($74) {
       continue;
      }
      $75 = $pSrc;
      $76 = HEAP8[$75>>0]|0;
      $77 = $76 << 24 >> 24;
      $78 = ($77|0)==(63);
      if (!($78)) {
       break;
      }
     }
     $79 = $pDst;
     HEAP8[$79>>0] = 0;
     $80 = $pIdent;
     $81 = (_SymFind($80)|0);
     $sym = $81;
     $82 = $sym;
     $83 = ($82|0)!=(0|0);
     if (!($83)) {
      continue L4;
     }
     $84 = $sym;
     $85 = ((($84)) + 24|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = ($86&65535) >>> 1;
     $88 = $87 & 1;
     $89 = $88&255;
     $90 = $89&255;
     $91 = ($90|0)==(1);
     if (!($91)) {
      continue L4;
     }
     $92 = $sym;
     $93 = ((($92)) + 16|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)==(10);
     do {
      if ($95) {
       $96 = $quoted_string;
       $97 = $96 << 24 >> 24;
       $98 = ($97|0)!=(0);
       if ($98) {
        $99 = $pIdent;
        $100 = ((($99)) + -1|0);
        $101 = HEAP8[$100>>0]|0;
        $102 = $101 << 24 >> 24;
        $103 = ($102|0)!=(38);
        if ($103) {
         $104 = $pSrc;
         $105 = HEAP8[$104>>0]|0;
         $106 = $105 << 24 >> 24;
         $107 = ($106|0)!=(38);
         if ($107) {
          continue L4;
         }
        }
       }
       $108 = $3;
       $109 = ($108|0)!=(0);
       $110 = $pIdent;
       if ($109) {
        $111 = ((($110)) + -1|0);
        $112 = HEAP8[$111>>0]|0;
        $113 = $112 << 24 >> 24;
        $114 = ($113|0)==(38);
        if ($114) {
         $115 = $pIdent;
         $116 = ((($115)) + -1|0);
         $pIdent = $116;
        }
        $117 = $pSrc;
        $118 = HEAP8[$117>>0]|0;
        $119 = $118 << 24 >> 24;
        $120 = ($119|0)==(38);
        if ($120) {
         $121 = $pSrc;
         $122 = ((($121)) + 1|0);
         $pSrc = $122;
        }
       } else {
        $123 = $old_stringbufferend;
        $124 = ($110>>>0)>($123>>>0);
        if ($124) {
         $125 = $pIdent;
         $126 = ((($125)) + -1|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = $127 << 24 >> 24;
         $129 = ($128|0)==(37);
         if ($129) {
          $130 = $pIdent;
          $131 = ((($130)) + -1|0);
          $pIdent = $131;
         }
        }
       }
       $132 = $pSrc;
       $133 = $lvl;
       $134 = (($133) + 1)|0;
       $lvl = $134;
       $135 = (($sp) + ($133<<2)|0);
       HEAP32[$135>>2] = $132;
       $136 = HEAP32[(612)>>2]|0;
       $pSrc = $136;
       $137 = $pSrc;
       $138 = $sym;
       $139 = ((($138)) + 8|0);
       $140 = HEAP32[$139>>2]|0;
       (_strcpy($137,$140)|0);
       $141 = $pSrc;
       $142 = $pSrc;
       $143 = (_strlen($142)|0);
       $144 = (($143) + 1)|0;
       $145 = (($144) + 4)|0;
       $146 = (($145) - 1)|0;
       $147 = $146 & -4;
       $148 = (($141) + ($147)|0);
       HEAP32[(612)>>2] = $148;
       $149 = $pIdent;
       $pDst = $149;
       $rc = 1;
      } else {
       $150 = $sym;
       $151 = ((($150)) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152|0)==(9);
       if ($153) {
        $154 = $sym;
        $155 = ((($154)) + 28|0);
        $156 = HEAP8[$155>>0]|0;
        $157 = ($156&255) >>> 1;
        $158 = $157 & 1;
        $159 = $158&255;
        $160 = ($159|0)==(1);
        if ($160) {
         $161 = $pSrc;
         $p = $161;
         while(1) {
          $162 = $p;
          $163 = HEAP8[$162>>0]|0;
          $164 = $163 << 24 >> 24;
          $165 = (_isspace($164)|0);
          $166 = ($165|0)!=(0);
          $167 = $p;
          if (!($166)) {
           break;
          }
          $168 = ((($167)) + 1|0);
          $p = $168;
         }
         $169 = HEAP8[$167>>0]|0;
         $170 = $169 << 24 >> 24;
         $171 = ($170|0)==(40);
         if (!($171)) {
          break;
         }
         $172 = HEAP32[(616)>>2]|0;
         $173 = (($172) + 1)|0;
         $i = $173;
         $174 = $p;
         $175 = $i;
         $176 = $2;
         $177 = (_Tokenize($174,$175,$176,1)|0);
         HEAP32[(616)>>2] = $177;
         $178 = $i;
         $j = $178;
         $cnt = 0;
         while(1) {
          $179 = $j;
          $180 = HEAP32[(616)>>2]|0;
          $181 = ($179|0)<($180|0);
          if (!($181)) {
           break;
          }
          $182 = $j;
          $183 = $2;
          $184 = (($183) + ($182<<4)|0);
          $185 = HEAP8[$184>>0]|0;
          $186 = $185&255;
          $187 = ($186|0)==(40);
          if ($187) {
           $188 = $cnt;
           $189 = (($188) + 1)|0;
           $cnt = $189;
          } else {
           $190 = $j;
           $191 = $2;
           $192 = (($191) + ($190<<4)|0);
           $193 = HEAP8[$192>>0]|0;
           $194 = $193&255;
           $195 = ($194|0)==(41);
           if ($195) {
            $196 = $cnt;
            $197 = (($196) + -1)|0;
            $cnt = $197;
            $198 = $cnt;
            $199 = ($198|0)==(0);
            if ($199) {
             label = 47;
             break;
            }
           }
          }
          $202 = $j;
          $203 = (($202) + 1)|0;
          $j = $203;
         }
         if ((label|0) == 47) {
          label = 0;
          $200 = $j;
          $201 = (($200) + 1)|0;
          $j = $201;
         }
         $204 = $quoted_string;
         $205 = $204 << 24 >> 24;
         $206 = ($205|0)!=(0);
         if ($206) {
          $207 = $pIdent;
          $208 = ((($207)) + -1|0);
          $209 = HEAP8[$208>>0]|0;
          $210 = $209 << 24 >> 24;
          $211 = ($210|0)!=(38);
          if ($211) {
           $212 = $j;
           $213 = $2;
           $214 = (($213) + ($212<<4)|0);
           $215 = HEAP8[$214>>0]|0;
           $216 = $215&255;
           $217 = ($216|0)!=(38);
           if ($217) {
            $218 = $old_tokencount;
            HEAP32[(616)>>2] = $218;
            continue L4;
           }
          }
         }
         $219 = $3;
         $220 = ($219|0)!=(0);
         $221 = $pIdent;
         if ($220) {
          $222 = ((($221)) + -1|0);
          $223 = HEAP8[$222>>0]|0;
          $224 = $223 << 24 >> 24;
          $225 = ($224|0)==(38);
          if ($225) {
           $226 = $pIdent;
           $227 = ((($226)) + -1|0);
           $pIdent = $227;
          }
         } else {
          $228 = $old_stringbufferend;
          $229 = ($221>>>0)>($228>>>0);
          if ($229) {
           $230 = $pIdent;
           $231 = ((($230)) + -1|0);
           $232 = HEAP8[$231>>0]|0;
           $233 = $232 << 24 >> 24;
           $234 = ($233|0)==(37);
           if ($234) {
            $235 = $pIdent;
            $236 = ((($235)) + -1|0);
            $pIdent = $236;
           }
          }
         }
         $237 = $sym;
         $238 = $i;
         $239 = $2;
         $240 = $pDst;
         $241 = (_RunMacro($237,$238,$239,$240,0,$is_exitm)|0);
         $i = $241;
         $242 = $old_tokencount;
         HEAP32[(616)>>2] = $242;
         $243 = $i;
         $244 = ($243|0)==(-1);
         if ($244) {
          label = 60;
          break L1;
         }
         $245 = $i;
         $246 = (($245) - 1)|0;
         $247 = $2;
         $248 = (($247) + ($246<<4)|0);
         $249 = ((($248)) + 12|0);
         $250 = HEAP32[$249>>2]|0;
         $251 = $i;
         $252 = (($251) - 1)|0;
         $253 = $2;
         $254 = (($253) + ($252<<4)|0);
         $255 = ((($254)) + 4|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = (_strlen($256)|0);
         $258 = (($250) + ($257)|0);
         $pSrc = $258;
         $259 = $3;
         $260 = ($259|0)!=(0);
         do {
          if ($260) {
           $261 = $pSrc;
           $262 = HEAP8[$261>>0]|0;
           $263 = $262 << 24 >> 24;
           $264 = ($263|0)==(38);
           if (!($264)) {
            break;
           }
           $265 = $pSrc;
           $266 = ((($265)) + 1|0);
           $pSrc = $266;
          }
         } while(0);
         $267 = $pSrc;
         $268 = $lvl;
         $269 = (($268) + 1)|0;
         $lvl = $269;
         $270 = (($sp) + ($268<<2)|0);
         HEAP32[$270>>2] = $267;
         $271 = HEAP32[(612)>>2]|0;
         $pSrc = $271;
         $272 = $pDst;
         $273 = (_strlen($272)|0);
         $cnt = $273;
         $274 = $pSrc;
         $275 = $pDst;
         $276 = $cnt;
         $277 = (($276) + 1)|0;
         _memcpy(($274|0),($275|0),($277|0))|0;
         $278 = $pSrc;
         $279 = $cnt;
         $280 = (($279) + 1)|0;
         $281 = (($280) + 4)|0;
         $282 = (($281) - 1)|0;
         $283 = $282 & -4;
         $284 = (($278) + ($283)|0);
         HEAP32[(612)>>2] = $284;
         $285 = $pIdent;
         $pDst = $285;
         $rc = 1;
         break;
        }
       }
       $286 = $sym;
       $287 = ((($286)) + 16|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = ($288|0)==(9);
       if ($289) {
        $macro_proc = 1;
       }
      }
     } while(0);
     $290 = $lvl;
     $291 = ($290|0)==(20);
     if ($291) {
      label = 68;
      break L4;
     } else {
      continue L4;
     }
    }
   } while(0);
   $292 = $pSrc;
   $293 = HEAP8[$292>>0]|0;
   $294 = $293 << 24 >> 24;
   $295 = ($294|0)==(34);
   if ($295) {
    label = 71;
   } else {
    $296 = $pSrc;
    $297 = HEAP8[$296>>0]|0;
    $298 = $297 << 24 >> 24;
    $299 = ($298|0)==(39);
    if ($299) {
     label = 71;
    }
   }
   do {
    if ((label|0) == 71) {
     label = 0;
     $300 = $quoted_string;
     $301 = $300 << 24 >> 24;
     $302 = ($301|0)==(0);
     $303 = $pSrc;
     $304 = HEAP8[$303>>0]|0;
     if ($302) {
      $quoted_string = $304;
      break;
     }
     $305 = $304 << 24 >> 24;
     $306 = $quoted_string;
     $307 = $306 << 24 >> 24;
     $308 = ($305|0)==($307|0);
     if ($308) {
      $quoted_string = 0;
     }
    }
   } while(0);
   $309 = $pSrc;
   $310 = ((($309)) + 1|0);
   $pSrc = $310;
   $311 = HEAP8[$309>>0]|0;
   $312 = $pDst;
   $313 = ((($312)) + 1|0);
   $pDst = $313;
   HEAP8[$312>>0] = $311;
  }
  if ((label|0) == 68) {
   label = 0;
   (_EmitError(101)|0);
  }
  $314 = $lvl;
  $315 = (($314) + -1)|0;
  $lvl = $315;
 }
 if ((label|0) == 60) {
  $0 = -1;
  $348 = $0;
  STACKTOP = sp;return ($348|0);
 }
 $316 = $pDst;
 $317 = ((($316)) + 1|0);
 $pDst = $317;
 HEAP8[$316>>0] = 0;
 $318 = $old_stringbufferend;
 HEAP32[(612)>>2] = $318;
 $319 = $rc;
 $320 = ($319|0)==(1);
 if ($320) {
  $321 = $1;
  $322 = HEAP32[(612)>>2]|0;
  $323 = $pDst;
  $324 = HEAP32[(612)>>2]|0;
  $325 = $323;
  $326 = $324;
  $327 = (($325) - ($326))|0;
  _memcpy(($321|0),($322|0),($327|0))|0;
 }
 $328 = $3;
 $329 = ($328|0)!=(0);
 do {
  if ($329) {
   $330 = $rc;
   $331 = ($330|0)==(1);
   if ($331) {
    $332 = $2;
    $333 = ((($332)) + 12|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = $2;
    $336 = (_Tokenize($334,0,$335,1)|0);
    HEAP32[(616)>>2] = $336;
   }
   $337 = $rc;
   $338 = ($337|0)==(1);
   if (!($338)) {
    $339 = $macro_proc;
    $340 = $339 << 24 >> 24;
    $341 = ($340|0)!=(0);
    if (!($341)) {
     break;
    }
   }
   $342 = $2;
   $343 = ((($342)) + 12|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = $2;
   $346 = (_ExpandLine($344,$345)|0);
   $0 = $346;
   $348 = $0;
   STACKTOP = sp;return ($348|0);
  }
 } while(0);
 $347 = $rc;
 $0 = $347;
 $348 = $0;
 STACKTOP = sp;return ($348|0);
}
function _ExpandLine($string,$tokenarray) {
 $string = $string|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addbrackets = 0, $bracket_flags = 0, $count = 0, $flags = 0, $i = 0, $j = 0, $lvl = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $rc = 0, $sym = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 36|0;
 $1 = $string;
 $2 = $tokenarray;
 $lvl = 0;
 L1: while(1) {
  $3 = $lvl;
  $4 = ($3|0)<(20);
  if (!($4)) {
   label = 65;
   break;
  }
  $bracket_flags = 0;
  HEAP32[$count>>2] = 0;
  $rc = 0;
  $5 = HEAP32[(616)>>2]|0;
  $6 = ($5|0)>(2);
  do {
   if ($6) {
    $7 = $2;
    $8 = ((($7)) + 16|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = ($10|0)==(58);
    if (!($11)) {
     $12 = $2;
     $13 = ((($12)) + 16|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = ($15|0)==(13);
     if (!($16)) {
      $23 = 0;
      break;
     }
    }
    $17 = $2;
    $18 = ((($17)) + 32|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = ($20|0)==(3);
    $23 = $21;
   } else {
    $23 = 0;
   }
  } while(0);
  $22 = $23 ? 2 : 0;
  $i = $22;
  $24 = $i;
  $25 = $2;
  $26 = (($25) + ($24<<4)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(3);
  L10: do {
   if ($29) {
    $30 = $i;
    $31 = $2;
    $32 = (($31) + ($30<<4)|0);
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (15660 + (($34*12)|0)|0);
    $36 = HEAP32[$35>>2]|0;
    $flags = $36;
    $37 = $flags;
    $38 = $37 & 2;
    $39 = ($38|0)!=(0);
    if (!($39)) {
     $78 = $flags;
     $79 = $78 & 4;
     $80 = ($79|0)!=(0);
     if ($80) {
      label = 20;
      break L1;
     } else {
      label = 53;
      break;
     }
    }
    $bracket_flags = -1;
    $40 = $i;
    $41 = $2;
    $42 = (($41) + ($40<<4)|0);
    $43 = ((($42)) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ($45|0)==(10);
    if ($46) {
     $47 = $i;
     $48 = $2;
     $49 = (($48) + ($47<<4)|0);
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(280);
     if (!($52)) {
      $53 = $i;
      $54 = $2;
      $55 = (($54) + ($53<<4)|0);
      $56 = ((($55)) + 8|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(281);
      if (!($58)) {
       label = 53;
       break;
      }
     }
     $59 = $i;
     $60 = ($59|0)!=(0);
     if ($60) {
      $61 = $1;
      $62 = $2;
      $63 = (_ExpandToken($61,$count,$62,1,0,0)|0);
      $rc = $63;
     }
     while(1) {
      $64 = $i;
      $65 = $2;
      $66 = (($65) + ($64<<4)|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = ($68|0)!=(0);
      if ($69) {
       $70 = $i;
       $71 = $2;
       $72 = (($71) + ($70<<4)|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = ($74|0)!=(44);
       $220 = $75;
      } else {
       $220 = 0;
      }
      $76 = $i;
      if (!($220)) {
       break;
      }
      $77 = (($76) + 1)|0;
      $i = $77;
     }
     HEAP32[$count>>2] = $76;
     label = 53;
    } else {
     label = 53;
    }
   } else {
    $81 = HEAP32[(616)>>2]|0;
    $82 = ($81|0)>(1);
    if ($82) {
     $83 = $2;
     $84 = ((($83)) + 16|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = ($86|0)==(3);
     if ($87) {
      $88 = $2;
      $89 = ((($88)) + 16|0);
      $90 = ((($89)) + 1|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      switch ($92|0) {
      case 47:  {
       label = 41;
       break L1;
       break;
      }
      case 5:  {
       $bracket_flags = -1;
       HEAP32[$count>>2] = 2;
       label = 53;
       break L10;
       break;
      }
      case 6:  {
       $bracket_flags = 1;
       HEAP32[$count>>2] = 2;
       label = 53;
       break L10;
       break;
      }
      case 24:  {
       $93 = $1;
       $94 = $2;
       $95 = (_ExpandToken($93,$count,$94,1,0,0)|0);
       $rc = $95;
       $bracket_flags = 1;
       HEAP32[$count>>2] = 2;
       label = 53;
       break L10;
       break;
      }
      case 23:  {
       $96 = $1;
       $97 = $2;
       $98 = (_ExpandToken($96,$count,$97,1,0,0)|0);
       $rc = $98;
       $i = 2;
       HEAP32[$count>>2] = 0;
       $j = 0;
       while(1) {
        $99 = $i;
        $100 = HEAP32[(616)>>2]|0;
        $101 = ($99|0)<($100|0);
        if (!($101)) {
         break;
        }
        $102 = $i;
        $103 = $2;
        $104 = (($103) + ($102<<4)|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = ($106|0)==(40);
        do {
         if ($107) {
          $108 = HEAP32[$count>>2]|0;
          $109 = (($108) + 1)|0;
          HEAP32[$count>>2] = $109;
         } else {
          $110 = $i;
          $111 = $2;
          $112 = (($111) + ($110<<4)|0);
          $113 = HEAP8[$112>>0]|0;
          $114 = $113&255;
          $115 = ($114|0)==(41);
          if ($115) {
           $116 = HEAP32[$count>>2]|0;
           $117 = (($116) + -1)|0;
           HEAP32[$count>>2] = $117;
           break;
          }
          $118 = $i;
          $119 = $2;
          $120 = (($119) + ($118<<4)|0);
          $121 = HEAP8[$120>>0]|0;
          $122 = $121&255;
          $123 = ($122|0)==(44);
          $124 = HEAP32[$count>>2]|0;
          $125 = ($124|0)==(0);
          $or$cond = $123 & $125;
          if ($or$cond) {
           $126 = $j;
           $127 = (($126) + 1)|0;
           $j = $127;
          }
         }
        } while(0);
        $128 = $i;
        $129 = (($128) + 1)|0;
        $i = $129;
       }
       $130 = $j;
       $131 = ($130|0)>(1);
       $132 = $131 ? 6 : 3;
       $bracket_flags = $132;
       HEAP32[$count>>2] = 2;
       label = 53;
       break L10;
       break;
      }
      case 4:  {
       $133 = $2;
       $134 = ((($133)) + 4|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (_SymFind($135)|0);
       $sym = $136;
       $137 = $sym;
       $138 = ($137|0)!=(0|0);
       if ($138) {
        $139 = $sym;
        $140 = ((($139)) + 16|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = ($141|0)!=(9);
        if ($142) {
         $143 = $1;
         $144 = $2;
         $145 = (_ExpandToken($143,$count,$144,1,0,0)|0);
         $rc = $145;
        }
       }
       $146 = HEAP32[(616)>>2]|0;
       HEAP32[$count>>2] = $146;
       label = 53;
       break L10;
       break;
      }
      default: {
       label = 53;
       break L10;
      }
      }
     }
    }
    $147 = $1;
    $148 = $2;
    $149 = (_ExpandToken($147,$count,$148,1,0,0)|0);
    $rc = $149;
    $150 = $rc;
    $151 = ($150|0)==(-1);
    $152 = $rc;
    $153 = ($152|0)==(-2);
    $or$cond3 = $151 | $153;
    $154 = $rc;
    if ($or$cond3) {
     label = 43;
     break L1;
    }
    $155 = ($154|0)==(1);
    if ($155) {
     $156 = $1;
     $157 = $2;
     $158 = (_Tokenize($156,0,$157,0)|0);
     HEAP32[(616)>>2] = $158;
     break;
    }
    $159 = HEAP32[$count>>2]|0;
    $160 = ($159|0)==(1);
    if ($160) {
     $161 = $2;
     $162 = HEAP8[$161>>0]|0;
     $163 = $162&255;
     $164 = ($163|0)==(8);
     if ($164) {
      $165 = $2;
      $166 = ((($165)) + 16|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $167&255;
      $169 = ($168|0)==(8);
      if ($169) {
       $170 = $1;
       $171 = $2;
       $172 = (_ExpandToken($170,$count,$171,2,0,0)|0);
       $rc = $172;
       $173 = $rc;
       $174 = ($173|0)==(-1);
       $175 = $rc;
       $176 = ($175|0)==(-2);
       $or$cond5 = $174 | $176;
       $177 = $rc;
       if ($or$cond5) {
        label = 50;
        break L1;
       }
       $178 = ($177|0)==(1);
       if ($178) {
        $179 = $1;
        $180 = $2;
        $181 = (_Tokenize($179,0,$180,0)|0);
        HEAP32[(616)>>2] = $181;
       } else {
        label = 53;
       }
      } else {
       label = 53;
      }
     } else {
      label = 53;
     }
    } else {
     label = 53;
    }
   }
  } while(0);
  if ((label|0) == 53) {
   while(1) {
    label = 0;
    $182 = HEAP32[$count>>2]|0;
    $183 = HEAP32[(616)>>2]|0;
    $184 = ($182|0)<($183|0);
    if (!($184)) {
     break;
    }
    $185 = $bracket_flags;
    $186 = $185 & 1;
    $addbrackets = $186;
    $187 = $bracket_flags;
    $188 = ($187|0)!=(-1);
    if ($188) {
     $189 = $bracket_flags;
     $190 = $189 >>> 1;
     $bracket_flags = $190;
    }
    $191 = $1;
    $192 = $2;
    $193 = HEAP32[(616)>>2]|0;
    $194 = $addbrackets;
    $195 = (_ExpandToken($191,$count,$192,$193,$194,0)|0);
    $tmp = $195;
    $196 = $tmp;
    $197 = ($196|0)<(0);
    $198 = $tmp;
    if ($197) {
     label = 57;
     break L1;
    }
    $199 = ($198|0)==(1);
    if ($199) {
     $rc = 1;
    }
    $200 = HEAP32[$count>>2]|0;
    $201 = $2;
    $202 = (($201) + ($200<<4)|0);
    $203 = HEAP8[$202>>0]|0;
    $204 = $203&255;
    $205 = ($204|0)==(44);
    if (!($205)) {
     label = 53;
     continue;
    }
    $206 = HEAP32[$count>>2]|0;
    $207 = (($206) + 1)|0;
    HEAP32[$count>>2] = $207;
    label = 53;
   }
   $208 = $rc;
   $209 = ($208|0)==(1);
   if (!($209)) {
    label = 65;
    break;
   }
   $210 = $1;
   $211 = $2;
   $212 = (_Tokenize($210,0,$211,5)|0);
   HEAP32[(616)>>2] = $212;
  }
  $213 = $lvl;
  $214 = (($213) + 1)|0;
  $lvl = $214;
 }
 if ((label|0) == 20) {
  $0 = 0;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 41) {
  $0 = 0;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 43) {
  $0 = $154;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 50) {
  $0 = $177;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 57) {
  $0 = $198;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 65) {
  $215 = $lvl;
  $216 = ($215|0)==(20);
  if ($216) {
   $217 = (_EmitError(101)|0);
   $0 = $217;
   $219 = $0;
   STACKTOP = sp;return ($219|0);
  } else {
   $218 = $rc;
   $0 = $218;
   $219 = $0;
   STACKTOP = sp;return ($219|0);
  }
 }
 return (0)|0;
}
function _ExpandLineItems($line,$i,$tokenarray,$addbrackets,$equmode) {
 $line = $line|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $addbrackets = $addbrackets|0;
 $equmode = $equmode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $k = 0, $lvl = 0, $rc = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = sp + 12|0;
 $1 = $line;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $addbrackets;
 $5 = $equmode;
 $lvl = 0;
 L1: while(1) {
  $rc = 0;
  $6 = $2;
  HEAP32[$k>>2] = $6;
  while(1) {
   $7 = HEAP32[$k>>2]|0;
   $8 = HEAP32[(616)>>2]|0;
   $9 = ($7|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = $1;
   $11 = $3;
   $12 = HEAP32[(616)>>2]|0;
   $13 = $4;
   $14 = $5;
   $15 = (_ExpandToken($10,$k,$11,$12,$13,$14)|0);
   $tmp = $15;
   $16 = $tmp;
   $17 = ($16|0)==(-1);
   if ($17) {
    label = 5;
    break L1;
   }
   $19 = $tmp;
   $20 = ($19|0)==(1);
   if ($20) {
    $rc = 1;
   }
   $21 = HEAP32[$k>>2]|0;
   $22 = $3;
   $23 = (($22) + ($21<<4)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)==(44);
   if (!($26)) {
    continue;
   }
   $27 = HEAP32[$k>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$k>>2] = $28;
  }
  $29 = $rc;
  $30 = ($29|0)==(0);
  if ($30) {
   break;
  }
  $31 = $1;
  $32 = $2;
  $33 = $3;
  $34 = (_Tokenize($31,$32,$33,1)|0);
  HEAP32[(616)>>2] = $34;
  $35 = $lvl;
  $36 = ($35|0)==(20);
  if ($36) {
   label = 12;
   break;
  }
  $37 = $lvl;
  $38 = (($37) + 1)|0;
  $lvl = $38;
 }
 if ((label|0) == 5) {
  $18 = $lvl;
  $0 = $18;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 12) {
  (_EmitError(101)|0);
 }
 $39 = $lvl;
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _ExpandLiterals($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $tokenarray;
 $cnt = 0;
 $2 = $0;
 $idx = $2;
 while(1) {
  $3 = $idx;
  $4 = HEAP32[(616)>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $idx;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(9);
  do {
   if ($11) {
    $12 = $idx;
    $13 = $1;
    $14 = (($13) + ($12<<4)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0);
    if ($17) {
     $18 = $idx;
     $19 = $1;
     $20 = (($19) + ($18<<4)|0);
     $21 = ((($20)) + 1|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 << 24 >> 24;
     $24 = ($23|0)==(60);
     if (!($24)) {
      $25 = $idx;
      $26 = $1;
      $27 = (($26) + ($25<<4)|0);
      $28 = ((($27)) + 1|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29 << 24 >> 24;
      $31 = ($30|0)==(123);
      if (!($31)) {
       break;
      }
     }
     $32 = $cnt;
     $33 = (($32) + 1)|0;
     $cnt = $33;
    }
   }
  } while(0);
  $34 = $idx;
  $35 = (($34) + 1)|0;
  $idx = $35;
 }
 $36 = $cnt;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = $0;
 $39 = $1;
 $40 = (($39) + ($38<<4)|0);
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $1;
 $44 = (_ExpandText($42,$43,0)|0);
 $45 = ($44|0)==(1);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $0;
 $47 = $1;
 $48 = (($47) + ($46<<4)|0);
 $49 = ((($48)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $0;
 $52 = $1;
 (_Tokenize($50,$51,$52,1)|0);
 STACKTOP = sp;return;
}
function _ExpandTMacro($outbuf,$tokenarray,$equmode,$level) {
 $outbuf = $outbuf|0;
 $tokenarray = $tokenarray|0;
 $equmode = $equmode|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $expanded = 0, $i = 0, $is_exitm = 0, $len = 0, $old_tokencount = 0, $or$cond = 0, $p = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $is_exitm = sp + 640|0;
 $buffer = sp + 40|0;
 $1 = $outbuf;
 $2 = $tokenarray;
 $3 = $equmode;
 $4 = $level;
 $5 = HEAP32[(616)>>2]|0;
 $old_tokencount = $5;
 $expanded = 1;
 $6 = $4;
 $7 = ($6|0)>=(20);
 if ($7) {
  $8 = (_EmitError(101)|0);
  $0 = $8;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 L4: while(1) {
  $9 = $expanded;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(1);
  $12 = $old_tokencount;
  if (!($11)) {
   label = 22;
   break;
  }
  $13 = (($12) + 1)|0;
  $i = $13;
  $14 = $1;
  $15 = $i;
  $16 = $2;
  $17 = (_Tokenize($14,$15,$16,1)|0);
  HEAP32[(616)>>2] = $17;
  $expanded = 0;
  while(1) {
   $18 = $i;
   $19 = HEAP32[(616)>>2]|0;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    continue L4;
   }
   $21 = $i;
   $22 = $2;
   $23 = (($22) + ($21<<4)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)==(8);
   if ($26) {
    $27 = $i;
    $28 = $2;
    $29 = (($28) + ($27<<4)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_SymFind($31)|0);
    $sym = $32;
    $33 = $sym;
    $34 = ($33|0)!=(0|0);
    if ($34) {
     $35 = $sym;
     $36 = ((($35)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(9);
     if ($38) {
      $39 = $sym;
      $40 = ((($39)) + 24|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = ($41&65535) >>> 1;
      $43 = $42 & 1;
      $44 = $43&255;
      $45 = $44&255;
      $46 = ($45|0)==(1);
      if ($46) {
       $47 = $sym;
       $48 = ((($47)) + 28|0);
       $49 = HEAP8[$48>>0]|0;
       $50 = ($49&255) >>> 1;
       $51 = $50 & 1;
       $52 = $51&255;
       $53 = ($52|0)==(1);
       if ($53) {
        $54 = $i;
        $55 = (($54) + 1)|0;
        $56 = $2;
        $57 = (($56) + ($55<<4)|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = $58&255;
        $60 = ($59|0)==(40);
        $61 = $3;
        $62 = ($61|0)==(0);
        $or$cond = $60 & $62;
        if ($or$cond) {
         label = 12;
         break;
        }
       }
      }
     }
    }
    $92 = $sym;
    $93 = ($92|0)!=(0|0);
    if ($93) {
     $94 = $sym;
     $95 = ((($94)) + 16|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)==(10);
     if ($97) {
      $98 = $sym;
      $99 = ((($98)) + 24|0);
      $100 = HEAP16[$99>>1]|0;
      $101 = ($100&65535) >>> 1;
      $102 = $101 & 1;
      $103 = $102&255;
      $104 = $103&255;
      $105 = ($104|0)==(1);
      if ($105) {
       label = 18;
       break;
      }
     }
    }
   }
   $145 = $i;
   $146 = (($145) + 1)|0;
   $i = $146;
  }
  if ((label|0) == 12) {
   label = 0;
   $63 = $i;
   $64 = $2;
   $65 = (($64) + ($63<<4)|0);
   $66 = ((($65)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = $67;
   $70 = $68;
   $71 = (($69) - ($70))|0;
   $len = $71;
   $72 = $1;
   $73 = $len;
   _memcpy(($buffer|0),($72|0),($73|0))|0;
   $74 = $sym;
   $75 = $i;
   $76 = (($75) + 1)|0;
   $77 = $2;
   $78 = $len;
   $79 = (($buffer) + ($78)|0);
   $80 = (_RunMacro($74,$76,$77,$79,0,$is_exitm)|0);
   $i = $80;
   $81 = $i;
   $82 = ($81|0)<(0);
   if ($82) {
    label = 13;
    break;
   }
   $84 = $len;
   $85 = (($buffer) + ($84)|0);
   $86 = $i;
   $87 = $2;
   $88 = (($87) + ($86<<4)|0);
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   (_strcat($85,$90)|0);
   $91 = $1;
   (_strcpy($91,$buffer)|0);
   $expanded = 1;
   continue;
  }
  else if ((label|0) == 18) {
   label = 0;
   $106 = $i;
   $107 = $2;
   $108 = (($107) + ($106<<4)|0);
   $109 = ((($108)) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = $110;
   $113 = $111;
   $114 = (($112) - ($113))|0;
   $len = $114;
   $115 = $1;
   $116 = $len;
   _memcpy(($buffer|0),($115|0),($116|0))|0;
   $117 = $len;
   $118 = (($buffer) + ($117)|0);
   $119 = $sym;
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   (_strcpy($118,$121)|0);
   $122 = $len;
   $123 = (($buffer) + ($122)|0);
   $124 = $2;
   $125 = $3;
   $126 = $4;
   $127 = (($126) + 1)|0;
   $128 = (_ExpandTMacro($123,$124,$125,$127)|0);
   $129 = (-1)==($128|0);
   if ($129) {
    label = 19;
    break;
   }
   $131 = $i;
   $132 = $2;
   $133 = (($132) + ($131<<4)|0);
   $134 = ((($133)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $sym;
   $137 = ((($136)) + 44|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($135) + ($139)|0);
   $p = $140;
   $141 = $len;
   $142 = (($buffer) + ($141)|0);
   $143 = $p;
   (_strcat($142,$143)|0);
   $144 = $1;
   (_strcpy($144,$buffer)|0);
   $expanded = 1;
   continue;
  }
 }
 if ((label|0) == 13) {
  $83 = $old_tokencount;
  HEAP32[(616)>>2] = $83;
  $0 = -1;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 else if ((label|0) == 19) {
  $130 = $old_tokencount;
  HEAP32[(616)>>2] = $130;
  $0 = -1;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 else if ((label|0) == 22) {
  HEAP32[(616)>>2] = $12;
  $0 = 0;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 return (0)|0;
}
function _SkipMacro($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 8|0;
 $0 = $tokenarray;
 while(1) {
  $1 = (_GetTextLine($buffer)|0);
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  (_Tokenize($buffer,0,$3,0)|0);
 }
 STACKTOP = sp;return;
}
function _ExpandToken($line,$pi,$tokenarray,$max,$bracket_flags,$equmode) {
 $line = $line|0;
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 $max = $max|0;
 $bracket_flags = $bracket_flags|0;
 $equmode = $equmode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addbrackets = 0, $buffer = 0, $evaluate = 0;
 var $i = 0, $is_exitm = 0, $old_tokencount = 0, $opndx = 0, $or$cond = 0, $or$cond3 = 0, $pos = 0, $rc = 0, $size = 0, $sym = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 96|0;
 $is_exitm = sp + 736|0;
 $opndx = sp;
 $buffer = sp + 136|0;
 $1 = $line;
 $2 = $pi;
 $3 = $tokenarray;
 $4 = $max;
 $5 = $bracket_flags;
 $6 = $equmode;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $i = $8;
 $9 = $5;
 $addbrackets = $9;
 $evaluate = 0;
 $rc = 0;
 L1: while(1) {
  $10 = $i;
  $11 = $4;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $13 = $i;
   $14 = $3;
   $15 = (($14) + ($13<<4)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($17|0)!=(44);
   $336 = $18;
  } else {
   $336 = 0;
  }
  $19 = $i;
  if (!($336)) {
   label = 51;
   break;
  }
  $20 = $3;
  $21 = (($20) + ($19<<4)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(37);
  $25 = $addbrackets;
  $26 = ($25|0)!=(0);
  $or$cond = $24 & $26;
  if ($or$cond) {
   $27 = $evaluate;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(0);
   if ($29) {
    $evaluate = 1;
    $addbrackets = 0;
    $6 = 0;
    $30 = $i;
    $pos = $30;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  do {
   if ((label|0) == 8) {
    label = 0;
    $31 = $i;
    $32 = $3;
    $33 = (($32) + ($31<<4)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = ($35|0)==(8);
    if ($36) {
     $37 = $i;
     $38 = $3;
     $39 = (($38) + ($37<<4)|0);
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (_SymFind($41)|0);
     $sym = $42;
     $43 = $sym;
     $44 = ($43|0)!=(0|0);
     if ($44) {
      $45 = $sym;
      $46 = ((($45)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(9);
      if (!($48)) {
       $200 = $sym;
       $201 = ((($200)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(10);
       if (!($203)) {
        break;
       }
       $204 = $sym;
       $205 = ((($204)) + 8|0);
       $206 = HEAP32[$205>>2]|0;
       (_strcpy($buffer,$206)|0);
       $207 = $3;
       $208 = $6;
       $209 = (_ExpandTMacro($buffer,$207,$208,0)|0);
       $210 = (-1)==($209|0);
       if ($210) {
        label = 46;
        break L1;
       }
       $211 = $i;
       $212 = $3;
       $213 = $i;
       $214 = $3;
       $215 = (($214) + ($213<<4)|0);
       $216 = ((($215)) + 4|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = (_strlen($217)|0);
       $219 = $i;
       $220 = $3;
       $221 = (($220) + ($219<<4)|0);
       $222 = ((($221)) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $1;
       $225 = $223;
       $226 = $224;
       $227 = (($225) - ($226))|0;
       $228 = $addbrackets;
       $229 = (_RebuildLine($buffer,$211,$212,$218,$227,$228)|0);
       $230 = (-1)==($229|0);
       if ($230) {
        label = 48;
        break L1;
       }
       $rc = 1;
       break;
      }
      $49 = $i;
      HEAP32[$tmp>>2] = $49;
      $50 = $sym;
      $51 = ((($50)) + 28|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52&255) >>> 1;
      $54 = $53 & 1;
      $55 = $54&255;
      $56 = ($55|0)==(1);
      $57 = $i;
      if (!($56)) {
       $161 = ($57|0)==(0);
       if ($161) {
        label = 38;
        break L1;
       }
       $162 = $i;
       $163 = ($162|0)==(2);
       if ($163) {
        $164 = $3;
        $165 = ((($164)) + 16|0);
        $166 = HEAP8[$165>>0]|0;
        $167 = $166&255;
        $168 = ($167|0)==(58);
        if ($168) {
         label = 38;
         break L1;
        }
        $169 = $3;
        $170 = ((($169)) + 16|0);
        $171 = HEAP8[$170>>0]|0;
        $172 = $171&255;
        $173 = ($172|0)==(13);
        if ($173) {
         label = 38;
         break L1;
        }
       }
       $174 = $i;
       $175 = ($174|0)==(1);
       if (!($175)) {
        break;
       }
       $176 = $sym;
       $177 = ((($176)) + 28|0);
       $178 = HEAP8[$177>>0]|0;
       $179 = ($178&255) >>> 2;
       $180 = $179 & 1;
       $181 = $180&255;
       $182 = ($181|0)!=(0);
       if ($182) {
        label = 38;
        break L1;
       } else {
        break;
       }
      }
      $58 = (($57) + 1)|0;
      $59 = $3;
      $60 = (($59) + ($58<<4)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = ($62|0)!=(40);
      if (!($63)) {
       $64 = $i;
       $65 = (($64) + 1)|0;
       $i = $65;
       $66 = $6;
       $67 = ($66|0)==(1);
       if (!($67)) {
        $95 = $sym;
        $96 = $i;
        $97 = $3;
        $98 = HEAP32[$tmp>>2]|0;
        $99 = ($98|0)==(1);
        $100 = $99 ? 1 : 0;
        $101 = (_RunMacro($95,$96,$97,$buffer,$100,$is_exitm)|0);
        $i = $101;
        $102 = $i;
        $103 = ($102|0)==(-1);
        if ($103) {
         label = 23;
         break L1;
        }
        $104 = HEAP32[$tmp>>2]|0;
        $105 = ($104|0)==(0);
        $106 = $addbrackets;
        $107 = ($106|0)!=(0);
        $or$cond3 = $105 | $107;
        if (!($or$cond3)) {
         $108 = $3;
         $109 = $6;
         $110 = (_ExpandTMacro($buffer,$108,$109,0)|0);
         $111 = (-1)==($110|0);
         if ($111) {
          label = 26;
          break L1;
         }
        }
        $112 = $i;
        $113 = (($112) - 1)|0;
        $114 = $3;
        $115 = (($114) + ($113<<4)|0);
        $116 = ((($115)) + 12|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = ((($117)) + 1|0);
        $119 = HEAP32[$tmp>>2]|0;
        $120 = $3;
        $121 = (($120) + ($119<<4)|0);
        $122 = ((($121)) + 12|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = $118;
        $125 = $123;
        $126 = (($124) - ($125))|0;
        $size = $126;
        $127 = $3;
        $128 = HEAP32[$tmp>>2]|0;
        $129 = (($128) + 1)|0;
        $130 = HEAP32[$tmp>>2]|0;
        $131 = (($130) + 1)|0;
        $132 = $i;
        $133 = (($131) - ($132))|0;
        $134 = HEAP32[(616)>>2]|0;
        _AddTokens($127,$129,$133,$134);
        $135 = HEAP32[$tmp>>2]|0;
        $136 = (($135) + 1)|0;
        $137 = $i;
        $138 = (($136) - ($137))|0;
        $139 = HEAP32[(616)>>2]|0;
        $140 = (($139) + ($138))|0;
        HEAP32[(616)>>2] = $140;
        $141 = HEAP32[(616)>>2]|0;
        $142 = $4;
        $143 = ($141|0)<($142|0);
        if ($143) {
         $144 = HEAP32[(616)>>2]|0;
         $4 = $144;
        }
        $145 = HEAP32[$tmp>>2]|0;
        $146 = $3;
        $147 = $size;
        $148 = HEAP32[$tmp>>2]|0;
        $149 = $3;
        $150 = (($149) + ($148<<4)|0);
        $151 = ((($150)) + 12|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = $1;
        $154 = $152;
        $155 = $153;
        $156 = (($154) - ($155))|0;
        $157 = $addbrackets;
        $158 = (_RebuildLine($buffer,$145,$146,$147,$156,$157)|0);
        $159 = (-1)==($158|0);
        if ($159) {
         label = 30;
         break L1;
        }
        $rc = 1;
        $160 = HEAP32[$tmp>>2]|0;
        $i = $160;
        break;
       }
       $68 = $i;
       $69 = (($68) + 1)|0;
       $i = $69;
       HEAP32[$tmp>>2] = 1;
       while(1) {
        $70 = $i;
        $71 = $4;
        $72 = ($70|0)<($71|0);
        if (!($72)) {
         break;
        }
        $73 = $i;
        $74 = $3;
        $75 = (($74) + ($73<<4)|0);
        $76 = HEAP8[$75>>0]|0;
        $77 = $76&255;
        $78 = ($77|0)==(40);
        if ($78) {
         $79 = HEAP32[$tmp>>2]|0;
         $80 = (($79) + 1)|0;
         HEAP32[$tmp>>2] = $80;
        } else {
         $81 = $i;
         $82 = $3;
         $83 = (($82) + ($81<<4)|0);
         $84 = HEAP8[$83>>0]|0;
         $85 = $84&255;
         $86 = ($85|0)==(41);
         if ($86) {
          $87 = HEAP32[$tmp>>2]|0;
          $88 = (($87) + -1)|0;
          HEAP32[$tmp>>2] = $88;
          $89 = HEAP32[$tmp>>2]|0;
          $90 = ($89|0)==(0);
          if ($90) {
           break;
          }
         }
        }
        $91 = $i;
        $92 = (($91) + 1)|0;
        $i = $92;
       }
       $93 = $i;
       $94 = (($93) + -1)|0;
       $i = $94;
      }
     }
    }
   }
  } while(0);
  $231 = $i;
  $232 = (($231) + 1)|0;
  $i = $232;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 26) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 30) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 38) {
  $183 = $i;
  $184 = ($183|0)==(2);
  if ($184) {
   $185 = $1;
   $186 = $3;
   $187 = (_WriteCodeLabel($185,$186)|0);
   $188 = (-1)==($187|0);
   if ($188) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
  }
  $189 = $sym;
  $190 = $i;
  $191 = (($190) + 1)|0;
  $192 = $3;
  $193 = $i;
  $194 = ($193|0)==(1);
  $195 = $194 ? 1 : 0;
  $196 = 2 | $195;
  $197 = (_RunMacro($189,$191,$192,0,$196,$is_exitm)|0);
  $i = $197;
  $198 = $i;
  $199 = ($198|0)==(-1);
  if ($199) {
   $0 = -1;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  } else {
   $0 = -2;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
 }
 else if ((label|0) == 46) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 48) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 51) {
  $233 = $2;
  HEAP32[$233>>2] = $19;
  $234 = $evaluate;
  $235 = ($234<<24>>24)!=(0);
  do {
   if ($235) {
    $236 = HEAP32[(616)>>2]|0;
    $old_tokencount = $236;
    $237 = $i;
    $238 = $pos;
    $239 = (($238) + 1)|0;
    $240 = ($237|0)==($239|0);
    if ($240) {
     HEAP32[$opndx>>2] = 0;
     $241 = $pos;
     $i = $241;
    } else {
     $242 = $pos;
     $243 = (($242) + 1)|0;
     $pos = $243;
     $i = $242;
     $244 = $2;
     $245 = HEAP32[$244>>2]|0;
     $246 = $3;
     $247 = (($246) + ($245<<4)|0);
     $248 = ((($247)) + 12|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $pos;
     $251 = $3;
     $252 = (($251) + ($250<<4)|0);
     $253 = ((($252)) + 12|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = $249;
     $256 = $254;
     $257 = (($255) - ($256))|0;
     HEAP32[$tmp>>2] = $257;
     $258 = $pos;
     $259 = $3;
     $260 = (($259) + ($258<<4)|0);
     $261 = ((($260)) + 12|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = HEAP32[$tmp>>2]|0;
     _memcpy(($buffer|0),($262|0),($263|0))|0;
     $264 = HEAP32[$tmp>>2]|0;
     $265 = (($buffer) + ($264)|0);
     HEAP8[$265>>0] = 0;
     $266 = $old_tokencount;
     $267 = (($266) + 1)|0;
     HEAP32[$tmp>>2] = $267;
     $268 = HEAP32[$tmp>>2]|0;
     $269 = $3;
     $270 = (_Tokenize($buffer,$268,$269,1)|0);
     HEAP32[(616)>>2] = $270;
     $271 = $3;
     $272 = HEAP32[(616)>>2]|0;
     $273 = (_EvalOperand($tmp,$271,$272,$opndx,2)|0);
     $274 = ($273|0)==(-1);
     if ($274) {
      HEAP32[$opndx>>2] = 0;
     } else {
      $275 = ((($opndx)) + 40|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = ($276|0)!=(0);
      if ($277) {
       (_EmitError(65)|0);
       HEAP32[$opndx>>2] = 0;
      }
     }
     $278 = $old_tokencount;
     HEAP32[(616)>>2] = $278;
    }
    $279 = HEAP32[$opndx>>2]|0;
    $280 = HEAP32[(612)>>2]|0;
    $281 = HEAP8[(548)>>0]|0;
    $282 = $281&255;
    (_myltoa($279,$280,$282,0,0)|0);
    $283 = $2;
    $284 = HEAP32[$283>>2]|0;
    $285 = $3;
    $286 = (($285) + ($284<<4)|0);
    $287 = ((($286)) + 12|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $i;
    $290 = $3;
    $291 = (($290) + ($289<<4)|0);
    $292 = ((($291)) + 12|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $288;
    $295 = $293;
    $296 = (($294) - ($295))|0;
    HEAP32[$tmp>>2] = $296;
    $297 = HEAP32[(612)>>2]|0;
    $298 = $i;
    $299 = $3;
    $300 = (($299) + ($298<<4)|0);
    $301 = ((($300)) + 4|0);
    HEAP32[$301>>2] = $297;
    $302 = $3;
    $303 = $i;
    $304 = (($303) + 1)|0;
    $305 = $i;
    $306 = (($305) + 1)|0;
    $307 = $2;
    $308 = HEAP32[$307>>2]|0;
    $309 = (($306) - ($308))|0;
    $310 = HEAP32[(616)>>2]|0;
    _AddTokens($302,$304,$309,$310);
    $311 = $i;
    $312 = (($311) + 1)|0;
    $313 = $2;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) - ($314))|0;
    $316 = HEAP32[(616)>>2]|0;
    $317 = (($316) + ($315))|0;
    HEAP32[(616)>>2] = $317;
    $318 = HEAP32[(612)>>2]|0;
    $319 = $i;
    $320 = $3;
    $321 = HEAP32[$tmp>>2]|0;
    $322 = $i;
    $323 = $3;
    $324 = (($323) + ($322<<4)|0);
    $325 = ((($324)) + 12|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = $1;
    $328 = $326;
    $329 = $327;
    $330 = (($328) - ($329))|0;
    $331 = $5;
    $332 = (_RebuildLine($318,$319,$320,$321,$330,$331)|0);
    $333 = (-1)==($332|0);
    if (!($333)) {
     $rc = 1;
     break;
    }
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
  } while(0);
  $334 = $rc;
  $0 = $334;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 return (0)|0;
}
function _AddTokens($tokenarray,$start,$count,$end) {
 $tokenarray = $tokenarray|0;
 $start = $start|0;
 $count = $count|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tokenarray;
 $1 = $start;
 $2 = $count;
 $3 = $end;
 $4 = $2;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $3;
  $i = $6;
  while(1) {
   $7 = $i;
   $8 = $1;
   $9 = ($7|0)>=($8|0);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = $2;
   $12 = (($10) + ($11))|0;
   $13 = $0;
   $14 = (($13) + ($12<<4)|0);
   $15 = $i;
   $16 = $0;
   $17 = (($16) + ($15<<4)|0);
   ;HEAP32[$14>>2]=HEAP32[$17>>2]|0;HEAP32[$14+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$17+12>>2]|0;
   $18 = $i;
   $19 = (($18) + -1)|0;
   $i = $19;
  }
  STACKTOP = sp;return;
 }
 $20 = $2;
 $21 = ($20|0)<(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = $2;
 $24 = (($22) - ($23))|0;
 $i = $24;
 while(1) {
  $25 = $i;
  $26 = $3;
  $27 = ($25|0)<=($26|0);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = $2;
  $30 = (($28) + ($29))|0;
  $31 = $0;
  $32 = (($31) + ($30<<4)|0);
  $33 = $i;
  $34 = $0;
  $35 = (($34) + ($33<<4)|0);
  ;HEAP32[$32>>2]=HEAP32[$35>>2]|0;HEAP32[$32+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$35+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$35+12>>2]|0;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 STACKTOP = sp;return;
}
function _RebuildLine($newstring,$i,$tokenarray,$oldlen,$pos_line,$addbrackets) {
 $newstring = $newstring|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $oldlen = $oldlen|0;
 $pos_line = $pos_line|0;
 $addbrackets = $addbrackets|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $dest = 0, $newlen = 0, $rest = 0, $src = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 48|0;
 $1 = $newstring;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $oldlen;
 $5 = $pos_line;
 $6 = $addbrackets;
 $7 = $2;
 $8 = $3;
 $9 = (($8) + ($7<<4)|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = (($11) + ($12)|0);
 $14 = (_strlen($13)|0);
 $15 = (($14) + 1)|0;
 $rest = $15;
 $16 = $2;
 $17 = $3;
 $18 = (($17) + ($16<<4)|0);
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $dest = $20;
 $21 = $dest;
 $22 = $4;
 $23 = (($21) + ($22)|0);
 $24 = $rest;
 _memcpy(($buffer|0),($23|0),($24|0))|0;
 $25 = $1;
 $26 = (_strlen($25)|0);
 $newlen = $26;
 $27 = $6;
 $28 = ($27|0)!=(0);
 L1: do {
  if ($28) {
   $29 = $newlen;
   $30 = (($29) + 2)|0;
   $newlen = $30;
   $31 = $1;
   $src = $31;
   while(1) {
    $32 = $src;
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)!=(0);
    if (!($34)) {
     break L1;
    }
    $35 = $src;
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(60);
    if ($38) {
     label = 7;
    } else {
     $39 = $src;
     $40 = HEAP8[$39>>0]|0;
     $41 = $40 << 24 >> 24;
     $42 = ($41|0)==(62);
     if ($42) {
      label = 7;
     } else {
      $43 = $src;
      $44 = HEAP8[$43>>0]|0;
      $45 = $44 << 24 >> 24;
      $46 = ($45|0)==(33);
      if ($46) {
       label = 7;
      }
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $47 = $newlen;
     $48 = (($47) + 1)|0;
     $newlen = $48;
    }
    $49 = $src;
    $50 = ((($49)) + 1|0);
    $src = $50;
   }
  }
 } while(0);
 $51 = $newlen;
 $52 = $4;
 $53 = ($51>>>0)>($52>>>0);
 if ($53) {
  $54 = $5;
  $55 = $newlen;
  $56 = (($54) + ($55))|0;
  $57 = $4;
  $58 = (($56) - ($57))|0;
  $59 = $rest;
  $60 = (($58) + ($59))|0;
  $61 = ($60>>>0)>=(600);
  if ($61) {
   $62 = $3;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$vararg_buffer>>2] = $64;
   $65 = (_EmitErr(90,$vararg_buffer)|0);
   $0 = $65;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
 }
 $66 = $6;
 $67 = ($66|0)!=(0);
 $68 = $dest;
 if ($67) {
  $69 = ((($68)) + 1|0);
  $dest = $69;
  HEAP8[$68>>0] = 60;
  $70 = $1;
  $src = $70;
  while(1) {
   $71 = $src;
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)!=(0);
   if (!($73)) {
    break;
   }
   $74 = $src;
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = ($76|0)==(60);
   if ($77) {
    label = 18;
   } else {
    $78 = $src;
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)==(62);
    if ($81) {
     label = 18;
    } else {
     $82 = $src;
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = ($84|0)==(33);
     if ($85) {
      label = 18;
     }
    }
   }
   if ((label|0) == 18) {
    label = 0;
    $86 = $dest;
    $87 = ((($86)) + 1|0);
    $dest = $87;
    HEAP8[$86>>0] = 33;
   }
   $88 = $src;
   $89 = HEAP8[$88>>0]|0;
   $90 = $dest;
   $91 = ((($90)) + 1|0);
   $dest = $91;
   HEAP8[$90>>0] = $89;
   $92 = $src;
   $93 = ((($92)) + 1|0);
   $src = $93;
  }
  $94 = $dest;
  $95 = ((($94)) + 1|0);
  $dest = $95;
  HEAP8[$94>>0] = 62;
 } else {
  $96 = $1;
  $97 = $newlen;
  _memcpy(($68|0),($96|0),($97|0))|0;
  $98 = $newlen;
  $99 = $dest;
  $100 = (($99) + ($98)|0);
  $dest = $100;
 }
 $101 = $dest;
 $102 = $rest;
 _memcpy(($101|0),($buffer|0),($102|0))|0;
 $103 = $2;
 $104 = (($103) + 1)|0;
 $2 = $104;
 while(1) {
  $105 = $2;
  $106 = HEAP32[(616)>>2]|0;
  $107 = ($105|0)<=($106|0);
  if (!($107)) {
   break;
  }
  $108 = $2;
  $109 = $3;
  $110 = (($109) + ($108<<4)|0);
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $4;
  $114 = (0 - ($113))|0;
  $115 = (($112) + ($114)|0);
  $116 = $newlen;
  $117 = (($115) + ($116)|0);
  $118 = $2;
  $119 = $3;
  $120 = (($119) + ($118<<4)|0);
  $121 = ((($120)) + 12|0);
  HEAP32[$121>>2] = $117;
  $122 = $2;
  $123 = (($122) + 1)|0;
  $2 = $123;
 }
 $0 = 0;
 $124 = $0;
 STACKTOP = sp;return ($124|0);
}
function _myatoi128($src,$dst,$base,$size) {
 $src = $src|0;
 $dst = $dst|0;
 $base = $base|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $len = 0, $px = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $base;
 $3 = $size;
 $4 = $0;
 $5 = $3;
 $6 = (($4) + ($5)|0);
 $end = $6;
 $7 = $1;
 $8 = $7;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 while(1) {
  $18 = $0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)<=(57);
  $22 = $0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  if ($21) {
   $25 = (($24) - 48)|0;
   $29 = $25;
  } else {
   $26 = $24 | 32;
   $27 = (($26) - 97)|0;
   $28 = (($27) + 10)|0;
   $29 = $28;
  }
  $val = $29;
  $30 = $1;
  $px = $30;
  $len = 8;
  while(1) {
   $31 = $len;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    break;
   }
   $33 = $px;
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = $2;
   $37 = Math_imul($35, $36)|0;
   $38 = $val;
   $39 = (($38) + ($37))|0;
   $val = $39;
   $40 = $val;
   $41 = $40&65535;
   $42 = $px;
   $43 = ((($42)) + 2|0);
   $px = $43;
   HEAP16[$42>>1] = $41;
   $44 = $val;
   $45 = $44 >>> 16;
   $val = $45;
   $46 = $len;
   $47 = (($46) + -1)|0;
   $len = $47;
  }
  $48 = $0;
  $49 = ((($48)) + 1|0);
  $0 = $49;
  $50 = $0;
  $51 = $end;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _EvalOperand($start_tok,$tokenarray,$end_tok,$result,$flags) {
 $start_tok = $start_tok|0;
 $tokenarray = $tokenarray|0;
 $end_tok = $end_tok|0;
 $result = $result|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $start_tok;
 $2 = $tokenarray;
 $3 = $end_tok;
 $4 = $result;
 $5 = $flags;
 $6 = $4;
 _init_expr($6);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $i = $8;
 while(1) {
  $9 = $i;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = $2;
  $14 = (($13) + ($12<<4)|0);
  $15 = (_is_expr_item($14)|0);
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 $20 = $i;
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)==($22|0);
 if ($23) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $5;
  $25 = $24&255;
  $26 = $25 & 1;
  $27 = ($26|0)!=(0);
  $28 = $27 ? 215 : 216;
  HEAP32[8976>>2] = $28;
  $29 = $4;
  $30 = $1;
  $31 = $2;
  $32 = $i;
  $33 = $5;
  $34 = (_evaluate($29,$30,$31,$32,$33)|0);
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _EmitConstError($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $opnd;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)!=(0);
 $10 = ($8|0)!=(0);
 $11 = $9 | $10;
 $12 = $0;
 if ($11) {
  $13 = ((($12)) + 8|0);
  $14 = $13;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $vararg_buffer;
  $28 = $27;
  HEAP32[$28>>2] = $16;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $19;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  $31 = $vararg_ptr1;
  $32 = $31;
  HEAP32[$32>>2] = $23;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $26;
  (_EmitErr(272,$vararg_buffer)|0);
  STACKTOP = sp;return -1;
 } else {
  $35 = $12;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = $vararg_buffer2;
  $42 = $41;
  HEAP32[$42>>2] = $37;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $40;
  (_EmitErr(235,$vararg_buffer2)|0);
  STACKTOP = sp;return -1;
 }
 return (0)|0;
}
function _ExprEvalInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8980>>2] = 0;
 HEAP32[8984>>2] = 0;
 HEAP32[8988>>2] = 0;
 return;
}
function _init_expr($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $0;
 $17 = ((($16)) + 28|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = ((($18)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = ((($20)) + 36|0);
 HEAP32[$21>>2] = -2;
 $22 = $0;
 $23 = ((($22)) + 40|0);
 HEAP32[$23>>2] = -2;
 $24 = $0;
 $25 = ((($24)) + 44|0);
 HEAP32[$25>>2] = 192;
 $26 = $0;
 $27 = ((($26)) + 48|0);
 HEAP8[$27>>0] = 0;
 $28 = $0;
 $29 = ((($28)) + 49|0);
 HEAP8[$29>>0] = -2;
 $30 = $0;
 $31 = ((($30)) + 52|0);
 HEAP8[$31>>0] = 0;
 $32 = $0;
 $33 = ((($32)) + 56|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = ((($34)) + 60|0);
 HEAP32[$35>>2] = 0;
 $36 = $0;
 $37 = ((($36)) + 64|0);
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function _is_expr_item($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $item;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 L1: do {
  switch ($4|0) {
  case 1:  {
   $5 = $1;
   $6 = ((($5)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   switch ($7|0) {
   case 438: case 437:  {
    $8 = $1;
    HEAP8[$8>>0] = 5;
    $9 = $1;
    $10 = ((($9)) + 1|0);
    HEAP8[$10>>0] = 8;
    $0 = 1;
    break L1;
    break;
   }
   case 499:  {
    $11 = $1;
    HEAP8[$11>>0] = 4;
    $12 = $1;
    $13 = ((($12)) + 1|0);
    HEAP8[$13>>0] = 11;
    $0 = 1;
    break L1;
    break;
   }
   case 427:  {
    $14 = $1;
    HEAP8[$14>>0] = 5;
    $15 = $1;
    $16 = ((($15)) + 1|0);
    HEAP8[$16>>0] = 12;
    $0 = 1;
    break L1;
    break;
   }
   case 429: case 424:  {
    $17 = $1;
    HEAP8[$17>>0] = 5;
    $18 = $1;
    $19 = ((($18)) + 1|0);
    HEAP8[$19>>0] = 13;
    $0 = 1;
    break L1;
    break;
   }
   default: {
    $0 = 0;
    break L1;
   }
   }
   break;
  }
  case 7:  {
   $20 = $1;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(185);
   if ($23) {
    $0 = 0;
   } else {
    label = 13;
   }
   break;
  }
  case 3:  {
   $24 = $1;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(351);
   if ($27) {
    $28 = $1;
    HEAP8[$28>>0] = 6;
    $29 = HEAP32[(512)>>2]|0;
    $30 = 1 << $29;
    $31 = 112 & $30;
    $32 = ($31|0)!=(0);
    $33 = $32 ? 148 : 147;
    $34 = $1;
    $35 = ((($34)) + 8|0);
    HEAP32[$35>>2] = $33;
    $0 = 1;
   } else {
    label = 12;
   }
   break;
  }
  case 44:  {
   label = 12;
   break;
  }
  default: {
   label = 13;
  }
  }
 } while(0);
 if ((label|0) == 12) {
  $0 = 0;
 }
 else if ((label|0) == 13) {
  $0 = 1;
 }
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _noEmitErr($msg,$varargs) {
 $msg = $msg|0;
 $varargs = $varargs|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msg;
 STACKTOP = sp;return -1;
}
function _evaluate($opnd1,$i,$tokenarray,$end,$flags) {
 $opnd1 = $opnd1|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $end = $end|0;
 $flags = $flags|0;
 var $$old = 0, $$old8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $curr_operator = 0, $exp_token = 0, $opnd2 = 0, $or$cond = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $opnd2 = sp;
 $0 = $opnd1;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $end;
 $4 = $flags;
 $rc = 0;
 $5 = $0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(-2);
 if ($8) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($11) + ($10<<4)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(40);
  if (!($15)) {
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $19 = (($18) + ($17<<4)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)==(91);
   if (!($22)) {
    $23 = $1;
    $24 = HEAP32[$23>>2]|0;
    $25 = $2;
    $26 = (($25) + ($24<<4)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ($28|0)==(43);
    if (!($29)) {
     $30 = $1;
     $31 = HEAP32[$30>>2]|0;
     $32 = $2;
     $33 = (($32) + ($31<<4)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = ($35|0)==(45);
     if (!($36)) {
      $37 = $1;
      $38 = HEAP32[$37>>2]|0;
      $39 = $2;
      $40 = (($39) + ($38<<4)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)==(4);
      if (!($43)) {
       $44 = $0;
       $45 = $1;
       $46 = $2;
       $47 = $4;
       $48 = (_get_operand($44,$45,$46,$47)|0);
       $rc = $48;
      }
     }
    }
   }
  }
 }
 $$old = $rc;
 $$old8 = ($$old|0)==(0);
 if (!($$old8)) {
  $397 = $rc;
  STACKTOP = sp;return ($397|0);
 }
 L11: while(1) {
  $49 = $1;
  $50 = HEAP32[$49>>2]|0;
  $51 = $3;
  $52 = ($50|0)<($51|0);
  if (!($52)) {
   label = 68;
   break;
  }
  $53 = $1;
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  $56 = (($55) + ($54<<4)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)==(41);
  if ($59) {
   label = 68;
   break;
  }
  $60 = $1;
  $61 = HEAP32[$60>>2]|0;
  $62 = $2;
  $63 = (($62) + ($61<<4)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($65|0)==(93);
  $67 = $66 ^ 1;
  if (!($67)) {
   label = 68;
   break;
  }
  $68 = $1;
  $69 = HEAP32[$68>>2]|0;
  $curr_operator = $69;
  $70 = $0;
  $71 = ((($70)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)!=(-2);
  do {
   if ($73) {
    $74 = $curr_operator;
    $75 = $2;
    $76 = (($75) + ($74<<4)|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = ($78|0)==(43);
    if (!($79)) {
     $80 = $curr_operator;
     $81 = $2;
     $82 = (($81) + ($80<<4)|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = ($84|0)==(45);
     if (!($85)) {
      $90 = $curr_operator;
      $91 = $2;
      $92 = (($91) + ($90<<4)|0);
      $93 = HEAP8[$92>>0]|0;
      $94 = $93&255;
      $95 = ($94|0)>=(40);
      if (!($95)) {
       $96 = $curr_operator;
       $97 = $2;
       $98 = (($97) + ($96<<4)|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = $99&255;
       $101 = ($100|0)==(4);
       if (!($101)) {
        $102 = $curr_operator;
        $103 = $2;
        $104 = (($103) + ($102<<4)|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = ($106|0)==(5);
        if (!($107)) {
         label = 20;
         break L11;
        }
       }
      }
      $108 = $curr_operator;
      $109 = $2;
      $110 = (($109) + ($108<<4)|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = ($112|0)==(4);
      if ($113) {
       label = 20;
       break L11;
      } else {
       break;
      }
     }
    }
    $86 = $curr_operator;
    $87 = $2;
    $88 = (($87) + ($86<<4)|0);
    $89 = ((($88)) + 1|0);
    HEAP8[$89>>0] = 1;
   }
  } while(0);
  $123 = $1;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + 1)|0;
  HEAP32[$123>>2] = $125;
  _init_expr($opnd2);
  $126 = $0;
  $127 = $curr_operator;
  $128 = $2;
  $129 = (($128) + ($127<<4)|0);
  _PrepareOp($opnd2,$126,$129);
  $130 = $curr_operator;
  $131 = $2;
  $132 = (($131) + ($130<<4)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = ($134|0)==(40);
  do {
   if ($135) {
    label = 24;
   } else {
    $136 = $curr_operator;
    $137 = $2;
    $138 = (($137) + ($136<<4)|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139&255;
    $141 = ($140|0)==(91);
    if ($141) {
     label = 24;
    } else {
     $211 = $1;
     $212 = HEAP32[$211>>2]|0;
     $213 = $2;
     $214 = (($213) + ($212<<4)|0);
     $215 = HEAP8[$214>>0]|0;
     $216 = $215&255;
     $217 = ($216|0)==(40);
     if (!($217)) {
      $218 = $1;
      $219 = HEAP32[$218>>2]|0;
      $220 = $2;
      $221 = (($220) + ($219<<4)|0);
      $222 = HEAP8[$221>>0]|0;
      $223 = $222&255;
      $224 = ($223|0)==(91);
      if (!($224)) {
       $225 = $1;
       $226 = HEAP32[$225>>2]|0;
       $227 = $2;
       $228 = (($227) + ($226<<4)|0);
       $229 = HEAP8[$228>>0]|0;
       $230 = $229&255;
       $231 = ($230|0)==(43);
       if (!($231)) {
        $232 = $1;
        $233 = HEAP32[$232>>2]|0;
        $234 = $2;
        $235 = (($234) + ($233<<4)|0);
        $236 = HEAP8[$235>>0]|0;
        $237 = $236&255;
        $238 = ($237|0)==(45);
        if (!($238)) {
         $239 = $1;
         $240 = HEAP32[$239>>2]|0;
         $241 = $2;
         $242 = (($241) + ($240<<4)|0);
         $243 = HEAP8[$242>>0]|0;
         $244 = $243&255;
         $245 = ($244|0)==(4);
         if (!($245)) {
          $254 = $1;
          $255 = $2;
          $256 = $4;
          $257 = (_get_operand($opnd2,$254,$255,$256)|0);
          $rc = $257;
          break;
         }
        }
       }
      }
     }
     $246 = $1;
     $247 = $2;
     $248 = $3;
     $249 = $4;
     $250 = $249&255;
     $251 = $250 | 4;
     $252 = $251&255;
     $253 = (_evaluate($opnd2,$246,$247,$248,$252)|0);
     $rc = $253;
    }
   }
  } while(0);
  do {
   if ((label|0) == 24) {
    label = 0;
    $exp_token = 41;
    $142 = $curr_operator;
    $143 = $2;
    $144 = (($143) + ($142<<4)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = ($146|0)==(91);
    if ($147) {
     $exp_token = 93;
    } else {
     $148 = $0;
     $149 = ((($148)) + 52|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = ($150&255) >>> 7;
     $152 = $151&255;
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = $0;
      $155 = ((($154)) + 64|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ((($opnd2)) + 64|0);
      HEAP32[$157>>2] = $156;
      $158 = ((($opnd2)) + 52|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = $159 & 127;
      $161 = $160 | -128;
      HEAP8[$158>>0] = $161;
     }
    }
    $162 = $1;
    $163 = $2;
    $164 = $3;
    $165 = $4;
    $166 = $165&255;
    $167 = $exp_token;
    $168 = ($167|0)==(93);
    $169 = $168 ? 8 : 0;
    $170 = $166 | $169;
    $171 = $170 & -5;
    $172 = $171&255;
    $173 = (_evaluate($opnd2,$162,$163,$164,$172)|0);
    $rc = $173;
    $174 = $1;
    $175 = HEAP32[$174>>2]|0;
    $176 = $2;
    $177 = (($176) + ($175<<4)|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $180 = $exp_token;
    $181 = ($179|0)==($180|0);
    if ($181) {
     $208 = $1;
     $209 = HEAP32[$208>>2]|0;
     $210 = (($209) + 1)|0;
     HEAP32[$208>>2] = $210;
     break;
    }
    $182 = $rc;
    $183 = ($182|0)!=(-1);
    if ($183) {
     $184 = HEAP32[8976>>2]|0;
     (FUNCTION_TABLE_iii[$184 & 255](227,$vararg_buffer)|0);
     $185 = $1;
     $186 = HEAP32[$185>>2]|0;
     $187 = $2;
     $188 = (($187) + ($186<<4)|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = ($190|0)==(44);
     if ($191) {
      $192 = $0;
      $193 = ((($192)) + 56|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)!=(0|0);
      if ($195) {
       $196 = $0;
       $197 = ((($196)) + 56|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = ((($198)) + 16|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)==(0);
       if ($201) {
        $202 = HEAP32[8976>>2]|0;
        $203 = $0;
        $204 = ((($203)) + 56|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = ((($205)) + 4|0);
        $207 = HEAP32[$206>>2]|0;
        HEAP32[$vararg_buffer9>>2] = $207;
        (FUNCTION_TABLE_iii[$202 & 255](102,$vararg_buffer9)|0);
       }
      }
     }
    }
    $rc = -1;
   }
  } while(0);
  while(1) {
   $258 = $rc;
   $259 = ($258|0)!=(-1);
   if (!($259)) {
    break;
   }
   $260 = $1;
   $261 = HEAP32[$260>>2]|0;
   $262 = $3;
   $263 = ($261|0)<($262|0);
   if (!($263)) {
    break;
   }
   $264 = $1;
   $265 = HEAP32[$264>>2]|0;
   $266 = $2;
   $267 = (($266) + ($265<<4)|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268&255;
   $270 = ($269|0)==(41);
   if ($270) {
    break;
   }
   $271 = $1;
   $272 = HEAP32[$271>>2]|0;
   $273 = $2;
   $274 = (($273) + ($272<<4)|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = $275&255;
   $277 = ($276|0)==(93);
   $278 = $277 ^ 1;
   if (!($278)) {
    break;
   }
   $279 = $1;
   $280 = HEAP32[$279>>2]|0;
   $281 = $2;
   $282 = (($281) + ($280<<4)|0);
   $283 = HEAP8[$282>>0]|0;
   $284 = $283&255;
   $285 = ($284|0)==(43);
   if ($285) {
    label = 49;
   } else {
    $286 = $1;
    $287 = HEAP32[$286>>2]|0;
    $288 = $2;
    $289 = (($288) + ($287<<4)|0);
    $290 = HEAP8[$289>>0]|0;
    $291 = $290&255;
    $292 = ($291|0)==(45);
    if ($292) {
     label = 49;
    } else {
     $298 = $1;
     $299 = HEAP32[$298>>2]|0;
     $300 = $2;
     $301 = (($300) + ($299<<4)|0);
     $302 = HEAP8[$301>>0]|0;
     $303 = $302&255;
     $304 = ($303|0)>=(40);
     if (!($304)) {
      $305 = $1;
      $306 = HEAP32[$305>>2]|0;
      $307 = $2;
      $308 = (($307) + ($306<<4)|0);
      $309 = HEAP8[$308>>0]|0;
      $310 = $309&255;
      $311 = ($310|0)==(4);
      if (!($311)) {
       $312 = $1;
       $313 = HEAP32[$312>>2]|0;
       $314 = $2;
       $315 = (($314) + ($313<<4)|0);
       $316 = HEAP8[$315>>0]|0;
       $317 = $316&255;
       $318 = ($317|0)==(5);
       if (!($318)) {
        label = 54;
        break;
       }
      }
     }
     $319 = $1;
     $320 = HEAP32[$319>>2]|0;
     $321 = $2;
     $322 = (($321) + ($320<<4)|0);
     $323 = HEAP8[$322>>0]|0;
     $324 = $323&255;
     $325 = ($324|0)==(4);
     if ($325) {
      label = 54;
      break;
     }
    }
   }
   if ((label|0) == 49) {
    label = 0;
    $293 = $1;
    $294 = HEAP32[$293>>2]|0;
    $295 = $2;
    $296 = (($295) + ($294<<4)|0);
    $297 = ((($296)) + 1|0);
    HEAP8[$297>>0] = 1;
   }
   $335 = $1;
   $336 = HEAP32[$335>>2]|0;
   $337 = $2;
   $338 = (($337) + ($336<<4)|0);
   $339 = (_get_precedence($338)|0);
   $340 = $curr_operator;
   $341 = $2;
   $342 = (($341) + ($340<<4)|0);
   $343 = (_get_precedence($342)|0);
   $344 = ($339|0)>=($343|0);
   if ($344) {
    break;
   }
   $345 = $1;
   $346 = $2;
   $347 = $3;
   $348 = $4;
   $349 = $348&255;
   $350 = $349 | 4;
   $351 = $350&255;
   $352 = (_evaluate($opnd2,$345,$346,$347,$351)|0);
   $rc = $352;
  }
  if ((label|0) == 54) {
   label = 0;
   $rc = -1;
   $326 = ((($opnd2)) + 52|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = ($327&255) >>> 4;
   $329 = $328 & 1;
   $330 = $329&255;
   $331 = ($330|0)!=(0);
   if (!($331)) {
    $332 = $1;
    $333 = HEAP32[$332>>2]|0;
    $334 = $2;
    _OperErr($333,$334);
   }
  }
  $353 = $rc;
  $354 = ($353|0)==(-1);
  if ($354) {
   $355 = ((($opnd2)) + 52|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = ($356&255) >>> 4;
   $358 = $357 & 1;
   $359 = $358&255;
   $360 = ($359|0)!=(0);
   if ($360) {
    while(1) {
     $361 = $1;
     $362 = HEAP32[$361>>2]|0;
     $363 = $3;
     $364 = ($362|0)<($363|0);
     if (!($364)) {
      break;
     }
     $365 = $1;
     $366 = HEAP32[$365>>2]|0;
     $367 = $2;
     $368 = (($367) + ($366<<4)|0);
     $369 = HEAP8[$368>>0]|0;
     $370 = $369&255;
     $371 = ($370|0)==(41);
     if ($371) {
      break;
     }
     $372 = $1;
     $373 = HEAP32[$372>>2]|0;
     $374 = $2;
     $375 = (($374) + ($373<<4)|0);
     $376 = HEAP8[$375>>0]|0;
     $377 = $376&255;
     $378 = ($377|0)==(93);
     $379 = $378 ^ 1;
     if (!($379)) {
      break;
     }
     $380 = $1;
     $381 = HEAP32[$380>>2]|0;
     $382 = (($381) + 1)|0;
     HEAP32[$380>>2] = $382;
    }
    $383 = ((($opnd2)) + 40|0);
    HEAP32[$383>>2] = -2;
    $rc = 0;
   }
  }
  $384 = $rc;
  $385 = ($384|0)!=(-1);
  if ($385) {
   $386 = $0;
   $387 = $curr_operator;
   $388 = $2;
   $389 = (($388) + ($387<<4)|0);
   $390 = (_calculate($386,$opnd2,$389)|0);
   $rc = $390;
  }
  $391 = $4;
  $392 = $391&255;
  $393 = $392 & 4;
  $394 = ($393|0)==(0);
  $395 = $rc;
  $396 = ($395|0)==(0);
  $or$cond = $394 & $396;
  if (!($or$cond)) {
   label = 68;
   break;
  }
 }
 if ((label|0) == 20) {
  $rc = -1;
  $114 = $0;
  $115 = ((($114)) + 52|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116&255) >>> 4;
  $118 = $117 & 1;
  $119 = $118&255;
  $120 = ($119|0)!=(0);
  if ($120) {
   $397 = $rc;
   STACKTOP = sp;return ($397|0);
  }
  $121 = $curr_operator;
  $122 = $2;
  _OperErr($121,$122);
  $397 = $rc;
  STACKTOP = sp;return ($397|0);
 }
 else if ((label|0) == 68) {
  $397 = $rc;
  STACKTOP = sp;return ($397|0);
 }
 return (0)|0;
}
function _get_operand($opnd,$idx,$tokenarray,$flags) {
 $opnd = $opnd|0;
 $idx = $idx|0;
 $tokenarray = $tokenarray|0;
 $flags = $flags|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $j = 0, $labelbuff = 0, $sym = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr24 = 0, $vararg_ptr33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer57 = sp + 128|0;
 $vararg_buffer53 = sp + 120|0;
 $vararg_buffer50 = sp + 112|0;
 $vararg_buffer46 = sp + 104|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer35 = sp + 80|0;
 $vararg_buffer30 = sp + 72|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $labelbuff = sp + 168|0;
 $1 = $opnd;
 $2 = $idx;
 $3 = $tokenarray;
 $4 = $flags;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $i = $6;
 $7 = $i;
 $8 = $3;
 $9 = (($8) + ($7<<4)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 L1: do {
  switch ($11|0) {
  case 10:  {
   $12 = $1;
   $13 = ((($12)) + 40|0);
   HEAP32[$13>>2] = 0;
   $14 = $i;
   $15 = $3;
   $16 = (($15) + ($14<<4)|0);
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $1;
   $20 = $i;
   $21 = $3;
   $22 = (($21) + ($20<<4)|0);
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = $i;
   $27 = $3;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   _myatoi128($18,$19,$25,$30);
   break;
  }
  case 9:  {
   $31 = $i;
   $32 = $3;
   $33 = (($32) + ($31<<4)|0);
   $34 = ((($33)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)!=(34);
   if ($37) {
    $38 = $i;
    $39 = $3;
    $40 = (($39) + ($38<<4)|0);
    $41 = ((($40)) + 1|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = ($43|0)!=(39);
    if ($44) {
     $45 = $1;
     $46 = ((($45)) + 52|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ($47&255) >>> 4;
     $49 = $48 & 1;
     $50 = $49&255;
     $51 = ($50|0)!=(0);
     if ($51) {
      break L1;
     }
     $52 = $i;
     $53 = $3;
     $54 = (($53) + ($52<<4)|0);
     $55 = ((($54)) + 1|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = ($57|0)==(0);
     do {
      if ($58) {
       $59 = $i;
       $60 = $3;
       $61 = (($60) + ($59<<4)|0);
       $62 = ((($61)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = HEAP8[$63>>0]|0;
       $65 = $64 << 24 >> 24;
       $66 = ($65|0)==(34);
       if (!($66)) {
        $67 = $i;
        $68 = $3;
        $69 = (($68) + ($67<<4)|0);
        $70 = ((($69)) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = HEAP8[$71>>0]|0;
        $73 = $72 << 24 >> 24;
        $74 = ($73|0)==(39);
        if (!($74)) {
         label = 10;
         break;
        }
       }
       $75 = HEAP32[8976>>2]|0;
       (FUNCTION_TABLE_iii[$75 & 255](166,$vararg_buffer)|0);
      } else {
       label = 10;
      }
     } while(0);
     if ((label|0) == 10) {
      $76 = HEAP32[8976>>2]|0;
      $77 = $i;
      $78 = $3;
      $79 = (($78) + ($77<<4)|0);
      $80 = ((($79)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      HEAP32[$vararg_buffer2>>2] = $81;
      (FUNCTION_TABLE_iii[$76 & 255](151,$vararg_buffer2)|0);
     }
     $0 = -1;
     $876 = $0;
     STACKTOP = sp;return ($876|0);
    }
   }
   $82 = $1;
   $83 = ((($82)) + 40|0);
   HEAP32[$83>>2] = 0;
   $84 = $i;
   $85 = $3;
   $86 = (($85) + ($84<<4)|0);
   $87 = $1;
   $88 = ((($87)) + 16|0);
   HEAP32[$88>>2] = $86;
   $89 = $i;
   $90 = $3;
   $91 = (($90) + ($89<<4)|0);
   $92 = ((($91)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 1|0);
   $tmp = $94;
   $95 = $i;
   $96 = $3;
   $97 = (($96) + ($95<<4)|0);
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99>>>0)>(16);
   if ($100) {
    $106 = 16;
   } else {
    $101 = $i;
    $102 = $3;
    $103 = (($102) + ($101<<4)|0);
    $104 = ((($103)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105;
   }
   $j = $106;
   while(1) {
    $107 = $j;
    $108 = ($107|0)!=(0);
    if (!($108)) {
     break L1;
    }
    $109 = $tmp;
    $110 = ((($109)) + 1|0);
    $tmp = $110;
    $111 = HEAP8[$109>>0]|0;
    $112 = $j;
    $113 = (($112) - 1)|0;
    $114 = $1;
    $115 = (($114) + ($113)|0);
    HEAP8[$115>>0] = $111;
    $116 = $j;
    $117 = (($116) + -1)|0;
    $j = $117;
   }
   break;
  }
  case 2:  {
   $118 = $1;
   $119 = ((($118)) + 40|0);
   HEAP32[$119>>2] = 2;
   $120 = $i;
   $121 = $3;
   $122 = (($121) + ($120<<4)|0);
   $123 = $1;
   $124 = ((($123)) + 20|0);
   HEAP32[$124>>2] = $122;
   $125 = $i;
   $126 = $3;
   $127 = (($126) + ($125<<4)|0);
   $128 = ((($127)) + 8|0);
   $129 = HEAP32[$128>>2]|0;
   $j = $129;
   $130 = $j;
   $131 = (15660 + (($130*12)|0)|0);
   $132 = ((($131)) + 8|0);
   $133 = HEAP16[$132>>1]|0;
   $134 = $133&65535;
   $135 = $134 & 65280;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $j;
    $138 = (15660 + (($137*12)|0)|0);
    $139 = ((($138)) + 8|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = $140&65535;
    $142 = HEAP32[(544)>>2]|0;
    $143 = $141 & $142;
    $144 = $143 & 65280;
    $145 = ($144|0)==(0);
    if ($145) {
     label = 20;
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   if ((label|0) == 19) {
    $146 = HEAP32[(544)>>2]|0;
    $147 = $146 & 240;
    $148 = $j;
    $149 = (15660 + (($148*12)|0)|0);
    $150 = ((($149)) + 8|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = $151&65535;
    $153 = $152 & 240;
    $154 = ($147>>>0)<($153>>>0);
    if ($154) {
     label = 20;
    }
   }
   do {
    if ((label|0) == 20) {
     $155 = $4;
     $156 = $155&255;
     $157 = $156 & 8;
     $158 = ($157|0)!=(0);
     if ($158) {
      $159 = $1;
      $160 = ((($159)) + 40|0);
      HEAP32[$160>>2] = -1;
      $161 = HEAP32[8976>>2]|0;
      (FUNCTION_TABLE_iii[$161 & 255](30,$vararg_buffer5)|0);
      break;
     }
     $162 = HEAP32[8976>>2]|0;
     $163 = (FUNCTION_TABLE_iii[$162 & 255](30,$vararg_buffer8)|0);
     $0 = $163;
     $876 = $0;
     STACKTOP = sp;return ($876|0);
    }
   } while(0);
   $164 = $4;
   $165 = $164&255;
   $166 = $165 & 8;
   $167 = ($166|0)!=(0);
   if ($167) {
    $168 = $j;
    $169 = (15660 + (($168*12)|0)|0);
    $170 = ((($169)) + 4|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $171 & 32;
    $173 = ($172|0)!=(0);
    if ($173) {
     $174 = $1;
     $175 = ((($174)) + 52|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176 & -2;
     $178 = $177 | 1;
     HEAP8[$175>>0] = $178;
     $179 = $1;
     $180 = ((($179)) + 52|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181 & -65;
     $183 = $182 | 64;
     HEAP8[$180>>0] = $183;
     break L1;
    }
    $184 = $j;
    $185 = (15660 + (($184*12)|0)|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $186 & 6144;
    $188 = ($187|0)!=(0);
    if (!($188)) {
     $208 = $1;
     $209 = ((($208)) + 52|0);
     $210 = HEAP8[$209>>0]|0;
     $211 = ($210&255) >>> 4;
     $212 = $211 & 1;
     $213 = $212&255;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = $1;
      $216 = ((($215)) + 40|0);
      HEAP32[$216>>2] = -1;
      break L1;
     }
     $217 = HEAP32[8976>>2]|0;
     $218 = (FUNCTION_TABLE_iii[$217 & 255](33,$vararg_buffer14)|0);
     $0 = $218;
     $876 = $0;
     STACKTOP = sp;return ($876|0);
    }
    $189 = $i;
    $190 = (($189) + 1)|0;
    $191 = $3;
    $192 = (($191) + ($190<<4)|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $193&255;
    $195 = ($194|0)!=(58);
    if (!($195)) {
     $196 = HEAP8[(6083)>>0]|0;
     $197 = $196&255;
     $198 = ($197|0)!=(0);
     if (!($198)) {
      break L1;
     }
     $199 = $i;
     $200 = (($199) + 2)|0;
     $201 = $3;
     $202 = (($201) + ($200<<4)|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203&255;
     $205 = ($204|0)==(2);
     if (!($205)) {
      break L1;
     }
    }
    $206 = HEAP32[8976>>2]|0;
    $207 = (FUNCTION_TABLE_iii[$206 & 255](170,$vararg_buffer11)|0);
    $0 = $207;
    $876 = $0;
    STACKTOP = sp;return ($876|0);
   }
   break;
  }
  case 8:  {
   $219 = $i;
   $220 = $3;
   $221 = (($220) + ($219<<4)|0);
   $222 = ((($221)) + 4|0);
   $223 = HEAP32[$222>>2]|0;
   $tmp = $223;
   $224 = $1;
   $225 = ((($224)) + 52|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = ($226&255) >>> 7;
   $228 = $227&255;
   $229 = ($228|0)!=(0);
   do {
    if ($229) {
     $230 = $1;
     HEAP32[$230>>2] = 0;
     $231 = $1;
     $232 = ((($231)) + 64|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)!=(0|0);
     if ($234) {
      $235 = $1;
      $236 = ((($235)) + 64|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = $tmp;
      $239 = $1;
      $240 = (_SearchNameInStruct($237,$238,$239,0)|0);
      $241 = $240;
     } else {
      $241 = 0;
     }
     $sym = $241;
     $242 = $sym;
     $243 = ($242|0)==(0|0);
     if ($243) {
      $244 = $tmp;
      $245 = (_SymFind($244)|0);
      $sym = $245;
      $246 = $sym;
      $247 = ($246|0)!=(0|0);
      if ($247) {
       $248 = $sym;
       $249 = ((($248)) + 16|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==(7);
       if ($251) {
        $252 = $sym;
        $253 = $1;
        $254 = ((($253)) + 64|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = ($252|0)==($255|0);
        if ($256) {
         break;
        }
        $257 = $1;
        $258 = ((($257)) + 64|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = ($259|0)!=(0|0);
        if ($260) {
         $261 = $1;
         $262 = ((($261)) + 64|0);
         $263 = HEAP32[$262>>2]|0;
         $264 = ((($263)) + 24|0);
         $265 = HEAP16[$264>>1]|0;
         $266 = ($265&65535) >>> 1;
         $267 = $266 & 1;
         $268 = $267&255;
         $269 = $268&255;
         $270 = ($269|0)==(0);
         if ($270) {
          break;
         }
        }
        $271 = HEAP32[(560)>>2]|0;
        $272 = $271 >>> 8;
        $273 = $272 & 1;
        $274 = ($273|0)!=(0);
        if ($274) {
         break;
        }
        $sym = 0;
        break;
       } else {
        $275 = HEAP32[(560)>>2]|0;
        $276 = $275 >>> 8;
        $277 = $276 & 1;
        $278 = ($277|0)!=(0);
        if ($278) {
         $279 = $sym;
         $280 = ((($279)) + 16|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = ($281|0)==(6);
         if ($282) {
          break;
         }
         $283 = $sym;
         $284 = ((($283)) + 16|0);
         $285 = HEAP32[$284>>2]|0;
         $286 = ($285|0)==(2);
         if ($286) {
          break;
         }
         $287 = $sym;
         $288 = ((($287)) + 16|0);
         $289 = HEAP32[$288>>2]|0;
         $290 = ($289|0)==(1);
         if ($290) {
          break;
         }
        }
        $sym = 0;
        break;
       }
      }
     }
    } else {
     $291 = $tmp;
     $292 = HEAP8[$291>>0]|0;
     $293 = $292 << 24 >> 24;
     $294 = ($293|0)==(64);
     do {
      if ($294) {
       $295 = $tmp;
       $296 = ((($295)) + 2|0);
       $297 = HEAP8[$296>>0]|0;
       $298 = $297 << 24 >> 24;
       $299 = ($298|0)==(0);
       if ($299) {
        $300 = $tmp;
        $301 = ((($300)) + 1|0);
        $302 = HEAP8[$301>>0]|0;
        $303 = $302 << 24 >> 24;
        $304 = ($303|0)==(98);
        if (!($304)) {
         $305 = $tmp;
         $306 = ((($305)) + 1|0);
         $307 = HEAP8[$306>>0]|0;
         $308 = $307 << 24 >> 24;
         $309 = ($308|0)==(66);
         if (!($309)) {
          $311 = $tmp;
          $312 = ((($311)) + 1|0);
          $313 = HEAP8[$312>>0]|0;
          $314 = $313 << 24 >> 24;
          $315 = ($314|0)==(102);
          if (!($315)) {
           $316 = $tmp;
           $317 = ((($316)) + 1|0);
           $318 = HEAP8[$317>>0]|0;
           $319 = $318 << 24 >> 24;
           $320 = ($319|0)==(70);
           if (!($320)) {
            break;
           }
          }
          $321 = (_GetAnonymousLabel($labelbuff,1)|0);
          $tmp = $321;
          break;
         }
        }
        $310 = (_GetAnonymousLabel($labelbuff,0)|0);
        $tmp = $310;
       }
      }
     } while(0);
     $322 = $tmp;
     $323 = (_SymFind($322)|0);
     $sym = $323;
    }
   } while(0);
   $324 = $sym;
   $325 = ($324|0)==(0|0);
   do {
    if ($325) {
     label = 65;
    } else {
     $326 = $sym;
     $327 = ((($326)) + 16|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = ($328|0)==(0);
     if ($329) {
      label = 65;
     } else {
      $330 = $sym;
      $331 = ((($330)) + 16|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ($332|0)==(7);
      if ($333) {
       $334 = $sym;
       $335 = ((($334)) + 40|0);
       $336 = ((($335)) + 2|0);
       $337 = HEAP8[$336>>0]|0;
       $338 = $337&255;
       $339 = ($338|0)==(0);
       if ($339) {
        label = 65;
        break;
       }
      }
      $340 = $sym;
      $341 = ((($340)) + 16|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ($342|0)==(9);
      if ($343) {
       label = 65;
      } else {
       $344 = $sym;
       $345 = ((($344)) + 16|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($346|0)==(10);
       if ($347) {
        label = 65;
       } else {
        $446 = $sym;
        $447 = ((($446)) + 16|0);
        $448 = HEAP32[$447>>2]|0;
        $449 = ($448|0)==(8);
        if ($449) {
         $450 = $sym;
         $451 = ((($450)) + 8|0);
         $452 = HEAP32[$451>>2]|0;
         $sym = $452;
        }
       }
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     $348 = $1;
     $349 = ((($348)) + 52|0);
     $350 = HEAP8[$349>>0]|0;
     $351 = ($350&255) >>> 4;
     $352 = $351 & 1;
     $353 = $352&255;
     $354 = ($353|0)!=(0);
     if ($354) {
      $355 = $1;
      $356 = ((($355)) + 40|0);
      HEAP32[$356>>2] = -1;
      break L1;
     }
     $357 = $sym;
     $358 = ($357|0)!=(0|0);
     do {
      if ($358) {
       $359 = $sym;
       $360 = ((($359)) + 16|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(9);
       if (!($362)) {
        $363 = $sym;
        $364 = ((($363)) + 16|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($365|0)==(10);
        if (!($366)) {
         break;
        }
       }
       $367 = HEAP32[8976>>2]|0;
       $368 = $sym;
       $369 = ((($368)) + 4|0);
       $370 = HEAP32[$369>>2]|0;
       HEAP32[$vararg_buffer17>>2] = $370;
       (FUNCTION_TABLE_iii[$367 & 255](243,$vararg_buffer17)|0);
       $0 = -1;
       $876 = $0;
       STACKTOP = sp;return ($876|0);
      }
     } while(0);
     $371 = HEAP32[4884>>2]|0;
     $372 = ($371|0)==(0);
     if ($372) {
      $373 = $4;
      $374 = $373&255;
      $375 = $374 & 2;
      $376 = ($375|0)!=(0);
      if (!($376)) {
       $377 = $sym;
       $378 = ($377|0)==(0|0);
       if (!($378)) {
        break;
       }
       $379 = $1;
       $380 = ((($379)) + 64|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = ($381|0)==(0|0);
       if ($382) {
        $383 = $tmp;
        $384 = (_SymLookup($383)|0);
        $sym = $384;
        $385 = $sym;
        $386 = ((($385)) + 16|0);
        HEAP32[$386>>2] = 0;
        $387 = $sym;
        _sym_add_table(15404,$387);
        break;
       }
       $388 = $1;
       $389 = ((($388)) + 64|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = ((($390)) + 40|0);
       $392 = ((($391)) + 2|0);
       $393 = HEAP8[$392>>0]|0;
       $394 = $393&255;
       $395 = ($394|0)!=(0);
       if (!($395)) {
        $411 = HEAP32[8988>>2]|0;
        $412 = ($411|0)!=(0|0);
        if (!($412)) {
         $413 = (_SymAlloc(109841)|0);
         HEAP32[8988>>2] = $413;
        }
        $414 = HEAP32[8988>>2]|0;
        $415 = $1;
        $416 = ((($415)) + 60|0);
        HEAP32[$416>>2] = $414;
        $417 = $1;
        $418 = ((($417)) + 40|0);
        HEAP32[$418>>2] = 0;
        break L1;
       }
       $396 = $1;
       $397 = ((($396)) + 64|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = ((($398)) + 4|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = HEAP8[$400>>0]|0;
       $402 = ($401<<24>>24)!=(0);
       $403 = HEAP32[8976>>2]|0;
       if ($402) {
        $404 = $1;
        $405 = ((($404)) + 64|0);
        $406 = HEAP32[$405>>2]|0;
        $407 = ((($406)) + 4|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = $tmp;
        HEAP32[$vararg_buffer21>>2] = $408;
        $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
        HEAP32[$vararg_ptr24>>2] = $409;
        (FUNCTION_TABLE_iii[$403 & 255](63,$vararg_buffer21)|0);
       } else {
        $410 = $tmp;
        HEAP32[$vararg_buffer26>>2] = $410;
        (FUNCTION_TABLE_iii[$403 & 255](102,$vararg_buffer26)|0);
       }
       $0 = -1;
       $876 = $0;
       STACKTOP = sp;return ($876|0);
      }
     }
     $419 = $1;
     $420 = ((($419)) + 64|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ($421|0)!=(0|0);
     if ($422) {
      $423 = $1;
      $424 = ((($423)) + 64|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = ((($425)) + 4|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = HEAP8[$427>>0]|0;
      $429 = $428 << 24 >> 24;
      $430 = ($429|0)!=(0);
      if ($430) {
       $431 = HEAP32[8976>>2]|0;
       $432 = $1;
       $433 = ((($432)) + 64|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = ((($434)) + 4|0);
       $436 = HEAP32[$435>>2]|0;
       $437 = $tmp;
       HEAP32[$vararg_buffer30>>2] = $436;
       $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
       HEAP32[$vararg_ptr33>>2] = $437;
       (FUNCTION_TABLE_iii[$431 & 255](63,$vararg_buffer30)|0);
      } else {
       label = 87;
      }
     } else {
      label = 87;
     }
     if ((label|0) == 87) {
      $438 = HEAP32[8976>>2]|0;
      $439 = $tmp;
      $440 = ((($439)) + 1|0);
      $441 = HEAP8[$440>>0]|0;
      $442 = $441 << 24 >> 24;
      $443 = ($442|0)==(38);
      $444 = $tmp;
      $445 = $443 ? 87028 : $444;
      HEAP32[$vararg_buffer35>>2] = $445;
      (FUNCTION_TABLE_iii[$438 & 255](102,$vararg_buffer35)|0);
     }
     $0 = -1;
     $876 = $0;
     STACKTOP = sp;return ($876|0);
    }
   } while(0);
   $453 = $sym;
   $454 = ((($453)) + 24|0);
   $455 = HEAP16[$454>>1]|0;
   $456 = $455 & -2;
   $457 = $456 | 1;
   HEAP16[$454>>1] = $457;
   $458 = $sym;
   $459 = ((($458)) + 16|0);
   $460 = HEAP32[$459>>2]|0;
   switch ($460|0) {
   case 7:  {
    $461 = $sym;
    $462 = ((($461)) + 40|0);
    $463 = ((($462)) + 2|0);
    $464 = HEAP8[$463>>0]|0;
    $465 = $464&255;
    $466 = ($465|0)!=(3);
    if ($466) {
     $467 = $sym;
     $468 = ((($467)) + 60|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = ((($469)) + 9|0);
     $471 = HEAP8[$470>>0]|0;
     $472 = ($471&255) >>> 1;
     $473 = $472 & 1;
     $474 = $473&255;
     $475 = ($474|0)!=(0);
     if ($475) {
      $476 = $1;
      $477 = ((($476)) + 40|0);
      HEAP32[$477>>2] = -1;
      break L1;
     }
    }
    while(1) {
     $478 = $sym;
     $479 = ((($478)) + 52|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = ($480|0)!=(0|0);
     if (!($481)) {
      break;
     }
     $482 = $sym;
     $483 = ((($482)) + 52|0);
     $484 = HEAP32[$483>>2]|0;
     $sym = $484;
    }
    $485 = $1;
    $486 = ((($485)) + 40|0);
    HEAP32[$486>>2] = 0;
    $487 = $sym;
    $488 = ((($487)) + 20|0);
    $489 = HEAP32[$488>>2]|0;
    $490 = $1;
    $491 = ((($490)) + 44|0);
    HEAP32[$491>>2] = $489;
    $492 = $1;
    $493 = ((($492)) + 52|0);
    $494 = HEAP8[$493>>0]|0;
    $495 = $494 & -9;
    $496 = $495 | 8;
    HEAP8[$493>>0] = $496;
    $497 = $sym;
    $498 = $1;
    $499 = ((($498)) + 64|0);
    HEAP32[$499>>2] = $497;
    $500 = $sym;
    $501 = ((($500)) + 40|0);
    $502 = ((($501)) + 2|0);
    $503 = HEAP8[$502>>0]|0;
    $504 = $503&255;
    $505 = ($504|0)==(4);
    $506 = $sym;
    if ($505) {
     $507 = (_GetRecordMask($506)|0);
     $508 = tempRet0;
     $509 = $1;
     $510 = $509;
     $511 = $510;
     HEAP32[$511>>2] = $507;
     $512 = (($510) + 4)|0;
     $513 = $512;
     HEAP32[$513>>2] = $508;
     break L1;
    }
    $514 = ((($506)) + 20|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = $515 & 192;
    $517 = ($516|0)==(128);
    $518 = $sym;
    if (!($517)) {
     $539 = ((($518)) + 36|0);
     $540 = HEAP32[$539>>2]|0;
     $541 = $1;
     HEAP32[$541>>2] = $540;
     break L1;
    }
    $519 = ((($518)) + 20|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = ($520|0)==(128);
    $522 = $sym;
    if ($521) {
     $523 = ((($522)) + 36|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = $1;
     HEAP32[$525>>2] = $524;
     $526 = $sym;
     $527 = ((($526)) + 28|0);
     $528 = HEAP8[$527>>0]|0;
     $529 = $1;
     $530 = ((($529)) + 49|0);
     HEAP8[$530>>0] = $528;
     break L1;
    } else {
     $531 = ((($522)) + 20|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = $sym;
     $534 = ((($533)) + 28|0);
     $535 = HEAP8[$534>>0]|0;
     $536 = $535&255;
     $537 = (_GetTypeSize($532,$536)|0);
     $538 = $1;
     HEAP32[$538>>2] = $537;
     break L1;
    }
    break;
   }
   case 6:  {
    $542 = $sym;
    $543 = ((($542)) + 8|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $1;
    $546 = HEAP32[$545>>2]|0;
    $547 = (($546) + ($544))|0;
    HEAP32[$545>>2] = $547;
    $548 = $1;
    $549 = ((($548)) + 40|0);
    HEAP32[$549>>2] = 0;
    $550 = $sym;
    $551 = $1;
    $552 = ((($551)) + 60|0);
    HEAP32[$552>>2] = $550;
    while(1) {
     $553 = $sym;
     $554 = ((($553)) + 52|0);
     $555 = HEAP32[$554>>2]|0;
     $556 = ($555|0)!=(0|0);
     $557 = $sym;
     if (!($556)) {
      break;
     }
     $558 = ((($557)) + 52|0);
     $559 = HEAP32[$558>>2]|0;
     $sym = $559;
    }
    $560 = ((($557)) + 20|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = $1;
    $563 = ((($562)) + 44|0);
    HEAP32[$563>>2] = $561;
    $564 = $sym;
    $565 = ((($564)) + 16|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = ($566|0)==(7);
    if ($567) {
     $568 = $sym;
     $569 = ((($568)) + 40|0);
     $570 = ((($569)) + 2|0);
     $571 = HEAP8[$570>>0]|0;
     $572 = $571&255;
     $573 = ($572|0)!=(3);
     $574 = $sym;
     $$ = $573 ? $574 : 0;
     $577 = $$;
    } else {
     $577 = 0;
    }
    $575 = $1;
    $576 = ((($575)) + 64|0);
    HEAP32[$576>>2] = $577;
    break L1;
    break;
   }
   default: {
    $578 = $1;
    $579 = ((($578)) + 40|0);
    HEAP32[$579>>2] = 1;
    $580 = $sym;
    $581 = ((($580)) + 24|0);
    $582 = HEAP16[$581>>1]|0;
    $583 = ($582&65535) >>> 5;
    $584 = $583 & 1;
    $585 = $584&255;
    $586 = $585&255;
    $587 = ($586|0)!=(0);
    if ($587) {
     $588 = $sym;
     $589 = ((($588)) + 40|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($590|0)!=(0|0);
     if ($591) {
      $592 = $sym;
      $593 = ((($592)) + 40|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = $sym;
      FUNCTION_TABLE_vii[$594 & 255]($595,0);
     }
    }
    $596 = $sym;
    $597 = ((($596)) + 16|0);
    $598 = HEAP32[$597>>2]|0;
    $599 = ($598|0)==(1);
    if ($599) {
     $600 = $sym;
     $601 = ((($600)) + 12|0);
     $602 = HEAP32[$601>>2]|0;
     $603 = ($602|0)==(0|0);
     if ($603) {
      $604 = $1;
      $605 = ((($604)) + 40|0);
      HEAP32[$605>>2] = 0;
      $606 = $sym;
      $607 = ((($606)) + 8|0);
      $608 = HEAP32[$607>>2]|0;
      $609 = $1;
      HEAP32[$609>>2] = $608;
      $610 = $sym;
      $611 = ((($610)) + 36|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = $1;
      $614 = ((($613)) + 4|0);
      HEAP32[$614>>2] = $612;
      $615 = $sym;
      $616 = ((($615)) + 20|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = $1;
      $619 = ((($618)) + 44|0);
      HEAP32[$619>>2] = $617;
      break L1;
     }
    }
    $620 = $sym;
    $621 = ((($620)) + 16|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = ($622|0)==(2);
    if ($623) {
     $624 = $sym;
     $625 = ((($624)) + 20|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = ($626|0)==(192);
     if ($627) {
      $628 = $sym;
      $629 = ((($628)) + 28|0);
      $630 = ((($629)) + 3|0);
      $631 = HEAP8[$630>>0]|0;
      $632 = ($631&255) >>> 2;
      $633 = $632 & 1;
      $634 = $633&255;
      $635 = ($634|0)==(0);
      if ($635) {
       $636 = $1;
       $637 = ((($636)) + 52|0);
       $638 = HEAP8[$637>>0]|0;
       $639 = $638 & -5;
       $640 = $639 | 4;
       HEAP8[$637>>0] = $640;
       $641 = $sym;
       $642 = $1;
       $643 = ((($642)) + 56|0);
       HEAP32[$643>>2] = $641;
       break L1;
      }
     }
    }
    $644 = $i;
    $645 = $3;
    $646 = (($645) + ($644<<4)|0);
    $647 = $1;
    $648 = ((($647)) + 28|0);
    HEAP32[$648>>2] = $646;
    $649 = $sym;
    $650 = ((($649)) + 52|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = ($651|0)!=(0|0);
    if ($652) {
     $653 = $sym;
     $654 = ((($653)) + 52|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = ((($655)) + 20|0);
     $657 = HEAP32[$656>>2]|0;
     $658 = ($657|0)!=(192);
     if ($658) {
      $659 = $sym;
      $660 = ((($659)) + 52|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ((($661)) + 20|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = $1;
      $665 = ((($664)) + 44|0);
      HEAP32[$665>>2] = $663;
     } else {
      label = 123;
     }
    } else {
     label = 123;
    }
    if ((label|0) == 123) {
     $666 = $sym;
     $667 = ((($666)) + 20|0);
     $668 = HEAP32[$667>>2]|0;
     $669 = $1;
     $670 = ((($669)) + 44|0);
     HEAP32[$670>>2] = $668;
    }
    $671 = $sym;
    $672 = ((($671)) + 16|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = ($673|0)==(5);
    if ($674) {
     $675 = $sym;
     $676 = ((($675)) + 8|0);
     $677 = HEAP32[$676>>2]|0;
     $678 = HEAP32[15492>>2]|0;
     $679 = (($677) + ($678))|0;
     $680 = $1;
     $681 = $680;
     $682 = $681;
     HEAP32[$682>>2] = $679;
     $683 = (($681) + 4)|0;
     $684 = $683;
     HEAP32[$684>>2] = 0;
     $685 = $1;
     $686 = ((($685)) + 52|0);
     $687 = HEAP8[$686>>0]|0;
     $688 = $687 & -2;
     $689 = $688 | 1;
     HEAP8[$686>>0] = $689;
     $690 = $i;
     $691 = $3;
     $692 = (($691) + ($690<<4)|0);
     $693 = $1;
     $694 = ((($693)) + 20|0);
     HEAP32[$694>>2] = $692;
     $695 = HEAP32[15488>>2]|0;
     $696 = ((($695)) + 60|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ((($697)) + 42|0);
     $699 = HEAP16[$698>>1]|0;
     $700 = $699&65535;
     $701 = $i;
     $702 = $3;
     $703 = (($702) + ($701<<4)|0);
     $704 = ((($703)) + 8|0);
     HEAP32[$704>>2] = $700;
     $705 = $i;
     $706 = $3;
     $707 = (($706) + ($705<<4)|0);
     $708 = ((($707)) + 8|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = (15660 + (($709*12)|0)|0);
     $711 = ((($710)) + 10|0);
     $712 = HEAP8[$711>>0]|0;
     $713 = $i;
     $714 = $3;
     $715 = (($714) + ($713<<4)|0);
     $716 = ((($715)) + 1|0);
     HEAP8[$716>>0] = $712;
    }
    $717 = $sym;
    $718 = $1;
    $719 = ((($718)) + 56|0);
    HEAP32[$719>>2] = $717;
    while(1) {
     $720 = $sym;
     $721 = ((($720)) + 52|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = ($722|0)!=(0|0);
     $724 = $sym;
     if (!($723)) {
      break;
     }
     $725 = ((($724)) + 52|0);
     $726 = HEAP32[$725>>2]|0;
     $sym = $726;
    }
    $727 = ((($724)) + 16|0);
    $728 = HEAP32[$727>>2]|0;
    $729 = ($728|0)==(7);
    if ($729) {
     $730 = $sym;
     $731 = ((($730)) + 40|0);
     $732 = ((($731)) + 2|0);
     $733 = HEAP8[$732>>0]|0;
     $734 = $733&255;
     $735 = ($734|0)!=(3);
     $736 = $sym;
     $$1 = $735 ? $736 : 0;
     $739 = $$1;
    } else {
     $739 = 0;
    }
    $737 = $1;
    $738 = ((($737)) + 64|0);
    HEAP32[$738>>2] = $739;
    break L1;
   }
   }
   break;
  }
  case 6:  {
   $740 = $1;
   $741 = ((($740)) + 40|0);
   HEAP32[$741>>2] = 0;
   $742 = $i;
   $743 = $3;
   $744 = (($743) + ($742<<4)|0);
   $745 = ((($744)) + 8|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = (15660 + (($746*12)|0)|0);
   $748 = ((($747)) + 10|0);
   $749 = HEAP8[$748>>0]|0;
   $750 = $749&255;
   $751 = $1;
   $752 = ((($751)) + 44|0);
   HEAP32[$752>>2] = $750;
   $753 = $i;
   $754 = $3;
   $755 = (($754) + ($753<<4)|0);
   $756 = ((($755)) + 8|0);
   $757 = HEAP32[$756>>2]|0;
   $758 = (15660 + (($757*12)|0)|0);
   $759 = ((($758)) + 4|0);
   $760 = HEAP32[$759>>2]|0;
   $761 = $760&255;
   $762 = $1;
   $763 = ((($762)) + 49|0);
   HEAP8[$763>>0] = $761;
   $764 = $1;
   $765 = ((($764)) + 44|0);
   $766 = HEAP32[$765>>2]|0;
   $767 = $1;
   $768 = ((($767)) + 49|0);
   $769 = HEAP8[$768>>0]|0;
   $770 = $769&255;
   $771 = (_GetTypeSize($766,$770)|0);
   $772 = $1;
   HEAP32[$772>>2] = $771;
   $773 = $1;
   $774 = ((($773)) + 52|0);
   $775 = HEAP8[$774>>0]|0;
   $776 = $775 & -9;
   $777 = $776 | 8;
   HEAP8[$774>>0] = $777;
   $778 = $1;
   $779 = ((($778)) + 64|0);
   HEAP32[$779>>2] = 0;
   break;
  }
  case 7:  {
   $780 = $i;
   $781 = $3;
   $782 = (($781) + ($780<<4)|0);
   $783 = ((($782)) + 8|0);
   $784 = HEAP32[$783>>2]|0;
   $785 = ($784|0)==(187);
   if (!($785)) {
    $805 = HEAP32[8976>>2]|0;
    $806 = $i;
    $807 = $3;
    $808 = (($807) + ($806<<4)|0);
    $809 = ((($808)) + 4|0);
    $810 = HEAP32[$809>>2]|0;
    HEAP32[$vararg_buffer42>>2] = $810;
    $811 = (FUNCTION_TABLE_iii[$805 & 255](209,$vararg_buffer42)|0);
    $0 = $811;
    $876 = $0;
    STACKTOP = sp;return ($876|0);
   }
   $786 = $4;
   $787 = $786&255;
   $788 = $787 & 2;
   $789 = ($788|0)==(0);
   do {
    if ($789) {
     $790 = HEAP32[(544)>>2]|0;
     $791 = $790 & 240;
     $792 = ($791>>>0)<(48);
     if (!($792)) {
      _DefineFlatGroup();
      break;
     }
     $793 = HEAP32[8976>>2]|0;
     (FUNCTION_TABLE_iii[$793 & 255](30,$vararg_buffer39)|0);
     $0 = -1;
     $876 = $0;
     STACKTOP = sp;return ($876|0);
    }
   } while(0);
   $794 = HEAP32[(588)>>2]|0;
   $795 = $1;
   $796 = ((($795)) + 56|0);
   HEAP32[$796>>2] = $794;
   $797 = ($794|0)!=(0|0);
   if ($797) {
    $798 = $i;
    $799 = $3;
    $800 = (($799) + ($798<<4)|0);
    $801 = $1;
    $802 = ((($801)) + 28|0);
    HEAP32[$802>>2] = $800;
    $803 = $1;
    $804 = ((($803)) + 40|0);
    HEAP32[$804>>2] = 1;
    break L1;
   }
   $0 = -1;
   $876 = $0;
   STACKTOP = sp;return ($876|0);
   break;
  }
  case 11:  {
   $812 = $1;
   $813 = ((($812)) + 40|0);
   HEAP32[$813>>2] = 3;
   $814 = $i;
   $815 = $3;
   $816 = (($815) + ($814<<4)|0);
   $817 = $1;
   $818 = ((($817)) + 16|0);
   HEAP32[$818>>2] = $816;
   break;
  }
  default: {
   $819 = $1;
   $820 = ((($819)) + 52|0);
   $821 = HEAP8[$820>>0]|0;
   $822 = ($821&255) >>> 4;
   $823 = $822 & 1;
   $824 = $823&255;
   $825 = ($824|0)!=(0);
   $826 = $i;
   $827 = $3;
   $828 = (($827) + ($826<<4)|0);
   $829 = HEAP8[$828>>0]|0;
   $830 = $829&255;
   if ($825) {
    $831 = ($830|0)==(0);
    if (!($831)) {
     $832 = $i;
     $833 = $3;
     $834 = (($833) + ($832<<4)|0);
     $835 = HEAP8[$834>>0]|0;
     $836 = $835&255;
     $837 = ($836|0)==(41);
     if (!($837)) {
      $838 = $i;
      $839 = $3;
      $840 = (($839) + ($838<<4)|0);
      $841 = HEAP8[$840>>0]|0;
      $842 = $841&255;
      $843 = ($842|0)==(93);
      if (!($843)) {
       break L1;
      }
     }
    }
    $0 = 0;
    $876 = $0;
    STACKTOP = sp;return ($876|0);
   }
   $844 = ($830|0)==(12);
   do {
    if ($844) {
     $845 = HEAP32[8976>>2]|0;
     $846 = $i;
     $847 = $3;
     $848 = (($847) + ($846<<4)|0);
     $849 = ((($848)) + 4|0);
     $850 = HEAP32[$849>>2]|0;
     HEAP32[$vararg_buffer46>>2] = $850;
     (FUNCTION_TABLE_iii[$845 & 255](217,$vararg_buffer46)|0);
    } else {
     $851 = $i;
     $852 = $3;
     $853 = (($852) + ($851<<4)|0);
     $854 = HEAP8[$853>>0]|0;
     $855 = $854&255;
     $856 = ($855|0)==(58);
     if ($856) {
      $857 = HEAP32[8976>>2]|0;
      (FUNCTION_TABLE_iii[$857 & 255](47,$vararg_buffer50)|0);
      break;
     }
     $858 = $i;
     $859 = $3;
     $860 = (($859) + ($858<<4)|0);
     $861 = ((($860)) + 4|0);
     $862 = HEAP32[$861>>2]|0;
     $863 = HEAP8[$862>>0]|0;
     $864 = $863 << 24 >> 24;
     $865 = (_isalpha($864)|0);
     $866 = ($865|0)!=(0);
     $867 = HEAP32[8976>>2]|0;
     $868 = $i;
     $869 = $3;
     $870 = (($869) + ($868<<4)|0);
     $871 = ((($870)) + 12|0);
     $872 = HEAP32[$871>>2]|0;
     if ($866) {
      HEAP32[$vararg_buffer53>>2] = $872;
      (FUNCTION_TABLE_iii[$867 & 255](64,$vararg_buffer53)|0);
      break;
     } else {
      HEAP32[$vararg_buffer57>>2] = $872;
      (FUNCTION_TABLE_iii[$867 & 255](209,$vararg_buffer57)|0);
      break;
     }
    }
   } while(0);
   $0 = -1;
   $876 = $0;
   STACKTOP = sp;return ($876|0);
  }
  }
 } while(0);
 $873 = $2;
 $874 = HEAP32[$873>>2]|0;
 $875 = (($874) + 1)|0;
 HEAP32[$873>>2] = $875;
 $0 = 0;
 $876 = $0;
 STACKTOP = sp;return ($876|0);
}
function _OperErr($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $i;
 $1 = $tokenarray;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + ($2<<4)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)<=(12);
 $8 = HEAP32[8976>>2]|0;
 if ($7) {
  (FUNCTION_TABLE_iii[$8 & 255](150,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $9 = $0;
  $10 = $1;
  $11 = (($10) + ($9<<4)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $13;
  (FUNCTION_TABLE_iii[$8 & 255](209,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
}
function _PrepareOp($opnd,$old,$oper) {
 $opnd = $opnd|0;
 $old = $old|0;
 $oper = $oper|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $1 = $old;
 $2 = $oper;
 $3 = $1;
 $4 = ((($3)) + 52|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 4;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = $0;
 $10 = ((($9)) + 52|0);
 $11 = $8&255;
 $12 = HEAP8[$10>>0]|0;
 $13 = $11 & 1;
 $14 = ($13 << 4)&255;
 $15 = $12 & -17;
 $16 = $15 | $14;
 HEAP8[$10>>0] = $16;
 $17 = $2;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 switch ($19|0) {
 case 46:  {
  $20 = $1;
  $21 = ((($20)) + 64|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $1;
   $25 = ((($24)) + 64|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = ((($27)) + 64|0);
   HEAP32[$28>>2] = $26;
   $29 = $0;
   $30 = ((($29)) + 52|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31 & 127;
   $33 = $32 | -128;
   HEAP8[$30>>0] = $33;
   STACKTOP = sp;return;
  }
  $34 = HEAP32[(560)>>2]|0;
  $35 = $34 >>> 8;
  $36 = $35 & 1;
  $37 = ($36|0)!=(0);
  if ($37) {
   STACKTOP = sp;return;
  }
  $38 = $1;
  $39 = ((($38)) + 56|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if (!($41)) {
   STACKTOP = sp;return;
  }
  $42 = $1;
  $43 = ((($42)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if (!($47)) {
   STACKTOP = sp;return;
  }
  $48 = $0;
  $49 = ((($48)) + 64|0);
  HEAP32[$49>>2] = 0;
  $50 = $0;
  $51 = ((($50)) + 52|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 & 127;
  $54 = $53 | -128;
  HEAP8[$51>>0] = $54;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $55 = $2;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  switch ($57|0) {
  case 155: case 168:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  $58 = $0;
  $59 = ((($58)) + 52|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60 & -17;
  $62 = $61 | 16;
  HEAP8[$59>>0] = $62;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _get_precedence($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $item;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 5: case 4:  {
  $5 = $1;
  $6 = ((($5)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $0 = $8;
  break;
 }
 case 91: case 40:  {
  $9 = HEAP32[(560)>>2]|0;
  $10 = $9 >>> 6;
  $11 = $10 & 1;
  $12 = ($11|0)!=(0);
  $13 = $12 ? 9 : 1;
  $0 = $13;
  break;
 }
 case 46:  {
  $0 = 2;
  break;
 }
 case 58:  {
  $0 = 3;
  break;
 }
 case 47: case 42:  {
  $0 = 8;
  break;
 }
 case 45: case 43:  {
  $14 = $1;
  $15 = ((($14)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(0);
  $19 = $18 ? 9 : 7;
  $0 = $19;
  break;
 }
 default: {
  $20 = HEAP32[8976>>2]|0;
  $21 = $1;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  (FUNCTION_TABLE_iii[$20 & 255](209,$vararg_buffer)|0);
  $0 = -1;
 }
 }
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _calculate($opnd1,$opnd2,$oper) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $oper = $oper|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $name = 0, $sym = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0;
 var $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $oper;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=(0);
 $15 = ($13|0)!=(0);
 $16 = $14 | $15;
 do {
  if ($16) {
   $17 = $2;
   $18 = ((($17)) + 52|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19&255) >>> 4;
   $21 = $20 & 1;
   $22 = $21&255;
   $23 = ($22|0)!=(0);
   if (!($23)) {
    $24 = $3;
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($26|0)==(43);
    if ($27) {
     label = 5;
    } else {
     $28 = $3;
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = ($30|0)==(45);
     if ($31) {
      label = 5;
     }
    }
    if ((label|0) == 5) {
     $32 = $3;
     $33 = ((($32)) + 1|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)==(0);
     if ($36) {
      break;
     }
    }
    $37 = HEAP32[8976>>2]|0;
    $38 = $2;
    $39 = ((($38)) + 8|0);
    $40 = $39;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = $2;
    $47 = $46;
    $48 = $47;
    $49 = HEAP32[$48>>2]|0;
    $50 = (($47) + 4)|0;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = $vararg_buffer;
    $54 = $53;
    HEAP32[$54>>2] = $42;
    $55 = (($53) + 4)|0;
    $56 = $55;
    HEAP32[$56>>2] = $45;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    $57 = $vararg_ptr1;
    $58 = $57;
    HEAP32[$58>>2] = $49;
    $59 = (($57) + 4)|0;
    $60 = $59;
    HEAP32[$60>>2] = $52;
    $61 = (FUNCTION_TABLE_iii[$37 & 255](272,$vararg_buffer)|0);
    $0 = $61;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
  }
 } while(0);
 $62 = $3;
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 L11: do {
  switch ($64|0) {
  case 91:  {
   $65 = $2;
   $66 = ((($65)) + 52|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = ($67&255) >>> 6;
   $69 = $68 & 1;
   $70 = $69&255;
   $71 = ($70|0)==(1);
   if ($71) {
    $72 = $2;
    $73 = ((($72)) + 52|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 & -65;
    HEAP8[$73>>0] = $75;
    $76 = $1;
    $77 = ((($76)) + 56|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(0|0);
    if ($79) {
     $80 = $2;
     _CheckAssume($80);
    }
   }
   $81 = $1;
   $82 = ((($81)) + 40|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(-2);
   $85 = $1;
   if ($84) {
    $86 = $2;
    _TokenAssign($85,$86);
    $87 = $2;
    $88 = ((($87)) + 64|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $1;
    $91 = ((($90)) + 64|0);
    HEAP32[$91>>2] = $89;
    $92 = $1;
    $93 = ((($92)) + 52|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = ($94&255) >>> 3;
    $96 = $95 & 1;
    $97 = $96&255;
    $98 = ($97|0)!=(0);
    if (!($98)) {
     break L11;
    }
    $99 = $1;
    $100 = ((($99)) + 40|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==(0);
    if (!($102)) {
     break L11;
    }
    $103 = $1;
    $104 = ((($103)) + 52|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105 & -9;
    HEAP8[$104>>0] = $106;
    break L11;
   }
   $107 = ((($85)) + 52|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108&255) >>> 3;
   $110 = $109 & 1;
   $111 = $110&255;
   $112 = ($111|0)==(1);
   do {
    if ($112) {
     $113 = $1;
     $114 = ((($113)) + 64|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = $2;
      $118 = ((($117)) + 40|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(1);
      if (!($120)) {
       $121 = $2;
       $122 = ((($121)) + 40|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = ($123|0)==(2);
       if (!($124)) {
        break;
       }
      }
      $125 = HEAP32[8976>>2]|0;
      $126 = (FUNCTION_TABLE_iii[$125 & 255](263,$vararg_buffer2)|0);
      $0 = $126;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
    }
   } while(0);
   $127 = $1;
   $128 = ((($127)) + 20|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)!=(0|0);
   if ($130) {
    $131 = $1;
    $132 = ((($131)) + 20|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($133)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(31);
    if ($136) {
     $137 = $1;
     $138 = $2;
     $139 = (_check_streg($137,$138)|0);
     $0 = $139;
     $1082 = $0;
     STACKTOP = sp;return ($1082|0);
    }
   }
   $140 = $1;
   $141 = $2;
   $142 = (_plus_op($140,$141)|0);
   $0 = $142;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 40:  {
   $143 = $1;
   $144 = ((($143)) + 40|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)==(-2);
   $147 = $1;
   if ($146) {
    $148 = $2;
    _TokenAssign($147,$148);
    $149 = $2;
    $150 = ((($149)) + 64|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $1;
    $153 = ((($152)) + 64|0);
    HEAP32[$153>>2] = $151;
    break L11;
   }
   $154 = ((($147)) + 52|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = ($155&255) >>> 3;
   $157 = $156 & 1;
   $158 = $157&255;
   $159 = ($158|0)==(1);
   if ($159) {
    $160 = $2;
    $161 = ((($160)) + 40|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ($162|0)==(1);
    if ($163) {
     $164 = HEAP32[8976>>2]|0;
     $165 = (FUNCTION_TABLE_iii[$164 & 255](263,$vararg_buffer5)|0);
     $0 = $165;
     $1082 = $0;
     STACKTOP = sp;return ($1082|0);
    }
   }
   $166 = $1;
   $167 = ((($166)) + 20|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)!=(0|0);
   if ($169) {
    $170 = $1;
    $171 = ((($170)) + 20|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ((($172)) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ($174|0)==(31);
    if ($175) {
     $176 = $1;
     $177 = $2;
     $178 = (_check_streg($176,$177)|0);
     $0 = $178;
     $1082 = $0;
     STACKTOP = sp;return ($1082|0);
    }
   }
   $179 = $1;
   $180 = $2;
   $181 = (_plus_op($179,$180)|0);
   $0 = $181;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 43:  {
   $182 = $3;
   $183 = ((($182)) + 1|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184 << 24 >> 24;
   $186 = ($185|0)==(0);
   $187 = $1;
   $188 = $2;
   if ($186) {
    $189 = (_positive_op($187,$188)|0);
    $0 = $189;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   } else {
    $190 = (_plus_op($187,$188)|0);
    $0 = $190;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   break;
  }
  case 45:  {
   $191 = $3;
   $192 = ((($191)) + 1|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 << 24 >> 24;
   $195 = ($194|0)==(0);
   $196 = $1;
   $197 = $2;
   if ($195) {
    $198 = (_negative_op($196,$197)|0);
    $0 = $198;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   } else {
    $199 = (_minus_op($196,$197)|0);
    $0 = $199;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   break;
  }
  case 46:  {
   $200 = $1;
   $201 = $2;
   $202 = (_dot_op($200,$201)|0);
   $0 = $202;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 58:  {
   $203 = $1;
   $204 = $2;
   $205 = (_colon_op($203,$204)|0);
   $0 = $205;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 42:  {
   $206 = $1;
   _MakeConst($206);
   $207 = $2;
   _MakeConst($207);
   $208 = $1;
   $209 = ((($208)) + 40|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ($210|0)==(0);
   if ($211) {
    $212 = $2;
    $213 = ((($212)) + 40|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($214|0)==(0);
    if ($215) {
     $216 = $2;
     $217 = $216;
     $218 = $217;
     $219 = HEAP32[$218>>2]|0;
     $220 = (($217) + 4)|0;
     $221 = $220;
     $222 = HEAP32[$221>>2]|0;
     $223 = $1;
     $224 = $223;
     $225 = $224;
     $226 = HEAP32[$225>>2]|0;
     $227 = (($224) + 4)|0;
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = (___muldi3(($226|0),($229|0),($219|0),($222|0))|0);
     $231 = tempRet0;
     $232 = $223;
     $233 = $232;
     HEAP32[$233>>2] = $230;
     $234 = (($232) + 4)|0;
     $235 = $234;
     HEAP32[$235>>2] = $231;
     break L11;
    }
   }
   $236 = $1;
   $237 = $2;
   $238 = (_check_both($236,$237,2,0)|0);
   $239 = ($238<<24>>24)!=(0);
   $240 = $1;
   $241 = $2;
   if (!($239)) {
    $287 = (_ConstError($240,$241)|0);
    $0 = $287;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   $242 = (_check_direct_reg($240,$241)|0);
   $243 = ($242|0)==(-1);
   if ($243) {
    $244 = HEAP32[8976>>2]|0;
    $245 = (FUNCTION_TABLE_iii[$244 & 255](170,$vararg_buffer8)|0);
    $0 = $245;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   $246 = $2;
   $247 = ((($246)) + 40|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)==(2);
   if ($249) {
    $250 = $2;
    $251 = ((($250)) + 20|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $1;
    $254 = ((($253)) + 24|0);
    HEAP32[$254>>2] = $252;
    $255 = $1;
    $256 = HEAP32[$255>>2]|0;
    $257 = $256&255;
    $258 = $1;
    $259 = ((($258)) + 48|0);
    HEAP8[$259>>0] = $257;
    $260 = $1;
    HEAP32[$260>>2] = 0;
   } else {
    $261 = $1;
    $262 = ((($261)) + 20|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = $1;
    $265 = ((($264)) + 24|0);
    HEAP32[$265>>2] = $263;
    $266 = $2;
    $267 = HEAP32[$266>>2]|0;
    $268 = $267&255;
    $269 = $1;
    $270 = ((($269)) + 48|0);
    HEAP8[$270>>0] = $268;
   }
   $271 = $1;
   $272 = ((($271)) + 48|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   $275 = ($274|0)==(0);
   if (!($275)) {
    $278 = $1;
    $279 = ((($278)) + 20|0);
    HEAP32[$279>>2] = 0;
    $280 = $1;
    $281 = ((($280)) + 52|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $282 & -2;
    $284 = $283 | 1;
    HEAP8[$281>>0] = $284;
    $285 = $1;
    $286 = ((($285)) + 40|0);
    HEAP32[$286>>2] = 1;
    break L11;
   }
   $276 = HEAP32[8976>>2]|0;
   $277 = (FUNCTION_TABLE_iii[$276 & 255](36,$vararg_buffer11)|0);
   $0 = $277;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 47:  {
   $288 = $1;
   _MakeConst($288);
   $289 = $2;
   _MakeConst($289);
   $290 = $1;
   $291 = ((($290)) + 40|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = ($292|0)==(0);
   if ($293) {
    $294 = $2;
    $295 = ((($294)) + 40|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = ($296|0)==(0);
    $299 = $297;
   } else {
    $299 = 0;
   }
   $298 = $299&1;
   $300 = ($298|0)==(0);
   if ($300) {
    $301 = $1;
    $302 = $2;
    $303 = (_ConstError($301,$302)|0);
    $0 = $303;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   $304 = $2;
   $305 = $304;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)==(0);
   $312 = ($310|0)==(0);
   $313 = $311 & $312;
   if (!($313)) {
    $316 = $2;
    $317 = $316;
    $318 = $317;
    $319 = HEAP32[$318>>2]|0;
    $320 = (($317) + 4)|0;
    $321 = $320;
    $322 = HEAP32[$321>>2]|0;
    $323 = $1;
    $324 = $323;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = (($324) + 4)|0;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (___divdi3(($326|0),($329|0),($319|0),($322|0))|0);
    $331 = tempRet0;
    $332 = $323;
    $333 = $332;
    HEAP32[$333>>2] = $330;
    $334 = (($332) + 4)|0;
    $335 = $334;
    HEAP32[$335>>2] = $331;
    break L11;
   }
   $314 = HEAP32[8976>>2]|0;
   $315 = (FUNCTION_TABLE_iii[$314 & 255](167,$vararg_buffer14)|0);
   $0 = $315;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  case 5:  {
   $336 = $3;
   $337 = ((($336)) + 8|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($338|0)==(184);
   $340 = $1;
   if ($339) {
    $341 = ((($340)) + 52|0);
    $342 = HEAP8[$341>>0]|0;
    $343 = ($342&255) >>> 3;
    $344 = $343 & 1;
    $345 = $344&255;
    $346 = ($345|0)==(0);
    do {
     if ($346) {
      $347 = $1;
      $348 = ((($347)) + 56|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = ($349|0)!=(0|0);
      if ($350) {
       $351 = $1;
       $352 = ((($351)) + 56|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($353)) + 16|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==(0);
       if ($356) {
        $357 = $1;
        $358 = ((($357)) + 56|0);
        $359 = HEAP32[$358>>2]|0;
        (_CreateTypeSymbol($359,0,1)|0);
        $360 = $1;
        $361 = ((($360)) + 56|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = $1;
        $364 = ((($363)) + 64|0);
        HEAP32[$364>>2] = $362;
        $365 = $1;
        $366 = ((($365)) + 56|0);
        HEAP32[$366>>2] = 0;
        $367 = $1;
        $368 = ((($367)) + 52|0);
        $369 = HEAP8[$368>>0]|0;
        $370 = $369 & -9;
        $371 = $370 | 8;
        HEAP8[$368>>0] = $371;
        break;
       }
      }
      $372 = HEAP32[8976>>2]|0;
      $373 = (FUNCTION_TABLE_iii[$372 & 255](179,$vararg_buffer17)|0);
      $0 = $373;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
    } while(0);
    $374 = $2;
    $375 = ((($374)) + 52|0);
    $376 = HEAP8[$375>>0]|0;
    $377 = $376 & -3;
    $378 = $377 | 2;
    HEAP8[$375>>0] = $378;
    $379 = $2;
    $380 = ((($379)) + 40|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = ($381|0)==(2);
    do {
     if ($382) {
      $383 = $2;
      $384 = ((($383)) + 52|0);
      $385 = HEAP8[$384>>0]|0;
      $386 = $385 & 1;
      $387 = $386&255;
      $388 = ($387|0)==(0);
      if (!($388)) {
       $389 = $2;
       $390 = ((($389)) + 52|0);
       $391 = HEAP8[$390>>0]|0;
       $392 = ($391&255) >>> 6;
       $393 = $392 & 1;
       $394 = $393&255;
       $395 = ($394|0)==(1);
       if (!($395)) {
        label = 76;
        break;
       }
      }
      $396 = $2;
      $397 = ((($396)) + 20|0);
      $398 = HEAP32[$397>>2]|0;
      $399 = ((($398)) + 8|0);
      $400 = HEAP32[$399>>2]|0;
      $temp = $400;
      $401 = $temp;
      $402 = (15660 + (($401*12)|0)|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = $403 & 6144;
      $405 = ($404|0)!=(0);
      $406 = $1;
      $407 = HEAP32[$406>>2]|0;
      if (!($405)) {
       $414 = $temp;
       $415 = (_SizeFromRegister($414)|0);
       $416 = ($407|0)!=($415|0);
       if (!($416)) {
        break;
       }
       $417 = HEAP32[8976>>2]|0;
       $418 = (FUNCTION_TABLE_iii[$417 & 255](170,$vararg_buffer23)|0);
       $0 = $418;
       $1082 = $0;
       STACKTOP = sp;return ($1082|0);
      }
      $408 = ($407|0)!=(2);
      if ($408) {
       $409 = $1;
       $410 = HEAP32[$409>>2]|0;
       $411 = ($410|0)!=(4);
       if ($411) {
        $412 = HEAP32[8976>>2]|0;
        $413 = (FUNCTION_TABLE_iii[$412 & 255](170,$vararg_buffer20)|0);
        $0 = $413;
        $1082 = $0;
        STACKTOP = sp;return ($1082|0);
       }
      }
     } else {
      label = 76;
     }
    } while(0);
    if ((label|0) == 76) {
     $419 = $2;
     $420 = ((($419)) + 40|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ($421|0)==(3);
     if ($422) {
      $423 = $1;
      $424 = ((($423)) + 44|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = $425 & 32;
      $427 = ($426|0)!=(0);
      if (!($427)) {
       $428 = HEAP32[8976>>2]|0;
       $429 = (FUNCTION_TABLE_iii[$428 & 255](270,$vararg_buffer26)|0);
       $0 = $429;
       $1082 = $0;
       STACKTOP = sp;return ($1082|0);
      }
     }
    }
    $430 = $1;
    $431 = ((($430)) + 44|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = $2;
    $434 = ((($433)) + 44|0);
    HEAP32[$434>>2] = $432;
    $435 = $1;
    $436 = ((($435)) + 49|0);
    $437 = HEAP8[$436>>0]|0;
    $438 = $2;
    $439 = ((($438)) + 49|0);
    HEAP8[$439>>0] = $437;
    $440 = $2;
    $441 = ((($440)) + 52|0);
    $442 = HEAP8[$441>>0]|0;
    $443 = ($442&255) >>> 3;
    $444 = $443 & 1;
    $445 = $444&255;
    $446 = ($445|0)!=(0);
    if ($446) {
     $447 = $1;
     $448 = HEAP32[$447>>2]|0;
     $449 = $2;
     HEAP32[$449>>2] = $448;
    }
    $450 = $1;
    $451 = ((($450)) + 32|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = ($452|0)!=(0|0);
    if ($453) {
     $454 = $2;
     $455 = ((($454)) + 32|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($456|0)==(0|0);
     if ($457) {
      $458 = $1;
      $459 = ((($458)) + 32|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = $2;
      $462 = ((($461)) + 32|0);
      HEAP32[$462>>2] = $460;
     }
     $463 = $2;
     $464 = ((($463)) + 40|0);
     HEAP32[$464>>2] = 1;
    }
    $465 = $1;
    $466 = $2;
    _TokenAssign($465,$466);
    break L11;
   }
   _MakeConst($340);
   $467 = $2;
   _MakeConst($467);
   $468 = $1;
   $469 = ((($468)) + 40|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = ($470|0)==(0);
   if ($471) {
    $472 = $2;
    $473 = ((($472)) + 40|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = ($474|0)==(0);
    if (!($475)) {
     label = 88;
    }
   } else {
    label = 88;
   }
   do {
    if ((label|0) == 88) {
     $476 = $3;
     $477 = ((($476)) + 1|0);
     $478 = HEAP8[$477>>0]|0;
     $479 = $478&255;
     $480 = ($479|0)==(10);
     if ($480) {
      $481 = $1;
      $482 = ((($481)) + 40|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = ($483|0)!=(0);
      if ($484) {
       $485 = $1;
       $486 = ((($485)) + 40|0);
       $487 = HEAP32[$486>>2]|0;
       $488 = ($487|0)==(1);
       if ($488) {
        $489 = $1;
        $490 = ((($489)) + 52|0);
        $491 = HEAP8[$490>>0]|0;
        $492 = $491 & 1;
        $493 = $492&255;
        $494 = ($493|0)==(0);
        if ($494) {
         $495 = $1;
         $496 = ((($495)) + 56|0);
         $497 = HEAP32[$496>>2]|0;
         $498 = ($497|0)!=(0|0);
         if ($498) {
          $499 = $2;
          $500 = ((($499)) + 40|0);
          $501 = HEAP32[$500>>2]|0;
          $502 = ($501|0)==(1);
          if ($502) {
           $503 = $2;
           $504 = ((($503)) + 52|0);
           $505 = HEAP8[$504>>0]|0;
           $506 = $505 & 1;
           $507 = $506&255;
           $508 = ($507|0)==(0);
           if ($508) {
            $509 = $2;
            $510 = ((($509)) + 56|0);
            $511 = HEAP32[$510>>2]|0;
            $512 = ($511|0)!=(0|0);
            if ($512) {
             $513 = $1;
             $514 = $2;
             $515 = (_MakeConst2($513,$514)|0);
             $516 = ($515|0)==(-1);
             if (!($516)) {
              break;
             }
             $0 = -1;
             $1082 = $0;
             STACKTOP = sp;return ($1082|0);
            }
           }
          }
          $517 = HEAP32[8976>>2]|0;
          $518 = (FUNCTION_TABLE_iii[$517 & 255](188,$vararg_buffer29)|0);
          $0 = $518;
          $1082 = $0;
          STACKTOP = sp;return ($1082|0);
         }
        }
       }
       $519 = HEAP32[8976>>2]|0;
       $520 = (FUNCTION_TABLE_iii[$519 & 255](189,$vararg_buffer32)|0);
       $0 = $520;
       $1082 = $0;
       STACKTOP = sp;return ($1082|0);
      }
     }
     $521 = $1;
     $522 = $2;
     $523 = (_ConstError($521,$522)|0);
     $0 = $523;
     $1082 = $0;
     STACKTOP = sp;return ($1082|0);
    }
   } while(0);
   $524 = $3;
   $525 = ((($524)) + 8|0);
   $526 = HEAP32[$525>>2]|0;
   do {
    switch ($526|0) {
    case 177:  {
     $527 = $1;
     $528 = ((($527)) + 52|0);
     $529 = HEAP8[$528>>0]|0;
     $530 = ($529&255) >>> 3;
     $531 = $530 & 1;
     $532 = $531&255;
     $533 = ($532|0)!=(0);
     if ($533) {
      $534 = $2;
      $535 = ((($534)) + 52|0);
      $536 = HEAP8[$535>>0]|0;
      $537 = ($536&255) >>> 3;
      $538 = $537 & 1;
      $539 = $538&255;
      $540 = ($539|0)!=(0);
      if ($540) {
       $541 = $1;
       $542 = $2;
       _cmp_types($541,$542,-1);
       break L11;
      }
     }
     $543 = $1;
     $544 = $543;
     $545 = $544;
     $546 = HEAP32[$545>>2]|0;
     $547 = (($544) + 4)|0;
     $548 = $547;
     $549 = HEAP32[$548>>2]|0;
     $550 = $2;
     $551 = $550;
     $552 = $551;
     $553 = HEAP32[$552>>2]|0;
     $554 = (($551) + 4)|0;
     $555 = $554;
     $556 = HEAP32[$555>>2]|0;
     $557 = ($546|0)==($553|0);
     $558 = ($549|0)==($556|0);
     $559 = $557 & $558;
     $560 = $559 ? -1 : 0;
     $561 = ($560|0)<(0);
     $562 = $561 << 31 >> 31;
     $563 = $1;
     $564 = $563;
     $565 = $564;
     HEAP32[$565>>2] = $560;
     $566 = (($564) + 4)|0;
     $567 = $566;
     HEAP32[$567>>2] = $562;
     break L11;
     break;
    }
    case 178:  {
     $568 = $1;
     $569 = ((($568)) + 52|0);
     $570 = HEAP8[$569>>0]|0;
     $571 = ($570&255) >>> 3;
     $572 = $571 & 1;
     $573 = $572&255;
     $574 = ($573|0)!=(0);
     if ($574) {
      $575 = $2;
      $576 = ((($575)) + 52|0);
      $577 = HEAP8[$576>>0]|0;
      $578 = ($577&255) >>> 3;
      $579 = $578 & 1;
      $580 = $579&255;
      $581 = ($580|0)!=(0);
      if ($581) {
       $582 = $1;
       $583 = $2;
       _cmp_types($582,$583,0);
       break L11;
      }
     }
     $584 = $1;
     $585 = $584;
     $586 = $585;
     $587 = HEAP32[$586>>2]|0;
     $588 = (($585) + 4)|0;
     $589 = $588;
     $590 = HEAP32[$589>>2]|0;
     $591 = $2;
     $592 = $591;
     $593 = $592;
     $594 = HEAP32[$593>>2]|0;
     $595 = (($592) + 4)|0;
     $596 = $595;
     $597 = HEAP32[$596>>2]|0;
     $598 = ($587|0)!=($594|0);
     $599 = ($590|0)!=($597|0);
     $600 = $598 | $599;
     $601 = $600 ? -1 : 0;
     $602 = ($601|0)<(0);
     $603 = $602 << 31 >> 31;
     $604 = $1;
     $605 = $604;
     $606 = $605;
     HEAP32[$606>>2] = $601;
     $607 = (($605) + 4)|0;
     $608 = $607;
     HEAP32[$608>>2] = $603;
     break L11;
     break;
    }
    case 182:  {
     $609 = $1;
     $610 = $609;
     $611 = $610;
     $612 = HEAP32[$611>>2]|0;
     $613 = (($610) + 4)|0;
     $614 = $613;
     $615 = HEAP32[$614>>2]|0;
     $616 = $2;
     $617 = $616;
     $618 = $617;
     $619 = HEAP32[$618>>2]|0;
     $620 = (($617) + 4)|0;
     $621 = $620;
     $622 = HEAP32[$621>>2]|0;
     $623 = ($615|0)<($622|0);
     $624 = ($612>>>0)<($619>>>0);
     $625 = ($615|0)==($622|0);
     $626 = $625 & $624;
     $627 = $623 | $626;
     $628 = $627 ? -1 : 0;
     $629 = ($628|0)<(0);
     $630 = $629 << 31 >> 31;
     $631 = $1;
     $632 = $631;
     $633 = $632;
     HEAP32[$633>>2] = $628;
     $634 = (($632) + 4)|0;
     $635 = $634;
     HEAP32[$635>>2] = $630;
     break L11;
     break;
    }
    case 181:  {
     $636 = $1;
     $637 = $636;
     $638 = $637;
     $639 = HEAP32[$638>>2]|0;
     $640 = (($637) + 4)|0;
     $641 = $640;
     $642 = HEAP32[$641>>2]|0;
     $643 = $2;
     $644 = $643;
     $645 = $644;
     $646 = HEAP32[$645>>2]|0;
     $647 = (($644) + 4)|0;
     $648 = $647;
     $649 = HEAP32[$648>>2]|0;
     $650 = ($642|0)<($649|0);
     $651 = ($639>>>0)<=($646>>>0);
     $652 = ($642|0)==($649|0);
     $653 = $652 & $651;
     $654 = $650 | $653;
     $655 = $654 ? -1 : 0;
     $656 = ($655|0)<(0);
     $657 = $656 << 31 >> 31;
     $658 = $1;
     $659 = $658;
     $660 = $659;
     HEAP32[$660>>2] = $655;
     $661 = (($659) + 4)|0;
     $662 = $661;
     HEAP32[$662>>2] = $657;
     break L11;
     break;
    }
    case 180:  {
     $663 = $1;
     $664 = $663;
     $665 = $664;
     $666 = HEAP32[$665>>2]|0;
     $667 = (($664) + 4)|0;
     $668 = $667;
     $669 = HEAP32[$668>>2]|0;
     $670 = $2;
     $671 = $670;
     $672 = $671;
     $673 = HEAP32[$672>>2]|0;
     $674 = (($671) + 4)|0;
     $675 = $674;
     $676 = HEAP32[$675>>2]|0;
     $677 = ($669|0)>($676|0);
     $678 = ($666>>>0)>($673>>>0);
     $679 = ($669|0)==($676|0);
     $680 = $679 & $678;
     $681 = $677 | $680;
     $682 = $681 ? -1 : 0;
     $683 = ($682|0)<(0);
     $684 = $683 << 31 >> 31;
     $685 = $1;
     $686 = $685;
     $687 = $686;
     HEAP32[$687>>2] = $682;
     $688 = (($686) + 4)|0;
     $689 = $688;
     HEAP32[$689>>2] = $684;
     break L11;
     break;
    }
    case 179:  {
     $690 = $1;
     $691 = $690;
     $692 = $691;
     $693 = HEAP32[$692>>2]|0;
     $694 = (($691) + 4)|0;
     $695 = $694;
     $696 = HEAP32[$695>>2]|0;
     $697 = $2;
     $698 = $697;
     $699 = $698;
     $700 = HEAP32[$699>>2]|0;
     $701 = (($698) + 4)|0;
     $702 = $701;
     $703 = HEAP32[$702>>2]|0;
     $704 = ($696|0)>($703|0);
     $705 = ($693>>>0)>=($700>>>0);
     $706 = ($696|0)==($703|0);
     $707 = $706 & $705;
     $708 = $704 | $707;
     $709 = $708 ? -1 : 0;
     $710 = ($709|0)<(0);
     $711 = $710 << 31 >> 31;
     $712 = $1;
     $713 = $712;
     $714 = $713;
     HEAP32[$714>>2] = $709;
     $715 = (($713) + 4)|0;
     $716 = $715;
     HEAP32[$716>>2] = $711;
     break L11;
     break;
    }
    case 183:  {
     $717 = $2;
     $718 = $717;
     $719 = $718;
     $720 = HEAP32[$719>>2]|0;
     $721 = (($718) + 4)|0;
     $722 = $721;
     $723 = HEAP32[$722>>2]|0;
     $724 = ($720|0)==(0);
     $725 = ($723|0)==(0);
     $726 = $724 & $725;
     if (!($726)) {
      $729 = $2;
      $730 = $729;
      $731 = $730;
      $732 = HEAP32[$731>>2]|0;
      $733 = (($730) + 4)|0;
      $734 = $733;
      $735 = HEAP32[$734>>2]|0;
      $736 = $1;
      $737 = $736;
      $738 = $737;
      $739 = HEAP32[$738>>2]|0;
      $740 = (($737) + 4)|0;
      $741 = $740;
      $742 = HEAP32[$741>>2]|0;
      $743 = (___uremdi3(($739|0),($742|0),($732|0),($735|0))|0);
      $744 = tempRet0;
      $745 = $736;
      $746 = $745;
      HEAP32[$746>>2] = $743;
      $747 = (($745) + 4)|0;
      $748 = $747;
      HEAP32[$748>>2] = $744;
      break L11;
     }
     $727 = HEAP32[8976>>2]|0;
     $728 = (FUNCTION_TABLE_iii[$727 & 255](167,$vararg_buffer35)|0);
     $0 = $728;
     $1082 = $0;
     STACKTOP = sp;return ($1082|0);
     break;
    }
    case 437:  {
     $749 = $2;
     $750 = HEAP32[$749>>2]|0;
     $751 = ($750|0)<(0);
     do {
      if ($751) {
       $752 = HEAP32[8976>>2]|0;
       (FUNCTION_TABLE_iii[$752 & 255](208,$vararg_buffer38)|0);
      } else {
       $753 = $2;
       $754 = HEAP32[$753>>2]|0;
       $755 = ($754>>>0)>=(64);
       $756 = $1;
       if ($755) {
        $757 = $756;
        $758 = $757;
        HEAP32[$758>>2] = 0;
        $759 = (($757) + 4)|0;
        $760 = $759;
        HEAP32[$760>>2] = 0;
        break;
       } else {
        $761 = $756;
        $762 = $761;
        $763 = HEAP32[$762>>2]|0;
        $764 = (($761) + 4)|0;
        $765 = $764;
        $766 = HEAP32[$765>>2]|0;
        $767 = $2;
        $768 = HEAP32[$767>>2]|0;
        $769 = (_bitshift64Shl(($763|0),($766|0),($768|0))|0);
        $770 = tempRet0;
        $771 = $1;
        $772 = $771;
        $773 = $772;
        HEAP32[$773>>2] = $769;
        $774 = (($772) + 4)|0;
        $775 = $774;
        HEAP32[$775>>2] = $770;
        break;
       }
      }
     } while(0);
     $776 = HEAP32[(560)>>2]|0;
     $777 = $776 >>> 6;
     $778 = $777 & 1;
     $779 = ($778|0)!=(0);
     if (!($779)) {
      break L11;
     }
     $780 = $1;
     $781 = ((($780)) + 4|0);
     HEAP32[$781>>2] = 0;
     $782 = $1;
     $783 = ((($782)) + 8|0);
     $784 = $783;
     $785 = $784;
     HEAP32[$785>>2] = 0;
     $786 = (($784) + 4)|0;
     $787 = $786;
     HEAP32[$787>>2] = 0;
     break L11;
     break;
    }
    case 438:  {
     $788 = $2;
     $789 = HEAP32[$788>>2]|0;
     $790 = ($789|0)<(0);
     if ($790) {
      $791 = HEAP32[8976>>2]|0;
      (FUNCTION_TABLE_iii[$791 & 255](208,$vararg_buffer41)|0);
      break L11;
     }
     $792 = $2;
     $793 = HEAP32[$792>>2]|0;
     $794 = ($793>>>0)>=(64);
     $795 = $1;
     if ($794) {
      $796 = $795;
      $797 = $796;
      HEAP32[$797>>2] = 0;
      $798 = (($796) + 4)|0;
      $799 = $798;
      HEAP32[$799>>2] = 0;
      break L11;
     } else {
      $800 = $795;
      $801 = $800;
      $802 = HEAP32[$801>>2]|0;
      $803 = (($800) + 4)|0;
      $804 = $803;
      $805 = HEAP32[$804>>2]|0;
      $806 = $2;
      $807 = HEAP32[$806>>2]|0;
      $808 = (_bitshift64Lshr(($802|0),($805|0),($807|0))|0);
      $809 = tempRet0;
      $810 = $1;
      $811 = $810;
      $812 = $811;
      HEAP32[$812>>2] = $808;
      $813 = (($811) + 4)|0;
      $814 = $813;
      HEAP32[$814>>2] = $809;
      break L11;
     }
     break;
    }
    case 427:  {
     $815 = $2;
     $816 = $815;
     $817 = $816;
     $818 = HEAP32[$817>>2]|0;
     $819 = (($816) + 4)|0;
     $820 = $819;
     $821 = HEAP32[$820>>2]|0;
     $822 = $1;
     $823 = $822;
     $824 = $823;
     $825 = HEAP32[$824>>2]|0;
     $826 = (($823) + 4)|0;
     $827 = $826;
     $828 = HEAP32[$827>>2]|0;
     $829 = $825 & $818;
     $830 = $828 & $821;
     $831 = $822;
     $832 = $831;
     HEAP32[$832>>2] = $829;
     $833 = (($831) + 4)|0;
     $834 = $833;
     HEAP32[$834>>2] = $830;
     break L11;
     break;
    }
    case 424:  {
     $835 = $2;
     $836 = $835;
     $837 = $836;
     $838 = HEAP32[$837>>2]|0;
     $839 = (($836) + 4)|0;
     $840 = $839;
     $841 = HEAP32[$840>>2]|0;
     $842 = $1;
     $843 = $842;
     $844 = $843;
     $845 = HEAP32[$844>>2]|0;
     $846 = (($843) + 4)|0;
     $847 = $846;
     $848 = HEAP32[$847>>2]|0;
     $849 = $845 | $838;
     $850 = $848 | $841;
     $851 = $842;
     $852 = $851;
     HEAP32[$852>>2] = $849;
     $853 = (($851) + 4)|0;
     $854 = $853;
     HEAP32[$854>>2] = $850;
     break L11;
     break;
    }
    case 429:  {
     $855 = $2;
     $856 = $855;
     $857 = $856;
     $858 = HEAP32[$857>>2]|0;
     $859 = (($856) + 4)|0;
     $860 = $859;
     $861 = HEAP32[$860>>2]|0;
     $862 = $1;
     $863 = $862;
     $864 = $863;
     $865 = HEAP32[$864>>2]|0;
     $866 = (($863) + 4)|0;
     $867 = $866;
     $868 = HEAP32[$867>>2]|0;
     $869 = $865 ^ $858;
     $870 = $868 ^ $861;
     $871 = $862;
     $872 = $871;
     HEAP32[$872>>2] = $869;
     $873 = (($871) + 4)|0;
     $874 = $873;
     HEAP32[$874>>2] = $870;
     break L11;
     break;
    }
    default: {
     break L11;
    }
    }
   } while(0);
   break;
  }
  case 4:  {
   $875 = $3;
   $876 = ((($875)) + 8|0);
   $877 = HEAP32[$876>>2]|0;
   $878 = ($877|0)==(499);
   if ($878) {
    $879 = $2;
    _MakeConst($879);
    $880 = $2;
    $881 = ((($880)) + 40|0);
    $882 = HEAP32[$881>>2]|0;
    $883 = ($882|0)!=(0);
    if (!($883)) {
     $886 = $1;
     $887 = $2;
     _TokenAssign($886,$887);
     $888 = $2;
     $889 = $888;
     $890 = $889;
     $891 = HEAP32[$890>>2]|0;
     $892 = (($889) + 4)|0;
     $893 = $892;
     $894 = HEAP32[$893>>2]|0;
     $895 = $891 ^ -1;
     $896 = $894 ^ -1;
     $897 = $1;
     $898 = $897;
     $899 = $898;
     HEAP32[$899>>2] = $895;
     $900 = (($898) + 4)|0;
     $901 = $900;
     HEAP32[$901>>2] = $896;
     break L11;
    }
    $884 = HEAP32[8976>>2]|0;
    $885 = (FUNCTION_TABLE_iii[$884 & 255](66,$vararg_buffer44)|0);
    $0 = $885;
    $1082 = $0;
    STACKTOP = sp;return ($1082|0);
   }
   $902 = $3;
   $903 = ((($902)) + 8|0);
   $904 = HEAP32[$903>>2]|0;
   $905 = (15660 + (($904*12)|0)|0);
   $906 = HEAP32[$905>>2]|0;
   $temp = $906;
   $907 = $2;
   $908 = ((($907)) + 56|0);
   $909 = HEAP32[$908>>2]|0;
   $sym = $909;
   $910 = $2;
   $911 = ((($910)) + 60|0);
   $912 = HEAP32[$911>>2]|0;
   $913 = ($912|0)!=(0|0);
   if ($913) {
    $914 = $2;
    $915 = ((($914)) + 60|0);
    $916 = HEAP32[$915>>2]|0;
    $sym = $916;
   }
   $917 = $2;
   $918 = ((($917)) + 36|0);
   $919 = HEAP32[$918>>2]|0;
   $920 = ($919|0)!=(-2);
   do {
    if ($920) {
     $921 = $3;
     $922 = ((($921)) + 12|0);
     $923 = HEAP32[$922>>2]|0;
     $924 = $3;
     $925 = ((($924)) + 4|0);
     $926 = HEAP32[$925>>2]|0;
     $927 = (_strlen($926)|0);
     $928 = (($923) + ($927)|0);
     $929 = ((($928)) + 1|0);
     $name = $929;
    } else {
     $930 = $sym;
     $931 = ($930|0)!=(0|0);
     if ($931) {
      $932 = $sym;
      $933 = ((($932)) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $name = $934;
      break;
     }
     $935 = $2;
     $936 = ((($935)) + 20|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = ($937|0)!=(0|0);
     if ($938) {
      $939 = $2;
      $940 = ((($939)) + 52|0);
      $941 = HEAP8[$940>>0]|0;
      $942 = $941 & 1;
      $943 = $942&255;
      $944 = ($943|0)==(0);
      if ($944) {
       $945 = $2;
       $946 = ((($945)) + 20|0);
       $947 = HEAP32[$946>>2]|0;
       $948 = ((($947)) + 4|0);
       $949 = HEAP32[$948>>2]|0;
       $name = $949;
       break;
      }
     }
     $950 = $3;
     $951 = ((($950)) + 12|0);
     $952 = HEAP32[$951>>2]|0;
     $953 = $3;
     $954 = ((($953)) + 4|0);
     $955 = HEAP32[$954>>2]|0;
     $956 = (_strlen($955)|0);
     $957 = (($952) + ($956)|0);
     $958 = ((($957)) + 1|0);
     $name = $958;
    }
   } while(0);
   $959 = $2;
   $960 = ((($959)) + 40|0);
   $961 = HEAP32[$960>>2]|0;
   L227: do {
    switch ($961|0) {
    case 0:  {
     $962 = $2;
     $963 = ((($962)) + 60|0);
     $964 = HEAP32[$963>>2]|0;
     $965 = ($964|0)!=(0|0);
     if ($965) {
      $966 = $2;
      $967 = ((($966)) + 60|0);
      $968 = HEAP32[$967>>2]|0;
      $969 = ((($968)) + 16|0);
      $970 = HEAP32[$969>>2]|0;
      $971 = ($970|0)!=(7);
      if ($971) {
       $972 = $2;
       $973 = ((($972)) + 60|0);
       $974 = HEAP32[$973>>2]|0;
       $975 = ((($974)) + 20|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = ($976|0)==(193);
       $978 = $temp;
       if ($977) {
        $979 = $978 & 64;
        $980 = ($979|0)==(0);
        if (!($980)) {
         break L227;
        }
        $981 = $2;
        $982 = $3;
        $983 = ((($982)) + 4|0);
        $984 = HEAP32[$983>>2]|0;
        $985 = $name;
        $986 = (_invalid_operand($981,$984,$985)|0);
        $0 = $986;
        $1082 = $0;
        STACKTOP = sp;return ($1082|0);
       } else {
        $987 = $978 & 16;
        $988 = ($987|0)==(0);
        if (!($988)) {
         break L227;
        }
        $989 = $2;
        $990 = $3;
        $991 = ((($990)) + 4|0);
        $992 = HEAP32[$991>>2]|0;
        $993 = $name;
        $994 = (_invalid_operand($989,$992,$993)|0);
        $0 = $994;
        $1082 = $0;
        STACKTOP = sp;return ($1082|0);
       }
      }
     }
     $995 = $2;
     $996 = ((($995)) + 52|0);
     $997 = HEAP8[$996>>0]|0;
     $998 = ($997&255) >>> 3;
     $999 = $998 & 1;
     $1000 = $999&255;
     $1001 = ($1000|0)!=(0);
     $1002 = $temp;
     if ($1001) {
      $1003 = $1002 & 1;
      $1004 = ($1003|0)==(0);
      if (!($1004)) {
       break L227;
      }
      $1005 = $2;
      $1006 = $3;
      $1007 = ((($1006)) + 4|0);
      $1008 = HEAP32[$1007>>2]|0;
      $1009 = $name;
      $1010 = (_invalid_operand($1005,$1008,$1009)|0);
      $0 = $1010;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     } else {
      $1011 = $1002 & 32;
      $1012 = ($1011|0)==(0);
      if (!($1012)) {
       break L227;
      }
      $1013 = $2;
      $1014 = $3;
      $1015 = ((($1014)) + 4|0);
      $1016 = HEAP32[$1015>>2]|0;
      $1017 = $name;
      $1018 = (_invalid_operand($1013,$1016,$1017)|0);
      $0 = $1018;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
     break;
    }
    case 1:  {
     $1019 = $2;
     $1020 = ((($1019)) + 52|0);
     $1021 = HEAP8[$1020>>0]|0;
     $1022 = $1021 & 1;
     $1023 = $1022&255;
     $1024 = ($1023|0)==(1);
     if ($1024) {
      $1025 = $2;
      $1026 = ((($1025)) + 56|0);
      $1027 = HEAP32[$1026>>2]|0;
      $1028 = ($1027|0)==(0|0);
      if ($1028) {
       $1029 = $temp;
       $1030 = $1029 & 4;
       $1031 = ($1030|0)==(0);
       if (!($1031)) {
        break L227;
       }
       $1032 = $2;
       $1033 = $3;
       $1034 = ((($1033)) + 4|0);
       $1035 = HEAP32[$1034>>2]|0;
       $1036 = $name;
       $1037 = (_invalid_operand($1032,$1035,$1036)|0);
       $0 = $1037;
       $1082 = $0;
       STACKTOP = sp;return ($1082|0);
      }
     }
     $1038 = $temp;
     $1039 = $1038 & 2;
     $1040 = ($1039|0)==(0);
     if ($1040) {
      $1041 = $2;
      $1042 = $3;
      $1043 = ((($1042)) + 4|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = $name;
      $1046 = (_invalid_operand($1041,$1044,$1045)|0);
      $0 = $1046;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
     break;
    }
    case 2:  {
     $1047 = $temp;
     $1048 = $1047 & 8;
     $1049 = ($1048|0)==(0);
     if ($1049) {
      $1050 = $2;
      $1051 = $3;
      $1052 = ((($1051)) + 4|0);
      $1053 = HEAP32[$1052>>2]|0;
      $1054 = $name;
      $1055 = (_invalid_operand($1050,$1053,$1054)|0);
      $0 = $1055;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
     break;
    }
    case 3:  {
     $1056 = $temp;
     $1057 = $1056 & 256;
     $1058 = ($1057|0)==(0);
     if ($1058) {
      $1059 = HEAP32[8976>>2]|0;
      $1060 = (FUNCTION_TABLE_iii[$1059 & 255](270,$vararg_buffer47)|0);
      $0 = $1060;
      $1082 = $0;
      STACKTOP = sp;return ($1082|0);
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $1061 = $3;
   $1062 = ((($1061)) + 8|0);
   $1063 = HEAP32[$1062>>2]|0;
   $1064 = (15660 + (($1063*12)|0)|0);
   $1065 = ((($1064)) + 4|0);
   $1066 = HEAP32[$1065>>2]|0;
   $1067 = (8992 + ($1066<<2)|0);
   $1068 = HEAP32[$1067>>2]|0;
   $1069 = $3;
   $1070 = ((($1069)) + 8|0);
   $1071 = HEAP32[$1070>>2]|0;
   $1072 = $1;
   $1073 = $2;
   $1074 = $sym;
   $1075 = $name;
   $1076 = (FUNCTION_TABLE_iiiiii[$1068 & 127]($1071,$1072,$1073,$1074,$1075)|0);
   $0 = $1076;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
   break;
  }
  default: {
   $1077 = HEAP32[8976>>2]|0;
   $1078 = $3;
   $1079 = ((($1078)) + 4|0);
   $1080 = HEAP32[$1079>>2]|0;
   HEAP32[$vararg_buffer50>>2] = $1080;
   $1081 = (FUNCTION_TABLE_iii[$1077 & 255](209,$vararg_buffer50)|0);
   $0 = $1081;
   $1082 = $0;
   STACKTOP = sp;return ($1082|0);
  }
  }
 } while(0);
 $0 = 0;
 $1082 = $0;
 STACKTOP = sp;return ($1082|0);
}
function _CheckAssume($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $sym = 0;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255) >>> 1;
 $5 = $4 & 1;
 $6 = $5&255;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $0;
   $13 = ((($12)) + 64|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(195);
   if ($17) {
    $18 = $0;
    $19 = ((($18)) + 64|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 28|0);
    $22 = ((($21)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($24|0)==(1);
    if ($25) {
     $26 = $0;
     $27 = ((($26)) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($28)) + 28|0);
     $30 = ((($29)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $0;
     $34 = ((($33)) + 44|0);
     HEAP32[$34>>2] = $32;
     $35 = $0;
     $36 = ((($35)) + 64|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($37)) + 32|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $0;
     $41 = ((($40)) + 64|0);
     HEAP32[$41>>2] = $39;
     STACKTOP = sp;return;
    }
   }
  }
 }
 $42 = $0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $0;
  $47 = ((($46)) + 20|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (_GetStdAssumeEx($51)|0);
  $sym = $52;
 }
 $53 = $sym;
 $54 = ($53|0)!=(0|0);
 if (!($54)) {
  $55 = $0;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $59 = $0;
   $60 = ((($59)) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 1|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = (_GetStdAssumeEx($64)|0);
   $sym = $65;
  }
 }
 $66 = $sym;
 $67 = ($66|0)!=(0|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = $sym;
 $69 = ((($68)) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(196);
 $72 = $sym;
 if ($71) {
  $73 = ((($72)) + 52|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $0;
  $76 = ((($75)) + 64|0);
  HEAP32[$76>>2] = $74;
  STACKTOP = sp;return;
 }
 $77 = ((($72)) + 28|0);
 $78 = ((($77)) + 1|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = ($80|0)==(1);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = $sym;
 $83 = ((($82)) + 32|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = ((($85)) + 64|0);
 HEAP32[$86>>2] = $84;
 $87 = $sym;
 $88 = ((($87)) + 32|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 $91 = $sym;
 if ($90) {
  $92 = ((($91)) + 32|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 20|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $0;
  $97 = ((($96)) + 44|0);
  HEAP32[$97>>2] = $95;
  STACKTOP = sp;return;
 } else {
  $98 = ((($91)) + 28|0);
  $99 = ((($98)) + 2|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $0;
  $103 = ((($102)) + 44|0);
  HEAP32[$103>>2] = $101;
  STACKTOP = sp;return;
 }
}
function _TokenAssign($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd1;
 $1 = $opnd2;
 $2 = $0;
 $3 = $1;
 dest=$2; src=$3; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _check_streg($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = ((($3)) + 48|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = HEAP32[8976>>2]|0;
  $9 = (FUNCTION_TABLE_iii[$8 & 255](170,$vararg_buffer)|0);
  $0 = $9;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $10 = $1;
 $11 = ((($10)) + 48|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = (($12) + 1)<<24>>24;
 HEAP8[$11>>0] = $13;
 $14 = $2;
 $15 = ((($14)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[8976>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 255](252,$vararg_buffer1)|0);
  $0 = $19;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $20 = $2;
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  HEAP32[$22>>2] = $21;
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _plus_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = $2;
 $5 = (_check_direct_reg($3,$4)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = HEAP32[8976>>2]|0;
  $8 = (FUNCTION_TABLE_iii[$7 & 255](170,$vararg_buffer)|0);
  $0 = $8;
  $310 = $0;
  STACKTOP = sp;return ($310|0);
 }
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 40|0);
  HEAP32[$14>>2] = 1;
 }
 $15 = $2;
 $16 = ((($15)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  $19 = $2;
  $20 = ((($19)) + 40|0);
  HEAP32[$20>>2] = 1;
 }
 $21 = $2;
 $22 = ((($21)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $1;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $1;
   $30 = ((($29)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $2;
   $35 = ((($34)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($33|0)==($38|0);
   if ($39) {
    $40 = HEAP32[8976>>2]|0;
    $41 = (FUNCTION_TABLE_iii[$40 & 255](68,$vararg_buffer1)|0);
    $0 = $41;
    $310 = $0;
    STACKTOP = sp;return ($310|0);
   }
  }
  $42 = $2;
  $43 = ((($42)) + 32|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = ((($45)) + 32|0);
  HEAP32[$46>>2] = $44;
 }
 $47 = $1;
 $48 = ((($47)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  $51 = $2;
  $52 = ((($51)) + 40|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0);
  if ($54) {
   $55 = $2;
   $56 = $55;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = $1;
   $63 = $62;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (_i64Add(($65|0),($68|0),($58|0),($61|0))|0);
   $70 = tempRet0;
   $71 = $62;
   $72 = $71;
   HEAP32[$72>>2] = $69;
   $73 = (($71) + 4)|0;
   $74 = $73;
   HEAP32[$74>>2] = $70;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 do {
  if ((label|0) == 15) {
   $75 = $1;
   $76 = ((($75)) + 40|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(1);
   if ($78) {
    $79 = $2;
    $80 = ((($79)) + 40|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(1);
    if ($82) {
     $83 = $1;
     _fix_struct_value($83);
     $84 = $2;
     _fix_struct_value($84);
     $85 = $1;
     $86 = $2;
     $87 = (_index_connect($85,$86)|0);
     $88 = ($87|0)==(-1);
     if ($88) {
      $0 = -1;
      $310 = $0;
      STACKTOP = sp;return ($310|0);
     }
     $89 = $2;
     $90 = ((($89)) + 56|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)!=(0|0);
     if ($92) {
      $93 = $1;
      $94 = ((($93)) + 56|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)!=(0|0);
      if ($96) {
       $97 = $1;
       $98 = ((($97)) + 56|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = ((($99)) + 16|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)!=(0);
       if ($102) {
        $103 = $2;
        $104 = ((($103)) + 56|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = ((($105)) + 16|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($107|0)!=(0);
        if ($108) {
         $109 = HEAP32[8976>>2]|0;
         $110 = (FUNCTION_TABLE_iii[$109 & 255](173,$vararg_buffer4)|0);
         $0 = $110;
         $310 = $0;
         STACKTOP = sp;return ($310|0);
        }
       }
      }
      $111 = $2;
      $112 = ((($111)) + 28|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $1;
      $115 = ((($114)) + 28|0);
      HEAP32[$115>>2] = $113;
      $116 = $2;
      $117 = ((($116)) + 56|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = $1;
      $120 = ((($119)) + 56|0);
      HEAP32[$120>>2] = $118;
      $121 = $1;
      $122 = ((($121)) + 44|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(192);
      if ($124) {
       $125 = $2;
       $126 = ((($125)) + 44|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $1;
       $129 = ((($128)) + 44|0);
       HEAP32[$129>>2] = $127;
      }
      $130 = $2;
      $131 = ((($130)) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($132|0)!=(-2);
      if ($133) {
       $134 = $2;
       $135 = ((($134)) + 36|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = $1;
       $138 = ((($137)) + 36|0);
       HEAP32[$138>>2] = $136;
      }
     }
     $139 = $2;
     $140 = $139;
     $141 = $140;
     $142 = HEAP32[$141>>2]|0;
     $143 = (($140) + 4)|0;
     $144 = $143;
     $145 = HEAP32[$144>>2]|0;
     $146 = $1;
     $147 = $146;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (_i64Add(($149|0),($152|0),($142|0),($145|0))|0);
     $154 = tempRet0;
     $155 = $146;
     $156 = $155;
     HEAP32[$156>>2] = $153;
     $157 = (($155) + 4)|0;
     $158 = $157;
     HEAP32[$158>>2] = $154;
     $159 = $2;
     $160 = ((($159)) + 64|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)!=(0|0);
     if (!($162)) {
      break;
     }
     $163 = $2;
     $164 = ((($163)) + 64|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $1;
     $167 = ((($166)) + 64|0);
     HEAP32[$167>>2] = $165;
     break;
    }
   }
   $168 = $1;
   $169 = $2;
   $170 = (_check_both($168,$169,0,1)|0);
   $171 = ($170<<24>>24)!=(0);
   $172 = $1;
   if (!($171)) {
    $308 = $2;
    $309 = (_ConstError($172,$308)|0);
    $0 = $309;
    $310 = $0;
    STACKTOP = sp;return ($310|0);
   }
   $173 = ((($172)) + 40|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($174|0)==(0);
   do {
    if ($175) {
     $176 = $1;
     $177 = $176;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = (($177) + 4)|0;
     $181 = $180;
     $182 = HEAP32[$181>>2]|0;
     $183 = $2;
     $184 = $183;
     $185 = $184;
     $186 = HEAP32[$185>>2]|0;
     $187 = (($184) + 4)|0;
     $188 = $187;
     $189 = HEAP32[$188>>2]|0;
     $190 = (_i64Add(($186|0),($189|0),($179|0),($182|0))|0);
     $191 = tempRet0;
     $192 = $183;
     $193 = $192;
     HEAP32[$193>>2] = $190;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $191;
     $196 = $1;
     $197 = ((($196)) + 52|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198 & 1;
     $200 = $199&255;
     $201 = $2;
     $202 = ((($201)) + 52|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203 & 1;
     $205 = $204&255;
     $206 = $205 | $200;
     $207 = $206&255;
     $208 = HEAP8[$202>>0]|0;
     $209 = $207 & 1;
     $210 = $208 & -2;
     $211 = $210 | $209;
     HEAP8[$202>>0] = $211;
     $212 = $1;
     $213 = ((($212)) + 52|0);
     $214 = HEAP8[$213>>0]|0;
     $215 = ($214&255) >>> 1;
     $216 = $215 & 1;
     $217 = $216&255;
     $218 = ($217|0)==(1);
     $219 = $2;
     if ($218) {
      $220 = ((($219)) + 52|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $221 & -3;
      $223 = $222 | 2;
      HEAP8[$220>>0] = $223;
      $224 = $1;
      $225 = ((($224)) + 44|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = $2;
      $228 = ((($227)) + 44|0);
      HEAP32[$228>>2] = $226;
     } else {
      $229 = ((($219)) + 44|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ($230|0)==(192);
      if ($231) {
       $232 = $1;
       $233 = ((($232)) + 44|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = $2;
       $236 = ((($235)) + 44|0);
       HEAP32[$236>>2] = $234;
      }
     }
     $237 = $2;
     $238 = ((($237)) + 60|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = ($239|0)==(0|0);
     if ($240) {
      $241 = $1;
      $242 = ((($241)) + 60|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $2;
      $245 = ((($244)) + 60|0);
      HEAP32[$245>>2] = $243;
     }
     $246 = $2;
     $247 = ((($246)) + 64|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)!=(0|0);
     if ($249) {
      $250 = $2;
      $251 = ((($250)) + 64|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = $1;
      $254 = ((($253)) + 64|0);
      HEAP32[$254>>2] = $252;
     }
     $255 = $1;
     $256 = $2;
     _TokenAssign($255,$256);
    } else {
     $257 = $2;
     $258 = $257;
     $259 = $258;
     $260 = HEAP32[$259>>2]|0;
     $261 = (($258) + 4)|0;
     $262 = $261;
     $263 = HEAP32[$262>>2]|0;
     $264 = $1;
     $265 = $264;
     $266 = $265;
     $267 = HEAP32[$266>>2]|0;
     $268 = (($265) + 4)|0;
     $269 = $268;
     $270 = HEAP32[$269>>2]|0;
     $271 = (_i64Add(($267|0),($270|0),($260|0),($263|0))|0);
     $272 = tempRet0;
     $273 = $264;
     $274 = $273;
     HEAP32[$274>>2] = $271;
     $275 = (($273) + 4)|0;
     $276 = $275;
     HEAP32[$276>>2] = $272;
     $277 = $2;
     $278 = ((($277)) + 60|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)!=(0|0);
     if ($280) {
      $281 = $2;
      $282 = ((($281)) + 60|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = $1;
      $285 = ((($284)) + 60|0);
      HEAP32[$285>>2] = $283;
      $286 = $2;
      $287 = ((($286)) + 44|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = $1;
      $290 = ((($289)) + 44|0);
      HEAP32[$290>>2] = $288;
      break;
     }
     $291 = $1;
     $292 = ((($291)) + 44|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = ($293|0)==(192);
     if ($294) {
      $295 = $2;
      $296 = ((($295)) + 52|0);
      $297 = HEAP8[$296>>0]|0;
      $298 = ($297&255) >>> 3;
      $299 = $298 & 1;
      $300 = $299&255;
      $301 = ($300|0)==(0);
      if ($301) {
       $302 = $2;
       $303 = ((($302)) + 44|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $1;
       $306 = ((($305)) + 44|0);
       HEAP32[$306>>2] = $304;
      }
     }
    }
   } while(0);
   $307 = $1;
   _fix_struct_value($307);
  }
 } while(0);
 $0 = 0;
 $310 = $0;
 STACKTOP = sp;return ($310|0);
}
function _positive_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $2;
 _MakeConst($3);
 $4 = $2;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 40|0);
   HEAP32[$9>>2] = 0;
   $10 = $2;
   $11 = $10;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = $17;
   $19 = $18;
   HEAP32[$19>>2] = $13;
   $20 = (($18) + 4)|0;
   $21 = $20;
   HEAP32[$21>>2] = $16;
   $22 = $2;
   $23 = ((($22)) + 8|0);
   $24 = $23;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = ((($30)) + 8|0);
   $32 = $31;
   $33 = $32;
   HEAP32[$33>>2] = $26;
   $34 = (($32) + 4)|0;
   $35 = $34;
   HEAP32[$35>>2] = $29;
  } else {
   $36 = $2;
   $37 = ((($36)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(3);
   if ($39) {
    $40 = $1;
    $41 = ((($40)) + 40|0);
    HEAP32[$41>>2] = 3;
    $42 = $2;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $1;
    $46 = ((($45)) + 16|0);
    HEAP32[$46>>2] = $44;
    $47 = $2;
    $48 = ((($47)) + 52|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49&255) >>> 5;
    $51 = $50 & 1;
    $52 = $51&255;
    $53 = $1;
    $54 = ((($53)) + 52|0);
    $55 = $52&255;
    $56 = HEAP8[$54>>0]|0;
    $57 = $55 & 1;
    $58 = ($57 << 5)&255;
    $59 = $56 & -33;
    $60 = $59 | $58;
    HEAP8[$54>>0] = $60;
    break;
   }
   $61 = HEAP32[8976>>2]|0;
   $62 = (FUNCTION_TABLE_iii[$61 & 255](65,$vararg_buffer)|0);
   $0 = $62;
   $63 = $0;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $0 = 0;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _negative_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $2;
 _MakeConst($3);
 $4 = $2;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 40|0);
   HEAP32[$9>>2] = 0;
   $10 = $2;
   $11 = $10;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + 4)|0;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (_i64Subtract(0,0,($13|0),($16|0))|0);
   $18 = tempRet0;
   $19 = $1;
   $20 = $19;
   $21 = $20;
   HEAP32[$21>>2] = $17;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $18;
   $24 = $2;
   $25 = ((($24)) + 8|0);
   $26 = $25;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)!=(0);
   $33 = ($31|0)!=(0);
   $34 = $32 | $33;
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 8|0);
    $37 = $36;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (_i64Subtract(0,0,($39|0),($42|0))|0);
    $44 = tempRet0;
    $45 = (_i64Subtract(($43|0),($44|0),1,0)|0);
    $46 = tempRet0;
    $47 = $1;
    $48 = ((($47)) + 8|0);
    $49 = $48;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $46;
   }
   $53 = $2;
   $54 = ((($53)) + 52|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55&255) >>> 5;
   $57 = $56 & 1;
   $58 = $57&255;
   $59 = (1 - ($58))|0;
   $60 = $1;
   $61 = ((($60)) + 52|0);
   $62 = $59&255;
   $63 = HEAP8[$61>>0]|0;
   $64 = $62 & 1;
   $65 = ($64 << 5)&255;
   $66 = $63 & -33;
   $67 = $66 | $65;
   HEAP8[$61>>0] = $67;
  } else {
   $68 = $2;
   $69 = ((($68)) + 40|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(3);
   if ($71) {
    $72 = $1;
    $73 = ((($72)) + 40|0);
    HEAP32[$73>>2] = 3;
    $74 = $2;
    $75 = ((($74)) + 16|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $1;
    $78 = ((($77)) + 16|0);
    HEAP32[$78>>2] = $76;
    $79 = $2;
    $80 = ((($79)) + 52|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81&255) >>> 5;
    $83 = $82 & 1;
    $84 = $83&255;
    $85 = (1 - ($84))|0;
    $86 = $1;
    $87 = ((($86)) + 52|0);
    $88 = $85&255;
    $89 = HEAP8[$87>>0]|0;
    $90 = $88 & 1;
    $91 = ($90 << 5)&255;
    $92 = $89 & -33;
    $93 = $92 | $91;
    HEAP8[$87>>0] = $93;
    break;
   }
   $94 = HEAP32[8976>>2]|0;
   $95 = (FUNCTION_TABLE_iii[$94 & 255](65,$vararg_buffer)|0);
   $0 = $95;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
 } while(0);
 $0 = 0;
 $96 = $0;
 STACKTOP = sp;return ($96|0);
}
function _minus_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = $2;
 $5 = (_check_direct_reg($3,$4)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = HEAP32[8976>>2]|0;
  $8 = (FUNCTION_TABLE_iii[$7 & 255](170,$vararg_buffer)|0);
  $0 = $8;
  $345 = $0;
  STACKTOP = sp;return ($345|0);
 }
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(1);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = $2;
   $18 = ((($17)) + 56|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $2;
    $22 = ((($21)) + 56|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    if (!($26)) {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $27 = $2;
  _MakeConst($27);
 }
 $28 = $1;
 $29 = ((($28)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = $2;
  $33 = ((($32)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $2;
   $37 = $36;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = $43;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (_i64Subtract(($46|0),($49|0),($39|0),($42|0))|0);
   $51 = tempRet0;
   $52 = $43;
   $53 = $52;
   HEAP32[$53>>2] = $50;
   $54 = (($52) + 4)|0;
   $55 = $54;
   HEAP32[$55>>2] = $51;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   $56 = $1;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(1);
   if ($59) {
    $60 = $2;
    $61 = ((($60)) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0);
    if ($63) {
     $64 = $2;
     $65 = $64;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = (($65) + 4)|0;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = $1;
     $72 = $71;
     $73 = $72;
     $74 = HEAP32[$73>>2]|0;
     $75 = (($72) + 4)|0;
     $76 = $75;
     $77 = HEAP32[$76>>2]|0;
     $78 = (_i64Subtract(($74|0),($77|0),($67|0),($70|0))|0);
     $79 = tempRet0;
     $80 = $71;
     $81 = $80;
     HEAP32[$81>>2] = $78;
     $82 = (($80) + 4)|0;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = $1;
     _fix_struct_value($84);
     break;
    }
   }
   $85 = $1;
   $86 = ((($85)) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(1);
   if ($88) {
    $89 = $2;
    $90 = ((($89)) + 40|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(1);
    if ($92) {
     $93 = $1;
     _fix_struct_value($93);
     $94 = $2;
     _fix_struct_value($94);
     $95 = $2;
     $96 = ((($95)) + 52|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97 & 1;
     $99 = $98&255;
     $100 = ($99|0)!=(0);
     if ($100) {
      $101 = HEAP32[8976>>2]|0;
      $102 = (FUNCTION_TABLE_iii[$101 & 255](170,$vararg_buffer1)|0);
      $0 = $102;
      $345 = $0;
      STACKTOP = sp;return ($345|0);
     }
     $103 = $2;
     $104 = ((($103)) + 28|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(0|0);
     if ($106) {
      $107 = $2;
      $108 = $107;
      $109 = $108;
      $110 = HEAP32[$109>>2]|0;
      $111 = (($108) + 4)|0;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = $1;
      $115 = $114;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 4)|0;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = (_i64Subtract(($117|0),($120|0),($110|0),($113|0))|0);
      $122 = tempRet0;
      $123 = $114;
      $124 = $123;
      HEAP32[$124>>2] = $121;
      $125 = (($123) + 4)|0;
      $126 = $125;
      HEAP32[$126>>2] = $122;
      $127 = $2;
      $128 = ((($127)) + 52|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 & 1;
      $131 = $130&255;
      $132 = $1;
      $133 = ((($132)) + 52|0);
      $134 = HEAP8[$133>>0]|0;
      $135 = $134 & 1;
      $136 = $135&255;
      $137 = $136 | $131;
      $138 = $137&255;
      $139 = HEAP8[$133>>0]|0;
      $140 = $138 & 1;
      $141 = $139 & -2;
      $142 = $141 | $140;
      HEAP8[$133>>0] = $142;
      break;
     }
     $143 = $1;
     $144 = ((($143)) + 28|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)==(0|0);
     if (!($146)) {
      $147 = $1;
      $148 = ((($147)) + 56|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)==(0|0);
      if (!($150)) {
       $151 = $2;
       $152 = ((($151)) + 56|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if (!($154)) {
        $157 = $1;
        $158 = ((($157)) + 56|0);
        $159 = HEAP32[$158>>2]|0;
        $sym = $159;
        $160 = $sym;
        $161 = ((($160)) + 8|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = $1;
        $164 = HEAP32[$163>>2]|0;
        $165 = (($164) + ($162))|0;
        HEAP32[$163>>2] = $165;
        $166 = $2;
        $167 = ((($166)) + 56|0);
        $168 = HEAP32[$167>>2]|0;
        $sym = $168;
        $169 = HEAP32[4884>>2]|0;
        $170 = ($169>>>0)>(0);
        if ($170) {
         $171 = $sym;
         $172 = ((($171)) + 16|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ($173|0)==(2);
         if ($174) {
          label = 27;
         } else {
          $175 = $1;
          $176 = ((($175)) + 56|0);
          $177 = HEAP32[$176>>2]|0;
          $178 = ((($177)) + 16|0);
          $179 = HEAP32[$178>>2]|0;
          $180 = ($179|0)==(2);
          if ($180) {
           label = 27;
          }
         }
         if ((label|0) == 27) {
          $181 = $sym;
          $182 = $1;
          $183 = ((($182)) + 56|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = ($181|0)!=($184|0);
          if ($185) {
           $186 = HEAP32[8976>>2]|0;
           $187 = $1;
           $188 = ((($187)) + 56|0);
           $189 = HEAP32[$188>>2]|0;
           $190 = ((($189)) + 4|0);
           $191 = HEAP32[$190>>2]|0;
           HEAP32[$vararg_buffer7>>2] = $191;
           $192 = (FUNCTION_TABLE_iii[$186 & 255](193,$vararg_buffer7)|0);
           $0 = $192;
           $345 = $0;
           STACKTOP = sp;return ($345|0);
          }
         }
         $193 = $sym;
         $194 = ((($193)) + 12|0);
         $195 = HEAP32[$194>>2]|0;
         $196 = $1;
         $197 = ((($196)) + 56|0);
         $198 = HEAP32[$197>>2]|0;
         $199 = ((($198)) + 12|0);
         $200 = HEAP32[$199>>2]|0;
         $201 = ($195|0)!=($200|0);
         if ($201) {
          $202 = HEAP32[8976>>2]|0;
          $203 = (FUNCTION_TABLE_iii[$202 & 255](192,$vararg_buffer10)|0);
          $0 = $203;
          $345 = $0;
          STACKTOP = sp;return ($345|0);
         }
        }
        $204 = $1;
        $205 = ((($204)) + 40|0);
        HEAP32[$205>>2] = 0;
        $206 = $1;
        $207 = ((($206)) + 56|0);
        $208 = HEAP32[$207>>2]|0;
        $209 = ((($208)) + 16|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = ($210|0)==(0);
        if ($211) {
         label = 33;
        } else {
         $212 = $2;
         $213 = ((($212)) + 56|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = ((($214)) + 16|0);
         $216 = HEAP32[$215>>2]|0;
         $217 = ($216|0)==(0);
         if ($217) {
          label = 33;
         } else {
          $237 = $sym;
          $238 = ((($237)) + 8|0);
          $239 = HEAP32[$238>>2]|0;
          $240 = ($239|0)<(0);
          $241 = $240 << 31 >> 31;
          $242 = $1;
          $243 = $242;
          $244 = $243;
          $245 = HEAP32[$244>>2]|0;
          $246 = (($243) + 4)|0;
          $247 = $246;
          $248 = HEAP32[$247>>2]|0;
          $249 = (_i64Subtract(($245|0),($248|0),($239|0),($241|0))|0);
          $250 = tempRet0;
          $251 = $242;
          $252 = $251;
          HEAP32[$252>>2] = $249;
          $253 = (($251) + 4)|0;
          $254 = $253;
          HEAP32[$254>>2] = $250;
          $255 = $2;
          $256 = $255;
          $257 = $256;
          $258 = HEAP32[$257>>2]|0;
          $259 = (($256) + 4)|0;
          $260 = $259;
          $261 = HEAP32[$260>>2]|0;
          $262 = $1;
          $263 = $262;
          $264 = $263;
          $265 = HEAP32[$264>>2]|0;
          $266 = (($263) + 4)|0;
          $267 = $266;
          $268 = HEAP32[$267>>2]|0;
          $269 = (_i64Subtract(($265|0),($268|0),($258|0),($261|0))|0);
          $270 = tempRet0;
          $271 = $262;
          $272 = $271;
          HEAP32[$272>>2] = $269;
          $273 = (($271) + 4)|0;
          $274 = $273;
          HEAP32[$274>>2] = $270;
          $275 = $1;
          $276 = ((($275)) + 28|0);
          HEAP32[$276>>2] = 0;
          $277 = $1;
          $278 = ((($277)) + 56|0);
          HEAP32[$278>>2] = 0;
         }
        }
        if ((label|0) == 33) {
         $218 = $1;
         HEAP32[$218>>2] = 1;
         $219 = $1;
         $220 = ((($219)) + 56|0);
         $221 = HEAP32[$220>>2]|0;
         $222 = ((($221)) + 16|0);
         $223 = HEAP32[$222>>2]|0;
         $224 = ($223|0)!=(0);
         if ($224) {
          $225 = $2;
          $226 = ((($225)) + 56|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = $1;
          $229 = ((($228)) + 56|0);
          HEAP32[$229>>2] = $227;
          $230 = $2;
          $231 = ((($230)) + 28|0);
          $232 = HEAP32[$231>>2]|0;
          $233 = $1;
          $234 = ((($233)) + 28|0);
          HEAP32[$234>>2] = $232;
         }
         $235 = $1;
         $236 = ((($235)) + 40|0);
         HEAP32[$236>>2] = 1;
        }
        $279 = $1;
        $280 = ((($279)) + 52|0);
        $281 = HEAP8[$280>>0]|0;
        $282 = $281 & 1;
        $283 = $282&255;
        $284 = ($283|0)==(0);
        $285 = $1;
        if ($284) {
         $286 = ((($285)) + 36|0);
         $287 = HEAP32[$286>>2]|0;
         $288 = ($287|0)==(167);
         if ($288) {
          $289 = $2;
          $290 = ((($289)) + 36|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = ($291|0)==(167);
          if ($292) {
           $293 = $1;
           $294 = ((($293)) + 36|0);
           HEAP32[$294>>2] = -2;
          }
         }
        } else {
         $295 = ((($285)) + 40|0);
         HEAP32[$295>>2] = 1;
        }
        $296 = $1;
        $297 = ((($296)) + 52|0);
        $298 = HEAP8[$297>>0]|0;
        $299 = $298 & -3;
        HEAP8[$297>>0] = $299;
        $300 = $1;
        $301 = ((($300)) + 44|0);
        HEAP32[$301>>2] = 192;
        break;
       }
      }
     }
     $155 = HEAP32[8976>>2]|0;
     $156 = (FUNCTION_TABLE_iii[$155 & 255](188,$vararg_buffer4)|0);
     $0 = $156;
     $345 = $0;
     STACKTOP = sp;return ($345|0);
    }
   }
   $302 = $1;
   $303 = ((($302)) + 40|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = ($304|0)==(2);
   if ($305) {
    $306 = $2;
    $307 = ((($306)) + 40|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ($308|0)==(0);
    if ($309) {
     $310 = $2;
     $311 = $310;
     $312 = $311;
     $313 = HEAP32[$312>>2]|0;
     $314 = (($311) + 4)|0;
     $315 = $314;
     $316 = HEAP32[$315>>2]|0;
     $317 = (___muldi3(-1,-1,($313|0),($316|0))|0);
     $318 = tempRet0;
     $319 = $1;
     $320 = $319;
     $321 = $320;
     HEAP32[$321>>2] = $317;
     $322 = (($320) + 4)|0;
     $323 = $322;
     HEAP32[$323>>2] = $318;
     $324 = $2;
     $325 = ((($324)) + 52|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326 & 1;
     $328 = $327&255;
     $329 = $1;
     $330 = ((($329)) + 52|0);
     $331 = HEAP8[$330>>0]|0;
     $332 = $331 & 1;
     $333 = $332&255;
     $334 = $333 | $328;
     $335 = $334&255;
     $336 = HEAP8[$330>>0]|0;
     $337 = $335 & 1;
     $338 = $336 & -2;
     $339 = $338 | $337;
     HEAP8[$330>>0] = $339;
     $340 = $1;
     $341 = ((($340)) + 40|0);
     HEAP32[$341>>2] = 1;
     break;
    }
   }
   $342 = $1;
   $343 = $2;
   $344 = (_ConstError($342,$343)|0);
   $0 = $344;
   $345 = $0;
   STACKTOP = sp;return ($345|0);
  }
 } while(0);
 $0 = 0;
 $345 = $0;
 STACKTOP = sp;return ($345|0);
}
function _dot_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = $2;
 $5 = (_check_direct_reg($3,$4)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = HEAP32[8976>>2]|0;
  $8 = (FUNCTION_TABLE_iii[$7 & 255](170,$vararg_buffer)|0);
  $0 = $8;
  $481 = $0;
  STACKTOP = sp;return ($481|0);
 }
 $9 = $1;
 $10 = ((($9)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 40|0);
  HEAP32[$14>>2] = 1;
 }
 $15 = $2;
 $16 = ((($15)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  $19 = $2;
  $20 = ((($19)) + 40|0);
  HEAP32[$20>>2] = 1;
 }
 $21 = $2;
 $22 = ((($21)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $2;
  $26 = ((($25)) + 56|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  $31 = HEAP32[4884>>2]|0;
  $32 = ($31|0)==(0);
  $or$cond = $30 & $32;
  if ($or$cond) {
   $33 = HEAP32[8984>>2]|0;
   $34 = ($33|0)!=(0|0);
   if (!($34)) {
    $35 = (_CreateTypeSymbol(0,109841,0)|0);
    HEAP32[8984>>2] = $35;
   }
   $36 = HEAP32[8984>>2]|0;
   $37 = $2;
   $38 = ((($37)) + 64|0);
   HEAP32[$38>>2] = $36;
   $39 = $2;
   $40 = ((($39)) + 52|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 & -9;
   $43 = $42 | 8;
   HEAP8[$40>>0] = $43;
   $44 = $2;
   $45 = ((($44)) + 56|0);
   HEAP32[$45>>2] = 0;
   $46 = $2;
   $47 = ((($46)) + 40|0);
   HEAP32[$47>>2] = 0;
  }
 }
 $48 = $1;
 $49 = ((($48)) + 40|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(1);
 if ($51) {
  $52 = $2;
  $53 = ((($52)) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(1);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if ($59) {
    $60 = HEAP32[(560)>>2]|0;
    $61 = $60 >>> 8;
    $62 = $61 & 1;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     $64 = $1;
     $65 = (_struct_field_error($64)|0);
     $0 = $65;
     $481 = $0;
     STACKTOP = sp;return ($481|0);
    }
   }
   $66 = $1;
   $67 = $2;
   $68 = (_index_connect($66,$67)|0);
   $69 = ($68|0)==(-1);
   if ($69) {
    $0 = -1;
    $481 = $0;
    STACKTOP = sp;return ($481|0);
   }
   $70 = $2;
   $71 = ((($70)) + 56|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0|0);
   if ($73) {
    $74 = $1;
    $75 = ((($74)) + 56|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = $1;
     $79 = ((($78)) + 56|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $2;
      $85 = ((($84)) + 56|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($86)) + 16|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)!=(0);
      if ($89) {
       $90 = HEAP32[8976>>2]|0;
       $91 = (FUNCTION_TABLE_iii[$90 & 255](173,$vararg_buffer2)|0);
       $0 = $91;
       $481 = $0;
       STACKTOP = sp;return ($481|0);
      }
     }
    }
    $92 = $2;
    $93 = ((($92)) + 28|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $1;
    $96 = ((($95)) + 28|0);
    HEAP32[$96>>2] = $94;
    $97 = $2;
    $98 = ((($97)) + 56|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $1;
    $101 = ((($100)) + 56|0);
    HEAP32[$101>>2] = $99;
   }
   $102 = $2;
   $103 = ((($102)) + 60|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)!=(0|0);
   if ($105) {
    $106 = $2;
    $107 = ((($106)) + 60|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $1;
    $110 = ((($109)) + 60|0);
    HEAP32[$110>>2] = $108;
   }
   $111 = $2;
   $112 = HEAP32[$111>>2]|0;
   $113 = $1;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + ($112))|0;
   HEAP32[$113>>2] = $115;
   $116 = $1;
   $117 = ((($116)) + 52|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = ($118&255) >>> 1;
   $120 = $119 & 1;
   $121 = $120&255;
   $122 = ($121|0)==(0);
   if ($122) {
    $123 = $2;
    $124 = ((($123)) + 44|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $1;
    $127 = ((($126)) + 44|0);
    HEAP32[$127>>2] = $125;
   }
   $128 = $2;
   $129 = ((($128)) + 64|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)!=(0|0);
   if ($131) {
    $132 = $2;
    $133 = ((($132)) + 64|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $1;
    $136 = ((($135)) + 64|0);
    HEAP32[$136>>2] = $134;
   }
  } else {
   label = 31;
  }
 } else {
  label = 31;
 }
 do {
  if ((label|0) == 31) {
   $137 = $1;
   $138 = ((($137)) + 40|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(0);
   if ($140) {
    $141 = $2;
    $142 = ((($141)) + 40|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(1);
    if ($144) {
     $145 = $1;
     $146 = ((($145)) + 52|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = ($147&255) >>> 3;
     $149 = $148 & 1;
     $150 = $149&255;
     $151 = ($150|0)!=(0);
     if ($151) {
      $152 = $1;
      $153 = ((($152)) + 64|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($154|0)!=(0|0);
      if ($155) {
       $156 = $2;
       $157 = ((($156)) + 52|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158 & -65;
       HEAP8[$157>>0] = $159;
       $160 = $1;
       $161 = $160;
       $162 = $161;
       HEAP32[$162>>2] = 0;
       $163 = (($161) + 4)|0;
       $164 = $163;
       HEAP32[$164>>2] = 0;
      }
     }
     $165 = HEAP32[(560)>>2]|0;
     $166 = $165 >>> 8;
     $167 = $166 & 1;
     $168 = ($167|0)!=(0);
     if (!($168)) {
      $169 = $1;
      $170 = ((($169)) + 52|0);
      $171 = HEAP8[$170>>0]|0;
      $172 = ($171&255) >>> 3;
      $173 = $172 & 1;
      $174 = $173&255;
      $175 = ($174|0)==(0);
      if ($175) {
       $176 = $1;
       $177 = ((($176)) + 60|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $180 = $1;
        $181 = (_struct_field_error($180)|0);
        $0 = $181;
        $481 = $0;
        STACKTOP = sp;return ($481|0);
       }
      }
     }
     $182 = $1;
     $183 = ((($182)) + 60|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)!=(0|0);
     if ($185) {
      $186 = $1;
      $187 = ((($186)) + 60|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ((($188)) + 16|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ($190|0)==(7);
      if ($191) {
       $192 = $1;
       $193 = ((($192)) + 60|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ((($194)) + 8|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = ($196|0)<(0);
       $198 = $197 << 31 >> 31;
       $199 = $1;
       $200 = $199;
       $201 = $200;
       HEAP32[$201>>2] = $196;
       $202 = (($200) + 4)|0;
       $203 = $202;
       HEAP32[$203>>2] = $198;
      }
     }
     $204 = $1;
     $205 = ((($204)) + 52|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206 & 1;
     $208 = $207&255;
     $209 = $2;
     $210 = ((($209)) + 52|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211 & 1;
     $213 = $212&255;
     $214 = $213 | $208;
     $215 = $214&255;
     $216 = HEAP8[$210>>0]|0;
     $217 = $215 & 1;
     $218 = $216 & -2;
     $219 = $218 | $217;
     HEAP8[$210>>0] = $219;
     $220 = $1;
     $221 = $220;
     $222 = $221;
     $223 = HEAP32[$222>>2]|0;
     $224 = (($221) + 4)|0;
     $225 = $224;
     $226 = HEAP32[$225>>2]|0;
     $227 = $2;
     $228 = $227;
     $229 = $228;
     $230 = HEAP32[$229>>2]|0;
     $231 = (($228) + 4)|0;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (_i64Add(($230|0),($233|0),($223|0),($226|0))|0);
     $235 = tempRet0;
     $236 = $227;
     $237 = $236;
     HEAP32[$237>>2] = $234;
     $238 = (($236) + 4)|0;
     $239 = $238;
     HEAP32[$239>>2] = $235;
     $240 = $2;
     $241 = ((($240)) + 60|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = ($242|0)!=(0|0);
     if ($243) {
      $244 = $2;
      $245 = ((($244)) + 64|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = $1;
      $248 = ((($247)) + 64|0);
      HEAP32[$248>>2] = $246;
     }
     $249 = $1;
     $250 = $2;
     _TokenAssign($249,$250);
     break;
    }
   }
   $251 = $1;
   $252 = ((($251)) + 40|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253|0)==(1);
   if ($254) {
    $255 = $2;
    $256 = ((($255)) + 40|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $259 = HEAP32[(560)>>2]|0;
     $260 = $259 >>> 8;
     $261 = $260 & 1;
     $262 = ($261|0)!=(0);
     do {
      if (!($262)) {
       $263 = $2;
       $264 = ((($263)) + 64|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($265|0)==(0|0);
       if (!($266)) {
        $267 = $2;
        $268 = ((($267)) + 52|0);
        $269 = HEAP8[$268>>0]|0;
        $270 = ($269&255) >>> 3;
        $271 = $270 & 1;
        $272 = $271&255;
        $273 = ($272|0)==(0);
        if (!($273)) {
         break;
        }
       }
       $274 = $2;
       $275 = ((($274)) + 60|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = ($276|0)==(0|0);
       if ($277) {
        $278 = $1;
        $279 = (_struct_field_error($278)|0);
        $0 = $279;
        $481 = $0;
        STACKTOP = sp;return ($481|0);
       }
      }
     } while(0);
     $280 = $2;
     $281 = ((($280)) + 52|0);
     $282 = HEAP8[$281>>0]|0;
     $283 = ($282&255) >>> 3;
     $284 = $283 & 1;
     $285 = $284&255;
     $286 = ($285|0)!=(0);
     if ($286) {
      $287 = $2;
      $288 = ((($287)) + 64|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = ($289|0)!=(0|0);
      if ($290) {
       $291 = $1;
       $292 = ((($291)) + 52|0);
       $293 = HEAP8[$292>>0]|0;
       $294 = $293 & -65;
       HEAP8[$292>>0] = $294;
       $295 = $2;
       $296 = $295;
       $297 = $296;
       HEAP32[$297>>2] = 0;
       $298 = (($296) + 4)|0;
       $299 = $298;
       HEAP32[$299>>2] = 0;
      }
     }
     $300 = $2;
     $301 = ((($300)) + 60|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ($302|0)!=(0|0);
     if ($303) {
      $304 = $2;
      $305 = ((($304)) + 60|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = ((($306)) + 16|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ($308|0)==(7);
      if ($309) {
       $310 = $2;
       $311 = ((($310)) + 60|0);
       $312 = HEAP32[$311>>2]|0;
       $313 = ((($312)) + 8|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($314|0)<(0);
       $316 = $315 << 31 >> 31;
       $317 = $2;
       $318 = $317;
       $319 = $318;
       HEAP32[$319>>2] = $314;
       $320 = (($318) + 4)|0;
       $321 = $320;
       HEAP32[$321>>2] = $316;
      }
     }
     $322 = $2;
     $323 = $322;
     $324 = $323;
     $325 = HEAP32[$324>>2]|0;
     $326 = (($323) + 4)|0;
     $327 = $326;
     $328 = HEAP32[$327>>2]|0;
     $329 = $1;
     $330 = $329;
     $331 = $330;
     $332 = HEAP32[$331>>2]|0;
     $333 = (($330) + 4)|0;
     $334 = $333;
     $335 = HEAP32[$334>>2]|0;
     $336 = (_i64Add(($332|0),($335|0),($325|0),($328|0))|0);
     $337 = tempRet0;
     $338 = $329;
     $339 = $338;
     HEAP32[$339>>2] = $336;
     $340 = (($338) + 4)|0;
     $341 = $340;
     HEAP32[$341>>2] = $337;
     $342 = $2;
     $343 = ((($342)) + 44|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = $1;
     $346 = ((($345)) + 44|0);
     HEAP32[$346>>2] = $344;
     $347 = $2;
     $348 = ((($347)) + 60|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = ($349|0)!=(0|0);
     if ($350) {
      $351 = $2;
      $352 = ((($351)) + 60|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = $1;
      $355 = ((($354)) + 60|0);
      HEAP32[$355>>2] = $353;
     }
     $356 = $2;
     $357 = ((($356)) + 64|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = $1;
     $360 = ((($359)) + 64|0);
     HEAP32[$360>>2] = $358;
     break;
    }
   }
   $361 = $1;
   $362 = ((($361)) + 40|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ($363|0)==(0);
   if ($364) {
    $365 = $2;
    $366 = ((($365)) + 40|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ($367|0)==(0);
    if ($368) {
     $369 = $2;
     $370 = ((($369)) + 60|0);
     $371 = HEAP32[$370>>2]|0;
     $372 = ($371|0)==(0|0);
     if ($372) {
      $373 = HEAP32[(560)>>2]|0;
      $374 = $373 >>> 8;
      $375 = $374 & 1;
      $376 = ($375|0)!=(0);
      if (!($376)) {
       $377 = $1;
       $378 = (_struct_field_error($377)|0);
       $0 = $378;
       $481 = $0;
       STACKTOP = sp;return ($481|0);
      }
     }
     $379 = $1;
     $380 = ((($379)) + 64|0);
     $381 = HEAP32[$380>>2]|0;
     $382 = ($381|0)!=(0|0);
     if (!($382)) {
      $449 = $2;
      $450 = $449;
      $451 = $450;
      $452 = HEAP32[$451>>2]|0;
      $453 = (($450) + 4)|0;
      $454 = $453;
      $455 = HEAP32[$454>>2]|0;
      $456 = $1;
      $457 = $456;
      $458 = $457;
      $459 = HEAP32[$458>>2]|0;
      $460 = (($457) + 4)|0;
      $461 = $460;
      $462 = HEAP32[$461>>2]|0;
      $463 = (_i64Add(($459|0),($462|0),($452|0),($455|0))|0);
      $464 = tempRet0;
      $465 = $456;
      $466 = $465;
      HEAP32[$466>>2] = $463;
      $467 = (($465) + 4)|0;
      $468 = $467;
      HEAP32[$468>>2] = $464;
      $469 = $2;
      $470 = ((($469)) + 60|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = $1;
      $473 = ((($472)) + 60|0);
      HEAP32[$473>>2] = $471;
      $474 = $2;
      $475 = ((($474)) + 44|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = $1;
      $478 = ((($477)) + 44|0);
      HEAP32[$478>>2] = $476;
      break;
     }
     $383 = $1;
     $384 = ((($383)) + 60|0);
     $385 = HEAP32[$384>>2]|0;
     $386 = ($385|0)!=(0|0);
     $387 = $2;
     $388 = $387;
     $389 = $388;
     $390 = HEAP32[$389>>2]|0;
     $391 = (($388) + 4)|0;
     $392 = $391;
     $393 = HEAP32[$392>>2]|0;
     $394 = $1;
     if ($386) {
      $395 = $394;
      $396 = $395;
      $397 = HEAP32[$396>>2]|0;
      $398 = (($395) + 4)|0;
      $399 = $398;
      $400 = HEAP32[$399>>2]|0;
      $401 = (_i64Add(($397|0),($400|0),($390|0),($393|0))|0);
      $402 = tempRet0;
      $403 = $394;
      $404 = $403;
      HEAP32[$404>>2] = $401;
      $405 = (($403) + 4)|0;
      $406 = $405;
      HEAP32[$406>>2] = $402;
     } else {
      $407 = $394;
      $408 = $407;
      HEAP32[$408>>2] = $390;
      $409 = (($407) + 4)|0;
      $410 = $409;
      HEAP32[$410>>2] = $393;
     }
     $411 = $2;
     $412 = ((($411)) + 60|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = $1;
     $415 = ((($414)) + 60|0);
     HEAP32[$415>>2] = $413;
     $416 = $2;
     $417 = ((($416)) + 44|0);
     $418 = HEAP32[$417>>2]|0;
     $419 = $1;
     $420 = ((($419)) + 44|0);
     HEAP32[$420>>2] = $418;
     $421 = $2;
     $422 = ((($421)) + 52|0);
     $423 = HEAP8[$422>>0]|0;
     $424 = ($423&255) >>> 3;
     $425 = $424 & 1;
     $426 = $425&255;
     $427 = $1;
     $428 = ((($427)) + 52|0);
     $429 = $426&255;
     $430 = HEAP8[$428>>0]|0;
     $431 = $429 & 1;
     $432 = ($431 << 3)&255;
     $433 = $430 & -9;
     $434 = $433 | $432;
     HEAP8[$428>>0] = $434;
     $435 = $1;
     $436 = ((($435)) + 64|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = $2;
     $439 = ((($438)) + 64|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($437|0)!=($440|0);
     if ($441) {
      $442 = $2;
      $443 = ((($442)) + 64|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = $1;
      $446 = ((($445)) + 64|0);
      HEAP32[$446>>2] = $444;
      break;
     } else {
      $447 = $1;
      $448 = ((($447)) + 64|0);
      HEAP32[$448>>2] = 0;
      break;
     }
    }
   }
   $479 = $1;
   $480 = (_struct_field_error($479)|0);
   $0 = $480;
   $481 = $0;
   STACKTOP = sp;return ($481|0);
  }
 } while(0);
 $0 = 0;
 $481 = $0;
 STACKTOP = sp;return ($481|0);
}
function _colon_op($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $sym = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $2;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 40|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(2);
   if ($10) {
    $11 = $2;
    $12 = ((($11)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = ($15|0)==(2);
    if (!($16)) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    $17 = $1;
    $18 = ((($17)) + 40|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(1);
    if (!($20)) {
     break;
    }
    $21 = $2;
    $22 = ((($21)) + 32|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)==(8);
    if (!($26)) {
     break;
    }
   }
   $27 = HEAP32[8976>>2]|0;
   $28 = (FUNCTION_TABLE_iii[$27 & 255](68,$vararg_buffer)|0);
   $0 = $28;
   $241 = $0;
   STACKTOP = sp;return ($241|0);
  }
 } while(0);
 $29 = $2;
 $30 = ((($29)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 switch ($31|0) {
 case 2:  {
  label = 8;
  break;
 }
 case 3:  {
  $40 = HEAP32[8976>>2]|0;
  $41 = (FUNCTION_TABLE_iii[$40 & 255](270,$vararg_buffer4)|0);
  $0 = $41;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
  break;
 }
 default: {
 }
 }
 if ((label|0) == 8) {
  $32 = $2;
  $33 = ((($32)) + 52|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 & 1;
  $36 = $35&255;
  $37 = ($36|0)==(0);
  if ($37) {
   $38 = HEAP32[8976>>2]|0;
   $39 = (FUNCTION_TABLE_iii[$38 & 255](170,$vararg_buffer1)|0);
   $0 = $39;
   $241 = $0;
   STACKTOP = sp;return ($241|0);
  }
 }
 $42 = $1;
 $43 = ((($42)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(2);
 $46 = $1;
 do {
  if ($45) {
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = HEAP32[8976>>2]|0;
    $51 = (FUNCTION_TABLE_iii[$50 & 255](170,$vararg_buffer7)|0);
    $0 = $51;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $52 = $1;
   $53 = ((($52)) + 20|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $temp = $56;
   $57 = $temp;
   $58 = (15660 + (($57*12)|0)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 6144;
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = HEAP32[8976>>2]|0;
    $63 = (FUNCTION_TABLE_iii[$62 & 255](69,$vararg_buffer10)|0);
    $0 = $63;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $64 = $1;
   $65 = ((($64)) + 20|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $2;
   $68 = ((($67)) + 32|0);
   HEAP32[$68>>2] = $66;
   $69 = $1;
   $70 = ((($69)) + 52|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 & 1;
   $73 = $72&255;
   $74 = $2;
   $75 = ((($74)) + 52|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 & 1;
   $78 = $77&255;
   $79 = $78 | $73;
   $80 = $79&255;
   $81 = HEAP8[$75>>0]|0;
   $82 = $80 & 1;
   $83 = $81 & -2;
   $84 = $83 | $82;
   HEAP8[$75>>0] = $84;
   $85 = $2;
   $86 = ((($85)) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $2;
    $90 = ((($89)) + 40|0);
    HEAP32[$90>>2] = 1;
   }
   $91 = $1;
   $92 = ((($91)) + 52|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = ($93&255) >>> 1;
   $95 = $94 & 1;
   $96 = $95&255;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $1;
    $99 = ((($98)) + 52|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = ($100&255) >>> 1;
    $102 = $101 & 1;
    $103 = $102&255;
    $104 = $2;
    $105 = ((($104)) + 52|0);
    $106 = $103&255;
    $107 = HEAP8[$105>>0]|0;
    $108 = $106 & 1;
    $109 = ($108 << 1)&255;
    $110 = $107 & -3;
    $111 = $110 | $109;
    HEAP8[$105>>0] = $111;
    $112 = $1;
    $113 = ((($112)) + 44|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $2;
    $116 = ((($115)) + 44|0);
    HEAP32[$116>>2] = $114;
    $117 = $1;
    $118 = ((($117)) + 49|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $2;
    $121 = ((($120)) + 49|0);
    HEAP8[$121>>0] = $119;
   }
   $122 = $1;
   $123 = $2;
   _TokenAssign($122,$123);
   $124 = $2;
   $125 = ((($124)) + 64|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)!=(0|0);
   if ($127) {
    $128 = $2;
    $129 = ((($128)) + 64|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $1;
    $132 = ((($131)) + 64|0);
    HEAP32[$132>>2] = $130;
   }
  } else {
   $133 = ((($46)) + 40|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134|0)==(1);
   if ($135) {
    $136 = $1;
    $137 = ((($136)) + 32|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)==(0|0);
    if ($139) {
     $140 = $1;
     $141 = ((($140)) + 36|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(-2);
     if ($143) {
      $144 = $1;
      $145 = HEAP32[$144>>2]|0;
      $146 = ($145|0)==(0);
      if ($146) {
       $147 = $1;
       $148 = ((($147)) + 56|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($149|0)!=(0|0);
       if ($150) {
        $151 = $1;
        $152 = ((($151)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = $1;
         $156 = ((($155)) + 24|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ($157|0)==(0|0);
         if ($158) {
          $159 = $1;
          $160 = ((($159)) + 56|0);
          $161 = HEAP32[$160>>2]|0;
          $sym = $161;
          $162 = $sym;
          $163 = ((($162)) + 16|0);
          $164 = HEAP32[$163>>2]|0;
          $165 = ($164|0)==(4);
          if (!($165)) {
           $166 = $sym;
           $167 = ((($166)) + 16|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = ($168|0)==(3);
           if (!($169)) {
            $231 = HEAP32[4884>>2]|0;
            $232 = ($231>>>0)>(0);
            if (!($232)) {
             $233 = $sym;
             $234 = ((($233)) + 16|0);
             $235 = HEAP32[$234>>2]|0;
             $236 = ($235|0)!=(0);
             if (!($236)) {
              break;
             }
            }
            $237 = HEAP32[8976>>2]|0;
            $238 = (FUNCTION_TABLE_iii[$237 & 255](69,$vararg_buffer13)|0);
            $0 = $238;
            $241 = $0;
            STACKTOP = sp;return ($241|0);
           }
          }
          $170 = $2;
          $171 = ((($170)) + 40|0);
          HEAP32[$171>>2] = 1;
          $172 = $1;
          $173 = ((($172)) + 28|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = $2;
          $176 = ((($175)) + 32|0);
          HEAP32[$176>>2] = $174;
          $177 = $1;
          $178 = ((($177)) + 52|0);
          $179 = HEAP8[$178>>0]|0;
          $180 = $179 & 1;
          $181 = $180&255;
          $182 = $2;
          $183 = ((($182)) + 52|0);
          $184 = HEAP8[$183>>0]|0;
          $185 = $184 & 1;
          $186 = $185&255;
          $187 = $186 | $181;
          $188 = $187&255;
          $189 = HEAP8[$183>>0]|0;
          $190 = $188 & 1;
          $191 = $189 & -2;
          $192 = $191 | $190;
          HEAP8[$183>>0] = $192;
          $193 = $1;
          $194 = ((($193)) + 52|0);
          $195 = HEAP8[$194>>0]|0;
          $196 = ($195&255) >>> 1;
          $197 = $196 & 1;
          $198 = $197&255;
          $199 = ($198|0)!=(0);
          if ($199) {
           $200 = $1;
           $201 = ((($200)) + 52|0);
           $202 = HEAP8[$201>>0]|0;
           $203 = ($202&255) >>> 1;
           $204 = $203 & 1;
           $205 = $204&255;
           $206 = $2;
           $207 = ((($206)) + 52|0);
           $208 = $205&255;
           $209 = HEAP8[$207>>0]|0;
           $210 = $208 & 1;
           $211 = ($210 << 1)&255;
           $212 = $209 & -3;
           $213 = $212 | $211;
           HEAP8[$207>>0] = $213;
           $214 = $1;
           $215 = ((($214)) + 44|0);
           $216 = HEAP32[$215>>2]|0;
           $217 = $2;
           $218 = ((($217)) + 44|0);
           HEAP32[$218>>2] = $216;
           $219 = $1;
           $220 = ((($219)) + 49|0);
           $221 = HEAP8[$220>>0]|0;
           $222 = $2;
           $223 = ((($222)) + 49|0);
           HEAP8[$223>>0] = $221;
          }
          $224 = $1;
          $225 = $2;
          _TokenAssign($224,$225);
          $226 = $2;
          $227 = ((($226)) + 64|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = $1;
          $230 = ((($229)) + 64|0);
          HEAP32[$230>>2] = $228;
          break;
         }
        }
       }
      }
     }
    }
   }
   $239 = HEAP32[8976>>2]|0;
   $240 = (FUNCTION_TABLE_iii[$239 & 255](69,$vararg_buffer16)|0);
   $0 = $240;
   $241 = $0;
   STACKTOP = sp;return ($241|0);
  }
 } while(0);
 $0 = 0;
 $241 = $0;
 STACKTOP = sp;return ($241|0);
}
function _MakeConst($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(1);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 1;
 $9 = $8&255;
 $10 = ($9|0)!=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = HEAP32[4884>>2]|0;
  $16 = ($15>>>0)>(0);
  if ($16) {
   STACKTOP = sp;return;
  }
  $17 = $0;
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = $0;
   $24 = ((($23)) + 36|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(-2);
   if (!($26)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $27 = $0;
   $28 = ((($27)) + 56|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(2);
   if (!($32)) {
    STACKTOP = sp;return;
   }
   $33 = $0;
   $34 = ((($33)) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 28|0);
   $37 = ((($36)) + 3|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38&255) >>> 3;
   $40 = $39 & 1;
   $41 = $40&255;
   $42 = ($41|0)==(1);
   if (!($42)) {
    STACKTOP = sp;return;
   }
   $43 = $0;
   $44 = ((($43)) + 52|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45&255) >>> 2;
   $47 = $46 & 1;
   $48 = $47&255;
   $49 = ($48|0)==(1);
   if (!($49)) {
    STACKTOP = sp;return;
   }
  }
  $50 = $0;
  HEAP32[$50>>2] = 1;
 }
 $51 = $0;
 $52 = ((($51)) + 28|0);
 HEAP32[$52>>2] = 0;
 $53 = $0;
 $54 = ((($53)) + 60|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = $0;
  $58 = ((($57)) + 60|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(6);
  if (!($62)) {
   STACKTOP = sp;return;
  }
 }
 $63 = $0;
 $64 = ((($63)) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  STACKTOP = sp;return;
 }
 $67 = $0;
 $68 = ((($67)) + 36|0);
 HEAP32[$68>>2] = -2;
 $69 = $0;
 $70 = ((($69)) + 40|0);
 HEAP32[$70>>2] = 0;
 $71 = $0;
 $72 = ((($71)) + 52|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73 & -3;
 HEAP8[$72>>0] = $74;
 $75 = $0;
 $76 = ((($75)) + 44|0);
 HEAP32[$76>>2] = 192;
 STACKTOP = sp;return;
}
function _check_both($opnd1,$opnd2,$type1,$type2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $type1;
 $4 = $type2;
 $5 = $1;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ($7|0)==($8|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  $14 = ($12|0)==($13|0);
  if ($14) {
   $0 = 1;
   $25 = $0;
   STACKTOP = sp;return ($25|0);
  }
 }
 $15 = $1;
 $16 = ((($15)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $4;
 $19 = ($17|0)==($18|0);
 if ($19) {
  $20 = $2;
  $21 = ((($20)) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ($22|0)==($23|0);
  if ($24) {
   $0 = 1;
   $25 = $0;
   STACKTOP = sp;return ($25|0);
  }
 }
 $0 = 0;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _check_direct_reg($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 52|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 & 1;
  $11 = $10&255;
  $12 = ($11|0)==(0);
  if (!($12)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $13 = $2;
   $14 = ((($13)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(2);
   if ($16) {
    $17 = $2;
    $18 = ((($17)) + 52|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 & 1;
    $21 = $20&255;
    $22 = ($21|0)==(0);
    if ($22) {
     break;
    }
   }
   $0 = 0;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 } while(0);
 $0 = -1;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _ConstError($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = ((($3)) + 52|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 4;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $10 = $1;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(3);
 if ($13) {
  label = 5;
 } else {
  $14 = $2;
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(3);
  if ($17) {
   label = 5;
  } else {
   $19 = HEAP32[8976>>2]|0;
   (FUNCTION_TABLE_iii[$19 & 255](65,$vararg_buffer1)|0);
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[8976>>2]|0;
  (FUNCTION_TABLE_iii[$18 & 255](270,$vararg_buffer)|0);
 }
 $0 = -1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _MakeConst2($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $1;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $9 = HEAP32[8976>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $14;
  $15 = (FUNCTION_TABLE_iii[$9 & 255](193,$vararg_buffer)|0);
  $0 = $15;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $16 = $1;
 $17 = ((($16)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $22 = ((($21)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($20|0)!=($25|0);
 if ($26) {
  $27 = $1;
  $28 = ((($27)) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $2;
   $34 = ((($33)) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)!=(0);
   if (!($38)) {
    label = 6;
   }
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $39 = $2;
  $40 = ((($39)) + 56|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(2);
  if (!($44)) {
   $47 = $1;
   $48 = ((($47)) + 40|0);
   HEAP32[$48>>2] = 0;
   $49 = $1;
   $50 = ((($49)) + 56|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($53))|0;
   HEAP32[$54>>2] = $56;
   $57 = $2;
   $58 = ((($57)) + 40|0);
   HEAP32[$58>>2] = 0;
   $59 = $2;
   $60 = ((($59)) + 56|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $2;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($63))|0;
   HEAP32[$64>>2] = $66;
   $0 = 0;
   $67 = $0;
   STACKTOP = sp;return ($67|0);
  }
 }
 $45 = HEAP32[8976>>2]|0;
 $46 = (FUNCTION_TABLE_iii[$45 & 255](192,$vararg_buffer1)|0);
 $0 = $46;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _cmp_types($opnd1,$opnd2,$trueval) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $trueval = $trueval|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $type1 = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd1;
 $1 = $opnd2;
 $2 = $trueval;
 $3 = $0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(195);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(195);
  if ($10) {
   $11 = $0;
   $12 = ((($11)) + 64|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    label = 5;
   } else {
    $15 = $0;
    $16 = ((($15)) + 28|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     label = 5;
    } else {
     label = 7;
    }
   }
   if ((label|0) == 5) {
    $19 = $1;
    $20 = ((($19)) + 64|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     $23 = $1;
     $24 = ((($23)) + 28|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)!=(0|0);
     if (!($26)) {
      label = 7;
     }
    }
   }
   if ((label|0) == 7) {
    (_InternalError(87017,2452)|0);
   }
   $27 = $0;
   $28 = ((($27)) + 64|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   $31 = $0;
   if ($30) {
    $32 = ((($31)) + 64|0);
    $33 = HEAP32[$32>>2]|0;
    $39 = $33;
   } else {
    $34 = ((($31)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_SymFind($37)|0);
    $39 = $38;
   }
   $type1 = $39;
   $40 = $1;
   $41 = ((($40)) + 64|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   $44 = $1;
   if ($43) {
    $45 = ((($44)) + 64|0);
    $46 = HEAP32[$45>>2]|0;
    $52 = $46;
   } else {
    $47 = ((($44)) + 28|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (_SymFind($50)|0);
    $52 = $51;
   }
   $type2 = $52;
   $53 = $type1;
   $54 = ((($53)) + 28|0);
   $55 = ((($54)) + 1|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = $type2;
   $59 = ((($58)) + 28|0);
   $60 = ((($59)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($57|0)==($62|0);
   if ($63) {
    $64 = $type1;
    $65 = ((($64)) + 28|0);
    $66 = ((($65)) + 2|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $type2;
    $70 = ((($69)) + 28|0);
    $71 = ((($70)) + 2|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = ($68|0)==($73|0);
    if ($74) {
     $75 = $type1;
     $76 = ((($75)) + 32|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $type2;
     $79 = ((($78)) + 32|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($77|0)==($80|0);
     if ($81) {
      $82 = $2;
      $86 = $82;
     } else {
      label = 18;
     }
    } else {
     label = 18;
    }
   } else {
    label = 18;
   }
   if ((label|0) == 18) {
    $83 = $2;
    $84 = $83 ^ -1;
    $86 = $84;
   }
   $85 = ($86|0)<(0);
   $87 = $85 << 31 >> 31;
   $88 = $0;
   $89 = $88;
   $90 = $89;
   HEAP32[$90>>2] = $86;
   $91 = (($89) + 4)|0;
   $92 = $91;
   HEAP32[$92>>2] = $87;
   STACKTOP = sp;return;
  }
 }
 $93 = $0;
 $94 = ((($93)) + 64|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = $0;
  $98 = ((($97)) + 64|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($99)) + 40|0);
  $101 = ((($100)) + 2|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = ($103|0)==(3);
  if ($104) {
   $105 = $0;
   $106 = ((($105)) + 64|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ((($107)) + 28|0);
   $109 = ((($108)) + 1|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = ($111|0)==(0);
   if ($112) {
    $113 = $0;
    $114 = ((($113)) + 64|0);
    HEAP32[$114>>2] = 0;
   }
  }
 }
 $115 = $1;
 $116 = ((($115)) + 64|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = $1;
  $120 = ((($119)) + 64|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($121)) + 40|0);
  $123 = ((($122)) + 2|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = ($125|0)==(3);
  if ($126) {
   $127 = $1;
   $128 = ((($127)) + 64|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ((($129)) + 28|0);
   $131 = ((($130)) + 1|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = ($133|0)==(0);
   if ($134) {
    $135 = $1;
    $136 = ((($135)) + 64|0);
    HEAP32[$136>>2] = 0;
   }
  }
 }
 $137 = $0;
 $138 = ((($137)) + 44|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $1;
 $141 = ((($140)) + 44|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($139|0)==($142|0);
 if ($143) {
  $144 = $0;
  $145 = ((($144)) + 64|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $1;
  $148 = ((($147)) + 64|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($146|0)==($149|0);
  if ($150) {
   $151 = $2;
   $155 = $151;
  } else {
   label = 31;
  }
 } else {
  label = 31;
 }
 if ((label|0) == 31) {
  $152 = $2;
  $153 = $152 ^ -1;
  $155 = $153;
 }
 $154 = ($155|0)<(0);
 $156 = $154 << 31 >> 31;
 $157 = $0;
 $158 = $157;
 $159 = $158;
 HEAP32[$159>>2] = $155;
 $160 = (($158) + 4)|0;
 $161 = $160;
 HEAP32[$161>>2] = $156;
 STACKTOP = sp;return;
}
function _invalid_operand($opnd,$oprtr,$operand) {
 $opnd = $opnd|0;
 $oprtr = $oprtr|0;
 $operand = $operand|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $opnd;
 $1 = $oprtr;
 $2 = $operand;
 $3 = $0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 4;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 if ($9) {
  STACKTOP = sp;return -1;
 }
 $10 = HEAP32[8976>>2]|0;
 $11 = $1;
 $12 = (_strupr($11)|0);
 $13 = $2;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 (FUNCTION_TABLE_iii[$10 & 255](228,$vararg_buffer)|0);
 STACKTOP = sp;return -1;
}
function _low_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oper;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $sym;
 $4 = $name;
 $5 = $1;
 $6 = $2;
 _TokenAssign($5,$6);
 $7 = $2;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(170);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 36|0);
   HEAP32[$16>>2] = 162;
   $17 = $1;
   $18 = ((($17)) + 44|0);
   HEAP32[$18>>2] = 192;
  }
 }
 $19 = $1;
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $22 & 255;
 $27 = $19;
 $28 = $27;
 HEAP32[$28>>2] = $26;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return 0;
}
function _high_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oper;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $sym;
 $4 = $name;
 $5 = $1;
 $6 = $2;
 _TokenAssign($5,$6);
 $7 = $2;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(170);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 36|0);
   HEAP32[$16>>2] = 156;
   $17 = $1;
   $18 = ((($17)) + 44|0);
   HEAP32[$18>>2] = 192;
  }
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >> 8;
 $22 = $1;
 HEAP32[$22>>2] = $21;
 $23 = $1;
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $26 & 255;
 $31 = $23;
 $32 = $31;
 HEAP32[$32>>2] = $30;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 STACKTOP = sp;return 0;
}
function _lowword_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oper;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $sym;
 $4 = $name;
 $5 = $1;
 $6 = $2;
 _TokenAssign($5,$6);
 $7 = $2;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(170);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 36|0);
   HEAP32[$16>>2] = 164;
   $17 = $1;
   $18 = ((($17)) + 44|0);
   HEAP32[$18>>2] = 192;
  }
 }
 $19 = $1;
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $22 & 65535;
 $27 = $19;
 $28 = $27;
 HEAP32[$28>>2] = $26;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return 0;
}
function _highword_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oper;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $sym;
 $4 = $name;
 $5 = $1;
 $6 = $2;
 _TokenAssign($5,$6);
 $7 = $2;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(170);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 36|0);
   HEAP32[$16>>2] = 158;
   $17 = $1;
   $18 = ((($17)) + 44|0);
   HEAP32[$18>>2] = 192;
  }
 }
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >> 16;
 $22 = $1;
 HEAP32[$22>>2] = $21;
 STACKTOP = sp;return 0;
}
function _low32_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 do {
  if ($9) {
   $10 = HEAP8[(6083)>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   if (!($11)) {
    $15 = $3;
    $16 = $3;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $3;
    $22 = ((($21)) + 52|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23&255) >>> 5;
    $25 = $24 & 1;
    $26 = $25&255;
    $27 = $26&255;
    $28 = $3;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    _atofloat($15,$20,8,$27,$32);
    $33 = $3;
    $34 = ((($33)) + 40|0);
    HEAP32[$34>>2] = 0;
    $35 = $3;
    $36 = ((($35)) + 16|0);
    HEAP32[$36>>2] = 0;
    break;
   }
   $12 = $2;
   $13 = $3;
   $14 = (_ConstError($12,$13)|0);
   $0 = $14;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $37 = $2;
 $38 = $3;
 _TokenAssign($37,$38);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = $3;
  $44 = ((($43)) + 36|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(170);
  if ($46) {
   $47 = $2;
   $48 = ((($47)) + 36|0);
   HEAP32[$48>>2] = 163;
   $49 = $2;
   $50 = ((($49)) + 44|0);
   HEAP32[$50>>2] = 192;
  }
 }
 $51 = $2;
 $52 = $51;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $51;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = 0;
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _high32_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 do {
  if ($9) {
   $10 = HEAP8[(6083)>>0]|0;
   $11 = ($10<<24>>24)!=(0);
   if (!($11)) {
    $15 = $3;
    $16 = $3;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $3;
    $22 = ((($21)) + 52|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23&255) >>> 5;
    $25 = $24 & 1;
    $26 = $25&255;
    $27 = $26&255;
    $28 = $3;
    $29 = ((($28)) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    _atofloat($15,$20,8,$27,$32);
    $33 = $3;
    $34 = ((($33)) + 40|0);
    HEAP32[$34>>2] = 0;
    $35 = $3;
    $36 = ((($35)) + 16|0);
    HEAP32[$36>>2] = 0;
    break;
   }
   $12 = $2;
   $13 = $3;
   $14 = (_ConstError($12,$13)|0);
   $0 = $14;
   $63 = $0;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $37 = $2;
 $38 = $3;
 _TokenAssign($37,$38);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(1);
 if ($42) {
  $43 = $3;
  $44 = ((($43)) + 36|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(170);
  if ($46) {
   $47 = $2;
   $48 = ((($47)) + 36|0);
   HEAP32[$48>>2] = 157;
   $49 = $2;
   $50 = ((($49)) + 44|0);
   HEAP32[$50>>2] = 192;
  }
 }
 $51 = $2;
 $52 = $51;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $2;
 $59 = $58;
 $60 = $59;
 HEAP32[$60>>2] = $57;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = 0;
 $0 = 0;
 $63 = $0;
 STACKTOP = sp;return ($63|0);
}
function _offset_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $1;
 $7 = ($6|0)==(167);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $2;
   $13 = $3;
   _TokenAssign($12,$13);
   $0 = 0;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(4);
  if (!($19)) {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $20 = $3;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(170);
  if (!($23)) {
   $29 = $3;
   $30 = ((($29)) + 52|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31&255) >>> 3;
   $33 = $32 & 1;
   $34 = $33&255;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $3;
    HEAP32[$36>>2] = 0;
   }
   $37 = $2;
   $38 = $3;
   _TokenAssign($37,$38);
   $39 = $1;
   $40 = $2;
   $41 = ((($40)) + 36|0);
   HEAP32[$41>>2] = $39;
   $42 = $3;
   $43 = ((($42)) + 52|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 & 1;
   $46 = $45&255;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $3;
    $49 = $1;
    $50 = (_GetResWName($49,0)|0);
    $51 = $5;
    $52 = (_invalid_operand($48,$50,$51)|0);
    $0 = $52;
    $55 = $0;
    STACKTOP = sp;return ($55|0);
   } else {
    $53 = $2;
    $54 = ((($53)) + 44|0);
    HEAP32[$54>>2] = 192;
    $0 = 0;
    $55 = $0;
    STACKTOP = sp;return ($55|0);
   }
  }
 }
 $24 = $3;
 $25 = $1;
 $26 = (_GetResWName($25,0)|0);
 $27 = $5;
 $28 = (_invalid_operand($24,$26,$27)|0);
 $0 = $28;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _seg_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $3;
  $11 = ((($10)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(5);
  if (!($15)) {
   $16 = $3;
   $17 = ((($16)) + 52|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18&255) >>> 2;
   $20 = $19 & 1;
   $21 = $20&255;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $25 = $2;
    $26 = $3;
    _TokenAssign($25,$26);
    $27 = $1;
    $28 = $2;
    $29 = ((($28)) + 36|0);
    HEAP32[$29>>2] = $27;
    $30 = $2;
    $31 = ((($30)) + 60|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(0|0);
    if ($33) {
     $34 = $2;
     HEAP32[$34>>2] = 0;
    }
    $35 = $2;
    $36 = ((($35)) + 44|0);
    HEAP32[$36>>2] = 192;
    $0 = 0;
    $37 = $0;
    STACKTOP = sp;return ($37|0);
   }
  }
 }
 $23 = HEAP32[8976>>2]|0;
 $24 = (FUNCTION_TABLE_iii[$23 & 255](188,$vararg_buffer)|0);
 $0 = $24;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _opattr_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $2;
 $7 = ((($6)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = $2;
 $9 = ((($8)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = $2;
 HEAP32[$10>>2] = 0;
 $11 = $2;
 $12 = ((($11)) + 44|0);
 HEAP32[$12>>2] = 192;
 $13 = $2;
 $14 = ((($13)) + 52|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -17;
 HEAP8[$14>>0] = $16;
 $17 = $3;
 $18 = ((($17)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(-2);
 if ($20) {
  $0 = 0;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $21 = $3;
 $22 = ((($21)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 do {
  if ($24) {
   $25 = $3;
   $26 = ((($25)) + 56|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $29 = $3;
    $30 = ((($29)) + 56|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(5);
    if ($34) {
     $35 = $3;
     $36 = ((($35)) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 192;
     $39 = ($38|0)==(128);
     if ($39) {
      $40 = $2;
      $41 = HEAP32[$40>>2]|0;
      $42 = $41 | 1;
      HEAP32[$40>>2] = $42;
     }
    }
   }
   $43 = $3;
   $44 = (_IsOffset($43)|0);
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $3;
    $47 = ((($46)) + 56|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     $50 = $3;
     $51 = ((($50)) + 56|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($52)) + 20|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $54 & 192;
     $56 = ($55|0)==(128);
     if ($56) {
      $57 = $2;
      $58 = HEAP32[$57>>2]|0;
      $59 = $58 | 1;
      HEAP32[$57>>2] = $59;
     }
    }
   }
   $60 = $3;
   $61 = ((($60)) + 56|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0|0);
   if ($63) {
    $64 = $3;
    $65 = ((($64)) + 56|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(196);
    if (!($69)) {
     $70 = $3;
     $71 = ((($70)) + 44|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & 128;
     $74 = ($73|0)==(0);
     if (!($74)) {
      $75 = $3;
      $76 = ((($75)) + 44|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77|0)==(192);
      if (!($78)) {
       break;
      }
      $79 = $3;
      $80 = ((($79)) + 56|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($81)) + 20|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $83 & 128;
      $85 = ($84|0)==(0);
      if (!($85)) {
       break;
      }
     }
    }
    $86 = $2;
    $87 = HEAP32[$86>>2]|0;
    $88 = $87 | 2;
    HEAP32[$86>>2] = $88;
   }
  }
 } while(0);
 $89 = $3;
 $90 = ((($89)) + 40|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)!=(-1);
 if ($92) {
  $93 = $3;
  $94 = ((($93)) + 52|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95 & 1;
  $97 = $96&255;
  $98 = ($97|0)!=(0);
  if ($98) {
   $99 = $2;
   $100 = HEAP32[$99>>2]|0;
   $101 = $100 | 2;
   HEAP32[$99>>2] = $101;
  }
 }
 $102 = $3;
 $103 = ((($102)) + 40|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 do {
  if ($105) {
   label = 30;
  } else {
   $106 = $3;
   $107 = ((($106)) + 40|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(1);
   if ($109) {
    $110 = $3;
    $111 = ((($110)) + 52|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112 & 1;
    $114 = $113&255;
    $115 = ($114|0)==(0);
    if ($115) {
     $116 = $3;
     $117 = ((($116)) + 44|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)==(192);
     if ($119) {
      $120 = $3;
      $121 = (_IsOffset($120)|0);
      $122 = ($121|0)!=(0);
      if (!($122)) {
       label = 26;
      }
     } else {
      label = 26;
     }
     if ((label|0) == 26) {
      $123 = $3;
      $124 = ((($123)) + 44|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)==(192);
      if (!($126)) {
       $127 = $3;
       $128 = ((($127)) + 44|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $129 & 192;
       $131 = ($130|0)==(128);
       if (!($131)) {
        break;
       }
      }
     }
     $132 = $3;
     $133 = ((($132)) + 56|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)==(1);
     if ($137) {
      label = 30;
     } else {
      $138 = $3;
      $139 = ((($138)) + 56|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($140)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142|0)==(2);
      if ($143) {
       label = 30;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 30) {
  $144 = $2;
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 4;
  HEAP32[$144>>2] = $146;
 }
 $147 = $3;
 $148 = ((($147)) + 40|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(1);
 do {
  if ($150) {
   $151 = $3;
   $152 = ((($151)) + 52|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153 & 1;
   $155 = $154&255;
   $156 = ($155|0)==(0);
   if ($156) {
    $157 = $3;
    $158 = ((($157)) + 44|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(192);
    if ($160) {
     $161 = $3;
     $162 = ((($161)) + 36|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(-2);
     if (!($164)) {
      label = 35;
     }
    } else {
     label = 35;
    }
    if ((label|0) == 35) {
     $165 = $3;
     $166 = ((($165)) + 44|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($167|0)==(196);
     if (!($168)) {
      $169 = $3;
      $170 = ((($169)) + 44|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $171 & 128;
      $173 = ($172|0)==(0);
      if (!($173)) {
       $174 = $3;
       $175 = ((($174)) + 44|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(195);
       if (!($177)) {
        break;
       }
      }
     }
    }
    $178 = $3;
    $179 = ((($178)) + 56|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)==(0|0);
    if (!($181)) {
     $182 = $3;
     $183 = ((($182)) + 56|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((($184)) + 16|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==(1);
     if (!($187)) {
      $188 = $3;
      $189 = ((($188)) + 56|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ((($190)) + 16|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($192|0)==(2);
      if (!($193)) {
       break;
      }
     }
    }
    $194 = $2;
    $195 = HEAP32[$194>>2]|0;
    $196 = $195 | 8;
    HEAP32[$194>>2] = $196;
   }
  }
 } while(0);
 $197 = $3;
 $198 = ((($197)) + 40|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)==(2);
 if ($200) {
  $201 = $3;
  $202 = ((($201)) + 52|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203 & 1;
  $205 = $204&255;
  $206 = ($205|0)==(0);
  if ($206) {
   $207 = $2;
   $208 = HEAP32[$207>>2]|0;
   $209 = $208 | 16;
   HEAP32[$207>>2] = $209;
  }
 }
 $210 = $3;
 $211 = ((($210)) + 40|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ($212|0)!=(-1);
 do {
  if ($213) {
   $214 = $3;
   $215 = ((($214)) + 40|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($216|0)!=(3);
   if ($217) {
    $218 = $3;
    $219 = ((($218)) + 56|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = ($220|0)==(0|0);
    if (!($221)) {
     $222 = $3;
     $223 = ((($222)) + 56|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($224)) + 24|0);
     $226 = HEAP16[$225>>1]|0;
     $227 = ($226&65535) >>> 1;
     $228 = $227 & 1;
     $229 = $228&255;
     $230 = $229&255;
     $231 = ($230|0)==(1);
     if (!($231)) {
      break;
     }
    }
    $232 = $2;
    $233 = HEAP32[$232>>2]|0;
    $234 = $233 | 32;
    HEAP32[$232>>2] = $234;
   }
  }
 } while(0);
 $235 = $3;
 $236 = ((($235)) + 56|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = ($237|0)!=(0|0);
 if ($238) {
  $239 = $3;
  $240 = ((($239)) + 56|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ((($241)) + 16|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ($243|0)==(5);
  if ($244) {
   label = 55;
  } else {
   label = 52;
  }
 } else {
  label = 52;
 }
 if ((label|0) == 52) {
  $245 = $3;
  $246 = ((($245)) + 52|0);
  $247 = HEAP8[$246>>0]|0;
  $248 = $247 & 1;
  $249 = $248&255;
  $250 = ($249|0)!=(0);
  if ($250) {
   $251 = $3;
   $252 = ((($251)) + 20|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($253|0)!=(0|0);
   if ($254) {
    $255 = $3;
    $256 = ((($255)) + 20|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ((($257)) + 8|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = (15660 + (($259*12)|0)|0);
    $261 = ((($260)) + 4|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $262 & 64;
    $264 = ($263|0)!=(0);
    if ($264) {
     label = 55;
    }
   }
  }
 }
 if ((label|0) == 55) {
  $265 = $2;
  $266 = HEAP32[$265>>2]|0;
  $267 = $266 | 64;
  HEAP32[$265>>2] = $267;
 }
 $268 = $3;
 $269 = ((($268)) + 56|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = ($270|0)!=(0|0);
 if ($271) {
  $272 = $3;
  $273 = ((($272)) + 56|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ((($274)) + 16|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($276|0)==(2);
  if ($277) {
   $278 = $2;
   $279 = HEAP32[$278>>2]|0;
   $280 = $279 | 128;
   HEAP32[$278>>2] = $280;
  }
 }
 $281 = $1;
 $282 = ($281|0)==(168);
 if ($282) {
  $283 = $3;
  $284 = ((($283)) + 56|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = ($285|0)!=(0|0);
  if ($286) {
   $287 = $3;
   $288 = ((($287)) + 40|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = ($289|0)!=(-1);
   if ($290) {
    $291 = $3;
    $292 = ((($291)) + 56|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ((($293)) + 48|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = $295 << 8;
    $297 = $2;
    $298 = HEAP32[$297>>2]|0;
    $299 = $298 | $296;
    HEAP32[$297>>2] = $299;
   }
  }
 }
 $0 = 0;
 $300 = $0;
 STACKTOP = sp;return ($300|0);
}
function _sizlen_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $2;
 $7 = ((($6)) + 40|0);
 HEAP32[$7>>2] = 0;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 do {
  if ($9) {
   $10 = $4;
   $11 = ((($10)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(6);
   if (!($13)) {
    $14 = $4;
    $15 = ((($14)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(5);
    if (!($17)) {
     $18 = $4;
     $19 = ((($18)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0);
     if ($21) {
      $22 = $2;
      $23 = ((($22)) + 40|0);
      HEAP32[$23>>2] = 1;
      $24 = $4;
      $25 = $2;
      $26 = ((($25)) + 56|0);
      HEAP32[$26>>2] = $24;
      break;
     }
     $27 = $4;
     $28 = ((($27)) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(2);
     if ($30) {
      label = 8;
     } else {
      $31 = $4;
      $32 = ((($31)) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==(1);
      if ($34) {
       label = 8;
      }
     }
     if ((label|0) == 8) {
      $35 = $4;
      $36 = ((($35)) + 20|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)!=(192);
      if ($38) {
       $39 = $4;
       $40 = ((($39)) + 20|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ($41|0)!=(130);
       if ($42) {
        $43 = $4;
        $44 = ((($43)) + 20|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)!=(129);
        if ($46) {
         break;
        }
       }
      }
     }
     $47 = $4;
     $48 = ((($47)) + 16|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(4);
     if (!($50)) {
      $51 = $4;
      $52 = ((($51)) + 16|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(3);
      if (!($54)) {
       $57 = $1;
       $58 = ($57|0)==(172);
       $59 = $1;
       $60 = ($59|0)==(160);
       $or$cond = $58 | $60;
       if ($or$cond) {
        break;
       }
       $61 = HEAP32[8976>>2]|0;
       $62 = (FUNCTION_TABLE_iii[$61 & 255](232,$vararg_buffer2)|0);
       $0 = $62;
       $200 = $0;
       STACKTOP = sp;return ($200|0);
      }
     }
     $55 = HEAP32[8976>>2]|0;
     $56 = (FUNCTION_TABLE_iii[$55 & 255](232,$vararg_buffer)|0);
     $0 = $56;
     $200 = $0;
     STACKTOP = sp;return ($200|0);
    }
   }
  }
 } while(0);
 $63 = $1;
 L23: do {
  switch ($63|0) {
  case 160:  {
   $64 = $4;
   $65 = ((($64)) + 24|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = ($66&65535) >>> 10;
   $68 = $67 & 1;
   $69 = $68&255;
   $70 = $69&255;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $4;
    $73 = ((($72)) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    $76 = $74;
   } else {
    $76 = 1;
   }
   $75 = $2;
   HEAP32[$75>>2] = $76;
   break;
  }
  case 161:  {
   $77 = $3;
   $78 = ((($77)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = $3;
    $82 = ((($81)) + 60|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 40|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $2;
    HEAP32[$86>>2] = $85;
    break L23;
   }
   $87 = $4;
   $88 = ((($87)) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)==(2);
   if ($90) {
    $91 = $4;
    $92 = ((($91)) + 28|0);
    $93 = ((($92)) + 3|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = ($94&255) >>> 2;
    $96 = $95 & 1;
    $97 = $96&255;
    $98 = ($97|0)==(0);
    if ($98) {
     $99 = $2;
     HEAP32[$99>>2] = 1;
     break L23;
    }
   }
   $100 = $4;
   $101 = ((($100)) + 40|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $2;
   HEAP32[$103>>2] = $102;
   break;
  }
  case 172:  {
   $104 = $4;
   $105 = ($104|0)==(0|0);
   if ($105) {
    $106 = $3;
    $107 = ((($106)) + 44|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $108 & 192;
    $110 = ($109|0)==(128);
    $111 = $3;
    $112 = HEAP32[$111>>2]|0;
    if ($110) {
     $113 = 65280 | $112;
     $114 = $2;
     HEAP32[$114>>2] = $113;
     break L23;
    } else {
     $115 = $2;
     HEAP32[$115>>2] = $112;
     break L23;
    }
   }
   $116 = $4;
   $117 = ((($116)) + 24|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = ($118&65535) >>> 10;
   $120 = $119 & 1;
   $121 = $120&255;
   $122 = ($121<<24>>24)!=(0);
   $123 = $4;
   if ($122) {
    $124 = ((($123)) + 28|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $2;
    HEAP32[$126>>2] = $125;
    break L23;
   }
   $127 = ((($123)) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)==(5);
   $130 = $4;
   if ($129) {
    $131 = (_GetSizeValue($130)|0);
    $132 = $2;
    HEAP32[$132>>2] = $131;
    break L23;
   }
   $133 = ((($130)) + 20|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134|0)==(129);
   $136 = $4;
   if ($135) {
    $137 = (_GetSymOfssize($136)|0);
    $138 = 2 << $137;
    $139 = 65280 | $138;
    $140 = $2;
    HEAP32[$140>>2] = $139;
    break L23;
   }
   $141 = ((($136)) + 20|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(130);
   $144 = $4;
   if ($143) {
    $145 = (_GetSymOfssize($144)|0);
    $146 = ($145|0)!=(0);
    $147 = $146 ? 65286 : 65285;
    $148 = $2;
    HEAP32[$148>>2] = $147;
    break L23;
   } else {
    $149 = (_GetSizeValue($144)|0);
    $150 = $2;
    HEAP32[$150>>2] = $149;
    break L23;
   }
   break;
  }
  case 173:  {
   $151 = $4;
   $152 = ($151|0)==(0|0);
   if (!($152)) {
    $181 = $4;
    $182 = ((($181)) + 16|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(2);
    if ($184) {
     $185 = $4;
     $186 = ((($185)) + 28|0);
     $187 = ((($186)) + 3|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = ($188&255) >>> 2;
     $190 = $189 & 1;
     $191 = $190&255;
     $192 = ($191|0)==(0);
     if ($192) {
      $193 = $4;
      $194 = (_GetSizeValue($193)|0);
      $195 = $2;
      HEAP32[$195>>2] = $194;
      break L23;
     }
    }
    $196 = $4;
    $197 = ((($196)) + 36|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = $2;
    HEAP32[$199>>2] = $198;
    break L23;
   }
   $153 = $3;
   $154 = ((($153)) + 52|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = ($155&255) >>> 3;
   $157 = $156 & 1;
   $158 = $157&255;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $3;
    $161 = ((($160)) + 64|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ($162|0)!=(0|0);
    if ($163) {
     $164 = $3;
     $165 = ((($164)) + 64|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ((($166)) + 40|0);
     $168 = ((($167)) + 2|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = $169&255;
     $171 = ($170|0)==(4);
     if ($171) {
      $172 = $3;
      $173 = ((($172)) + 64|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($174)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $2;
      HEAP32[$177>>2] = $176;
      break L23;
     }
    }
   }
   $178 = $3;
   $179 = HEAP32[$178>>2]|0;
   $180 = $2;
   HEAP32[$180>>2] = $179;
   break;
  }
  default: {
  }
  }
 } while(0);
 $0 = 0;
 $200 = $0;
 STACKTOP = sp;return ($200|0);
}
function _short_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(1);
 do {
  if (!($9)) {
   $10 = $3;
   $11 = ((($10)) + 44|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(192);
   if ($13) {
    $14 = $3;
    $15 = ((($14)) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(129);
    if ($17) {
     $18 = $3;
     $19 = ((($18)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)!=(130);
     if ($21) {
      break;
     }
    }
   }
   $24 = $2;
   $25 = $3;
   _TokenAssign($24,$25);
   $26 = $1;
   $27 = $2;
   $28 = ((($27)) + 36|0);
   HEAP32[$28>>2] = $26;
   $0 = 0;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 } while(0);
 $22 = HEAP32[8976>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 255](233,$vararg_buffer)|0);
 $0 = $23;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _this_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8&255) >>> 3;
 $10 = $9 & 1;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[8976>>2]|0;
  $14 = (FUNCTION_TABLE_iii[$13 & 255](179,$vararg_buffer)|0);
  $0 = $14;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $15 = HEAP32[66812>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[8976>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 255](82,$vararg_buffer1)|0);
  $0 = $18;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $19 = HEAP32[(584)>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (_EmitErr(82,$vararg_buffer4)|0);
  $0 = $21;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $22 = HEAP32[8980>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $24 = (_SymAlloc(109841)|0);
  HEAP32[8980>>2] = $24;
  $25 = HEAP32[8980>>2]|0;
  $26 = ((($25)) + 16|0);
  HEAP32[$26>>2] = 1;
  $27 = HEAP32[8980>>2]|0;
  $28 = ((($27)) + 24|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 & -3;
  $31 = $30 | 2;
  HEAP16[$28>>1] = $31;
 }
 $32 = $2;
 $33 = ((($32)) + 40|0);
 HEAP32[$33>>2] = 1;
 $34 = $3;
 $35 = ((($34)) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[8980>>2]|0;
 $38 = ((($37)) + 52|0);
 HEAP32[$38>>2] = $36;
 $39 = $3;
 $40 = ((($39)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = HEAP32[8980>>2]|0;
  $44 = ((($43)) + 20|0);
  HEAP32[$44>>2] = 196;
 } else {
  $45 = $3;
  $46 = ((($45)) + 44|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[8980>>2]|0;
  $49 = ((($48)) + 20|0);
  HEAP32[$49>>2] = $47;
 }
 $50 = HEAP32[8980>>2]|0;
 $51 = $2;
 $52 = ((($51)) + 56|0);
 HEAP32[$52>>2] = $50;
 $53 = HEAP32[8980>>2]|0;
 _SetSymSegOfs($53);
 $54 = HEAP32[8980>>2]|0;
 $55 = ((($54)) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $2;
 $58 = ((($57)) + 44|0);
 HEAP32[$58>>2] = $56;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _type_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oper;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $sym;
 $4 = $name;
 $5 = $1;
 $6 = ((($5)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(-2);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(192);
  if ($14) {
   $15 = $2;
   $16 = ((($15)) + 36|0);
   HEAP32[$16>>2] = -2;
   $3 = 0;
  }
 }
 $17 = $2;
 $18 = ((($17)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(-2);
 if ($20) {
  $21 = $2;
  $22 = ((($21)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if (!($24)) {
   STACKTOP = sp;return 0;
  }
  $25 = $2;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  switch ($27|0) {
  case 156: case 162:  {
   $28 = $1;
   HEAP32[$28>>2] = 1;
   STACKTOP = sp;return 0;
   break;
  }
  case 158: case 164:  {
   $29 = $1;
   HEAP32[$29>>2] = 2;
   STACKTOP = sp;return 0;
   break;
  }
  case 157: case 163:  {
   $30 = $1;
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return 0;
   break;
  }
  case 159: case 169: case 165: case 167:  {
   $31 = $2;
   $32 = ((($31)) + 56|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_GetSymOfssize($33)|0);
   $35 = 2 << $34;
   $36 = $1;
   HEAP32[$36>>2] = $35;
   $37 = $1;
   $38 = ((($37)) + 52|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 & -9;
   $41 = $40 | 8;
   HEAP8[$38>>0] = $41;
   STACKTOP = sp;return 0;
   break;
  }
  default: {
   STACKTOP = sp;return 0;
  }
  }
 }
 $42 = $3;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $212 = $3;
  $213 = ((($212)) + 16|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)==(0);
  if ($215) {
   $216 = $1;
   $217 = ((($216)) + 40|0);
   HEAP32[$217>>2] = 1;
   $218 = $3;
   $219 = $1;
   $220 = ((($219)) + 56|0);
   HEAP32[$220>>2] = $218;
   $221 = $1;
   $222 = ((($221)) + 52|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223 & -9;
   $225 = $224 | 8;
   HEAP8[$222>>0] = $225;
   STACKTOP = sp;return 0;
  }
  $226 = $3;
  $227 = ((($226)) + 20|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = ($228|0)==(196);
  if ($229) {
   $230 = $2;
   $231 = ((($230)) + 52|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = ($232&255) >>> 1;
   $234 = $233 & 1;
   $235 = $234&255;
   $236 = ($235|0)==(0);
   if ($236) {
    $237 = $3;
    $238 = ((($237)) + 52|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = ((($239)) + 36|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $1;
    HEAP32[$242>>2] = $241;
    $243 = $1;
    $244 = ((($243)) + 52|0);
    $245 = HEAP8[$244>>0]|0;
    $246 = $245 & -9;
    $247 = $246 | 8;
    HEAP8[$244>>0] = $247;
    $248 = $3;
    $249 = ((($248)) + 52|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = ((($250)) + 20|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $1;
    $254 = ((($253)) + 44|0);
    HEAP32[$254>>2] = $252;
    $255 = $3;
    $256 = ((($255)) + 52|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $1;
    $259 = ((($258)) + 64|0);
    HEAP32[$259>>2] = $257;
    STACKTOP = sp;return 0;
   }
  }
  $260 = $1;
  $261 = ((($260)) + 52|0);
  $262 = HEAP8[$261>>0]|0;
  $263 = $262 & -9;
  $264 = $263 | 8;
  HEAP8[$261>>0] = $264;
  $265 = $1;
  $266 = ((($265)) + 44|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($267|0)==(192);
  if ($268) {
   $269 = $2;
   $270 = ((($269)) + 44|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = $1;
   $273 = ((($272)) + 44|0);
   HEAP32[$273>>2] = $271;
  }
  $274 = $2;
  $275 = ((($274)) + 64|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($276|0)!=(0|0);
  if ($277) {
   $278 = $2;
   $279 = ((($278)) + 60|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ($280|0)==(0|0);
   if ($281) {
    $282 = $2;
    $283 = ((($282)) + 28|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = $1;
    $286 = ((($285)) + 28|0);
    HEAP32[$286>>2] = $284;
    $287 = $2;
    $288 = ((($287)) + 64|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = $1;
    $291 = ((($290)) + 64|0);
    HEAP32[$291>>2] = $289;
    $292 = $1;
    $293 = ((($292)) + 64|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = ((($294)) + 36|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $1;
    HEAP32[$297>>2] = $296;
    STACKTOP = sp;return 0;
   }
  }
  $298 = $3;
  $299 = ((($298)) + 20|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = ($300|0)==(195);
  if ($301) {
   $302 = $2;
   $303 = ((($302)) + 28|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = $1;
   $306 = ((($305)) + 28|0);
   HEAP32[$306>>2] = $304;
   $307 = $3;
   $308 = ((($307)) + 28|0);
   $309 = ((($308)) + 3|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = ($310&255) >>> 4;
   $312 = $311 & 1;
   $313 = $312&255;
   $314 = ($313|0)!=(0);
   $315 = $314 ? 130 : 129;
   $316 = $3;
   $317 = ((($316)) + 28|0);
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = (_SizeFromMemtype($315,$319,0)|0);
   $321 = $1;
   HEAP32[$321>>2] = $320;
   STACKTOP = sp;return 0;
  }
  $322 = $3;
  $323 = ((($322)) + 20|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ($324|0)==(129);
  $326 = $3;
  if ($325) {
   $327 = (_GetSymOfssize($326)|0);
   $328 = 2 << $327;
   $329 = 65280 | $328;
   $330 = $1;
   HEAP32[$330>>2] = $329;
   STACKTOP = sp;return 0;
  }
  $331 = ((($326)) + 20|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ($332|0)==(130);
  if ($333) {
   $334 = $3;
   $335 = (_GetSymOfssize($334)|0);
   $336 = ($335|0)!=(0);
   $337 = $336 ? 65286 : 65285;
   $338 = $1;
   HEAP32[$338>>2] = $337;
   STACKTOP = sp;return 0;
  } else {
   $339 = $2;
   $340 = ((($339)) + 44|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = $3;
   $343 = (_GetSymOfssize($342)|0);
   $344 = $3;
   $345 = ((($344)) + 52|0);
   $346 = HEAP32[$345>>2]|0;
   $347 = (_SizeFromMemtype($341,$343,$346)|0);
   $348 = $1;
   HEAP32[$348>>2] = $347;
   STACKTOP = sp;return 0;
  }
 }
 $44 = $2;
 $45 = ((($44)) + 52|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46&255) >>> 3;
 $48 = $47 & 1;
 $49 = $48&255;
 $50 = ($49|0)==(1);
 $51 = $2;
 if ($50) {
  $52 = ((($51)) + 64|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 64|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = ((($58)) + 2|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)==(4);
   if ($62) {
    $63 = $2;
    $64 = ((($63)) + 64|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $2;
    HEAP32[$68>>2] = $67;
   }
  }
  $69 = $1;
  $70 = $2;
  _TokenAssign($69,$70);
  $71 = $2;
  $72 = ((($71)) + 64|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $1;
  $75 = ((($74)) + 64|0);
  HEAP32[$75>>2] = $73;
  STACKTOP = sp;return 0;
 }
 $76 = ((($51)) + 40|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(2);
 if ($78) {
  $79 = $2;
  $80 = ((($79)) + 52|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81 & 1;
  $83 = $82&255;
  $84 = ($83|0)==(0);
  if ($84) {
   $85 = $2;
   $86 = ((($85)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_SizeFromRegister($89)|0);
   $91 = $1;
   HEAP32[$91>>2] = $90;
   $92 = $1;
   $93 = ((($92)) + 52|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94 & -9;
   $96 = $95 | 8;
   HEAP8[$93>>0] = $96;
   $97 = $1;
   $98 = HEAP32[$97>>2]|0;
   $99 = HEAP8[(558)>>0]|0;
   $100 = $99&255;
   $101 = ($98|0)==($100|0);
   if ($101) {
    $102 = $1;
    $103 = ((($102)) + 44|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(192);
    if ($105) {
     $106 = $2;
     $107 = ((($106)) + 20|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($108)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (15660 + (($110*12)|0)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112 & 14;
     $114 = ($113|0)!=(0);
     if ($114) {
      $115 = $2;
      $116 = ((($115)) + 20|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ((($117)) + 1|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = (_GetStdAssumeEx($120)|0);
      $3 = $121;
      $122 = ($121|0)!=(0|0);
      if ($122) {
       $123 = $3;
       $124 = $1;
       $125 = ((($124)) + 64|0);
       HEAP32[$125>>2] = $123;
       $126 = $3;
       $127 = ((($126)) + 20|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $1;
       $130 = ((($129)) + 44|0);
       HEAP32[$130>>2] = $128;
       $131 = $3;
       $132 = ((($131)) + 36|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = $1;
       HEAP32[$134>>2] = $133;
       STACKTOP = sp;return 0;
      }
     }
    }
   }
   $135 = $2;
   $136 = ((($135)) + 44|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $1;
   $139 = ((($138)) + 44|0);
   HEAP32[$139>>2] = $137;
   $140 = $2;
   $141 = ((($140)) + 64|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $1;
   $144 = ((($143)) + 64|0);
   HEAP32[$144>>2] = $142;
   $145 = $1;
   $146 = ((($145)) + 44|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)==(192);
   if (!($148)) {
    STACKTOP = sp;return 0;
   }
   $149 = $1;
   $150 = HEAP32[$149>>2]|0;
   $151 = $1;
   $152 = ((($151)) + 44|0);
   (_MemtypeFromSize($150,$152)|0);
   STACKTOP = sp;return 0;
  }
 }
 $153 = $2;
 $154 = ((($153)) + 44|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(192);
 if (!($156)) {
  $157 = $2;
  $158 = ((($157)) + 52|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = ($159&255) >>> 1;
  $161 = $160 & 1;
  $162 = $161&255;
  $163 = ($162|0)!=(0);
  if (!($163)) {
   $211 = $1;
   HEAP32[$211>>2] = 0;
   STACKTOP = sp;return 0;
  }
 }
 $164 = $2;
 $165 = ((($164)) + 44|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ($166|0)!=(192);
 $168 = $2;
 if ($167) {
  $169 = ((($168)) + 44|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $2;
  $172 = ((($171)) + 49|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $2;
  $176 = ((($175)) + 64|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (_SizeFromMemtype($170,$174,$177)|0);
  $179 = $1;
  HEAP32[$179>>2] = $178;
  $180 = $2;
  $181 = ((($180)) + 44|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = $1;
  $184 = ((($183)) + 44|0);
  HEAP32[$184>>2] = $182;
 } else {
  $185 = ((($168)) + 64|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)!=(0|0);
  if ($187) {
   $188 = $2;
   $189 = ((($188)) + 64|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ((($190)) + 36|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $1;
   HEAP32[$193>>2] = $192;
   $194 = $2;
   $195 = ((($194)) + 64|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($196)) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $1;
   $200 = ((($199)) + 44|0);
   HEAP32[$200>>2] = $198;
  }
 }
 $201 = $1;
 $202 = ((($201)) + 52|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203 & -9;
 $205 = $204 | 8;
 HEAP8[$202>>0] = $205;
 $206 = $2;
 $207 = ((($206)) + 64|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $1;
 $210 = ((($209)) + 64|0);
 HEAP32[$210>>2] = $208;
 STACKTOP = sp;return 0;
}
function _wimask_op($oper,$opnd1,$opnd2,$sym,$name) {
 $oper = $oper|0;
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $fl = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $oper;
 $2 = $opnd1;
 $3 = $opnd2;
 $4 = $sym;
 $5 = $name;
 $6 = $3;
 $7 = ((($6)) + 52|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8&255) >>> 3;
 $10 = $9 & 1;
 $11 = $10&255;
 $12 = ($11|0)!=(0);
 $13 = $3;
 do {
  if ($12) {
   $14 = ((($13)) + 64|0);
   $15 = HEAP32[$14>>2]|0;
   $4 = $15;
   $16 = $4;
   $17 = ((($16)) + 40|0);
   $18 = ((($17)) + 2|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)!=(4);
   if ($21) {
    $22 = HEAP32[8976>>2]|0;
    $23 = (FUNCTION_TABLE_iii[$22 & 255](161,$vararg_buffer)|0);
    $0 = $23;
    $107 = $0;
    STACKTOP = sp;return ($107|0);
   }
  } else {
   $24 = ((($13)) + 40|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   $27 = $3;
   if ($26) {
    $28 = ((($27)) + 60|0);
    $29 = HEAP32[$28>>2]|0;
    $4 = $29;
    break;
   } else {
    $30 = ((($27)) + 56|0);
    $31 = HEAP32[$30>>2]|0;
    $4 = $31;
    break;
   }
  }
 } while(0);
 $32 = $1;
 $33 = ($32|0)==(166);
 L10: do {
  if ($33) {
   $34 = $2;
   HEAP32[$34>>2] = 0;
   $35 = $3;
   $36 = ((($35)) + 52|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37&255) >>> 3;
   $39 = $38 & 1;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   $42 = $4;
   if ($41) {
    $43 = (_GetRecordMask($42)|0);
    $44 = tempRet0;
    $45 = $2;
    $46 = $45;
    $47 = $46;
    HEAP32[$47>>2] = $43;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP32[$49>>2] = $44;
    break;
   }
   $50 = ((($42)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $i = $51;
   while(1) {
    $52 = $i;
    $53 = $4;
    $54 = ((($53)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $4;
    $57 = ((($56)) + 36|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($55) + ($58))|0;
    $60 = ($52>>>0)<($59>>>0);
    if (!($60)) {
     break L10;
    }
    $61 = $i;
    $62 = (_bitshift64Shl(1,0,($61|0))|0);
    $63 = tempRet0;
    $64 = $2;
    $65 = $64;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($65) + 4)|0;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $71 = $67 | $62;
    $72 = $70 | $63;
    $73 = $64;
    $74 = $73;
    HEAP32[$74>>2] = $71;
    $75 = (($73) + 4)|0;
    $76 = $75;
    HEAP32[$76>>2] = $72;
    $77 = $i;
    $78 = (($77) + 1)|0;
    $i = $78;
   }
  } else {
   $79 = $3;
   $80 = ((($79)) + 52|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ($81&255) >>> 3;
   $83 = $82 & 1;
   $84 = $83&255;
   $85 = ($84|0)!=(0);
   $86 = $4;
   if (!($85)) {
    $102 = ((($86)) + 36|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $2;
    HEAP32[$104>>2] = $103;
    break;
   }
   $dir = $86;
   $87 = $dir;
   $88 = ((($87)) + 60|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$89>>2]|0;
   $fl = $90;
   while(1) {
    $91 = $fl;
    $92 = ($91|0)!=(0|0);
    if (!($92)) {
     break L10;
    }
    $93 = $fl;
    $94 = ((($93)) + 36|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $2;
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($95))|0;
    HEAP32[$96>>2] = $98;
    $99 = $fl;
    $100 = ((($99)) + 60|0);
    $101 = HEAP32[$100>>2]|0;
    $fl = $101;
   }
  }
 } while(0);
 $105 = $2;
 $106 = ((($105)) + 40|0);
 HEAP32[$106>>2] = 0;
 $0 = 0;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _GetRecordMask($record) {
 $record = $record|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl = 0, $i = 0, $mask = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mask = sp;
 $0 = $record;
 $1 = $mask;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $fl = $8;
 while(1) {
  $9 = $fl;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $fl;
  $sym = $11;
  $12 = $sym;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $i = $14;
  while(1) {
   $15 = $i;
   $16 = $sym;
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $sym;
   $20 = ((($19)) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + ($21))|0;
   $23 = ($15>>>0)<($22>>>0);
   if (!($23)) {
    break;
   }
   $24 = $i;
   $25 = 1 << $24;
   $26 = ($25|0)<(0);
   $27 = $26 << 31 >> 31;
   $28 = $mask;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 4)|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = $30 | $25;
   $35 = $33 | $27;
   $36 = $mask;
   $37 = $36;
   HEAP32[$37>>2] = $34;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   $40 = $i;
   $41 = (($40) + 1)|0;
   $i = $41;
  }
  $42 = $fl;
  $43 = ((($42)) + 60|0);
  $44 = HEAP32[$43>>2]|0;
  $fl = $44;
 }
 $45 = $mask;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 tempRet0 = ($50);
 STACKTOP = sp;return ($47|0);
}
function _GetSizeValue($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(195);
 $6 = $1;
 if ($5) {
  $7 = ((($6)) + 28|0);
  $8 = ((($7)) + 3|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9&255) >>> 4;
  $11 = $10 & 1;
  $12 = $11&255;
  $13 = ($12|0)!=(0);
  $14 = $13 ? 130 : 129;
  $15 = $1;
  $16 = ((($15)) + 28|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $1;
  $20 = ((($19)) + 52|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_SizeFromMemtype($14,$18,$21)|0);
  $0 = $22;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $23 = ((($6)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = ((($25)) + 28|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $1;
  $30 = ((($29)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_SizeFromMemtype($24,$28,$31)|0);
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _IsOffset($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opnd;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(192);
 do {
  if ($5) {
   $6 = $1;
   $7 = ((($6)) + 36|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(167);
   if (!($9)) {
    $10 = $1;
    $11 = ((($10)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(159);
    if (!($13)) {
     $14 = $1;
     $15 = ((($14)) + 36|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(169);
     if (!($17)) {
      $18 = $1;
      $19 = ((($18)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(165);
      if (!($21)) {
       break;
      }
     }
    }
   }
   $0 = 1;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  }
 } while(0);
 $0 = 0;
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _struct_field_error($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $opnd;
 $2 = $1;
 $3 = ((($2)) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255) >>> 4;
 $6 = $5 & 1;
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 40|0);
  HEAP32[$10>>2] = -1;
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $11 = HEAP32[8976>>2]|0;
  $12 = (FUNCTION_TABLE_iii[$11 & 255](271,$vararg_buffer)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _index_connect($opnd1,$opnd2) {
 $opnd1 = $opnd1|0;
 $opnd2 = $opnd2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $opnd1;
 $2 = $opnd2;
 $3 = $2;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  do {
   if ($10) {
    $11 = $2;
    $12 = ((($11)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $1;
    $15 = ((($14)) + 20|0);
    HEAP32[$15>>2] = $13;
   } else {
    $16 = $1;
    $17 = ((($16)) + 24|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    if (!($19)) {
     $42 = HEAP32[8976>>2]|0;
     $43 = (FUNCTION_TABLE_iii[$42 & 255](34,$vararg_buffer)|0);
     $0 = $43;
     $74 = $0;
     STACKTOP = sp;return ($74|0);
    }
    $20 = $1;
    $21 = ((($20)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)!=(4);
    if ($26) {
     $27 = $1;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $1;
     $31 = ((($30)) + 24|0);
     HEAP32[$31>>2] = $29;
     $32 = $2;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $1;
     $36 = ((($35)) + 20|0);
     HEAP32[$36>>2] = $34;
     break;
    } else {
     $37 = $2;
     $38 = ((($37)) + 20|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $1;
     $41 = ((($40)) + 24|0);
     HEAP32[$41>>2] = $39;
     break;
    }
   }
  } while(0);
  $44 = $1;
  $45 = ((($44)) + 52|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & -2;
  $48 = $47 | 1;
  HEAP8[$45>>0] = $48;
 }
 $49 = $2;
 $50 = ((($49)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)!=(0|0);
 do {
  if ($52) {
   $53 = $1;
   $54 = ((($53)) + 24|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if ($56) {
    $57 = $2;
    $58 = ((($57)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $1;
    $61 = ((($60)) + 24|0);
    HEAP32[$61>>2] = $59;
    $62 = $2;
    $63 = ((($62)) + 48|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $1;
    $66 = ((($65)) + 48|0);
    HEAP8[$66>>0] = $64;
    $67 = $1;
    $68 = ((($67)) + 52|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 & -2;
    $71 = $70 | 1;
    HEAP8[$68>>0] = $71;
    break;
   }
   $72 = HEAP32[8976>>2]|0;
   $73 = (FUNCTION_TABLE_iii[$72 & 255](34,$vararg_buffer1)|0);
   $0 = $73;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _fix_struct_value($opnd) {
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(7);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($15))|0;
 HEAP32[$16>>2] = $18;
 $19 = $0;
 $20 = ((($19)) + 60|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _GetTypeSize($mem_type,$Ofssize) {
 $mem_type = $mem_type|0;
 $Ofssize = $Ofssize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mem_type;
 $2 = $Ofssize;
 $3 = $1;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = $1;
   $7 = $6 & 31;
   $8 = (($7) + 1)|0;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ($9|0)==(254);
   if ($10) {
    $11 = HEAP8[(556)>>0]|0;
    $12 = $11&255;
    $2 = $12;
   }
   $13 = $1;
   switch ($13|0) {
   case 129:  {
    $14 = $2;
    $15 = 2 << $14;
    $16 = 65280 | $15;
    $0 = $16;
    break L1;
    break;
   }
   case 130:  {
    $17 = $2;
    $18 = ($17|0)==(0);
    if ($18) {
     $23 = 65285;
    } else {
     $19 = $2;
     $20 = 2 << $19;
     $21 = (($20) + 2)|0;
     $22 = 65280 | $21;
     $23 = $22;
    }
    $0 = $23;
    break L1;
    break;
   }
   default: {
    $0 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _ExterndefDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isnew = 0, $langtype = 0, $sym = 0, $sym2 = 0, $ti = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 76|0;
 $langtype = sp + 60|0;
 $ti = sp + 40|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 while(1) {
  $5 = HEAP8[(556)>>0]|0;
  $6 = ((($ti)) + 14|0);
  HEAP8[$6>>0] = $5;
  $7 = HEAP32[(516)>>2]|0;
  HEAP32[$langtype>>2] = $7;
  $8 = $2;
  (_GetLangType($1,$8,$langtype)|0);
  $9 = HEAP32[$1>>2]|0;
  $10 = $2;
  $11 = (($10) + ($9<<4)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)!=(8);
  $15 = HEAP32[$1>>2]|0;
  if ($14) {
   label = 3;
   break;
  }
  $21 = (($15) + 1)|0;
  HEAP32[$1>>2] = $21;
  $22 = $2;
  $23 = (($22) + ($15<<4)|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $token = $25;
  $26 = HEAP32[$1>>2]|0;
  $27 = $2;
  $28 = (($27) + ($26<<4)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)!=(58);
  if ($31) {
   label = 5;
   break;
  }
  $33 = HEAP32[$1>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$1>>2] = $34;
  $35 = $token;
  $36 = (_SymFind($35)|0);
  $sym = $36;
  $37 = ((($ti)) + 8|0);
  HEAP32[$37>>2] = 192;
  HEAP32[$ti>>2] = 0;
  $38 = ((($ti)) + 12|0);
  HEAP8[$38>>0] = 0;
  $39 = ((($ti)) + 13|0);
  HEAP8[$39>>0] = 0;
  $40 = ((($ti)) + 16|0);
  HEAP32[$40>>2] = 192;
  $41 = ((($ti)) + 4|0);
  HEAP32[$41>>2] = 0;
  $42 = HEAP8[(556)>>0]|0;
  $43 = ((($ti)) + 14|0);
  HEAP8[$43>>0] = $42;
  $44 = HEAP32[$1>>2]|0;
  $45 = $2;
  $46 = (($45) + ($44<<4)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)==(8);
  if ($49) {
   $50 = HEAP32[$1>>2]|0;
   $51 = $2;
   $52 = (($51) + ($50<<4)|0);
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_strcasecmp($54,87031)|0);
   $56 = (0)==($55|0);
   if ($56) {
    $57 = HEAP32[$1>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[$1>>2] = $58;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $59 = HEAP32[$1>>2]|0;
   $60 = $2;
   $61 = (($60) + ($59<<4)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = ($63|0)==(3);
   if ($64) {
    $65 = HEAP32[$1>>2]|0;
    $66 = $2;
    $67 = (($66) + ($65<<4)|0);
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(350);
    if ($70) {
     label = 11;
     break;
    }
   }
   $80 = HEAP32[$1>>2]|0;
   $81 = $2;
   $82 = (($81) + ($80<<4)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = ($84|0)!=(0);
   if ($85) {
    $86 = HEAP32[$1>>2]|0;
    $87 = $2;
    $88 = (($87) + ($86<<4)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ($90|0)!=(44);
    if ($91) {
     $92 = $2;
     $93 = (_GetQualifiedType($1,$92,$ti)|0);
     $94 = ($93|0)==(-1);
     if ($94) {
      label = 15;
      break;
     }
    }
   }
  }
  $isnew = 0;
  $95 = $sym;
  $96 = ($95|0)==(0|0);
  if ($96) {
   label = 18;
  } else {
   $97 = $sym;
   $98 = ((($97)) + 16|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)==(0);
   if ($100) {
    label = 18;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $101 = $sym;
   $102 = $token;
   $103 = (_CreateExternal($101,$102,1)|0);
   $sym = $103;
   $isnew = 1;
  }
  $104 = $isnew;
  $105 = ($104<<24>>24)!=(0);
  if ($105) {
   $106 = ((($ti)) + 12|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = ($108|0)==(0);
   if ($109) {
    $110 = ((($ti)) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(0|0);
    if ($112) {
     $113 = ((($ti)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($114)) + 24|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = ($116&65535) >>> 11;
     $118 = $117 & 1;
     $119 = $118&255;
     $120 = $119&255;
     $121 = ($120|0)!=(0);
     if ($121) {
      $122 = $sym;
      (_CreateProc($122,0,2)|0);
      $123 = $sym;
      $124 = ((($ti)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      (_CopyPrototype($123,$125)|0);
      $126 = ((($ti)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($127)) + 20|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($ti)) + 8|0);
      HEAP32[$130>>2] = $129;
      $131 = ((($ti)) + 4|0);
      HEAP32[$131>>2] = 0;
     }
    }
   }
   $132 = ((($ti)) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   switch ($133|0) {
   case 192:  {
    break;
   }
   case 130:  {
    $134 = HEAP8[(6084)>>0]|0;
    $135 = ($134<<24>>24)!=(0);
    if (!($135)) {
     label = 26;
    }
    break;
   }
   default: {
    label = 26;
   }
   }
   if ((label|0) == 26) {
    label = 0;
    $136 = HEAP32[(584)>>2]|0;
    $137 = $sym;
    $138 = ((($137)) + 12|0);
    HEAP32[$138>>2] = $136;
   }
   $139 = ((($ti)) + 14|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $sym;
   $142 = ((($141)) + 28|0);
   HEAP8[$142>>0] = $140;
   $143 = ((($ti)) + 12|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = ($145|0)==(0);
   if ($146) {
    $147 = ((($ti)) + 14|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = HEAP8[(556)>>0]|0;
    $151 = $150&255;
    $152 = ($149|0)!=($151|0);
    if ($152) {
     $153 = ((($ti)) + 14|0);
     $154 = HEAP8[$153>>0]|0;
     $155 = $sym;
     $156 = ((($155)) + 28|0);
     $157 = ((($156)) + 3|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $154 & 3;
     $160 = $158 & -4;
     $161 = $160 | $159;
     HEAP8[$157>>0] = $161;
     $162 = $sym;
     $163 = ((($162)) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)!=(0|0);
     if ($165) {
      $166 = $sym;
      $167 = ((($166)) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ((($168)) + 60|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($170)) + 64|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = $sym;
      $175 = ((($174)) + 28|0);
      $176 = ((($175)) + 3|0);
      $177 = HEAP8[$176>>0]|0;
      $178 = $177 & 3;
      $179 = $178&255;
      $180 = ($173|0)!=($179|0);
      if ($180) {
       $181 = $sym;
       $182 = ((($181)) + 12|0);
       HEAP32[$182>>2] = 0;
      }
     }
    }
   }
   $183 = ((($ti)) + 8|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $sym;
   $186 = ((($185)) + 20|0);
   HEAP32[$186>>2] = $184;
   $187 = ((($ti)) + 12|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $sym;
   $190 = ((($189)) + 28|0);
   $191 = ((($190)) + 1|0);
   HEAP8[$191>>0] = $188;
   $192 = ((($ti)) + 13|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $sym;
   $195 = ((($194)) + 28|0);
   $196 = ((($195)) + 3|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $193 & 1;
   $199 = ($198 << 4)&255;
   $200 = $197 & -17;
   $201 = $200 | $199;
   HEAP8[$196>>0] = $201;
   $202 = ((($ti)) + 16|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $203&255;
   $205 = $sym;
   $206 = ((($205)) + 28|0);
   $207 = ((($206)) + 2|0);
   HEAP8[$207>>0] = $204;
   $208 = ((($ti)) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ($209|0)==(196);
   $211 = ((($ti)) + 4|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $sym;
   if ($210) {
    $214 = ((($213)) + 52|0);
    HEAP32[$214>>2] = $212;
   } else {
    $215 = ((($213)) + 32|0);
    HEAP32[$215>>2] = $212;
   }
   $216 = $sym;
   $217 = HEAP32[$langtype>>2]|0;
   _SetMangler($216,$217,0);
  } else {
   $218 = HEAP32[4884>>2]|0;
   $219 = ($218|0)==(0);
   if ($219) {
    $220 = ((($ti)) + 12|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = ($222|0)==(0);
    if ($223) {
     $224 = ((($ti)) + 4|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($225|0)!=(0|0);
     if ($226) {
      $227 = ((($ti)) + 4|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = ((($228)) + 24|0);
      $230 = HEAP16[$229>>1]|0;
      $231 = ($230&65535) >>> 11;
      $232 = $231 & 1;
      $233 = $232&255;
      $234 = $233&255;
      $235 = ($234|0)!=(0);
      if ($235) {
       $236 = ((($ti)) + 4|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = ((($237)) + 20|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = ((($ti)) + 8|0);
       HEAP32[$240>>2] = $239;
       $241 = ((($ti)) + 4|0);
       HEAP32[$241>>2] = 0;
      }
     }
    }
    $242 = $sym;
    $243 = ((($242)) + 20|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = ((($ti)) + 8|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = ($244|0)!=($246|0);
    $248 = $sym;
    if ($247) {
     $249 = ((($248)) + 4|0);
     $250 = HEAP32[$249>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $250;
     _EmitWarn(1,136,$vararg_buffer1);
    } else {
     $251 = ((($248)) + 20|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(196);
     if ($253) {
      $254 = $sym;
      $255 = ((($254)) + 52|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ((($ti)) + 4|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($256|0)!=($258|0);
      if ($259) {
       $260 = $sym;
       $sym2 = $260;
       while(1) {
        $261 = $sym2;
        $262 = ((($261)) + 52|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($263|0)!=(0|0);
        if (!($264)) {
         break;
        }
        $265 = $sym2;
        $266 = ((($265)) + 52|0);
        $267 = HEAP32[$266>>2]|0;
        $sym2 = $267;
       }
       while(1) {
        $268 = ((($ti)) + 4|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ((($269)) + 52|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ($271|0)!=(0|0);
        if (!($272)) {
         break;
        }
        $273 = ((($ti)) + 4|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = ((($274)) + 52|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = ((($ti)) + 4|0);
        HEAP32[$277>>2] = $276;
       }
       $278 = $sym2;
       $279 = ((($ti)) + 4|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($278|0)!=($280|0);
       if ($281) {
        $282 = $sym;
        $283 = ((($282)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $284;
        _EmitWarn(1,136,$vararg_buffer4);
       }
      }
     }
    }
    $285 = HEAP32[$langtype>>2]|0;
    $286 = ($285|0)!=(0);
    if ($286) {
     $287 = $sym;
     $288 = ((($287)) + 48|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = HEAP32[$langtype>>2]|0;
     $291 = ($289|0)!=($290|0);
     if ($291) {
      $292 = $sym;
      $293 = ((($292)) + 4|0);
      $294 = HEAP32[$293>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $294;
      _EmitWarn(3,103,$vararg_buffer7);
     }
    }
   }
  }
  $295 = $sym;
  $296 = ((($295)) + 24|0);
  $297 = HEAP16[$296>>1]|0;
  $298 = $297 & -3;
  $299 = $298 | 2;
  HEAP16[$296>>1] = $299;
  $300 = $sym;
  $301 = ((($300)) + 16|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = ($302|0)==(1);
  if ($303) {
   $304 = $sym;
   $305 = ((($304)) + 24|0);
   $306 = HEAP16[$305>>1]|0;
   $307 = ($306&65535) >>> 7;
   $308 = $307 & 1;
   $309 = $308&255;
   $310 = $309&255;
   $311 = ($310|0)==(0);
   if ($311) {
    $312 = $sym;
    $313 = ((($312)) + 24|0);
    $314 = HEAP16[$313>>1]|0;
    $315 = $314 & -129;
    $316 = $315 | 128;
    HEAP16[$313>>1] = $316;
    $317 = $sym;
    _AddPublicData($317);
   }
  }
  $318 = HEAP32[$1>>2]|0;
  $319 = $2;
  $320 = (($319) + ($318<<4)|0);
  $321 = HEAP8[$320>>0]|0;
  $322 = $321&255;
  $323 = ($322|0)!=(0);
  if ($323) {
   $324 = HEAP32[$1>>2]|0;
   $325 = $2;
   $326 = (($325) + ($324<<4)|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = $327&255;
   $329 = ($328|0)==(44);
   $330 = HEAP32[$1>>2]|0;
   if (!($329)) {
    label = 62;
    break;
   }
   $331 = (($330) + 1)|0;
   $332 = HEAP32[(616)>>2]|0;
   $333 = ($331|0)<($332|0);
   if ($333) {
    $334 = HEAP32[$1>>2]|0;
    $335 = (($334) + 1)|0;
    HEAP32[$1>>2] = $335;
   }
  }
  $341 = HEAP32[$1>>2]|0;
  $342 = HEAP32[(616)>>2]|0;
  $343 = ($341|0)<($342|0);
  if (!($343)) {
   label = 64;
   break;
  }
 }
 if ((label|0) == 3) {
  $16 = $2;
  $17 = (($16) + ($15<<4)|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $19;
  $20 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $20;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 else if ((label|0) == 5) {
  $32 = (_EmitError(84)|0);
  $0 = $32;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 else if ((label|0) == 11) {
  $71 = HEAP32[$1>>2]|0;
  $72 = (($71) + 1)|0;
  $73 = $2;
  $74 = $token;
  $75 = HEAP32[$langtype>>2]|0;
  $76 = (_CreateProto($72,$73,$74,$75)|0);
  $sym = $76;
  $77 = $sym;
  $78 = ($77|0)!=(0|0);
  $79 = $78 ? 0 : -1;
  $0 = $79;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 else if ((label|0) == 62) {
  $336 = $2;
  $337 = (($336) + ($330<<4)|0);
  $338 = ((($337)) + 12|0);
  $339 = HEAP32[$338>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $339;
  $340 = (_EmitErr(39,$vararg_buffer10)|0);
  $0 = $340;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 else if ((label|0) == 64) {
  $0 = 0;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 return (0)|0;
}
function _AddPublicData($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 _QAddItem((332),$1);
 STACKTOP = sp;return;
}
function _ProtoDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $2;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_SymFind($7)|0);
  $sym = $8;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $sym;
   $11 = ((($10)) + 24|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12&65535) >>> 11;
   $14 = $13 & 1;
   $15 = $14&255;
   $16 = $15&255;
   $17 = ($16|0)==(1);
   if ($17) {
    $18 = $sym;
    $19 = ((($18)) + 24|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 & -3;
    $22 = $21 | 2;
    HEAP16[$19>>1] = $22;
   }
  }
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $23 = $1;
  $24 = ($23|0)!=(1);
  if ($24) {
   $25 = $1;
   $26 = $2;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer>>2] = $29;
   $30 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $30;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  } else {
   $31 = $2;
   $32 = $2;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[(516)>>2]|0;
   $36 = (_CreateProto(2,$31,$34,$35)|0);
   $37 = ($36|0)!=(0|0);
   $38 = $37 ? 0 : -1;
   $0 = $38;
   $39 = $0;
   STACKTOP = sp;return ($39|0);
  }
 }
 return (0)|0;
}
function _MakeExtern($name,$mem_type,$vartype,$sym,$Ofssize) {
 $name = $name|0;
 $mem_type = $mem_type|0;
 $vartype = $vartype|0;
 $sym = $sym|0;
 $Ofssize = $Ofssize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $mem_type;
 $3 = $vartype;
 $4 = $sym;
 $5 = $Ofssize;
 $6 = $4;
 $7 = $1;
 $8 = (_CreateExternal($6,$7,0)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $11 = $2;
 $12 = ($11|0)==(192);
 if (!($12)) {
  $13 = HEAP8[(6084)>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  $16 = $2;
  $17 = ($16|0)!=(130);
  $or$cond = $15 | $17;
  if ($or$cond) {
   $18 = HEAP32[(584)>>2]|0;
   $19 = $4;
   $20 = ((($19)) + 12|0);
   HEAP32[$20>>2] = $18;
  }
 }
 $21 = $4;
 $22 = ((($21)) + 24|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 & -3;
 $25 = $24 | 2;
 HEAP16[$22>>1] = $25;
 $26 = $2;
 $27 = $4;
 $28 = ((($27)) + 20|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $30 = $4;
 $31 = ((($30)) + 28|0);
 $32 = ((($31)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $29 & 3;
 $35 = $33 & -4;
 $36 = $35 | $34;
 HEAP8[$32>>0] = $36;
 $37 = $3;
 $38 = $4;
 $39 = ((($38)) + 52|0);
 HEAP32[$39>>2] = $37;
 $40 = $4;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _ExternDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $altname = 0, $langtype = 0, $sym = 0, $ti = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 92|0;
 $langtype = sp + 72|0;
 $ti = sp + 52|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 while(1) {
  $altname = 0;
  $5 = HEAP32[(516)>>2]|0;
  HEAP32[$langtype>>2] = $5;
  $6 = $2;
  (_GetLangType($1,$6,$langtype)|0);
  $7 = HEAP32[$1>>2]|0;
  $8 = $2;
  $9 = (($8) + ($7<<4)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(8);
  $13 = HEAP32[$1>>2]|0;
  if ($12) {
   label = 3;
   break;
  }
  $19 = (($13) + 1)|0;
  HEAP32[$1>>2] = $19;
  $20 = $2;
  $21 = (($20) + ($13<<4)|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $token = $23;
  $24 = HEAP32[$1>>2]|0;
  $25 = $2;
  $26 = (($25) + ($24<<4)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(40);
  if ($29) {
   $30 = HEAP32[$1>>2]|0;
   $31 = (($30) + 1)|0;
   HEAP32[$1>>2] = $31;
   $32 = HEAP32[$1>>2]|0;
   $33 = $2;
   $34 = (($33) + ($32<<4)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)!=(8);
   $38 = HEAP32[$1>>2]|0;
   $39 = $2;
   $40 = (($39) + ($38<<4)|0);
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   if ($37) {
    label = 6;
    break;
   }
   $altname = $42;
   $44 = HEAP32[$1>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$1>>2] = $45;
   $46 = HEAP32[$1>>2]|0;
   $47 = $2;
   $48 = (($47) + ($46<<4)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)!=(41);
   if ($51) {
    label = 8;
    break;
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$1>>2] = $54;
  }
  $55 = HEAP32[$1>>2]|0;
  $56 = $2;
  $57 = (($56) + ($55<<4)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)!=(58);
  if ($60) {
   label = 11;
   break;
  }
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$1>>2] = $63;
  $64 = $token;
  $65 = (_SymFind($64)|0);
  $sym = $65;
  $66 = ((($ti)) + 8|0);
  HEAP32[$66>>2] = 192;
  HEAP32[$ti>>2] = 0;
  $67 = ((($ti)) + 12|0);
  HEAP8[$67>>0] = 0;
  $68 = ((($ti)) + 13|0);
  HEAP8[$68>>0] = 0;
  $69 = ((($ti)) + 16|0);
  HEAP32[$69>>2] = 192;
  $70 = ((($ti)) + 4|0);
  HEAP32[$70>>2] = 0;
  $71 = HEAP8[(556)>>0]|0;
  $72 = ((($ti)) + 14|0);
  HEAP8[$72>>0] = $71;
  $73 = HEAP32[$1>>2]|0;
  $74 = $2;
  $75 = (($74) + ($73<<4)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)==(8);
  if ($78) {
   $79 = HEAP32[$1>>2]|0;
   $80 = $2;
   $81 = (($80) + ($79<<4)|0);
   $82 = ((($81)) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (_strcasecmp($83,87031)|0);
   $85 = (0)==($84|0);
   if ($85) {
    $86 = HEAP32[$1>>2]|0;
    $87 = (($86) + 1)|0;
    HEAP32[$1>>2] = $87;
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $88 = HEAP32[$1>>2]|0;
   $89 = $2;
   $90 = (($89) + ($88<<4)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = ($92|0)==(3);
   if ($93) {
    $94 = HEAP32[$1>>2]|0;
    $95 = $2;
    $96 = (($95) + ($94<<4)|0);
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(350);
    if ($99) {
     label = 17;
     break;
    }
   }
   $123 = HEAP32[$1>>2]|0;
   $124 = $2;
   $125 = (($124) + ($123<<4)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = HEAP32[$1>>2]|0;
    $130 = $2;
    $131 = (($130) + ($129<<4)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = ($133|0)!=(44);
    if ($134) {
     $135 = $2;
     $136 = (_GetQualifiedType($1,$135,$ti)|0);
     $137 = ($136|0)==(-1);
     if ($137) {
      label = 25;
      break;
     }
    }
   }
  }
  $138 = $sym;
  $139 = ($138|0)==(0|0);
  if ($139) {
   label = 28;
  } else {
   $140 = $sym;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   if ($143) {
    label = 28;
   } else {
    $196 = $sym;
    $197 = ((($196)) + 16|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ($198|0)==(1);
    if ($199) {
     $200 = $sym;
     $201 = ((($200)) + 20|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(192);
     if (!($203)) {
      label = 36;
     }
    } else {
     label = 36;
    }
    if ((label|0) == 36) {
     label = 0;
     $204 = $sym;
     $205 = ((($204)) + 16|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = ($206|0)!=(2);
     if ($207) {
      label = 37;
      break;
     }
    }
    $210 = ((($ti)) + 12|0);
    $211 = HEAP8[$210>>0]|0;
    $212 = $211&255;
    $213 = ($212|0)==(0);
    if ($213) {
     $214 = ((($ti)) + 4|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($215|0)!=(0|0);
     if ($216) {
      $217 = ((($ti)) + 4|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ((($218)) + 24|0);
      $220 = HEAP16[$219>>1]|0;
      $221 = ($220&65535) >>> 11;
      $222 = $221 & 1;
      $223 = $222&255;
      $224 = $223&255;
      $225 = ($224|0)!=(0);
      if ($225) {
       $226 = ((($ti)) + 4|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ((($227)) + 20|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ((($ti)) + 8|0);
       HEAP32[$230>>2] = $229;
       $231 = ((($ti)) + 4|0);
       HEAP32[$231>>2] = 0;
      }
     }
    }
    $232 = $sym;
    $233 = ((($232)) + 20|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ((($ti)) + 8|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ($234|0)!=($236|0);
    if ($237) {
     label = 54;
     break;
    }
    $238 = $sym;
    $239 = ((($238)) + 28|0);
    $240 = ((($239)) + 1|0);
    $241 = HEAP8[$240>>0]|0;
    $242 = $241&255;
    $243 = ((($ti)) + 12|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($242|0)!=($245|0);
    if ($246) {
     label = 54;
     break;
    }
    $247 = $sym;
    $248 = ((($247)) + 28|0);
    $249 = ((($248)) + 3|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = ($250&255) >>> 4;
    $252 = $251 & 1;
    $253 = $252&255;
    $254 = ((($ti)) + 13|0);
    $255 = HEAP8[$254>>0]|0;
    $256 = $255&255;
    $257 = ($253|0)!=($256|0);
    if ($257) {
     label = 54;
     break;
    }
    $258 = $sym;
    $259 = ((($258)) + 28|0);
    $260 = ((($259)) + 1|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261&255;
    $263 = ($262|0)!=(0);
    if ($263) {
     $264 = $sym;
     $265 = ((($264)) + 28|0);
     $266 = ((($265)) + 2|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267&255;
     $269 = ((($ti)) + 16|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($268|0)!=($270|0);
     if ($271) {
      label = 54;
      break;
     }
    }
    $272 = $sym;
    $273 = ((($272)) + 20|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)==(196);
    $276 = $sym;
    if ($275) {
     $277 = ((($276)) + 52|0);
     $278 = HEAP32[$277>>2]|0;
     $284 = $278;
    } else {
     $279 = ((($276)) + 32|0);
     $280 = HEAP32[$279>>2]|0;
     $284 = $280;
    }
    $281 = ((($ti)) + 4|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = ($284|0)!=($282|0);
    if ($283) {
     label = 54;
     break;
    }
    $285 = HEAP32[$langtype>>2]|0;
    $286 = ($285|0)!=(0);
    if ($286) {
     $287 = $sym;
     $288 = ((($287)) + 48|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = ($289|0)!=(0);
     if ($290) {
      $291 = $sym;
      $292 = ((($291)) + 48|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = HEAP32[$langtype>>2]|0;
      $295 = ($293|0)!=($294|0);
      if ($295) {
       label = 54;
       break;
      }
     }
    }
   }
  }
  if ((label|0) == 28) {
   label = 0;
   $144 = $token;
   $145 = ((($ti)) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ((($ti)) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)==(196);
   $150 = ((($ti)) + 4|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $149 ? $151 : 0;
   $153 = $sym;
   $154 = ((($ti)) + 12|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = ($156|0)!=(0);
   $158 = HEAP8[(556)>>0]|0;
   $159 = ((($ti)) + 14|0);
   $160 = HEAP8[$159>>0]|0;
   $$sink = $157 ? $158 : $160;
   $161 = $$sink&255;
   $162 = $161&255;
   $163 = (_MakeExtern($144,$146,$152,$153,$162)|0);
   $sym = $163;
   $164 = ($163|0)==(0|0);
   if ($164) {
    label = 29;
    break;
   }
   $165 = ((($ti)) + 12|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = ($167|0)==(0);
   if ($168) {
    $169 = ((($ti)) + 4|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)!=(0|0);
    if ($171) {
     $172 = ((($ti)) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = ((($173)) + 24|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = ($175&65535) >>> 11;
     $177 = $176 & 1;
     $178 = $177&255;
     $179 = $178&255;
     $180 = ($179|0)!=(0);
     if ($180) {
      $181 = $sym;
      (_CreateProc($181,0,2)|0);
      $182 = $sym;
      $183 = ((($182)) + 28|0);
      $184 = ((($183)) + 3|0);
      $185 = HEAP8[$184>>0]|0;
      $186 = $185 & -9;
      HEAP8[$184>>0] = $186;
      $187 = $sym;
      $188 = ((($ti)) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      (_CopyPrototype($187,$189)|0);
      $190 = ((($ti)) + 4|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ((($191)) + 20|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ((($ti)) + 8|0);
      HEAP32[$194>>2] = $193;
      $195 = ((($ti)) + 4|0);
      HEAP32[$195>>2] = 0;
     }
    }
   }
  }
  $298 = $sym;
  $299 = ((($298)) + 24|0);
  $300 = HEAP16[$299>>1]|0;
  $301 = $300 & -3;
  $302 = $301 | 2;
  HEAP16[$299>>1] = $302;
  $303 = ((($ti)) + 14|0);
  $304 = HEAP8[$303>>0]|0;
  $305 = $sym;
  $306 = ((($305)) + 28|0);
  HEAP8[$306>>0] = $304;
  $307 = ((($ti)) + 12|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = ($309|0)==(0);
  if ($310) {
   $311 = ((($ti)) + 14|0);
   $312 = HEAP8[$311>>0]|0;
   $313 = $312&255;
   $314 = HEAP8[(556)>>0]|0;
   $315 = $314&255;
   $316 = ($313|0)!=($315|0);
   if ($316) {
    $317 = ((($ti)) + 14|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $sym;
    $320 = ((($319)) + 28|0);
    $321 = ((($320)) + 3|0);
    $322 = HEAP8[$321>>0]|0;
    $323 = $318 & 3;
    $324 = $322 & -4;
    $325 = $324 | $323;
    HEAP8[$321>>0] = $325;
    $326 = $sym;
    $327 = ((($326)) + 12|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328|0)!=(0|0);
    if ($329) {
     $330 = $sym;
     $331 = ((($330)) + 12|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = ((($332)) + 60|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ((($334)) + 64|0);
     $336 = HEAP8[$335>>0]|0;
     $337 = $336&255;
     $338 = $sym;
     $339 = ((($338)) + 28|0);
     $340 = ((($339)) + 3|0);
     $341 = HEAP8[$340>>0]|0;
     $342 = $341 & 3;
     $343 = $342&255;
     $344 = ($337|0)!=($343|0);
     if ($344) {
      $345 = $sym;
      $346 = ((($345)) + 12|0);
      HEAP32[$346>>2] = 0;
     }
    }
   }
  }
  $347 = ((($ti)) + 8|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = $sym;
  $350 = ((($349)) + 20|0);
  HEAP32[$350>>2] = $348;
  $351 = ((($ti)) + 12|0);
  $352 = HEAP8[$351>>0]|0;
  $353 = $sym;
  $354 = ((($353)) + 28|0);
  $355 = ((($354)) + 1|0);
  HEAP8[$355>>0] = $352;
  $356 = ((($ti)) + 13|0);
  $357 = HEAP8[$356>>0]|0;
  $358 = $sym;
  $359 = ((($358)) + 28|0);
  $360 = ((($359)) + 3|0);
  $361 = HEAP8[$360>>0]|0;
  $362 = $357 & 1;
  $363 = ($362 << 4)&255;
  $364 = $361 & -17;
  $365 = $364 | $363;
  HEAP8[$360>>0] = $365;
  $366 = ((($ti)) + 16|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $367&255;
  $369 = $sym;
  $370 = ((($369)) + 28|0);
  $371 = ((($370)) + 2|0);
  HEAP8[$371>>0] = $368;
  $372 = ((($ti)) + 8|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = ($373|0)==(196);
  $375 = ((($ti)) + 4|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = $sym;
  if ($374) {
   $378 = ((($377)) + 52|0);
   HEAP32[$378>>2] = $376;
  } else {
   $379 = ((($377)) + 32|0);
   HEAP32[$379>>2] = $376;
  }
  $380 = $altname;
  $381 = $sym;
  (_HandleAltname($380,$381)|0);
  $382 = $sym;
  $383 = HEAP32[$langtype>>2]|0;
  _SetMangler($382,$383,0);
  $384 = HEAP32[$1>>2]|0;
  $385 = $2;
  $386 = (($385) + ($384<<4)|0);
  $387 = HEAP8[$386>>0]|0;
  $388 = $387&255;
  $389 = ($388|0)!=(0);
  if ($389) {
   $390 = HEAP32[$1>>2]|0;
   $391 = $2;
   $392 = (($391) + ($390<<4)|0);
   $393 = HEAP8[$392>>0]|0;
   $394 = $393&255;
   $395 = ($394|0)==(44);
   if (!($395)) {
    label = 67;
    break;
   }
   $396 = HEAP32[$1>>2]|0;
   $397 = (($396) + 1)|0;
   $398 = HEAP32[(616)>>2]|0;
   $399 = ($397|0)<($398|0);
   if (!($399)) {
    label = 67;
    break;
   }
   $400 = HEAP32[$1>>2]|0;
   $401 = (($400) + 1)|0;
   HEAP32[$1>>2] = $401;
  }
  $408 = HEAP32[$1>>2]|0;
  $409 = HEAP32[(616)>>2]|0;
  $410 = ($408|0)<($409|0);
  if (!($410)) {
   label = 69;
   break;
  }
 }
 switch (label|0) {
  case 3: {
   $14 = $2;
   $15 = (($14) + ($13<<4)|0);
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $18 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $18;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 6: {
   HEAP32[$vararg_buffer1>>2] = $42;
   $43 = (_EmitErr(209,$vararg_buffer1)|0);
   $0 = $43;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 8: {
   HEAP32[$vararg_buffer4>>2] = 108307;
   $52 = (_EmitErr(230,$vararg_buffer4)|0);
   $0 = $52;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 11: {
   $61 = (_EmitError(84)|0);
   $0 = $61;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 17: {
   $100 = HEAP32[$1>>2]|0;
   $101 = (($100) + 1)|0;
   $102 = $2;
   $103 = $token;
   $104 = HEAP32[$langtype>>2]|0;
   $105 = (_CreateProto($101,$102,$103,$104)|0);
   $sym = $105;
   $106 = $sym;
   $107 = ($106|0)==(0|0);
   if ($107) {
    $0 = -1;
    $411 = $0;
    STACKTOP = sp;return ($411|0);
   }
   $108 = $sym;
   $109 = ((($108)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(2);
   $112 = $sym;
   if ($111) {
    $113 = ((($112)) + 28|0);
    $114 = ((($113)) + 3|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 & -9;
    HEAP8[$114>>0] = $116;
    $117 = $altname;
    $118 = $sym;
    $119 = (_HandleAltname($117,$118)|0);
    $0 = $119;
    $411 = $0;
    STACKTOP = sp;return ($411|0);
   } else {
    $120 = ((($112)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $121;
    $122 = (_EmitErr(143,$vararg_buffer7)|0);
    $0 = $122;
    $411 = $0;
    STACKTOP = sp;return ($411|0);
   }
   break;
  }
  case 25: {
   $0 = -1;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 29: {
   $0 = -1;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 37: {
   $208 = $token;
   HEAP32[$vararg_buffer10>>2] = $208;
   $209 = (_EmitErr(143,$vararg_buffer10)|0);
   $0 = $209;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 54: {
   $296 = $token;
   HEAP32[$vararg_buffer13>>2] = $296;
   $297 = (_EmitErr(136,$vararg_buffer13)|0);
   $0 = $297;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 67: {
   $402 = HEAP32[$1>>2]|0;
   $403 = $2;
   $404 = (($403) + ($402<<4)|0);
   $405 = ((($404)) + 4|0);
   $406 = HEAP32[$405>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $406;
   $407 = (_EmitErr(209,$vararg_buffer16)|0);
   $0 = $407;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
  case 69: {
   $0 = 0;
   $411 = $0;
   STACKTOP = sp;return ($411|0);
   break;
  }
 }
 return (0)|0;
}
function _CommDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $isfar = 0, $langtype = 0, $opndx = 0, $size = 0, $sym = 0, $tmp = 0, $token = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer4 = sp + 88|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 144|0;
 $opndx = sp;
 $langtype = sp + 116|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[(616)>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 53;
   break;
  }
  $8 = HEAP32[(516)>>2]|0;
  HEAP32[$langtype>>2] = $8;
  $9 = $2;
  (_GetLangType($1,$9,$langtype)|0);
  $isfar = 0;
  $10 = HEAP32[$1>>2]|0;
  $11 = $2;
  $12 = (($11) + ($10<<4)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(6);
  L4: do {
   if ($15) {
    $16 = HEAP32[$1>>2]|0;
    $17 = $2;
    $18 = (($17) + ($16<<4)|0);
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    L6: do {
     switch ($20|0) {
     case 152: case 151: case 148:  {
      $21 = HEAP32[(512)>>2]|0;
      $22 = ($21|0)==(7);
      if ($22) {
       (_EmitError(176)|0);
       break L6;
      } else {
       $isfar = 1;
       break L6;
      }
      break;
     }
     case 150: case 149: case 147:  {
      break;
     }
     default: {
      break L4;
     }
     }
    } while(0);
    $23 = HEAP32[$1>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$1>>2] = $24;
   }
  } while(0);
  $25 = HEAP32[$1>>2]|0;
  $26 = $2;
  $27 = (($26) + ($25<<4)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)!=(8);
  $31 = HEAP32[$1>>2]|0;
  if ($30) {
   label = 10;
   break;
  }
  $37 = (($31) + 1)|0;
  HEAP32[$1>>2] = $37;
  $38 = $2;
  $39 = (($38) + ($31<<4)|0);
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $token = $41;
  $42 = HEAP32[$1>>2]|0;
  $43 = $2;
  $44 = (($43) + ($42<<4)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)!=(58);
  $48 = HEAP32[$1>>2]|0;
  if ($47) {
   label = 12;
   break;
  }
  $54 = (($48) + 1)|0;
  HEAP32[$1>>2] = $54;
  $55 = HEAP32[$1>>2]|0;
  $tmp = $55;
  while(1) {
   $56 = $tmp;
   $57 = HEAP32[(616)>>2]|0;
   $58 = ($56|0)<($57|0);
   if (!($58)) {
    break;
   }
   $59 = $tmp;
   $60 = $2;
   $61 = (($60) + ($59<<4)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = ($63|0)==(58);
   if ($64) {
    break;
   }
   $65 = $tmp;
   $66 = (($65) + 1)|0;
   $tmp = $66;
  }
  $67 = $2;
  $68 = $tmp;
  $69 = (_EvalOperand($1,$67,$68,$opndx,2)|0);
  $70 = ($69|0)==(-1);
  if ($70) {
   label = 18;
   break;
  }
  $71 = ((($opndx)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)!=(0);
  do {
   if ($73) {
    (_EmitError(65)|0);
   } else {
    $74 = ((($opndx)) + 44|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 192;
    $77 = ($76|0)==(128);
    if ($77) {
     $78 = $token;
     HEAP32[$vararg_buffer4>>2] = $78;
     (_EmitErr(160,$vararg_buffer4)|0);
     break;
    }
    $79 = ((($opndx)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)!=(0);
    if ($81) {
     $82 = ((($opndx)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)!=(-1);
     if ($84) {
      (_EmitConstError($opndx)|0);
      break;
     }
    }
    $85 = HEAP32[$opndx>>2]|0;
    $86 = ($85|0)==(0);
    if ($86) {
     (_EmitError(175)|0);
    }
   }
  } while(0);
  $87 = HEAP32[$opndx>>2]|0;
  $size = $87;
  $count = 1;
  $88 = HEAP32[$1>>2]|0;
  $89 = $2;
  $90 = (($89) + ($88<<4)|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)==(58);
  if ($93) {
   $94 = HEAP32[$1>>2]|0;
   $95 = (($94) + 1)|0;
   HEAP32[$1>>2] = $95;
   $96 = $2;
   $97 = HEAP32[(616)>>2]|0;
   $98 = (_EvalOperand($1,$96,$97,$opndx,2)|0);
   $99 = ($98|0)==(-1);
   if ($99) {
    label = 30;
    break;
   }
   $100 = ((($opndx)) + 40|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0);
   do {
    if ($102) {
     (_EmitError(65)|0);
    } else {
     $103 = ((($opndx)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = ((($opndx)) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)!=(-1);
      if ($108) {
       (_EmitConstError($opndx)|0);
       break;
      }
     }
     $109 = HEAP32[$opndx>>2]|0;
     $110 = ($109|0)==(0);
     if ($110) {
      (_EmitError(175)|0);
     }
    }
   } while(0);
   $111 = HEAP32[$opndx>>2]|0;
   $count = $111;
  }
  $112 = $token;
  $113 = (_SymFind($112)|0);
  $sym = $113;
  $114 = $sym;
  $115 = ($114|0)==(0|0);
  if ($115) {
   label = 41;
  } else {
   $116 = $sym;
   $117 = ((($116)) + 16|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0);
   if ($119) {
    label = 41;
   } else {
    $128 = $sym;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)!=(2);
    if ($131) {
     label = 45;
     break;
    }
    $132 = $sym;
    $133 = ((($132)) + 28|0);
    $134 = ((($133)) + 3|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = ($135&255) >>> 2;
    $137 = $136 & 1;
    $138 = $137&255;
    $139 = ($138|0)!=(1);
    if ($139) {
     label = 45;
     break;
    }
    $144 = $sym;
    $145 = ((($144)) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = $sym;
    $148 = ((($147)) + 40|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (($146>>>0) / ($149>>>0))&-1;
    $tmp = $150;
    $151 = $count;
    $152 = $sym;
    $153 = ((($152)) + 40|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($151|0)!=($154|0);
    if ($155) {
     label = 48;
     break;
    }
    $156 = $size;
    $157 = $tmp;
    $158 = ($156|0)!=($157|0);
    if ($158) {
     label = 48;
     break;
    }
   }
  }
  if ((label|0) == 41) {
   label = 0;
   $120 = $token;
   $121 = $sym;
   $122 = $size;
   $123 = $count;
   $124 = $isfar;
   $125 = (_MakeComm($120,$121,$122,$123,$124)|0);
   $sym = $125;
   $126 = $sym;
   $127 = ($126|0)==(0|0);
   if ($127) {
    label = 42;
    break;
   }
  }
  $163 = $sym;
  $164 = ((($163)) + 24|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165 & -3;
  $167 = $166 | 2;
  HEAP16[$164>>1] = $167;
  $168 = $sym;
  $169 = HEAP32[$langtype>>2]|0;
  _SetMangler($168,$169,0);
  $170 = HEAP32[$1>>2]|0;
  $171 = $2;
  $172 = (($171) + ($170<<4)|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = ($174|0)!=(0);
  if ($175) {
   $176 = HEAP32[$1>>2]|0;
   $177 = $2;
   $178 = (($177) + ($176<<4)|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = ($180|0)!=(44);
   if ($181) {
    label = 51;
    break;
   }
  }
  $188 = HEAP32[$1>>2]|0;
  $189 = (($188) + 1)|0;
  HEAP32[$1>>2] = $189;
 }
 if ((label|0) == 10) {
  $32 = $2;
  $33 = (($32) + ($31<<4)|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer>>2] = $35;
  $36 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $36;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 12) {
  $49 = $2;
  $50 = (($49) + ($48<<4)|0);
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $52;
  $53 = (_EmitErr(209,$vararg_buffer1)|0);
  $0 = $53;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 30) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 42) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 45) {
  $140 = $sym;
  $141 = ((($140)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $142;
  $143 = (_EmitErr(143,$vararg_buffer7)|0);
  $0 = $143;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 48) {
  $159 = $sym;
  $160 = ((($159)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$vararg_buffer10>>2] = 88464;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $161;
  $162 = (_EmitErr(139,$vararg_buffer10)|0);
  $0 = $162;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 51) {
  $182 = HEAP32[$1>>2]|0;
  $183 = $2;
  $184 = (($183) + ($182<<4)|0);
  $185 = ((($184)) + 12|0);
  $186 = HEAP32[$185>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $186;
  $187 = (_EmitErr(39,$vararg_buffer14)|0);
  $0 = $187;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 53) {
  $0 = 0;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function _FreePubQueue() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(332)>>2] = 0;
 return;
}
function _PublicDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $langtype = 0, $skipitem = 0, $sym = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 68|0;
 $langtype = sp + 52|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 L1: while(1) {
  $5 = HEAP32[(516)>>2]|0;
  HEAP32[$langtype>>2] = $5;
  $6 = $2;
  (_GetLangType($1,$6,$langtype)|0);
  $7 = HEAP32[$1>>2]|0;
  $8 = $2;
  $9 = (($8) + ($7<<4)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(8);
  $13 = HEAP32[$1>>2]|0;
  if ($12) {
   label = 3;
   break;
  }
  $19 = (($13) + 1)|0;
  HEAP32[$1>>2] = $19;
  $20 = $2;
  $21 = (($20) + ($13<<4)|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $token = $23;
  $24 = $token;
  $25 = (_SymFind($24)|0);
  $sym = $25;
  $26 = HEAP32[4884>>2]|0;
  $27 = ($26|0)==(0);
  $28 = $sym;
  $29 = ($28|0)==(0|0);
  do {
   if ($27) {
    if ($29) {
     $30 = $token;
     $31 = (_SymCreate($30)|0);
     $sym = $31;
     $32 = ($31|0)!=(0|0);
     if (!($32)) {
      label = 8;
      break L1;
     }
     $33 = $sym;
     _sym_add_table(15404,$33);
    }
    $skipitem = 0;
   } else {
    if (!($29)) {
     $34 = $sym;
     $35 = ((($34)) + 16|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0);
     if (!($37)) {
      break;
     }
    }
    $38 = $token;
    HEAP32[$vararg_buffer1>>2] = $38;
    (_EmitErr(102,$vararg_buffer1)|0);
   }
  } while(0);
  $39 = $sym;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $sym;
   $42 = ((($41)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   L17: do {
    switch ($43|0) {
    case 0:  {
     break;
    }
    case 1:  {
     $44 = $sym;
     $45 = ((($44)) + 24|0);
     $46 = HEAP16[$45>>1]|0;
     $47 = ($46&65535) >>> 2;
     $48 = $47 & 1;
     $49 = $48&255;
     $50 = $49&255;
     $51 = ($50|0)==(1);
     if ($51) {
      $52 = $sym;
      $53 = ((($52)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $54;
      (_EmitErr(180,$vararg_buffer4)|0);
      $skipitem = 1;
     }
     break;
    }
    case 2:  {
     $55 = $sym;
     $56 = ((($55)) + 28|0);
     $57 = ((($56)) + 3|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($58&255) >>> 2;
     $60 = $59 & 1;
     $61 = $60&255;
     $62 = ($61|0)==(1);
     $63 = $sym;
     if ($62) {
      $64 = ((($63)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $65;
      (_EmitErr(174,$vararg_buffer7)|0);
      $skipitem = 1;
      break L17;
     }
     $66 = ((($63)) + 28|0);
     $67 = ((($66)) + 3|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68&255) >>> 3;
     $70 = $69 & 1;
     $71 = $70&255;
     $72 = ($71|0)==(0);
     if ($72) {
      $73 = $sym;
      $74 = ((($73)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      HEAP32[$vararg_buffer10>>2] = $75;
      (_EmitErr(143,$vararg_buffer10)|0);
      $skipitem = 1;
     }
     break;
    }
    default: {
     $76 = $sym;
     $77 = ((($76)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     HEAP32[$vararg_buffer13>>2] = $78;
     (_EmitErr(174,$vararg_buffer13)|0);
     $skipitem = 1;
    }
    }
   } while(0);
   $79 = HEAP32[4884>>2]|0;
   $80 = ($79|0)==(0);
   if ($80) {
    $81 = $skipitem;
    $82 = $81 << 24 >> 24;
    $83 = ($82|0)==(0);
    if ($83) {
     $84 = $sym;
     $85 = ((($84)) + 24|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = ($86&65535) >>> 7;
     $88 = $87 & 1;
     $89 = $88&255;
     $90 = $89&255;
     $91 = ($90|0)==(0);
     if ($91) {
      $92 = $sym;
      $93 = ((($92)) + 24|0);
      $94 = HEAP16[$93>>1]|0;
      $95 = $94 & -129;
      $96 = $95 | 128;
      HEAP16[$93>>1] = $96;
      $97 = $sym;
      _AddPublicData($97);
     }
     $98 = $sym;
     $99 = HEAP32[$langtype>>2]|0;
     _SetMangler($98,$99,0);
    }
   }
  }
  $100 = HEAP32[$1>>2]|0;
  $101 = $2;
  $102 = (($101) + ($100<<4)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = HEAP32[$1>>2]|0;
   $107 = $2;
   $108 = (($107) + ($106<<4)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = ($110|0)==(44);
   $112 = HEAP32[$1>>2]|0;
   if (!($111)) {
    label = 31;
    break;
   }
   $113 = (($112) + 1)|0;
   $114 = HEAP32[(616)>>2]|0;
   $115 = ($113|0)<($114|0);
   if ($115) {
    $116 = HEAP32[$1>>2]|0;
    $117 = (($116) + 1)|0;
    HEAP32[$1>>2] = $117;
   }
  }
  $123 = HEAP32[$1>>2]|0;
  $124 = HEAP32[(616)>>2]|0;
  $125 = ($123|0)<($124|0);
  if (!($125)) {
   label = 33;
   break;
  }
 }
 if ((label|0) == 3) {
  $14 = $2;
  $15 = (($14) + ($13<<4)|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $18 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $18;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 else if ((label|0) == 31) {
  $118 = $2;
  $119 = (($118) + ($112<<4)|0);
  $120 = ((($119)) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $121;
  $122 = (_EmitErr(209,$vararg_buffer16)|0);
  $0 = $122;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 else if ((label|0) == 33) {
  $0 = 0;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 return (0)|0;
}
function _CreateProto($i,$tokenarray,$name,$langtype) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $name = $name|0;
 $langtype = $langtype|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $sym = 0, $sym2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $name;
 $4 = $langtype;
 $5 = $3;
 $6 = (_SymFind($5)|0);
 $sym = $6;
 $7 = $sym;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   label = 6;
  } else {
   $9 = $sym;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 6;
   } else {
    $13 = $sym;
    $14 = ((($13)) + 16|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(2);
    if ($16) {
     $17 = $sym;
     $18 = ((($17)) + 28|0);
     $19 = ((($18)) + 3|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20&255) >>> 3;
     $22 = $21 & 1;
     $23 = $22&255;
     $24 = ($23|0)==(1);
     if ($24) {
      $25 = $sym;
      $26 = ((($25)) + 24|0);
      $27 = HEAP16[$26>>1]|0;
      $28 = ($27&65535) >>> 11;
      $29 = $28 & 1;
      $30 = $29&255;
      $31 = $30&255;
      $32 = ($31|0)==(0);
      if ($32) {
       label = 6;
       break;
      }
     }
    }
    $37 = $sym;
    $38 = ((($37)) + 24|0);
    $39 = HEAP16[$38>>1]|0;
    $40 = ($39&65535) >>> 11;
    $41 = $40 & 1;
    $42 = $41&255;
    $43 = $42&255;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = $sym;
     $46 = ((($45)) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     HEAP32[$vararg_buffer>>2] = $47;
     (_EmitErr(143,$vararg_buffer)|0);
     $0 = 0;
     $106 = $0;
     STACKTOP = sp;return ($106|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $33 = $sym;
  $34 = $3;
  $35 = (_CreateProc($33,$34,2)|0);
  $sym = $35;
  $36 = (0|0)==($35|0);
  if ($36) {
   $0 = 0;
   $106 = $0;
   STACKTOP = sp;return ($106|0);
  }
 }
 $48 = $sym;
 $dir = $48;
 $49 = $1;
 $50 = $2;
 $51 = (($50) + ($49<<4)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ($53|0)==(8);
 if ($54) {
  $55 = $1;
  $56 = $2;
  $57 = (($56) + ($55<<4)|0);
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_SymFind($59)|0);
  $sym2 = $60;
  $61 = $sym2;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $sym2;
   $64 = ((($63)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(7);
   if ($66) {
    $67 = $sym2;
    $68 = ((($67)) + 20|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(128);
    if ($70) {
     $71 = $1;
     $72 = (($71) + 1)|0;
     $1 = $72;
     $73 = $1;
     $74 = $2;
     $75 = (($74) + ($73<<4)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = ($77|0)!=(0);
     if ($78) {
      $79 = $1;
      $80 = $2;
      $81 = (($80) + ($79<<4)|0);
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $83;
      (_EmitErr(209,$vararg_buffer1)|0);
      $0 = 0;
      $106 = $0;
      STACKTOP = sp;return ($106|0);
     } else {
      $84 = $dir;
      $85 = $sym2;
      $86 = ((($85)) + 32|0);
      $87 = HEAP32[$86>>2]|0;
      (_CopyPrototype($84,$87)|0);
      $88 = $sym;
      $0 = $88;
      $106 = $0;
      STACKTOP = sp;return ($106|0);
     }
    }
   }
  }
 }
 $89 = HEAP32[4884>>2]|0;
 $90 = ($89|0)==(0);
 do {
  if ($90) {
   $91 = $dir;
   $92 = $1;
   $93 = $2;
   $94 = $4;
   $95 = (_ParseProc($91,$92,$93,0,$94)|0);
   $96 = ($95|0)==(-1);
   if (!($96)) {
    $97 = HEAP32[(496)>>2]|0;
    $98 = $sym;
    $99 = ((($98)) + 36|0);
    HEAP32[$99>>2] = $97;
    break;
   }
   $0 = 0;
   $106 = $0;
   STACKTOP = sp;return ($106|0);
  } else {
   $100 = $sym;
   $101 = ((($100)) + 24|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102 & -3;
   $104 = $103 | 2;
   HEAP16[$101>>1] = $104;
  }
 } while(0);
 $105 = $sym;
 $0 = $105;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function _CreateExternal($sym,$name,$weak) {
 $sym = $sym|0;
 $name = $name|0;
 $weak = $weak|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $name;
 $2 = $weak;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = (_SymCreate($5)|0);
  $0 = $6;
 } else {
  $7 = $0;
  _sym_remove_table(15404,$7);
 }
 $8 = $0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $10 = $0;
 $11 = ((($10)) + 16|0);
 HEAP32[$11>>2] = 2;
 $12 = HEAP8[(556)>>0]|0;
 $13 = $0;
 $14 = ((($13)) + 28|0);
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $12 & 3;
 $18 = $16 & -4;
 $19 = $18 | $17;
 HEAP8[$15>>0] = $19;
 $20 = $0;
 $21 = ((($20)) + 28|0);
 $22 = ((($21)) + 3|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 & -5;
 HEAP8[$22>>0] = $24;
 $25 = $2;
 $26 = $0;
 $27 = ((($26)) + 28|0);
 $28 = ((($27)) + 3|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $25 & 1;
 $31 = ($30 << 3)&255;
 $32 = $29 & -9;
 $33 = $32 | $31;
 HEAP8[$28>>0] = $33;
 $34 = $0;
 _sym_add_table((15412),$34);
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _HandleAltname($altname,$sym) {
 $altname = $altname|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond = 0, $symalt = 0;
 var $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $altname;
 $2 = $sym;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $2;
   $6 = ((($5)) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    $9 = $1;
    $10 = (_SymFind($9)|0);
    $symalt = $10;
    $11 = $2;
    $12 = ((($11)) + 40|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)!=(0|0);
    if ($14) {
     $15 = $2;
     $16 = ((($15)) + 40|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $symalt;
     $19 = ($17|0)!=($18|0);
     if ($19) {
      $20 = $2;
      $21 = ((($20)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      HEAP32[$vararg_buffer>>2] = $22;
      $23 = (_EmitErr(143,$vararg_buffer)|0);
      $0 = $23;
      $97 = $0;
      STACKTOP = sp;return ($97|0);
     }
    }
    $24 = HEAP32[4884>>2]|0;
    $25 = ($24>>>0)>(0);
    $26 = $symalt;
    if ($25) {
     $27 = ((($26)) + 16|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if ($29) {
      $30 = $1;
      HEAP32[$vararg_buffer2>>2] = $30;
      (_EmitErr(102,$vararg_buffer2)|0);
      break;
     }
     $31 = $symalt;
     $32 = ((($31)) + 16|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)!=(1);
     if ($34) {
      $35 = $symalt;
      $36 = ((($35)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)!=(2);
      if ($38) {
       $39 = $1;
       HEAP32[$vararg_buffer5>>2] = $39;
       (_EmitErr(136,$vararg_buffer5)|0);
       break;
      }
     }
     $40 = $symalt;
     $41 = ((($40)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(1);
     if ($43) {
      $44 = $symalt;
      $45 = ((($44)) + 24|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = ($46&65535) >>> 7;
      $48 = $47 & 1;
      $49 = $48&255;
      $50 = $49&255;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = HEAP32[(6100)>>2]|0;
       $53 = ($52|0)==(2);
       $54 = HEAP32[(6100)>>2]|0;
       $55 = ($54|0)==(3);
       $or$cond = $53 | $55;
       if ($or$cond) {
        $56 = $1;
        HEAP32[$vararg_buffer8>>2] = $56;
        (_EmitErr(268,$vararg_buffer8)|0);
       }
      }
     }
     $57 = $2;
     $58 = ((($57)) + 20|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $symalt;
     $61 = ((($60)) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($59|0)!=($62|0);
     if (!($63)) {
      break;
     }
     $64 = $1;
     HEAP32[$vararg_buffer11>>2] = $64;
     (_EmitErr(136,$vararg_buffer11)|0);
     break;
    } else {
     $65 = ($26|0)!=(0|0);
     if ($65) {
      $66 = $symalt;
      $67 = ((($66)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(1);
      if ($69) {
       $70 = $symalt;
       $71 = ((($70)) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)!=(2);
       if ($73) {
        $74 = $symalt;
        $75 = ((($74)) + 16|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = ($76|0)!=(0);
        if ($77) {
         $78 = $1;
         HEAP32[$vararg_buffer14>>2] = $78;
         $79 = (_EmitErr(136,$vararg_buffer14)|0);
         $0 = $79;
         $97 = $0;
         STACKTOP = sp;return ($97|0);
        }
       }
      }
     } else {
      $80 = $1;
      $81 = (_SymCreate($80)|0);
      $symalt = $81;
      $82 = $symalt;
      _sym_add_table(15404,$82);
     }
     $83 = HEAP32[(6100)>>2]|0;
     $84 = ($83|0)!=(1);
     if ($84) {
      $85 = $symalt;
      $86 = ((($85)) + 24|0);
      $87 = HEAP16[$86>>1]|0;
      $88 = $87 & -2;
      $89 = $88 | 1;
      HEAP16[$86>>1] = $89;
     }
     $90 = $2;
     $91 = ((($90)) + 40|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(0|0);
     if (!($93)) {
      break;
     }
     $94 = $symalt;
     $95 = $2;
     $96 = ((($95)) + 40|0);
     HEAP32[$96>>2] = $94;
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _MakeComm($name,$sym,$size,$count,$isfar) {
 $name = $name|0;
 $sym = $sym|0;
 $size = $size|0;
 $count = $count|0;
 $isfar = $isfar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $sym;
 $3 = $size;
 $4 = $count;
 $5 = $isfar;
 $6 = $2;
 $7 = $1;
 $8 = (_CreateComm($6,$7)|0);
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = 0;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $11 = $4;
 $12 = $2;
 $13 = ((($12)) + 40|0);
 HEAP32[$13>>2] = $11;
 $14 = $5;
 $15 = $2;
 $16 = ((($15)) + 28|0);
 $17 = ((($16)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $14 & 1;
 $20 = ($19 << 4)&255;
 $21 = $18 & -17;
 $22 = $21 | $20;
 HEAP8[$17>>0] = $22;
 $23 = HEAP8[(6084)>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)==(0);
 if ($25) {
  label = 5;
 } else {
  $26 = $5;
  $27 = $26&255;
  $28 = ($27|0)==(0);
  if ($28) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $29 = HEAP32[(584)>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 12|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $3;
 $33 = $2;
 $34 = ((($33)) + 20|0);
 (_MemtypeFromSize($32,$34)|0);
 $35 = HEAP8[(556)>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = $4;
  $39 = $3;
  $40 = Math_imul($38, $39)|0;
  $41 = ($40>>>0)>(65536);
  if ($41) {
   $42 = $2;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$vararg_buffer>>2] = $44;
   _EmitWarn(2,267,$vararg_buffer);
  }
 }
 $45 = $4;
 $46 = $3;
 $47 = Math_imul($45, $46)|0;
 $48 = $2;
 $49 = ((($48)) + 36|0);
 HEAP32[$49>>2] = $47;
 $50 = $2;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _CreateComm($sym,$name) {
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $name;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $1;
  $5 = (_SymCreate($4)|0);
  $0 = $5;
 } else {
  $6 = $0;
  _sym_remove_table(15404,$6);
 }
 $7 = $0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 2;
 $11 = HEAP8[(556)>>0]|0;
 $12 = $0;
 $13 = ((($12)) + 28|0);
 $14 = ((($13)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $11 & 3;
 $17 = $15 & -4;
 $18 = $17 | $16;
 HEAP8[$14>>0] = $18;
 $19 = $0;
 $20 = ((($19)) + 28|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & -5;
 $24 = $23 | 4;
 HEAP8[$21>>0] = $24;
 $25 = $0;
 $26 = ((($25)) + 28|0);
 $27 = ((($26)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & -9;
 HEAP8[$27>>0] = $29;
 $30 = $0;
 $31 = ((($30)) + 28|0);
 $32 = ((($31)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33 & -17;
 HEAP8[$32>>0] = $34;
 $35 = $0;
 _sym_add_table((15412),$35);
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _StoreLine($srcline,$flags,$lst_position) {
 $srcline = $srcline|0;
 $flags = $flags|0;
 $lst_position = $lst_position|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $j = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $srcline;
 $1 = $flags;
 $2 = $lst_position;
 $3 = HEAP32[(596)>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[87035>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 if ($7) {
  _SaveState();
 }
 $8 = $0;
 $9 = (_strlen($8)|0);
 $i = $9;
 $10 = $1;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 $13 = HEAP32[(604)>>2]|0;
 $14 = ($13|0)!=(0|0);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = HEAP32[(604)>>2]|0;
  $16 = (_strlen($15)|0);
  $17 = $16;
 } else {
  $17 = 0;
 }
 $j = $17;
 $18 = $i;
 $19 = $j;
 $20 = (($18) + ($19))|0;
 $21 = (($20) + 16)|0;
 $22 = (_LclAlloc($21)|0);
 HEAP32[9080>>2] = $22;
 $23 = HEAP32[9080>>2]|0;
 HEAP32[$23>>2] = 0;
 $24 = (_GetLineNumber()|0);
 $25 = HEAP32[9080>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24 & 1048575;
 $29 = $27 & -1048576;
 $30 = $29 | $28;
 HEAP32[$26>>2] = $30;
 $31 = HEAP8[87007>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 if ($32) {
  $33 = HEAP32[9080>>2]|0;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 1048575;
  $37 = $36 | -1048576;
  HEAP32[$34>>2] = $37;
 } else {
  $38 = (_get_curr_srcfile()|0);
  $39 = HEAP32[9080>>2]|0;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $38 & 4095;
  $43 = $42 << 20;
  $44 = $41 & 1048575;
  $45 = $44 | $43;
  HEAP32[$40>>2] = $45;
 }
 $46 = $2;
 $47 = ($46|0)!=(0);
 $48 = $2;
 $49 = HEAP32[13516>>2]|0;
 $50 = $47 ? $48 : $49;
 $51 = HEAP32[9080>>2]|0;
 $52 = ((($51)) + 8|0);
 HEAP32[$52>>2] = $50;
 $53 = $j;
 $54 = ($53|0)!=(0);
 $55 = HEAP32[9080>>2]|0;
 $56 = ((($55)) + 12|0);
 $57 = $0;
 $58 = $i;
 if ($54) {
  _memcpy(($56|0),($57|0),($58|0))|0;
  $59 = HEAP32[9080>>2]|0;
  $60 = ((($59)) + 12|0);
  $61 = $i;
  $62 = (($60) + ($61)|0);
  $63 = HEAP32[(604)>>2]|0;
  $64 = $j;
  $65 = (($64) + 1)|0;
  _memcpy(($62|0),($63|0),($65|0))|0;
 } else {
  $66 = (($58) + 1)|0;
  _memcpy(($56|0),($57|0),($66|0))|0;
 }
 $67 = HEAP32[9080>>2]|0;
 $68 = ((($67)) + 12|0);
 $p = $68;
 while(1) {
  $69 = $p;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = $p;
  $74 = HEAP8[$73>>0]|0;
  $75 = $74 << 24 >> 24;
  $76 = (_isspace($75)|0);
  $77 = ($76|0)!=(0);
  if (!($77)) {
   break;
  }
  $78 = $p;
  $79 = ((($78)) + 1|0);
  $p = $79;
 }
 $80 = $p;
 $81 = HEAP8[$80>>0]|0;
 $82 = $81 << 24 >> 24;
 $83 = ($82|0)==(37);
 do {
  if ($83) {
   $84 = $p;
   $85 = ((($84)) + 1|0);
   $86 = (_strncasecmp($85,109811,3)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    $88 = $p;
    $89 = ((($88)) + 4|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90 << 24 >> 24;
    $92 = (_isalnum($91)|0);
    $93 = ($92|0)!=(0);
    if (!($93)) {
     $94 = $p;
     $95 = ((($94)) + 4|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 << 24 >> 24;
     $98 = ($97|0)==(95);
     if (!($98)) {
      $99 = $p;
      $100 = ((($99)) + 4|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101 << 24 >> 24;
      $103 = ($102|0)==(64);
      if (!($103)) {
       $104 = $p;
       $105 = ((($104)) + 4|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106 << 24 >> 24;
       $108 = ($107|0)==(36);
       if (!($108)) {
        $109 = $p;
        $110 = ((($109)) + 4|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111 << 24 >> 24;
        $113 = ($112|0)==(63);
        if (!($113)) {
         break;
        }
       }
      }
     }
    }
   }
   $114 = $p;
   HEAP8[$114>>0] = 32;
  }
 } while(0);
 $115 = HEAP32[9084>>2]|0;
 $116 = ($115|0)!=(0|0);
 $117 = HEAP32[9080>>2]|0;
 if ($116) {
  $118 = HEAP32[(9088)>>2]|0;
  HEAP32[$118>>2] = $117;
 } else {
  HEAP32[9084>>2] = $117;
 }
 $119 = HEAP32[9080>>2]|0;
 HEAP32[(9088)>>2] = $119;
 STACKTOP = sp;return;
}
function _SkipSavedState() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[87036>>0] = 0;
 return;
}
function _SaveVariableState($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & -4097;
 $5 = $4 | 4096;
 HEAP16[$2>>1] = $5;
 $6 = (_LclAlloc(24)|0);
 $p = $6;
 $7 = $p;
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = $p;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $p;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $0;
 $17 = ((($16)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $p;
 $20 = ((($19)) + 12|0);
 HEAP32[$20>>2] = $18;
 $21 = $0;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $p;
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = $23;
 $26 = $0;
 $27 = ((($26)) + 24|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28&65535) >>> 1;
 $30 = $29 & 1;
 $31 = $30&255;
 $32 = $p;
 $33 = ((($32)) + 20|0);
 HEAP8[$33>>0] = $31;
 $34 = HEAP32[(9100)>>2]|0;
 $35 = ($34|0)!=(0|0);
 $36 = $p;
 if ($35) {
  $37 = HEAP32[(9100)>>2]|0;
  HEAP32[$37>>2] = $36;
  $38 = $p;
  HEAP32[(9100)>>2] = $38;
  STACKTOP = sp;return;
 } else {
  HEAP32[(9100)>>2] = $36;
  HEAP32[(9096)>>2] = $36;
  STACKTOP = sp;return;
 }
}
function _RestoreState() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP8[9092>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if (!($1)) {
  $41 = HEAP32[9084>>2]|0;
  STACKTOP = sp;return ($41|0);
 }
 $2 = HEAP32[(9096)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $curr;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $7;
  $12 = $curr;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $curr;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 36|0);
  HEAP32[$18>>2] = $14;
  $19 = $curr;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $curr;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 20|0);
  HEAP32[$25>>2] = $21;
  $26 = $curr;
  $27 = ((($26)) + 20|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $curr;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 24|0);
  $33 = $28&255;
  $34 = HEAP16[$32>>1]|0;
  $35 = $33 & 1;
  $36 = ($35 << 1)&65535;
  $37 = $34 & -3;
  $38 = $37 | $36;
  HEAP16[$32>>1] = $38;
  $39 = $curr;
  $40 = HEAP32[$39>>2]|0;
  $curr = $40;
 }
 _memcpy(((488)|0),((9104)|0),4240)|0;
 (_SetOfssize()|0);
 _SymSetCmpFunc();
 $41 = HEAP32[9084>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _FastpassInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[87035>>0] = 0;
 HEAP8[9092>>0] = 0;
 HEAP32[9084>>2] = 0;
 HEAP32[(9088)>>2] = 0;
 HEAP8[87036>>0] = 0;
 return;
}
function _SaveState() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[87035>>0] = 1;
 HEAP8[87036>>0] = 1;
 HEAP8[9092>>0] = 1;
 HEAP32[(9100)>>2] = 0;
 HEAP32[(9096)>>2] = 0;
 _memcpy(((9104)|0),((488)|0),4240)|0;
 _SegmentSaveState();
 _AssumeSaveState();
 _ContextSaveState();
 return;
}
function _CreateFixup($sym,$type,$option) {
 $sym = $sym|0;
 $type = $type|0;
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fixup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $type;
 $2 = $option;
 $3 = (_LclAlloc(40)|0);
 $fixup = $3;
 $4 = HEAP32[4884>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $0;
   $9 = ((($8)) + 56|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $fixup;
   HEAP32[$11>>2] = $10;
   $12 = $fixup;
   $13 = $0;
   $14 = ((($13)) + 56|0);
   HEAP32[$14>>2] = $12;
  }
  $15 = HEAP32[(584)>>2]|0;
  $16 = ($15|0)!=(0|0);
  if ($16) {
   $17 = HEAP32[(584)>>2]|0;
   $18 = ((($17)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $fixup;
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $fixup;
   $25 = HEAP32[(584)>>2]|0;
   $26 = ((($25)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 24|0);
   HEAP32[$28>>2] = $24;
  }
 }
 $29 = (_GetCurrOffset()|0);
 $30 = $fixup;
 $31 = ((($30)) + 12|0);
 HEAP32[$31>>2] = $29;
 $32 = $fixup;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = $fixup;
 $36 = ((($35)) + 16|0);
 HEAP32[$36>>2] = $34;
 $37 = $2;
 $38 = $fixup;
 $39 = ((($38)) + 20|0);
 HEAP32[$39>>2] = $37;
 $40 = $fixup;
 $41 = ((($40)) + 24|0);
 HEAP16[$41>>1] = 0;
 $42 = HEAP8[87037>>0]|0;
 $43 = $fixup;
 $44 = ((($43)) + 28|0);
 HEAP8[$44>>0] = $42;
 $45 = HEAP16[67776>>1]|0;
 $46 = $fixup;
 $47 = ((($46)) + 28|0);
 $48 = ((($47)) + 2|0);
 HEAP16[$48>>1] = $45;
 $49 = HEAP32[(584)>>2]|0;
 $50 = $fixup;
 $51 = ((($50)) + 32|0);
 HEAP32[$51>>2] = $49;
 $52 = $0;
 $53 = $fixup;
 $54 = ((($53)) + 36|0);
 HEAP32[$54>>2] = $52;
 $55 = $fixup;
 STACKTOP = sp;return ($55|0);
}
function _FreeFixup($fixup) {
 $fixup = $fixup|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dir = 0, $fixup2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixup;
 $1 = HEAP32[4884>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $dir = $5;
 $6 = $dir;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $dir;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($8|0)==($13|0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $dir;
  $19 = ((($18)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 24|0);
  HEAP32[$21>>2] = $17;
  STACKTOP = sp;return;
 }
 $22 = $dir;
 $23 = ((($22)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $fixup2 = $26;
 while(1) {
  $27 = $fixup2;
  $28 = ($27|0)!=(0|0);
  if (!($28)) {
   label = 10;
   break;
  }
  $29 = $fixup2;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = ($31|0)==($32|0);
  if ($33) {
   break;
  }
  $39 = $fixup2;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $fixup2 = $41;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $34 = $0;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $fixup2;
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $36;
 STACKTOP = sp;return;
}
function _SetFixupFrame($sym,$ign_grp) {
 $sym = $sym|0;
 $ign_grp = $ign_grp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $grp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $ign_grp;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 2: case 1:  {
  $7 = $0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   STACKTOP = sp;return;
  }
  $11 = $1;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $0;
   $15 = (_GetGroup($14)|0);
   $grp = $15;
   $16 = ($15|0)!=(0|0);
   if ($16) {
    HEAP8[87037>>0] = 1;
    $17 = $grp;
    $18 = ((($17)) + 60|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21&65535;
    HEAP16[67776>>1] = $22;
    STACKTOP = sp;return;
   }
  }
  HEAP8[87037>>0] = 0;
  $23 = $0;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_GetSegIdx($25)|0);
  $27 = $26&65535;
  HEAP16[67776>>1] = $27;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  HEAP8[87037>>0] = 0;
  $28 = $0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_GetSegIdx($30)|0);
  $32 = $31&65535;
  HEAP16[67776>>1] = $32;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  HEAP8[87037>>0] = 1;
  $33 = $0;
  $34 = ((($33)) + 60|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37&65535;
  HEAP16[67776>>1] = $38;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _store_fixup($fixup,$seg,$pdata) {
 $fixup = $fixup|0;
 $seg = $seg|0;
 $pdata = $pdata|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fixup;
 $1 = $seg;
 $2 = $pdata;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[(6100)>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(8);
  if ($14) {
   $15 = $0;
   $16 = ((($15)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $0;
    $20 = ((($19)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $2;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + ($23))|0;
    HEAP32[$24>>2] = $26;
   }
  }
 } else {
  $27 = HEAP32[(6100)>>2]|0;
  $28 = ($27|0)==(3);
  do {
   if ($28) {
    $29 = HEAP8[(557)>>0]|0;
    $30 = $29&255;
    $31 = ($30|0)==(2);
    if (!($31)) {
     $32 = $0;
     $33 = ((($32)) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(3);
     if ($35) {
      $36 = $2;
      HEAP32[$36>>2] = -4;
      break;
     }
     $37 = $0;
     $38 = ((($37)) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(2);
     if ($40) {
      $41 = $2;
      HEAP32[$41>>2] = -2;
      break;
     }
     $42 = $0;
     $43 = ((($42)) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(1);
     if ($45) {
      $46 = $2;
      HEAP32[$46>>2] = -1;
     }
    }
   }
  } while(0);
  $47 = $0;
  $48 = ((($47)) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  if ($50) {
   $51 = $0;
   $52 = ((($51)) + 36|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 24|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = ($55&65535) >>> 6;
   $57 = $56 & 1;
   $58 = $57&255;
   $59 = $58&255;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $0;
    $62 = ((($61)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $2;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($65))|0;
    HEAP32[$66>>2] = $68;
    $69 = $0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($71)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $0;
    $75 = ((($74)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73))|0;
    HEAP32[$75>>2] = $77;
    $78 = $0;
    $79 = ((($78)) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $0;
    $84 = ((($83)) + 28|0);
    HEAP32[$84>>2] = $82;
   }
  }
 }
 $85 = $1;
 $86 = ((($85)) + 60|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 24|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 $91 = $0;
 $92 = $1;
 $93 = ((($92)) + 60|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 24|0);
 if ($90) {
  HEAP32[$95>>2] = $91;
  $96 = $1;
  $97 = ((($96)) + 60|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 24|0);
  $100 = ((($99)) + 4|0);
  HEAP32[$100>>2] = $91;
  STACKTOP = sp;return;
 } else {
  $101 = ((($95)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = $91;
  $104 = $0;
  $105 = $1;
  $106 = ((($105)) + 60|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107)) + 24|0);
  $109 = ((($108)) + 4|0);
  HEAP32[$109>>2] = $104;
  STACKTOP = sp;return;
 }
}
function _AddFloatingPointEmulationFixup($CodeInfo) {
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $data = 0, $fixup = 0, $i = 0, $name = 0;
 var $patch = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sym = sp + 8|0;
 $data = sp;
 $name = sp + 32|0;
 $0 = $CodeInfo;
 ;HEAP8[$name>>0]=HEAP8[87038>>0]|0;HEAP8[$name+1>>0]=HEAP8[87038+1>>0]|0;HEAP8[$name+2>>0]=HEAP8[87038+2>>0]|0;HEAP8[$name+3>>0]=HEAP8[87038+3>>0]|0;HEAP8[$name+4>>0]=HEAP8[87038+4>>0]|0;HEAP8[$name+5>>0]=HEAP8[87038+5>>0]|0;HEAP8[$name+6>>0]=HEAP8[87038+6>>0]|0;HEAP8[$name+7>>0]=HEAP8[87038+7>>0]|0;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(751);
 do {
  if ($4) {
   $patch = 0;
  } else {
   $5 = $0;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(-2);
   if ($8) {
    $patch = 1;
    break;
   } else {
    $9 = $0;
    $10 = ((($9)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + 2)|0;
    $patch = $12;
    break;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(2);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = (($sym) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = $i;
  $18 = $17<<3;
  $19 = $patch;
  $20 = (($18) + ($19))|0;
  $21 = 1 << $20;
  $22 = 63743 & $21;
  $23 = ($22|0)!=(0);
  do {
   if ($23) {
    $24 = $i;
    $25 = (73 + ($24))|0;
    $26 = $25&255;
    $27 = ((($name)) + 1|0);
    HEAP8[$27>>0] = $26;
    $28 = $patch;
    $29 = (87046 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ((($name)) + 2|0);
    HEAP8[$31>>0] = $30;
    $32 = (_SymFind($name)|0);
    $33 = $i;
    $34 = (($sym) + ($33<<2)|0);
    HEAP32[$34>>2] = $32;
    $35 = $i;
    $36 = (($sym) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if (!($38)) {
     $39 = $i;
     $40 = (($sym) + ($39<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0);
     if (!($44)) {
      break;
     }
    }
    $45 = $i;
    $46 = (($sym) + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_MakeExtern($name,130,0,$47,0)|0);
    $49 = $i;
    $50 = (($sym) + ($49<<2)|0);
    HEAP32[$50>>2] = $48;
    $51 = $i;
    $52 = (($sym) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 48|0);
    HEAP32[$54>>2] = 0;
   }
  } while(0);
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = HEAP8[81594>>0]|0;
 $58 = $57&255;
 $59 = ($58|0)==(0);
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = HEAP32[(6100)>>2]|0;
 $61 = ($60|0)==(1);
 if ($61) {
  $62 = HEAP32[(584)>>2]|0;
  $63 = ((($62)) + 60|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[(584)>>2]|0;
  $68 = ((($67)) + 60|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($66) - ($71))|0;
  $73 = (($72) + 3)|0;
  $74 = ($73>>>0)>(1014);
  if ($74) {
   _omf_FlushCurrSeg();
  }
 }
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = ($75|0)<(2);
  if (!($76)) {
   break;
  }
  $77 = $i;
  $78 = (($sym) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)!=(0|0);
  if ($80) {
   $81 = $i;
   $82 = (($sym) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (_CreateFixup($83,5,0)|0);
   $fixup = $84;
   $85 = $fixup;
   $86 = ((($85)) + 28|0);
   HEAP8[$86>>0] = 5;
   $87 = $i;
   $88 = $fixup;
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + ($87))|0;
   HEAP32[$89>>2] = $91;
   HEAP32[$data>>2] = 0;
   $92 = $fixup;
   $93 = HEAP32[(584)>>2]|0;
   _store_fixup($92,$93,$data);
  }
  $94 = $i;
  $95 = (($94) + 1)|0;
  $i = $95;
 }
 STACKTOP = sp;return;
}
function _HllStartDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff = 0, $buffer = 0, $cmd = 0, $hll = 0, $or$cond = 0, $rc = 0, $size = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $buff = sp + 1248|0;
 $buffer = sp + 48|0;
 HEAP32[$0>>2] = $i;
 $1 = $tokenarray;
 $rc = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1;
 $4 = (($3) + ($2<<4)|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $cmd = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$0>>2] = $8;
 $9 = HEAP32[(440)>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[(440)>>2]|0;
  $hll = $11;
 } else {
  $12 = (_LclAlloc(28)|0);
  $hll = $12;
 }
 $13 = $hll;
 $14 = ((($13)) + 4|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $cmd;
 switch ($16|0) {
 case 253:  {
  $17 = $hll;
  $18 = ((($17)) + 4|0);
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = 0;
  $20 = (_GetHllLabel()|0);
  $21 = $hll;
  $22 = ((($21)) + 4|0);
  HEAP32[$22>>2] = $20;
  $23 = $hll;
  $24 = ((($23)) + 20|0);
  HEAP32[$24>>2] = 0;
  $25 = $hll;
  $26 = ((($25)) + 24|0);
  HEAP32[$26>>2] = 0;
  $27 = $hll;
  $28 = $1;
  $29 = (_EvaluateHllExpression($27,$0,$28,0,0,$buffer)|0);
  $rc = $29;
  $30 = $rc;
  $31 = ($30|0)==(0);
  if ($31) {
   (_QueueTestLines($buffer)|0);
   $32 = HEAP8[$buffer>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = $hll;
    $36 = ((($35)) + 4|0);
    HEAP32[$36>>2] = 0;
   }
  }
  break;
 }
 case 254: case 255:  {
  $37 = (_GetHllLabel()|0);
  $38 = $hll;
  $39 = ((($38)) + 4|0);
  $40 = ((($39)) + 8|0);
  HEAP32[$40>>2] = $37;
  $41 = $hll;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = 0;
  $43 = $cmd;
  $44 = ($43|0)==(255);
  $45 = $hll;
  $46 = ((($45)) + 20|0);
  if ($44) {
   HEAP32[$46>>2] = 1;
   $47 = $hll;
   $48 = ((($47)) + 16|0);
   HEAP32[$48>>2] = 0;
   $49 = HEAP32[$0>>2]|0;
   $50 = $1;
   $51 = (($50) + ($49<<4)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $hll;
    $56 = $1;
    $57 = (_EvaluateHllExpression($55,$0,$56,2,1,$buffer)|0);
    $rc = $57;
    $58 = $rc;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = (_strlen($buffer)|0);
     $61 = (($60) + 1)|0;
     $size = $61;
     $62 = $size;
     $63 = (_LclAlloc($62)|0);
     $64 = $hll;
     $65 = ((($64)) + 16|0);
     HEAP32[$65>>2] = $63;
     $66 = $hll;
     $67 = ((($66)) + 16|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $size;
     _memcpy(($68|0),($buffer|0),($69|0))|0;
    }
   } else {
    HEAP8[$buffer>>0] = 0;
   }
   $70 = (_strncasecmp($buffer,87054,3)|0);
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = (_GetHllLabel()|0);
    $73 = $hll;
    $74 = ((($73)) + 4|0);
    HEAP32[$74>>2] = $72;
    $75 = $hll;
    $76 = ((($75)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (_GetLabelStr($77,$buff)|0);
    HEAP32[$vararg_buffer>>2] = $78;
    _AddLineQueueX(87058,$vararg_buffer);
   }
  } else {
   HEAP32[$46>>2] = 2;
  }
  $79 = $hll;
  $80 = ((($79)) + 4|0);
  $81 = ((($80)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_GetLabelStr($82,$buff)|0);
  HEAP32[$vararg_buffer2>>2] = $83;
  _AddLineQueueX(87065,$vararg_buffer2);
  break;
 }
 default: {
 }
 }
 $84 = HEAP32[$0>>2]|0;
 $85 = $1;
 $86 = (($85) + ($84<<4)|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = ($88|0)!=(0);
 $90 = $rc;
 $91 = ($90|0)==(0);
 $or$cond = $89 & $91;
 if ($or$cond) {
  $92 = HEAP32[$0>>2]|0;
  $93 = $1;
  $94 = (($93) + ($92<<4)|0);
  $95 = ((($94)) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $96;
  (_EmitErr(209,$vararg_buffer5)|0);
  $rc = -1;
 }
 $97 = $hll;
 $98 = HEAP32[(440)>>2]|0;
 $99 = ($97|0)==($98|0);
 if ($99) {
  $100 = $hll;
  $101 = HEAP32[$100>>2]|0;
  HEAP32[(440)>>2] = $101;
 }
 $102 = HEAP32[(436)>>2]|0;
 $103 = $hll;
 HEAP32[$103>>2] = $102;
 $104 = $hll;
 HEAP32[(436)>>2] = $104;
 $105 = HEAP32[(560)>>2]|0;
 $106 = $105 >>> 11;
 $107 = $106 & 1;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = (_GetCurrOffset()|0);
  _LstWrite(4,$109,0);
 }
 $110 = HEAP32[(416)>>2]|0;
 $111 = ($110|0)!=(0|0);
 if (!($111)) {
  $112 = $rc;
  STACKTOP = sp;return ($112|0);
 }
 _RunLineQueue();
 $112 = $rc;
 STACKTOP = sp;return ($112|0);
}
function _HllEndDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff = 0, $buffer = 0;
 var $cmd = 0, $hll = 0, $or$cond = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 100|0;
 $buff = sp + 1312|0;
 $buffer = sp + 112|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $rc = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $cmd = $7;
 $8 = HEAP32[(436)>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_EmitError(245)|0);
  $0 = $10;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $11 = HEAP32[(436)>>2]|0;
 $hll = $11;
 $12 = $hll;
 $13 = HEAP32[$12>>2]|0;
 HEAP32[(436)>>2] = $13;
 $14 = HEAP32[(440)>>2]|0;
 $15 = $hll;
 HEAP32[$15>>2] = $14;
 $16 = $hll;
 HEAP32[(440)>>2] = $16;
 $17 = $cmd;
 L5: do {
  switch ($17|0) {
  case 260:  {
   $18 = $hll;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0);
   $22 = HEAP32[$1>>2]|0;
   if ($21) {
    $23 = $2;
    $24 = (($23) + ($22<<4)|0);
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$vararg_buffer>>2] = $26;
    $27 = (_EmitErr(80,$vararg_buffer)|0);
    $0 = $27;
    $157 = $0;
    STACKTOP = sp;return ($157|0);
   } else {
    $28 = (($22) + 1)|0;
    HEAP32[$1>>2] = $28;
    $29 = $hll;
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0);
    if (!($32)) {
     break L5;
    }
    $33 = $hll;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_GetLabelStr($35,$buff)|0);
    HEAP32[$vararg_buffer2>>2] = $36;
    _AddLineQueueX(87065,$vararg_buffer2);
    break L5;
   }
   break;
  }
  case 261:  {
   $37 = $hll;
   $38 = ((($37)) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(1);
   $41 = HEAP32[$1>>2]|0;
   if ($40) {
    $42 = $2;
    $43 = (($42) + ($41<<4)|0);
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $45;
    $46 = (_EmitErr(80,$vararg_buffer5)|0);
    $0 = $46;
    $157 = $0;
    STACKTOP = sp;return ($157|0);
   }
   $47 = (($41) + 1)|0;
   HEAP32[$1>>2] = $47;
   $48 = $hll;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $hll;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (_GetLabelStr($54,$buff)|0);
    HEAP32[$vararg_buffer8>>2] = $55;
    _AddLineQueueX(87065,$vararg_buffer8);
   }
   $56 = $hll;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   (_QueueTestLines($58)|0);
   break;
  }
  case 263:  {
   $59 = $hll;
   $60 = ((($59)) + 20|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)!=(2);
   $63 = HEAP32[$1>>2]|0;
   if ($62) {
    $64 = $2;
    $65 = (($64) + ($63<<4)|0);
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $67;
    $68 = (_EmitErr(80,$vararg_buffer11)|0);
    $0 = $68;
    $157 = $0;
    STACKTOP = sp;return ($157|0);
   }
   $69 = (($63) + 1)|0;
   HEAP32[$1>>2] = $69;
   $70 = $hll;
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $hll;
    $75 = ((($74)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_GetLabelStr($76,$buff)|0);
    HEAP32[$vararg_buffer14>>2] = $77;
    _AddLineQueueX(87065,$vararg_buffer14);
   }
   $78 = HEAP32[$1>>2]|0;
   $79 = $2;
   $80 = (($79) + ($78<<4)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = ($82|0)!=(0);
   $84 = $hll;
   if (!($83)) {
    $92 = ((($84)) + 4|0);
    $93 = ((($92)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (_GetLabelStr($94,$buff)|0);
    HEAP32[$vararg_buffer17>>2] = $95;
    _AddLineQueueX(87069,$vararg_buffer17);
    break L5;
   }
   $85 = $2;
   $86 = (_EvaluateHllExpression($84,$1,$85,2,0,$buffer)|0);
   $rc = $86;
   $87 = $rc;
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = (_CheckCXZLines($buffer)|0);
    $rc = $89;
    $90 = $rc;
    $91 = ($90|0)==(0);
    if ($91) {
     (_QueueTestLines($buffer)|0);
     break L5;
    } else {
     (_EmitError(191)|0);
     break L5;
    }
   }
   break;
  }
  case 262:  {
   $96 = $hll;
   $97 = ((($96)) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)!=(2);
   $100 = HEAP32[$1>>2]|0;
   if ($99) {
    $101 = $2;
    $102 = (($101) + ($100<<4)|0);
    $103 = ((($102)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    HEAP32[$vararg_buffer20>>2] = $104;
    $105 = (_EmitErr(80,$vararg_buffer20)|0);
    $0 = $105;
    $157 = $0;
    STACKTOP = sp;return ($157|0);
   }
   $106 = (($100) + 1)|0;
   HEAP32[$1>>2] = $106;
   $107 = $hll;
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)!=(0);
   if ($110) {
    $111 = $hll;
    $112 = ((($111)) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (_GetLabelStr($113,$buff)|0);
    HEAP32[$vararg_buffer23>>2] = $114;
    _AddLineQueueX(87065,$vararg_buffer23);
   }
   $115 = HEAP32[$1>>2]|0;
   $116 = $2;
   $117 = (($116) + ($115<<4)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $hll;
    $122 = $2;
    $123 = (_EvaluateHllExpression($121,$1,$122,2,0,$buffer)|0);
    $rc = $123;
    $124 = $rc;
    $125 = ($124|0)==(0);
    if ($125) {
     (_QueueTestLines($buffer)|0);
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $126 = $hll;
 $127 = ((($126)) + 4|0);
 $128 = ((($127)) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0);
 if ($130) {
  $131 = $hll;
  $132 = ((($131)) + 4|0);
  $133 = ((($132)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (_GetLabelStr($134,$buff)|0);
  HEAP32[$vararg_buffer26>>2] = $135;
  _AddLineQueueX(87065,$vararg_buffer26);
 }
 $136 = HEAP32[$1>>2]|0;
 $137 = $2;
 $138 = (($137) + ($136<<4)|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $141 = ($140|0)!=(0);
 $142 = $rc;
 $143 = ($142|0)==(0);
 $or$cond = $141 & $143;
 if ($or$cond) {
  $144 = HEAP32[$1>>2]|0;
  $145 = $2;
  $146 = (($145) + ($144<<4)|0);
  $147 = ((($146)) + 12|0);
  $148 = HEAP32[$147>>2]|0;
  HEAP32[$vararg_buffer29>>2] = $148;
  (_EmitErr(209,$vararg_buffer29)|0);
  $rc = -1;
 }
 $149 = HEAP32[(560)>>2]|0;
 $150 = $149 >>> 11;
 $151 = $150 & 1;
 $152 = ($151|0)!=(0);
 if ($152) {
  $153 = (_GetCurrOffset()|0);
  _LstWrite(4,$153,0);
 }
 $154 = HEAP32[(416)>>2]|0;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  _RunLineQueue();
 }
 $156 = $rc;
 $0 = $156;
 $157 = $0;
 STACKTOP = sp;return ($157|0);
}
function _HllExitDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff = 0, $buffer = 0, $cmd = 0, $hll = 0, $idx = 0, $or$cond = 0, $rc = 0, $savedcmd = 0, $vararg_buffer = 0, $vararg_buffer11 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 60|0;
 $buff = sp + 1272|0;
 $buffer = sp + 72|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $rc = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $cmd = $7;
 $8 = HEAP32[(436)>>2]|0;
 $hll = $8;
 $9 = $hll;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_EmitError(245)|0);
  $0 = $11;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 $12 = $cmd;
 L5: do {
  switch ($12|0) {
  case 259: case 258:  {
   $13 = $hll;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = HEAP32[$1>>2]|0;
    $18 = $2;
    $19 = (($18) + ($17<<4)|0);
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$vararg_buffer>>2] = $21;
    $22 = (_EmitErr(80,$vararg_buffer)|0);
    $0 = $22;
    $169 = $0;
    STACKTOP = sp;return ($169|0);
   }
   $23 = $hll;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 1;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = (_EmitError(67)|0);
    $0 = $28;
    $169 = $0;
    STACKTOP = sp;return ($169|0);
   }
   $29 = $hll;
   $30 = ((($29)) + 4|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = (_GetHllLabel()|0);
    $35 = $hll;
    $36 = ((($35)) + 4|0);
    $37 = ((($36)) + 4|0);
    HEAP32[$37>>2] = $34;
   }
   $38 = $hll;
   $39 = ((($38)) + 4|0);
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_GetLabelStr($41,$buff)|0);
   HEAP32[$vararg_buffer2>>2] = $42;
   _AddLineQueueX(87058,$vararg_buffer2);
   $43 = $hll;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45>>>0)>(0);
   if ($46) {
    $47 = $hll;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_GetLabelStr($49,$buff)|0);
    HEAP32[$vararg_buffer5>>2] = $50;
    _AddLineQueueX(87065,$vararg_buffer5);
    $51 = $hll;
    $52 = ((($51)) + 4|0);
    HEAP32[$52>>2] = 0;
   }
   $53 = HEAP32[$1>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$1>>2] = $54;
   $55 = $cmd;
   $56 = ($55|0)==(259);
   if (!($56)) {
    $65 = $hll;
    $66 = ((($65)) + 24|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $67 | 1;
    HEAP32[$66>>2] = $68;
    break L5;
   }
   $57 = (_GetHllLabel()|0);
   $58 = $hll;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $57;
   $60 = $hll;
   $61 = $2;
   $62 = (_EvaluateHllExpression($60,$1,$61,0,0,$buffer)|0);
   $rc = $62;
   $63 = $rc;
   $64 = ($63|0)==(0);
   if ($64) {
    (_QueueTestLines($buffer)|0);
   }
   break;
  }
  case 257: case 256:  {
   while(1) {
    $69 = $hll;
    $70 = ($69|0)!=(0|0);
    if (!($70)) {
     break;
    }
    $71 = $hll;
    $72 = ((($71)) + 20|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if (!($74)) {
     break;
    }
    $75 = $hll;
    $76 = HEAP32[$75>>2]|0;
    $hll = $76;
   }
   $77 = $hll;
   $78 = ($77|0)==(0|0);
   if ($78) {
    $79 = (_EmitError(245)|0);
    $0 = $79;
    $169 = $0;
    STACKTOP = sp;return ($169|0);
   }
   $80 = $cmd;
   $81 = ($80|0)==(256);
   $82 = $hll;
   if ($81) {
    $83 = ((($82)) + 4|0);
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(0);
    if ($86) {
     $87 = (_GetHllLabel()|0);
     $88 = $hll;
     $89 = ((($88)) + 4|0);
     $90 = ((($89)) + 4|0);
     HEAP32[$90>>2] = $87;
    }
    $idx = 1;
   } else {
    $91 = ((($82)) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(2);
    if ($93) {
     $94 = $hll;
     $95 = ((($94)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($96|0)==(0);
     if ($97) {
      $98 = (_GetHllLabel()|0);
      $99 = $hll;
      $100 = ((($99)) + 4|0);
      HEAP32[$100>>2] = $98;
     }
    }
    $101 = $hll;
    $102 = ((($101)) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)!=(0);
    $105 = $104 ? 0 : 2;
    $idx = $105;
   }
   $106 = HEAP32[$1>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$1>>2] = $107;
   $108 = HEAP32[$1>>2]|0;
   $109 = $2;
   $110 = (($109) + ($108<<4)|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = ($112|0)!=(0);
   if (!($113)) {
    $142 = $idx;
    $143 = $hll;
    $144 = ((($143)) + 4|0);
    $145 = (($144) + ($142<<2)|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (_GetLabelStr($146,$buff)|0);
    HEAP32[$vararg_buffer8>>2] = $147;
    _AddLineQueueX(87058,$vararg_buffer8);
    break L5;
   }
   $114 = HEAP32[$1>>2]|0;
   $115 = $2;
   $116 = (($115) + ($114<<4)|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = ($118|0)==(3);
   if ($119) {
    $120 = HEAP32[$1>>2]|0;
    $121 = $2;
    $122 = (($121) + ($120<<4)|0);
    $123 = ((($122)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($124|0)==(253);
    if ($125) {
     $126 = $hll;
     $127 = ((($126)) + 20|0);
     $128 = HEAP32[$127>>2]|0;
     $savedcmd = $128;
     $129 = $hll;
     $130 = ((($129)) + 20|0);
     HEAP32[$130>>2] = 3;
     $131 = HEAP32[$1>>2]|0;
     $132 = (($131) + 1)|0;
     HEAP32[$1>>2] = $132;
     $133 = $hll;
     $134 = $2;
     $135 = $idx;
     $136 = (_EvaluateHllExpression($133,$1,$134,$135,1,$buffer)|0);
     $rc = $136;
     $137 = $rc;
     $138 = ($137|0)==(0);
     if ($138) {
      (_QueueTestLines($buffer)|0);
     }
     $139 = $savedcmd;
     $140 = $hll;
     $141 = ((($140)) + 20|0);
     HEAP32[$141>>2] = $139;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $148 = HEAP32[$1>>2]|0;
 $149 = $2;
 $150 = (($149) + ($148<<4)|0);
 $151 = HEAP8[$150>>0]|0;
 $152 = $151&255;
 $153 = ($152|0)!=(0);
 $154 = $rc;
 $155 = ($154|0)==(0);
 $or$cond = $153 & $155;
 if ($or$cond) {
  $156 = HEAP32[$1>>2]|0;
  $157 = $2;
  $158 = (($157) + ($156<<4)|0);
  $159 = ((($158)) + 12|0);
  $160 = HEAP32[$159>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $160;
  (_EmitErr(209,$vararg_buffer11)|0);
  $rc = -1;
 }
 $161 = HEAP32[(560)>>2]|0;
 $162 = $161 >>> 11;
 $163 = $162 & 1;
 $164 = ($163|0)!=(0);
 if ($164) {
  $165 = (_GetCurrOffset()|0);
  _LstWrite(4,$165,0);
 }
 $166 = HEAP32[(416)>>2]|0;
 $167 = ($166|0)!=(0|0);
 if ($167) {
  _RunLineQueue();
 }
 $168 = $rc;
 $0 = $168;
 $169 = $0;
 STACKTOP = sp;return ($169|0);
}
function _HllCheckOpen() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(436)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = 87077;
 (_EmitErr(142,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _HllInit($pass) {
 $pass = $pass|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 HEAP32[(504)>>2] = 0;
 STACKTOP = sp;return;
}
function _GetHllLabel() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(504)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(504)>>2] = $1;
 return ($1|0);
}
function _EvaluateHllExpression($hll,$i,$tokenarray,$ilabel,$is_true,$buffer) {
 $hll = $hll|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $ilabel = $ilabel|0;
 $is_true = $is_true|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hllop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hllop = sp;
 $1 = $hll;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $ilabel;
 $5 = $is_true;
 $6 = $buffer;
 ;HEAP32[$hllop>>2]=0|0;HEAP32[$hllop+4>>2]=0|0;
 $7 = $6;
 HEAP8[$7>>0] = 0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = (_GetExpression($8,$9,$10,$11,$12,$13,$hllop)|0);
 $15 = (-1)==($14|0);
 if ($15) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = $3;
 $19 = (($18) + ($17<<4)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = (_EmitError(199)|0);
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _QueueTestLines($src) {
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $src;
 while(1) {
  $1 = $0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $start = $3;
  $4 = $0;
  $5 = (_strchr($4,10)|0);
  $0 = $5;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $0;
   $8 = ((($7)) + 1|0);
   $0 = $8;
   HEAP8[$7>>0] = 0;
  }
  $9 = $start;
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  if (!($11)) {
   continue;
  }
  $12 = $start;
  _AddLineQueue($12);
 }
 STACKTOP = sp;return 0;
}
function _GetLabelStr($label,$buff) {
 $label = $label|0;
 $buff = $buff|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $label;
 $1 = $buff;
 $2 = $1;
 $3 = $0;
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($2,87107,$vararg_buffer)|0);
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _CheckCXZLines($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $NL = 0, $addchars = 0, $i = 0, $lines = 0, $or$cond = 0, $px = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $lines = 0;
 $NL = 1;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(10);
  if ($8) {
   $NL = 1;
   $9 = $lines;
   $10 = (($9) + 1)|0;
   $lines = $10;
  } else {
   $11 = $NL;
   $12 = ($11<<24>>24)!=(0);
   if ($12) {
    $NL = 0;
    $13 = $1;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)==(106);
    if ($16) {
     $17 = $1;
     $18 = ((($17)) + 1|0);
     $1 = $18;
     $19 = $1;
     $20 = HEAP8[$19>>0]|0;
     $21 = $20 << 24 >> 24;
     $22 = ($21|0)==(109);
     $23 = $lines;
     $24 = ($23|0)==(0);
     $or$cond = $22 & $24;
     if ($or$cond) {
      $addchars = 2;
      $px = 87096;
     } else {
      $25 = $lines;
      $26 = ($25|0)==(1);
      if (!($26)) {
       label = 14;
       break;
      }
      $27 = $1;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = ($29|0)==(122);
      if (!($30)) {
       $31 = $1;
       $32 = HEAP8[$31>>0]|0;
       $33 = $32 << 24 >> 24;
       $34 = ($33|0)==(110);
       if (!($34)) {
        label = 14;
        break;
       }
       $35 = $1;
       $36 = ((($35)) + 1|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = ($38|0)==(122);
       if (!($39)) {
        label = 14;
        break;
       }
      }
      $addchars = 3;
      $px = 87102;
     }
     $40 = $1;
     $41 = ((($40)) + -1|0);
     $1 = $41;
     $42 = $1;
     $43 = (_strlen($42)|0);
     $i = $43;
     while(1) {
      $44 = $i;
      $45 = ($44|0)>=(0);
      $46 = $1;
      if (!($45)) {
       break;
      }
      $47 = $i;
      $48 = (($46) + ($47)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = $1;
      $51 = $addchars;
      $52 = (($50) + ($51)|0);
      $53 = $i;
      $54 = (($52) + ($53)|0);
      HEAP8[$54>>0] = $49;
      $55 = $i;
      $56 = (($55) + -1)|0;
      $i = $56;
     }
     $57 = $px;
     $58 = $px;
     $59 = (_strlen($58)|0);
     _memcpy(($46|0),($57|0),($59|0))|0;
    }
   }
  }
  $60 = $1;
  $61 = ((($60)) + 1|0);
  $1 = $61;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $62 = $lines;
 $63 = ($62|0)>(2);
 if ($63) {
  $0 = -1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 } else {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _GetExpression($hll,$i,$tokenarray,$ilabel,$is_true,$buffer,$hllop) {
 $hll = $hll|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $ilabel = $ilabel|0;
 $is_true = $is_true|0;
 $buffer = $buffer|0;
 $hllop = $hllop|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buff = 0, $nlabel = 0, $olabel = 0, $p = 0, $ptr = 0, $truelabel = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $buff = sp + 64|0;
 $1 = $hll;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $ilabel;
 $5 = $is_true;
 $6 = $buffer;
 $7 = $hllop;
 $8 = $6;
 $ptr = $8;
 $truelabel = 0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $ptr;
 $15 = $7;
 $16 = (_GetAndExpression($9,$10,$11,$12,$13,$14,$15)|0);
 $17 = (-1)==($16|0);
 if ($17) {
  $0 = -1;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 while(1) {
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = (($20) + ($19<<4)|0);
  $22 = (_GetCOp($21)|0);
  $23 = (8)==($22|0);
  if (!($23)) {
   break;
  }
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = $5;
  $28 = $27&255;
  $29 = ($28|0)==(0);
  do {
   if ($29) {
    $30 = $7;
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     $33 = $7;
     $34 = HEAP32[$33>>2]|0;
     $p = $34;
     $35 = $p;
     _InvertJump($35);
     $36 = $truelabel;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = (_GetHllLabel()|0);
      $truelabel = $38;
     }
     $39 = $p;
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)!=(0);
     if ($41) {
      $42 = $p;
      $43 = ((($42)) + 4|0);
      $p = $43;
      $44 = $truelabel;
      $45 = $p;
      (_GetLabelStr($44,$45)|0);
      $46 = $p;
      (_strcat($46,88051)|0);
     }
     $47 = $7;
     $48 = ((($47)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)!=(0);
     if ($50) {
      $51 = $ptr;
      $52 = $7;
      $53 = ((($52)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $truelabel;
      _ReplaceLabel($51,$54,$55);
     }
     $56 = $7;
     HEAP32[$56>>2] = 0;
     $57 = (_GetHllLabel()|0);
     $nlabel = $57;
     $58 = $1;
     $59 = $4;
     $60 = (_GetLabel($58,$59)|0);
     $olabel = $60;
     $61 = $1;
     $62 = ((($61)) + 20|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==(2);
     if ($64) {
      $65 = $6;
      $66 = $olabel;
      $67 = $nlabel;
      _ReplaceLabel($65,$66,$67);
      $68 = $ptr;
      $69 = $ptr;
      $70 = (_strlen($69)|0);
      $71 = (($68) + ($70)|0);
      $72 = $nlabel;
      $73 = (_GetLabelStr($72,$buff)|0);
      HEAP32[$vararg_buffer>>2] = $73;
      (_sprintf($71,87114,$vararg_buffer)|0);
      break;
     } else {
      $74 = $ptr;
      $75 = $ptr;
      $76 = (_strlen($75)|0);
      $77 = (($74) + ($76)|0);
      $78 = $olabel;
      $79 = (_GetLabelStr($78,$buff)|0);
      HEAP32[$vararg_buffer1>>2] = $79;
      (_sprintf($77,87114,$vararg_buffer1)|0);
      $80 = $6;
      $81 = $olabel;
      $82 = $nlabel;
      _ReplaceLabel($80,$81,$82);
      break;
     }
    }
   }
  } while(0);
  $83 = $ptr;
  $84 = (_strlen($83)|0);
  $85 = $ptr;
  $86 = (($85) + ($84)|0);
  $ptr = $86;
  $87 = $7;
  $88 = ((($87)) + 4|0);
  HEAP32[$88>>2] = 0;
  $89 = $1;
  $90 = $2;
  $91 = $3;
  $92 = $4;
  $93 = $5;
  $94 = $ptr;
  $95 = $7;
  $96 = (_GetAndExpression($89,$90,$91,$92,$93,$94,$95)|0);
  $97 = (-1)==($96|0);
  if ($97) {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = -1;
  $126 = $0;
  STACKTOP = sp;return ($126|0);
 }
 $98 = $truelabel;
 $99 = ($98>>>0)>(0);
 if ($99) {
  $100 = $7;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)!=(0|0);
  if ($102) {
   $103 = $7;
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)!=(0);
   if ($106) {
    $107 = $ptr;
    $108 = $7;
    $109 = ((($108)) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $truelabel;
    _ReplaceLabel($107,$110,$111);
    $112 = $7;
    $113 = HEAP32[$112>>2]|0;
    $114 = (_strchr($113,10)|0);
    $115 = ((($114)) + 1|0);
    HEAP8[$115>>0] = 0;
   }
  }
  $116 = $ptr;
  $117 = (_strlen($116)|0);
  $118 = $ptr;
  $119 = (($118) + ($117)|0);
  $ptr = $119;
  $120 = $truelabel;
  $121 = $ptr;
  (_GetLabelStr($120,$121)|0);
  $122 = $ptr;
  (_strcat($122,87119)|0);
  $123 = $truelabel;
  $124 = $7;
  $125 = ((($124)) + 4|0);
  HEAP32[$125>>2] = $123;
 }
 $0 = 0;
 $126 = $0;
 STACKTOP = sp;return ($126|0);
}
function _GetAndExpression($hll,$i,$tokenarray,$ilabel,$is_true,$buffer,$hllop) {
 $hll = $hll|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $ilabel = $ilabel|0;
 $is_true = $is_true|0;
 $buffer = $buffer|0;
 $hllop = $hllop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $p = 0, $ptr = 0;
 var $truelabel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $hll;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $ilabel;
 $5 = $is_true;
 $6 = $buffer;
 $7 = $hllop;
 $8 = $6;
 $ptr = $8;
 $truelabel = 0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $ptr;
 $15 = $7;
 $16 = (_GetSimpleExpression($9,$10,$11,$12,$13,$14,$15)|0);
 $17 = (-1)==($16|0);
 if ($17) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 while(1) {
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = (($20) + ($19<<4)|0);
  $22 = (_GetCOp($21)|0);
  $23 = (7)==($22|0);
  if (!($23)) {
   break;
  }
  $24 = $2;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = $5;
  $28 = ($27<<24>>24)!=(0);
  if ($28) {
   $29 = $7;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $7;
    $33 = HEAP32[$32>>2]|0;
    $p = $33;
    $34 = $p;
    _InvertJump($34);
    $35 = $truelabel;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = (_GetHllLabel()|0);
     $truelabel = $37;
    }
    $38 = $p;
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)!=(0);
    if ($40) {
     $41 = $p;
     $42 = ((($41)) + 4|0);
     $p = $42;
     $43 = $truelabel;
     $44 = $p;
     (_GetLabelStr($43,$44)|0);
     $45 = $p;
     (_strcat($45,88051)|0);
    }
    $46 = $6;
    $47 = $1;
    $48 = $4;
    $49 = (_GetLabel($47,$48)|0);
    $50 = $truelabel;
    _ReplaceLabel($46,$49,$50);
    $51 = $7;
    HEAP32[$51>>2] = 0;
   }
  }
  $52 = $ptr;
  $53 = (_strlen($52)|0);
  $54 = $ptr;
  $55 = (($54) + ($53)|0);
  $ptr = $55;
  $56 = $7;
  $57 = ((($56)) + 4|0);
  HEAP32[$57>>2] = 0;
  $58 = $1;
  $59 = $2;
  $60 = $3;
  $61 = $4;
  $62 = $5;
  $63 = $ptr;
  $64 = $7;
  $65 = (_GetSimpleExpression($58,$59,$60,$61,$62,$63,$64)|0);
  $66 = (-1)==($65|0);
  if ($66) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $67 = $truelabel;
 $68 = ($67>>>0)>(0);
 if ($68) {
  $69 = $ptr;
  $70 = (_strlen($69)|0);
  $71 = $ptr;
  $72 = (($71) + ($70)|0);
  $ptr = $72;
  $73 = $truelabel;
  $74 = $ptr;
  (_GetLabelStr($73,$74)|0);
  $75 = $ptr;
  (_strcat($75,87119)|0);
  $76 = $7;
  HEAP32[$76>>2] = 0;
 }
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _GetCOp($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p = 0, $rc = 0, $size = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $item;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $p = $4;
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(9);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11;
 } else {
  $12 = 0;
 }
 $size = $12;
 $13 = $size;
 $14 = ($13|0)==(2);
 L4: do {
  if ($14) {
   $15 = $p;
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $switch$split2D = ($17|0)<(15677);
   L6: do {
    if ($switch$split2D) {
     $switch$split12D = ($17|0)<(15649);
     if ($switch$split12D) {
      switch ($17|0) {
      case 9766:  {
       break;
      }
      default: {
       break L6;
      }
      }
      $rc = 7;
      break L4;
     }
     switch ($17|0) {
     case 15649:  {
      $rc = 2;
      break L4;
      break;
     }
     case 15676:  {
      $rc = 6;
      break L4;
      break;
     }
     default: {
      break L6;
     }
     }
    } else {
     $switch$split42D = ($17|0)<(15678);
     if ($switch$split42D) {
      switch ($17|0) {
      case 15677:  {
       break;
      }
      default: {
       break L6;
      }
      }
      $rc = 1;
      break L4;
     }
     $switch$split72D = ($17|0)<(31868);
     if ($switch$split72D) {
      switch ($17|0) {
      case 15678:  {
       break;
      }
      default: {
       break L6;
      }
      }
      $rc = 5;
      break L4;
     } else {
      switch ($17|0) {
      case 31868:  {
       break;
      }
      default: {
       break L6;
      }
      }
      $rc = 8;
      break L4;
     }
    }
   } while(0);
   $0 = 0;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  } else {
   $18 = $size;
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = $p;
    $21 = HEAP8[$20>>0]|0;
    $22 = $21 << 24 >> 24;
    switch ($22|0) {
    case 62:  {
     $rc = 3;
     break L4;
     break;
    }
    case 60:  {
     $rc = 4;
     break L4;
     break;
    }
    case 38:  {
     $rc = 9;
     break L4;
     break;
    }
    case 33:  {
     $rc = 10;
     break L4;
     break;
    }
    default: {
     $0 = 0;
     $62 = $0;
     STACKTOP = sp;return ($62|0);
    }
    }
   }
   $23 = $1;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)!=(8);
   if ($26) {
    $0 = 0;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
   $27 = $p;
   $28 = (_strlen($27)|0);
   $size = $28;
   $29 = $p;
   $30 = $size;
   $31 = (($29) + ($30)|0);
   $32 = ((($31)) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)!=(63);
   if ($35) {
    $0 = 0;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
   $36 = $size;
   $37 = ($36|0)==(5);
   if ($37) {
    $38 = $p;
    $39 = (_strncasecmp($38,87133,4)|0);
    $40 = (0)==($39|0);
    if ($40) {
     $rc = 11;
     break;
    }
   }
   $41 = $size;
   $42 = ($41|0)==(6);
   if ($42) {
    $43 = $p;
    $44 = (_strncasecmp($43,87138,5)|0);
    $45 = (0)==($44|0);
    if ($45) {
     $rc = 12;
     break;
    }
   }
   $46 = $size;
   $47 = ($46|0)==(5);
   if ($47) {
    $48 = $p;
    $49 = (_strncasecmp($48,87144,4)|0);
    $50 = (0)==($49|0);
    if ($50) {
     $rc = 13;
     break;
    }
   }
   $51 = $size;
   $52 = ($51|0)==(7);
   if ($52) {
    $53 = $p;
    $54 = (_strncasecmp($53,87149,6)|0);
    $55 = (0)==($54|0);
    if ($55) {
     $rc = 14;
     break;
    }
   }
   $56 = $size;
   $57 = ($56|0)==(9);
   if ($57) {
    $58 = $p;
    $59 = (_strncasecmp($58,87156,8)|0);
    $60 = (0)==($59|0);
    if ($60) {
     $rc = 15;
     break;
    }
   }
   $0 = 0;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $61 = $rc;
 $0 = $61;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _InvertJump($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(0);
 $5 = $0;
 if ($4) {
  (_strcpy($5,87128)|0);
  STACKTOP = sp;return;
 }
 $6 = ((($5)) + 1|0);
 $0 = $6;
 $7 = $0;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(101);
 if (!($10)) {
  $11 = $0;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(122);
  if (!($14)) {
   $15 = $0;
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(99);
   if (!($18)) {
    $19 = $0;
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($21|0)==(115);
    if (!($22)) {
     $23 = $0;
     $24 = HEAP8[$23>>0]|0;
     $25 = $24 << 24 >> 24;
     $26 = ($25|0)==(112);
     if (!($26)) {
      $27 = $0;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = ($29|0)==(111);
      if (!($30)) {
       $36 = $0;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = ($38|0)==(110);
       $40 = $0;
       if ($39) {
        $41 = ((($40)) + 1|0);
        $42 = HEAP8[$41>>0]|0;
        $43 = $0;
        HEAP8[$43>>0] = $42;
        $44 = $0;
        $45 = ((($44)) + 1|0);
        HEAP8[$45>>0] = 32;
        STACKTOP = sp;return;
       }
       $46 = HEAP8[$40>>0]|0;
       $47 = $46 << 24 >> 24;
       $48 = ($47|0)==(97);
       $49 = $0;
       do {
        if ($48) {
         $50 = ((($49)) + 1|0);
         $0 = $50;
         HEAP8[$49>>0] = 98;
        } else {
         $51 = HEAP8[$49>>0]|0;
         $52 = $51 << 24 >> 24;
         $53 = ($52|0)==(98);
         $54 = $0;
         if ($53) {
          $55 = ((($54)) + 1|0);
          $0 = $55;
          HEAP8[$54>>0] = 97;
          break;
         }
         $56 = HEAP8[$54>>0]|0;
         $57 = $56 << 24 >> 24;
         $58 = ($57|0)==(103);
         $59 = $0;
         if ($58) {
          $60 = ((($59)) + 1|0);
          $0 = $60;
          HEAP8[$59>>0] = 108;
          break;
         }
         $61 = HEAP8[$59>>0]|0;
         $62 = $61 << 24 >> 24;
         $63 = ($62|0)==(108);
         $64 = $0;
         if ($63) {
          $65 = ((($64)) + 1|0);
          $0 = $65;
          HEAP8[$64>>0] = 103;
          break;
         }
         $66 = HEAP8[$64>>0]|0;
         $67 = $66 << 24 >> 24;
         $68 = ($67|0)==(109);
         if (!($68)) {
          STACKTOP = sp;return;
         }
         $69 = $0;
         $70 = ((($69)) + -1|0);
         $0 = $70;
         $71 = $0;
         HEAP8[$71>>0] = 0;
         STACKTOP = sp;return;
        }
       } while(0);
       $72 = $0;
       $73 = HEAP8[$72>>0]|0;
       $74 = $73 << 24 >> 24;
       $75 = ($74|0)==(101);
       $76 = $0;
       if ($75) {
        HEAP8[$76>>0] = 32;
        STACKTOP = sp;return;
       } else {
        HEAP8[$76>>0] = 101;
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $31 = $0;
 $32 = HEAP8[$31>>0]|0;
 $33 = $0;
 $34 = ((($33)) + 1|0);
 HEAP8[$34>>0] = $32;
 $35 = $0;
 HEAP8[$35>>0] = 110;
 STACKTOP = sp;return;
}
function _ReplaceLabel($p,$olabel,$nlabel) {
 $p = $p|0;
 $olabel = $olabel|0;
 $nlabel = $nlabel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $newlbl = 0, $oldlbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $oldlbl = sp + 32|0;
 $newlbl = sp + 16|0;
 $0 = $p;
 $1 = $olabel;
 $2 = $nlabel;
 $3 = $1;
 (_GetLabelStr($3,$oldlbl)|0);
 $4 = $2;
 (_GetLabelStr($4,$newlbl)|0);
 $5 = (_strlen($newlbl)|0);
 $i = $5;
 while(1) {
  $6 = $0;
  $7 = (_strstr($6,$oldlbl)|0);
  $0 = $7;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $i;
  _memcpy(($9|0),($newlbl|0),($10|0))|0;
  $11 = $i;
  $12 = $0;
  $13 = (($12) + ($11)|0);
  $0 = $13;
 }
 STACKTOP = sp;return;
}
function _GetLabel($hll,$index) {
 $hll = $hll|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $hll;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  (_InternalError(87122,308)|0);
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function _GetSimpleExpression($hll,$i,$tokenarray,$ilabel,$is_true,$buffer,$hllop) {
 $hll = $hll|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $ilabel = $ilabel|0;
 $is_true = $is_true|0;
 $buffer = $buffer|0;
 $hllop = $hllop|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brcnt = 0, $instr = 0, $j = 0, $label = 0;
 var $op = 0, $op1 = 0, $op1_end = 0, $op1_pos = 0, $op2 = 0, $op2_end = 0, $op2_pos = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 144|0;
 $op1 = sp + 72|0;
 $op2 = sp;
 $1 = $hll;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $ilabel;
 $5 = $is_true;
 $6 = $buffer;
 $7 = $hllop;
 while(1) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  $11 = (($10) + ($9<<4)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(33);
  if ($16) {
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = $3;
   $20 = (($19) + ($18<<4)|0);
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 1|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)==(0);
   $314 = $26;
  } else {
   $314 = 0;
  }
  $27 = $2;
  $28 = HEAP32[$27>>2]|0;
  if (!($314)) {
   break;
  }
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  $30 = $5;
  $31 = $30&255;
  $32 = (1 - ($31))|0;
  $33 = $32&255;
  $5 = $33;
 }
 $34 = $3;
 $35 = (($34) + ($28<<4)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ($37|0)==(40);
 if ($38) {
  $brcnt = 1;
  $39 = $2;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  $j = $41;
  L10: while(1) {
   $42 = $j;
   $43 = $3;
   $44 = (($43) + ($42<<4)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = ($46|0)!=(0);
   if (!($47)) {
    break;
   }
   $48 = $j;
   $49 = $3;
   $50 = (($49) + ($48<<4)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ($52|0)==(40);
   do {
    if ($53) {
     $54 = $brcnt;
     $55 = (($54) + 1)|0;
     $brcnt = $55;
    } else {
     $56 = $j;
     $57 = $3;
     $58 = (($57) + ($56<<4)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)==(41);
     if ($61) {
      $62 = $brcnt;
      $63 = (($62) + -1)|0;
      $brcnt = $63;
      $64 = $brcnt;
      $65 = ($64|0)==(0);
      if ($65) {
       break L10;
      } else {
       break;
      }
     } else {
      $66 = $j;
      $67 = $3;
      $68 = (($67) + ($66<<4)|0);
      $69 = (_GetCOp($68)|0);
      $70 = ($69|0)!=(0);
      if ($70) {
       break L10;
      } else {
       break;
      }
     }
    }
   } while(0);
   $71 = $j;
   $72 = (($71) + 1)|0;
   $j = $72;
  }
  $73 = $brcnt;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$75>>2] = $77;
   $78 = $1;
   $79 = $2;
   $80 = $3;
   $81 = $4;
   $82 = $5;
   $83 = $6;
   $84 = $7;
   $85 = (_GetExpression($78,$79,$80,$81,$82,$83,$84)|0);
   $86 = (-1)==($85|0);
   if ($86) {
    $0 = -1;
    $313 = $0;
    STACKTOP = sp;return ($313|0);
   }
   $87 = $2;
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = (($89) + ($88<<4)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = ($92|0)!=(41);
   if ($93) {
    $94 = (_EmitError(199)|0);
    $0 = $94;
    $313 = $0;
    STACKTOP = sp;return ($313|0);
   } else {
    $95 = $2;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + 1)|0;
    HEAP32[$95>>2] = $97;
    $0 = 0;
    $313 = $0;
    STACKTOP = sp;return ($313|0);
   }
  }
 }
 $98 = $2;
 $99 = HEAP32[$98>>2]|0;
 $op1_pos = $99;
 $100 = $1;
 $101 = $2;
 $102 = $3;
 $103 = (_GetToken603($100,$101,$102,$op1)|0);
 $104 = (-1)==($103|0);
 if ($104) {
  $0 = -1;
  $313 = $0;
  STACKTOP = sp;return ($313|0);
 }
 $105 = $2;
 $106 = HEAP32[$105>>2]|0;
 $op1_end = $106;
 $107 = $2;
 $108 = HEAP32[$107>>2]|0;
 $109 = $3;
 $110 = (($109) + ($108<<4)|0);
 $111 = (_GetCOp($110)|0);
 $op = $111;
 $112 = $op;
 $113 = ($112|0)==(7);
 $114 = $op;
 $115 = ($114|0)==(8);
 $or$cond = $113 | $115;
 if ($or$cond) {
  $op = 0;
 } else {
  $116 = $op;
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = $2;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + 1)|0;
   HEAP32[$118>>2] = $120;
  }
 }
 $121 = $1;
 $122 = $4;
 $123 = (_GetLabel($121,$122)|0);
 $label = $123;
 $124 = $op;
 $125 = ($124>>>0)>=(11);
 $126 = ((($op1)) + 40|0);
 $127 = HEAP32[$126>>2]|0;
 if ($125) {
  $128 = ($127|0)!=(-2);
  if ($128) {
   $129 = (_EmitError(199)|0);
   $0 = $129;
   $313 = $0;
   STACKTOP = sp;return ($313|0);
  } else {
   $130 = $6;
   $p = $130;
   $131 = $p;
   $132 = $7;
   HEAP32[$132>>2] = $131;
   $133 = $p;
   $134 = $op;
   $135 = (($134) - 11)|0;
   $136 = (87165 + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $5;
   $139 = ($138<<24>>24)!=(0);
   $140 = $139 ^ 1;
   $141 = $140&1;
   $142 = $label;
   (_RenderJcc($133,$137,$141,$142)|0);
   $0 = 0;
   $313 = $0;
   STACKTOP = sp;return ($313|0);
  }
 }
 switch ($127|0) {
 case -2:  {
  $143 = (_EmitError(199)|0);
  $0 = $143;
  $313 = $0;
  STACKTOP = sp;return ($313|0);
  break;
 }
 case 3:  {
  $144 = (_EmitError(270)|0);
  $0 = $144;
  $313 = $0;
  STACKTOP = sp;return ($313|0);
  break;
 }
 default: {
  $145 = $op;
  $146 = ($145|0)==(0);
  if ($146) {
   $147 = ((($op1)) + 40|0);
   $148 = HEAP32[$147>>2]|0;
   L53: do {
    switch ($148|0) {
    case 2:  {
     $149 = ((($op1)) + 52|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150 & 1;
     $152 = $151&255;
     $153 = ($152|0)==(0);
     if ($153) {
      $154 = $6;
      $155 = $op1_pos;
      $156 = $op1_end;
      $157 = $op1_pos;
      $158 = $op1_end;
      $159 = $3;
      $160 = (_RenderInstr($154,87170,$155,$156,$157,$158,$159)|0);
      $p = $160;
      $161 = $p;
      $162 = $7;
      HEAP32[$162>>2] = $161;
      $163 = $p;
      $164 = $5;
      $165 = $164&255;
      $166 = $label;
      (_RenderJcc($163,122,$165,$166)|0);
     } else {
      label = 38;
     }
     break;
    }
    case 1:  {
     label = 38;
     break;
    }
    case 0:  {
     $178 = ((($op1)) + 4|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ($179|0)!=(0);
     if ($180) {
      $181 = ((($op1)) + 4|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($182|0)!=(-1);
      if ($183) {
       $184 = (_EmitConstError($op1)|0);
       $0 = $184;
       $313 = $0;
       STACKTOP = sp;return ($313|0);
      }
     }
     $185 = $6;
     $186 = $7;
     HEAP32[$186>>2] = $185;
     $187 = $5;
     $188 = $187&255;
     $189 = ($188|0)==(1);
     if ($189) {
      $190 = HEAP32[$op1>>2]|0;
      $191 = ($190|0)!=(0);
      if (!($191)) {
       label = 44;
      }
     } else {
      label = 44;
     }
     do {
      if ((label|0) == 44) {
       $192 = $5;
       $193 = $192&255;
       $194 = ($193|0)==(0);
       if ($194) {
        $195 = HEAP32[$op1>>2]|0;
        $196 = ($195|0)==(0);
        if ($196) {
         break;
        }
       }
       $199 = $6;
       HEAP8[$199>>0] = 0;
       break L53;
      }
     } while(0);
     $197 = $6;
     $198 = $label;
     HEAP32[$vararg_buffer>>2] = $198;
     (_sprintf($197,87178,$vararg_buffer)|0);
     break;
    }
    default: {
    }
    }
   } while(0);
   if ((label|0) == 38) {
    $167 = $6;
    $168 = $op1_pos;
    $169 = $op1_end;
    $170 = $3;
    $171 = (_RenderInstr($167,87174,$168,$169,-2,0,$170)|0);
    $p = $171;
    $172 = $p;
    $173 = $7;
    HEAP32[$173>>2] = $172;
    $174 = $p;
    $175 = $5;
    $176 = $175&255;
    $177 = $label;
    (_RenderJcc($174,122,$176,$177)|0);
   }
   $0 = 0;
   $313 = $0;
   STACKTOP = sp;return ($313|0);
  }
  $200 = $2;
  $201 = HEAP32[$200>>2]|0;
  $op2_pos = $201;
  $202 = $1;
  $203 = $2;
  $204 = $3;
  $205 = (_GetToken603($202,$203,$204,$op2)|0);
  $206 = (-1)==($205|0);
  if ($206) {
   $0 = -1;
   $313 = $0;
   STACKTOP = sp;return ($313|0);
  }
  $207 = ((($op2)) + 40|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ($208|0)!=(0);
  if ($209) {
   $210 = ((($op2)) + 40|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($211|0)!=(1);
   if ($212) {
    $213 = ((($op2)) + 40|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = ($214|0)!=(2);
    if ($215) {
     $216 = (_EmitError(199)|0);
     $0 = $216;
     $313 = $0;
     STACKTOP = sp;return ($313|0);
    }
   }
  }
  $217 = $2;
  $218 = HEAP32[$217>>2]|0;
  $op2_end = $218;
  $219 = $op;
  $220 = ($219|0)==(9);
  if ($220) {
   $221 = $6;
   $222 = $op1_pos;
   $223 = $op1_end;
   $224 = $op2_pos;
   $225 = $op2_end;
   $226 = $3;
   $227 = (_RenderInstr($221,87190,$222,$223,$224,$225,$226)|0);
   $p = $227;
   $228 = $p;
   $229 = $7;
   HEAP32[$229>>2] = $228;
   $230 = $p;
   $231 = $5;
   $232 = $231&255;
   $233 = $label;
   (_RenderJcc($230,101,$232,$233)|0);
  } else {
   $234 = $op;
   $235 = ($234>>>0)<=(6);
   if (!($235)) {
    $312 = (_EmitError(199)|0);
    $0 = $312;
    $313 = $0;
    STACKTOP = sp;return ($313|0);
   }
   $236 = HEAP8[(6084)>>0]|0;
   $237 = $236&255;
   $238 = ($237|0)!=(0);
   if ($238) {
    $239 = $op;
    $240 = ($239|0)==(1);
    $241 = $op;
    $242 = ($241|0)==(2);
    $or$cond3 = $240 | $242;
    if ($or$cond3) {
     $243 = ((($op1)) + 40|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ($244|0)==(2);
     if ($245) {
      $246 = ((($op1)) + 52|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247 & 1;
      $249 = $248&255;
      $250 = ($249|0)==(0);
      if ($250) {
       $251 = ((($op2)) + 40|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = ($252|0)==(0);
       if ($253) {
        $254 = $op2;
        $255 = $254;
        $256 = HEAP32[$255>>2]|0;
        $257 = (($254) + 4)|0;
        $258 = $257;
        $259 = HEAP32[$258>>2]|0;
        $260 = ($256|0)==(0);
        $261 = ($259|0)==(0);
        $262 = $260 & $261;
        if ($262) {
         $263 = $6;
         $264 = $op1_pos;
         $265 = $op1_end;
         $266 = $op1_pos;
         $267 = $op1_end;
         $268 = $3;
         $269 = (_RenderInstr($263,87195,$264,$265,$266,$267,$268)|0);
         $p = $269;
        } else {
         label = 65;
        }
       } else {
        label = 65;
       }
      } else {
       label = 65;
      }
     } else {
      label = 65;
     }
    } else {
     label = 65;
    }
   } else {
    label = 65;
   }
   if ((label|0) == 65) {
    $270 = $6;
    $271 = $op1_pos;
    $272 = $op1_end;
    $273 = $op2_pos;
    $274 = $op2_end;
    $275 = $3;
    $276 = (_RenderInstr($270,87174,$271,$272,$273,$274,$275)|0);
    $p = $276;
   }
   $277 = ((($op1)) + 44|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = $278 & 192;
   $280 = ($279|0)==(64);
   if ($280) {
    label = 68;
   } else {
    $281 = ((($op2)) + 44|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = $282 & 192;
    $284 = ($283|0)==(64);
    if ($284) {
     label = 68;
    } else {
     $289 = $op;
     $290 = (($289) - 1)|0;
     $291 = (87204 + ($290)|0);
     $292 = HEAP8[$291>>0]|0;
     $$sink = $292;
    }
   }
   if ((label|0) == 68) {
    $285 = $op;
    $286 = (($285) - 1)|0;
    $287 = (87198 + ($286)|0);
    $288 = HEAP8[$287>>0]|0;
    $$sink = $288;
   }
   $293 = $$sink << 24 >> 24;
   $294 = $293&255;
   $instr = $294;
   $295 = $p;
   $296 = $7;
   HEAP32[$296>>2] = $295;
   $297 = $p;
   $298 = $instr;
   $299 = $op;
   $300 = (($299) - 1)|0;
   $301 = (87210 + ($300)|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302 << 24 >> 24;
   $304 = ($303|0)!=(0);
   $305 = $5;
   if ($304) {
    $306 = $305&255;
    $311 = $306;
   } else {
    $307 = ($305<<24>>24)!=(0);
    $308 = $307 ^ 1;
    $309 = $308&1;
    $311 = $309;
   }
   $310 = $label;
   (_RenderJcc($297,$298,$311,$310)|0);
  }
  $0 = 0;
  $313 = $0;
  STACKTOP = sp;return ($313|0);
 }
 }
 return (0)|0;
}
function _GetToken603($hll,$i,$tokenarray,$opnd) {
 $hll = $hll|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end_tok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $hll;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $opnd;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $end_tok = $6;
 while(1) {
  $7 = $end_tok;
  $8 = HEAP32[(616)>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $end_tok;
  $11 = $3;
  $12 = (($11) + ($10<<4)|0);
  $13 = (_GetCOp($12)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   break;
  }
  $15 = $end_tok;
  $16 = (($15) + 1)|0;
  $end_tok = $16;
 }
 $17 = $end_tok;
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $21 = $4;
  $22 = ((($21)) + 40|0);
  HEAP32[$22>>2] = -2;
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $23 = $2;
 $24 = $3;
 $25 = $end_tok;
 $26 = $4;
 $27 = (_EvalOperand($23,$24,$25,$26,0)|0);
 $28 = (-1)==($27|0);
 if ($28) {
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 $31 = $end_tok;
 $32 = ($30|0)>($31|0);
 if ($32) {
  $33 = (_EmitError(199)|0);
  $0 = $33;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _RenderJcc($dst,$cc,$neg,$label) {
 $dst = $dst|0;
 $cc = $cc|0;
 $neg = $neg|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dst;
 $1 = $cc;
 $2 = $neg;
 $3 = $label;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $0 = $5;
 HEAP8[$4>>0] = 106;
 $6 = $2;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 1|0);
  $0 = $9;
  HEAP8[$8>>0] = 110;
 }
 $10 = $1;
 $11 = $0;
 $12 = ((($11)) + 1|0);
 $0 = $12;
 HEAP8[$11>>0] = $10;
 $13 = $2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 1|0);
  $0 = $16;
  HEAP8[$15>>0] = 32;
 }
 $17 = $0;
 $18 = ((($17)) + 1|0);
 $0 = $18;
 HEAP8[$17>>0] = 32;
 $19 = $3;
 $20 = $0;
 (_GetLabelStr($19,$20)|0);
 $21 = $0;
 $22 = (_strlen($21)|0);
 $23 = $0;
 $24 = (($23) + ($22)|0);
 $0 = $24;
 $25 = $0;
 $26 = ((($25)) + 1|0);
 $0 = $26;
 HEAP8[$25>>0] = 10;
 $27 = $0;
 HEAP8[$27>>0] = 0;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _RenderInstr($dst,$instr,$start1,$end1,$start2,$end2,$tokenarray) {
 $dst = $dst|0;
 $instr = $instr|0;
 $start1 = $start1|0;
 $end1 = $end1|0;
 $start2 = $start2|0;
 $end2 = $end2|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $dst;
 $1 = $instr;
 $2 = $start1;
 $3 = $end1;
 $4 = $start2;
 $5 = $end2;
 $6 = $tokenarray;
 $7 = $1;
 $8 = (_strlen($7)|0);
 $i = $8;
 $9 = $0;
 $10 = $1;
 $11 = $i;
 _memcpy(($9|0),($10|0),($11|0))|0;
 $12 = $i;
 $13 = $0;
 $14 = (($13) + ($12)|0);
 $0 = $14;
 $15 = $0;
 $16 = ((($15)) + 1|0);
 $0 = $16;
 HEAP8[$15>>0] = 32;
 $17 = $3;
 $18 = $6;
 $19 = (($18) + ($17<<4)|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = $6;
 $24 = (($23) + ($22<<4)|0);
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $21;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $i = $29;
 $30 = $0;
 $31 = $2;
 $32 = $6;
 $33 = (($32) + ($31<<4)|0);
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $i;
 _memcpy(($30|0),($35|0),($36|0))|0;
 $37 = $i;
 $38 = $0;
 $39 = (($38) + ($37)|0);
 $0 = $39;
 $40 = $4;
 $41 = ($40|0)!=(-2);
 if ($41) {
  $42 = $0;
  $43 = ((($42)) + 1|0);
  $0 = $43;
  HEAP8[$42>>0] = 44;
  $44 = $0;
  $45 = ((($44)) + 1|0);
  $0 = $45;
  HEAP8[$44>>0] = 32;
  $46 = $5;
  $47 = $6;
  $48 = (($47) + ($46<<4)|0);
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $4;
  $52 = $6;
  $53 = (($52) + ($51<<4)|0);
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $50;
  $57 = $55;
  $58 = (($56) - ($57))|0;
  $i = $58;
  $59 = $0;
  $60 = $4;
  $61 = $6;
  $62 = (($61) + ($60<<4)|0);
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $i;
  _memcpy(($59|0),($64|0),($65|0))|0;
  $66 = $i;
  $67 = $0;
  $68 = (($67) + ($66)|0);
  $0 = $68;
  $76 = $0;
  $77 = ((($76)) + 1|0);
  $0 = $77;
  HEAP8[$76>>0] = 10;
  $78 = $0;
  HEAP8[$78>>0] = 0;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 $69 = $5;
 $70 = ($69|0)!=(-2);
 if (!($70)) {
  $76 = $0;
  $77 = ((($76)) + 1|0);
  $0 = $77;
  HEAP8[$76>>0] = 10;
  $78 = $0;
  HEAP8[$78>>0] = 0;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 $71 = $0;
 $72 = $5;
 HEAP32[$vararg_buffer>>2] = $72;
 $73 = (_sprintf($71,87216,$vararg_buffer)|0);
 $74 = $0;
 $75 = (($74) + ($73)|0);
 $0 = $75;
 $76 = $0;
 $77 = ((($76)) + 1|0);
 $0 = $77;
 HEAP8[$76>>0] = 10;
 $78 = $0;
 HEAP8[$78>>0] = 0;
 $79 = $0;
 STACKTOP = sp;return ($79|0);
}
function _GetFNamePart($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fname;
 $1 = $0;
 $rc = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(47);
  if ($8) {
   $9 = $0;
   $10 = ((($9)) + 1|0);
   $rc = $10;
  }
  $11 = $0;
  $12 = ((($11)) + 1|0);
  $0 = $12;
 }
 $13 = $rc;
 STACKTOP = sp;return ($13|0);
}
function _GetExtPart($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fname;
 $rc = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(46);
  $8 = $0;
  if ($7) {
   $rc = $8;
  } else {
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)==(47);
   if ($11) {
    $rc = 0;
   }
  }
  $12 = $0;
  $13 = ((($12)) + 1|0);
  $0 = $13;
 }
 $14 = $rc;
 $15 = ($14|0)!=(0|0);
 $16 = $rc;
 $17 = $0;
 $18 = $15 ? $16 : $17;
 STACKTOP = sp;return ($18|0);
}
function _GetFName($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = HEAP32[(404)>>2]|0;
 $2 = $0;
 $3 = (($1) + ($2<<2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ClearSrcStack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nextfile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _DeleteLineQueue();
 while(1) {
  $0 = HEAP32[(424)>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[(424)>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $nextfile = $4;
  $5 = HEAP32[(424)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[(424)>>2]|0;
   $11 = ((($10)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   (_fclose($12)|0);
  }
  $13 = HEAP32[13360>>2]|0;
  $14 = HEAP32[(424)>>2]|0;
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[(424)>>2]|0;
  HEAP32[13360>>2] = $15;
  $16 = $nextfile;
  HEAP32[(424)>>2] = $16;
 }
 STACKTOP = sp;return;
}
function _UpdateLineNumber($sym,$p) {
 $sym = $sym|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $p;
 $2 = HEAP32[(424)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(0);
  $10 = $curr;
  if ($9) {
   break;
  }
  $15 = HEAP32[$10>>2]|0;
  $curr = $15;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _GetLineNumber() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13344>>2]|0;
 _UpdateLineNumber($0,0);
 $1 = HEAP32[13344>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _PushMacro($mi) {
 $mi = $mi|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi;
 $1 = $0;
 (_PushSrcItem(1,$1)|0);
 STACKTOP = sp;return;
}
function _get_curr_srcfile() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(424)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $curr;
  $5 = ((($4)) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)==(0);
  $9 = $curr;
  if ($8) {
   label = 4;
   break;
  }
  $13 = HEAP32[$9>>2]|0;
  $curr = $13;
 }
 if ((label|0) == 4) {
  $10 = ((($9)) + 6|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $14 = HEAP32[(580)>>2]|0;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _set_curr_srcfile($file,$line_num) {
 $file = $file|0;
 $line_num = $line_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $line_num;
 $2 = $0;
 $3 = ($2|0)!=(4095);
 if ($3) {
  $4 = $0;
  $5 = $4&65535;
  $6 = HEAP32[(424)>>2]|0;
  $7 = ((($6)) + 6|0);
  HEAP16[$7>>1] = $5;
 }
 $8 = $1;
 $9 = HEAP32[(424)>>2]|0;
 $10 = ((($9)) + 12|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _SetLineNumber($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $0;
 $2 = HEAP32[(424)>>2]|0;
 $3 = ((($2)) + 12|0);
 HEAP32[$3>>2] = $1;
 STACKTOP = sp;return;
}
function _GetCurrSrcPos($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $buffer;
 $2 = HEAP32[(424)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $curr;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 4;
   break;
  }
  $26 = $curr;
  $27 = HEAP32[$26>>2]|0;
  $curr = $27;
 }
 if ((label|0) == 4) {
  $10 = $1;
  $11 = HEAP32[(560)>>2]|0;
  $12 = $11 >>> 16;
  $13 = $12 & 1;
  $14 = ($13|0)==(0);
  $15 = $14 ? 87221 : 87231;
  $16 = $curr;
  $17 = ((($16)) + 6|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = (_GetFName($19)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $curr;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $25 = (_sprintf($10,$15,$vararg_buffer)|0);
  $0 = $25;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $28 = $1;
  HEAP8[$28>>0] = 0;
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _print_source_nesting_structure() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $curr = 0, $tab = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $tab = 1;
 $0 = HEAP32[(424)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(424)>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[(424)>>2]|0;
 $curr = $5;
 while(1) {
  $6 = $curr;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $curr;
  $10 = ((($9)) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $tab;
   $15 = $curr;
   $16 = ((($15)) + 6|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = (_GetFName($18)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $curr;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 109841;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $20;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $23;
   _PrintNote(123,$vararg_buffer);
   $24 = $tab;
   $25 = (($24) + 1)|0;
   $tab = $25;
  } else {
   $26 = $curr;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(0);
   $36 = $tab;
   $37 = $curr;
   if ($35) {
    $38 = ((($37)) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $curr;
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[$vararg_buffer4>>2] = $36;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = 109841;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = 87237;
    $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
    HEAP32[$vararg_ptr9>>2] = $39;
    $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
    HEAP32[$vararg_ptr10>>2] = $47;
    _PrintNote(125,$vararg_buffer4);
   } else {
    $48 = ((($37)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 16|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $curr;
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $curr;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 60|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (_GetFName($65)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_GetFNamePart($67)|0);
    HEAP32[$vararg_buffer11>>2] = $36;
    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
    HEAP32[$vararg_ptr14>>2] = 109841;
    $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
    HEAP32[$vararg_ptr15>>2] = $53;
    $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
    HEAP32[$vararg_ptr16>>2] = $56;
    $vararg_ptr17 = ((($vararg_buffer11)) + 16|0);
    HEAP32[$vararg_ptr17>>2] = $68;
    _PrintNote(124,$vararg_buffer11);
   }
   $69 = $tab;
   $70 = (($69) + 1)|0;
   $tab = $70;
  }
  $71 = $curr;
  $72 = HEAP32[$71>>2]|0;
  $curr = $72;
 }
 $73 = $tab;
 $74 = $curr;
 $75 = ((($74)) + 6|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = $76&65535;
 $78 = (_GetFName($77)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $curr;
 $81 = ((($80)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 HEAP32[$vararg_buffer18>>2] = $73;
 $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
 HEAP32[$vararg_ptr21>>2] = 109841;
 $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
 HEAP32[$vararg_ptr22>>2] = $79;
 $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
 HEAP32[$vararg_ptr23>>2] = $82;
 _PrintNote(126,$vararg_buffer18);
 STACKTOP = sp;return;
}
function _SearchFile($path,$queue) {
 $path = $path|0;
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $file = 0, $fl = 0, $fn = 0, $fn2 = 0, $fullpath = 0, $i = 0, $isabs = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $src = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fullpath = sp + 40|0;
 $1 = $path;
 $2 = $queue;
 $file = 0;
 $3 = $1;
 $4 = (_GetFNamePart($3)|0);
 $fn = $4;
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)==(47);
 $9 = $8&1;
 $10 = $9&255;
 $isabs = $10;
 $11 = $isabs;
 $12 = ($11<<24>>24)!=(0);
 L1: do {
  if (!($12)) {
   $13 = HEAP32[(424)>>2]|0;
   $fl = $13;
   while(1) {
    $14 = $fl;
    $15 = ($14|0)!=(0|0);
    if (!($15)) {
     break L1;
    }
    $16 = $fl;
    $17 = ((($16)) + 4|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ($19|0)==(0);
    $21 = $fl;
    if ($20) {
     break;
    }
    $44 = HEAP32[$21>>2]|0;
    $fl = $44;
   }
   $22 = ((($21)) + 6|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $25 = (_GetFName($24)|0);
   $26 = HEAP32[$25>>2]|0;
   $src = $26;
   $27 = $src;
   $28 = (_GetFNamePart($27)|0);
   $fn2 = $28;
   $29 = $fn2;
   $30 = $src;
   $31 = ($29|0)!=($30|0);
   if ($31) {
    $32 = $fn2;
    $33 = $src;
    $34 = $32;
    $35 = $33;
    $36 = (($34) - ($35))|0;
    $i = $36;
    $37 = $src;
    $38 = $i;
    _memcpy(($fullpath|0),($37|0),($38|0))|0;
    $39 = $i;
    $40 = (($fullpath) + ($39)|0);
    $41 = $1;
    (_strcpy($40,$41)|0);
    $42 = (_fopen($fullpath,87247)|0);
    $file = $42;
    $43 = ($42|0)!=(0|0);
    if ($43) {
     $1 = $fullpath;
    }
   }
  }
 } while(0);
 $45 = $file;
 $46 = ($45|0)==(0|0);
 if ($46) {
  HEAP8[$fullpath>>0] = 0;
  $47 = $1;
  $48 = (_fopen($47,87247)|0);
  $file = $48;
  $49 = $file;
  $50 = ($49|0)==(0|0);
  $51 = HEAP32[(412)>>2]|0;
  $52 = ($51|0)!=(0|0);
  $or$cond = $50 & $52;
  $or$cond$not = $or$cond ^ 1;
  $53 = $isabs;
  $54 = ($53<<24>>24)!=(0);
  $or$cond3 = $or$cond$not | $54;
  if (!($or$cond3)) {
   $55 = $1;
   $56 = (_open_file_in_include_path($55,$fullpath)|0);
   $file = $56;
   $57 = ($56|0)!=(0|0);
   if ($57) {
    $1 = $fullpath;
   }
  }
  $58 = $file;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = $1;
   $61 = (_ErrnoStr()|0);
   HEAP32[$vararg_buffer>>2] = $60;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $61;
   (_EmitErr(106,$vararg_buffer)|0);
   $0 = 0;
   $80 = $0;
   STACKTOP = sp;return ($80|0);
  }
 }
 $62 = $2;
 $63 = ($62<<24>>24)!=(0);
 if ($63) {
  $64 = $file;
  $65 = (_PushSrcItem(0,$64)|0);
  $fl = $65;
  $66 = $1;
  $67 = (_AddFile($66)|0);
  $68 = $67&65535;
  $69 = $fl;
  $70 = ((($69)) + 6|0);
  HEAP16[$70>>1] = $68;
  $71 = $fl;
  $72 = ((($71)) + 6|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73&65535;
  $75 = (_GetFName($74)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = HEAP32[13348>>2]|0;
  $78 = ((($77)) + 8|0);
  HEAP32[$78>>2] = $76;
 }
 $79 = $file;
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function _GetTextLine($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buffer;
 $2 = HEAP32[(424)>>2]|0;
 $curr = $2;
 $3 = $curr;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $1;
   $9 = $curr;
   $10 = ((($9)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_my_fgets($8,600,$11)|0);
   $13 = ($12|0)!=(0|0);
   $14 = $curr;
   if ($13) {
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 1)|0;
    HEAP32[$15>>2] = $17;
    $18 = $1;
    $0 = $18;
    $102 = $0;
    STACKTOP = sp;return ($102|0);
   }
   $19 = HEAP32[$14>>2]|0;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $curr;
    $22 = ((($21)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    (_fclose($23)|0);
    $24 = $curr;
    $25 = HEAP32[$24>>2]|0;
    HEAP32[(424)>>2] = $25;
    $26 = HEAP32[13360>>2]|0;
    $27 = $curr;
    HEAP32[$27>>2] = $26;
    $28 = $curr;
    HEAP32[13360>>2] = $28;
   }
   $29 = HEAP32[(424)>>2]|0;
   $curr = $29;
   while(1) {
    $30 = $curr;
    $31 = ((($30)) + 4|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33|0)!=(0);
    $35 = $curr;
    if (!($34)) {
     break;
    }
    $36 = HEAP32[$35>>2]|0;
    $curr = $36;
   }
   $37 = ((($35)) + 6|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = (_GetFName($39)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[13348>>2]|0;
   $43 = ((($42)) + 8|0);
   HEAP32[$43>>2] = $41;
  } else {
   $44 = $curr;
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)!=(0|0);
   $49 = $curr;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   if ($48) {
    $52 = HEAP32[$51>>2]|0;
    $53 = HEAP32[$52>>2]|0;
    $59 = $53;
   } else {
    $54 = ((($51)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $59 = $55;
   }
   $56 = $curr;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$58>>2] = $59;
   $60 = $curr;
   $61 = ((($60)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0|0);
   $65 = $curr;
   if (!($64)) {
    $98 = HEAP32[$65>>2]|0;
    HEAP32[(424)>>2] = $98;
    $99 = HEAP32[13360>>2]|0;
    $100 = $curr;
    HEAP32[$100>>2] = $99;
    $101 = $curr;
    HEAP32[13360>>2] = $101;
    break;
   }
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 4|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = ($70<<24>>24)!=(0);
   $72 = $1;
   $73 = $curr;
   $74 = ((($73)) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 5|0);
   if ($71) {
    $78 = $curr;
    $79 = ((($78)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 20|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $curr;
    $84 = ((($83)) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $curr;
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    _fill_placeholders($72,$77,$82,$87,$92);
   } else {
    (_strcpy($72,$77)|0);
   }
   $93 = $curr;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[$94>>2] = $96;
   $97 = $1;
   $0 = $97;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 } while(0);
 $0 = 0;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _AddStringToIncludePath($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (_isspace($3)|0);
  $5 = ($4|0)!=(0);
  $6 = $0;
  if (!($5)) {
   break;
  }
  $7 = ((($6)) + 1|0);
  $0 = $7;
 }
 $8 = (_strlen($6)|0);
 $len = $8;
 $9 = $len;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[(412)>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $len;
  $14 = (($13) + 1)|0;
  $15 = (_MemAlloc($14)|0);
  HEAP32[(412)>>2] = $15;
  $16 = HEAP32[(412)>>2]|0;
  $17 = $0;
  (_strcpy($16,$17)|0);
  STACKTOP = sp;return;
 } else {
  $18 = HEAP32[(412)>>2]|0;
  $tmp = $18;
  $19 = $tmp;
  $20 = (_strlen($19)|0);
  $21 = (($20) + 2)|0;
  $22 = $len;
  $23 = (($21) + ($22))|0;
  $24 = (($23) + 1)|0;
  $25 = (_MemAlloc($24)|0);
  HEAP32[(412)>>2] = $25;
  $26 = HEAP32[(412)>>2]|0;
  $27 = $tmp;
  (_strcpy($26,$27)|0);
  $28 = HEAP32[(412)>>2]|0;
  (_strcat($28,109809)|0);
  $29 = HEAP32[(412)>>2]|0;
  $30 = $0;
  (_strcat($29,$30)|0);
  $31 = $tmp;
  _MemFree($31);
  STACKTOP = sp;return;
 }
}
function _PushInputStatus($oldstat) {
 $oldstat = $oldstat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $oldstat;
 $1 = HEAP32[13352>>2]|0;
 $2 = $0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[(616)>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[(600)>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[(604)>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = HEAP32[(600)>>2]|0;
  $12 = (_strlen($11)|0);
  $i = $12;
  $13 = HEAP32[(600)>>2]|0;
  $14 = $i;
  $15 = (($13) + ($14)|0);
  $16 = $0;
  $17 = ((($16)) + 8|0);
  HEAP32[$17>>2] = $15;
  $18 = $0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[(604)>>2]|0;
  (_strcpy($20,$21)|0);
 } else {
  $22 = $0;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = 0;
 }
 $24 = HEAP8[(550)>>0]|0;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 HEAP8[$26>>0] = $24;
 $27 = HEAP32[(612)>>2]|0;
 HEAP32[13352>>2] = $27;
 $28 = HEAP32[(616)>>2]|0;
 $29 = (($28) + 1)|0;
 $30 = HEAP32[(608)>>2]|0;
 $31 = (($30) + ($29<<4)|0);
 HEAP32[(608)>>2] = $31;
 $32 = HEAP32[(600)>>2]|0;
 $33 = HEAP32[(600)>>2]|0;
 $34 = (_strlen($33)|0);
 $35 = (($34) + 1)|0;
 $36 = (($35) + 4)|0;
 $37 = (($36) - 1)|0;
 $38 = $37 & -4;
 $39 = (($32) + ($38)|0);
 HEAP32[(600)>>2] = $39;
 $40 = HEAP32[(600)>>2]|0;
 $41 = ((($40)) + 600|0);
 $42 = HEAP32[(608)>>2]|0;
 $43 = ($41>>>0)<=($42>>>0);
 if ($43) {
  $44 = HEAP32[(608)>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 (_InternalError(87250,847)|0);
 $44 = HEAP32[(608)>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function _PopInputStatus($newstat) {
 $newstat = $newstat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $newstat;
 $1 = HEAP32[13352>>2]|0;
 HEAP32[(612)>>2] = $1;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[13352>>2] = $3;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[(616)>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[(600)>>2] = $9;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[13356>>2]|0;
  HEAP32[(604)>>2] = $14;
  $15 = HEAP32[(604)>>2]|0;
  $16 = $0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  (_strcpy($15,$18)|0);
  $19 = $0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP8[$21>>0] = 0;
 } else {
  HEAP32[(604)>>2] = 0;
 }
 $22 = HEAP32[(616)>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = HEAP32[(608)>>2]|0;
 $25 = (0 - ($23))|0;
 $26 = (($24) + ($25<<4)|0);
 HEAP32[(608)>>2] = $26;
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP8[$28>>0]|0;
 HEAP8[(550)>>0] = $29;
 STACKTOP = sp;return;
}
function _InputInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[13360>>2] = 0;
 $0 = (_LclAlloc(144600)|0);
 HEAP32[13364>>2] = $0;
 $1 = HEAP32[13364>>2]|0;
 $2 = ((($1)) + 24600|0);
 $3 = ((($2)) + -600|0);
 HEAP32[13356>>2] = $3;
 $4 = HEAP32[13364>>2]|0;
 $5 = ((($4)) + 24600|0);
 HEAP32[(608)>>2] = $5;
 $6 = HEAP32[13364>>2]|0;
 $7 = ((($6)) + 24600|0);
 $8 = ((($7)) + 96000|0);
 HEAP32[13352>>2] = $8;
 $9 = HEAP32[(372)>>2]|0;
 $10 = (_PushSrcItem(0,$9)|0);
 $fl = $10;
 $11 = HEAP32[(388)>>2]|0;
 $12 = (_AddFile($11)|0);
 HEAP32[(580)>>2] = $12;
 $13 = $12&65535;
 $14 = $fl;
 $15 = ((($14)) + 6|0);
 HEAP16[$15>>1] = $13;
 $16 = $fl;
 $17 = ((($16)) + 6|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (_GetFName($19)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[13348>>2]|0;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 STACKTOP = sp;return;
}
function _InputPassInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(424)>>2]|0;
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[13364>>2]|0;
 HEAP32[(600)>>2] = $2;
 $3 = HEAP32[(600)>>2]|0;
 HEAP8[$3>>0] = 0;
 $4 = HEAP32[13352>>2]|0;
 HEAP32[(612)>>2] = $4;
 return;
}
function _InputFini() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(412)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(412)>>2]|0;
  _MemFree($2);
 }
 _FreeFiles();
 HEAP32[(608)>>2] = 0;
 return;
}
function _PushSrcItem($type,$pv) {
 $type = $type|0;
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $pv;
 $2 = HEAP32[13360>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[13360>>2]|0;
  $curr = $4;
  $5 = $curr;
  $6 = HEAP32[$5>>2]|0;
  HEAP32[13360>>2] = $6;
 } else {
  $7 = (_LclAlloc(16)|0);
  $curr = $7;
 }
 $8 = HEAP32[(424)>>2]|0;
 $9 = $curr;
 HEAP32[$9>>2] = $8;
 $10 = $curr;
 HEAP32[(424)>>2] = $10;
 $11 = $0;
 $12 = $curr;
 $13 = ((($12)) + 4|0);
 HEAP8[$13>>0] = $11;
 $14 = $1;
 $15 = $curr;
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = $14;
 $17 = $curr;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = $curr;
 STACKTOP = sp;return ($19|0);
}
function _open_file_in_include_path($name,$fullpath) {
 $name = $name|0;
 $fullpath = $fullpath|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $file = 0;
 var $i = 0, $namelen = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $fullpath;
 $file = 0;
 while(1) {
  $2 = $0;
  $3 = HEAP8[$2>>0]|0;
  $4 = $3 << 24 >> 24;
  $5 = (_isspace($4)|0);
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $0 = $8;
 }
 $9 = HEAP32[(412)>>2]|0;
 $curr = $9;
 $10 = $0;
 $11 = (_strlen($10)|0);
 $namelen = $11;
 while(1) {
  $12 = $curr;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 15;
   break;
  }
  $14 = $curr;
  $15 = (_strchr($14,58)|0);
  $next = $15;
  $16 = $next;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $next;
   $19 = $curr;
   $20 = $18;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $i = $22;
   $23 = $next;
   $24 = ((($23)) + 1|0);
   $next = $24;
  } else {
   $25 = $curr;
   $26 = (_strlen($25)|0);
   $i = $26;
  }
  $27 = $i;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = $i;
   $30 = $namelen;
   $31 = (($29) + ($30))|0;
   $32 = ($31|0)>=(4096);
   if (!($32)) {
    $33 = $1;
    $34 = $curr;
    $35 = $i;
    _memcpy(($33|0),($34|0),($35|0))|0;
    $36 = $i;
    $37 = (($36) - 1)|0;
    $38 = $1;
    $39 = (($38) + ($37)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = ($41|0)!=(47);
    if ($42) {
     $43 = $i;
     $44 = $1;
     $45 = (($44) + ($43)|0);
     HEAP8[$45>>0] = 47;
     $46 = $i;
     $47 = (($46) + 1)|0;
     $i = $47;
    }
    $48 = $1;
    $49 = $i;
    $50 = (($48) + ($49)|0);
    $51 = $0;
    (_strcpy($50,$51)|0);
    $52 = $1;
    $53 = (_fopen($52,87247)|0);
    $file = $53;
    $54 = $file;
    $55 = ($54|0)!=(0|0);
    if ($55) {
     label = 15;
     break;
    }
   }
  }
  $56 = $next;
  $curr = $56;
 }
 if ((label|0) == 15) {
  $57 = $file;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _AddFile($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, $newfn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fname;
 $index = 0;
 while(1) {
  $2 = $index;
  $3 = HEAP32[(408)>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $index;
  $7 = HEAP32[(404)>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strcmp($5,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $index;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $index = $13;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $14 = $index;
 $15 = (($14>>>0) % 64)&-1;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $index;
  $18 = (($17) + 64)|0;
  $19 = $18<<2;
  $20 = (_MemAlloc($19)|0);
  $newfn = $20;
  $21 = HEAP32[(404)>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $newfn;
   $24 = HEAP32[(404)>>2]|0;
   $25 = $index;
   $26 = $25<<2;
   _memcpy(($23|0),($24|0),($26|0))|0;
   $27 = HEAP32[(404)>>2]|0;
   _MemFree($27);
  }
  $28 = $newfn;
  HEAP32[(404)>>2] = $28;
 }
 $29 = HEAP32[(408)>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[(408)>>2] = $30;
 $31 = $1;
 $32 = (_strlen($31)|0);
 $33 = (($32) + 1)|0;
 $34 = (_LclAlloc($33)|0);
 $35 = $index;
 $36 = HEAP32[(404)>>2]|0;
 $37 = (($36) + ($35<<2)|0);
 HEAP32[$37>>2] = $34;
 $38 = $index;
 $39 = HEAP32[(404)>>2]|0;
 $40 = (($39) + ($38<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 (_strcpy($41,$42)|0);
 $43 = $index;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _my_fgets($buffer,$max,$fp) {
 $buffer = $buffer|0;
 $max = $max|0;
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $last = 0, $ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $buffer;
 $2 = $max;
 $3 = $fp;
 $4 = $1;
 $ptr = $4;
 $5 = $1;
 $6 = $2;
 $7 = (($5) + ($6)|0);
 $last = $7;
 $8 = $3;
 $9 = (_getc($8)|0);
 $c = $9;
 L1: while(1) {
  $10 = $ptr;
  $11 = $last;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = $c;
  switch ($13|0) {
  case 10:  {
   label = 4;
   break L1;
   break;
  }
  case -1: case 26:  {
   label = 5;
   break L1;
   break;
  }
  case 13:  {
   break;
  }
  default: {
   $22 = $c;
   $23 = $22&255;
   $24 = $ptr;
   $25 = ((($24)) + 1|0);
   $ptr = $25;
   HEAP8[$24>>0] = $23;
  }
  }
  $26 = $3;
  $27 = (_getc($26)|0);
  $c = $27;
 }
 if ((label|0) == 4) {
  $14 = $ptr;
  HEAP8[$14>>0] = 0;
  $15 = $1;
  $0 = $15;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 5) {
  $16 = $ptr;
  HEAP8[$16>>0] = 0;
  $17 = $ptr;
  $18 = $1;
  $19 = ($17>>>0)>($18>>>0);
  $20 = $1;
  $21 = $19 ? $20 : 0;
  $0 = $21;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 8) {
  (_EmitErr(61,$vararg_buffer)|0);
  $28 = $ptr;
  $29 = ((($28)) + -1|0);
  HEAP8[$29>>0] = 0;
  $30 = $1;
  $0 = $30;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _FreeFiles() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(424)>>2] = 0;
 $0 = HEAP32[(404)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(404)>>2]|0;
 _MemFree($2);
 HEAP32[(404)>>2] = 0;
 return;
}
function _InvokeDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $curr = 0, $iatname = 0, $info = 0, $j = 0, $namepos = 0, $numParam = 0, $opnd = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $p = 0, $parmpos = 0, $porder = 0, $proc = 0, $r0flags = 0, $size = 0, $sym = 0;
 var $value = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer8 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer38 = sp + 176|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer29 = sp + 152|0;
 $vararg_buffer23 = sp + 136|0;
 $vararg_buffer21 = sp + 128|0;
 $vararg_buffer18 = sp + 120|0;
 $vararg_buffer16 = sp + 112|0;
 $vararg_buffer14 = sp + 104|0;
 $vararg_buffer12 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 240|0;
 $value = sp + 216|0;
 $r0flags = sp + 248|0;
 $opnd = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 HEAP8[$r0flags>>0] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $namepos = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = $2;
 $8 = (($7) + ($6<<4)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(8);
 do {
  if ($11) {
   label = 4;
  } else {
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 1)|0;
   $14 = $2;
   $15 = (($14) + ($13<<4)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($17|0)!=(44);
   if ($18) {
    $19 = HEAP32[$1>>2]|0;
    $20 = (($19) + 1)|0;
    $21 = $2;
    $22 = (($21) + ($20<<4)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($24|0)!=(0);
    if ($25) {
     label = 4;
     break;
    }
   }
   $77 = ((($opnd)) + 20|0);
   HEAP32[$77>>2] = 0;
   $78 = HEAP32[$1>>2]|0;
   $79 = $2;
   $80 = (($79) + ($78<<4)|0);
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (_SymFind($82)|0);
   $sym = $83;
   $84 = HEAP32[$1>>2]|0;
   $85 = (($84) + 1)|0;
   HEAP32[$1>>2] = $85;
   label = 16;
  }
 } while(0);
 do {
  if ((label|0) == 4) {
   $26 = $2;
   $27 = HEAP32[(616)>>2]|0;
   $28 = (_EvalOperand($1,$26,$27,$opnd,0)|0);
   $29 = (-1)==($28|0);
   if ($29) {
    $0 = -1;
    $462 = $0;
    STACKTOP = sp;return ($462|0);
   }
   $30 = ((($opnd)) + 64|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = ((($opnd)) + 64|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(7);
    if ($37) {
     $38 = ((($opnd)) + 64|0);
     $39 = HEAP32[$38>>2]|0;
     $sym = $39;
     $40 = $sym;
     $proc = $40;
     $41 = $sym;
     $42 = ((($41)) + 20|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(128);
     if ($44) {
      label = 31;
      break;
     }
     $45 = $sym;
     $46 = ((($45)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(195);
     if ($48) {
      label = 33;
      break;
     }
    }
   }
   $49 = ((($opnd)) + 40|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(2);
   if (!($51)) {
    $69 = ((($opnd)) + 60|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)!=(0|0);
    $72 = ((($opnd)) + 60|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($opnd)) + 56|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $71 ? $73 : $75;
    $sym = $76;
    label = 16;
    break;
   }
   $52 = ((($opnd)) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (15660 + (($55*12)|0)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & 14;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = ((($opnd)) + 20|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (15660 + (($63*12)|0)|0);
    $65 = ((($64)) + 10|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = (_GetStdAssume($67)|0);
    $sym = $68;
    label = 16;
    break;
   } else {
    $sym = 0;
    label = 16;
    break;
   }
  }
 } while(0);
 L23: do {
  if ((label|0) == 16) {
   $86 = $sym;
   $87 = ($86|0)==(0|0);
   if ($87) {
    $88 = (_EmitErr(159,$vararg_buffer)|0);
    $0 = $88;
    $462 = $0;
    STACKTOP = sp;return ($462|0);
   }
   $89 = $sym;
   $90 = ((($89)) + 24|0);
   $91 = HEAP16[$90>>1]|0;
   $92 = ($91&65535) >>> 11;
   $93 = $92 & 1;
   $94 = $93&255;
   $95 = ($94<<24>>24)!=(0);
   if (!($95)) {
    $96 = $sym;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(195);
    if ($99) {
     $100 = $sym;
     $101 = ((($100)) + 32|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)!=(0|0);
     if ($103) {
      $104 = $sym;
      $105 = ((($104)) + 32|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ((($106)) + 24|0);
      $108 = HEAP16[$107>>1]|0;
      $109 = ($108&65535) >>> 11;
      $110 = $109 & 1;
      $111 = $110&255;
      $112 = $111&255;
      $113 = ($112|0)!=(0);
      if ($113) {
       $114 = $sym;
       $115 = ((($114)) + 32|0);
       $116 = HEAP32[$115>>2]|0;
       $sym = $116;
       break;
      }
     }
    }
    $117 = $sym;
    $118 = ((($117)) + 20|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==(195);
    if ($120) {
     $121 = $sym;
     $122 = ((($121)) + 32|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ($123|0)!=(0|0);
     if ($124) {
      $125 = $sym;
      $126 = ((($125)) + 32|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($127)) + 20|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($129|0)==(128);
      if ($130) {
       $131 = $sym;
       $132 = ((($131)) + 32|0);
       $133 = HEAP32[$132>>2]|0;
       $proc = $133;
       label = 31;
       break;
      }
     }
    }
    $134 = $sym;
    $135 = ((($134)) + 20|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(196);
    do {
     if ($137) {
      $138 = $sym;
      $139 = ((($138)) + 52|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($140)) + 20|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142|0)==(195);
      if (!($143)) {
       $144 = $sym;
       $145 = ((($144)) + 52|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = ((($146)) + 20|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($148|0)==(128);
       if (!($149)) {
        break;
       }
      }
      $150 = $sym;
      $151 = ((($150)) + 52|0);
      $152 = HEAP32[$151>>2]|0;
      $proc = $152;
      $153 = $proc;
      $154 = ((($153)) + 20|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($155|0)!=(128);
      if ($156) {
       label = 33;
       break L23;
      } else {
       label = 31;
       break L23;
      }
     }
    } while(0);
    $168 = (_EmitErr(159,$vararg_buffer12)|0);
    $0 = $168;
    $462 = $0;
    STACKTOP = sp;return ($462|0);
   }
  }
 } while(0);
 if ((label|0) == 31) {
  $157 = $proc;
  $158 = ((($157)) + 20|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)!=(128);
  if ($160) {
   $161 = (_EmitErr(159,$vararg_buffer8)|0);
   $0 = $161;
   $462 = $0;
   STACKTOP = sp;return ($462|0);
  } else {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $162 = $proc;
  $163 = ((($162)) + 32|0);
  $164 = HEAP32[$163>>2]|0;
  $sym = $164;
  $165 = $sym;
  $166 = ($165|0)==(0|0);
  if ($166) {
   $167 = (_EmitErr(159,$vararg_buffer10)|0);
   $0 = $167;
   $462 = $0;
   STACKTOP = sp;return ($462|0);
  }
 }
 $169 = $sym;
 $proc = $169;
 $170 = $proc;
 $171 = ((($170)) + 60|0);
 $172 = HEAP32[$171>>2]|0;
 $info = $172;
 $173 = $info;
 $174 = ((($173)) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $curr = $175;
 $numParam = 0;
 while(1) {
  $176 = $curr;
  $177 = ($176|0)!=(0|0);
  if (!($177)) {
   break;
  }
  $178 = $curr;
  $179 = ((($178)) + 68|0);
  $180 = HEAP32[$179>>2]|0;
  $curr = $180;
  $181 = $numParam;
  $182 = (($181) + 1)|0;
  $numParam = $182;
 }
 $183 = $proc;
 $184 = ((($183)) + 48|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)==(7);
 if ($186) {
  HEAP32[13368>>2] = 0;
  $187 = HEAP32[(528)>>2]|0;
  $188 = (13372 + (($187*12)|0)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $proc;
  $191 = $numParam;
  $192 = HEAP32[$1>>2]|0;
  $193 = $2;
  $194 = (FUNCTION_TABLE_iiiiii[$189 & 127]($190,$191,$192,$193,$value)|0);
  $porder = $194;
 }
 $195 = $info;
 $196 = ((($195)) + 4|0);
 $197 = HEAP32[$196>>2]|0;
 $curr = $197;
 $198 = HEAP32[$1>>2]|0;
 $parmpos = $198;
 $199 = $info;
 $200 = ((($199)) + 40|0);
 $201 = HEAP8[$200>>0]|0;
 $202 = $201 & 1;
 $203 = ($202<<24>>24)!=(0);
 L63: do {
  if ($203) {
   $211 = HEAP32[(616)>>2]|0;
   $212 = HEAP32[$1>>2]|0;
   $213 = (($211) - ($212))|0;
   $214 = (($213|0) / 2)&-1;
   $j = $214;
   $215 = $numParam;
   $216 = (($215) + -1)|0;
   $numParam = $216;
   HEAP32[13408>>2] = 0;
   while(1) {
    $217 = $curr;
    $218 = ($217|0)!=(0|0);
    if (!($218)) {
     break;
    }
    $219 = $curr;
    $220 = ((($219)) + 28|0);
    $221 = ((($220)) + 3|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = ($222&255) >>> 5;
    $224 = $223 & 1;
    $225 = $224&255;
    $226 = ($225|0)==(0);
    if (!($226)) {
     break;
    }
    $227 = $curr;
    $228 = ((($227)) + 68|0);
    $229 = HEAP32[$228>>2]|0;
    $curr = $229;
   }
   while(1) {
    $230 = $j;
    $231 = $numParam;
    $232 = ($230|0)>=($231|0);
    if (!($232)) {
     break;
    }
    $233 = HEAP32[$1>>2]|0;
    $234 = $2;
    $235 = $proc;
    $236 = $curr;
    $237 = $j;
    (_PushInvokeParam($233,$234,$235,$236,$237,$r0flags)|0);
    $238 = $j;
    $239 = (($238) + -1)|0;
    $j = $239;
   }
   $240 = $info;
   $241 = ((($240)) + 4|0);
   $242 = HEAP32[$241>>2]|0;
   $curr = $242;
   while(1) {
    $243 = $curr;
    $244 = ($243|0)!=(0|0);
    if (!($244)) {
     break L63;
    }
    $245 = $curr;
    $246 = ((($245)) + 28|0);
    $247 = ((($246)) + 3|0);
    $248 = HEAP8[$247>>0]|0;
    $249 = ($248&255) >>> 5;
    $250 = $249 & 1;
    $251 = $250&255;
    $252 = ($251|0)==(1);
    if (!($252)) {
     break L63;
    }
    $253 = $curr;
    $254 = ((($253)) + 68|0);
    $255 = HEAP32[$254>>2]|0;
    $curr = $255;
   }
  } else {
   $204 = HEAP32[$1>>2]|0;
   $205 = $2;
   $206 = $proc;
   $207 = $numParam;
   $208 = (_PushInvokeParam($204,$205,$206,0,$207,$r0flags)|0);
   $209 = ($208|0)!=(-1);
   if ($209) {
    $210 = (_EmitErr(177,$vararg_buffer14)|0);
    $0 = $210;
    $462 = $0;
    STACKTOP = sp;return ($462|0);
   }
  }
 } while(0);
 $256 = $sym;
 $257 = ((($256)) + 48|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = ($258|0)==(3);
 L81: do {
  if ($259) {
   label = 58;
  } else {
   $260 = $sym;
   $261 = ((($260)) + 48|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = ($262|0)==(1);
   if ($263) {
    label = 58;
   } else {
    $264 = $sym;
    $265 = ((($264)) + 48|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = ($266|0)==(7);
    $268 = $porder;
    $269 = ($268|0)!=(0);
    $or$cond = $267 & $269;
    if ($or$cond) {
     label = 58;
    } else {
     $270 = $sym;
     $271 = ((($270)) + 48|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = ($272|0)==(2);
     if ($273) {
      label = 58;
     } else {
      $numParam = 0;
      while(1) {
       $291 = $curr;
       $292 = ($291|0)!=(0|0);
       if (!($292)) {
        break L81;
       }
       $293 = $curr;
       $294 = ((($293)) + 28|0);
       $295 = ((($294)) + 3|0);
       $296 = HEAP8[$295>>0]|0;
       $297 = ($296&255) >>> 5;
       $298 = $297 & 1;
       $299 = $298&255;
       $300 = ($299|0)==(0);
       if (!($300)) {
        break L81;
       }
       $301 = HEAP32[$1>>2]|0;
       $302 = $2;
       $303 = $proc;
       $304 = $curr;
       $305 = $numParam;
       $306 = (_PushInvokeParam($301,$302,$303,$304,$305,$r0flags)|0);
       $307 = ($306|0)==(-1);
       if ($307) {
        $308 = $sym;
        $309 = ((($308)) + 4|0);
        $310 = HEAP32[$309>>2]|0;
        HEAP32[$vararg_buffer18>>2] = $310;
        (_EmitErr(146,$vararg_buffer18)|0);
       }
       $311 = $curr;
       $312 = ((($311)) + 68|0);
       $313 = HEAP32[$312>>2]|0;
       $curr = $313;
       $314 = $numParam;
       $315 = (($314) + 1)|0;
       $numParam = $315;
      }
     }
    }
   }
  }
 } while(0);
 L93: do {
  if ((label|0) == 58) {
   while(1) {
    label = 0;
    $274 = $curr;
    $275 = ($274|0)!=(0|0);
    if (!($275)) {
     break L93;
    }
    $276 = $numParam;
    $277 = (($276) + -1)|0;
    $numParam = $277;
    $278 = HEAP32[$1>>2]|0;
    $279 = $2;
    $280 = $proc;
    $281 = $curr;
    $282 = $numParam;
    $283 = (_PushInvokeParam($278,$279,$280,$281,$282,$r0flags)|0);
    $284 = ($283|0)==(-1);
    if ($284) {
     $285 = $sym;
     $286 = ((($285)) + 4|0);
     $287 = HEAP32[$286>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $287;
     (_EmitErr(146,$vararg_buffer16)|0);
    }
    $288 = $curr;
    $289 = ((($288)) + 68|0);
    $290 = HEAP32[$289>>2]|0;
    $curr = $290;
    label = 58;
   }
  }
 } while(0);
 $316 = ((($opnd)) + 20|0);
 $317 = HEAP32[$316>>2]|0;
 $318 = ($317|0)!=(0|0);
 $319 = HEAP32[4884>>2]|0;
 $320 = ($319|0)==(0);
 $or$cond5 = $318 & $320;
 if ($or$cond5) {
  $321 = HEAP8[$r0flags>>0]|0;
  $322 = $321&255;
  $323 = $322 & 1;
  $324 = ($323|0)!=(0);
  if ($324) {
   $325 = ((($opnd)) + 20|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ((($326)) + 1|0);
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = ($329|0)==(0);
   if ($330) {
    _EmitWarn(2,165,$vararg_buffer21);
   }
  }
 }
 $331 = HEAP32[(612)>>2]|0;
 $p = $331;
 $332 = $p;
 (_strcpy($332,87258)|0);
 $333 = $p;
 $334 = ((($333)) + 6|0);
 $p = $334;
 $335 = $sym;
 $336 = ((($335)) + 16|0);
 $337 = HEAP32[$336>>2]|0;
 $338 = ($337|0)==(2);
 do {
  if ($338) {
   $339 = $sym;
   $340 = ((($339)) + 36|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ($341|0)!=(0|0);
   if ($342) {
    $343 = $p;
    $iatname = $343;
    $344 = $p;
    $345 = HEAP32[(368)>>2]|0;
    (_strcpy($344,$345)|0);
    $346 = $p;
    $347 = (_strlen($346)|0);
    $348 = $p;
    $349 = (($348) + ($347)|0);
    $p = $349;
    $350 = $sym;
    $351 = $p;
    $352 = (_Mangle($350,$351)|0);
    $353 = $p;
    $354 = (($353) + ($352)|0);
    $p = $354;
    $355 = $namepos;
    $356 = (($355) + 1)|0;
    $namepos = $356;
    $357 = $sym;
    $358 = ((($357)) + 24|0);
    $359 = HEAP16[$358>>1]|0;
    $360 = ($359&65535) >>> 3;
    $361 = $360 & 1;
    $362 = $361&255;
    $363 = $362&255;
    $364 = ($363|0)==(0);
    if ($364) {
     $365 = $sym;
     $366 = ((($365)) + 24|0);
     $367 = HEAP16[$366>>1]|0;
     $368 = $367 & -9;
     $369 = $368 | 8;
     HEAP16[$366>>1] = $369;
     $370 = $sym;
     $371 = ((($370)) + 36|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ((($372)) + 4|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = (($374) + 1)|0;
     HEAP32[$373>>2] = $375;
     $376 = $sym;
     $377 = ((($376)) + 48|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = ($378|0)!=(0);
     if ($379) {
      $380 = $sym;
      $381 = ((($380)) + 48|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = HEAP32[(516)>>2]|0;
      $384 = ($382|0)!=($383|0);
      if ($384) {
       $385 = $sym;
       $386 = ((($385)) + 48|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = (($387) + 190)|0;
       $389 = (($388) - 1)|0;
       $390 = $iatname;
       HEAP32[$vararg_buffer23>>2] = $389;
       $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
       HEAP32[$vararg_ptr26>>2] = $390;
       $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
       HEAP32[$vararg_ptr27>>2] = 184;
       $vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
       HEAP32[$vararg_ptr28>>2] = 351;
       _AddLineQueueX(87265,$vararg_buffer23);
       break;
      }
     }
     $391 = $iatname;
     HEAP32[$vararg_buffer29>>2] = $391;
     $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
     HEAP32[$vararg_ptr32>>2] = 184;
     $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
     HEAP32[$vararg_ptr33>>2] = 351;
     _AddLineQueueX(87289,$vararg_buffer29);
    }
   }
  }
 } while(0);
 $392 = $parmpos;
 $393 = $2;
 $394 = (($393) + ($392<<4)|0);
 $395 = ((($394)) + 12|0);
 $396 = HEAP32[$395>>2]|0;
 $397 = $namepos;
 $398 = $2;
 $399 = (($398) + ($397<<4)|0);
 $400 = ((($399)) + 12|0);
 $401 = HEAP32[$400>>2]|0;
 $402 = $396;
 $403 = $401;
 $404 = (($402) - ($403))|0;
 $size = $404;
 $405 = $p;
 $406 = $namepos;
 $407 = $2;
 $408 = (($407) + ($406<<4)|0);
 $409 = ((($408)) + 12|0);
 $410 = HEAP32[$409>>2]|0;
 $411 = $size;
 _memcpy(($405|0),($410|0),($411|0))|0;
 $412 = $p;
 $413 = $size;
 $414 = (($412) + ($413)|0);
 HEAP8[$414>>0] = 0;
 $415 = HEAP32[(612)>>2]|0;
 _AddLineQueue($415);
 $416 = $sym;
 $417 = ((($416)) + 48|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ($418|0)==(1);
 if ($419) {
  label = 81;
 } else {
  $420 = $sym;
  $421 = ((($420)) + 48|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($422|0)==(2);
  if ($423) {
   label = 81;
  } else {
   label = 86;
  }
 }
 do {
  if ((label|0) == 81) {
   $424 = $info;
   $425 = ((($424)) + 16|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = ($426|0)!=(0);
   if (!($427)) {
    $428 = $info;
    $429 = ((($428)) + 40|0);
    $430 = HEAP8[$429>>0]|0;
    $431 = $430 & 1;
    $432 = $431&255;
    $433 = ($432|0)!=(0);
    $434 = HEAP32[13408>>2]|0;
    $435 = ($434|0)!=(0);
    $or$cond7 = $433 & $435;
    if (!($or$cond7)) {
     label = 86;
     break;
    }
   }
   $436 = $info;
   $437 = ((($436)) + 40|0);
   $438 = HEAP8[$437>>0]|0;
   $439 = $438 & 1;
   $440 = ($439<<24>>24)!=(0);
   $441 = HEAP8[(556)>>0]|0;
   $442 = $441&255;
   $443 = (15472 + ($442<<2)|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = $info;
   $446 = ((($445)) + 16|0);
   $447 = HEAP32[$446>>2]|0;
   if ($440) {
    $448 = HEAP32[13408>>2]|0;
    $449 = (($447) + ($448))|0;
    HEAP32[$vararg_buffer34>>2] = $444;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $449;
    _AddLineQueueX(87310,$vararg_buffer34);
    break;
   } else {
    HEAP32[$vararg_buffer38>>2] = $444;
    $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
    HEAP32[$vararg_ptr41>>2] = $447;
    _AddLineQueueX(87310,$vararg_buffer38);
    break;
   }
  }
 } while(0);
 if ((label|0) == 86) {
  $450 = $sym;
  $451 = ((($450)) + 48|0);
  $452 = HEAP32[$451>>2]|0;
  $453 = ($452|0)==(7);
  if ($453) {
   $454 = HEAP32[(528)>>2]|0;
   $455 = (13372 + (($454*12)|0)|0);
   $456 = ((($455)) + 4|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $proc;
   $459 = $numParam;
   $460 = HEAP32[$value>>2]|0;
   FUNCTION_TABLE_viii[$457 & 255]($458,$459,$460);
  }
 }
 $461 = (_GetCurrOffset()|0);
 _LstWrite(4,$461,0);
 _RunLineQueue();
 $0 = 0;
 $462 = $0;
 STACKTOP = sp;return ($462|0);
}
function _PushInvokeParam($i,$tokenarray,$proc,$curr,$reqParam,$r0flags) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $proc = $proc|0;
 $curr = $curr|0;
 $reqParam = $reqParam|0;
 $r0flags = $r0flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $Ofssize = 0, $addr = 0, $asize = 0, $asize2 = 0, $buffer = 0, $currParm = 0, $dw = 0, $fptrsize = 0, $fullparam = 0, $instr = 0, $j = 0, $opnd = 0, $optype = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $psize = 0, $pushsize = 0, $qual = 0, $reg = 0, $sreg = 0, $suffix = 0, $vararg_buffer = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0;
 var $vararg_buffer108 = 0, $vararg_buffer111 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer126 = 0, $vararg_buffer129 = 0, $vararg_buffer131 = 0, $vararg_buffer134 = 0, $vararg_buffer137 = 0, $vararg_buffer142 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer152 = 0, $vararg_buffer155 = 0, $vararg_buffer159 = 0, $vararg_buffer161 = 0, $vararg_buffer164 = 0, $vararg_buffer167 = 0, $vararg_buffer170 = 0;
 var $vararg_buffer174 = 0, $vararg_buffer177 = 0, $vararg_buffer179 = 0, $vararg_buffer182 = 0, $vararg_buffer185 = 0, $vararg_buffer187 = 0, $vararg_buffer189 = 0, $vararg_buffer192 = 0, $vararg_buffer196 = 0, $vararg_buffer200 = 0, $vararg_buffer204 = 0, $vararg_buffer208 = 0, $vararg_buffer211 = 0, $vararg_buffer214 = 0, $vararg_buffer218 = 0, $vararg_buffer22 = 0, $vararg_buffer220 = 0, $vararg_buffer224 = 0, $vararg_buffer227 = 0, $vararg_buffer232 = 0;
 var $vararg_buffer236 = 0, $vararg_buffer239 = 0, $vararg_buffer242 = 0, $vararg_buffer245 = 0, $vararg_buffer249 = 0, $vararg_buffer25 = 0, $vararg_buffer253 = 0, $vararg_buffer257 = 0, $vararg_buffer262 = 0, $vararg_buffer265 = 0, $vararg_buffer270 = 0, $vararg_buffer273 = 0, $vararg_buffer276 = 0, $vararg_buffer280 = 0, $vararg_buffer284 = 0, $vararg_buffer288 = 0, $vararg_buffer29 = 0, $vararg_buffer291 = 0, $vararg_buffer296 = 0, $vararg_buffer32 = 0;
 var $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer75 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_ptr100 = 0;
 var $vararg_ptr107 = 0, $vararg_ptr114 = 0, $vararg_ptr124 = 0, $vararg_ptr125 = 0, $vararg_ptr140 = 0, $vararg_ptr141 = 0, $vararg_ptr151 = 0, $vararg_ptr158 = 0, $vararg_ptr173 = 0, $vararg_ptr195 = 0, $vararg_ptr199 = 0, $vararg_ptr203 = 0, $vararg_ptr207 = 0, $vararg_ptr217 = 0, $vararg_ptr223 = 0, $vararg_ptr230 = 0, $vararg_ptr231 = 0, $vararg_ptr235 = 0, $vararg_ptr248 = 0, $vararg_ptr252 = 0;
 var $vararg_ptr256 = 0, $vararg_ptr260 = 0, $vararg_ptr261 = 0, $vararg_ptr268 = 0, $vararg_ptr269 = 0, $vararg_ptr279 = 0, $vararg_ptr28 = 0, $vararg_ptr283 = 0, $vararg_ptr287 = 0, $vararg_ptr294 = 0, $vararg_ptr295 = 0, $vararg_ptr299 = 0, $vararg_ptr41 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0, $vararg_ptr74 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr86 = 0;
 var $vararg_ptr93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer296 = sp + 776|0;
 $vararg_buffer291 = sp + 760|0;
 $vararg_buffer288 = sp + 752|0;
 $vararg_buffer284 = sp + 744|0;
 $vararg_buffer280 = sp + 736|0;
 $vararg_buffer276 = sp + 728|0;
 $vararg_buffer273 = sp + 720|0;
 $vararg_buffer270 = sp + 712|0;
 $vararg_buffer265 = sp + 696|0;
 $vararg_buffer262 = sp + 688|0;
 $vararg_buffer257 = sp + 672|0;
 $vararg_buffer253 = sp + 664|0;
 $vararg_buffer249 = sp + 656|0;
 $vararg_buffer245 = sp + 648|0;
 $vararg_buffer242 = sp + 640|0;
 $vararg_buffer239 = sp + 632|0;
 $vararg_buffer236 = sp + 624|0;
 $vararg_buffer232 = sp + 616|0;
 $vararg_buffer227 = sp + 600|0;
 $vararg_buffer224 = sp + 592|0;
 $vararg_buffer220 = sp + 584|0;
 $vararg_buffer218 = sp + 576|0;
 $vararg_buffer214 = sp + 568|0;
 $vararg_buffer211 = sp + 560|0;
 $vararg_buffer208 = sp + 552|0;
 $vararg_buffer204 = sp + 544|0;
 $vararg_buffer200 = sp + 536|0;
 $vararg_buffer196 = sp + 528|0;
 $vararg_buffer192 = sp + 520|0;
 $vararg_buffer189 = sp + 512|0;
 $vararg_buffer187 = sp + 504|0;
 $vararg_buffer185 = sp + 496|0;
 $vararg_buffer182 = sp + 488|0;
 $vararg_buffer179 = sp + 480|0;
 $vararg_buffer177 = sp + 472|0;
 $vararg_buffer174 = sp + 464|0;
 $vararg_buffer170 = sp + 456|0;
 $vararg_buffer167 = sp + 448|0;
 $vararg_buffer164 = sp + 440|0;
 $vararg_buffer161 = sp + 432|0;
 $vararg_buffer159 = sp + 424|0;
 $vararg_buffer155 = sp + 416|0;
 $vararg_buffer152 = sp + 408|0;
 $vararg_buffer148 = sp + 400|0;
 $vararg_buffer145 = sp + 392|0;
 $vararg_buffer142 = sp + 384|0;
 $vararg_buffer137 = sp + 368|0;
 $vararg_buffer134 = sp + 360|0;
 $vararg_buffer131 = sp + 352|0;
 $vararg_buffer129 = sp + 344|0;
 $vararg_buffer126 = sp + 336|0;
 $vararg_buffer121 = sp + 320|0;
 $vararg_buffer118 = sp + 312|0;
 $vararg_buffer115 = sp + 304|0;
 $vararg_buffer111 = sp + 296|0;
 $vararg_buffer108 = sp + 288|0;
 $vararg_buffer104 = sp + 280|0;
 $vararg_buffer101 = sp + 272|0;
 $vararg_buffer97 = sp + 264|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer90 = sp + 248|0;
 $vararg_buffer87 = sp + 240|0;
 $vararg_buffer83 = sp + 232|0;
 $vararg_buffer80 = sp + 224|0;
 $vararg_buffer75 = sp + 208|0;
 $vararg_buffer71 = sp + 200|0;
 $vararg_buffer68 = sp + 192|0;
 $vararg_buffer66 = sp + 184|0;
 $vararg_buffer63 = sp + 176|0;
 $vararg_buffer60 = sp + 168|0;
 $vararg_buffer57 = sp + 160|0;
 $vararg_buffer53 = sp + 152|0;
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer45 = sp + 136|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer38 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $j = sp + 812|0;
 $opnd = sp;
 $fullparam = sp + 1464|0;
 $buffer = sp + 864|0;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $proc;
 $4 = $curr;
 $5 = $reqParam;
 $6 = $r0flags;
 $addr = 0;
 $currParm = 0;
 while(1) {
  $7 = $currParm;
  $8 = $5;
  $9 = ($7|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $2;
  $12 = (($11) + ($10<<4)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $1;
  $17 = $2;
  $18 = (($17) + ($16<<4)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)==(44);
  if ($21) {
   $22 = $currParm;
   $23 = (($22) + 1)|0;
   $currParm = $23;
  }
  $24 = $1;
  $25 = (($24) + 1)|0;
  $1 = $25;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $1226 = $0;
  STACKTOP = sp;return ($1226|0);
 }
 $26 = $4;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $0 = 0;
  $1226 = $0;
  STACKTOP = sp;return ($1226|0);
 }
 $28 = $4;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $psize = $30;
 $31 = $1;
 $32 = $2;
 $33 = (($32) + ($31<<4)|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)==(7);
 if ($36) {
  $37 = $1;
  $38 = $2;
  $39 = (($38) + ($37<<4)|0);
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(186);
  if ($42) {
   $addr = 1;
   $43 = $1;
   $44 = (($43) + 1)|0;
   $1 = $44;
  }
 }
 $45 = $1;
 HEAP32[$j>>2] = $45;
 while(1) {
  $46 = HEAP32[$j>>2]|0;
  $47 = $2;
  $48 = (($47) + ($46<<4)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)!=(44);
  if (!($51)) {
   break;
  }
  $52 = HEAP32[$j>>2]|0;
  $53 = $2;
  $54 = (($53) + ($52<<4)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = HEAP32[$j>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$j>>2] = $59;
 }
 $60 = $1;
 $61 = $2;
 $62 = (($61) + ($60<<4)|0);
 $63 = ((($62)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$j>>2]|0;
 $66 = $2;
 $67 = (($66) + ($65<<4)|0);
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $1;
 $71 = $2;
 $72 = (($71) + ($70<<4)|0);
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $69;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 _memcpy(($fullparam|0),($64|0),($77|0))|0;
 $78 = HEAP32[$j>>2]|0;
 $79 = $2;
 $80 = (($79) + ($78<<4)|0);
 $81 = ((($80)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $1;
 $84 = $2;
 $85 = (($84) + ($83<<4)|0);
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $82;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($fullparam) + ($90)|0);
 HEAP8[$91>>0] = 0;
 $92 = $1;
 HEAP32[$j>>2] = $92;
 $93 = $3;
 $94 = ((($93)) + 16|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)==(7);
 $97 = $3;
 if ($96) {
  $98 = ((($97)) + 28|0);
  $99 = ((($98)) + 3|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100 & 3;
  $102 = $101&255;
  $105 = $102;
 } else {
  $103 = (_GetSymOfssize($97)|0);
  $105 = $103;
 }
 $104 = $105&255;
 $Ofssize = $104;
 $106 = $Ofssize;
 $107 = $106 << 24 >> 24;
 $108 = 2 << $107;
 $109 = (2 + ($108))|0;
 $fptrsize = $109;
 $110 = $addr;
 $111 = ($110<<24>>24)!=(0);
 L29: do {
  if ($111) {
   $112 = $2;
   $113 = HEAP32[(616)>>2]|0;
   $114 = HEAP8[(578)>>0]|0;
   $115 = (_EvalOperand($j,$112,$113,$opnd,$114)|0);
   $116 = ($115|0)==(-1);
   if ($116) {
    $0 = -1;
    $1226 = $0;
    STACKTOP = sp;return ($1226|0);
   }
   $117 = $psize;
   $118 = $fptrsize;
   $119 = ($117|0)>($118|0);
   $120 = $fptrsize;
   $121 = ($120|0)>(4);
   $or$cond = $119 & $121;
   if ($or$cond) {
    $122 = $5;
    $123 = (($122) + 1)|0;
    HEAP32[$vararg_buffer>>2] = $123;
    (_EmitErr(145,$vararg_buffer)|0);
    $0 = 0;
    $1226 = $0;
    STACKTOP = sp;return ($1226|0);
   }
   $124 = $3;
   $125 = ((($124)) + 48|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)==(7);
   if ($127) {
    $128 = HEAP32[(528)>>2]|0;
    $129 = (13372 + (($128*12)|0)|0);
    $130 = ((($129)) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $3;
    $133 = $5;
    $134 = $4;
    $135 = $addr;
    $136 = $6;
    $137 = (FUNCTION_TABLE_iiiiiiii[$131 & 127]($132,$133,$134,$135,$opnd,$fullparam,$136)|0);
    $138 = ($137|0)!=(0);
    if ($138) {
     $0 = 0;
     $1226 = $0;
     STACKTOP = sp;return ($1226|0);
    }
   }
   $139 = ((($opnd)) + 40|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)==(2);
   if (!($141)) {
    $142 = ((($opnd)) + 52|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143 & 1;
    $145 = $144&255;
    $146 = ($145|0)!=(0);
    if (!($146)) {
     label = 40;
     break;
    }
   }
   $147 = $4;
   $148 = ((($147)) + 28|0);
   $149 = ((($148)) + 3|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = ($150&255) >>> 4;
   $152 = $151 & 1;
   $153 = $152&255;
   $154 = ($153|0)!=(0);
   if ($154) {
    label = 32;
   } else {
    $155 = $psize;
    $156 = $fptrsize;
    $157 = ($155|0)==($156|0);
    if ($157) {
     label = 32;
    }
   }
   if ((label|0) == 32) {
    $158 = ((($opnd)) + 56|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)!=(0|0);
    if ($160) {
     $161 = ((($opnd)) + 56|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ((($162)) + 16|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)==(5);
     if ($165) {
      (_GetResWName(27,$buffer)|0);
     } else {
      label = 35;
     }
    } else {
     label = 35;
    }
    do {
     if ((label|0) == 35) {
      $166 = ((($opnd)) + 32|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)!=(0|0);
      if ($168) {
       $169 = ((($opnd)) + 32|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ((($170)) + 4|0);
       $172 = HEAP32[$171>>2]|0;
       (_strcpy($buffer,$172)|0);
       break;
      } else {
       (_GetResWName(28,$buffer)|0);
       break;
      }
     }
    } while(0);
    HEAP32[$vararg_buffer22>>2] = $buffer;
    _AddLineQueueX(87322,$vararg_buffer22);
   }
   $173 = HEAP8[(556)>>0]|0;
   $174 = $173&255;
   $175 = (13412 + ($174<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $176;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $fullparam;
   _AddLineQueueX(87331,$vararg_buffer25);
   $177 = $6;
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $179 | 1;
   $181 = $180&255;
   HEAP8[$177>>0] = $181;
   $182 = HEAP8[(556)>>0]|0;
   $183 = $182&255;
   $184 = (13412 + ($183<<2)|0);
   $185 = HEAP32[$184>>2]|0;
   HEAP32[$vararg_buffer29>>2] = $185;
   _AddLineQueueX(87343,$vararg_buffer29);
   label = 69;
  } else {
   $323 = HEAP32[$j>>2]|0;
   $324 = $2;
   $325 = (($324) + ($323<<4)|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = ($327|0)==(2);
   if ($328) {
    $329 = HEAP32[$j>>2]|0;
    $330 = (($329) + 1)|0;
    $331 = $2;
    $332 = (($331) + ($330<<4)|0);
    $333 = HEAP8[$332>>0]|0;
    $334 = $333&255;
    $335 = ($334|0)==(13);
    if ($335) {
     $336 = HEAP32[$j>>2]|0;
     $337 = (($336) + 2)|0;
     $338 = $2;
     $339 = (($338) + ($337<<4)|0);
     $340 = HEAP8[$339>>0]|0;
     $341 = $340&255;
     $342 = ($341|0)==(2);
     if ($342) {
      $343 = HEAP32[$j>>2]|0;
      $344 = $2;
      $345 = (($344) + ($343<<4)|0);
      $346 = ((($345)) + 8|0);
      $347 = HEAP32[$346>>2]|0;
      $348 = (15660 + (($347*12)|0)|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = $349 & 6144;
      $351 = ($350|0)!=(0);
      do {
       if ($351) {
        $asize2 = 2;
        $352 = $Ofssize;
        $353 = $352 << 24 >> 24;
        $354 = HEAP8[(556)>>0]|0;
        $355 = $354&255;
        $356 = ($353|0)!=($355|0);
        if (!($356)) {
         $357 = $4;
         $358 = ((($357)) + 28|0);
         $359 = HEAP8[$358>>0]|0;
         $360 = $359&255;
         $361 = ($360|0)==(0);
         if (!($361)) {
          break;
         }
         $362 = HEAP8[(558)>>0]|0;
         $363 = $362&255;
         $364 = ($363|0)>(2);
         if (!($364)) {
          break;
         }
        }
        _AddLineQueue(87352);
       } else {
        $365 = HEAP32[$j>>2]|0;
        $366 = $2;
        $367 = (($366) + ($365<<4)|0);
        $368 = ((($367)) + 8|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = (_SizeFromRegister($369)|0);
        $asize2 = $370;
       }
      } while(0);
      $371 = HEAP32[$j>>2]|0;
      $372 = (($371) + 2)|0;
      $373 = $2;
      $374 = (($373) + ($372<<4)|0);
      $375 = ((($374)) + 8|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (_SizeFromRegister($376)|0);
      $asize = $377;
      $378 = HEAP32[$j>>2]|0;
      $379 = $2;
      $380 = (($379) + ($378<<4)|0);
      $381 = ((($380)) + 8|0);
      $382 = HEAP32[$381>>2]|0;
      HEAP32[$vararg_buffer57>>2] = $382;
      _AddLineQueueX(87343,$vararg_buffer57);
      $383 = $4;
      $384 = ((($383)) + 28|0);
      $385 = ((($384)) + 3|0);
      $386 = HEAP8[$385>>0]|0;
      $387 = ($386&255) >>> 5;
      $388 = $387 & 1;
      $389 = $388&255;
      $390 = ($389|0)!=(0);
      if ($390) {
       $391 = $asize;
       $392 = $asize2;
       $393 = (($391) + ($392))|0;
       $394 = HEAP8[(558)>>0]|0;
       $395 = $394&255;
       $396 = ($393|0)!=($395|0);
       if ($396) {
        $397 = $asize2;
        $398 = HEAP32[13408>>2]|0;
        $399 = (($398) + ($397))|0;
        HEAP32[13408>>2] = $399;
       } else {
        label = 83;
       }
      } else {
       label = 83;
      }
      if ((label|0) == 83) {
       $400 = $asize2;
       $401 = $asize;
       $402 = (($401) + ($400))|0;
       $asize = $402;
      }
      $403 = HEAP32[$j>>2]|0;
      $404 = (($403) + 2)|0;
      $405 = $2;
      $406 = (($405) + ($404<<4)|0);
      $407 = ((($406)) + 4|0);
      $408 = HEAP32[$407>>2]|0;
      (_strcpy($fullparam,$408)|0);
      $409 = ((($opnd)) + 40|0);
      HEAP32[$409>>2] = 2;
      $410 = ((($opnd)) + 52|0);
      $411 = HEAP8[$410>>0]|0;
      $412 = $411 & -2;
      HEAP8[$410>>0] = $412;
      $413 = ((($opnd)) + 56|0);
      HEAP32[$413>>2] = 0;
      $414 = HEAP32[$j>>2]|0;
      $415 = (($414) + 2)|0;
      $416 = $2;
      $417 = (($416) + ($415<<4)|0);
      $418 = ((($opnd)) + 20|0);
      HEAP32[$418>>2] = $417;
     } else {
      label = 85;
     }
    } else {
     label = 85;
    }
   } else {
    label = 85;
   }
   do {
    if ((label|0) == 85) {
     $419 = $2;
     $420 = HEAP32[(616)>>2]|0;
     $421 = HEAP8[(578)>>0]|0;
     $422 = (_EvalOperand($j,$419,$420,$opnd,$421)|0);
     $423 = ($422|0)==(-1);
     if ($423) {
      $0 = -1;
      $1226 = $0;
      STACKTOP = sp;return ($1226|0);
     }
     $424 = ((($opnd)) + 40|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = ($425|0)==(2);
     if ($426) {
      $427 = ((($opnd)) + 52|0);
      $428 = HEAP8[$427>>0]|0;
      $429 = $428 & 1;
      $430 = $429&255;
      $431 = ($430|0)==(0);
      if ($431) {
       $432 = ((($opnd)) + 20|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = ((($433)) + 8|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = (_SizeFromRegister($435)|0);
       $asize = $436;
       break;
      }
     }
     $437 = ((($opnd)) + 40|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($438|0)==(0);
     if (!($439)) {
      $440 = ((($opnd)) + 44|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = ($441|0)==(192);
      if (!($442)) {
       $476 = ((($opnd)) + 44|0);
       $477 = HEAP32[$476>>2]|0;
       $478 = ($477|0)!=(196);
       if (!($478)) {
        $513 = ((($opnd)) + 56|0);
        $514 = HEAP32[$513>>2]|0;
        $515 = ($514|0)!=(0|0);
        if ($515) {
         $516 = ((($opnd)) + 56|0);
         $517 = HEAP32[$516>>2]|0;
         $518 = ((($517)) + 52|0);
         $519 = HEAP32[$518>>2]|0;
         $520 = ((($519)) + 36|0);
         $521 = HEAP32[$520>>2]|0;
         $asize = $521;
         break;
        } else {
         $522 = ((($opnd)) + 60|0);
         $523 = HEAP32[$522>>2]|0;
         $524 = ((($523)) + 52|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ((($525)) + 36|0);
         $527 = HEAP32[$526>>2]|0;
         $asize = $527;
         break;
        }
       }
       $479 = ((($opnd)) + 40|0);
       $480 = HEAP32[$479>>2]|0;
       $481 = ($480|0)==(1);
       if ($481) {
        $482 = ((($opnd)) + 52|0);
        $483 = HEAP8[$482>>0]|0;
        $484 = $483 & 1;
        $485 = $484&255;
        $486 = ($485|0)==(0);
        if ($486) {
         $487 = ((($opnd)) + 56|0);
         $488 = HEAP32[$487>>2]|0;
         $489 = ($488|0)!=(0|0);
         if ($489) {
          $490 = ((($opnd)) + 36|0);
          $491 = HEAP32[$490>>2]|0;
          $492 = ($491|0)==(-2);
          if ($492) {
           $493 = ((($opnd)) + 44|0);
           $494 = HEAP32[$493>>2]|0;
           $495 = ($494|0)==(129);
           if ($495) {
            label = 40;
            break L29;
           }
           $496 = ((($opnd)) + 44|0);
           $497 = HEAP32[$496>>2]|0;
           $498 = ($497|0)==(130);
           if ($498) {
            label = 40;
            break L29;
           }
          }
         }
        }
       }
       $499 = ((($opnd)) + 49|0);
       $500 = HEAP8[$499>>0]|0;
       $501 = $500&255;
       $502 = ($501|0)==(254);
       if ($502) {
        $503 = HEAP8[(556)>>0]|0;
        $504 = ((($opnd)) + 49|0);
        HEAP8[$504>>0] = $503;
       }
       $505 = ((($opnd)) + 44|0);
       $506 = HEAP32[$505>>2]|0;
       $507 = ((($opnd)) + 49|0);
       $508 = HEAP8[$507>>0]|0;
       $509 = $508&255;
       $510 = ((($opnd)) + 64|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (_SizeFromMemtype($506,$509,$511)|0);
       $asize = $512;
       break;
      }
     }
     $443 = $psize;
     $asize = $443;
     $444 = $psize;
     $445 = ($444|0)==(0);
     if ($445) {
      $446 = $4;
      $447 = ((($446)) + 28|0);
      $448 = ((($447)) + 3|0);
      $449 = HEAP8[$448>>0]|0;
      $450 = ($449&255) >>> 5;
      $451 = $450 & 1;
      $452 = $451&255;
      $453 = ($452|0)==(0);
      if ($453) {
       $454 = $5;
       $455 = (($454) + 1)|0;
       HEAP32[$vararg_buffer60>>2] = $455;
       (_EmitErr(145,$vararg_buffer60)|0);
      }
      $456 = ((($opnd)) + 60|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = ($457|0)!=(0|0);
      if ($458) {
       $459 = ((($opnd)) + 60|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = ((($460)) + 20|0);
       $462 = HEAP32[$461>>2]|0;
       $463 = ($462|0)==(196);
       if ($463) {
        $464 = ((($opnd)) + 60|0);
        $465 = HEAP32[$464>>2]|0;
        $466 = ((($465)) + 20|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = ((($opnd)) + 49|0);
        $469 = HEAP8[$468>>0]|0;
        $470 = $469&255;
        $471 = ((($opnd)) + 60|0);
        $472 = HEAP32[$471>>2]|0;
        $473 = ((($472)) + 52|0);
        $474 = HEAP32[$473>>2]|0;
        $475 = (_SizeFromMemtype($467,$470,$474)|0);
        $asize = $475;
       }
      }
     }
    }
   } while(0);
   $528 = $4;
   $529 = ((($528)) + 28|0);
   $530 = ((($529)) + 3|0);
   $531 = HEAP8[$530>>0]|0;
   $532 = ($531&255) >>> 5;
   $533 = $532 & 1;
   $534 = $533&255;
   $535 = ($534|0)==(1);
   if ($535) {
    $536 = $asize;
    $psize = $536;
   }
   $537 = HEAP8[(558)>>0]|0;
   $538 = $537&255;
   $pushsize = $538;
   $539 = $3;
   $540 = ((($539)) + 48|0);
   $541 = HEAP32[$540>>2]|0;
   $542 = ($541|0)==(7);
   if ($542) {
    $543 = HEAP32[(528)>>2]|0;
    $544 = (13372 + (($543*12)|0)|0);
    $545 = ((($544)) + 8|0);
    $546 = HEAP32[$545>>2]|0;
    $547 = $3;
    $548 = $5;
    $549 = $4;
    $550 = $addr;
    $551 = $6;
    $552 = (FUNCTION_TABLE_iiiiiiii[$546 & 127]($547,$548,$549,$550,$opnd,$fullparam,$551)|0);
    $553 = ($552|0)!=(0);
    if ($553) {
     $0 = 0;
     $1226 = $0;
     STACKTOP = sp;return ($1226|0);
    }
   }
   $554 = $asize;
   $555 = $psize;
   $556 = ($554|0)>($555|0);
   do {
    if (!($556)) {
     $557 = $asize;
     $558 = $psize;
     $559 = ($557|0)<($558|0);
     if ($559) {
      $560 = $4;
      $561 = ((($560)) + 20|0);
      $562 = HEAP32[$561>>2]|0;
      $563 = ($562|0)==(195);
      if ($563) {
       break;
      }
     }
     $566 = ((($opnd)) + 40|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = ($567|0)==(1);
     if ($568) {
      $569 = ((($opnd)) + 36|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)!=(167);
      if (!($571)) {
       label = 122;
      }
     } else {
      label = 122;
     }
     do {
      if ((label|0) == 122) {
       $572 = ((($opnd)) + 40|0);
       $573 = HEAP32[$572>>2]|0;
       $574 = ($573|0)==(2);
       if ($574) {
        $575 = ((($opnd)) + 52|0);
        $576 = HEAP8[$575>>0]|0;
        $577 = $576 & 1;
        $578 = $577&255;
        $579 = ($578|0)==(1);
        if ($579) {
         break;
        }
       }
       $808 = ((($opnd)) + 40|0);
       $809 = HEAP32[$808>>2]|0;
       $810 = ($809|0)==(2);
       do {
        if ($810) {
         $811 = ((($opnd)) + 20|0);
         $812 = HEAP32[$811>>2]|0;
         $813 = ((($812)) + 8|0);
         $814 = HEAP32[$813>>2]|0;
         $reg = $814;
         $815 = $reg;
         $816 = (15660 + (($815*12)|0)|0);
         $817 = HEAP32[$816>>2]|0;
         $optype = $817;
         $818 = $4;
         $819 = ((($818)) + 28|0);
         $820 = ((($819)) + 3|0);
         $821 = HEAP8[$820>>0]|0;
         $822 = ($821&255) >>> 5;
         $823 = $822 & 1;
         $824 = $823&255;
         $825 = ($824|0)==(1);
         if ($825) {
          $826 = $psize;
          $827 = $pushsize;
          $828 = ($826|0)<($827|0);
          if ($828) {
           $829 = $pushsize;
           $psize = $829;
          }
         }
         $830 = $optype;
         $831 = $830 & 25712;
         $832 = ($831|0)!=(0);
         if ($832) {
          $833 = $5;
          $834 = (($833) + 1)|0;
          HEAP32[$vararg_buffer182>>2] = $834;
          $835 = (_EmitErr(145,$vararg_buffer182)|0);
          $0 = $835;
          $1226 = $0;
          STACKTOP = sp;return ($1226|0);
         }
         $836 = $6;
         $837 = HEAP8[$836>>0]|0;
         $838 = $837&255;
         $839 = $838 & 1;
         $840 = ($839|0)!=(0);
         do {
          if ($840) {
           $841 = $reg;
           $842 = ($841|0)==(5);
           if (!($842)) {
            $843 = $optype;
            $844 = $843 & 128;
            $845 = ($844|0)!=(0);
            if (!($845)) {
             label = 204;
             break;
            }
           }
           (_EmitErr(165,$vararg_buffer185)|0);
           $846 = $6;
           $847 = HEAP8[$846>>0]|0;
           $848 = $847&255;
           $849 = $848 & -2;
           $850 = $849&255;
           HEAP8[$846>>0] = $850;
          } else {
           label = 204;
          }
         } while(0);
         do {
          if ((label|0) == 204) {
           $851 = $6;
           $852 = HEAP8[$851>>0]|0;
           $853 = $852&255;
           $854 = $853 & 8;
           $855 = ($854|0)!=(0);
           if (!($855)) {
            break;
           }
           $856 = $reg;
           $857 = ($856|0)==(7);
           if (!($857)) {
            $858 = $reg;
            $859 = (15660 + (($858*12)|0)|0);
            $860 = ((($859)) + 10|0);
            $861 = HEAP8[$860>>0]|0;
            $862 = $861&255;
            $863 = ($862|0)==(2);
            if (!($863)) {
             break;
            }
           }
           (_EmitErr(165,$vararg_buffer187)|0);
           $864 = $6;
           $865 = HEAP8[$864>>0]|0;
           $866 = $865&255;
           $867 = $866 & -9;
           $868 = $867&255;
           HEAP8[$864>>0] = $868;
          }
         } while(0);
         $869 = $asize;
         $870 = $psize;
         $871 = ($869|0)!=($870|0);
         if ($871) {
          label = 210;
         } else {
          $872 = $asize;
          $873 = $Ofssize;
          $874 = $873 << 24 >> 24;
          $875 = 2 << $874;
          $876 = ($872|0)<($875|0);
          if ($876) {
           label = 210;
          }
         }
         L161: do {
          if ((label|0) == 210) {
           $877 = $psize;
           $878 = ($877|0)>(4);
           if ($878) {
            $879 = $5;
            $880 = (($879) + 1)|0;
            HEAP32[$vararg_buffer189>>2] = $880;
            (_EmitErr(145,$vararg_buffer189)|0);
           }
           $881 = $asize;
           $882 = ($881|0)<=(2);
           L166: do {
            if ($882) {
             $883 = $psize;
             $884 = ($883|0)==(4);
             $885 = $pushsize;
             $886 = ($885|0)==(4);
             $or$cond13 = $884 | $886;
             if (!($or$cond13)) {
              break;
             }
             $887 = HEAP32[(544)>>2]|0;
             $888 = $887 & 240;
             $889 = ($888>>>0)>=(48);
             do {
              if ($889) {
               $890 = $asize;
               $891 = $psize;
               $892 = ($890|0)==($891|0);
               if (!($892)) {
                break;
               }
               $893 = $asize;
               $894 = ($893|0)==(2);
               $895 = $reg;
               if ($894) {
                $896 = (($895) - 9)|0;
                $897 = (($896) + 17)|0;
                $reg = $897;
                break L166;
               }
               $898 = ($895|0)<(5);
               if ($898) {
                $899 = $reg;
                $900 = (($899) - 1)|0;
                $901 = (($900) + 17)|0;
                $reg = $901;
               } else {
                HEAP32[$vararg_buffer192>>2] = 1;
                $vararg_ptr195 = ((($vararg_buffer192)) + 4|0);
                HEAP32[$vararg_ptr195>>2] = $fullparam;
                _AddLineQueueX(87482,$vararg_buffer192);
                $902 = $6;
                $903 = HEAP8[$902>>0]|0;
                $904 = $903&255;
                $905 = $904 | 1;
                $906 = $905&255;
                HEAP8[$902>>0] = $906;
                $reg = 17;
               }
               $asize = 2;
               break L166;
              }
             } while(0);
             $907 = ((($opnd)) + 44|0);
             $908 = HEAP32[$907>>2]|0;
             $909 = $908 & 192;
             $910 = ($909|0)==(64);
             $911 = $pushsize;
             $912 = ($911|0)<(4);
             $or$cond15 = $910 & $912;
             $913 = HEAP32[(544)>>2]|0;
             $914 = $913 & 240;
             if ($or$cond15) {
              $915 = ($914>>>0)>=(48);
              if ($915) {
               HEAP32[$vararg_buffer196>>2] = 17;
               $vararg_ptr199 = ((($vararg_buffer196)) + 4|0);
               HEAP32[$vararg_ptr199>>2] = $fullparam;
               _AddLineQueueX(87468,$vararg_buffer196);
               $916 = $6;
               HEAP8[$916>>0] = 1;
               $reg = 17;
              } else {
               $917 = $6;
               HEAP8[$917>>0] = 9;
               $918 = $asize;
               $919 = ($918|0)==(1);
               $920 = $reg;
               do {
                if ($919) {
                 $921 = ($920|0)!=(1);
                 if ($921) {
                  HEAP32[$vararg_buffer200>>2] = 1;
                  $vararg_ptr203 = ((($vararg_buffer200)) + 4|0);
                  HEAP32[$vararg_ptr203>>2] = $fullparam;
                  _AddLineQueueX(87482,$vararg_buffer200);
                 }
                 _AddLineQueue(87525);
                } else {
                 $922 = ($920|0)!=(9);
                 if (!($922)) {
                  break;
                 }
                 HEAP32[$vararg_buffer204>>2] = 9;
                 $vararg_ptr207 = ((($vararg_buffer204)) + 4|0);
                 HEAP32[$vararg_ptr207>>2] = $fullparam;
                 _AddLineQueueX(87482,$vararg_buffer204);
                }
               } while(0);
               _AddLineQueue(87530);
               HEAP32[$vararg_buffer208>>2] = 11;
               _AddLineQueueX(87343,$vararg_buffer208);
               $reg = 9;
              }
              $asize = 2;
              break;
             }
             $923 = ($914>>>0)>=(16);
             if (!($923)) {
              $939 = $6;
              $940 = HEAP8[$939>>0]|0;
              $941 = $940&255;
              $942 = $941 & 4;
              $943 = ($942|0)!=(0);
              if (!($943)) {
               $944 = $reg;
               $945 = ($944|0)==(5);
               if ($945) {
                label = 245;
               } else {
                $946 = $optype;
                $947 = $946 & 128;
                $948 = ($947|0)!=(0);
                if ($948) {
                 label = 245;
                }
               }
               if ((label|0) == 245) {
                (_EmitErr(165,$vararg_buffer218)|0);
               }
               HEAP32[$vararg_buffer220>>2] = 9;
               $vararg_ptr223 = ((($vararg_buffer220)) + 4|0);
               HEAP32[$vararg_ptr223>>2] = 9;
               _AddLineQueueX(87494,$vararg_buffer220);
              }
              HEAP32[$vararg_buffer224>>2] = 9;
              _AddLineQueueX(87343,$vararg_buffer224);
              $949 = $6;
              HEAP8[$949>>0] = 7;
              break;
             }
             $924 = $pushsize;
             $925 = ($924|0)==(4);
             if (!($925)) {
              _AddLineQueue(87554);
              break;
             }
             $926 = $asize;
             $927 = ($926|0)==(1);
             if ($927) {
              break;
             }
             $928 = $psize;
             $929 = ($928|0)<=(2);
             if ($929) {
              $930 = HEAP8[(556)>>0]|0;
              $931 = $930&255;
              $932 = (15472 + ($931<<2)|0);
              $933 = HEAP32[$932>>2]|0;
              HEAP32[$vararg_buffer211>>2] = $933;
              _AddLineQueueX(87417,$vararg_buffer211);
              break;
             }
             $934 = ((($opnd)) + 44|0);
             $935 = HEAP32[$934>>2]|0;
             $936 = $935 & 192;
             $937 = ($936|0)==(64);
             if ($937) {
              HEAP32[$vararg_buffer214>>2] = 17;
              $vararg_ptr217 = ((($vararg_buffer214)) + 4|0);
              HEAP32[$vararg_ptr217>>2] = $fullparam;
              _AddLineQueueX(87468,$vararg_buffer214);
              $938 = $6;
              HEAP8[$938>>0] = 1;
              $reg = 17;
              break;
             } else {
              _AddLineQueue(87554);
              break;
             }
            }
           } while(0);
           $950 = $asize;
           $951 = ($950|0)==(1);
           if (!($951)) {
            break;
           }
           $952 = $reg;
           $953 = ($952|0)>=(5);
           $954 = $reg;
           $955 = ($954|0)<=(8);
           $or$cond17 = $953 & $955;
           $956 = $psize;
           $957 = ($956|0)!=(1);
           $or$cond19 = $or$cond17 | $957;
           if (!($or$cond19)) {
            $1016 = HEAP32[(544)>>2]|0;
            $1017 = $1016 & 240;
            $1018 = ($1017>>>0)>=(48);
            do {
             if ($1018) {
              $1019 = $psize;
              $1020 = ($1019|0)==(4);
              $1021 = $pushsize;
              $1022 = ($1021|0)==(4);
              $or$cond21 = $1020 | $1022;
              if (!($or$cond21)) {
               break;
              }
              $1023 = $reg;
              $1024 = (($1023) - 1)|0;
              $1025 = (($1024) + 17)|0;
              $reg = $1025;
              break L161;
             }
            } while(0);
            $1026 = $reg;
            $1027 = (($1026) - 1)|0;
            $1028 = (($1027) + 9)|0;
            $reg = $1028;
            break;
           }
           $958 = $psize;
           $959 = ($958|0)!=(1);
           do {
            if ($959) {
             $960 = HEAP32[(544)>>2]|0;
             $961 = $960 & 240;
             $962 = ($961>>>0)>=(48);
             if (!($962)) {
              label = 253;
              break;
             }
             $963 = ((($opnd)) + 44|0);
             $964 = HEAP32[$963>>2]|0;
             $965 = $964 & 192;
             $966 = ($965|0)==(64);
             $967 = $966 ? 87537 : 87535;
             $968 = HEAP8[(556)>>0]|0;
             $969 = $968&255;
             $970 = (13412 + ($969<<2)|0);
             $971 = HEAP32[$970>>2]|0;
             HEAP32[$vararg_buffer227>>2] = $967;
             $vararg_ptr230 = ((($vararg_buffer227)) + 4|0);
             HEAP32[$vararg_ptr230>>2] = $971;
             $vararg_ptr231 = ((($vararg_buffer227)) + 8|0);
             HEAP32[$vararg_ptr231>>2] = $fullparam;
             _AddLineQueueX(87539,$vararg_buffer227);
             $972 = ((($opnd)) + 44|0);
             $973 = HEAP32[$972>>2]|0;
             $974 = $973 & 192;
             $975 = ($974|0)==(64);
             $976 = $975 ? 1 : 3;
             $977 = $976&255;
             $978 = $6;
             HEAP8[$978>>0] = $977;
            } else {
             label = 253;
            }
           } while(0);
           do {
            if ((label|0) == 253) {
             $979 = $reg;
             $980 = ($979|0)!=(1);
             if ($980) {
              HEAP32[$vararg_buffer232>>2] = 1;
              $vararg_ptr235 = ((($vararg_buffer232)) + 4|0);
              HEAP32[$vararg_ptr235>>2] = $fullparam;
              _AddLineQueueX(87482,$vararg_buffer232);
              $981 = $6;
              $982 = HEAP8[$981>>0]|0;
              $983 = $982&255;
              $984 = $983 | 1;
              $985 = $984&255;
              HEAP8[$981>>0] = $985;
              $986 = $6;
              $987 = HEAP8[$986>>0]|0;
              $988 = $987&255;
              $989 = $988 & -5;
              $990 = $989&255;
              HEAP8[$986>>0] = $990;
             }
             $991 = $psize;
             $992 = ($991|0)!=(1);
             if (!($992)) {
              break;
             }
             $993 = ((($opnd)) + 44|0);
             $994 = HEAP32[$993>>2]|0;
             $995 = $994 & 192;
             $996 = ($995|0)==(64);
             if ($996) {
              _AddLineQueue(87525);
              $997 = $6;
              $998 = HEAP8[$997>>0]|0;
              $999 = $998&255;
              $1000 = $999 & -7;
              $1001 = $1000&255;
              HEAP8[$997>>0] = $1001;
              break;
             }
             $1002 = $6;
             $1003 = HEAP8[$1002>>0]|0;
             $1004 = $1003&255;
             $1005 = $1004 & 2;
             $1006 = ($1005|0)!=(0);
             if ($1006) {
              break;
             }
             HEAP32[$vararg_buffer236>>2] = 5;
             _AddLineQueueX(87514,$vararg_buffer236);
             $1007 = $6;
             $1008 = HEAP8[$1007>>0]|0;
             $1009 = $1008&255;
             $1010 = $1009 | 2;
             $1011 = $1010&255;
             HEAP8[$1007>>0] = $1011;
            }
           } while(0);
           $1012 = HEAP8[(556)>>0]|0;
           $1013 = $1012&255;
           $1014 = (13412 + ($1013<<2)|0);
           $1015 = HEAP32[$1014>>2]|0;
           $reg = $1015;
          }
         } while(0);
         $1029 = $reg;
         HEAP32[$vararg_buffer239>>2] = $1029;
         _AddLineQueueX(87343,$vararg_buffer239);
         $1030 = $psize;
         $1031 = $pushsize;
         $1032 = ($1030|0)<($1031|0);
         if (!($1032)) {
          break;
         }
         $1033 = $pushsize;
         $psize = $1033;
        } else {
         $1034 = $psize;
         $1035 = ($1034|0)!=(0);
         if ($1035) {
          $1036 = ((($opnd)) + 40|0);
          $1037 = HEAP32[$1036>>2]|0;
          $1038 = ($1037|0)==(3);
          L244: do {
           if ($1038) {
            $asize = 4;
           } else {
            $1039 = $opnd;
            $1040 = $1039;
            $1041 = HEAP32[$1040>>2]|0;
            $1042 = (($1039) + 4)|0;
            $1043 = $1042;
            $1044 = HEAP32[$1043>>2]|0;
            $1045 = ($1044|0)<(0);
            $1046 = ($1041>>>0)<=(255);
            $1047 = ($1044|0)==(0);
            $1048 = $1047 & $1046;
            $1049 = $1045 | $1048;
            do {
             if ($1049) {
              $1050 = $opnd;
              $1051 = $1050;
              $1052 = HEAP32[$1051>>2]|0;
              $1053 = (($1050) + 4)|0;
              $1054 = $1053;
              $1055 = HEAP32[$1054>>2]|0;
              $1056 = ($1055|0)>(-1);
              $1057 = ($1052>>>0)>=(4294967041);
              $1058 = ($1055|0)==(-1);
              $1059 = $1058 & $1057;
              $1060 = $1056 | $1059;
              if (!($1060)) {
               break;
              }
              $asize = 1;
              break L244;
             }
            } while(0);
            $1061 = $opnd;
            $1062 = $1061;
            $1063 = HEAP32[$1062>>2]|0;
            $1064 = (($1061) + 4)|0;
            $1065 = $1064;
            $1066 = HEAP32[$1065>>2]|0;
            $1067 = ($1066|0)<(0);
            $1068 = ($1063>>>0)<=(65535);
            $1069 = ($1066|0)==(0);
            $1070 = $1069 & $1068;
            $1071 = $1067 | $1070;
            do {
             if ($1071) {
              $1072 = $opnd;
              $1073 = $1072;
              $1074 = HEAP32[$1073>>2]|0;
              $1075 = (($1072) + 4)|0;
              $1076 = $1075;
              $1077 = HEAP32[$1076>>2]|0;
              $1078 = ($1077|0)>(-1);
              $1079 = ($1074>>>0)>=(4294901761);
              $1080 = ($1077|0)==(-1);
              $1081 = $1080 & $1079;
              $1082 = $1078 | $1081;
              if (!($1082)) {
               break;
              }
              $asize = 2;
              break L244;
             }
            } while(0);
            $1083 = $opnd;
            $1084 = $1083;
            $1085 = HEAP32[$1084>>2]|0;
            $1086 = (($1083) + 4)|0;
            $1087 = $1086;
            $1088 = HEAP32[$1087>>2]|0;
            $1089 = 272;
            $1090 = $1089;
            $1091 = HEAP32[$1090>>2]|0;
            $1092 = (($1089) + 4)|0;
            $1093 = $1092;
            $1094 = HEAP32[$1093>>2]|0;
            $1095 = ($1088|0)<($1094|0);
            $1096 = ($1085>>>0)<=($1091>>>0);
            $1097 = ($1088|0)==($1094|0);
            $1098 = $1097 & $1096;
            $1099 = $1095 | $1098;
            do {
             if ($1099) {
              $1100 = $opnd;
              $1101 = $1100;
              $1102 = HEAP32[$1101>>2]|0;
              $1103 = (($1100) + 4)|0;
              $1104 = $1103;
              $1105 = HEAP32[$1104>>2]|0;
              $1106 = 296;
              $1107 = $1106;
              $1108 = HEAP32[$1107>>2]|0;
              $1109 = (($1106) + 4)|0;
              $1110 = $1109;
              $1111 = HEAP32[$1110>>2]|0;
              $1112 = ($1105|0)>($1111|0);
              $1113 = ($1102>>>0)>=($1108>>>0);
              $1114 = ($1105|0)==($1111|0);
              $1115 = $1114 & $1113;
              $1116 = $1112 | $1115;
              if (!($1116)) {
               break;
              }
              $asize = 4;
              break L244;
             }
            } while(0);
            $asize = 8;
           }
          } while(0);
          $1117 = $psize;
          $1118 = $asize;
          $1119 = ($1117|0)<($1118|0);
          if ($1119) {
           $1120 = $5;
           $1121 = (($1120) + 1)|0;
           HEAP32[$vararg_buffer242>>2] = $1121;
           (_EmitErr(145,$vararg_buffer242)|0);
          }
         }
         $1122 = $Ofssize;
         $1123 = $1122 << 24 >> 24;
         $1124 = 2 << $1123;
         $asize = $1124;
         $1125 = $psize;
         $1126 = $asize;
         $1127 = ($1125|0)<($1126|0);
         L262: do {
          if ($1127) {
           $1128 = $psize;
           $1129 = ($1128|0)==(0);
           do {
            if ($1129) {
             $1130 = $4;
             $1131 = ((($1130)) + 28|0);
             $1132 = ((($1131)) + 3|0);
             $1133 = HEAP8[$1132>>0]|0;
             $1134 = ($1133&255) >>> 5;
             $1135 = $1134 & 1;
             $1136 = $1135&255;
             $1137 = ($1136|0)!=(0);
             if (!($1137)) {
              break;
             }
             $1138 = $asize;
             $1139 = ($1138|0)==(2);
             do {
              if ($1139) {
               $1140 = HEAP32[$opnd>>2]|0;
               $1141 = ($1140|0)>(65535);
               if (!($1141)) {
                $1142 = HEAP32[$opnd>>2]|0;
                $1143 = ($1142|0)<(-65535);
                if (!($1143)) {
                 break;
                }
               }
               $psize = 4;
               break L262;
              }
             } while(0);
             $1144 = $asize;
             $psize = $1144;
             break L262;
            }
           } while(0);
           $1145 = $asize;
           $psize = $1145;
          }
         } while(0);
         $1146 = HEAP32[(544)>>2]|0;
         $1147 = $1146 & 240;
         $1148 = ($1147>>>0)<(16);
         if ($1148) {
          $1149 = $6;
          $1150 = HEAP8[$1149>>0]|0;
          $1151 = $1150&255;
          $1152 = $1151 | 1;
          $1153 = $1152&255;
          HEAP8[$1149>>0] = $1153;
          $1154 = $psize;
          L277: do {
           switch ($1154|0) {
           case 2:  {
            $1155 = HEAP32[$opnd>>2]|0;
            $1156 = ($1155|0)!=(0);
            do {
             if (!($1156)) {
              $1157 = ((($opnd)) + 40|0);
              $1158 = HEAP32[$1157>>2]|0;
              $1159 = ($1158|0)==(1);
              if ($1159) {
               break;
              }
              $1160 = $6;
              $1161 = HEAP8[$1160>>0]|0;
              $1162 = $1161&255;
              $1163 = $1162 & 4;
              $1164 = ($1163|0)!=(0);
              if (!($1164)) {
               HEAP32[$vararg_buffer249>>2] = 9;
               $vararg_ptr252 = ((($vararg_buffer249)) + 4|0);
               HEAP32[$vararg_ptr252>>2] = 9;
               _AddLineQueueX(87494,$vararg_buffer249);
              }
              $1165 = $6;
              $1166 = HEAP8[$1165>>0]|0;
              $1167 = $1166&255;
              $1168 = $1167 | 6;
              $1169 = $1168&255;
              HEAP8[$1165>>0] = $1169;
              break L277;
             }
            } while(0);
            HEAP32[$vararg_buffer245>>2] = 9;
            $vararg_ptr248 = ((($vararg_buffer245)) + 4|0);
            HEAP32[$vararg_ptr248>>2] = $fullparam;
            _AddLineQueueX(87482,$vararg_buffer245);
            break;
           }
           case 4:  {
            $1170 = HEAP32[$opnd>>2]|0;
            $1171 = ($1170>>>0)<=(65535);
            if ($1171) {
             HEAP32[$vararg_buffer253>>2] = 9;
             $vararg_ptr256 = ((($vararg_buffer253)) + 4|0);
             HEAP32[$vararg_ptr256>>2] = 9;
             _AddLineQueueX(87494,$vararg_buffer253);
            } else {
             HEAP32[$vararg_buffer257>>2] = 9;
             $vararg_ptr260 = ((($vararg_buffer257)) + 4|0);
             HEAP32[$vararg_ptr260>>2] = 158;
             $vararg_ptr261 = ((($vararg_buffer257)) + 8|0);
             HEAP32[$vararg_ptr261>>2] = $fullparam;
             _AddLineQueueX(87563,$vararg_buffer257);
            }
            HEAP32[$vararg_buffer262>>2] = 9;
            _AddLineQueueX(87343,$vararg_buffer262);
            $1172 = HEAP32[$opnd>>2]|0;
            $1173 = ($1172|0)!=(0);
            do {
             if (!($1173)) {
              $1174 = ((($opnd)) + 40|0);
              $1175 = HEAP32[$1174>>2]|0;
              $1176 = ($1175|0)==(1);
              if ($1176) {
               break;
              }
              $1177 = $6;
              $1178 = HEAP8[$1177>>0]|0;
              $1179 = $1178&255;
              $1180 = $1179 | 6;
              $1181 = $1180&255;
              HEAP8[$1177>>0] = $1181;
              break L277;
             }
            } while(0);
            HEAP32[$vararg_buffer265>>2] = 9;
            $vararg_ptr268 = ((($vararg_buffer265)) + 4|0);
            HEAP32[$vararg_ptr268>>2] = 164;
            $vararg_ptr269 = ((($vararg_buffer265)) + 8|0);
            HEAP32[$vararg_ptr269>>2] = $fullparam;
            _AddLineQueueX(87563,$vararg_buffer265);
            break;
           }
           default: {
            $1182 = $5;
            $1183 = (($1182) + 1)|0;
            HEAP32[$vararg_buffer270>>2] = $1183;
            (_EmitErr(145,$vararg_buffer270)|0);
           }
           }
          } while(0);
          HEAP32[$vararg_buffer273>>2] = 9;
          _AddLineQueueX(87343,$vararg_buffer273);
          break;
         }
         $instr = 109841;
         $qual = -2;
         $1184 = $psize;
         $1185 = $pushsize;
         $1186 = ($1184|0)!=($1185|0);
         L298: do {
          if ($1186) {
           $1187 = $psize;
           L300: do {
            switch ($1187|0) {
            case 2:  {
             $instr = 87580;
             break L298;
             break;
            }
            case 6:  {
             $1188 = $Ofssize;
             $1189 = $1188 << 24 >> 24;
             $1190 = ($1189|0)==(0);
             L303: do {
              if ($1190) {
               $suffix = 87580;
              } else {
               $1191 = $Ofssize;
               $1192 = $1191 << 24 >> 24;
               $1193 = ($1192|0)==(1);
               do {
                if ($1193) {
                 $1194 = HEAP8[(558)>>0]|0;
                 $1195 = $1194&255;
                 $1196 = ($1195|0)==(2);
                 if (!($1196)) {
                  break;
                 }
                 $suffix = 87582;
                 break L303;
                }
               } while(0);
               $suffix = 109841;
              }
             } while(0);
             $1197 = $suffix;
             HEAP32[$vararg_buffer276>>2] = $1197;
             $vararg_ptr279 = ((($vararg_buffer276)) + 4|0);
             HEAP32[$vararg_ptr279>>2] = $fullparam;
             _AddLineQueueX(87584,$vararg_buffer276);
             break;
            }
            case 4:  {
             break;
            }
            case 8:  {
             $1201 = HEAP32[(544)>>2]|0;
             $1202 = $1201 & 240;
             $1203 = ($1202>>>0)>=(112);
             if ($1203) {
              break L298;
             }
             $1204 = ((($opnd)) + 40|0);
             $1205 = HEAP32[$1204>>2]|0;
             $1206 = ($1205|0)==(0);
             if (!($1206)) {
              $1207 = ((($opnd)) + 40|0);
              $1208 = HEAP32[$1207>>2]|0;
              $1209 = ($1208|0)==(3);
              if (!($1209)) {
               label = 325;
               break L300;
              }
             }
             HEAP32[$vararg_buffer284>>2] = 157;
             $vararg_ptr287 = ((($vararg_buffer284)) + 4|0);
             HEAP32[$vararg_ptr287>>2] = $fullparam;
             _AddLineQueueX(87620,$vararg_buffer284);
             $qual = 163;
             $instr = 87582;
             break L298;
             break;
            }
            default: {
             label = 325;
            }
            }
           } while(0);
           if ((label|0) == 325) {
            $1210 = $5;
            $1211 = (($1210) + 1)|0;
            HEAP32[$vararg_buffer288>>2] = $1211;
            (_EmitErr(145,$vararg_buffer288)|0);
            break;
           }
           $1198 = HEAP32[(544)>>2]|0;
           $1199 = $1198 & 240;
           $1200 = ($1199>>>0)>=(48);
           if ($1200) {
            $instr = 87582;
            break;
           } else {
            HEAP32[$vararg_buffer280>>2] = 158;
            $vararg_ptr283 = ((($vararg_buffer280)) + 4|0);
            HEAP32[$vararg_ptr283>>2] = $fullparam;
            _AddLineQueueX(87605,$vararg_buffer280);
            $instr = 87580;
            $qual = 164;
            break;
           }
          }
         } while(0);
         $1212 = $qual;
         $1213 = ($1212|0)!=(-2);
         $1214 = $instr;
         if ($1213) {
          $1215 = $qual;
          HEAP32[$vararg_buffer291>>2] = $1214;
          $vararg_ptr294 = ((($vararg_buffer291)) + 4|0);
          HEAP32[$vararg_ptr294>>2] = $1215;
          $vararg_ptr295 = ((($vararg_buffer291)) + 8|0);
          HEAP32[$vararg_ptr295>>2] = $fullparam;
          _AddLineQueueX(87635,$vararg_buffer291);
          break;
         } else {
          HEAP32[$vararg_buffer296>>2] = $1214;
          $vararg_ptr299 = ((($vararg_buffer296)) + 4|0);
          HEAP32[$vararg_ptr299>>2] = $fullparam;
          _AddLineQueueX(87651,$vararg_buffer296);
          break;
         }
        }
       } while(0);
       $1216 = $4;
       $1217 = ((($1216)) + 28|0);
       $1218 = ((($1217)) + 3|0);
       $1219 = HEAP8[$1218>>0]|0;
       $1220 = ($1219&255) >>> 5;
       $1221 = $1220 & 1;
       $1222 = ($1221<<24>>24)!=(0);
       if (!($1222)) {
        break L29;
       }
       $1223 = $psize;
       $1224 = HEAP32[13408>>2]|0;
       $1225 = (($1224) + ($1223))|0;
       HEAP32[13408>>2] = $1225;
       break L29;
      }
     } while(0);
     $580 = $6;
     $581 = HEAP8[$580>>0]|0;
     $582 = $581&255;
     $583 = ($582|0)!=(0);
     do {
      if ($583) {
       $584 = ((($opnd)) + 20|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = ($585|0)!=(0|0);
       if ($586) {
        $587 = ((($opnd)) + 20|0);
        $588 = HEAP32[$587>>2]|0;
        $589 = ((($588)) + 8|0);
        $590 = HEAP32[$589>>2]|0;
        $591 = ($590|0)==(17);
        if (!($591)) {
         $592 = ((($opnd)) + 20|0);
         $593 = HEAP32[$592>>2]|0;
         $594 = ((($593)) + 8|0);
         $595 = HEAP32[$594>>2]|0;
         $596 = ($595|0)==(99);
         if (!($596)) {
          label = 128;
         }
        }
       } else {
        label = 128;
       }
       if ((label|0) == 128) {
        $597 = ((($opnd)) + 24|0);
        $598 = HEAP32[$597>>2]|0;
        $599 = ($598|0)!=(0|0);
        if (!($599)) {
         break;
        }
        $600 = ((($opnd)) + 24|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ((($601)) + 8|0);
        $603 = HEAP32[$602>>2]|0;
        $604 = ($603|0)==(17);
        if (!($604)) {
         $605 = ((($opnd)) + 24|0);
         $606 = HEAP32[$605>>2]|0;
         $607 = ((($606)) + 8|0);
         $608 = HEAP32[$607>>2]|0;
         $609 = ($608|0)==(99);
         if (!($609)) {
          break;
         }
        }
       }
       (_EmitErr(165,$vararg_buffer66)|0);
       $610 = $6;
       HEAP8[$610>>0] = 0;
      }
     } while(0);
     $611 = $4;
     $612 = ((($611)) + 28|0);
     $613 = ((($612)) + 3|0);
     $614 = HEAP8[$613>>0]|0;
     $615 = ($614&255) >>> 5;
     $616 = $615 & 1;
     $617 = ($616<<24>>24)!=(0);
     if ($617) {
      $618 = $asize;
      $619 = $pushsize;
      $620 = ($618|0)>($619|0);
      $621 = $asize;
      $622 = $pushsize;
      $623 = $620 ? $621 : $622;
      $624 = HEAP32[13408>>2]|0;
      $625 = (($624) + ($623))|0;
      HEAP32[13408>>2] = $625;
     }
     $626 = $asize;
     $627 = $pushsize;
     $628 = ($626|0)>($627|0);
     if ($628) {
      $dw = 134;
      $629 = HEAP32[(544)>>2]|0;
      $630 = $629 & 240;
      $631 = ($630>>>0)>=(48);
      if ($631) {
       $pushsize = 4;
       $dw = 136;
      }
      $632 = ((($opnd)) + 52|0);
      $633 = HEAP8[$632>>0]|0;
      $634 = ($633&255) >>> 1;
      $635 = $634 & 1;
      $636 = $635&255;
      $637 = ($636|0)!=(0);
      if ($637) {
       $638 = $1;
       $639 = $2;
       _SkipTypecast($fullparam,$638,$639);
       $640 = ((($opnd)) + 52|0);
       $641 = HEAP8[$640>>0]|0;
       $642 = $641 & -3;
       HEAP8[$640>>0] = $642;
      }
      while(1) {
       $643 = $asize;
       $644 = ($643|0)>(0);
       if (!($644)) {
        break L29;
       }
       $645 = $asize;
       $646 = $645 & 2;
       $647 = ($646|0)!=(0);
       if (!($647)) {
        $659 = $dw;
        $660 = $659 << 16 >> 16;
        $661 = $asize;
        $662 = $pushsize;
        $663 = (($661) - ($662))|0;
        HEAP32[$vararg_buffer75>>2] = $660;
        $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
        HEAP32[$vararg_ptr78>>2] = $fullparam;
        $vararg_ptr79 = ((($vararg_buffer75)) + 8|0);
        HEAP32[$vararg_ptr79>>2] = $663;
        _AddLineQueueX(87449,$vararg_buffer75);
        $664 = $pushsize;
        $665 = $asize;
        $666 = (($665) - ($664))|0;
        $asize = $666;
        continue;
       }
       $648 = HEAP8[(556)>>0]|0;
       $649 = $648&255;
       $650 = ($649|0)>(0);
       if ($650) {
        $651 = HEAP8[(556)>>0]|0;
        $652 = $651&255;
        $653 = (15472 + ($652<<2)|0);
        $654 = HEAP32[$653>>2]|0;
        HEAP32[$vararg_buffer68>>2] = $654;
        _AddLineQueueX(87417,$vararg_buffer68);
       }
       $655 = $asize;
       $656 = (($655) - 2)|0;
       HEAP32[$vararg_buffer71>>2] = $fullparam;
       $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
       HEAP32[$vararg_ptr74>>2] = $656;
       _AddLineQueueX(87428,$vararg_buffer71);
       $657 = $asize;
       $658 = (($657) - 2)|0;
       $asize = $658;
      }
     }
     $667 = $asize;
     $668 = $pushsize;
     $669 = ($667|0)<($668|0);
     if (!($669)) {
      $773 = ((($opnd)) + 44|0);
      $774 = HEAP32[$773>>2]|0;
      $775 = $774 & 192;
      $776 = ($775|0)==(64);
      if ($776) {
       $777 = $psize;
       $778 = $asize;
       $779 = ($777|0)>($778|0);
       if ($779) {
        $780 = $psize;
        $781 = ($780|0)>(2);
        do {
         if ($781) {
          $782 = HEAP32[(544)>>2]|0;
          $783 = $782 & 240;
          $784 = ($783>>>0)>=(48);
          if (!($784)) {
           break;
          }
          HEAP32[$vararg_buffer148>>2] = 17;
          $vararg_ptr151 = ((($vararg_buffer148)) + 4|0);
          HEAP32[$vararg_ptr151>>2] = $fullparam;
          _AddLineQueueX(87468,$vararg_buffer148);
          HEAP32[$vararg_buffer152>>2] = 17;
          _AddLineQueueX(87343,$vararg_buffer152);
          $785 = $6;
          HEAP8[$785>>0] = 1;
          break L29;
         }
        } while(0);
        $786 = $pushsize;
        $787 = ($786|0)==(2);
        $788 = $psize;
        $789 = ($788|0)>(2);
        $or$cond9 = $787 & $789;
        if ($or$cond9) {
         HEAP32[$vararg_buffer155>>2] = 9;
         $vararg_ptr158 = ((($vararg_buffer155)) + 4|0);
         HEAP32[$vararg_ptr158>>2] = $fullparam;
         _AddLineQueueX(87482,$vararg_buffer155);
         _AddLineQueueX(87530,$vararg_buffer159);
         HEAP32[$vararg_buffer161>>2] = 11;
         _AddLineQueueX(87343,$vararg_buffer161);
         HEAP32[$vararg_buffer164>>2] = 9;
         _AddLineQueueX(87343,$vararg_buffer164);
         $790 = $6;
         HEAP8[$790>>0] = 9;
         break L29;
        } else {
         HEAP32[$vararg_buffer167>>2] = $fullparam;
         _AddLineQueueX(87322,$vararg_buffer167);
         break L29;
        }
       }
      }
      $791 = $pushsize;
      $792 = ($791|0)==(2);
      $793 = $psize;
      $794 = ($793|0)>(2);
      $or$cond11 = $792 & $794;
      do {
       if ($or$cond11) {
        $795 = HEAP32[(544)>>2]|0;
        $796 = $795 & 240;
        $797 = ($796>>>0)<(16);
        if (!($797)) {
         _AddLineQueueX(87554,$vararg_buffer177);
         break;
        }
        $798 = $6;
        $799 = HEAP8[$798>>0]|0;
        $800 = $799&255;
        $801 = $800 & 4;
        $802 = ($801|0)!=(0);
        if (!($802)) {
         HEAP32[$vararg_buffer170>>2] = 9;
         $vararg_ptr173 = ((($vararg_buffer170)) + 4|0);
         HEAP32[$vararg_ptr173>>2] = 9;
         _AddLineQueueX(87494,$vararg_buffer170);
        }
        HEAP32[$vararg_buffer174>>2] = 9;
        _AddLineQueueX(87343,$vararg_buffer174);
        $803 = $6;
        $804 = HEAP8[$803>>0]|0;
        $805 = $804&255;
        $806 = $805 | 7;
        $807 = $806&255;
        HEAP8[$803>>0] = $807;
       }
      } while(0);
      HEAP32[$vararg_buffer179>>2] = $fullparam;
      _AddLineQueueX(87322,$vararg_buffer179);
      break L29;
     }
     $670 = $psize;
     $671 = ($670|0)>(4);
     if ($671) {
      $672 = $5;
      $673 = (($672) + 1)|0;
      HEAP32[$vararg_buffer80>>2] = $673;
      (_EmitErr(145,$vararg_buffer80)|0);
     }
     $674 = $asize;
     $675 = ($674|0)<(4);
     $676 = $psize;
     $677 = ($676|0)>(2);
     $or$cond3 = $675 & $677;
     do {
      if ($or$cond3) {
       $678 = ((($opnd)) + 44|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = $679 & 192;
       $681 = ($680|0)==(64);
       if ($681) {
        $682 = HEAP32[(544)>>2]|0;
        $683 = $682 & 240;
        $684 = ($683>>>0)>=(48);
        if (!($684)) {
         break;
        }
        HEAP32[$vararg_buffer83>>2] = 17;
        $vararg_ptr86 = ((($vararg_buffer83)) + 4|0);
        HEAP32[$vararg_ptr86>>2] = $fullparam;
        _AddLineQueueX(87468,$vararg_buffer83);
        HEAP32[$vararg_buffer87>>2] = 17;
        _AddLineQueueX(87343,$vararg_buffer87);
        $685 = $6;
        HEAP8[$685>>0] = 1;
        break L29;
       }
      }
     } while(0);
     $686 = ((($opnd)) + 44|0);
     $687 = HEAP32[$686>>2]|0;
     switch ($687|0) {
     case 64: case 0:  {
      $688 = $psize;
      $689 = ($688|0)==(1);
      do {
       if ($689) {
        $690 = $4;
        $691 = ((($690)) + 28|0);
        $692 = ((($691)) + 3|0);
        $693 = HEAP8[$692>>0]|0;
        $694 = ($693&255) >>> 5;
        $695 = $694 & 1;
        $696 = $695&255;
        $697 = ($696|0)==(0);
        if (!($697)) {
         label = 156;
         break;
        }
        HEAP32[$vararg_buffer90>>2] = 1;
        $vararg_ptr93 = ((($vararg_buffer90)) + 4|0);
        HEAP32[$vararg_ptr93>>2] = $fullparam;
        _AddLineQueueX(87482,$vararg_buffer90);
        $698 = HEAP8[(556)>>0]|0;
        $699 = $698&255;
        $700 = (13412 + ($699<<2)|0);
        $701 = HEAP32[$700>>2]|0;
        HEAP32[$vararg_buffer94>>2] = $701;
        _AddLineQueueX(87343,$vararg_buffer94);
       } else {
        label = 156;
       }
      } while(0);
      do {
       if ((label|0) == 156) {
        $702 = $pushsize;
        $703 = ($702|0)==(2);
        $704 = ((($opnd)) + 44|0);
        $705 = HEAP32[$704>>2]|0;
        $706 = ($705|0)==(0);
        if (!($703)) {
         $740 = $706 ? 87535 : 87537;
         HEAP32[$vararg_buffer121>>2] = $740;
         $vararg_ptr124 = ((($vararg_buffer121)) + 4|0);
         HEAP32[$vararg_ptr124>>2] = 17;
         $vararg_ptr125 = ((($vararg_buffer121)) + 8|0);
         HEAP32[$vararg_ptr125>>2] = $fullparam;
         _AddLineQueueX(87539,$vararg_buffer121);
         HEAP32[$vararg_buffer126>>2] = 17;
         _AddLineQueueX(87343,$vararg_buffer126);
         break;
        }
        do {
         if ($706) {
          $707 = $psize;
          $708 = ($707|0)==(4);
          do {
           if ($708) {
            $709 = HEAP32[(544)>>2]|0;
            $710 = $709 & 240;
            $711 = ($710>>>0)<(16);
            if (!($711)) {
             _AddLineQueue(87506);
             break;
            }
            $712 = $6;
            $713 = HEAP8[$712>>0]|0;
            $714 = $713&255;
            $715 = $714 & 4;
            $716 = ($715|0)!=(0);
            if (!($716)) {
             HEAP32[$vararg_buffer97>>2] = 9;
             $vararg_ptr100 = ((($vararg_buffer97)) + 4|0);
             HEAP32[$vararg_ptr100>>2] = 9;
             _AddLineQueueX(87494,$vararg_buffer97);
            }
            $717 = $6;
            $718 = HEAP8[$717>>0]|0;
            $719 = $718&255;
            $720 = $719 | 6;
            $721 = $720&255;
            HEAP8[$717>>0] = $721;
            HEAP32[$vararg_buffer101>>2] = 9;
            _AddLineQueueX(87343,$vararg_buffer101);
           }
          } while(0);
          HEAP32[$vararg_buffer104>>2] = 1;
          $vararg_ptr107 = ((($vararg_buffer104)) + 4|0);
          HEAP32[$vararg_ptr107>>2] = $fullparam;
          _AddLineQueueX(87482,$vararg_buffer104);
          $722 = $6;
          $723 = HEAP8[$722>>0]|0;
          $724 = $723&255;
          $725 = $724 & 2;
          $726 = ($725|0)!=(0);
          if ($726) {
           break;
          }
          HEAP32[$vararg_buffer108>>2] = 5;
          _AddLineQueueX(87514,$vararg_buffer108);
          $727 = $6;
          $728 = HEAP8[$727>>0]|0;
          $729 = $728&255;
          $730 = $729 | 2;
          $731 = $730&255;
          HEAP8[$727>>0] = $731;
         } else {
          HEAP32[$vararg_buffer111>>2] = 1;
          $vararg_ptr114 = ((($vararg_buffer111)) + 4|0);
          HEAP32[$vararg_ptr114>>2] = $fullparam;
          _AddLineQueueX(87482,$vararg_buffer111);
          $732 = $6;
          HEAP8[$732>>0] = 0;
          _AddLineQueue(87525);
          $733 = $psize;
          $734 = ($733|0)==(4);
          if (!($734)) {
           break;
          }
          _AddLineQueue(87530);
          HEAP32[$vararg_buffer115>>2] = 11;
          _AddLineQueueX(87343,$vararg_buffer115);
          $735 = $6;
          $736 = HEAP8[$735>>0]|0;
          $737 = $736&255;
          $738 = $737 | 8;
          $739 = $738&255;
          HEAP8[$735>>0] = $739;
         }
        } while(0);
        HEAP32[$vararg_buffer118>>2] = 9;
        _AddLineQueueX(87343,$vararg_buffer118);
       }
      } while(0);
      $741 = $6;
      $742 = HEAP8[$741>>0]|0;
      $743 = $742&255;
      $744 = $743 | 1;
      $745 = $744&255;
      HEAP8[$741>>0] = $745;
      break L29;
      break;
     }
     case 65: case 1:  {
      $746 = ((($opnd)) + 44|0);
      $747 = HEAP32[$746>>2]|0;
      $748 = ($747|0)==(1);
      do {
       if ($748) {
        $749 = HEAP8[(6084)>>0]|0;
        $750 = $749&255;
        $751 = ($750|0)!=(0);
        $752 = $psize;
        $753 = ($752|0)==(2);
        $or$cond5 = $751 | $753;
        if (!($or$cond5)) {
         break;
        }
        $754 = $4;
        $755 = ((($754)) + 28|0);
        $756 = ((($755)) + 3|0);
        $757 = HEAP8[$756>>0]|0;
        $758 = ($757&255) >>> 5;
        $759 = $758 & 1;
        $760 = $759&255;
        $761 = ($760|0)!=(0);
        $762 = $psize;
        $763 = ($762|0)!=(2);
        $or$cond7 = $761 | $763;
        if ($or$cond7) {
         _AddLineQueueX(87554,$vararg_buffer129);
        } else {
         $764 = HEAP8[(556)>>0]|0;
         $765 = $764&255;
         $766 = (15472 + ($765<<2)|0);
         $767 = HEAP32[$766>>2]|0;
         HEAP32[$vararg_buffer131>>2] = $767;
         _AddLineQueueX(87417,$vararg_buffer131);
        }
        HEAP32[$vararg_buffer134>>2] = $fullparam;
        _AddLineQueueX(87322,$vararg_buffer134);
        break L29;
       }
      } while(0);
      $768 = ((($opnd)) + 44|0);
      $769 = HEAP32[$768>>2]|0;
      $770 = ($769|0)==(1);
      $771 = $770 ? 87535 : 87537;
      HEAP32[$vararg_buffer137>>2] = $771;
      $vararg_ptr140 = ((($vararg_buffer137)) + 4|0);
      HEAP32[$vararg_ptr140>>2] = 17;
      $vararg_ptr141 = ((($vararg_buffer137)) + 8|0);
      HEAP32[$vararg_ptr141>>2] = $fullparam;
      _AddLineQueueX(87539,$vararg_buffer137);
      HEAP32[$vararg_buffer142>>2] = 17;
      _AddLineQueueX(87343,$vararg_buffer142);
      $772 = $6;
      HEAP8[$772>>0] = 1;
      break L29;
      break;
     }
     default: {
      HEAP32[$vararg_buffer145>>2] = $fullparam;
      _AddLineQueueX(87322,$vararg_buffer145);
      break L29;
     }
     }
    }
   } while(0);
   $564 = $5;
   $565 = (($564) + 1)|0;
   HEAP32[$vararg_buffer63>>2] = $565;
   (_EmitErr(145,$vararg_buffer63)|0);
   $0 = 0;
   $1226 = $0;
   STACKTOP = sp;return ($1226|0);
  }
 } while(0);
 L429: do {
  if ((label|0) == 40) {
   $186 = $4;
   $187 = ((($186)) + 28|0);
   $188 = ((($187)) + 3|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = ($189&255) >>> 4;
   $191 = $190 & 1;
   $192 = $191&255;
   $193 = ($192|0)!=(0);
   if ($193) {
    label = 42;
   } else {
    $194 = $psize;
    $195 = $4;
    $196 = ((($195)) + 28|0);
    $197 = HEAP8[$196>>0]|0;
    $198 = $197&255;
    $199 = 2 << $198;
    $200 = ($194|0)>($199|0);
    if ($200) {
     label = 42;
    }
   }
   do {
    if ((label|0) == 42) {
     $201 = (_GetSegmentPart($opnd,$buffer,$fullparam)|0);
     $sreg = $201;
     $202 = $sreg;
     $203 = ($202<<16>>16)!=(0);
     if (!($203)) {
      HEAP32[$vararg_buffer35>>2] = $buffer;
      _AddLineQueueX(87322,$vararg_buffer35);
      break;
     }
     $204 = $Ofssize;
     $205 = $204 << 24 >> 24;
     $206 = HEAP8[(556)>>0]|0;
     $207 = $206&255;
     $208 = ($205|0)!=($207|0);
     if ($208) {
      label = 46;
     } else {
      $209 = $4;
      $210 = ((($209)) + 28|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = $211&255;
      $213 = ($212|0)==(0);
      if ($213) {
       $214 = HEAP8[(558)>>0]|0;
       $215 = $214&255;
       $216 = ($215|0)>(2);
       if ($216) {
        label = 46;
       }
      }
     }
     if ((label|0) == 46) {
      _AddLineQueue(87352);
     }
     $217 = $sreg;
     $218 = $217 << 16 >> 16;
     HEAP32[$vararg_buffer32>>2] = $218;
     _AddLineQueueX(87343,$vararg_buffer32);
    }
   } while(0);
   $219 = HEAP32[(544)>>2]|0;
   $220 = $219 & 240;
   $221 = ($220>>>0)<(16);
   if ($221) {
    HEAP32[$vararg_buffer38>>2] = 9;
    $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
    HEAP32[$vararg_ptr41>>2] = $fullparam;
    _AddLineQueueX(87360,$vararg_buffer38);
    HEAP32[$vararg_buffer42>>2] = 9;
    _AddLineQueueX(87343,$vararg_buffer42);
    $222 = $6;
    $223 = HEAP8[$222>>0]|0;
    $224 = $223&255;
    $225 = $224 | 1;
    $226 = $225&255;
    HEAP8[$222>>0] = $226;
    label = 69;
    break;
   }
   $227 = $4;
   $228 = ((($227)) + 28|0);
   $229 = ((($228)) + 3|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = ($230&255) >>> 5;
   $232 = $231 & 1;
   $233 = $232&255;
   $234 = ($233|0)!=(0);
   if ($234) {
    $235 = ((($opnd)) + 49|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237|0)==(254);
    if ($238) {
     $239 = ((($opnd)) + 56|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = ($240|0)!=(0|0);
     if ($241) {
      $242 = ((($opnd)) + 56|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = (_GetSymOfssize($243)|0);
      $245 = $244&255;
      $246 = ((($opnd)) + 49|0);
      HEAP8[$246>>0] = $245;
     }
    }
   }
   $247 = ((($opnd)) + 49|0);
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = ($249|0)==(0);
   if ($250) {
    $251 = HEAP8[(558)>>0]|0;
    $252 = $251&255;
    $253 = ($252|0)>(2);
    if (!($253)) {
     label = 57;
    }
   } else {
    label = 57;
   }
   do {
    if ((label|0) == 57) {
     $254 = $4;
     $255 = ((($254)) + 28|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256&255;
     $258 = ($257|0)==(1);
     if ($258) {
      $259 = HEAP8[(558)>>0]|0;
      $260 = $259&255;
      $261 = ($260|0)==(2);
      if ($261) {
       break;
      }
     }
     $262 = HEAP8[(558)>>0]|0;
     $263 = $262&255;
     $264 = ($263|0)>(2);
     do {
      if ($264) {
       $265 = $4;
       $266 = ((($265)) + 28|0);
       $267 = HEAP8[$266>>0]|0;
       $268 = $267&255;
       $269 = ($268|0)==(0);
       if ($269) {
        $270 = $4;
        $271 = ((($270)) + 28|0);
        $272 = ((($271)) + 3|0);
        $273 = HEAP8[$272>>0]|0;
        $274 = ($273&255) >>> 4;
        $275 = $274 & 1;
        $276 = $275&255;
        $277 = ($276|0)!=(0);
        if (!($277)) {
         $278 = $Ofssize;
         $279 = $278 << 24 >> 24;
         $280 = ($279|0)==(0);
         if (!($280)) {
          break;
         }
        }
        HEAP32[$vararg_buffer49>>2] = 167;
        $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
        HEAP32[$vararg_ptr52>>2] = $fullparam;
        _AddLineQueueX(87392,$vararg_buffer49);
        label = 69;
        break L429;
       }
      }
     } while(0);
     HEAP32[$vararg_buffer53>>2] = 167;
     $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
     HEAP32[$vararg_ptr56>>2] = $fullparam;
     _AddLineQueueX(87405,$vararg_buffer53);
     $281 = $4;
     $282 = ((($281)) + 28|0);
     $283 = ((($282)) + 3|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = ($284&255) >>> 5;
     $286 = $285 & 1;
     $287 = $286&255;
     $288 = ($287|0)!=(0);
     if (!($288)) {
      label = 69;
      break L429;
     }
     $289 = HEAP8[(558)>>0]|0;
     $290 = $289&255;
     $291 = ($290|0)==(2);
     if (!($291)) {
      label = 69;
      break L429;
     }
     $292 = ((($opnd)) + 49|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = ($294|0)>(0);
     if (!($295)) {
      label = 69;
      break L429;
     }
     $296 = HEAP8[(558)>>0]|0;
     $297 = $296&255;
     $298 = HEAP32[13408>>2]|0;
     $299 = (($298) + ($297))|0;
     HEAP32[13408>>2] = $299;
     label = 69;
     break L429;
    }
   } while(0);
   HEAP32[$vararg_buffer45>>2] = 167;
   $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
   HEAP32[$vararg_ptr48>>2] = $fullparam;
   _AddLineQueueX(87379,$vararg_buffer45);
   label = 69;
  }
 } while(0);
 if ((label|0) == 69) {
  $300 = $4;
  $301 = ((($300)) + 28|0);
  $302 = ((($301)) + 3|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = ($303&255) >>> 5;
  $305 = $304 & 1;
  $306 = ($305<<24>>24)!=(0);
  if ($306) {
   $307 = HEAP8[(558)>>0]|0;
   $308 = $307&255;
   $309 = $4;
   $310 = ((($309)) + 28|0);
   $311 = ((($310)) + 3|0);
   $312 = HEAP8[$311>>0]|0;
   $313 = ($312&255) >>> 4;
   $314 = $313 & 1;
   $315 = $314&255;
   $316 = ($315|0)!=(0);
   $317 = HEAP8[(558)>>0]|0;
   $318 = $317&255;
   $319 = $316 ? $318 : 0;
   $320 = (($308) + ($319))|0;
   $321 = HEAP32[13408>>2]|0;
   $322 = (($321) + ($320))|0;
   HEAP32[13408>>2] = $322;
  }
 }
 $0 = 0;
 $1226 = $0;
 STACKTOP = sp;return ($1226|0);
}
function _GetSegmentPart($opnd,$buffer,$fullparam) {
 $opnd = $opnd|0;
 $buffer = $buffer|0;
 $fullparam = $fullparam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $as = 0, $dir = 0, $reg = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opnd;
 $1 = $buffer;
 $2 = $fullparam;
 $reg = 0;
 $3 = $0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $0;
 if ($6) {
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(2);
  if ($12) {
   $13 = $0;
   $14 = ((($13)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17&65535;
   $reg = $18;
   $88 = $reg;
   STACKTOP = sp;return ($88|0);
  } else {
   $19 = $1;
   $20 = $0;
   $21 = ((($20)) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   (_strcpy($19,$24)|0);
   $88 = $reg;
   STACKTOP = sp;return ($88|0);
  }
 }
 $25 = ((($7)) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $0;
  $29 = ((($28)) + 56|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $0;
   $35 = ((($34)) + 56|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $dir = $38;
   $39 = $dir;
   $40 = ((($39)) + 60|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(2);
   if ($44) {
    label = 9;
   } else {
    $45 = $dir;
    $46 = ((($45)) + 60|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(3);
    if ($50) {
     label = 9;
    } else {
     $53 = $dir;
     $54 = (_search_assume($53,1,1)|0);
     $as = $54;
    }
   }
   if ((label|0) == 9) {
    $51 = $dir;
    $52 = (_search_assume($51,3,1)|0);
    $as = $52;
   }
   $55 = $as;
   $56 = ($55|0)!=(-2);
   if ($56) {
    $57 = $as;
    $58 = (25 + ($57))|0;
    $59 = $58&65535;
    $reg = $59;
    $88 = $reg;
    STACKTOP = sp;return ($88|0);
   }
   $60 = $0;
   $61 = ((($60)) + 56|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_GetGroup($62)|0);
   $seg = $63;
   $64 = $seg;
   $65 = ($64|0)==(0|0);
   if ($65) {
    $66 = $dir;
    $seg = $66;
   }
   $67 = $seg;
   $68 = ($67|0)!=(0|0);
   $69 = $1;
   if ($68) {
    $70 = $seg;
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    (_strcpy($69,$72)|0);
    $88 = $reg;
    STACKTOP = sp;return ($88|0);
   } else {
    (_strcpy($69,87662)|0);
    $73 = $1;
    $74 = $2;
    (_strcat($73,$74)|0);
    $88 = $reg;
    STACKTOP = sp;return ($88|0);
   }
  }
 }
 $75 = $0;
 $76 = ((($75)) + 56|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = $0;
  $80 = ((($79)) + 56|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(5);
  if ($84) {
   $reg = 27;
   $88 = $reg;
   STACKTOP = sp;return ($88|0);
  }
 }
 $85 = $1;
 (_strcpy($85,87662)|0);
 $86 = $1;
 $87 = $2;
 (_strcat($86,$87)|0);
 $88 = $reg;
 STACKTOP = sp;return ($88|0);
}
function _SkipTypecast($fullparam,$i,$tokenarray) {
 $fullparam = $fullparam|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fullparam;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $0;
 HEAP8[$3>>0] = 0;
 $4 = $1;
 $j = $4;
 while(1) {
  $5 = $j;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)==(44);
  if ($10) {
   label = 11;
   break;
  }
  $11 = $j;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   label = 11;
   break;
  }
  $17 = $j;
  $18 = (($17) + 1)|0;
  $19 = $2;
  $20 = (($19) + ($18<<4)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   $24 = $j;
   $25 = (($24) + 1)|0;
   $26 = $2;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(184);
   if ($30) {
    $31 = $j;
    $32 = (($31) + 1)|0;
    $j = $32;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $33 = $0;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $0;
    (_strcat($37,89360)|0);
   }
   $38 = $0;
   $39 = $j;
   $40 = $2;
   $41 = (($40) + ($39<<4)|0);
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   (_strcat($38,$43)|0);
  }
  $44 = $j;
  $45 = (($44) + 1)|0;
  $j = $45;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _ms32_fcstart($proc,$numparams,$start,$tokenarray,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $start = $start|0;
 $tokenarray = $tokenarray|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $param = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $proc;
 $2 = $numparams;
 $3 = $start;
 $4 = $tokenarray;
 $5 = $value;
 $6 = $1;
 $7 = (_GetSymOfssize($6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $9 = $1;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $param = $13;
 while(1) {
  $14 = $param;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $param;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(10);
  if ($19) {
   $20 = HEAP32[13368>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[13368>>2] = $21;
  }
  $22 = $param;
  $23 = ((($22)) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $param = $24;
 }
 $0 = 1;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _ms32_fcend($proc,$numparams,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $numparams;
 $2 = $value;
 STACKTOP = sp;return;
}
function _ms32_param($proc,$index,$param,$addr,$opnd,$paramvalue,$r0used) {
 $proc = $proc|0;
 $index = $index|0;
 $param = $param|0;
 $addr = $addr|0;
 $opnd = $opnd|0;
 $paramvalue = $paramvalue|0;
 $r0used = $r0used|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $pst = 0, $reg = 0;
 var $size = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $proc;
 $2 = $index;
 $3 = $param;
 $4 = $addr;
 $5 = $opnd;
 $6 = $paramvalue;
 $7 = $r0used;
 $8 = $3;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(10);
 if ($11) {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $12 = $1;
 $13 = (_GetSymOfssize($12)|0);
 $14 = ($13|0)==(0);
 $15 = HEAP32[13368>>2]|0;
 if ($14) {
  $16 = (13488 + ($15<<2)|0);
  $pst = $16;
  $17 = HEAP32[13368>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[13368>>2] = $18;
 } else {
  $19 = (($15) + -1)|0;
  HEAP32[13368>>2] = $19;
  $20 = HEAP32[13368>>2]|0;
  $21 = (13500 + ($20<<2)|0);
  $pst = $21;
 }
 $22 = $4;
 $23 = ($22<<24>>24)!=(0);
 $24 = $pst;
 $25 = HEAP32[$24>>2]|0;
 do {
  if ($23) {
   $26 = $6;
   HEAP32[$vararg_buffer>>2] = $25;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $26;
   _AddLineQueueX(87331,$vararg_buffer);
  } else {
   $reg = $25;
   $27 = $5;
   $28 = ((($27)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $3;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $3;
    $35 = ((($34)) + 52|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_SizeFromMemtype($33,254,$36)|0);
    $size = $37;
    $38 = $pst;
    $39 = HEAP32[$38>>2]|0;
    $40 = (_SizeFromRegister($39)|0);
    $41 = ($37|0)<($40|0);
    if ($41) {
     $42 = HEAP32[(544)>>2]|0;
     $43 = $42 & 240;
     $44 = ($43>>>0)>=(48);
     if ($44) {
      $45 = $3;
      $46 = ((($45)) + 20|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $47 & 64;
      $49 = ($48|0)!=(0);
      $50 = $49 ? 87979 : 87985;
      $51 = $reg;
      $52 = $6;
      HEAP32[$vararg_buffer2>>2] = $50;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $51;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $52;
      _AddLineQueueX(87991,$vararg_buffer2);
      break;
     } else {
      $53 = $reg;
      $54 = (15660 + (($53*12)|0)|0);
      $55 = ((($54)) + 10|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56&255;
      $58 = (1 + ($57))|0;
      $59 = $6;
      HEAP32[$vararg_buffer7>>2] = $58;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $59;
      _AddLineQueueX(87482,$vararg_buffer7);
      $60 = $reg;
      $61 = (15660 + (($60*12)|0)|0);
      $62 = ((($61)) + 10|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = (5 + ($64))|0;
      HEAP32[$vararg_buffer11>>2] = $65;
      _AddLineQueueX(87514,$vararg_buffer11);
      break;
     }
    }
   }
   $66 = $5;
   $67 = ((($66)) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(2);
   if ($69) {
    $70 = $5;
    $71 = ((($70)) + 52|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72 & 1;
    $74 = $73&255;
    $75 = ($74|0)==(0);
    if ($75) {
     $76 = $5;
     $77 = ((($76)) + 20|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(0|0);
     if ($79) {
      $80 = $5;
      $81 = ((($80)) + 20|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($82)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $reg;
      $86 = ($84|0)==($85|0);
      if ($86) {
       $0 = 1;
       $97 = $0;
       STACKTOP = sp;return ($97|0);
      }
     }
    }
   }
   $87 = $reg;
   $88 = $6;
   HEAP32[$vararg_buffer14>>2] = $87;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $88;
   _AddLineQueueX(87482,$vararg_buffer14);
  }
 } while(0);
 $89 = $pst;
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(9);
 if ($91) {
  $92 = $7;
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = $94 | 1;
  $96 = $95&255;
  HEAP8[$92>>0] = $96;
 }
 $0 = 1;
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _watc_fcstart($proc,$numparams,$start,$tokenarray,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $start = $start|0;
 $tokenarray = $tokenarray|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $numparams;
 $2 = $start;
 $3 = $tokenarray;
 $4 = $value;
 STACKTOP = sp;return 1;
}
function _watc_fcend($proc,$numparams,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $numparams;
 $2 = $value;
 $3 = $0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  $10 = HEAP8[(556)>>0]|0;
  $11 = $10&255;
  $12 = (15472 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = ((($14)) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[13408>>2]|0;
  $20 = (($18) + ($19))|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  _AddLineQueueX(87310,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $21 = HEAP32[13368>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($21>>>0)<($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = HEAP8[(556)>>0]|0;
 $29 = $28&255;
 $30 = (15472 + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 60|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[13368>>2]|0;
 $38 = (($36) - ($37))|0;
 HEAP32[$vararg_buffer2>>2] = $31;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $38;
 _AddLineQueueX(87310,$vararg_buffer2);
 STACKTOP = sp;return;
}
function _watc_param($proc,$index,$param,$addr,$opnd,$paramvalue,$r0used) {
 $proc = $proc|0;
 $index = $index|0;
 $param = $param|0;
 $addr = $addr|0;
 $opnd = $opnd|0;
 $paramvalue = $paramvalue|0;
 $r0used = $r0used|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buffer = 0, $i = 0, $opc = 0, $p = 0, $psize = 0, $qual = 0, $reg = 0, $regs = 0, $sreg = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $regs = sp + 312|0;
 $reg = sp + 120|0;
 $buffer = sp + 184|0;
 $1 = $proc;
 $2 = $index;
 $3 = $param;
 $4 = $addr;
 $5 = $opnd;
 $6 = $paramvalue;
 $7 = $r0used;
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_SizeFromMemtype($10,254,$13)|0);
 $psize = $14;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(10);
 if ($18) {
  $0 = 0;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $19 = HEAP8[(558)>>0]|0;
 $20 = $19&255;
 $21 = HEAP32[13368>>2]|0;
 $22 = (($21) + ($20))|0;
 HEAP32[13368>>2] = $22;
 $23 = $3;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$reg>>2] = $25;
 $26 = ((($reg)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($reg)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($reg)) + 12|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$reg>>2]|0;
 $30 = (_strchr($29,58)|0);
 $31 = ($30|0)!=(0|0);
 L5: do {
  if ($31) {
   $32 = HEAP32[$reg>>2]|0;
   (_strcpy($regs,$32)|0);
   $33 = HEAP8[(558)>>0]|0;
   $34 = $33&255;
   $35 = HEAP32[13368>>2]|0;
   $36 = (($35) + ($34))|0;
   HEAP32[13368>>2] = $36;
   $p = $regs;
   $i = 0;
   while(1) {
    $37 = $i;
    $38 = ($37|0)<(4);
    if (!($38)) {
     break L5;
    }
    $39 = $p;
    $40 = $i;
    $41 = (($reg) + ($40<<2)|0);
    HEAP32[$41>>2] = $39;
    $42 = $p;
    $43 = (_strchr($42,58)|0);
    $p = $43;
    $44 = $p;
    $45 = ($44|0)==(0|0);
    if ($45) {
     break L5;
    }
    $46 = $p;
    $47 = ((($46)) + 1|0);
    $p = $47;
    HEAP8[$46>>0] = 0;
    $48 = $p;
    $49 = ((($48)) + 1|0);
    $p = $49;
    $50 = $i;
    $51 = (($50) + 1)|0;
    $i = $51;
   }
  }
 } while(0);
 $52 = $4;
 $53 = ($52<<24>>24)!=(0);
 if ($53) {
  $54 = $5;
  $55 = ((($54)) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(2);
  if ($57) {
   label = 11;
  } else {
   $58 = $5;
   $59 = ((($58)) + 56|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(5);
   if ($63) {
    label = 11;
   } else {
    $opc = 524;
    $qual = 167;
   }
  }
  if ((label|0) == 11) {
   $opc = 552;
   $qual = 0;
  }
  $i = 0;
  $64 = ((($reg)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0|0);
  if ($66) {
   $67 = $5;
   $68 = $6;
   $69 = (_GetSegmentPart($67,$buffer,$68)|0);
   $sreg = $69;
   $70 = $69 << 16 >> 16;
   $71 = ($70|0)!=(0);
   $72 = HEAP32[$reg>>2]|0;
   if ($71) {
    $73 = $sreg;
    $74 = $73 << 16 >> 16;
    HEAP32[$vararg_buffer>>2] = 524;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $72;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $74;
    _AddLineQueueX(87898,$vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3>>2] = 524;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $72;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $buffer;
    _AddLineQueueX(87908,$vararg_buffer3);
   }
   $75 = $i;
   $76 = (($75) + 1)|0;
   $i = $76;
  }
  $77 = $opc;
  $78 = $i;
  $79 = (($reg) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $qual;
  $82 = $6;
  HEAP32[$vararg_buffer8>>2] = $77;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $80;
  $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
  HEAP32[$vararg_ptr12>>2] = $81;
  $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
  HEAP32[$vararg_ptr13>>2] = $82;
  _AddLineQueueX(87918,$vararg_buffer8);
  $0 = 1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $i = 3;
 while(1) {
  $83 = $i;
  $84 = ($83|0)>=(0);
  if (!($84)) {
   break;
  }
  $85 = $i;
  $86 = (($reg) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0|0);
  do {
   if ($88) {
    $89 = $5;
    $90 = ((($89)) + 40|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0);
    if ($92) {
     $93 = $i;
     $94 = ($93|0)>(0);
     do {
      if ($94) {
       $qual = 164;
      } else {
       $95 = $i;
       $96 = ($95|0)==(0);
       if ($96) {
        $97 = ((($reg)) + 4|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($98|0)!=(0|0);
        if ($99) {
         $qual = 158;
         break;
        }
       }
       $qual = 0;
      }
     } while(0);
     $100 = $qual;
     $101 = ($100|0)!=(0);
     $102 = $i;
     $103 = (($reg) + ($102<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     if ($101) {
      $105 = $qual;
      $106 = $6;
      HEAP32[$vararg_buffer14>>2] = $104;
      $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
      HEAP32[$vararg_ptr17>>2] = $105;
      $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
      HEAP32[$vararg_ptr18>>2] = $106;
      _AddLineQueueX(87931,$vararg_buffer14);
      break;
     } else {
      $107 = $6;
      HEAP32[$vararg_buffer19>>2] = $104;
      $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
      HEAP32[$vararg_ptr22>>2] = $107;
      _AddLineQueueX(87947,$vararg_buffer19);
      break;
     }
    } else {
     $108 = $5;
     $109 = ((($108)) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(2);
     $112 = $i;
     if ($111) {
      $113 = (($reg) + ($112<<2)|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $6;
      HEAP32[$vararg_buffer23>>2] = $114;
      $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
      HEAP32[$vararg_ptr26>>2] = $115;
      _AddLineQueueX(87947,$vararg_buffer23);
      break;
     }
     $116 = ($112|0)==(0);
     if ($116) {
      $117 = ((($reg)) + 4|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $120 = $i;
       $121 = (($reg) + ($120<<2)|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = $6;
       HEAP32[$vararg_buffer27>>2] = $122;
       $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
       HEAP32[$vararg_ptr30>>2] = $123;
       _AddLineQueueX(87947,$vararg_buffer27);
       break;
      }
     }
     $124 = HEAP8[(556)>>0]|0;
     $125 = ($124<<24>>24)!=(0);
     if ($125) {
      $qual = 136;
     } else {
      $qual = 134;
     }
     $126 = $i;
     $127 = (($reg) + ($126<<2)|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $qual;
     $130 = $6;
     $131 = $psize;
     $132 = $i;
     $133 = (($132) + 1)|0;
     $134 = HEAP8[(556)>>0]|0;
     $135 = $134&255;
     $136 = 2 << $135;
     $137 = Math_imul($133, $136)|0;
     $138 = (($131) - ($137))|0;
     HEAP32[$vararg_buffer31>>2] = $128;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = $129;
     $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
     HEAP32[$vararg_ptr35>>2] = 184;
     $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
     HEAP32[$vararg_ptr36>>2] = $130;
     $vararg_ptr37 = ((($vararg_buffer31)) + 16|0);
     HEAP32[$vararg_ptr37>>2] = $138;
     _AddLineQueueX(87958,$vararg_buffer31);
     break;
    }
   }
  } while(0);
  $139 = $i;
  $140 = (($139) + -1)|0;
  $i = $140;
 }
 $0 = 1;
 $141 = $0;
 STACKTOP = sp;return ($141|0);
}
function _ms64_fcstart($proc,$numparams,$start,$tokenarray,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $start = $start|0;
 $tokenarray = $tokenarray|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $numparams;
 $2 = $start;
 $3 = $tokenarray;
 $4 = $value;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)!=(0);
 L1: do {
  if ($11) {
   $1 = 0;
   while(1) {
    $12 = $2;
    $13 = $3;
    $14 = (($13) + ($12<<4)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break L1;
    }
    $18 = $2;
    $19 = $3;
    $20 = (($19) + ($18<<4)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ($22|0)==(44);
    if ($23) {
     $24 = $1;
     $25 = (($24) + 1)|0;
     $1 = $25;
    }
    $26 = $2;
    $27 = (($26) + 1)|0;
    $2 = $27;
   }
  }
 } while(0);
 $28 = $1;
 $29 = ($28|0)<(4);
 if ($29) {
  $1 = 4;
 } else {
  $30 = $1;
  $31 = $30 & 1;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $1;
   $34 = (($33) + 1)|0;
   $1 = $34;
  }
 }
 $35 = $1;
 $36 = $4;
 HEAP32[$36>>2] = $35;
 $37 = HEAP8[((((564)) + 1|0))>>0]|0;
 $38 = $37&255;
 $39 = $38 & 2;
 $40 = ($39|0)!=(0);
 $41 = $1;
 $42 = $41<<3;
 if (!($40)) {
  HEAP32[$vararg_buffer>>2] = 103;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $42;
  _AddLineQueueX(87886,$vararg_buffer);
  STACKTOP = sp;return 0;
 }
 $43 = HEAP32[15504>>2]|0;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($42>>>0)>($45>>>0);
 if (!($46)) {
  STACKTOP = sp;return 0;
 }
 $47 = $1;
 $48 = $47<<3;
 $49 = HEAP32[15504>>2]|0;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 STACKTOP = sp;return 0;
}
function _ms64_fcend($proc,$numparams,$value) {
 $proc = $proc|0;
 $numparams = $numparams|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $numparams;
 $2 = $value;
 $3 = HEAP8[((((564)) + 1|0))>>0]|0;
 $4 = $3&255;
 $5 = $4 & 2;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = $7<<3;
 HEAP32[$vararg_buffer>>2] = 103;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 _AddLineQueueX(87874,$vararg_buffer);
 STACKTOP = sp;return;
}
function _ms64_param($proc,$index,$param,$addr,$opnd,$paramvalue,$regs_used) {
 $proc = $proc|0;
 $index = $index|0;
 $param = $param|0;
 $addr = $addr|0;
 $opnd = $opnd|0;
 $paramvalue = $paramvalue|0;
 $regs_used = $regs_used|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $base = 0, $destroyed = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $psize = 0, $reg = 0, $reg2 = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer102 = 0, $vararg_buffer107 = 0, $vararg_buffer111 = 0, $vararg_buffer115 = 0, $vararg_buffer119 = 0;
 var $vararg_buffer123 = 0, $vararg_buffer126 = 0, $vararg_buffer129 = 0, $vararg_buffer131 = 0, $vararg_buffer135 = 0, $vararg_buffer139 = 0, $vararg_buffer14 = 0, $vararg_buffer144 = 0, $vararg_buffer19 = 0, $vararg_buffer26 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer42 = 0, $vararg_buffer49 = 0, $vararg_buffer56 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0;
 var $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer85 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer98 = 0, $vararg_ptr101 = 0, $vararg_ptr105 = 0, $vararg_ptr106 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0, $vararg_ptr118 = 0, $vararg_ptr122 = 0, $vararg_ptr13 = 0, $vararg_ptr134 = 0, $vararg_ptr138 = 0, $vararg_ptr142 = 0, $vararg_ptr143 = 0, $vararg_ptr147 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0;
 var $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0, $vararg_ptr79 = 0, $vararg_ptr80 = 0, $vararg_ptr84 = 0, $vararg_ptr88 = 0, $vararg_ptr89 = 0, $vararg_ptr93 = 0, $vararg_ptr97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer144 = sp + 376|0;
 $vararg_buffer139 = sp + 360|0;
 $vararg_buffer135 = sp + 352|0;
 $vararg_buffer131 = sp + 344|0;
 $vararg_buffer129 = sp + 336|0;
 $vararg_buffer126 = sp + 328|0;
 $vararg_buffer123 = sp + 320|0;
 $vararg_buffer119 = sp + 312|0;
 $vararg_buffer115 = sp + 304|0;
 $vararg_buffer111 = sp + 296|0;
 $vararg_buffer107 = sp + 288|0;
 $vararg_buffer102 = sp + 272|0;
 $vararg_buffer98 = sp + 264|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer90 = sp + 248|0;
 $vararg_buffer85 = sp + 232|0;
 $vararg_buffer81 = sp + 224|0;
 $vararg_buffer76 = sp + 208|0;
 $vararg_buffer72 = sp + 200|0;
 $vararg_buffer68 = sp + 192|0;
 $vararg_buffer65 = sp + 184|0;
 $vararg_buffer62 = sp + 176|0;
 $vararg_buffer56 = sp + 160|0;
 $vararg_buffer49 = sp + 136|0;
 $vararg_buffer42 = sp + 112|0;
 $vararg_buffer36 = sp + 96|0;
 $vararg_buffer33 = sp + 88|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $proc;
 $2 = $index;
 $3 = $param;
 $4 = $addr;
 $5 = $opnd;
 $6 = $paramvalue;
 $7 = $regs_used;
 $destroyed = 0;
 $8 = $3;
 $9 = ((($8)) + 28|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11&255) >>> 5;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)!=(0);
 if ($14) {
  $psize = 0;
  $15 = $4;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  do {
   if ($17) {
    label = 4;
   } else {
    $18 = $5;
    $19 = ((($18)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(167);
    if ($21) {
     label = 4;
    } else {
     $22 = $5;
     $23 = ((($22)) + 40|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(2);
     if ($25) {
      $26 = $5;
      $27 = ((($26)) + 52|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 & 1;
      $30 = $29&255;
      $31 = ($30|0)==(0);
      if ($31) {
       $32 = $5;
       $33 = ((($32)) + 20|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ((($34)) + 8|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (_SizeFromRegister($36)|0);
       $psize = $37;
       break;
      }
     }
     $38 = $5;
     $39 = ((($38)) + 44|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)!=(192);
     if ($41) {
      $42 = $5;
      $43 = ((($42)) + 44|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $5;
      $46 = ((($45)) + 64|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (_SizeFromMemtype($44,2,$47)|0);
      $psize = $48;
     }
    }
   }
  } while(0);
  if ((label|0) == 4) {
   $psize = 8;
  }
  $49 = $psize;
  $50 = ($49>>>0)<(4);
  if ($50) {
   $psize = 4;
  }
 } else {
  $51 = $3;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  $55 = ((($54)) + 52|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_SizeFromMemtype($53,2,$56)|0);
  $psize = $57;
 }
 $58 = $5;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 do {
  if ($61) {
   $62 = $5;
   $63 = ((($62)) + 20|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   $reg = $66;
   $67 = $reg;
   $68 = (15660 + (($67*12)|0)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 & 15;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $reg;
    $73 = (15660 + (($72*12)|0)|0);
    $74 = ((($73)) + 10|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $i = $76;
    $77 = $i;
    $78 = 1 << $77;
    $79 = 774 & $78;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = $i;
     $82 = ($81|0)>=(8);
     $83 = $i;
     $84 = (($83) - 6)|0;
     $85 = (($83) - 1)|0;
     $86 = $82 ? $84 : $85;
     $base = $86;
     $87 = $7;
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = $base;
     $91 = (($90) + 3)|0;
     $92 = 1 << $91;
     $93 = $89 & $92;
     $94 = ($93|0)!=(0);
     if (!($94)) {
      break;
     }
     $destroyed = 1;
     break;
    }
    $95 = $7;
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 & 1;
    $99 = ($98|0)!=(0);
    if ($99) {
     $100 = $reg;
     $101 = (15660 + (($100*12)|0)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $102 & 128;
     $104 = ($103|0)!=(0);
     $105 = $reg;
     $106 = ($105|0)==(5);
     $or$cond = $104 | $106;
     if ($or$cond) {
      $destroyed = 1;
     }
    }
   }
  }
 } while(0);
 $107 = $5;
 $108 = ((($107)) + 24|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 do {
  if ($110) {
   $111 = $5;
   $112 = ((($111)) + 24|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $reg2 = $115;
   $116 = $reg2;
   $117 = (15660 + (($116*12)|0)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 15;
   $120 = ($119|0)!=(0);
   if ($120) {
    $121 = $reg2;
    $122 = (15660 + (($121*12)|0)|0);
    $123 = ((($122)) + 10|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $i = $125;
    $126 = $i;
    $127 = 1 << $126;
    $128 = 774 & $127;
    $129 = ($128|0)!=(0);
    if ($129) {
     $130 = $i;
     $131 = ($130|0)>=(8);
     $132 = $i;
     $133 = (($132) - 6)|0;
     $134 = (($132) - 1)|0;
     $135 = $131 ? $133 : $134;
     $base = $135;
     $136 = $7;
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&255;
     $139 = $base;
     $140 = (($139) + 3)|0;
     $141 = 1 << $140;
     $142 = $138 & $141;
     $143 = ($142|0)!=(0);
     if (!($143)) {
      break;
     }
     $destroyed = 1;
     break;
    }
    $144 = $7;
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $146 & 1;
    $148 = ($147|0)!=(0);
    if ($148) {
     $149 = $reg2;
     $150 = (15660 + (($149*12)|0)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = $151 & 128;
     $153 = ($152|0)!=(0);
     $154 = $reg2;
     $155 = ($154|0)==(5);
     $or$cond3 = $153 | $155;
     if ($or$cond3) {
      $destroyed = 1;
     }
    }
   }
  }
 } while(0);
 $156 = $destroyed;
 $157 = ($156<<24>>24)!=(0);
 if ($157) {
  (_EmitErr(165,$vararg_buffer)|0);
  $158 = $7;
  HEAP8[$158>>0] = 0;
 }
 $159 = $2;
 $160 = ($159|0)>=(4);
 L40: do {
  if ($160) {
   $161 = $4;
   $162 = $161&255;
   $163 = ($162|0)!=(0);
   $164 = $psize;
   $165 = ($164>>>0)>(8);
   $or$cond5 = $163 | $165;
   if ($or$cond5) {
    $166 = $psize;
    $167 = ($166|0)==(4);
    if ($167) {
     $i = 17;
    } else {
     $i = 99;
     $168 = $psize;
     $169 = ($168>>>0)<(8);
     if ($169) {
      $170 = $2;
      $171 = (($170) + 1)|0;
      HEAP32[$vararg_buffer8>>2] = $171;
      (_EmitErr(145,$vararg_buffer8)|0);
     }
    }
    $172 = $7;
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $174 | 1;
    $176 = $175&255;
    HEAP8[$172>>0] = $176;
    $177 = $i;
    $178 = $6;
    HEAP32[$vararg_buffer10>>2] = $177;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $178;
    _AddLineQueueX(87331,$vararg_buffer10);
    $179 = $2;
    $180 = $179<<3;
    $181 = $i;
    HEAP32[$vararg_buffer14>>2] = 103;
    $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $180;
    $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
    HEAP32[$vararg_ptr18>>2] = $181;
    _AddLineQueueX(87667,$vararg_buffer14);
    $0 = 1;
    $601 = $0;
    STACKTOP = sp;return ($601|0);
   }
   $182 = $5;
   $183 = ((($182)) + 40|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)==(0);
   do {
    if (!($185)) {
     $186 = $5;
     $187 = ((($186)) + 40|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)==(1);
     if ($189) {
      $190 = $5;
      $191 = ((($190)) + 52|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192 & 1;
      $194 = $193&255;
      $195 = ($194|0)==(0);
      if ($195) {
       $196 = $5;
       $197 = ((($196)) + 44|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = ($198|0)==(192);
       if ($199) {
        $200 = $5;
        $201 = ((($200)) + 36|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ($202|0)!=(167);
        if ($203) {
         break;
        }
       }
      }
     }
     $258 = $5;
     $259 = ((($258)) + 40|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)==(3);
     if ($261) {
      $262 = $3;
      $263 = ((($262)) + 20|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ($264|0)==(39);
      $266 = $2;
      $267 = $266<<3;
      $268 = $6;
      if ($265) {
       HEAP32[$vararg_buffer42>>2] = 136;
       $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
       HEAP32[$vararg_ptr45>>2] = 103;
       $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
       HEAP32[$vararg_ptr46>>2] = $267;
       $vararg_ptr47 = ((($vararg_buffer42)) + 12|0);
       HEAP32[$vararg_ptr47>>2] = 163;
       $vararg_ptr48 = ((($vararg_buffer42)) + 16|0);
       HEAP32[$vararg_ptr48>>2] = $268;
       _AddLineQueueX(87739,$vararg_buffer42);
       $269 = $2;
       $270 = $269<<3;
       $271 = $6;
       HEAP32[$vararg_buffer49>>2] = 136;
       $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
       HEAP32[$vararg_ptr52>>2] = 103;
       $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
       HEAP32[$vararg_ptr53>>2] = $270;
       $vararg_ptr54 = ((($vararg_buffer49)) + 12|0);
       HEAP32[$vararg_ptr54>>2] = 157;
       $vararg_ptr55 = ((($vararg_buffer49)) + 16|0);
       HEAP32[$vararg_ptr55>>2] = $271;
       _AddLineQueueX(87770,$vararg_buffer49);
       break L40;
      } else {
       HEAP32[$vararg_buffer56>>2] = 136;
       $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
       HEAP32[$vararg_ptr59>>2] = 103;
       $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
       HEAP32[$vararg_ptr60>>2] = $267;
       $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
       HEAP32[$vararg_ptr61>>2] = $268;
       _AddLineQueueX(87715,$vararg_buffer56);
       break L40;
      }
     }
     $272 = $5;
     $273 = ((($272)) + 40|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ($274|0)==(2);
     do {
      if ($275) {
       $276 = $5;
       $277 = ((($276)) + 52|0);
       $278 = HEAP8[$277>>0]|0;
       $279 = $278 & 1;
       $280 = $279&255;
       $281 = ($280|0)==(0);
       if ($281) {
        $282 = $reg;
        $283 = (_SizeFromRegister($282)|0);
        $size = $283;
        $284 = $size;
        $285 = $psize;
        $286 = ($284|0)==($285|0);
        if ($286) {
         $287 = $reg;
         $i = $287;
         break;
        }
        $288 = $size;
        $289 = $psize;
        $290 = ($288>>>0)>($289>>>0);
        if ($290) {
         label = 68;
        } else {
         $291 = $size;
         $292 = $psize;
         $293 = ($291>>>0)<($292>>>0);
         if ($293) {
          $294 = $3;
          $295 = ((($294)) + 20|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = ($296|0)==(195);
          if ($297) {
           label = 68;
          }
         }
        }
        if ((label|0) == 68) {
         $298 = $2;
         $299 = (($298) + 1)|0;
         HEAP32[$vararg_buffer62>>2] = $299;
         (_EmitErr(145,$vararg_buffer62)|0);
         $300 = $size;
         $psize = $300;
        }
        $301 = $psize;
        switch ($301|0) {
        case 1:  {
         $i = 1;
         break;
        }
        case 2:  {
         $i = 9;
         break;
        }
        case 4:  {
         $i = 17;
         break;
        }
        default: {
         $i = 99;
        }
        }
        $302 = $7;
        $303 = HEAP8[$302>>0]|0;
        $304 = $303&255;
        $305 = $304 | 1;
        $306 = $305&255;
        HEAP8[$302>>0] = $306;
       } else {
        label = 75;
       }
      } else {
       label = 75;
      }
     } while(0);
     if ((label|0) == 75) {
      $307 = $5;
      $308 = ((($307)) + 44|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ($309|0)==(192);
      $311 = $5;
      if ($310) {
       $312 = ((($311)) + 36|0);
       $313 = HEAP32[$312>>2]|0;
       $314 = ($313|0)==(167);
       $315 = $314 ? 8 : 4;
       $size = $315;
      } else {
       $316 = ((($311)) + 44|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = $5;
       $319 = ((($318)) + 64|0);
       $320 = HEAP32[$319>>2]|0;
       $321 = (_SizeFromMemtype($317,2,$320)|0);
       $size = $321;
      }
      $322 = $psize;
      switch ($322|0) {
      case 1:  {
       $i = 1;
       break;
      }
      case 2:  {
       $i = 9;
       break;
      }
      case 4:  {
       $i = 17;
       break;
      }
      default: {
       $i = 99;
      }
      }
      $323 = $7;
      $324 = HEAP8[$323>>0]|0;
      $325 = $324&255;
      $326 = $325 | 1;
      $327 = $326&255;
      HEAP8[$323>>0] = $327;
     }
     $328 = $size;
     $329 = $psize;
     $330 = ($328>>>0)>($329>>>0);
     if ($330) {
      label = 87;
     } else {
      $331 = $size;
      $332 = $psize;
      $333 = ($331>>>0)<($332>>>0);
      if ($333) {
       $334 = $3;
       $335 = ((($334)) + 20|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(195);
       if ($337) {
        label = 87;
       }
      }
     }
     if ((label|0) == 87) {
      $338 = $2;
      $339 = (($338) + 1)|0;
      HEAP32[$vararg_buffer65>>2] = $339;
      (_EmitErr(145,$vararg_buffer65)|0);
     }
     $340 = $size;
     $341 = $psize;
     $342 = ($340|0)!=($341|0);
     do {
      if ($342) {
       $343 = $size;
       $344 = ($343|0)==(4);
       $345 = $5;
       $346 = ((($345)) + 44|0);
       $347 = HEAP32[$346>>2]|0;
       $348 = $347 & 192;
       $349 = ($348|0)==(64);
       if (!($344)) {
        $352 = $349 ? 87537 : 87535;
        $353 = $i;
        $354 = $6;
        HEAP32[$vararg_buffer76>>2] = $352;
        $vararg_ptr79 = ((($vararg_buffer76)) + 4|0);
        HEAP32[$vararg_ptr79>>2] = $353;
        $vararg_ptr80 = ((($vararg_buffer76)) + 8|0);
        HEAP32[$vararg_ptr80>>2] = $354;
        _AddLineQueueX(87539,$vararg_buffer76);
        break;
       }
       $350 = $i;
       $351 = $6;
       if ($349) {
        HEAP32[$vararg_buffer68>>2] = $350;
        $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
        HEAP32[$vararg_ptr71>>2] = $351;
        _AddLineQueueX(87801,$vararg_buffer68);
        break;
       } else {
        HEAP32[$vararg_buffer72>>2] = $350;
        $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
        HEAP32[$vararg_ptr75>>2] = $351;
        _AddLineQueueX(87482,$vararg_buffer72);
        break;
       }
      } else {
       $355 = $5;
       $356 = ((($355)) + 40|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ($357|0)!=(2);
       if (!($358)) {
        $359 = $5;
        $360 = ((($359)) + 52|0);
        $361 = HEAP8[$360>>0]|0;
        $362 = $361 & 1;
        $363 = $362&255;
        $364 = ($363|0)==(1);
        if (!($364)) {
         break;
        }
       }
       $365 = $i;
       $366 = $6;
       HEAP32[$vararg_buffer81>>2] = $365;
       $vararg_ptr84 = ((($vararg_buffer81)) + 4|0);
       HEAP32[$vararg_ptr84>>2] = $366;
       _AddLineQueueX(87482,$vararg_buffer81);
      }
     } while(0);
     $367 = $2;
     $368 = $367<<3;
     $369 = $i;
     HEAP32[$vararg_buffer85>>2] = 103;
     $vararg_ptr88 = ((($vararg_buffer85)) + 4|0);
     HEAP32[$vararg_ptr88>>2] = $368;
     $vararg_ptr89 = ((($vararg_buffer85)) + 8|0);
     HEAP32[$vararg_ptr89>>2] = $369;
     _AddLineQueueX(87667,$vararg_buffer85);
     break L40;
    }
   } while(0);
   $204 = $psize;
   $205 = ($204|0)==(8);
   do {
    if ($205) {
     $206 = $5;
     $207 = $206;
     $208 = $207;
     $209 = HEAP32[$208>>2]|0;
     $210 = (($207) + 4)|0;
     $211 = $210;
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)>(0);
     $214 = ($209>>>0)>(2147483647);
     $215 = ($212|0)==(0);
     $216 = $215 & $214;
     $217 = $213 | $216;
     if (!($217)) {
      $218 = $5;
      $219 = $218;
      $220 = $219;
      $221 = HEAP32[$220>>2]|0;
      $222 = (($219) + 4)|0;
      $223 = $222;
      $224 = HEAP32[$223>>2]|0;
      $225 = ($224|0)<(-1);
      $226 = ($221>>>0)<(2147483648);
      $227 = ($224|0)==(-1);
      $228 = $227 & $226;
      $229 = $225 | $228;
      if (!($229)) {
       break;
      }
     }
     $230 = $2;
     $231 = $230<<3;
     $232 = $6;
     HEAP32[$vararg_buffer19>>2] = 136;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = 103;
     $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
     HEAP32[$vararg_ptr23>>2] = $231;
     $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
     HEAP32[$vararg_ptr24>>2] = 163;
     $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
     HEAP32[$vararg_ptr25>>2] = $232;
     _AddLineQueueX(87684,$vararg_buffer19);
     $233 = $2;
     $234 = $233<<3;
     $235 = (($234) + 4)|0;
     $236 = $6;
     HEAP32[$vararg_buffer26>>2] = 136;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = 103;
     $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
     HEAP32[$vararg_ptr30>>2] = $235;
     $vararg_ptr31 = ((($vararg_buffer26)) + 12|0);
     HEAP32[$vararg_ptr31>>2] = 157;
     $vararg_ptr32 = ((($vararg_buffer26)) + 16|0);
     HEAP32[$vararg_ptr32>>2] = $236;
     _AddLineQueueX(87684,$vararg_buffer26);
     break L40;
    }
   } while(0);
   $237 = $3;
   $238 = ((($237)) + 20|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($239|0)==(195);
   if ($240) {
    $241 = $5;
    $242 = ((($241)) + 40|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = ($243|0)==(1);
    if ($244) {
     $245 = $5;
     $246 = ((($245)) + 56|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = ((($247)) + 16|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)!=(0);
     if ($250) {
      $251 = $2;
      $252 = (($251) + 1)|0;
      HEAP32[$vararg_buffer33>>2] = $252;
      (_EmitErr(145,$vararg_buffer33)|0);
     }
    }
   }
   $253 = $psize;
   switch ($253|0) {
   case 1:  {
    $i = 132;
    break;
   }
   case 2:  {
    $i = 134;
    break;
   }
   case 4:  {
    $i = 136;
    break;
   }
   default: {
    $i = 140;
   }
   }
   $254 = $i;
   $255 = $2;
   $256 = $255<<3;
   $257 = $6;
   HEAP32[$vararg_buffer36>>2] = $254;
   $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
   HEAP32[$vararg_ptr39>>2] = 103;
   $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
   HEAP32[$vararg_ptr40>>2] = $256;
   $vararg_ptr41 = ((($vararg_buffer36)) + 12|0);
   HEAP32[$vararg_ptr41>>2] = $257;
   _AddLineQueueX(87715,$vararg_buffer36);
  } else {
   $370 = $3;
   $371 = ((($370)) + 20|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = ($372|0)==(35);
   if (!($373)) {
    $374 = $3;
    $375 = ((($374)) + 20|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ($376|0)==(39);
    if (!($377)) {
     $425 = $4;
     $426 = $425&255;
     $427 = ($426|0)!=(0);
     $428 = $psize;
     $429 = ($428>>>0)>(8);
     $or$cond7 = $427 | $429;
     if ($or$cond7) {
      $430 = $psize;
      $431 = ($430>>>0)>=(4);
      $432 = $2;
      if ($431) {
       $433 = (($432) + 8)|0;
       $434 = $psize;
       $435 = ($434>>>0)>(4);
       $436 = $435 ? 4 : 0;
       $437 = (($433) + ($436))|0;
       $438 = (13424 + ($437<<2)|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = $6;
       HEAP32[$vararg_buffer119>>2] = $439;
       $vararg_ptr122 = ((($vararg_buffer119)) + 4|0);
       HEAP32[$vararg_ptr122>>2] = $440;
       _AddLineQueueX(87331,$vararg_buffer119);
      } else {
       $441 = (($432) + 1)|0;
       HEAP32[$vararg_buffer123>>2] = $441;
       (_EmitErr(145,$vararg_buffer123)|0);
      }
      $442 = $2;
      $443 = (($442) + 3)|0;
      $444 = 1 << $443;
      $445 = $7;
      $446 = HEAP8[$445>>0]|0;
      $447 = $446&255;
      $448 = $447 | $444;
      $449 = $448&255;
      HEAP8[$445>>0] = $449;
      $0 = 1;
      $601 = $0;
      STACKTOP = sp;return ($601|0);
     }
     $450 = $5;
     $451 = ((($450)) + 40|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = ($452|0)==(2);
     if ($453) {
      $454 = $5;
      $455 = ((($454)) + 52|0);
      $456 = HEAP8[$455>>0]|0;
      $457 = $456 & 1;
      $458 = $457&255;
      $459 = ($458|0)==(0);
      if ($459) {
       $460 = $5;
       $461 = ((($460)) + 20|0);
       $462 = HEAP32[$461>>2]|0;
       $463 = ((($462)) + 8|0);
       $464 = HEAP32[$463>>2]|0;
       $reg = $464;
       $465 = $reg;
       $466 = (_SizeFromRegister($465)|0);
       $size = $466;
      } else {
       label = 121;
      }
     } else {
      label = 121;
     }
     do {
      if ((label|0) == 121) {
       $467 = $5;
       $468 = ((($467)) + 40|0);
       $469 = HEAP32[$468>>2]|0;
       $470 = ($469|0)==(0);
       if (!($470)) {
        $471 = $5;
        $472 = ((($471)) + 40|0);
        $473 = HEAP32[$472>>2]|0;
        $474 = ($473|0)==(3);
        if (!($474)) {
         $476 = $5;
         $477 = ((($476)) + 44|0);
         $478 = HEAP32[$477>>2]|0;
         $479 = ($478|0)!=(192);
         $480 = $5;
         if ($479) {
          $481 = ((($480)) + 44|0);
          $482 = HEAP32[$481>>2]|0;
          $483 = $5;
          $484 = ((($483)) + 64|0);
          $485 = HEAP32[$484>>2]|0;
          $486 = (_SizeFromMemtype($482,2,$485)|0);
          $size = $486;
          break;
         }
         $487 = ((($480)) + 40|0);
         $488 = HEAP32[$487>>2]|0;
         $489 = ($488|0)==(1);
         if ($489) {
          $490 = $5;
          $491 = ((($490)) + 56|0);
          $492 = HEAP32[$491>>2]|0;
          $493 = ((($492)) + 16|0);
          $494 = HEAP32[$493>>2]|0;
          $495 = ($494|0)==(0);
          if ($495) {
           $496 = $psize;
           $size = $496;
           break;
          }
         }
         $497 = $5;
         $498 = ((($497)) + 36|0);
         $499 = HEAP32[$498>>2]|0;
         $500 = ($499|0)==(167);
         $501 = $500 ? 8 : 4;
         $size = $501;
         break;
        }
       }
       $475 = $psize;
       $size = $475;
      }
     } while(0);
     $502 = $size;
     $503 = $psize;
     $504 = ($502>>>0)>($503>>>0);
     if ($504) {
      label = 133;
     } else {
      $505 = $size;
      $506 = $psize;
      $507 = ($505>>>0)<($506>>>0);
      if ($507) {
       $508 = $3;
       $509 = ((($508)) + 20|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = ($510|0)==(195);
       if ($511) {
        label = 133;
       }
      }
     }
     if ((label|0) == 133) {
      $512 = $2;
      $513 = (($512) + 1)|0;
      HEAP32[$vararg_buffer126>>2] = $513;
      (_EmitErr(145,$vararg_buffer126)|0);
     }
     $514 = $psize;
     switch ($514|0) {
     case 1:  {
      $base = 0;
      break;
     }
     case 2:  {
      $base = 4;
      break;
     }
     case 4:  {
      $base = 8;
      break;
     }
     default: {
      $base = 12;
     }
     }
     $515 = $5;
     $516 = ((($515)) + 40|0);
     $517 = HEAP32[$516>>2]|0;
     $518 = ($517|0)==(2);
     if ($518) {
      $519 = $5;
      $520 = ((($519)) + 52|0);
      $521 = HEAP8[$520>>0]|0;
      $522 = $521 & 1;
      $523 = $522&255;
      $524 = ($523|0)==(0);
      if ($524) {
       $525 = $reg;
       $526 = (15660 + (($525*12)|0)|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = $527 & 15;
       $529 = ($528|0)!=(0);
       if ($529) {
        $530 = $2;
        $531 = $base;
        $532 = (($530) + ($531))|0;
        $533 = (13424 + ($532<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = $reg;
        $536 = ($534|0)==($535|0);
        if ($536) {
         $0 = 1;
         $601 = $0;
         STACKTOP = sp;return ($601|0);
        }
        $537 = $reg;
        $538 = (15660 + (($537*12)|0)|0);
        $539 = ((($538)) + 10|0);
        $540 = HEAP8[$539>>0]|0;
        $541 = $540&255;
        $i = $541;
        $542 = $i;
        $543 = 1 << $542;
        $544 = 774 & $543;
        $545 = ($544|0)!=(0);
        if ($545) {
         $546 = $i;
         $547 = ($546|0)>=(8);
         $548 = $i;
         $549 = (($548) - 6)|0;
         $550 = (($548) - 1)|0;
         $551 = $547 ? $549 : $550;
         $i = $551;
         $552 = $7;
         $553 = HEAP8[$552>>0]|0;
         $554 = $553&255;
         $555 = $i;
         $556 = (($555) + 3)|0;
         $557 = 1 << $556;
         $558 = $554 & $557;
         $559 = ($558|0)!=(0);
         if ($559) {
          (_EmitErr(165,$vararg_buffer129)|0);
         }
        }
       }
      }
     }
     $560 = $size;
     $561 = $psize;
     $562 = ($560>>>0)<($561>>>0);
     do {
      if ($562) {
       $563 = $size;
       $564 = ($563|0)==(4);
       $565 = $5;
       $566 = ((($565)) + 44|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = $567 & 192;
       $569 = ($568|0)==(64);
       if (!($564)) {
        $580 = $569 ? 87537 : 87535;
        $581 = $2;
        $582 = $base;
        $583 = (($581) + ($582))|0;
        $584 = (13424 + ($583<<2)|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = $6;
        HEAP32[$vararg_buffer139>>2] = $580;
        $vararg_ptr142 = ((($vararg_buffer139)) + 4|0);
        HEAP32[$vararg_ptr142>>2] = $585;
        $vararg_ptr143 = ((($vararg_buffer139)) + 8|0);
        HEAP32[$vararg_ptr143>>2] = $586;
        _AddLineQueueX(87539,$vararg_buffer139);
        break;
       }
       $570 = $2;
       if ($569) {
        $571 = $base;
        $572 = (($570) + ($571))|0;
        $573 = (13424 + ($572<<2)|0);
        $574 = HEAP32[$573>>2]|0;
        $575 = $6;
        HEAP32[$vararg_buffer131>>2] = $574;
        $vararg_ptr134 = ((($vararg_buffer131)) + 4|0);
        HEAP32[$vararg_ptr134>>2] = $575;
        _AddLineQueueX(87801,$vararg_buffer131);
        break;
       } else {
        $576 = (($570) + 8)|0;
        $577 = (13424 + ($576<<2)|0);
        $578 = HEAP32[$577>>2]|0;
        $579 = $6;
        HEAP32[$vararg_buffer135>>2] = $578;
        $vararg_ptr138 = ((($vararg_buffer135)) + 4|0);
        HEAP32[$vararg_ptr138>>2] = $579;
        _AddLineQueueX(87482,$vararg_buffer135);
        break;
       }
      } else {
       $587 = $2;
       $588 = $base;
       $589 = (($587) + ($588))|0;
       $590 = (13424 + ($589<<2)|0);
       $591 = HEAP32[$590>>2]|0;
       $592 = $6;
       HEAP32[$vararg_buffer144>>2] = $591;
       $vararg_ptr147 = ((($vararg_buffer144)) + 4|0);
       HEAP32[$vararg_ptr147>>2] = $592;
       _AddLineQueueX(87482,$vararg_buffer144);
      }
     } while(0);
     $593 = $2;
     $594 = (($593) + 3)|0;
     $595 = 1 << $594;
     $596 = $7;
     $597 = HEAP8[$596>>0]|0;
     $598 = $597&255;
     $599 = $598 | $595;
     $600 = $599&255;
     HEAP8[$596>>0] = $600;
     break;
    }
   }
   $378 = $5;
   $379 = ((($378)) + 40|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)==(2);
   if ($381) {
    $382 = $5;
    $383 = ((($382)) + 52|0);
    $384 = HEAP8[$383>>0]|0;
    $385 = $384 & 1;
    $386 = $385&255;
    $387 = ($386|0)==(0);
    if ($387) {
     $388 = $reg;
     $389 = (15660 + (($388*12)|0)|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = $390 & 32;
     $392 = ($391|0)!=(0);
     if ($392) {
      $393 = $reg;
      $394 = $2;
      $395 = (40 + ($394))|0;
      $396 = ($393|0)==($395|0);
      if (!($396)) {
       $397 = $2;
       $398 = (40 + ($397))|0;
       $399 = $6;
       HEAP32[$vararg_buffer90>>2] = $398;
       $vararg_ptr93 = ((($vararg_buffer90)) + 4|0);
       HEAP32[$vararg_ptr93>>2] = $399;
       _AddLineQueueX(87816,$vararg_buffer90);
      }
      $0 = 1;
      $601 = $0;
      STACKTOP = sp;return ($601|0);
     }
    }
   }
   $400 = $5;
   $401 = ((($400)) + 40|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = ($402|0)==(3);
   if ($403) {
    $404 = $7;
    $405 = HEAP8[$404>>0]|0;
    $406 = $405&255;
    $407 = $406 | 1;
    $408 = $407&255;
    HEAP8[$404>>0] = $408;
    $409 = $3;
    $410 = ((($409)) + 20|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = ($411|0)==(35);
    $413 = $6;
    if ($412) {
     HEAP32[$vararg_buffer94>>2] = 17;
     $vararg_ptr97 = ((($vararg_buffer94)) + 4|0);
     HEAP32[$vararg_ptr97>>2] = $413;
     _AddLineQueueX(87482,$vararg_buffer94);
     $414 = $2;
     $415 = (40 + ($414))|0;
     HEAP32[$vararg_buffer98>>2] = $415;
     $vararg_ptr101 = ((($vararg_buffer98)) + 4|0);
     HEAP32[$vararg_ptr101>>2] = 17;
     _AddLineQueueX(87829,$vararg_buffer98);
     break;
    } else {
     HEAP32[$vararg_buffer102>>2] = 99;
     $vararg_ptr105 = ((($vararg_buffer102)) + 4|0);
     HEAP32[$vararg_ptr105>>2] = 142;
     $vararg_ptr106 = ((($vararg_buffer102)) + 8|0);
     HEAP32[$vararg_ptr106>>2] = $413;
     _AddLineQueueX(87842,$vararg_buffer102);
     $416 = $2;
     $417 = (40 + ($416))|0;
     HEAP32[$vararg_buffer107>>2] = $417;
     $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
     HEAP32[$vararg_ptr110>>2] = 99;
     _AddLineQueueX(87829,$vararg_buffer107);
     break;
    }
   } else {
    $418 = $3;
    $419 = ((($418)) + 20|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = ($420|0)==(35);
    $422 = $2;
    $423 = (40 + ($422))|0;
    $424 = $6;
    if ($421) {
     HEAP32[$vararg_buffer111>>2] = $423;
     $vararg_ptr114 = ((($vararg_buffer111)) + 4|0);
     HEAP32[$vararg_ptr114>>2] = $424;
     _AddLineQueueX(87861,$vararg_buffer111);
     break;
    } else {
     HEAP32[$vararg_buffer115>>2] = $423;
     $vararg_ptr118 = ((($vararg_buffer115)) + 4|0);
     HEAP32[$vararg_ptr118>>2] = $424;
     _AddLineQueueX(87816,$vararg_buffer115);
     break;
    }
   }
  }
 } while(0);
 $0 = 1;
 $601 = $0;
 STACKTOP = sp;return ($601|0);
}
function _LabelInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(460)>>2] = 0;
 return;
}
function _GetAnonymousLabel($buffer,$value) {
 $buffer = $buffer|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $buffer;
 $1 = $value;
 $2 = $0;
 $3 = HEAP32[(460)>>2]|0;
 $4 = $1;
 $5 = (($3) + ($4))|0;
 HEAP32[$vararg_buffer>>2] = $5;
 (_sprintf($2,88002,$vararg_buffer)|0);
 $6 = $0;
 STACKTOP = sp;return ($6|0);
}
function _CreateLabel($name,$mem_type,$ti,$bLocal) {
 $name = $name|0;
 $mem_type = $mem_type|0;
 $ti = $ti|0;
 $bLocal = $bLocal|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr = 0, $buffer = 0, $or$cond = 0, $or$cond3 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 60|0;
 $1 = $name;
 $2 = $mem_type;
 $3 = $ti;
 $4 = $bLocal;
 $5 = HEAP32[(584)>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  (_EmitError(82)|0);
  $0 = 0;
  $207 = $0;
  STACKTOP = sp;return ($207|0);
 }
 $7 = $2;
 $8 = $7 & 192;
 $9 = ($8|0)==(128);
 $10 = HEAP8[(5020)>>0]|0;
 $11 = ($10<<24>>24)!=(0);
 $or$cond3 = $9 & $11;
 if ($or$cond3) {
  (_EmitError(183)|0);
  $0 = 0;
  $207 = $0;
  STACKTOP = sp;return ($207|0);
 }
 $12 = $1;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = ($14|0)==(64);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(64);
  if ($20) {
   $21 = $1;
   $22 = ((($21)) + 2|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[(460)>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[(460)>>2] = $27;
    HEAP32[$vararg_buffer>>2] = $27;
    (_sprintf($buffer,88002,$vararg_buffer)|0);
    $1 = $buffer;
   }
  }
 }
 $28 = $4;
 $29 = $28&255;
 $30 = ($29|0)!=(0);
 $31 = $1;
 if ($30) {
  $32 = (_SymLookupLocal($31)|0);
  $34 = $32;
 } else {
  $33 = (_SymLookup($31)|0);
  $34 = $33;
 }
 $sym = $34;
 $35 = HEAP32[4884>>2]|0;
 $36 = ($35|0)==(0);
 $37 = $sym;
 do {
  if ($36) {
   $38 = ((($37)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(2);
   do {
    if ($40) {
     $41 = $sym;
     $42 = ((($41)) + 28|0);
     $43 = ((($42)) + 3|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44&255) >>> 3;
     $46 = $45 & 1;
     $47 = $46&255;
     $48 = ($47|0)==(1);
     if ($48) {
      $49 = $sym;
      $50 = ((($49)) + 24|0);
      $51 = HEAP16[$50>>1]|0;
      $52 = ($51&65535) >>> 11;
      $53 = $52 & 1;
      $54 = $53&255;
      $55 = $54&255;
      $56 = ($55|0)!=(0);
      if (!($56)) {
       $57 = $4;
       $58 = $57&255;
       $59 = ($58|0)!=(0);
       $60 = HEAP32[15488>>2]|0;
       $61 = ($60|0)!=(0|0);
       $or$cond = $59 & $61;
       if (!($or$cond)) {
        $63 = $sym;
        $64 = ((($63)) + 20|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($65|0)!=(192);
        if ($66) {
         $67 = $sym;
         $68 = ((($67)) + 20|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = $2;
         $71 = ($69|0)!=($70|0);
         if ($71) {
          $72 = $1;
          HEAP32[$vararg_buffer7>>2] = $72;
          (_EmitErr(136,$vararg_buffer7)|0);
         }
        }
        $73 = $sym;
        _sym_ext2int($73);
        break;
       }
      }
      $62 = $1;
      HEAP32[$vararg_buffer4>>2] = $62;
      (_EmitErr(143,$vararg_buffer4)|0);
      $0 = 0;
      $207 = $0;
      STACKTOP = sp;return ($207|0);
     } else {
      label = 22;
     }
    } else {
     label = 22;
    }
   } while(0);
   do {
    if ((label|0) == 22) {
     $74 = $sym;
     $75 = ((($74)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==(0);
     $78 = $sym;
     if ($77) {
      _sym_remove_table(15404,$78);
      $79 = $sym;
      $80 = ((($79)) + 16|0);
      HEAP32[$80>>2] = 1;
      break;
     }
     $81 = ((($78)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==(1);
     if ($83) {
      $84 = $sym;
      $85 = ((($84)) + 20|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $2;
      $88 = ($86|0)==($87|0);
      if ($88) {
       $89 = $1;
       HEAP32[$vararg_buffer10>>2] = $89;
       (_EmitErr(56,$vararg_buffer10)|0);
      } else {
       label = 27;
      }
     } else {
      label = 27;
     }
     if ((label|0) == 27) {
      $90 = $1;
      HEAP32[$vararg_buffer13>>2] = $90;
      (_EmitErr(143,$vararg_buffer13)|0);
     }
     $0 = 0;
     $207 = $0;
     STACKTOP = sp;return ($207|0);
    }
   } while(0);
   $91 = HEAP32[(584)>>2]|0;
   $92 = ((($91)) + 60|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 20|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $sym;
   $97 = ((($96)) + 64|0);
   HEAP32[$97>>2] = $95;
   $98 = $sym;
   $99 = HEAP32[(584)>>2]|0;
   $100 = ((($99)) + 60|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($101)) + 20|0);
   HEAP32[$102>>2] = $98;
   $103 = $sym;
   $104 = ((($103)) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = HEAP32[(516)>>2]|0;
    $108 = $sym;
    $109 = ((($108)) + 48|0);
    HEAP32[$109>>2] = $107;
   }
   $110 = $2;
   $111 = ($110|0)==(128);
   if ($111) {
    $112 = $sym;
    $113 = ((($112)) + 24|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = ($114&65535) >>> 11;
    $116 = $115 & 1;
    $117 = $116&255;
    $118 = $117&255;
    $119 = ($118|0)==(0);
    if ($119) {
     $120 = $sym;
     (_CreateProc($120,0,1)|0);
     $121 = $sym;
     $122 = $3;
     $123 = ((($122)) + 4|0);
     $124 = HEAP32[$123>>2]|0;
     (_CopyPrototype($121,$124)|0);
    }
    $125 = $3;
    $126 = ((($125)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ((($127)) + 20|0);
    $129 = HEAP32[$128>>2]|0;
    $2 = $129;
    $130 = $3;
    $131 = ((($130)) + 4|0);
    HEAP32[$131>>2] = 0;
   }
   $132 = $2;
   $133 = $sym;
   $134 = ((($133)) + 20|0);
   HEAP32[$134>>2] = $132;
   $135 = $3;
   $136 = ($135|0)!=(0|0);
   if ($136) {
    $137 = $2;
    $138 = ($137|0)==(196);
    $139 = $3;
    if ($138) {
     $140 = ((($139)) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $sym;
     $143 = ((($142)) + 52|0);
     HEAP32[$143>>2] = $141;
     break;
    } else {
     $144 = ((($139)) + 14|0);
     $145 = HEAP8[$144>>0]|0;
     $146 = $sym;
     $147 = ((($146)) + 28|0);
     HEAP8[$147>>0] = $145;
     $148 = $3;
     $149 = ((($148)) + 12|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $sym;
     $152 = ((($151)) + 28|0);
     $153 = ((($152)) + 1|0);
     HEAP8[$153>>0] = $150;
     $154 = $3;
     $155 = ((($154)) + 13|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = $sym;
     $158 = ((($157)) + 28|0);
     $159 = ((($158)) + 3|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $156 & 1;
     $162 = ($161 << 4)&255;
     $163 = $160 & -17;
     $164 = $163 | $162;
     HEAP8[$159>>0] = $164;
     $165 = $3;
     $166 = ((($165)) + 4|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = $sym;
     $169 = ((($168)) + 32|0);
     HEAP32[$169>>2] = $167;
     $170 = $3;
     $171 = ((($170)) + 16|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172&255;
     $174 = $sym;
     $175 = ((($174)) + 28|0);
     $176 = ((($175)) + 2|0);
     HEAP8[$176>>0] = $173;
     break;
    }
   }
  } else {
   $177 = ((($37)) + 8|0);
   $178 = HEAP32[$177>>2]|0;
   $addr = $178;
  }
 } while(0);
 $179 = $sym;
 $180 = ((($179)) + 24|0);
 $181 = HEAP16[$180>>1]|0;
 $182 = $181 & -3;
 $183 = $182 | 2;
 HEAP16[$180>>1] = $183;
 $184 = $sym;
 $185 = ((($184)) + 24|0);
 $186 = HEAP16[$185>>1]|0;
 $187 = ($186&65535) >>> 10;
 $188 = $187 & 1;
 $189 = $188&255;
 $190 = $189&255;
 $191 = ($190|0)==(0);
 if ($191) {
  $192 = HEAP32[4884>>2]|0;
  $193 = $192&255;
  $194 = $sym;
  $195 = ((($194)) + 28|0);
  $196 = ((($195)) + 2|0);
  HEAP8[$196>>0] = $193;
 }
 $197 = $sym;
 _SetSymSegOfs($197);
 $198 = HEAP32[4884>>2]|0;
 $199 = ($198|0)!=(0);
 if ($199) {
  $200 = $sym;
  $201 = ((($200)) + 8|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $addr;
  $204 = ($202|0)!=($203|0);
  if ($204) {
   HEAP8[(574)>>0] = 1;
  }
 }
 $205 = $sym;
 (_BackPatch($205)|0);
 $206 = $sym;
 $0 = $206;
 $207 = $0;
 STACKTOP = sp;return ($207|0);
}
function _LabelDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $length = 0, $opnd = 0, $sym = 0, $ti = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 116|0;
 $ti = sp + 92|0;
 $opnd = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(1);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $11 = (($5) + 1)|0;
 HEAP32[$1>>2] = $11;
 HEAP32[$ti>>2] = 0;
 $12 = ((($ti)) + 12|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($ti)) + 13|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($ti)) + 8|0);
 HEAP32[$14>>2] = 192;
 $15 = ((($ti)) + 16|0);
 HEAP32[$15>>2] = 192;
 $16 = ((($ti)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP8[(556)>>0]|0;
 $18 = ((($ti)) + 14|0);
 HEAP8[$18>>0] = $17;
 $19 = $2;
 $20 = (_GetQualifiedType($1,$19,$ti)|0);
 $21 = ($20|0)==(-1);
 if ($21) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $length = -1;
 $22 = ((($ti)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 192;
 $25 = ($24|0)==(128);
 if ($25) {
  $26 = ((($ti)) + 14|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)!=(254);
  if ($29) {
   $30 = HEAP8[(556)>>0]|0;
   $31 = $30&255;
   $32 = ((($ti)) + 14|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($31|0)!=($34|0);
   if ($35) {
    $36 = (_EmitError(237)|0);
    $0 = $36;
    $127 = $0;
    STACKTOP = sp;return ($127|0);
   }
  }
 } else {
  $37 = HEAP32[$1>>2]|0;
  $38 = $2;
  $39 = (($38) + ($37<<4)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)==(58);
  if ($42) {
   $43 = HEAP32[$1>>2]|0;
   $44 = (($43) + 1)|0;
   $45 = $2;
   $46 = (($45) + ($44<<4)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = HEAP8[(6083)>>0]|0;
    $51 = $50&255;
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = HEAP32[$1>>2]|0;
     $54 = (($53) + 1)|0;
     HEAP32[$1>>2] = $54;
     $55 = $2;
     $56 = HEAP32[(616)>>2]|0;
     $57 = (_EvalOperand($1,$55,$56,$opnd,0)|0);
     $58 = ($57|0)==(-1);
     if ($58) {
      $0 = -1;
      $127 = $0;
      STACKTOP = sp;return ($127|0);
     }
     $59 = ((($opnd)) + 40|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)!=(0);
     do {
      if ($61) {
       $62 = ((($opnd)) + 56|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)!=(0|0);
       if ($64) {
        $65 = ((($opnd)) + 56|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ((($66)) + 16|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         HEAP32[$opnd>>2] = 1;
         break;
        }
       }
       $70 = (_EmitError(65)|0);
       $0 = $70;
       $127 = $0;
       STACKTOP = sp;return ($127|0);
      }
     } while(0);
     $71 = HEAP32[$opnd>>2]|0;
     $length = $71;
    }
   }
  }
 }
 $72 = HEAP32[$1>>2]|0;
 $73 = $2;
 $74 = (($73) + ($72<<4)|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = HEAP32[$1>>2]|0;
  $79 = $2;
  $80 = (($79) + ($78<<4)|0);
  $81 = ((($80)) + 12|0);
  $82 = HEAP32[$81>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $82;
  $83 = (_EmitErr(209,$vararg_buffer1)|0);
  $0 = $83;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $84 = HEAP32[(560)>>2]|0;
 $85 = $84 >>> 11;
 $86 = $85 & 1;
 $87 = ($86|0)!=(0);
 if ($87) {
  _LstWrite(7,0,0);
 }
 $88 = $2;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($ti)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (_CreateLabel($90,$92,$ti,0)|0);
 $sym = $93;
 $94 = ($93|0)!=(0|0);
 if (!($94)) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $95 = $sym;
 $96 = ((($95)) + 24|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = ($97&65535) >>> 10;
 $99 = $98 & 1;
 $100 = $99&255;
 $101 = $100&255;
 $102 = ($101|0)==(0);
 do {
  if ($102) {
   $103 = $sym;
   $104 = ((($103)) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 192;
   $107 = ($106|0)!=(128);
   if ($107) {
    $108 = $length;
    $109 = ($108|0)!=(-1);
    $110 = HEAP32[$ti>>2]|0;
    if ($109) {
     $111 = $length;
     $112 = Math_imul($110, $111)|0;
     $113 = $sym;
     $114 = ((($113)) + 36|0);
     HEAP32[$114>>2] = $112;
     $115 = $length;
     $116 = $sym;
     $117 = ((($116)) + 40|0);
     HEAP32[$117>>2] = $115;
     $118 = $sym;
     $119 = ((($118)) + 24|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = $120 & -513;
     $122 = $121 | 512;
     HEAP16[$119>>1] = $122;
     break;
    } else {
     $123 = $sym;
     $124 = ((($123)) + 36|0);
     HEAP32[$124>>2] = $110;
     $125 = $sym;
     $126 = ((($125)) + 40|0);
     HEAP32[$126>>2] = 1;
     break;
    }
   }
  }
 } while(0);
 $0 = 0;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function _AddLinnumDataRef($srcfile,$line_num) {
 $srcfile = $srcfile|0;
 $line_num = $line_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $procname = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $procname = sp + 24|0;
 $0 = $srcfile;
 $1 = $line_num;
 $2 = HEAP32[(6100)>>2]|0;
 $3 = ($2|0)==(2);
 $4 = HEAP32[15488>>2]|0;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 & $5;
 do {
  if ($or$cond) {
   $6 = HEAP32[13508>>2]|0;
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP32[13508>>2]|0;
    $9 = ((($8)) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($10)) + 14|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = $12&65535;
    $14 = $0;
    $15 = ($13|0)!=($14|0);
    if (!($15)) {
     $16 = HEAP32[13508>>2]|0;
     $17 = ((($16)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[(584)>>2]|0;
     $20 = ($18|0)!=($19|0);
     if (!($20)) {
      break;
     }
    }
   }
   $21 = HEAP32[13508>>2]|0;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = HEAP32[13508>>2]|0;
    $24 = ((($23)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    if (!($26)) {
     (_InternalError(88010,89)|0);
    }
    $27 = HEAP32[13508>>2]|0;
    $28 = ((($27)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 60|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[13508>>2]|0;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($33) - ($36))|0;
    $38 = HEAP32[13508>>2]|0;
    $39 = ((($38)) + 36|0);
    HEAP32[$39>>2] = $37;
   }
   $40 = HEAP32[15500>>2]|0;
   HEAP32[$vararg_buffer>>2] = $40;
   (_sprintf($procname,88019,$vararg_buffer)|0);
   $41 = (_SymFind($procname)|0);
   HEAP32[13508>>2] = $41;
   $42 = HEAP32[13508>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $44 = (_CreateProc(0,$procname,1)|0);
    HEAP32[13508>>2] = $44;
    $45 = HEAP32[13508>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47 & -2049;
    $49 = $48 | 2048;
    HEAP16[$46>>1] = $49;
    $50 = HEAP32[13508>>2]|0;
    $51 = ((($50)) + 24|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52 & -16385;
    $54 = $53 | 16384;
    HEAP16[$51>>1] = $54;
    $55 = HEAP32[13508>>2]|0;
    _AddPublicData($55);
   } else {
    $56 = HEAP32[15500>>2]|0;
    $57 = (($56) + 1)|0;
    HEAP32[15500>>2] = $57;
   }
   $58 = HEAP32[13508>>2]|0;
   $59 = ((($58)) + 24|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = ($60&65535) >>> 11;
   $62 = $61 & 1;
   $63 = $62&255;
   $64 = $63&255;
   $65 = ($64|0)==(1);
   if ($65) {
    $66 = HEAP32[13508>>2]|0;
    _SetSymSegOfs($66);
    $67 = HEAP8[(556)>>0]|0;
    $68 = HEAP32[13508>>2]|0;
    $69 = ((($68)) + 28|0);
    HEAP8[$69>>0] = $67;
    $70 = HEAP32[(516)>>2]|0;
    $71 = HEAP32[13508>>2]|0;
    $72 = ((($71)) + 48|0);
    HEAP32[$72>>2] = $70;
    $73 = HEAP8[81594>>0]|0;
    $74 = $73&255;
    $75 = ($74|0)==(1);
    if ($75) {
     $76 = (_LclAlloc(16)|0);
     $curr = $76;
     $77 = HEAP32[13508>>2]|0;
     $78 = $curr;
     $79 = ((($78)) + 12|0);
     HEAP32[$79>>2] = $77;
     $80 = (_GetLineNumber()|0);
     $81 = $curr;
     $82 = ((($81)) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80 & 1048575;
     $85 = $83 & -1048576;
     $86 = $85 | $84;
     HEAP32[$82>>2] = $86;
     $87 = $0;
     $88 = $curr;
     $89 = ((($88)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $87 & 4095;
     $92 = $91 << 20;
     $93 = $90 & 1048575;
     $94 = $93 | $92;
     HEAP32[$89>>2] = $94;
     $95 = $curr;
     $96 = ((($95)) + 4|0);
     HEAP32[$96>>2] = 0;
     $97 = $curr;
     _AddLinnumData($97);
    }
   }
  }
 } while(0);
 $98 = $1;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = HEAP8[81594>>0]|0;
  $101 = $100&255;
  $102 = ($101|0)==(0);
  if ($102) {
   STACKTOP = sp;return;
  }
  $103 = HEAP32[13512>>2]|0;
  $104 = $1;
  $105 = ($103|0)==($104|0);
  if ($105) {
   STACKTOP = sp;return;
  }
 }
 $106 = (_LclAlloc(16)|0);
 $curr = $106;
 $107 = $1;
 $108 = $curr;
 $109 = ((($108)) + 4|0);
 HEAP32[$109>>2] = $107;
 $110 = $1;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[4884>>2]|0;
  $113 = ($112|0)==(0);
  $114 = HEAP32[(6100)>>2]|0;
  $115 = ($114|0)==(2);
  $or$cond3 = $113 & $115;
  $116 = HEAP32[15488>>2]|0;
  $117 = ($116|0)!=(0|0);
  $or$cond5 = $or$cond3 & $117;
  if ($or$cond5) {
   $118 = HEAP32[15488>>2]|0;
   $119 = ((($118)) + 24|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = ($120&65535) >>> 7;
   $122 = $121 & 1;
   $123 = $122&255;
   $124 = $123&255;
   $125 = ($124|0)==(0);
   if ($125) {
    $126 = HEAP32[15488>>2]|0;
    $127 = ((($126)) + 24|0);
    $128 = HEAP16[$127>>1]|0;
    $129 = $128 & -16385;
    $130 = $129 | 16384;
    HEAP16[$127>>1] = $130;
    $131 = HEAP32[15488>>2]|0;
    _AddPublicData($131);
   }
  }
  $132 = HEAP32[15488>>2]|0;
  $133 = ($132|0)!=(0|0);
  $134 = HEAP32[15488>>2]|0;
  $135 = HEAP32[13508>>2]|0;
  $136 = $133 ? $134 : $135;
  $137 = $curr;
  $138 = ((($137)) + 12|0);
  HEAP32[$138>>2] = $136;
  $139 = (_GetLineNumber()|0);
  $140 = $curr;
  $141 = ((($140)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $139 & 1048575;
  $144 = $142 & -1048576;
  $145 = $144 | $143;
  HEAP32[$141>>2] = $145;
  $146 = $0;
  $147 = $curr;
  $148 = ((($147)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $146 & 4095;
  $151 = $150 << 20;
  $152 = $149 & 1048575;
  $153 = $152 | $151;
  HEAP32[$148>>2] = $153;
  $154 = HEAP32[13508>>2]|0;
  $155 = ($154|0)!=(0|0);
  if ($155) {
   $156 = HEAP32[13508>>2]|0;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)!=(0|0);
   if (!($159)) {
    (_InternalError(88010,156)|0);
   }
   $160 = HEAP32[13508>>2]|0;
   $161 = ((($160)) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ((($162)) + 60|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ((($164)) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = HEAP32[13508>>2]|0;
   $168 = ((($167)) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($166) - ($169))|0;
   $171 = HEAP32[13508>>2]|0;
   $172 = ((($171)) + 36|0);
   HEAP32[$172>>2] = $170;
   HEAP32[13508>>2] = 0;
  }
  $173 = HEAP32[15488>>2]|0;
  $174 = ($173|0)!=(0|0);
  if ($174) {
   $175 = HEAP32[15488>>2]|0;
   $176 = ((($175)) + 60|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ((($177)) + 41|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = ($180|0)!=(0);
   if ($181) {
    $182 = $curr;
    _AddLinnumData($182);
    $183 = (_LclAlloc(16)|0);
    $curr = $183;
    $184 = (_GetLineNumber()|0);
    $185 = $curr;
    $186 = ((($185)) + 4|0);
    HEAP32[$186>>2] = $184;
    $187 = (_GetCurrOffset()|0);
    $188 = $curr;
    $189 = ((($188)) + 8|0);
    HEAP32[$189>>2] = $187;
    $190 = $0;
    $191 = $curr;
    $192 = ((($191)) + 12|0);
    HEAP32[$192>>2] = $190;
   }
  }
 } else {
  $193 = (_GetCurrOffset()|0);
  $194 = $curr;
  $195 = ((($194)) + 8|0);
  HEAP32[$195>>2] = $193;
  $196 = $0;
  $197 = $curr;
  $198 = ((($197)) + 12|0);
  HEAP32[$198>>2] = $196;
 }
 $199 = $1;
 HEAP32[13512>>2] = $199;
 $200 = HEAP32[(6100)>>2]|0;
 $201 = ($200|0)==(1);
 if ($201) {
  $202 = $curr;
  _omf_check_flush($202);
 }
 $203 = HEAP32[(584)>>2]|0;
 $204 = ((($203)) + 60|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ((($205)) + 67|0);
 $207 = HEAP8[$206>>0]|0;
 $208 = ($207&255) >>> 6;
 $209 = $208 & 1;
 $210 = $209&255;
 $211 = ($210|0)==(0);
 if ($211) {
  $212 = HEAP32[(584)>>2]|0;
  $213 = ((($212)) + 60|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($214)) + 67|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216 & -65;
  $218 = $217 | 64;
  HEAP8[$215>>0] = $218;
  $219 = HEAP32[(584)>>2]|0;
  $220 = HEAP32[(584)>>2]|0;
  $221 = ((($220)) + 60|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($222)) + 52|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (_TypeFromClassName($219,$224)|0);
  $226 = ($225|0)!=(1);
  if ($226) {
   $227 = HEAP32[(584)>>2]|0;
   $228 = ((($227)) + 4|0);
   $229 = HEAP32[$228>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $229;
   _EmitWarn(2,187,$vararg_buffer6);
  }
 }
 $230 = $curr;
 _AddLinnumData($230);
 STACKTOP = sp;return;
}
function _QueueDeleteLinnum($queue) {
 $queue = $queue|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $curr = $4;
 while(1) {
  $5 = $curr;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $curr;
  $8 = HEAP32[$7>>2]|0;
  $next = $8;
  $9 = $next;
  $curr = $9;
 }
 STACKTOP = sp;return;
}
function _LinnumFini() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13508>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[13508>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[13508>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) - ($11))|0;
 $13 = HEAP32[13508>>2]|0;
 $14 = ((($13)) + 36|0);
 HEAP32[$14>>2] = $12;
 return;
}
function _LinnumInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[13512>>2] = 0;
 HEAP32[13508>>2] = 0;
 return;
}
function _AddLinnumData($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = HEAP32[(6100)>>2]|0;
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = HEAP32[(584)>>2]|0;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $q = $7;
  $8 = $q;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = (_LclAlloc(8)|0);
   $q = $10;
   $11 = $q;
   $12 = HEAP32[(584)>>2]|0;
   $13 = ((($12)) + 60|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 32|0);
   HEAP32[$15>>2] = $11;
   $16 = $q;
   HEAP32[$16>>2] = 0;
  }
 } else {
  $q = 4888;
 }
 $17 = $0;
 HEAP32[$17>>2] = 0;
 $18 = $q;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 $21 = $0;
 if ($20) {
  $22 = $q;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $q;
  HEAP32[$24>>2] = $21;
  STACKTOP = sp;return;
 } else {
  $25 = $q;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$27>>2] = $21;
  $28 = $0;
  $29 = $q;
  $30 = ((($29)) + 4|0);
  HEAP32[$30>>2] = $28;
  STACKTOP = sp;return;
 }
}
function _LstWrite($type,$oldofs,$value) {
 $type = $type|0;
 $oldofs = $oldofs|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $idx = 0;
 var $len = 0, $len2 = 0, $ll = 0, $newofs = 0, $next = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond6 = 0, $p1 = 0, $p2 = 0, $pSrcline = 0, $pll = 0, $srcfile = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 24|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer = sp;
 $ll = sp + 72|0;
 $0 = $type;
 $1 = $oldofs;
 $2 = $value;
 $3 = $2;
 $sym = $3;
 $4 = HEAP32[(560)>>2]|0;
 $5 = $4 >>> 11;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = HEAP32[(380)>>2]|0;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $10 = HEAP8[(550)>>0]|0;
 $11 = $10&255;
 $12 = $11 & 1;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[(596)>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[(560)>>2]|0;
  $17 = $16 >>> 14;
  $18 = $17 & 1;
  $19 = ($18|0)==(0);
  if ($19) {
   STACKTOP = sp;return;
  }
 }
 $20 = HEAP8[87007>>0]|0;
 $21 = ($20<<24>>24)!=(0);
 $22 = HEAP32[(552)>>2]|0;
 $cond = ($22|0)==(0);
 $or$cond6 = $21 & $cond;
 if ($or$cond6) {
  STACKTOP = sp;return;
 }
 $23 = HEAP8[(550)>>0]|0;
 $24 = $23&255;
 $25 = $24 | 1;
 $26 = $25&255;
 HEAP8[(550)>>0] = $26;
 $27 = HEAP32[(600)>>2]|0;
 $pSrcline = $27;
 $28 = HEAP32[4884>>2]|0;
 $29 = ($28>>>0)>(0);
 if ($29) {
  $30 = HEAP8[87036>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = HEAP32[(596)>>2]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = HEAP8[(550)>>0]|0;
    $36 = $35&255;
    $37 = $36 & 2;
    $38 = ($37|0)!=(0);
    if (!($38)) {
     $39 = HEAP32[9080>>2]|0;
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[13516>>2] = $41;
    }
    $42 = HEAP32[9080>>2]|0;
    $43 = ((($42)) + 12|0);
    $pSrcline = $43;
    $44 = HEAP32[(604)>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = HEAP32[9080>>2]|0;
     $47 = ((($46)) + 12|0);
     $48 = HEAP32[9080>>2]|0;
     $49 = ((($48)) + 12|0);
     $50 = (_strlen($49)|0);
     $51 = (($47) + ($50)|0);
     HEAP8[$51>>0] = 59;
     HEAP32[(604)>>2] = 0;
    }
   }
   $52 = HEAP32[(380)>>2]|0;
   $53 = HEAP32[13516>>2]|0;
   (_fseek($52,$53,0)|0);
  }
 }
 HEAP32[$ll>>2] = 0;
 $54 = ((($ll)) + 4|0);
 dest=$54; stop=dest+32|0; do { HEAP8[dest>>0]=32|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $55 = (_get_curr_srcfile()|0);
 $srcfile = $55;
 $56 = $0;
 L25: do {
  switch ($56|0) {
  case 0:  {
   $57 = HEAP32[4884>>2]|0;
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = HEAP8[(6093)>>0]|0;
    $60 = $59&255;
    $61 = ($60|0)==(0);
    if (!($61)) {
     label = 17;
    }
   } else {
    label = 17;
   }
   break;
  }
  case 1:  {
   label = 17;
   break;
  }
  case 2:  {
   $idx = 1;
   $177 = $sym;
   $178 = ((($177)) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ($179|0)!=(0|0);
   if ($180) {
    $181 = $sym;
    $182 = ((($181)) + 12|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = HEAP32[(584)>>2]|0;
    $185 = ($183|0)==($184|0);
    if ($185) {
     $186 = ((($ll)) + 4|0);
     $187 = (_GetCurrOffset()|0);
     HEAP32[$vararg_buffer13>>2] = $187;
     (_sprintf($186,88027,$vararg_buffer13)|0);
     $idx = 10;
    }
   }
   $188 = $idx;
   $189 = ((($ll)) + 4|0);
   $190 = (($189) + ($188)|0);
   HEAP8[$190>>0] = 61;
   $191 = $sym;
   $192 = ((($191)) + 36|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ($193|0)!=(0);
   do {
    if ($194) {
     $195 = $sym;
     $196 = ((($195)) + 36|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)!=(-1);
     if (!($198)) {
      $199 = $sym;
      $200 = ((($199)) + 8|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ($201|0)>=(0);
      if (!($202)) {
       label = 41;
       break;
      }
     }
     $203 = $idx;
     $204 = (($203) + 2)|0;
     $205 = ((($ll)) + 4|0);
     $206 = (($205) + ($204)|0);
     $207 = $sym;
     $208 = ((($207)) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)<(0);
     $211 = $210 << 31 >> 31;
     $212 = $sym;
     $213 = ((($212)) + 36|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)<(0);
     $215 << 31 >> 31;
     $216 = (_i64Add(($209|0),($211|0),0,($214|0))|0);
     $217 = tempRet0;
     $218 = $vararg_buffer16;
     $219 = $218;
     HEAP32[$219>>2] = $216;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     (_sprintf($206,88037,$vararg_buffer16)|0);
    } else {
     label = 41;
    }
   } while(0);
   if ((label|0) == 41) {
    $222 = $idx;
    $223 = (($222) + 2)|0;
    $224 = ((($ll)) + 4|0);
    $225 = (($224) + ($223)|0);
    $226 = $sym;
    $227 = ((($226)) + 8|0);
    $228 = HEAP32[$227>>2]|0;
    HEAP32[$vararg_buffer19>>2] = $228;
    (_sprintf($225,88045,$vararg_buffer19)|0);
   }
   $229 = ((($ll)) + 4|0);
   $230 = ((($229)) + 28|0);
   HEAP8[$230>>0] = 32;
   break;
  }
  case 3:  {
   $231 = ((($ll)) + 4|0);
   $232 = ((($231)) + 1|0);
   HEAP8[$232>>0] = 61;
   $233 = $sym;
   $234 = ((($233)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $p1 = $235;
   $236 = ((($ll)) + 4|0);
   $237 = ((($236)) + 3|0);
   $p2 = $237;
   $pll = $ll;
   while(1) {
    $238 = $p1;
    $239 = HEAP8[$238>>0]|0;
    $240 = ($239<<24>>24)!=(0);
    if (!($240)) {
     break L25;
    }
    $241 = $p2;
    $242 = $pll;
    $243 = ((($242)) + 4|0);
    $244 = ((($243)) + 28|0);
    $245 = ($241>>>0)>=($244>>>0);
    if ($245) {
     $246 = STACKTOP; STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
     $next = $246;
     $247 = $next;
     $248 = $pll;
     HEAP32[$248>>2] = $247;
     $249 = $next;
     $pll = $249;
     $250 = $pll;
     HEAP32[$250>>2] = 0;
     $251 = $pll;
     $252 = ((($251)) + 4|0);
     dest=$252; stop=dest+32|0; do { HEAP8[dest>>0]=32|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     $253 = $pll;
     $254 = ((($253)) + 4|0);
     $255 = ((($254)) + 3|0);
     $p2 = $255;
    }
    $256 = $p1;
    $257 = ((($256)) + 1|0);
    $p1 = $257;
    $258 = HEAP8[$256>>0]|0;
    $259 = $p2;
    $260 = ((($259)) + 1|0);
    $p2 = $260;
    HEAP8[$259>>0] = $258;
   }
   break;
  }
  case 8:  {
   $261 = ((($ll)) + 4|0);
   $262 = ((($261)) + 1|0);
   HEAP8[$262>>0] = 62;
   $263 = $2;
   $pSrcline = $263;
   break;
  }
  case 7:  {
   $264 = (_GetCurrOffset()|0);
   $1 = $264;
   label = 50;
   break;
  }
  case 6:  {
   label = 50;
   break;
  }
  case 4:  {
   $269 = HEAP32[(584)>>2]|0;
   $270 = ($269|0)!=(0|0);
   $271 = $2;
   $272 = ($271|0)!=(0|0);
   $or$cond3 = $270 | $272;
   if ($or$cond3) {
    $273 = ((($ll)) + 4|0);
    $274 = $1;
    HEAP32[$vararg_buffer25>>2] = $274;
    (_sprintf($273,88027,$vararg_buffer25)|0);
    $275 = ((($ll)) + 4|0);
    $276 = ((($275)) + 8|0);
    HEAP8[$276>>0] = 32;
   }
   break;
  }
  default: {
   $277 = $pSrcline;
   $278 = HEAP8[$277>>0]|0;
   $279 = $278 << 24 >> 24;
   $280 = ($279|0)==(0);
   $281 = HEAP32[(604)>>2]|0;
   $282 = ($281|0)==(0|0);
   $or$cond5 = $280 & $282;
   if ($or$cond5) {
    $283 = $srcfile;
    $284 = HEAP32[(580)>>2]|0;
    $285 = ($283|0)==($284|0);
    if ($285) {
     $286 = HEAP32[(380)>>2]|0;
     (_fwrite(88051,1,1,$286)|0);
     $287 = HEAP32[13516>>2]|0;
     $288 = (($287) + 1)|0;
     HEAP32[13516>>2] = $288;
     STACKTOP = sp;return;
    }
   }
  }
  }
 } while(0);
 L56: do {
  if ((label|0) == 17) {
   $62 = (_GetCurrOffset()|0);
   $newofs = $62;
   $63 = ((($ll)) + 4|0);
   $64 = $1;
   HEAP32[$vararg_buffer>>2] = $64;
   (_sprintf($63,88027,$vararg_buffer)|0);
   $65 = ((($ll)) + 4|0);
   $66 = ((($65)) + 8|0);
   HEAP8[$66>>0] = 32;
   $67 = HEAP32[(584)>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    $69 = HEAP8[(6093)>>0]|0;
    $70 = ($69<<24>>24)!=(0);
    $71 = HEAP32[4884>>2]|0;
    if ($70) {
     $72 = ($71>>>0)>(0);
     if ($72) {
      break;
     }
    } else {
     $73 = ($71|0)==(0);
     if ($73) {
      break;
     }
    }
    $len = 9;
    $74 = ((($ll)) + 4|0);
    $75 = ((($74)) + 8|0);
    $76 = ((($75)) + 2|0);
    $p2 = $76;
    $77 = HEAP32[(584)>>2]|0;
    $78 = ((($77)) + 60|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($79)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0|0);
    if (!($82)) {
     $83 = HEAP32[(584)>>2]|0;
     $84 = ((($83)) + 60|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($85)) + 67|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = ($87&255) >>> 5;
     $89 = $88 & 1;
     $90 = $89&255;
     $91 = ($90|0)==(0);
     if (!($91)) {
      $106 = HEAP32[(584)>>2]|0;
      $107 = ((($106)) + 60|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($108)) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = HEAP32[(584)>>2]|0;
      $112 = ((($111)) + 60|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($113)) + 4|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($110) - ($115))|0;
      $117 = $newofs;
      $118 = $1;
      $119 = (($117) - ($118))|0;
      $120 = (($116) - ($119))|0;
      $idx = $120;
      $121 = HEAP32[(6100)>>2]|0;
      $122 = ($121|0)==(1);
      $123 = $idx;
      L66: do {
       if ($122) {
        $124 = HEAP32[14996>>2]|0;
        $125 = (($123) + ($124))|0;
        $126 = ($125|0)<(0);
        if ($126) {
         break L56;
        }
        while(1) {
         $127 = $idx;
         $128 = ($127|0)<(0);
         $129 = $len;
         $130 = ($129|0)!=(0);
         $131 = $128 ? $130 : 0;
         if (!($131)) {
          break L66;
         }
         $132 = $p2;
         $133 = $idx;
         $134 = HEAP32[14996>>2]|0;
         $135 = (($133) + ($134))|0;
         $136 = HEAP32[(584)>>2]|0;
         $137 = ((($136)) + 60|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ((($138)) + 12|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = (($140) + ($135)|0);
         $142 = HEAP8[$141>>0]|0;
         $143 = $142&255;
         HEAP32[$vararg_buffer7>>2] = $143;
         (_sprintf($132,88032,$vararg_buffer7)|0);
         $144 = $p2;
         $145 = ((($144)) + 2|0);
         $p2 = $145;
         $146 = $idx;
         $147 = (($146) + 1)|0;
         $idx = $147;
         $148 = $1;
         $149 = (($148) + 1)|0;
         $1 = $149;
         $150 = $len;
         $151 = (($150) + -1)|0;
         $len = $151;
        }
       } else {
        $152 = ($123|0)<(0);
        if ($152) {
         $idx = 0;
        }
       }
      } while(0);
      while(1) {
       $153 = $1;
       $154 = $newofs;
       $155 = ($153>>>0)<($154>>>0);
       $156 = $len;
       $157 = ($156|0)!=(0);
       $158 = $155 ? $157 : 0;
       $159 = $p2;
       if (!($158)) {
        break;
       }
       $160 = $idx;
       $161 = HEAP32[(584)>>2]|0;
       $162 = ((($161)) + 60|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ((($163)) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($165) + ($160)|0);
       $167 = HEAP8[$166>>0]|0;
       $168 = $167&255;
       HEAP32[$vararg_buffer10>>2] = $168;
       (_sprintf($159,88032,$vararg_buffer10)|0);
       $169 = $p2;
       $170 = ((($169)) + 2|0);
       $p2 = $170;
       $171 = $idx;
       $172 = (($171) + 1)|0;
       $idx = $172;
       $173 = $1;
       $174 = (($173) + 1)|0;
       $1 = $174;
       $175 = $len;
       $176 = (($175) + -1)|0;
       $len = $176;
      }
      HEAP8[$159>>0] = 32;
      break;
     }
    }
    while(1) {
     $92 = $1;
     $93 = $newofs;
     $94 = ($92>>>0)<($93>>>0);
     $95 = $len;
     $96 = ($95|0)!=(0);
     $97 = $94 ? $96 : 0;
     if (!($97)) {
      break L56;
     }
     $98 = $p2;
     $99 = ((($98)) + 1|0);
     $p2 = $99;
     HEAP8[$98>>0] = 48;
     $100 = $p2;
     $101 = ((($100)) + 1|0);
     $p2 = $101;
     HEAP8[$100>>0] = 48;
     $102 = $1;
     $103 = (($102) + 1)|0;
     $1 = $103;
     $104 = $len;
     $105 = (($104) + -1)|0;
     $len = $105;
    }
   }
  }
  else if ((label|0) == 50) {
   $265 = ((($ll)) + 4|0);
   $266 = $1;
   HEAP32[$vararg_buffer22>>2] = $266;
   (_sprintf($265,88027,$vararg_buffer22)|0);
   $267 = ((($ll)) + 4|0);
   $268 = ((($267)) + 8|0);
   HEAP8[$268>>0] = 32;
  }
 } while(0);
 $289 = HEAP32[4884>>2]|0;
 $290 = ($289|0)==(0);
 if ($290) {
  label = 58;
 } else {
  $291 = HEAP8[87036>>0]|0;
  $292 = $291&255;
  $293 = ($292|0)==(0);
  if ($293) {
   label = 58;
  } else {
   $idx = 28;
  }
 }
 if ((label|0) == 58) {
  $idx = 32;
  $294 = HEAP32[(596)>>2]|0;
  $295 = ($294|0)!=(0);
  if ($295) {
   $296 = ((($ll)) + 4|0);
   $297 = ((($296)) + 28|0);
   HEAP8[$297>>0] = 42;
  }
  $298 = HEAP8[87007>>0]|0;
  $299 = ($298<<24>>24)!=(0);
  if ($299) {
   $300 = ((($ll)) + 4|0);
   $301 = ((($300)) + 29|0);
   $302 = HEAP8[87007>>0]|0;
   $303 = $302&255;
   HEAP32[$vararg_buffer28>>2] = $303;
   $304 = (_sprintf($301,88053,$vararg_buffer28)|0);
   $len = $304;
   $305 = $len;
   $306 = (29 + ($305))|0;
   $307 = ((($ll)) + 4|0);
   $308 = (($307) + ($306)|0);
   HEAP8[$308>>0] = 32;
  }
  $309 = $srcfile;
  $310 = HEAP32[(580)>>2]|0;
  $311 = ($309|0)!=($310|0);
  if ($311) {
   $312 = ((($ll)) + 4|0);
   $313 = ((($312)) + 30|0);
   HEAP8[$313>>0] = 67;
  }
 }
 $314 = ((($ll)) + 4|0);
 $315 = $idx;
 $316 = HEAP32[(380)>>2]|0;
 (_fwrite($314,1,$315,$316)|0);
 $317 = $pSrcline;
 $318 = (_strlen($317)|0);
 $len = $318;
 $319 = HEAP32[(604)>>2]|0;
 $320 = ($319|0)!=(0|0);
 if ($320) {
  $321 = HEAP32[(604)>>2]|0;
  $322 = (_strlen($321)|0);
  $323 = $322;
 } else {
  $323 = 0;
 }
 $len2 = $323;
 $324 = $len;
 $325 = (32 + ($324))|0;
 $326 = $len2;
 $327 = (($325) + ($326))|0;
 $328 = (($327) + 1)|0;
 $329 = HEAP32[13516>>2]|0;
 $330 = (($329) + ($328))|0;
 HEAP32[13516>>2] = $330;
 $331 = HEAP32[4884>>2]|0;
 $332 = ($331|0)==(0);
 if ($332) {
  label = 69;
 } else {
  $333 = HEAP8[87036>>0]|0;
  $334 = $333&255;
  $335 = ($334|0)==(0);
  if ($335) {
   label = 69;
  }
 }
 if ((label|0) == 69) {
  $336 = $len;
  $337 = ($336|0)!=(0);
  if ($337) {
   $338 = $pSrcline;
   $339 = $len;
   $340 = HEAP32[(380)>>2]|0;
   (_fwrite($338,1,$339,$340)|0);
  }
  $341 = $len2;
  $342 = ($341|0)!=(0);
  if ($342) {
   $343 = HEAP32[(604)>>2]|0;
   $344 = $len2;
   $345 = HEAP32[(380)>>2]|0;
   (_fwrite($343,1,$344,$345)|0);
  }
  $346 = HEAP32[(380)>>2]|0;
  (_fwrite(88051,1,1,$346)|0);
 }
 $347 = HEAP32[$ll>>2]|0;
 $pll = $347;
 while(1) {
  $348 = $pll;
  $349 = ($348|0)!=(0|0);
  if (!($349)) {
   break;
  }
  $350 = $pll;
  $351 = ((($350)) + 4|0);
  $352 = HEAP32[(380)>>2]|0;
  (_fwrite($351,1,32,$352)|0);
  $353 = HEAP32[(380)>>2]|0;
  (_fwrite(88051,1,1,$353)|0);
  $354 = HEAP32[13516>>2]|0;
  $355 = (($354) + 33)|0;
  HEAP32[13516>>2] = $355;
  $356 = $pll;
  $357 = HEAP32[$356>>2]|0;
  $pll = $357;
 }
 STACKTOP = sp;return;
}
function _LstWriteSrcLine() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _LstWrite(5,0,0);
 return;
}
function _LstPrintf($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = $format;
 $1 = HEAP32[(380)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $3 = HEAP32[(380)>>2]|0;
 $4 = $0;
 $5 = (_vfprintf($3,$4,$args)|0);
 $6 = HEAP32[13516>>2]|0;
 $7 = (($6) + ($5))|0;
 HEAP32[13516>>2] = $7;
 STACKTOP = sp;return;
}
function _LstNL() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(380)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(380)>>2]|0;
 (_fwrite(88051,1,1,$2)|0);
 $3 = HEAP32[13516>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[13516>>2] = $4;
 return;
}
function _LstSetPosition() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(380)>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = HEAP32[4884>>2]|0;
 $3 = ($2>>>0)>(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  return;
 }
 $4 = HEAP8[87036>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[(596)>>2]|0;
 $8 = ($7|0)==(0);
 $or$cond3 = $6 & $8;
 if (!($or$cond3)) {
  return;
 }
 $9 = HEAP32[9080>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[13516>>2] = $11;
 $12 = HEAP32[(380)>>2]|0;
 $13 = HEAP32[13516>>2]|0;
 (_fseek($12,$13,0)|0);
 $14 = HEAP8[(550)>>0]|0;
 $15 = $14&255;
 $16 = $15 | 2;
 $17 = $16&255;
 HEAP8[(550)>>0] = $17;
 return;
}
function _LstWriteCRef() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $SymCount = 0, $dir = 0, $i = 0, $idx = 0, $ps = 0, $q = 0, $queues = 0, $si = 0, $syms = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $queues = sp + 8|0;
 $0 = HEAP32[(380)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP8[(6092)>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)==(1);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[(380)>>2]|0;
 (_fseek($5,0,2)|0);
 $6 = (_SymGetCount()|0);
 $SymCount = $6;
 $7 = $SymCount;
 $8 = $7<<2;
 $9 = (_MemAlloc($8)|0);
 $syms = $9;
 $10 = $syms;
 _SymGetAll($10);
 $11 = $syms;
 $12 = $SymCount;
 _qsort($11,$12,4,217);
 dest=$queues; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $SymCount;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $syms;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21&65535) >>> 8;
  $23 = $22 & 1;
  $24 = $23&255;
  $25 = $24&255;
  $26 = ($25|0)==(0);
  L10: do {
   if (!($26)) {
    $27 = $i;
    $28 = $syms;
    $29 = (($28) + ($27<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    L12: do {
     switch ($32|0) {
     case 7:  {
      $33 = $i;
      $34 = $syms;
      $35 = (($34) + ($33<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($36)) + 60|0);
      $38 = HEAP32[$37>>2]|0;
      $si = $38;
      $39 = $i;
      $40 = $syms;
      $41 = (($40) + ($39<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ((($42)) + 40|0);
      $44 = ((($43)) + 2|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45&255;
      switch ($46|0) {
      case 4:  {
       $idx = 2;
       break L12;
       break;
      }
      case 3:  {
       $idx = 3;
       break L12;
       break;
      }
      case 2: case 1:  {
       $idx = 1;
       break L12;
       break;
      }
      default: {
       break L10;
      }
      }
      break;
     }
     case 9:  {
      $idx = 0;
      break;
     }
     case 3:  {
      $idx = 4;
      break;
     }
     case 4:  {
      $idx = 5;
      break;
     }
     case 2: case 1:  {
      $47 = $i;
      $48 = $syms;
      $49 = (($48) + ($47<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($50)) + 24|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = ($52&65535) >>> 11;
      $54 = $53 & 1;
      $55 = $54&255;
      $56 = ($55<<24>>24)!=(0);
      if (!($56)) {
       break L10;
      }
      $idx = 6;
      break;
     }
     default: {
      break L10;
     }
     }
    } while(0);
    $57 = $idx;
    $58 = (($queues) + ($57<<3)|0);
    $q = $58;
    $59 = $q;
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    $62 = $i;
    $63 = $syms;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    if ($61) {
     $66 = $q;
     HEAP32[$66>>2] = $65;
    } else {
     $67 = $q;
     $68 = ((($67)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 64|0);
     HEAP32[$70>>2] = $65;
    }
    $71 = $i;
    $72 = $syms;
    $73 = (($72) + ($71<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $q;
    $76 = ((($75)) + 4|0);
    HEAP32[$76>>2] = $74;
    $77 = $i;
    $78 = $syms;
    $79 = (($78) + ($77<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((($80)) + 64|0);
    HEAP32[$81>>2] = 0;
   }
  } while(0);
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $idx = 0;
 while(1) {
  $84 = $idx;
  $85 = ($84>>>0)<(7);
  if (!($85)) {
   break;
  }
  $86 = $idx;
  $87 = (13520 + (($86*12)|0)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = (($queues) + ($89<<3)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)!=(0|0);
  L33: do {
   if ($92) {
    $93 = $idx;
    $94 = (13520 + (($93*12)|0)|0);
    $95 = ((($94)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)!=(0|0);
    L35: do {
     if ($97) {
      $98 = $idx;
      $99 = (13520 + (($98*12)|0)|0);
      $100 = ((($99)) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $ps = $101;
      while(1) {
       $102 = $ps;
       $103 = HEAP16[$102>>1]|0;
       $104 = ($103<<16>>16)!=(0);
       if (!($104)) {
        break L35;
       }
       $105 = $ps;
       $106 = HEAP16[$105>>1]|0;
       $107 = $106 << 16 >> 16;
       $108 = (13604 + ($107<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $ps;
       $111 = $idx;
       $112 = (13520 + (($111*12)|0)|0);
       $113 = ((($112)) + 4|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($110|0)==($114|0);
       $116 = $115 ? 2 : 0;
       _LstCaption($109,$116);
       $117 = $ps;
       $118 = ((($117)) + 2|0);
       $ps = $118;
      }
     }
    } while(0);
    $119 = $idx;
    $120 = (13520 + (($119*12)|0)|0);
    $121 = HEAP16[$120>>1]|0;
    $122 = $121 << 16 >> 16;
    $123 = (($queues) + ($122<<3)|0);
    $124 = HEAP32[$123>>2]|0;
    $dir = $124;
    while(1) {
     $125 = $dir;
     $126 = ($125|0)!=(0|0);
     if (!($126)) {
      break L33;
     }
     $127 = $idx;
     $128 = (13520 + (($127*12)|0)|0);
     $129 = ((($128)) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $dir;
     $132 = $idx;
     $133 = (13520 + (($132*12)|0)|0);
     $134 = ((($133)) + 2|0);
     $135 = HEAP16[$134>>1]|0;
     $136 = $135 << 16 >> 16;
     $137 = $136 & 1;
     $138 = ($137|0)!=(0);
     $139 = ((($queues)) + 32|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $138 ? $140 : 0;
     FUNCTION_TABLE_viii[$130 & 255]($131,$141,0);
     $142 = $dir;
     $143 = ((($142)) + 64|0);
     $144 = HEAP32[$143>>2]|0;
     $dir = $144;
    }
   }
  } while(0);
  $145 = $idx;
  $146 = (($145) + 1)|0;
  $idx = $146;
 }
 $147 = HEAP32[(13852)>>2]|0;
 _LstCaption($147,2);
 $148 = HEAP32[(13856)>>2]|0;
 _LstCaption($148,0);
 $i = 0;
 while(1) {
  $149 = $i;
  $150 = $SymCount;
  $151 = ($149>>>0)<($150>>>0);
  if (!($151)) {
   break;
  }
  $152 = $i;
  $153 = $syms;
  $154 = (($153) + ($152<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ((($155)) + 24|0);
  $157 = HEAP16[$156>>1]|0;
  $158 = ($157&65535) >>> 8;
  $159 = $158 & 1;
  $160 = $159&255;
  $161 = $160&255;
  $162 = ($161|0)==(1);
  if ($162) {
   $163 = $i;
   $164 = $syms;
   $165 = (($164) + ($163<<2)|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ((($166)) + 24|0);
   $168 = HEAP16[$167>>1]|0;
   $169 = ($168&65535) >>> 11;
   $170 = $169 & 1;
   $171 = $170&255;
   $172 = $171&255;
   $173 = ($172|0)==(0);
   if ($173) {
    $174 = $i;
    $175 = $syms;
    $176 = (($175) + ($174<<2)|0);
    $177 = HEAP32[$176>>2]|0;
    _log_symbol($177);
   }
  }
  $178 = $i;
  $179 = (($178) + 1)|0;
  $i = $179;
 }
 _LstNL();
 $180 = $syms;
 _MemFree($180);
 STACKTOP = sp;return;
}
function _ListingDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $directive = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $directive = $7;
 $8 = $1;
 $9 = (($8) + 1)|0;
 $1 = $9;
 $10 = $directive;
 L1: do {
  switch ($10|0) {
  case 222:  {
   $11 = HEAP32[(380)>>2]|0;
   $12 = ($11|0)!=(0|0);
   if ($12) {
    $13 = HEAP32[(560)>>2]|0;
    $14 = $13 & -2049;
    $15 = $14 | 2048;
    HEAP32[(560)>>2] = $15;
   }
   break;
  }
  case 220:  {
   $16 = HEAP32[(560)>>2]|0;
   $17 = $16 & -4097;
   $18 = $17 | 4096;
   HEAP32[(560)>>2] = $18;
   break;
  }
  case 231: case 226:  {
   $19 = HEAP32[(560)>>2]|0;
   $20 = $19 & -2049;
   HEAP32[(560)>>2] = $20;
   break;
  }
  case 230: case 225:  {
   $21 = $1;
   $22 = HEAP32[(616)>>2]|0;
   $23 = ($21|0)==($22|0);
   if ($23) {
    $24 = HEAP32[(560)>>2]|0;
    $25 = $24 & -4097;
    HEAP32[(560)>>2] = $25;
    break L1;
   }
   while(1) {
    $26 = $1;
    $27 = $2;
    $28 = (($27) + ($26<<4)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = ($30|0)!=(8);
    $32 = $1;
    $33 = $2;
    $34 = (($33) + ($32<<4)|0);
    if ($31) {
     label = 9;
     break;
    }
    $38 = ((($34)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (_SymLookup($39)|0);
    $sym = $40;
    $41 = $sym;
    $42 = ((($41)) + 24|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 & -257;
    HEAP16[$42>>1] = $44;
    $45 = $1;
    $46 = (($45) + 1)|0;
    $1 = $46;
    $47 = $1;
    $48 = HEAP32[(616)>>2]|0;
    $49 = ($47|0)<($48|0);
    if ($49) {
     $50 = $1;
     $51 = $2;
     $52 = (($51) + ($50<<4)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = ($54|0)!=(44);
     $56 = $1;
     if ($55) {
      label = 12;
      break;
     }
     $62 = HEAP32[(616)>>2]|0;
     $63 = (($62) - 1)|0;
     $64 = ($56|0)<($63|0);
     if ($64) {
      $65 = $1;
      $66 = (($65) + 1)|0;
      $1 = $66;
     }
    }
    $67 = $1;
    $68 = HEAP32[(616)>>2]|0;
    $69 = ($67|0)<($68|0);
    if (!($69)) {
     break L1;
    }
   }
   if ((label|0) == 9) {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP32[$vararg_buffer>>2] = $36;
    $37 = (_EmitErr(209,$vararg_buffer)|0);
    $0 = $37;
    $131 = $0;
    STACKTOP = sp;return ($131|0);
   }
   else if ((label|0) == 12) {
    $57 = $2;
    $58 = (($57) + ($56<<4)|0);
    $59 = ((($58)) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $60;
    $61 = (_EmitErr(39,$vararg_buffer1)|0);
    $0 = $61;
    $131 = $0;
    STACKTOP = sp;return ($131|0);
   }
   break;
  }
  case 223:  {
   $70 = HEAP32[(380)>>2]|0;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = HEAP32[(560)>>2]|0;
    $73 = $72 & -2049;
    $74 = $73 | 2048;
    HEAP32[(560)>>2] = $74;
   }
   $75 = HEAP32[(560)>>2]|0;
   $76 = $75 & -16385;
   $77 = $76 | 16384;
   HEAP32[(560)>>2] = $77;
   label = 19;
   break;
  }
  case 221: case 224:  {
   label = 19;
   break;
  }
  case 228: case 227:  {
   $81 = HEAP32[(560)>>2]|0;
   $82 = $81 & -8193;
   HEAP32[(560)>>2] = $82;
   break;
  }
  case 229:  {
   $83 = HEAP32[(560)>>2]|0;
   $84 = $83 >>> 13;
   $85 = $84 & 1;
   $86 = ($85|0)!=(0);
   $87 = $86 ^ 1;
   $88 = $87&1;
   $89 = HEAP32[(560)>>2]|0;
   $90 = $88 & 1;
   $91 = $90 << 13;
   $92 = $89 & -8193;
   $93 = $92 | $91;
   HEAP32[(560)>>2] = $93;
   break;
  }
  default: {
   $94 = $1;
   $95 = $2;
   $96 = (($95) + ($94<<4)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($98|0)==(58);
   if (!($99)) {
    $100 = HEAP32[66812>>2]|0;
    $101 = ($100|0)!=(0|0);
    if ($101) {
     $102 = (_EmitError(141)|0);
     $0 = $102;
     $131 = $0;
     STACKTOP = sp;return ($131|0);
    }
    $103 = HEAP32[4884>>2]|0;
    $104 = ($103|0)==(0);
    if ($104) {
     $105 = $1;
     $106 = (($105) - 1)|0;
     $107 = $2;
     $108 = (($107) + ($106<<4)|0);
     $109 = ((($108)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $110;
     _EmitWarn(4,128,$vararg_buffer4);
    }
    while(1) {
     $111 = $1;
     $112 = $2;
     $113 = (($112) + ($111<<4)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = ($115|0)!=(0);
     if (!($116)) {
      break L1;
     }
     $117 = $1;
     $118 = (($117) + 1)|0;
     $1 = $118;
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 19) {
  $78 = HEAP32[(560)>>2]|0;
  $79 = $78 & -8193;
  $80 = $79 | 8192;
  HEAP32[(560)>>2] = $80;
 }
 $119 = $1;
 $120 = $2;
 $121 = (($120) + ($119<<4)|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = ($123|0)!=(0);
 if ($124) {
  $125 = $1;
  $126 = $2;
  $127 = (($126) + ($125<<4)|0);
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $129;
  $130 = (_EmitErr(209,$vararg_buffer7)|0);
  $0 = $130;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 } else {
  $0 = 0;
  $131 = $0;
  STACKTOP = sp;return ($131|0);
 }
 return (0)|0;
}
function _ListMacroDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = $2;
 $6 = (($5) + ($4<<4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 $10 = $1;
 if ($9) {
  $11 = (($10) + 1)|0;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $17 = $2;
  $18 = (($17) + ($10<<4)|0);
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (15660 + (($20*12)|0)|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[(552)>>2] = $23;
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _LstInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buffer = 0, $fn = 0, $namelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[13516>>2] = 0;
 $0 = HEAP8[(6077)>>0]|0;
 $1 = ($0<<24>>24)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_MsgGetEx(2)|0);
 $buffer = $2;
 $3 = $buffer;
 $4 = (_strlen($3)|0);
 HEAP32[13516>>2] = $4;
 $5 = $buffer;
 $6 = HEAP32[13516>>2]|0;
 $7 = HEAP32[(380)>>2]|0;
 (_fwrite($5,1,$6,$7)|0);
 _LstNL();
 $8 = HEAP32[(580)>>2]|0;
 $9 = (_GetFName($8)|0);
 $fn = $9;
 $10 = $fn;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_strlen($11)|0);
 $namelen = $12;
 $13 = $fn;
 $14 = HEAP32[$13>>2]|0;
 $15 = $namelen;
 $16 = HEAP32[(380)>>2]|0;
 (_fwrite($14,1,$15,$16)|0);
 $17 = $namelen;
 $18 = HEAP32[13516>>2]|0;
 $19 = (($18) + ($17))|0;
 HEAP32[13516>>2] = $19;
 _LstNL();
 STACKTOP = sp;return;
}
function _compare_syms($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p1;
 $1 = $p2;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_strcmp($5,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _LstCaption($caption,$prefNL) {
 $caption = $caption|0;
 $prefNL = $prefNL|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $caption;
 $1 = $prefNL;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  _LstNL();
  $4 = $1;
  $5 = (($4) + -1)|0;
  $1 = $5;
 }
 $6 = $0;
 _LstPrintf($6,$vararg_buffer);
 _LstNL();
 _LstNL();
 STACKTOP = sp;return;
}
function _log_symbol($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $pdots = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer56 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr21 = 0, $vararg_ptr37 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer56 = sp + 144|0;
 $vararg_buffer50 = sp + 128|0;
 $vararg_buffer47 = sp + 120|0;
 $vararg_buffer44 = sp + 112|0;
 $vararg_buffer41 = sp + 104|0;
 $vararg_buffer38 = sp + 96|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer31 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $i = $4;
 $5 = $i;
 $6 = ($5|0)>=(32);
 $7 = $i;
 $8 = (88056 + ($7)|0);
 $9 = ((($8)) + 1|0);
 $10 = $6 ? 109841 : $9;
 $pdots = $10;
 $11 = $0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 2: case 1: case 0:  {
  $14 = $0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $pdots;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _LstPrintf(88089,$vararg_buffer);
  $18 = $0;
  $19 = ((($18)) + 24|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ($20&65535) >>> 9;
  $22 = $21 & 1;
  $23 = $22&255;
  $24 = ($23<<24>>24)!=(0);
  do {
   if ($24) {
    $25 = HEAP32[(612)>>2]|0;
    $26 = $0;
    $27 = (_GetMemtypeString($26,0)|0);
    $28 = $0;
    $29 = ((($28)) + 40|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$vararg_buffer2>>2] = $27;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $30;
    $31 = (_sprintf($25,88103,$vararg_buffer2)|0);
    $i = $31;
    $32 = HEAP32[(612)>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $32;
    _LstPrintf(88110,$vararg_buffer6);
   } else {
    $33 = $0;
    $34 = ((($33)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(2);
    if ($36) {
     $37 = $0;
     $38 = ((($37)) + 28|0);
     $39 = ((($38)) + 3|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40&255) >>> 2;
     $42 = $41 & 1;
     $43 = $42&255;
     $44 = ($43|0)==(1);
     if ($44) {
      $45 = HEAP32[(13764)>>2]|0;
      HEAP32[$vararg_buffer9>>2] = $45;
      _LstPrintf(88110,$vararg_buffer9);
      break;
     }
    }
    $46 = $0;
    $47 = (_GetMemtypeString($46,0)|0);
    HEAP32[$vararg_buffer12>>2] = $47;
    _LstPrintf(88110,$vararg_buffer12);
   }
  } while(0);
  $48 = $0;
  $49 = ((($48)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(2);
  if ($51) {
   $52 = $0;
   $53 = ((($52)) + 28|0);
   $54 = ((($53)) + 3|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = ($55&255) >>> 2;
   $57 = $56 & 1;
   $58 = $57&255;
   $59 = ($58|0)==(1);
   if ($59) {
    $60 = $0;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = $0;
    $64 = ((($63)) + 40|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($62>>>0) / ($65>>>0))&-1;
    HEAP32[$vararg_buffer15>>2] = $66;
    _LstPrintf(88117,$vararg_buffer15);
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  do {
   if ((label|0) == 11) {
    $67 = $0;
    $68 = ((($67)) + 20|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(192);
    $71 = $0;
    if (!($70)) {
     $93 = ((($71)) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     HEAP32[$vararg_buffer28>>2] = $94;
     _LstPrintf(88117,$vararg_buffer28);
     break;
    }
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)!=(0);
    if ($74) {
     $75 = $0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)!=(-1);
     if ($78) {
      $79 = $0;
      $80 = ((($79)) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $0;
      $83 = ((($82)) + 36|0);
      $84 = HEAP32[$83>>2]|0;
      HEAP32[$vararg_buffer18>>2] = $81;
      $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
      HEAP32[$vararg_ptr21>>2] = $84;
      _LstPrintf(88124,$vararg_buffer18);
      break;
     }
    }
    $85 = $0;
    $86 = ((($85)) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)<(0);
    $89 = $0;
    $90 = ((($89)) + 8|0);
    $91 = HEAP32[$90>>2]|0;
    if ($88) {
     $92 = (0 - ($91))|0;
     HEAP32[$vararg_buffer22>>2] = $92;
     _LstPrintf(88132,$vararg_buffer22);
     break;
    } else {
     HEAP32[$vararg_buffer25>>2] = $91;
     _LstPrintf(88117,$vararg_buffer25);
     break;
    }
   }
  } while(0);
  $95 = $0;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0|0);
  if ($98) {
   $99 = $0;
   $100 = (_get_sym_seg_name($99)|0);
   HEAP32[$vararg_buffer31>>2] = $100;
   _LstPrintf(88140,$vararg_buffer31);
  }
  $101 = $0;
  $102 = ((($101)) + 16|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(2);
  if ($104) {
   $105 = $0;
   $106 = ((($105)) + 28|0);
   $107 = ((($106)) + 3|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = ($108&255) >>> 2;
   $110 = $109 & 1;
   $111 = $110&255;
   $112 = ($111|0)==(1);
   if ($112) {
    $113 = $0;
    $114 = ((($113)) + 40|0);
    $115 = HEAP32[$114>>2]|0;
    HEAP32[$vararg_buffer34>>2] = 88151;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $115;
    _LstPrintf(88144,$vararg_buffer34);
   }
  }
  $116 = $0;
  $117 = ((($116)) + 24|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = ($118&65535) >>> 7;
  $120 = $119 & 1;
  $121 = $120&255;
  $122 = ($121<<24>>24)!=(0);
  if ($122) {
   $123 = HEAP32[(13728)>>2]|0;
   HEAP32[$vararg_buffer38>>2] = $123;
   _LstPrintf(88140,$vararg_buffer38);
  }
  $124 = $0;
  $125 = ((($124)) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)==(2);
  $128 = $0;
  if ($127) {
   $129 = ((($128)) + 28|0);
   $130 = ((($129)) + 3|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = ($131&255) >>> 3;
   $133 = $132 & 1;
   $134 = $133&255;
   $135 = ($134|0)!=(0);
   $136 = $135 ? 88157 : 88140;
   $137 = HEAP32[(13736)>>2]|0;
   HEAP32[$vararg_buffer41>>2] = $137;
   _LstPrintf($136,$vararg_buffer41);
  } else {
   $138 = ((($128)) + 16|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(0);
   if ($140) {
    $141 = HEAP32[(13740)>>2]|0;
    HEAP32[$vararg_buffer44>>2] = $141;
    _LstPrintf(88140,$vararg_buffer44);
   }
  }
  $142 = $0;
  $143 = (_GetLanguage($142)|0);
  HEAP32[$vararg_buffer47>>2] = $143;
  _LstPrintf(89655,$vararg_buffer47);
  _LstNL();
  STACKTOP = sp;return;
  break;
 }
 case 10:  {
  $144 = $0;
  $145 = ((($144)) + 4|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $pdots;
  $148 = HEAP32[(13752)>>2]|0;
  $149 = $0;
  $150 = ((($149)) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  HEAP32[$vararg_buffer50>>2] = $146;
  $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
  HEAP32[$vararg_ptr53>>2] = $147;
  $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
  HEAP32[$vararg_ptr54>>2] = $148;
  $vararg_ptr55 = ((($vararg_buffer50)) + 12|0);
  HEAP32[$vararg_ptr55>>2] = $151;
  _LstPrintf(88162,$vararg_buffer50);
  _LstNL();
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $152 = $0;
  $153 = ((($152)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $pdots;
  $156 = HEAP32[(13756)>>2]|0;
  $157 = $0;
  $158 = ((($157)) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ((($159)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$vararg_buffer56>>2] = $154;
  $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
  HEAP32[$vararg_ptr59>>2] = $155;
  $vararg_ptr60 = ((($vararg_buffer56)) + 8|0);
  HEAP32[$vararg_ptr60>>2] = $156;
  $vararg_ptr61 = ((($vararg_buffer56)) + 12|0);
  HEAP32[$vararg_ptr61>>2] = $161;
  _LstPrintf(88183,$vararg_buffer56);
  _LstNL();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _GetMemtypeString($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b2 = 0, $i = 0, $mem_type = 0, $p = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $sym;
 $2 = $buffer;
 $3 = $1;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = $1;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 if ($7) {
  $11 = (_SimpleTypeString($10)|0);
  $0 = $11;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 $mem_type = $10;
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(5);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 28|0);
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(0);
  if ($21) {
   $mem_type = 195;
  }
 }
 $22 = $mem_type;
 switch ($22|0) {
 case 195:  {
  $23 = $1;
  $24 = ((($23)) + 28|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(2);
  do {
   if ($27) {
    $28 = HEAP32[(13640)>>2]|0;
    $p = $28;
   } else {
    $29 = $1;
    $30 = ((($29)) + 28|0);
    $31 = ((($30)) + 3|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32&255) >>> 4;
    $34 = $33 & 1;
    $35 = ($34<<24>>24)!=(0);
    $36 = $1;
    $37 = ((($36)) + 28|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    if ($35) {
     $40 = (14 + ($39))|0;
     $41 = (13604 + ($40<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $p = $42;
     break;
    } else {
     $43 = (10 + ($39))|0;
     $44 = (13604 + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $p = $45;
     break;
    }
   }
  } while(0);
  $46 = $2;
  $47 = ($46|0)!=(0|0);
  if (!($47)) {
   $99 = $p;
   $0 = $99;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
  $48 = $2;
  $b2 = $48;
  $49 = $1;
  $50 = ((($49)) + 28|0);
  $51 = ((($50)) + 1|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $i = $53;
  while(1) {
   $54 = $i;
   $55 = ($54|0)!=(0);
   if (!($55)) {
    break;
   }
   $56 = $b2;
   $57 = $p;
   $58 = HEAP32[(13704)>>2]|0;
   HEAP32[$vararg_buffer>>2] = $57;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $58;
   $59 = (_sprintf($56,88203,$vararg_buffer)|0);
   $60 = $b2;
   $61 = (($60) + ($59)|0);
   $b2 = $61;
   $62 = $i;
   $63 = (($62) + -1)|0;
   $i = $63;
  }
  $64 = $1;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(7);
  do {
   if ($67) {
    $68 = $1;
    $69 = ((($68)) + 40|0);
    $70 = ((($69)) + 2|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = ($72|0)==(3);
    if ($73) {
     $74 = $1;
     $75 = ((($74)) + 32|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(0|0);
     if ($77) {
      $78 = $b2;
      $79 = $1;
      $80 = ((($79)) + 32|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      (_strcpy($78,$83)|0);
      break;
     }
     $84 = $1;
     $85 = ((($84)) + 28|0);
     $86 = ((($85)) + 2|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $88 & 128;
     $90 = ($89|0)==(0);
     if ($90) {
      $91 = $b2;
      $92 = $1;
      $93 = ((($92)) + 28|0);
      $94 = ((($93)) + 2|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = $95&255;
      $97 = (_SimpleTypeString($96)|0);
      (_strcpy($91,$97)|0);
     }
    }
   }
  } while(0);
  $98 = $2;
  $0 = $98;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
  break;
 }
 case 130:  {
  $100 = $1;
  $101 = ((($100)) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   $104 = HEAP32[(13688)>>2]|0;
   $0 = $104;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  } else {
   $105 = $1;
   $106 = (_GetSymOfssize($105)|0);
   $107 = (22 + ($106))|0;
   $108 = (13604 + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $0 = $109;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
  break;
 }
 case 129:  {
  $110 = $1;
  $111 = ((($110)) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)!=(0|0);
  if ($113) {
   $114 = HEAP32[(13672)>>2]|0;
   $0 = $114;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  } else {
   $115 = $1;
   $116 = (_GetSymOfssize($115)|0);
   $117 = (18 + ($116))|0;
   $118 = (13604 + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $0 = $119;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
  break;
 }
 case 196:  {
  $120 = $1;
  $121 = ((($120)) + 52|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = HEAP8[$124>>0]|0;
  $126 = ($125<<24>>24)!=(0);
  $127 = $1;
  $128 = ((($127)) + 52|0);
  $129 = HEAP32[$128>>2]|0;
  if ($126) {
   $130 = ((($129)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $0 = $131;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  } else {
   $132 = $2;
   $133 = (_GetMemtypeString($129,$132)|0);
   $0 = $133;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
  break;
 }
 case 192:  {
  $134 = HEAP32[(13716)>>2]|0;
  $0 = $134;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
  break;
 }
 default: {
  $0 = 109828;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 }
 return (0)|0;
}
function _get_sym_seg_name($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = HEAP32[(13748)>>2]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _GetLanguage($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<=(7);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 42)|0;
  $10 = (13604 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 109828;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _SimpleTypeString($mem_type) {
 $mem_type = $mem_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mem_type;
 $2 = $1;
 $3 = $2 & 31;
 $4 = (($3) + 1)|0;
 $size = $4;
 $5 = $size;
 switch ($5|0) {
 case 1:  {
  $6 = HEAP32[13604>>2]|0;
  $0 = $6;
  break;
 }
 case 2:  {
  $7 = HEAP32[(13608)>>2]|0;
  $0 = $7;
  break;
 }
 case 4:  {
  $8 = HEAP32[(13612)>>2]|0;
  $0 = $8;
  break;
 }
 case 6:  {
  $9 = HEAP32[(13616)>>2]|0;
  $0 = $9;
  break;
 }
 case 8:  {
  $10 = HEAP32[(13620)>>2]|0;
  $0 = $10;
  break;
 }
 case 10:  {
  $11 = HEAP32[(13624)>>2]|0;
  $0 = $11;
  break;
 }
 case 16:  {
  $12 = HEAP32[(13632)>>2]|0;
  $0 = $12;
  break;
 }
 default: {
  $0 = 109841;
 }
 }
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _log_macro($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pdots = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $i = $4;
 $5 = $0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7&255) >>> 1;
 $9 = $8 & 1;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 $12 = HEAP32[(13712)>>2]|0;
 $13 = HEAP32[(13708)>>2]|0;
 $14 = $11 ? $12 : $13;
 $type = $14;
 $15 = $i;
 $16 = ($15|0)>=(32);
 $17 = $i;
 $18 = (88056 + ($17)|0);
 $19 = ((($18)) + 1|0);
 $20 = $16 ? 109841 : $19;
 $pdots = $20;
 $21 = $0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $pdots;
 $25 = $type;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $24;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $25;
 _LstPrintf(89362,$vararg_buffer);
 _LstNL();
 STACKTOP = sp;return;
}
function _log_struct($sym,$name,$ofs) {
 $sym = $sym|0;
 $name = $name|0;
 $ofs = $ofs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $f = 0, $i = 0;
 var $pdots = 0, $si = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $name;
 $2 = $ofs;
 $3 = $0;
 $dir = $3;
 $4 = $dir;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $si = $6;
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = $0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $1 = $11;
 }
 $12 = $1;
 $13 = (_strlen($12)|0);
 $i = $13;
 $14 = $i;
 $15 = HEAP32[13860>>2]|0;
 $16 = (($14) + ($15))|0;
 $17 = ($16>>>0)>=(32);
 if ($17) {
  $23 = 109841;
 } else {
  $18 = $i;
  $19 = (88056 + ($18)|0);
  $20 = HEAP32[13860>>2]|0;
  $21 = (($19) + ($20)|0);
  $22 = ((($21)) + 1|0);
  $23 = $22;
 }
 $pdots = $23;
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = HEAP32[13860>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  _LstPrintf(89360,$vararg_buffer);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = HEAP32[13860>>2]|0;
 $30 = ($29|0)==(0);
 do {
  if ($30) {
   $31 = $dir;
   $32 = ((($31)) + 60|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)>(1);
   $38 = $1;
   $39 = $pdots;
   $40 = $0;
   $41 = ((($40)) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   if ($37) {
    $43 = $si;
    $44 = ((($43)) + 8|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    HEAP32[$vararg_buffer1>>2] = $38;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $39;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $42;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $46;
    _LstPrintf(89544,$vararg_buffer1);
    break;
   } else {
    HEAP32[$vararg_buffer6>>2] = $38;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $39;
    $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
    HEAP32[$vararg_ptr10>>2] = $42;
    _LstPrintf(89566,$vararg_buffer6);
    break;
   }
  } else {
   $47 = $1;
   $48 = $pdots;
   $49 = $0;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   $53 = (($51) + ($52))|0;
   HEAP32[$vararg_buffer11>>2] = $47;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $48;
   $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
   HEAP32[$vararg_ptr15>>2] = $53;
   _LstPrintf(89566,$vararg_buffer11);
  }
 } while(0);
 _LstNL();
 $54 = HEAP32[13860>>2]|0;
 $55 = (($54) + 2)|0;
 HEAP32[13860>>2] = $55;
 $56 = $si;
 $57 = HEAP32[$56>>2]|0;
 $f = $57;
 while(1) {
  $58 = $f;
  $59 = ($58|0)!=(0|0);
  if (!($59)) {
   break;
  }
  $60 = $f;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(196);
  if ($63) {
   $64 = $f;
   $65 = ((($64)) + 64|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 << 24 >> 24;
   $68 = ($67|0)==(0);
   if ($68) {
    $69 = $f;
    $70 = ((($69)) + 52|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $f;
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $f;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $2;
    $79 = (($77) + ($78))|0;
    _log_struct($71,$74,$79);
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  do {
   if ((label|0) == 18) {
    label = 0;
    $80 = $f;
    $81 = ((($80)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP8[$82>>0]|0;
    $84 = $83 << 24 >> 24;
    $85 = ($84|0)!=(0);
    if (!($85)) {
     $86 = $f;
     $87 = ((($86)) + 20|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($88|0)==(196);
     if (!($89)) {
      break;
     }
    }
    $90 = $f;
    $91 = ((($90)) + 44|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = HEAP32[13860>>2]|0;
    $95 = (($93) + ($94))|0;
    $i = $95;
    $96 = $i;
    $97 = ($96>>>0)>=(32);
    $98 = $i;
    $99 = (88056 + ($98)|0);
    $100 = ((($99)) + 1|0);
    $101 = $97 ? 109841 : $100;
    $pdots = $101;
    $i = 0;
    while(1) {
     $102 = $i;
     $103 = HEAP32[13860>>2]|0;
     $104 = ($102>>>0)<($103>>>0);
     if (!($104)) {
      break;
     }
     _LstPrintf(89360,$vararg_buffer16);
     $105 = $i;
     $106 = (($105) + 1)|0;
     $i = $106;
    }
    $107 = $f;
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $pdots;
    $111 = $f;
    $112 = ((($111)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $0;
    $115 = ((($114)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($113) + ($116))|0;
    $118 = $2;
    $119 = (($117) + ($118))|0;
    HEAP32[$vararg_buffer18>>2] = $109;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $110;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = $119;
    _LstPrintf(89583,$vararg_buffer18);
    $120 = $f;
    $121 = (_GetMemtypeString($120,0)|0);
    HEAP32[$vararg_buffer23>>2] = $121;
    _LstPrintf(89655,$vararg_buffer23);
    $122 = $f;
    $123 = ((($122)) + 24|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = ($124&65535) >>> 9;
    $126 = $125 & 1;
    $127 = $126&255;
    $128 = ($127<<24>>24)!=(0);
    if ($128) {
     $129 = $f;
     $130 = ((($129)) + 40|0);
     $131 = HEAP32[$130>>2]|0;
     HEAP32[$vararg_buffer26>>2] = $131;
     _LstPrintf(89603,$vararg_buffer26);
    }
    _LstNL();
   }
  } while(0);
  $132 = $f;
  $133 = ((($132)) + 60|0);
  $134 = HEAP32[$133>>2]|0;
  $f = $134;
 }
 $135 = HEAP32[13860>>2]|0;
 $136 = (($135) - 2)|0;
 HEAP32[13860>>2] = $136;
 STACKTOP = sp;return;
}
function _log_record($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $f = 0, $i = 0, $mask = 0, $pdots = 0, $si = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $mask = sp;
 $0 = $sym;
 $1 = $0;
 $dir = $1;
 $2 = $dir;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $si = $4;
 $5 = $0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $i = $8;
 $9 = $i;
 $10 = ($9|0)>=(32);
 $11 = $i;
 $12 = (88056 + ($11)|0);
 $13 = ((($12)) + 1|0);
 $14 = $10 ? 109841 : $13;
 $pdots = $14;
 $i = 0;
 $15 = $si;
 $16 = HEAP32[$15>>2]|0;
 $f = $16;
 while(1) {
  $17 = $f;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   break;
  }
  $19 = $f;
  $20 = ((($19)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $f = $21;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $24 = $0;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $pdots;
 $28 = $0;
 $29 = ((($28)) + 36|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30<<3;
 $32 = $i;
 HEAP32[$vararg_buffer>>2] = $26;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $27;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $31;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $32;
 _LstPrintf(89459,$vararg_buffer);
 _LstNL();
 $33 = $si;
 $34 = HEAP32[$33>>2]|0;
 $f = $34;
 while(1) {
  $35 = $f;
  $36 = ($35|0)!=(0|0);
  if (!($36)) {
   break;
  }
  $37 = $f;
  $38 = ((($37)) + 44|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = (($40) + 2)|0;
  $i = $41;
  $42 = $i;
  $43 = ($42|0)>=(32);
  $44 = $i;
  $45 = (88056 + ($44)|0);
  $46 = ((($45)) + 1|0);
  $47 = $43 ? 109841 : $46;
  $pdots = $47;
  $48 = $f;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $i = $50;
  $51 = $mask;
  $52 = $51;
  HEAP32[$52>>2] = 0;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = 0;
  while(1) {
   $55 = $i;
   $56 = $f;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $f;
   $60 = ((($59)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + ($61))|0;
   $63 = ($55>>>0)<($62>>>0);
   if (!($63)) {
    break;
   }
   $64 = $i;
   $65 = (_bitshift64Shl(1,0,($64|0))|0);
   $66 = tempRet0;
   $67 = $mask;
   $68 = $67;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + 4)|0;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = $69 | $65;
   $74 = $72 | $66;
   $75 = $mask;
   $76 = $75;
   HEAP32[$76>>2] = $73;
   $77 = (($75) + 4)|0;
   $78 = $77;
   HEAP32[$78>>2] = $74;
   $79 = $i;
   $80 = (($79) + 1)|0;
   $i = $80;
  }
  $81 = $0;
  $82 = ((($81)) + 36|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83>>>0)>(4);
  $85 = $f;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $pdots;
  $89 = $f;
  $90 = ((($89)) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $f;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $mask;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  if ($84) {
   $101 = $f;
   $102 = ((($101)) + 64|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103 << 24 >> 24;
   $105 = ($104|0)!=(0);
   $106 = $f;
   $107 = ((($106)) + 64|0);
   $108 = $105 ? $107 : 109828;
   HEAP32[$vararg_buffer4>>2] = $87;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $88;
   $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
   HEAP32[$vararg_ptr8>>2] = $91;
   $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
   HEAP32[$vararg_ptr9>>2] = $94;
   $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
   $109 = $vararg_ptr10;
   $110 = $109;
   HEAP32[$110>>2] = $97;
   $111 = (($109) + 4)|0;
   $112 = $111;
   HEAP32[$112>>2] = $100;
   $vararg_ptr11 = ((($vararg_buffer4)) + 24|0);
   HEAP32[$vararg_ptr11>>2] = $108;
   _LstPrintf(89479,$vararg_buffer4);
  } else {
   $113 = $f;
   $114 = ((($113)) + 64|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115 << 24 >> 24;
   $117 = ($116|0)!=(0);
   $118 = $f;
   $119 = ((($118)) + 64|0);
   $120 = $117 ? $119 : 109828;
   HEAP32[$vararg_buffer12>>2] = $87;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $88;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $91;
   $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
   HEAP32[$vararg_ptr17>>2] = $94;
   $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
   HEAP32[$vararg_ptr18>>2] = $97;
   $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
   HEAP32[$vararg_ptr19>>2] = $120;
   _LstPrintf(89513,$vararg_buffer12);
  }
  _LstNL();
  $121 = $f;
  $122 = ((($121)) + 60|0);
  $123 = HEAP32[$122>>2]|0;
  $f = $123;
 }
 STACKTOP = sp;return;
}
function _log_typedef($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, $pdots = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $i = $4;
 $5 = $i;
 $6 = ($5|0)>=(32);
 $7 = $i;
 $8 = (88056 + ($7)|0);
 $9 = ((($8)) + 1|0);
 $10 = $6 ? 109841 : $9;
 $pdots = $10;
 $11 = HEAP32[(612)>>2]|0;
 $p = $11;
 $12 = $p;
 HEAP8[$12>>0] = 0;
 $13 = $0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(128);
 if ($16) {
  $17 = $0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $p;
   $22 = HEAP32[(13708)>>2]|0;
   (_strcat($21,$22)|0);
   $23 = $p;
   (_strcat($23,89360)|0);
   $24 = $0;
   $25 = ((($24)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)!=(0);
   if ($30) {
    $31 = $p;
    $32 = $0;
    $33 = ((($32)) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    (_strcat($31,$36)|0);
    $37 = $p;
    (_strcat($37,89360)|0);
   }
   $38 = $p;
   $39 = $0;
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(129);
   $45 = $44 ? 18 : 22;
   $46 = $0;
   $47 = ((($46)) + 28|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($45) + ($49))|0;
   $51 = (13604 + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   (_strcat($38,$52)|0);
   $53 = $p;
   (_strcat($53,89360)|0);
   $54 = $p;
   $55 = $0;
   $56 = ((($55)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (_GetLanguage($57)|0);
   (_strcat($54,$58)|0);
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $59 = $0;
  $60 = $p;
  $61 = (_GetMemtypeString($59,$60)|0);
  $p = $61;
 }
 $62 = $0;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $pdots;
 $66 = $0;
 $67 = ((($66)) + 36|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $p;
 HEAP32[$vararg_buffer>>2] = $64;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $65;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $68;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $69;
 _LstPrintf(89442,$vararg_buffer);
 _LstNL();
 STACKTOP = sp;return;
}
function _log_segment($sym,$group) {
 $sym = $sym|0;
 $group = $group|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $pdots = 0, $seg = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 64|0;
 $0 = $sym;
 $1 = $group;
 $2 = $0;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $seg = $4;
 $5 = $seg;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ($6|0)==($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 44|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $i = $12;
 $13 = $i;
 $14 = ($13|0)>=(32);
 $15 = $i;
 $16 = (88056 + ($15)|0);
 $17 = ((($16)) + 1|0);
 $18 = $14 ? 109841 : $17;
 $pdots = $18;
 $19 = $0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $pdots;
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 _LstPrintf(88089,$vararg_buffer);
 $23 = $seg;
 $24 = ((($23)) + 64|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(1);
 do {
  if ($27) {
   $28 = $0;
   $29 = ((($28)) + 36|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $30;
   _LstPrintf(89378,$vararg_buffer2);
  } else {
   $31 = $seg;
   $32 = ((($31)) + 64|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==(2);
   $36 = $0;
   $37 = ((($36)) + 36|0);
   $38 = HEAP32[$37>>2]|0;
   if ($35) {
    HEAP32[$vararg_buffer5>>2] = $38;
    _LstPrintf(89393,$vararg_buffer5);
    break;
   } else {
    HEAP32[$vararg_buffer8>>2] = $38;
    _LstPrintf(89408,$vararg_buffer8);
    break;
   }
  }
 } while(0);
 $39 = $seg;
 $40 = (_get_seg_align($39,$buffer)|0);
 $41 = $seg;
 $42 = (_get_seg_combine($41)|0);
 HEAP32[$vararg_buffer11>>2] = $40;
 $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $42;
 _LstPrintf(89427,$vararg_buffer11);
 $43 = $seg;
 $44 = ((($43)) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = $seg;
  $48 = ((($47)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51;
 } else {
  $52 = 109841;
 }
 HEAP32[$vararg_buffer15>>2] = $52;
 _LstPrintf(89437,$vararg_buffer15);
 _LstNL();
 STACKTOP = sp;return;
}
function _log_group($grp,$segs) {
 $grp = $grp|0;
 $segs = $segs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0;
 var $i = 0, $pdots = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $grp;
 $1 = $segs;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $i = $5;
 $6 = $i;
 $7 = ($6>>>0)>=(32);
 $8 = $i;
 $9 = (88056 + ($8)|0);
 $10 = ((($9)) + 1|0);
 $11 = $7 ? 109841 : $10;
 $pdots = $11;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $pdots;
 $16 = HEAP32[(13744)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $16;
 _LstPrintf(89362,$vararg_buffer);
 _LstNL();
 $17 = $0;
 $18 = HEAP32[(588)>>2]|0;
 $19 = ($17|0)==($18|0);
 if ($19) {
  while(1) {
   $20 = $1;
   $21 = ($20|0)!=(0|0);
   if (!($21)) {
    break;
   }
   $22 = $1;
   $23 = $0;
   _log_segment($22,$23);
   $24 = $1;
   $25 = ((($24)) + 64|0);
   $26 = HEAP32[$25>>2]|0;
   $1 = $26;
  }
  STACKTOP = sp;return;
 }
 $27 = $0;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $curr = $30;
 while(1) {
  $31 = $curr;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   break;
  }
  $33 = $curr;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  _log_segment($35,$36);
  $37 = $curr;
  $38 = HEAP32[$37>>2]|0;
  $curr = $38;
 }
 STACKTOP = sp;return;
}
function _log_proc($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ofssize = 0, $buffer = 0, $cnt = 0, $curr = 0, $dir = 0, $f = 0;
 var $i = 0, $l = 0, $l2 = 0, $p = 0, $pdots = 0, $sym2 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer33 = 0, $vararg_buffer39 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer67 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0;
 var $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer67 = sp + 200|0;
 $vararg_buffer59 = sp + 176|0;
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer47 = sp + 144|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $buffer = sp + 264|0;
 $0 = $sym;
 $1 = $0;
 $dir = $1;
 $2 = $0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $i = $5;
 $6 = $0;
 $7 = (_GetSymOfssize($6)|0);
 $8 = $7&255;
 $Ofssize = $8;
 $9 = $i;
 $10 = ($9|0)>=(32);
 $11 = $i;
 $12 = (88056 + ($11)|0);
 $13 = ((($12)) + 1|0);
 $14 = $10 ? 109841 : $13;
 $pdots = $14;
 $15 = $Ofssize;
 $16 = ($15<<24>>24)!=(0);
 if ($16) {
  $p = 89139;
 } else {
  $p = 89170;
 }
 $17 = $p;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $pdots;
 $22 = $0;
 $23 = (_get_proc_type($22)|0);
 $24 = $0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = (_get_sym_seg_name($27)|0);
 HEAP32[$vararg_buffer>>2] = $20;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $23;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $26;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $28;
 _LstPrintf($17,$vararg_buffer);
 $29 = $Ofssize;
 $30 = $29 << 24 >> 24;
 $31 = ($30|0)>(0);
 $32 = $31 ? 8 : 4;
 $33 = $0;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(1);
 if ($36) {
  $37 = $0;
  $38 = ((($37)) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39;
 } else {
  $40 = 0;
 }
 HEAP32[$vararg_buffer5>>2] = $32;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $40;
 _LstPrintf(89205,$vararg_buffer5);
 $41 = $0;
 $42 = ((($41)) + 24|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = ($43&65535) >>> 7;
 $45 = $44 & 1;
 $46 = $45&255;
 $47 = ($46<<24>>24)!=(0);
 do {
  if ($47) {
   $48 = HEAP32[(13728)>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $48;
   _LstPrintf(89211,$vararg_buffer9);
  } else {
   $49 = $0;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(1);
   if ($52) {
    $53 = HEAP32[(13720)>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $53;
    _LstPrintf(89211,$vararg_buffer12);
    break;
   }
   $54 = $0;
   $55 = ((($54)) + 28|0);
   $56 = ((($55)) + 3|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57&255) >>> 3;
   $59 = $58 & 1;
   $60 = $59&255;
   $61 = ($60|0)!=(0);
   $62 = $61 ? 89216 : 89223;
   $63 = HEAP32[(13736)>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $63;
   _LstPrintf($62,$vararg_buffer15);
   $64 = $0;
   $65 = ((($64)) + 36|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    $68 = $0;
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 8|0);
    HEAP32[$vararg_buffer18>>2] = $71;
    _LstPrintf(89229,$vararg_buffer18);
   }
  }
 } while(0);
 $72 = $0;
 $73 = (_GetLanguage($72)|0);
 HEAP32[$vararg_buffer21>>2] = $73;
 _LstPrintf(89655,$vararg_buffer21);
 _LstNL();
 $74 = $0;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(2);
 if ($77) {
  $78 = $0;
  $79 = ((($78)) + 40|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0|0);
  if ($81) {
   $82 = $0;
   $83 = ((($82)) + 40|0);
   $84 = HEAP32[$83>>2]|0;
   $sym2 = $84;
   _LstPrintf(89237,$vararg_buffer24);
   $85 = $p;
   $86 = $sym2;
   $87 = ((($86)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $pdots;
   $90 = ((($89)) + 2|0);
   $91 = $sym2;
   $92 = (_get_proc_type($91)|0);
   $93 = $sym2;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $sym2;
   $97 = (_get_sym_seg_name($96)|0);
   HEAP32[$vararg_buffer26>>2] = $88;
   $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $90;
   $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
   HEAP32[$vararg_ptr30>>2] = $92;
   $vararg_ptr31 = ((($vararg_buffer26)) + 12|0);
   HEAP32[$vararg_ptr31>>2] = $95;
   $vararg_ptr32 = ((($vararg_buffer26)) + 16|0);
   HEAP32[$vararg_ptr32>>2] = $97;
   _LstPrintf($85,$vararg_buffer26);
   _LstNL();
  }
 }
 $98 = $0;
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(1);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = $0;
 $103 = ((($102)) + 48|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(1);
 L23: do {
  if ($105) {
   label = 20;
  } else {
   $106 = $0;
   $107 = ((($106)) + 48|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(2);
   if ($109) {
    label = 20;
   } else {
    $110 = $0;
    $111 = ((($110)) + 48|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(3);
    if ($113) {
     label = 20;
    } else {
     $114 = $0;
     $115 = ((($114)) + 48|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(7);
     if ($117) {
      label = 20;
     } else {
      $191 = $dir;
      $192 = ((($191)) + 60|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ((($193)) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      $f = $195;
      while(1) {
       $196 = $f;
       $197 = ($196|0)!=(0|0);
       if (!($197)) {
        break L23;
       }
       $198 = $f;
       $199 = ((($198)) + 44|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = $200&255;
       $i = $201;
       $202 = $i;
       $203 = ($202|0)>=(30);
       $204 = $i;
       $205 = (88056 + ($204)|0);
       $206 = ((($205)) + 1|0);
       $207 = ((($206)) + 2|0);
       $208 = $203 ? 109841 : $207;
       $pdots = $208;
       $209 = $f;
       $210 = ((($209)) + 4|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = $pdots;
       $213 = $f;
       $214 = (_GetMemtypeString($213,0)|0);
       $215 = $dir;
       $216 = ((($215)) + 60|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ((($217)) + 42|0);
       $219 = HEAP16[$218>>1]|0;
       $220 = $219&65535;
       $221 = (_GetResWName($220,0)|0);
       $222 = $f;
       $223 = ((($222)) + 8|0);
       $224 = HEAP32[$223>>2]|0;
       HEAP32[$vararg_buffer47>>2] = $211;
       $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
       HEAP32[$vararg_ptr50>>2] = $212;
       $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
       HEAP32[$vararg_ptr51>>2] = $214;
       $vararg_ptr52 = ((($vararg_buffer47)) + 12|0);
       HEAP32[$vararg_ptr52>>2] = $221;
       $vararg_ptr53 = ((($vararg_buffer47)) + 16|0);
       HEAP32[$vararg_ptr53>>2] = 43;
       $vararg_ptr54 = ((($vararg_buffer47)) + 20|0);
       HEAP32[$vararg_ptr54>>2] = $224;
       _LstPrintf(89264,$vararg_buffer47);
       _LstNL();
       $225 = $f;
       $226 = ((($225)) + 68|0);
       $227 = HEAP32[$226>>2]|0;
       $f = $227;
      }
     }
    }
   }
  }
 } while(0);
 L31: do {
  if ((label|0) == 20) {
   $cnt = 0;
   $118 = $dir;
   $119 = ((($118)) + 60|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ((($120)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   $f = $122;
   while(1) {
    $123 = $f;
    $124 = ($123|0)!=(0|0);
    if (!($124)) {
     break;
    }
    $125 = $cnt;
    $126 = (($125) + 1)|0;
    $cnt = $126;
    $127 = $f;
    $128 = ((($127)) + 68|0);
    $129 = HEAP32[$128>>2]|0;
    $f = $129;
   }
   while(1) {
    $130 = $cnt;
    $131 = ($130|0)!=(0);
    if (!($131)) {
     break L31;
    }
    $curr = 1;
    $132 = $dir;
    $133 = ((($132)) + 60|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($134)) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $f = $136;
    while(1) {
     $137 = $curr;
     $138 = $cnt;
     $139 = ($137|0)<($138|0);
     $140 = $f;
     if (!($139)) {
      break;
     }
     $141 = ((($140)) + 68|0);
     $142 = HEAP32[$141>>2]|0;
     $f = $142;
     $143 = $curr;
     $144 = (($143) + 1)|0;
     $curr = $144;
    }
    $145 = ((($140)) + 44|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    $i = $147;
    $148 = $i;
    $149 = ($148|0)>=(30);
    $150 = $i;
    $151 = (88056 + ($150)|0);
    $152 = ((($151)) + 1|0);
    $153 = ((($152)) + 2|0);
    $154 = $149 ? 109841 : $153;
    $pdots = $154;
    $155 = $f;
    $156 = ((($155)) + 16|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==(10);
    $159 = $f;
    $160 = ((($159)) + 4|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $pdots;
    $163 = $f;
    if ($158) {
     $164 = (_GetMemtypeString($163,0)|0);
     $165 = $f;
     $166 = ((($165)) + 8|0);
     $167 = HEAP32[$166>>2]|0;
     HEAP32[$vararg_buffer33>>2] = $161;
     $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
     HEAP32[$vararg_ptr36>>2] = $162;
     $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
     HEAP32[$vararg_ptr37>>2] = $164;
     $vararg_ptr38 = ((($vararg_buffer33)) + 12|0);
     HEAP32[$vararg_ptr38>>2] = $167;
     _LstPrintf(89240,$vararg_buffer33);
    } else {
     $168 = ((($163)) + 28|0);
     $169 = ((($168)) + 3|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = ($170&255) >>> 5;
     $172 = $171 & 1;
     $173 = $172&255;
     $174 = ($173|0)!=(0);
     if ($174) {
      $175 = HEAP32[(13768)>>2]|0;
      $188 = $175;
     } else {
      $176 = $f;
      $177 = (_GetMemtypeString($176,0)|0);
      $188 = $177;
     }
     $178 = $dir;
     $179 = ((($178)) + 60|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ((($180)) + 42|0);
     $182 = HEAP16[$181>>1]|0;
     $183 = $182&65535;
     $184 = (_GetResWName($183,0)|0);
     $185 = $f;
     $186 = ((($185)) + 8|0);
     $187 = HEAP32[$186>>2]|0;
     HEAP32[$vararg_buffer39>>2] = $161;
     $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
     HEAP32[$vararg_ptr42>>2] = $162;
     $vararg_ptr43 = ((($vararg_buffer39)) + 8|0);
     HEAP32[$vararg_ptr43>>2] = $188;
     $vararg_ptr44 = ((($vararg_buffer39)) + 12|0);
     HEAP32[$vararg_ptr44>>2] = $184;
     $vararg_ptr45 = ((($vararg_buffer39)) + 16|0);
     HEAP32[$vararg_ptr45>>2] = 43;
     $vararg_ptr46 = ((($vararg_buffer39)) + 20|0);
     HEAP32[$vararg_ptr46>>2] = $187;
     _LstPrintf(89264,$vararg_buffer39);
    }
    _LstNL();
    $189 = $cnt;
    $190 = (($189) + -1)|0;
    $cnt = $190;
   }
  }
 } while(0);
 $228 = $dir;
 $229 = ((($228)) + 60|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($230)) + 8|0);
 $232 = HEAP32[$231>>2]|0;
 $l = $232;
 while(1) {
  $233 = $l;
  $234 = ($233|0)!=(0|0);
  if (!($234)) {
   break;
  }
  $235 = $l;
  $236 = ((($235)) + 44|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $i = $238;
  $239 = $i;
  $240 = ($239|0)>=(30);
  $241 = $i;
  $242 = (88056 + ($241)|0);
  $243 = ((($242)) + 1|0);
  $244 = ((($243)) + 2|0);
  $245 = $240 ? 109841 : $244;
  $pdots = $245;
  $246 = $l;
  $247 = ((($246)) + 24|0);
  $248 = HEAP16[$247>>1]|0;
  $249 = ($248&65535) >>> 9;
  $250 = $249 & 1;
  $251 = $250&255;
  $252 = ($251<<24>>24)!=(0);
  $253 = $l;
  $254 = (_GetMemtypeString($253,0)|0);
  if ($252) {
   $255 = $l;
   $256 = ((($255)) + 40|0);
   $257 = HEAP32[$256>>2]|0;
   HEAP32[$vararg_buffer55>>2] = $254;
   $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
   HEAP32[$vararg_ptr58>>2] = $257;
   (_sprintf($buffer,88103,$vararg_buffer55)|0);
  } else {
   (_strcpy($buffer,$254)|0);
  }
  $258 = $l;
  $259 = ((($258)) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $pdots;
  $262 = $dir;
  $263 = ((($262)) + 60|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ((($264)) + 42|0);
  $266 = HEAP16[$265>>1]|0;
  $267 = $266&65535;
  $268 = (_GetResWName($267,0)|0);
  $269 = $l;
  $270 = ((($269)) + 8|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ($271|0)>=(0);
  $273 = $272 ? 43 : 45;
  $274 = $l;
  $275 = ((($274)) + 8|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($276|0)>=(0);
  $278 = $l;
  $279 = ((($278)) + 8|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = (0 - ($280))|0;
  $282 = $277 ? $280 : $281;
  HEAP32[$vararg_buffer59>>2] = $260;
  $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
  HEAP32[$vararg_ptr62>>2] = $261;
  $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
  HEAP32[$vararg_ptr63>>2] = $buffer;
  $vararg_ptr64 = ((($vararg_buffer59)) + 12|0);
  HEAP32[$vararg_ptr64>>2] = $268;
  $vararg_ptr65 = ((($vararg_buffer59)) + 16|0);
  HEAP32[$vararg_ptr65>>2] = $273;
  $vararg_ptr66 = ((($vararg_buffer59)) + 20|0);
  HEAP32[$vararg_ptr66>>2] = $282;
  _LstPrintf(89264,$vararg_buffer59);
  _LstNL();
  $283 = $l;
  $284 = ((($283)) + 68|0);
  $285 = HEAP32[$284>>2]|0;
  $l = $285;
 }
 $286 = $dir;
 $287 = ((($286)) + 60|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = ((($288)) + 12|0);
 $290 = HEAP32[$289>>2]|0;
 $l = $290;
 while(1) {
  $291 = $l;
  $292 = ($291|0)!=(0|0);
  if (!($292)) {
   break;
  }
  $293 = $l;
  $l2 = $293;
  while(1) {
   $294 = $l2;
   $295 = ($294|0)!=(0|0);
   if (!($295)) {
    break;
   }
   $296 = $l2;
   $297 = ((($296)) + 16|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = ($298|0)==(5);
   if (!($299)) {
    $300 = $l2;
    $301 = ((($300)) + 16|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = ($302|0)==(10);
    if (!($303)) {
     $304 = $l2;
     $305 = ((($304)) + 44|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $306&255;
     $i = $307;
     $308 = $i;
     $309 = ($308|0)>=(30);
     $310 = $i;
     $311 = (88056 + ($310)|0);
     $312 = ((($311)) + 1|0);
     $313 = ((($312)) + 2|0);
     $314 = $309 ? 109841 : $313;
     $pdots = $314;
     $315 = $Ofssize;
     $316 = ($315<<24>>24)!=(0);
     if ($316) {
      $p = 89296;
     } else {
      $p = 89326;
     }
     $317 = $p;
     $318 = $l2;
     $319 = ((($318)) + 4|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $pdots;
     $322 = $l2;
     $323 = (_get_proc_type($322)|0);
     $324 = $l2;
     $325 = ((($324)) + 8|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = $l2;
     $328 = (_get_sym_seg_name($327)|0);
     HEAP32[$vararg_buffer67>>2] = $320;
     $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
     HEAP32[$vararg_ptr70>>2] = $321;
     $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
     HEAP32[$vararg_ptr71>>2] = $323;
     $vararg_ptr72 = ((($vararg_buffer67)) + 12|0);
     HEAP32[$vararg_ptr72>>2] = $326;
     $vararg_ptr73 = ((($vararg_buffer67)) + 16|0);
     HEAP32[$vararg_ptr73>>2] = $328;
     _LstPrintf($317,$vararg_buffer67);
     _LstNL();
    }
   }
   $329 = $l2;
   $330 = HEAP32[$329>>2]|0;
   $l2 = $330;
  }
  $331 = $l;
  $332 = ((($331)) + 60|0);
  $333 = HEAP32[$332>>2]|0;
  $l = $333;
 }
 STACKTOP = sp;return;
}
function _get_proc_type($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 129:  {
   $5 = $1;
   $6 = ((($5)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $9 = $1;
    $10 = (_GetSymOfssize($9)|0);
    $11 = (10 + ($10))|0;
    $12 = (13604 + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $0 = $13;
    break L1;
   } else {
    $14 = HEAP32[(13640)>>2]|0;
    $0 = $14;
    break L1;
   }
   break;
  }
  case 130:  {
   $15 = $1;
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = $1;
    $20 = (_GetSymOfssize($19)|0);
    $21 = (14 + ($20))|0;
    $22 = (13604 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $0 = $23;
    break L1;
   } else {
    $24 = HEAP32[(13656)>>2]|0;
    $0 = $24;
    break L1;
   }
   break;
  }
  default: {
   $0 = 89360;
  }
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _get_seg_align($seg,$buffer) {
 $seg = $seg|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $seg;
 $2 = $buffer;
 $3 = $1;
 $4 = ((($3)) + 66|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[13604>>2]|0;
  $0 = $7;
  break;
 }
 case 1:  {
  $8 = HEAP32[(13608)>>2]|0;
  $0 = $8;
  break;
 }
 case 2:  {
  $9 = HEAP32[(13612)>>2]|0;
  $0 = $9;
  break;
 }
 case 3:  {
  $10 = HEAP32[(13620)>>2]|0;
  $0 = $10;
  break;
 }
 case 4:  {
  $11 = HEAP32[(13628)>>2]|0;
  $0 = $11;
  break;
 }
 case 8:  {
  $12 = HEAP32[(13636)>>2]|0;
  $0 = $12;
  break;
 }
 case 255:  {
  $13 = HEAP32[(13760)>>2]|0;
  $0 = $13;
  break;
 }
 default: {
  $14 = $2;
  $15 = $1;
  $16 = ((($15)) + 66|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = 1 << $18;
  HEAP32[$vararg_buffer>>2] = $19;
  (_sprintf($14,88053,$vararg_buffer)|0);
  $20 = $2;
  $0 = $20;
 }
 }
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _get_seg_combine($seg) {
 $seg = $seg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $seg;
 $2 = $1;
 $3 = ((($2)) + 68|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 7;
 $6 = $5&255;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[(13720)>>2]|0;
  $0 = $7;
  break;
 }
 case 5:  {
  $8 = HEAP32[(13724)>>2]|0;
  $0 = $8;
  break;
 }
 case 2:  {
  $9 = HEAP32[(13728)>>2]|0;
  $0 = $9;
  break;
 }
 case 6:  {
  $10 = HEAP32[(13732)>>2]|0;
  $0 = $10;
  break;
 }
 default: {
  $0 = 109828;
 }
 }
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _LoopDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $$alloca_mul = 0, $$alloca_mul26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arg_loc = 0, $buffer = 0, $directive = 0, $is_exitm = 0, $len = 0, $macinfo = 0, $macro = 0, $opnd = 0, $or$cond = 0, $parmstring = 0, $ptr = 0, $ptr2 = 0, $tmpmacro = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 128|0;
 $vararg_buffer17 = sp + 120|0;
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer11 = sp + 104|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 252|0;
 $is_exitm = sp + 264|0;
 $opnd = sp;
 $macinfo = sp + 208|0;
 $tmpmacro = sp + 136|0;
 $buffer = sp + 260|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $directive = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$1>>2] = $9;
 $10 = HEAP32[(560)>>2]|0;
 $11 = $10 >>> 11;
 $12 = $11 & 1;
 $13 = ($12|0)==(1);
 if ($13) {
  _LstWriteSrcLine();
 }
 $14 = $directive;
 switch ($14|0) {
 case 315:  {
  $15 = HEAP32[$1>>2]|0;
  $arg_loc = $15;
  label = 5;
  break;
 }
 case 313: case 314:  {
  label = 5;
  break;
 }
 default: {
  $35 = HEAP32[$1>>2]|0;
  $36 = $2;
  $37 = (($36) + ($35<<4)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)==(0);
  $41 = HEAP32[$1>>2]|0;
  if ($40) {
   $42 = (($41) - 1)|0;
   $43 = $2;
   $44 = (($43) + ($42<<4)|0);
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $46;
   $47 = (_EmitErr(209,$vararg_buffer2)|0);
   $0 = $47;
   $498 = $0;
   STACKTOP = sp;return ($498|0);
  }
  $48 = $2;
  $49 = (($48) + ($41<<4)|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (_isalpha($53)|0);
  $55 = ($54|0)!=(0);
  if ($55) {
   $101 = 1;
  } else {
   $56 = HEAP32[$1>>2]|0;
   $57 = $2;
   $58 = (($57) + ($56<<4)|0);
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = ($62|0)==(95);
   if ($63) {
    $101 = 1;
   } else {
    $64 = HEAP32[$1>>2]|0;
    $65 = $2;
    $66 = (($65) + ($64<<4)|0);
    $67 = ((($66)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = ($70|0)==(64);
    if ($71) {
     $101 = 1;
    } else {
     $72 = HEAP32[$1>>2]|0;
     $73 = $2;
     $74 = (($73) + ($72<<4)|0);
     $75 = ((($74)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 << 24 >> 24;
     $79 = ($78|0)==(36);
     if ($79) {
      $101 = 1;
     } else {
      $80 = HEAP32[$1>>2]|0;
      $81 = $2;
      $82 = (($81) + ($80<<4)|0);
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = HEAP8[$84>>0]|0;
      $86 = $85 << 24 >> 24;
      $87 = ($86|0)==(63);
      if ($87) {
       $101 = 1;
      } else {
       $88 = HEAP32[$1>>2]|0;
       $89 = $2;
       $90 = (($89) + ($88<<4)|0);
       $91 = ((($90)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = HEAP8[$92>>0]|0;
       $94 = $93 << 24 >> 24;
       $95 = ($94|0)==(46);
       if ($95) {
        $96 = HEAP32[(560)>>2]|0;
        $97 = $96 >>> 4;
        $98 = $97 & 1;
        $99 = ($98|0)==(1);
        $101 = $99;
       } else {
        $101 = 0;
       }
      }
     }
    }
   }
  }
  $100 = $101&1;
  $102 = ($100|0)==(0);
  $103 = HEAP32[$1>>2]|0;
  if ($102) {
   $104 = $2;
   $105 = (($104) + ($103<<4)|0);
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $107;
   $108 = (_EmitErr(209,$vararg_buffer5)|0);
   $0 = $108;
   $498 = $0;
   STACKTOP = sp;return ($498|0);
  }
  $arg_loc = $103;
  $109 = HEAP32[$1>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[$1>>2] = $110;
  $111 = $directive;
  $112 = ($111|0)==(310);
  $113 = $directive;
  $114 = ($113|0)==(312);
  $or$cond = $112 | $114;
  do {
   if ($or$cond) {
    $115 = HEAP32[$1>>2]|0;
    $116 = $2;
    $117 = (($116) + ($115<<4)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($119|0)!=(44);
    $121 = HEAP32[$1>>2]|0;
    if ($120) {
     $122 = $2;
     $123 = (($122) + ($121<<4)|0);
     $124 = ((($123)) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $125;
     $126 = (_EmitErr(39,$vararg_buffer8)|0);
     $0 = $126;
     $498 = $0;
     STACKTOP = sp;return ($498|0);
    }
    $127 = (($121) + 1)|0;
    HEAP32[$1>>2] = $127;
    $128 = HEAP32[$1>>2]|0;
    $129 = $2;
    $130 = (($129) + ($128<<4)|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $133 = ($132|0)==(9);
    if ($133) {
     $134 = HEAP32[$1>>2]|0;
     $135 = $2;
     $136 = (($135) + ($134<<4)|0);
     $137 = ((($136)) + 1|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138 << 24 >> 24;
     $140 = ($139|0)==(60);
     if ($140) {
      $141 = HEAP32[$1>>2]|0;
      $142 = (($141) + 1)|0;
      $143 = $2;
      $144 = (($143) + ($142<<4)|0);
      $145 = ((($144)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = HEAP32[$1>>2]|0;
      $148 = $2;
      $149 = (($148) + ($147<<4)|0);
      $150 = ((($149)) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ((($151)) + 1|0);
      $153 = $146;
      $154 = $152;
      $155 = (($153) - ($154))|0;
      $len = $155;
      $156 = $len;
      $$alloca_mul = $156;
      $157 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
      $parmstring = $157;
      $158 = $parmstring;
      $159 = HEAP32[$1>>2]|0;
      $160 = $2;
      $161 = (($160) + ($159<<4)|0);
      $162 = ((($161)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ((($163)) + 1|0);
      $165 = $len;
      _memcpy(($158|0),($164|0),($165|0))|0;
      while(1) {
       $166 = $parmstring;
       $167 = $len;
       $168 = (($166) + ($167)|0);
       $169 = ((($168)) + -1|0);
       $170 = HEAP8[$169>>0]|0;
       $171 = $170 << 24 >> 24;
       $172 = ($171|0)!=(62);
       if (!($172)) {
        break;
       }
       $173 = $len;
       $174 = (($173) + -1)|0;
       $len = $174;
      }
      $175 = $parmstring;
      $176 = $len;
      $177 = (($175) + ($176)|0);
      $178 = ((($177)) + -1|0);
      HEAP8[$178>>0] = 0;
      $179 = HEAP32[$1>>2]|0;
      $180 = (($179) + 1)|0;
      $181 = $2;
      $182 = (($181) + ($180<<4)|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = $183&255;
      $185 = ($184|0)!=(0);
      if (!($185)) {
       break;
      }
      $186 = HEAP32[$1>>2]|0;
      $187 = (($186) + 1)|0;
      $188 = $2;
      $189 = (($188) + ($187<<4)|0);
      $190 = ((($189)) + 12|0);
      $191 = HEAP32[$190>>2]|0;
      HEAP32[$vararg_buffer11>>2] = $191;
      (_EmitErr(209,$vararg_buffer11)|0);
      break;
     }
    }
    $192 = HEAP32[$1>>2]|0;
    $193 = $2;
    $194 = (($193) + ($192<<4)|0);
    $195 = ((($194)) + 12|0);
    $196 = HEAP32[$195>>2]|0;
    $ptr = $196;
    $197 = $ptr;
    $ptr2 = $197;
    while(1) {
     $198 = $ptr2;
     $199 = HEAP8[$198>>0]|0;
     $200 = $199 << 24 >> 24;
     $201 = ($200|0)!=(0);
     if ($201) {
      $202 = $ptr2;
      $203 = HEAP8[$202>>0]|0;
      $204 = $203 << 24 >> 24;
      $205 = (_isspace($204)|0);
      $206 = ($205|0)==(0);
      $499 = $206;
     } else {
      $499 = 0;
     }
     $207 = $ptr2;
     if (!($499)) {
      break;
     }
     $208 = ((($207)) + 1|0);
     $ptr2 = $208;
    }
    $209 = $ptr;
    $210 = $207;
    $211 = $209;
    $212 = (($210) - ($211))|0;
    $len = $212;
    $213 = $len;
    $214 = (($213) + 1)|0;
    $$alloca_mul26 = $214;
    $215 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul26)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
    $parmstring = $215;
    $216 = $parmstring;
    $217 = $ptr;
    $218 = $len;
    _memcpy(($216|0),($217|0),($218|0))|0;
    $219 = $parmstring;
    $220 = $len;
    $221 = (($219) + ($220)|0);
    HEAP8[$221>>0] = 0;
   } else {
    while(1) {
     $222 = HEAP32[$1>>2]|0;
     $223 = $2;
     $224 = (($223) + ($222<<4)|0);
     $225 = HEAP8[$224>>0]|0;
     $226 = $225&255;
     $227 = ($226|0)!=(0);
     if ($227) {
      $228 = HEAP32[$1>>2]|0;
      $229 = $2;
      $230 = (($229) + ($228<<4)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = ($232|0)!=(44);
      $500 = $233;
     } else {
      $500 = 0;
     }
     $234 = HEAP32[$1>>2]|0;
     if (!($500)) {
      break;
     }
     $235 = (($234) + 1)|0;
     HEAP32[$1>>2] = $235;
    }
    $236 = $2;
    $237 = (($236) + ($234<<4)|0);
    $238 = HEAP8[$237>>0]|0;
    $239 = $238&255;
    $240 = ($239|0)!=(44);
    $241 = HEAP32[$1>>2]|0;
    if ($240) {
     $242 = $2;
     $243 = (($242) + ($241<<4)|0);
     $244 = ((($243)) + 12|0);
     $245 = HEAP32[$244>>2]|0;
     HEAP32[$vararg_buffer14>>2] = $245;
     $246 = (_EmitErr(39,$vararg_buffer14)|0);
     $0 = $246;
     $498 = $0;
     STACKTOP = sp;return ($498|0);
    }
    $247 = (($241) + 1)|0;
    HEAP32[$1>>2] = $247;
    $248 = HEAP32[$1>>2]|0;
    $249 = $2;
    $250 = (($249) + ($248<<4)|0);
    $251 = HEAP8[$250>>0]|0;
    $252 = $251&255;
    $253 = ($252|0)!=(9);
    if (!($253)) {
     $254 = HEAP32[$1>>2]|0;
     $255 = $2;
     $256 = (($255) + ($254<<4)|0);
     $257 = ((($256)) + 1|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258 << 24 >> 24;
     $260 = ($259|0)!=(60);
     if (!($260)) {
      $267 = HEAP32[$1>>2]|0;
      $268 = (($267) + 1)|0;
      $269 = $2;
      $270 = (($269) + ($268<<4)|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271&255;
      $273 = ($272|0)!=(0);
      $274 = HEAP32[$1>>2]|0;
      if (!($273)) {
       $281 = $2;
       $282 = (($281) + ($274<<4)|0);
       $283 = ((($282)) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $parmstring = $284;
       break;
      }
      $275 = (($274) + 1)|0;
      $276 = $2;
      $277 = (($276) + ($275<<4)|0);
      $278 = ((($277)) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      HEAP32[$vararg_buffer20>>2] = $279;
      $280 = (_EmitErr(209,$vararg_buffer20)|0);
      $0 = $280;
      $498 = $0;
      STACKTOP = sp;return ($498|0);
     }
    }
    $261 = HEAP32[$1>>2]|0;
    $262 = $2;
    $263 = (($262) + ($261<<4)|0);
    $264 = ((($263)) + 12|0);
    $265 = HEAP32[$264>>2]|0;
    HEAP32[$vararg_buffer17>>2] = $265;
    $266 = (_EmitErr(209,$vararg_buffer17)|0);
    $0 = $266;
    $498 = $0;
    STACKTOP = sp;return ($498|0);
   }
  } while(0);
  $285 = HEAP32[$1>>2]|0;
  $286 = (($285) + -1)|0;
  HEAP32[$1>>2] = $286;
  $287 = HEAP32[$1>>2]|0;
  $288 = $2;
  $289 = (($288) + ($287<<4)|0);
  HEAP8[$289>>0] = 0;
  $290 = HEAP32[$1>>2]|0;
  HEAP32[(616)>>2] = $290;
  $291 = $arg_loc;
  HEAP32[$1>>2] = $291;
 }
 }
 do {
  if ((label|0) == 5) {
   $16 = $2;
   $17 = HEAP32[(616)>>2]|0;
   $18 = (_EvalOperand($1,$16,$17,$opnd,2)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    HEAP32[$opnd>>2] = 0;
    $20 = HEAP32[(616)>>2]|0;
    HEAP32[$1>>2] = $20;
    break;
   }
   $21 = ((($opnd)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    (_EmitError(65)|0);
    HEAP32[$opnd>>2] = 0;
    break;
   }
   $24 = HEAP32[$1>>2]|0;
   $25 = $2;
   $26 = (($25) + ($24<<4)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    $31 = $2;
    $32 = (($31) + ($30<<4)|0);
    $33 = ((($32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP32[$vararg_buffer>>2] = $34;
    (_EmitErr(209,$vararg_buffer)|0);
    HEAP32[$opnd>>2] = 0;
   }
  }
 } while(0);
 $macro = $tmpmacro;
 dest=$tmpmacro; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $292 = ((($tmpmacro)) + 4|0);
 HEAP32[$292>>2] = 109841;
 $293 = ((($tmpmacro)) + 60|0);
 HEAP32[$293>>2] = $macinfo;
 ;HEAP32[$macinfo>>2]=0|0;HEAP32[$macinfo+4>>2]=0|0;HEAP32[$macinfo+8>>2]=0|0;HEAP32[$macinfo+12>>2]=0|0;
 $294 = (_get_curr_srcfile()|0);
 $295 = ((($macinfo)) + 12|0);
 HEAP32[$295>>2] = $294;
 $296 = $macro;
 $297 = HEAP32[$1>>2]|0;
 $298 = $2;
 $299 = (_StoreMacro($296,$297,$298,1)|0);
 $300 = ($299|0)==(-1);
 $301 = $macro;
 if ($300) {
  _ReleaseMacroData($301);
  $0 = -1;
  $498 = $0;
  STACKTOP = sp;return ($498|0);
 }
 $302 = ((($301)) + 28|0);
 $303 = HEAP8[$302>>0]|0;
 $304 = $303 & -3;
 HEAP8[$302>>0] = $304;
 $305 = ((($macinfo)) + 8|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = ($306|0)!=(0|0);
 L80: do {
  if ($307) {
   $308 = $directive;
   switch ($308|0) {
   case 314: case 313:  {
    while(1) {
     $309 = $macro;
     $310 = ((($309)) + 8|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = HEAP32[$opnd>>2]|0;
     $313 = ($311|0)<($312|0);
     if (!($313)) {
      break L80;
     }
     $314 = $2;
     HEAP8[$314>>0] = 0;
     HEAP32[(616)>>2] = 0;
     $315 = $macro;
     $316 = $2;
     (_RunMacro($315,0,$316,0,2,$is_exitm)|0);
     $317 = HEAP8[$is_exitm>>0]|0;
     $318 = ($317<<24>>24)!=(0);
     if ($318) {
      break L80;
     }
     $319 = $macro;
     $320 = ((($319)) + 8|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = (($321) + 1)|0;
     HEAP32[$320>>2] = $322;
    }
    break;
   }
   case 315:  {
    while(1) {
     $323 = ((($opnd)) + 40|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(0);
     $326 = HEAP32[$opnd>>2]|0;
     $327 = ($326|0)!=(0);
     $328 = $325 ? $327 : 0;
     if (!($328)) {
      break L80;
     }
     $329 = $macro;
     $330 = HEAP32[(616)>>2]|0;
     $331 = $2;
     (_RunMacro($329,$330,$331,0,0,$is_exitm)|0);
     $332 = HEAP8[$is_exitm>>0]|0;
     $333 = ($332<<24>>24)!=(0);
     if ($333) {
      break L80;
     }
     $334 = $arg_loc;
     HEAP32[$1>>2] = $334;
     $335 = $2;
     $336 = HEAP32[(616)>>2]|0;
     $337 = (_EvalOperand($1,$335,$336,$opnd,0)|0);
     $338 = ($337|0)==(-1);
     if ($338) {
      break L80;
     }
     $339 = $macro;
     $340 = ((($339)) + 8|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = (($341) + 1)|0;
     HEAP32[$340>>2] = $342;
    }
    break;
   }
   case 312: case 310:  {
    $343 = $parmstring;
    $ptr = $343;
    while(1) {
     $344 = $ptr;
     $345 = HEAP8[$344>>0]|0;
     $346 = ($345<<24>>24)!=(0);
     if (!($346)) {
      break L80;
     }
     $347 = $2;
     HEAP8[$347>>0] = 9;
     $348 = $2;
     $349 = ((($348)) + 1|0);
     HEAP8[$349>>0] = 0;
     $350 = $2;
     $351 = ((($350)) + 4|0);
     HEAP32[$351>>2] = $buffer;
     $352 = $2;
     $353 = ((($352)) + 12|0);
     HEAP32[$353>>2] = $buffer;
     $354 = $2;
     $355 = ((($354)) + 16|0);
     HEAP8[$355>>0] = 0;
     $356 = ((($buffer)) + 2|0);
     HEAP8[$356>>0] = 0;
     HEAP32[(616)>>2] = 1;
     $357 = $ptr;
     $358 = HEAP8[$357>>0]|0;
     $359 = $358 << 24 >> 24;
     $360 = ($359|0)==(33);
     $361 = $ptr;
     do {
      if ($360) {
       $362 = ((($361)) + 1|0);
       $ptr = $362;
       $363 = HEAP8[$361>>0]|0;
       HEAP8[$buffer>>0] = $363;
       $364 = $ptr;
       $365 = HEAP8[$364>>0]|0;
       $366 = ((($buffer)) + 1|0);
       HEAP8[$366>>0] = $365;
       $367 = $ptr;
       $368 = HEAP8[$367>>0]|0;
       $369 = $368 << 24 >> 24;
       $370 = ($369|0)==(0);
       if ($370) {
        $371 = $ptr;
        $372 = ((($371)) + -1|0);
        $ptr = $372;
       }
       $373 = $2;
       $374 = ((($373)) + 8|0);
       HEAP32[$374>>2] = 2;
       $375 = ((($buffer)) + 2|0);
       $376 = $2;
       $377 = ((($376)) + 16|0);
       $378 = ((($377)) + 12|0);
       HEAP32[$378>>2] = $375;
      } else {
       $379 = HEAP8[$361>>0]|0;
       $380 = $379 << 24 >> 24;
       $381 = (_isspace($380)|0);
       $382 = ($381|0)!=(0);
       if ($382) {
        HEAP8[$buffer>>0] = 33;
        $383 = $ptr;
        $384 = HEAP8[$383>>0]|0;
        $385 = ((($buffer)) + 1|0);
        HEAP8[$385>>0] = $384;
        $386 = $2;
        $387 = ((($386)) + 8|0);
        HEAP32[$387>>2] = 2;
        $388 = ((($buffer)) + 2|0);
        $389 = $2;
        $390 = ((($389)) + 16|0);
        $391 = ((($390)) + 12|0);
        HEAP32[$391>>2] = $388;
        break;
       } else {
        $392 = $ptr;
        $393 = HEAP8[$392>>0]|0;
        HEAP8[$buffer>>0] = $393;
        $394 = $2;
        $395 = ((($394)) + 8|0);
        HEAP32[$395>>2] = 1;
        $396 = ((($buffer)) + 1|0);
        $397 = $2;
        $398 = ((($397)) + 16|0);
        $399 = ((($398)) + 12|0);
        HEAP32[$399>>2] = $396;
        $400 = ((($buffer)) + 1|0);
        HEAP8[$400>>0] = 0;
        break;
       }
      }
     } while(0);
     $401 = $macro;
     $402 = $2;
     (_RunMacro($401,0,$402,0,2,$is_exitm)|0);
     $403 = HEAP8[$is_exitm>>0]|0;
     $404 = ($403<<24>>24)!=(0);
     if ($404) {
      break L80;
     }
     $405 = $ptr;
     $406 = ((($405)) + 1|0);
     $ptr = $406;
     $407 = $macro;
     $408 = ((($407)) + 8|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = (($409) + 1)|0;
     HEAP32[$408>>2] = $410;
    }
    break;
   }
   default: {
    $411 = HEAP32[(616)>>2]|0;
    $412 = (($411) + 1)|0;
    HEAP32[$1>>2] = $412;
    $413 = $parmstring;
    $414 = HEAP32[$1>>2]|0;
    $415 = $2;
    $416 = (_Tokenize($413,$414,$415,3)|0);
    HEAP32[(616)>>2] = $416;
    $417 = HEAP32[$1>>2]|0;
    $418 = HEAP32[(616)>>2]|0;
    $419 = ($417|0)!=($418|0);
    if ($419) {
     $420 = HEAP32[(616)>>2]|0;
     $421 = (($420) - 1)|0;
     $422 = $2;
     $423 = (($422) + ($421<<4)|0);
     $424 = HEAP8[$423>>0]|0;
     $425 = $424&255;
     $426 = ($425|0)==(44);
     if ($426) {
      $427 = HEAP32[(616)>>2]|0;
      $428 = (($427) - 1)|0;
      $429 = $2;
      $430 = (($429) + ($428<<4)|0);
      $431 = ((($430)) + 12|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = ((($432)) + 1|0);
      $434 = HEAP8[$433>>0]|0;
      $435 = $434 << 24 >> 24;
      $436 = ($435|0)!=(0);
      if ($436) {
       $437 = HEAP32[(616)>>2]|0;
       $438 = $2;
       $439 = (($438) + ($437<<4)|0);
       HEAP8[$439>>0] = 9;
       $440 = HEAP32[(616)>>2]|0;
       $441 = $2;
       $442 = (($441) + ($440<<4)|0);
       $443 = ((($442)) + 1|0);
       HEAP8[$443>>0] = 0;
       $444 = HEAP32[(616)>>2]|0;
       $445 = $2;
       $446 = (($445) + ($444<<4)|0);
       $447 = ((($446)) + 12|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = (_strlen($448)|0);
       $450 = HEAP32[(616)>>2]|0;
       $451 = $2;
       $452 = (($451) + ($450<<4)|0);
       $453 = ((($452)) + 8|0);
       HEAP32[$453>>2] = $449;
       $454 = HEAP32[(616)>>2]|0;
       $455 = $2;
       $456 = (($455) + ($454<<4)|0);
       $457 = ((($456)) + 12|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = HEAP32[(616)>>2]|0;
       $460 = $2;
       $461 = (($460) + ($459<<4)|0);
       $462 = ((($461)) + 8|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = (($458) + ($463)|0);
       $465 = HEAP32[(616)>>2]|0;
       $466 = (($465) + 1)|0;
       $467 = $2;
       $468 = (($467) + ($466<<4)|0);
       $469 = ((($468)) + 12|0);
       HEAP32[$469>>2] = $464;
       $470 = HEAP32[(616)>>2]|0;
       $471 = (($470) + 1)|0;
       HEAP32[(616)>>2] = $471;
       $472 = HEAP32[(616)>>2]|0;
       $473 = $2;
       $474 = (($473) + ($472<<4)|0);
       HEAP8[$474>>0] = 0;
      }
     }
    }
    $475 = $macro;
    $476 = ((($475)) + 28|0);
    $477 = HEAP8[$476>>0]|0;
    $478 = $477 & -2;
    HEAP8[$476>>0] = $478;
    while(1) {
     $479 = HEAP32[$1>>2]|0;
     $480 = HEAP32[(616)>>2]|0;
     $481 = ($479|0)<($480|0);
     if (!($481)) {
      break L80;
     }
     $482 = $macro;
     $483 = HEAP32[$1>>2]|0;
     $484 = $2;
     $485 = (_RunMacro($482,$483,$484,0,4,$is_exitm)|0);
     HEAP32[$1>>2] = $485;
     $486 = HEAP32[$1>>2]|0;
     $487 = ($486|0)<(0);
     if ($487) {
      break L80;
     }
     $488 = HEAP8[$is_exitm>>0]|0;
     $489 = $488&255;
     $490 = ($489|0)!=(0);
     if ($490) {
      break L80;
     }
     $491 = HEAP32[$1>>2]|0;
     $492 = (($491) + 1)|0;
     HEAP32[$1>>2] = $492;
     $493 = $macro;
     $494 = ((($493)) + 8|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = (($495) + 1)|0;
     HEAP32[$494>>2] = $496;
    }
   }
   }
  }
 } while(0);
 $497 = $macro;
 _ReleaseMacroData($497);
 $0 = 0;
 $498 = $0;
 STACKTOP = sp;return ($498|0);
}
function _DeleteLineQueue() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $curr = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(416)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = HEAP32[$3>>2]|0;
  $next = $4;
  $5 = $curr;
  _MemFree($5);
  $6 = $next;
  $curr = $6;
 }
 HEAP32[(416)>>2] = 0;
 STACKTOP = sp;return;
}
function _AddLineQueue($line) {
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $new = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $i = $2;
 $3 = $i;
 $4 = (8 + ($3))|0;
 $5 = (_MemAlloc($4)|0);
 $new = $5;
 $6 = $new;
 HEAP32[$6>>2] = 0;
 $7 = $new;
 $8 = ((($7)) + 4|0);
 $9 = $0;
 $10 = $i;
 $11 = (($10) + 1)|0;
 _memcpy(($8|0),($9|0),($11|0))|0;
 $12 = HEAP32[(416)>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = $new;
 if ($13) {
  HEAP32[(416)>>2] = $14;
  $16 = $new;
  HEAP32[(420)>>2] = $16;
  STACKTOP = sp;return;
 } else {
  $15 = HEAP32[(420)>>2]|0;
  HEAP32[$15>>2] = $14;
  $16 = $new;
  HEAP32[(420)>>2] = $16;
  STACKTOP = sp;return;
 }
}
function _AddLineQueueX($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0, $args = 0, $buffer = 0, $d = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0, $i = 0, $l = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 24|0;
 $buffer = sp + 48|0;
 $0 = $fmt;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 $s = $1;
 $d = $buffer;
 while(1) {
  $2 = $s;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $s;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)==(37);
  $9 = $s;
  L4: do {
   if ($8) {
    $10 = ((($9)) + 1|0);
    $s = $10;
    $11 = $s;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    switch ($13|0) {
    case 114:  {
     $arglist_current = HEAP32[$args>>2]|0;
     $14 = $arglist_current;
     $15 = ((0) + 4|0);
     $expanded3 = $15;
     $expanded = (($expanded3) - 1)|0;
     $16 = (($14) + ($expanded))|0;
     $17 = ((0) + 4|0);
     $expanded7 = $17;
     $expanded6 = (($expanded7) - 1)|0;
     $expanded5 = $expanded6 ^ -1;
     $18 = $16 & $expanded5;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $arglist_next = ((($19)) + 4|0);
     HEAP32[$args>>2] = $arglist_next;
     $i = $20;
     $21 = $i;
     $22 = $d;
     (_GetResWName($21,$22)|0);
     $23 = $i;
     $24 = (22260 + ($23<<3)|0);
     $25 = ((($24)) + 2|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $d;
     $29 = (($28) + ($27)|0);
     $d = $29;
     break L4;
     break;
    }
    case 115:  {
     $arglist_current2 = HEAP32[$args>>2]|0;
     $30 = $arglist_current2;
     $31 = ((0) + 4|0);
     $expanded10 = $31;
     $expanded9 = (($expanded10) - 1)|0;
     $32 = (($30) + ($expanded9))|0;
     $33 = ((0) + 4|0);
     $expanded14 = $33;
     $expanded13 = (($expanded14) - 1)|0;
     $expanded12 = $expanded13 ^ -1;
     $34 = $32 & $expanded12;
     $35 = $34;
     $36 = HEAP32[$35>>2]|0;
     $arglist_next3 = ((($35)) + 4|0);
     HEAP32[$args>>2] = $arglist_next3;
     $p = $36;
     $37 = $p;
     $38 = (_strlen($37)|0);
     $i = $38;
     $39 = $d;
     $40 = $p;
     $41 = $i;
     _memcpy(($39|0),($40|0),($41|0))|0;
     $42 = $i;
     $43 = $d;
     $44 = (($43) + ($42)|0);
     $d = $44;
     $45 = $d;
     HEAP8[$45>>0] = 0;
     break L4;
     break;
    }
    case 120: case 117: case 100:  {
     $arglist_current5 = HEAP32[$args>>2]|0;
     $46 = $arglist_current5;
     $47 = ((0) + 4|0);
     $expanded17 = $47;
     $expanded16 = (($expanded17) - 1)|0;
     $48 = (($46) + ($expanded16))|0;
     $49 = ((0) + 4|0);
     $expanded21 = $49;
     $expanded20 = (($expanded21) - 1)|0;
     $expanded19 = $expanded20 ^ -1;
     $50 = $48 & $expanded19;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next6 = ((($51)) + 4|0);
     HEAP32[$args>>2] = $arglist_next6;
     $l = $52;
     $53 = $s;
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($55|0)==(120);
     $57 = $l;
     $58 = $d;
     if ($56) {
      (_myltoa($57,$58,16,0,0)|0);
      $59 = $d;
      $60 = (_strlen($59)|0);
      $61 = $d;
      $62 = (($61) + ($60)|0);
      $d = $62;
      break L4;
     }
     $63 = $l;
     $64 = ($63|0)<(0);
     $65 = $64&1;
     $66 = $65&255;
     (_myltoa($57,$58,10,$66,0)|0);
     $67 = $d;
     $68 = (_strlen($67)|0);
     $69 = $d;
     $70 = (($69) + ($68)|0);
     $d = $70;
     $71 = HEAP8[(548)>>0]|0;
     $72 = $71&255;
     $73 = ($72|0)!=(10);
     if (!($73)) {
      break L4;
     }
     $74 = $d;
     $75 = ((($74)) + 1|0);
     $d = $75;
     HEAP8[$74>>0] = 116;
     break L4;
     break;
    }
    default: {
     $76 = $s;
     $77 = HEAP8[$76>>0]|0;
     $78 = $d;
     $79 = ((($78)) + 1|0);
     $d = $79;
     HEAP8[$78>>0] = $77;
     break L4;
    }
    }
   } else {
    $80 = HEAP8[$9>>0]|0;
    $81 = $d;
    $82 = ((($81)) + 1|0);
    $d = $82;
    HEAP8[$81>>0] = $80;
   }
  } while(0);
  $83 = $s;
  $84 = ((($83)) + 1|0);
  $s = $84;
 }
 $85 = $d;
 HEAP8[$85>>0] = 0;
 _AddLineQueue($buffer);
 STACKTOP = sp;return;
}
function _RunLineQueue() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $currline = 0, $nextline = 0, $oldstat = 0, $tokenarray = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $oldstat = sp + 12|0;
 $0 = HEAP32[(416)>>2]|0;
 $currline = $0;
 $1 = (_PushInputStatus($oldstat)|0);
 $tokenarray = $1;
 $2 = HEAP32[(596)>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[(596)>>2] = $3;
 HEAP32[(416)>>2] = 0;
 while(1) {
  $4 = $currline;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   break;
  }
  $6 = $currline;
  $7 = HEAP32[$6>>2]|0;
  $nextline = $7;
  $8 = HEAP32[(600)>>2]|0;
  $9 = $currline;
  $10 = ((($9)) + 4|0);
  (_strcpy($8,$10)|0);
  $11 = $currline;
  _MemFree($11);
  $12 = HEAP32[(600)>>2]|0;
  $13 = $tokenarray;
  $14 = (_PreprocessLine($12,$13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $tokenarray;
   (_ParseLine($16)|0);
  }
  $17 = $nextline;
  $currline = $17;
 }
 $18 = HEAP32[(596)>>2]|0;
 $19 = (($18) + -1)|0;
 HEAP32[(596)>>2] = $19;
 _PopInputStatus($oldstat);
 STACKTOP = sp;return;
}
function _fill_placeholders($dst,$src,$argc,$localstart,$argv) {
 $dst = $dst|0;
 $src = $src|0;
 $argc = $argc|0;
 $localstart = $localstart|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i = 0, $p = 0, $parmno = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $dst;
 $1 = $src;
 $2 = $argc;
 $3 = $localstart;
 $4 = $argv;
 $5 = $1;
 $p = $5;
 while(1) {
  $6 = $p;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $p;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(10);
  $14 = $p;
  $15 = ((($14)) + 1|0);
  $p = $15;
  if (!($13)) {
   $84 = HEAP8[$14>>0]|0;
   $85 = $0;
   $86 = ((($85)) + 1|0);
   $0 = $86;
   HEAP8[$85>>0] = $84;
   continue;
  }
  $16 = $p;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) - 1)|0;
  $parmno = $19;
  $20 = $p;
  $21 = ((($20)) + 1|0);
  $p = $21;
  $22 = $parmno;
  $23 = $2;
  $24 = ($22>>>0)>=($23>>>0);
  if (!($24)) {
   $65 = $parmno;
   $66 = $4;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)!=(0|0);
   if (!($69)) {
    continue;
   }
   $70 = $parmno;
   $71 = $4;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (_strlen($73)|0);
   $i = $74;
   $75 = $0;
   $76 = $parmno;
   $77 = $4;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $i;
   _memcpy(($75|0),($79|0),($80|0))|0;
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81)|0);
   $0 = $83;
   continue;
  }
  $25 = $0;
  $26 = ((($25)) + 1|0);
  $0 = $26;
  HEAP8[$25>>0] = 63;
  $27 = $0;
  $28 = ((($27)) + 1|0);
  $0 = $28;
  HEAP8[$27>>0] = 63;
  $29 = $3;
  $30 = $parmno;
  $31 = (($29) + ($30))|0;
  $32 = $2;
  $33 = (($31) - ($32))|0;
  $i = $33;
  $34 = $i;
  $35 = ($34>>>0)>(65535);
  if ($35) {
   $36 = $0;
   $37 = $i;
   HEAP32[$vararg_buffer>>2] = $37;
   $38 = (_sprintf($36,89608,$vararg_buffer)|0);
   $i = $38;
   $39 = $i;
   $40 = $0;
   $41 = (($40) + ($39)|0);
   $0 = $41;
   continue;
  } else {
   $42 = $i;
   $43 = $42 >>> 12;
   $44 = $43&255;
   $45 = (_HexDigit($44)|0);
   $46 = $0;
   $47 = ((($46)) + 1|0);
   $0 = $47;
   HEAP8[$46>>0] = $45;
   $48 = $i;
   $49 = $48 >>> 8;
   $50 = $49&255;
   $51 = (_HexDigit($50)|0);
   $52 = $0;
   $53 = ((($52)) + 1|0);
   $0 = $53;
   HEAP8[$52>>0] = $51;
   $54 = $i;
   $55 = $54 >>> 4;
   $56 = $55&255;
   $57 = (_HexDigit($56)|0);
   $58 = $0;
   $59 = ((($58)) + 1|0);
   $0 = $59;
   HEAP8[$58>>0] = $57;
   $60 = $i;
   $61 = $60&255;
   $62 = (_HexDigit($61)|0);
   $63 = $0;
   $64 = ((($63)) + 1|0);
   $0 = $64;
   HEAP8[$63>>0] = $62;
   continue;
  }
 }
 $87 = $0;
 HEAP8[$87>>0] = 0;
 STACKTOP = sp;return;
}
function _StoreMacro($macro,$i,$tokenarray,$store_data) {
 $macro = $macro|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $store_data = $store_data|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $info = 0, $j = 0, $j1 = 0, $locals_done = 0, $ls = 0, $mindex = 0, $mnames = 0, $nesting_depth = 0, $nextline = 0, $oldc = 0, $paranode = 0, $phs = 0, $ptr = 0;
 var $size = 0, $src = 0, $tok = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ls = sp + 2160|0;
 $tok = sp + 2128|0;
 $mnames = sp + 80|0;
 $buffer = sp + 2232|0;
 $1 = $macro;
 $2 = $i;
 $3 = $tokenarray;
 $4 = $store_data;
 $nesting_depth = 0;
 $5 = $1;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $info = $7;
 $8 = $4;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($9) {
   $10 = $2;
   $11 = HEAP32[(616)>>2]|0;
   $12 = ($10|0)<($11|0);
   if ($12) {
    $13 = $2;
    $j = $13;
    $14 = $info;
    HEAP16[$14>>1] = 1;
    while(1) {
     $15 = $j;
     $16 = HEAP32[(616)>>2]|0;
     $17 = ($15|0)<($16|0);
     if (!($17)) {
      break;
     }
     $18 = $j;
     $19 = $3;
     $20 = (($19) + ($18<<4)|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21&255;
     $23 = ($22|0)==(44);
     if ($23) {
      $24 = $info;
      $25 = HEAP16[$24>>1]|0;
      $26 = (($25) + 1)<<16>>16;
      HEAP16[$24>>1] = $26;
     }
     $27 = $j;
     $28 = (($27) + 1)|0;
     $j = $28;
    }
    $29 = $info;
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = $31<<3;
    $33 = (_LclAlloc($32)|0);
    $34 = $info;
    $35 = ((($34)) + 4|0);
    HEAP32[$35>>2] = $33;
   } else {
    $36 = $info;
    HEAP16[$36>>1] = 0;
    $37 = $info;
    $38 = ((($37)) + 4|0);
    HEAP32[$38>>2] = 0;
   }
   $39 = $info;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $paranode = $41;
   $mindex = 0;
   L14: while(1) {
    $42 = $2;
    $43 = HEAP32[(616)>>2]|0;
    $44 = ($42|0)<($43|0);
    if (!($44)) {
     break L1;
    }
    $45 = $2;
    $46 = $3;
    $47 = (($46) + ($45<<4)|0);
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $token = $49;
    $50 = $token;
    $51 = HEAP8[$50>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (_isalpha($52)|0);
    $54 = ($53|0)!=(0);
    if (!($54)) {
     $55 = $token;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = ($57|0)==(95);
     if (!($58)) {
      $59 = $token;
      $60 = HEAP8[$59>>0]|0;
      $61 = $60 << 24 >> 24;
      $62 = ($61|0)==(64);
      if (!($62)) {
       $63 = $token;
       $64 = HEAP8[$63>>0]|0;
       $65 = $64 << 24 >> 24;
       $66 = ($65|0)==(36);
       if (!($66)) {
        $67 = $token;
        $68 = HEAP8[$67>>0]|0;
        $69 = $68 << 24 >> 24;
        $70 = ($69|0)==(63);
        if (!($70)) {
         $71 = $token;
         $72 = HEAP8[$71>>0]|0;
         $73 = $72 << 24 >> 24;
         $74 = ($73|0)==(46);
         if (!($74)) {
          label = 20;
          break;
         }
         $75 = HEAP32[(560)>>2]|0;
         $76 = $75 >>> 4;
         $77 = $76 & 1;
         $78 = ($77|0)==(1);
         if (!($78)) {
          label = 20;
          break;
         }
        }
       }
      }
     }
    }
    $79 = $2;
    $80 = $3;
    $81 = (($80) + ($79<<4)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = ($83|0)==(9);
    if ($84) {
     label = 20;
     break;
    }
    $86 = $2;
    $87 = $3;
    $88 = (($87) + ($86<<4)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ($90|0)!=(8);
    if ($91) {
     $92 = $2;
     $93 = $3;
     $94 = (($93) + ($92<<4)|0);
     $95 = ((($94)) + 4|0);
     $96 = HEAP32[$95>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $96;
     _EmitWarn(4,269,$vararg_buffer1);
    }
    $97 = $paranode;
    HEAP32[$97>>2] = 0;
    $98 = $paranode;
    $99 = ((($98)) + 4|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 & -2;
    HEAP8[$99>>0] = $101;
    $102 = $token;
    $103 = (_strlen($102)|0);
    $j = $103;
    $104 = $token;
    $105 = $mindex;
    $106 = (($mnames) + ($105<<3)|0);
    HEAP32[$106>>2] = $104;
    $107 = $j;
    $108 = $107&65535;
    $109 = $mindex;
    $110 = (($mnames) + ($109<<3)|0);
    $111 = ((($110)) + 4|0);
    HEAP16[$111>>1] = $108;
    $112 = $mindex;
    $113 = (($112) + 1)|0;
    $mindex = $113;
    $114 = $mindex;
    $115 = (($mnames) + ($114<<3)|0);
    HEAP32[$115>>2] = 0;
    $116 = $2;
    $117 = (($116) + 1)|0;
    $2 = $117;
    $118 = $2;
    $119 = $3;
    $120 = (($119) + ($118<<4)|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = ($122|0)==(58);
    do {
     if ($123) {
      $124 = $2;
      $125 = (($124) + 1)|0;
      $2 = $125;
      $126 = $2;
      $127 = $3;
      $128 = (($127) + ($126<<4)|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129&255;
      $131 = ($130|0)==(3);
      if ($131) {
       $132 = $2;
       $133 = $3;
       $134 = (($133) + ($132<<4)|0);
       $135 = ((($134)) + 1|0);
       $136 = HEAP8[$135>>0]|0;
       $137 = $136&255;
       $138 = ($137|0)==(48);
       if ($138) {
        $139 = $2;
        $140 = (($139) + 1)|0;
        $2 = $140;
        $141 = $2;
        $142 = $3;
        $143 = (($142) + ($141<<4)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145|0)!=(9);
        if ($146) {
         label = 28;
         break L14;
        }
        $147 = $2;
        $148 = $3;
        $149 = (($148) + ($147<<4)|0);
        $150 = ((($149)) + 1|0);
        $151 = HEAP8[$150>>0]|0;
        $152 = $151 << 24 >> 24;
        $153 = ($152|0)!=(60);
        if ($153) {
         label = 28;
         break L14;
        }
        $154 = $2;
        $155 = $3;
        $156 = (($155) + ($154<<4)|0);
        $157 = ((($156)) + 8|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = (($158) + 1)|0;
        $160 = (_LclAlloc($159)|0);
        $161 = $paranode;
        HEAP32[$161>>2] = $160;
        $162 = $paranode;
        $163 = HEAP32[$162>>2]|0;
        $164 = $2;
        $165 = $3;
        $166 = (($165) + ($164<<4)|0);
        $167 = ((($166)) + 4|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = $2;
        $170 = $3;
        $171 = (($170) + ($169<<4)|0);
        $172 = ((($171)) + 8|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($173) + 1)|0;
        _memcpy(($163|0),($168|0),($174|0))|0;
        $175 = $2;
        $176 = (($175) + 1)|0;
        $2 = $176;
        break;
       }
      }
      $177 = $2;
      $178 = $3;
      $179 = (($178) + ($177<<4)|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_strcasecmp($181,89611)|0);
      $183 = ($182|0)==(0);
      if ($183) {
       $184 = $paranode;
       $185 = ((($184)) + 4|0);
       $186 = HEAP8[$185>>0]|0;
       $187 = $186 & -2;
       $188 = $187 | 1;
       HEAP8[$185>>0] = $188;
       $189 = $2;
       $190 = (($189) + 1)|0;
       $2 = $190;
       break;
      }
      $191 = $2;
      $192 = $3;
      $193 = (($192) + ($191<<4)|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = $194&255;
      $196 = ($195|0)==(7);
      if ($196) {
       $197 = $2;
       $198 = $3;
       $199 = (($198) + ($197<<4)|0);
       $200 = ((($199)) + 8|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(188);
       if ($202) {
        $203 = $1;
        $204 = ((($203)) + 28|0);
        $205 = HEAP8[$204>>0]|0;
        $206 = $205 & -2;
        $207 = $206 | 1;
        HEAP8[$204>>0] = $207;
        $208 = $2;
        $209 = (($208) + 1)|0;
        $210 = $3;
        $211 = (($210) + ($209<<4)|0);
        $212 = HEAP8[$211>>0]|0;
        $213 = $212&255;
        $214 = ($213|0)!=(0);
        if ($214) {
         label = 35;
         break L14;
        }
        $215 = $2;
        $216 = (($215) + 1)|0;
        $2 = $216;
        break;
       }
      }
      $217 = $2;
      $218 = $3;
      $219 = (($218) + ($217<<4)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = ($221|0)==(3);
      if ($222) {
       $223 = $2;
       $224 = $3;
       $225 = (($224) + ($223<<4)|0);
       $226 = ((($225)) + 8|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ($227|0)==(354);
       if ($228) {
        $229 = HEAP8[(6083)>>0]|0;
        $230 = $229&255;
        $231 = ($230|0)==(0);
        if ($231) {
         $232 = $paranode;
         $233 = $info;
         $234 = ((($233)) + 4|0);
         $235 = HEAP32[$234>>2]|0;
         $236 = ($232|0)!=($235|0);
         if ($236) {
          label = 41;
          break L14;
         }
         $237 = $1;
         $238 = ((($237)) + 28|0);
         $239 = HEAP8[$238>>0]|0;
         $240 = $239 & -5;
         $241 = $240 | 4;
         HEAP8[$238>>0] = $241;
         $242 = $2;
         $243 = (($242) + 1)|0;
         $2 = $243;
         break;
        }
       }
      }
      $244 = $2;
      $245 = $3;
      $246 = (($245) + ($244<<4)|0);
      $247 = ((($246)) + 4|0);
      $248 = HEAP32[$247>>2]|0;
      $249 = (_strcasecmp($248,89615)|0);
      $250 = ($249|0)==(0);
      if (!($250)) {
       label = 47;
       break L14;
      }
      $251 = $1;
      $252 = ((($251)) + 28|0);
      $253 = HEAP8[$252>>0]|0;
      $254 = $253 & -2;
      $255 = $254 | 1;
      HEAP8[$252>>0] = $255;
      $256 = $1;
      $257 = ((($256)) + 28|0);
      $258 = HEAP8[$257>>0]|0;
      $259 = $258 & -9;
      $260 = $259 | 8;
      HEAP8[$257>>0] = $260;
      $261 = $2;
      $262 = (($261) + 1)|0;
      $263 = $3;
      $264 = (($263) + ($262<<4)|0);
      $265 = HEAP8[$264>>0]|0;
      $266 = $265&255;
      $267 = ($266|0)!=(0);
      if ($267) {
       label = 45;
       break L14;
      }
      $268 = $2;
      $269 = (($268) + 1)|0;
      $2 = $269;
     }
    } while(0);
    $275 = $2;
    $276 = HEAP32[(616)>>2]|0;
    $277 = ($275|0)<($276|0);
    if ($277) {
     $278 = $2;
     $279 = $3;
     $280 = (($279) + ($278<<4)|0);
     $281 = HEAP8[$280>>0]|0;
     $282 = $281&255;
     $283 = ($282|0)!=(44);
     if ($283) {
      label = 50;
      break;
     }
    }
    $289 = $2;
    $290 = (($289) + 1)|0;
    $2 = $290;
    $291 = $paranode;
    $292 = ((($291)) + 8|0);
    $paranode = $292;
   }
   if ((label|0) == 20) {
    $85 = $token;
    HEAP32[$vararg_buffer>>2] = $85;
    (_EmitErr(209,$vararg_buffer)|0);
    break;
   }
   else if ((label|0) == 28) {
    (_EmitError(185)|0);
    break;
   }
   else if ((label|0) == 35) {
    (_EmitError(147)|0);
    break;
   }
   else if ((label|0) == 41) {
    (_EmitError(148)|0);
    break;
   }
   else if ((label|0) == 45) {
    (_EmitError(147)|0);
    break;
   }
   else if ((label|0) == 47) {
    $270 = $2;
    $271 = $3;
    $272 = (($271) + ($270<<4)|0);
    $273 = ((($272)) + 4|0);
    $274 = HEAP32[$273>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $274;
    (_EmitErr(209,$vararg_buffer4)|0);
    break;
   }
   else if ((label|0) == 50) {
    $284 = $2;
    $285 = $3;
    $286 = (($285) + ($284<<4)|0);
    $287 = ((($286)) + 12|0);
    $288 = HEAP32[$287>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $288;
    (_EmitErr(209,$vararg_buffer7)|0);
    break;
   }
  }
 } while(0);
 $locals_done = 0;
 $293 = $info;
 $294 = ((($293)) + 8|0);
 $nextline = $294;
 L66: while(1) {
  $295 = (_GetTextLine($buffer)|0);
  $src = $295;
  $296 = $src;
  $297 = ($296|0)==(0|0);
  if ($297) {
   _Fatal(162,$vararg_buffer10);
  }
  $298 = HEAP32[(560)>>2]|0;
  $299 = $298 >>> 11;
  $300 = $299 & 1;
  $301 = ($300|0)!=(0);
  if ($301) {
   $302 = HEAP8[(550)>>0]|0;
   $303 = $302&255;
   $304 = $303 & -2;
   $305 = $304&255;
   HEAP8[(550)>>0] = $305;
   _LstWrite(8,0,$buffer);
  }
  $306 = $src;
  HEAP32[$ls>>2] = $306;
  $307 = $src;
  $308 = ((($ls)) + 8|0);
  HEAP32[$308>>2] = $307;
  $309 = ((($ls)) + 12|0);
  HEAP32[$309>>2] = 0;
  while(1) {
   $310 = HEAP32[$ls>>2]|0;
   $311 = HEAP8[$310>>0]|0;
   $312 = $311 << 24 >> 24;
   $313 = (_isspace($312)|0);
   $314 = ($313|0)!=(0);
   $315 = HEAP32[$ls>>2]|0;
   if ($314) {
    $316 = ((($315)) + 1|0);
    HEAP32[$ls>>2] = $316;
    continue;
   }
   $317 = HEAP8[$315>>0]|0;
   $318 = $317 << 24 >> 24;
   $319 = ($318|0)==(0);
   if ($319) {
    label = 62;
    break;
   }
   $320 = HEAP32[$ls>>2]|0;
   $321 = HEAP8[$320>>0]|0;
   $322 = $321 << 24 >> 24;
   $323 = ($322|0)==(59);
   if ($323) {
    label = 62;
    break;
   }
   $338 = HEAP32[(612)>>2]|0;
   $339 = ((($ls)) + 4|0);
   HEAP32[$339>>2] = $338;
   $340 = ((($ls)) + 16|0);
   HEAP8[$340>>0] = 0;
   $341 = ((($ls)) + 17|0);
   HEAP8[$341>>0] = 0;
   HEAP8[$tok>>0] = 0;
   $342 = (_GetToken($tok,$ls)|0);
   $343 = ($342|0)==(-1);
   if ($343) {
    label = 65;
    break L66;
   }
   $344 = HEAP32[$ls>>2]|0;
   $345 = (_strchr($344,92)|0);
   $346 = ($345|0)!=(0|0);
   if ($346) {
    $347 = HEAP32[$ls>>2]|0;
    $ptr = $347;
    L84: while(1) {
     $348 = HEAP32[$ls>>2]|0;
     $349 = HEAP8[$348>>0]|0;
     $350 = $349 << 24 >> 24;
     $351 = ($350|0)!=(0);
     if (!($351)) {
      break;
     }
     $352 = HEAP32[$ls>>2]|0;
     $353 = HEAP8[$352>>0]|0;
     $354 = $353 << 24 >> 24;
     $355 = ($354|0)!=(59);
     if (!($355)) {
      break;
     }
     $356 = ((($ls)) + 18|0);
     HEAP8[$356>>0] = 0;
     $357 = ((($tok)) + 16|0);
     (_GetToken($357,$ls)|0);
     $358 = ((($ls)) + 18|0);
     $359 = HEAP8[$358>>0]|0;
     $360 = $359 << 24 >> 24;
     $361 = $360 & 1;
     $362 = ($361|0)!=(0);
     if ($362) {
      $363 = HEAP32[(560)>>2]|0;
      $364 = $363 >>> 11;
      $365 = $364 & 1;
      $366 = ($365|0)!=(0);
      if ($366) {
       $367 = HEAP8[(550)>>0]|0;
       $368 = $367&255;
       $369 = $368 & -2;
       $370 = $369&255;
       HEAP8[(550)>>0] = $370;
       $371 = HEAP32[$ls>>2]|0;
       _LstWrite(8,0,$371);
      }
     }
     while(1) {
      $372 = HEAP32[$ls>>2]|0;
      $373 = HEAP8[$372>>0]|0;
      $374 = $373 << 24 >> 24;
      $375 = (_isspace($374)|0);
      $376 = ($375|0)!=(0);
      if (!($376)) {
       continue L84;
      }
      $377 = HEAP32[$ls>>2]|0;
      $378 = ((($377)) + 1|0);
      HEAP32[$ls>>2] = $378;
     }
    }
    $379 = $ptr;
    HEAP32[$ls>>2] = $379;
   }
   $380 = HEAP8[$tok>>0]|0;
   $381 = $380&255;
   $382 = ($381|0)==(0);
   if (!($382)) {
    break;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $324 = $4;
   $325 = ($324<<24>>24)!=(0);
   if (!($325)) {
    continue;
   }
   $326 = (_LclAlloc(8)|0);
   $327 = $nextline;
   HEAP32[$327>>2] = $326;
   $328 = $nextline;
   $329 = HEAP32[$328>>2]|0;
   HEAP32[$329>>2] = 0;
   $330 = $nextline;
   $331 = HEAP32[$330>>2]|0;
   $332 = ((($331)) + 4|0);
   HEAP8[$332>>0] = 0;
   $333 = $nextline;
   $334 = HEAP32[$333>>2]|0;
   $335 = ((($334)) + 5|0);
   HEAP8[$335>>0] = 0;
   $336 = $nextline;
   $337 = HEAP32[$336>>2]|0;
   $nextline = $337;
   continue;
  }
  $383 = $locals_done;
  $384 = $383&255;
  $385 = ($384|0)==(0);
  if ($385) {
   $386 = HEAP8[$tok>>0]|0;
   $387 = $386&255;
   $388 = ($387|0)==(3);
   if ($388) {
    $389 = ((($tok)) + 8|0);
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)==(353);
    if ($391) {
     $392 = $4;
     $393 = ($392<<24>>24)!=(0);
     if (!($393)) {
      continue;
     }
     while(1) {
      $394 = HEAP32[$ls>>2]|0;
      $395 = HEAP8[$394>>0]|0;
      $396 = $395 << 24 >> 24;
      $397 = (_isspace($396)|0);
      $398 = ($397|0)!=(0);
      $399 = HEAP32[$ls>>2]|0;
      if ($398) {
       $400 = ((($399)) + 1|0);
       HEAP32[$ls>>2] = $400;
       continue;
      }
      $401 = HEAP8[$399>>0]|0;
      $402 = $401 << 24 >> 24;
      $403 = ($402|0)==(0);
      if ($403) {
       continue L66;
      }
      $404 = HEAP32[$ls>>2]|0;
      $405 = HEAP8[$404>>0]|0;
      $406 = $405 << 24 >> 24;
      $407 = ($406|0)==(59);
      if ($407) {
       continue L66;
      }
      $408 = HEAP32[(612)>>2]|0;
      $409 = ((($ls)) + 4|0);
      HEAP32[$409>>2] = $408;
      (_GetToken($tok,$ls)|0);
      $410 = HEAP32[(612)>>2]|0;
      $411 = HEAP8[$410>>0]|0;
      $412 = $411 << 24 >> 24;
      $413 = (_isalpha($412)|0);
      $414 = ($413|0)!=(0);
      if (!($414)) {
       $415 = HEAP32[(612)>>2]|0;
       $416 = HEAP8[$415>>0]|0;
       $417 = $416 << 24 >> 24;
       $418 = ($417|0)==(95);
       if (!($418)) {
        $419 = HEAP32[(612)>>2]|0;
        $420 = HEAP8[$419>>0]|0;
        $421 = $420 << 24 >> 24;
        $422 = ($421|0)==(64);
        if (!($422)) {
         $423 = HEAP32[(612)>>2]|0;
         $424 = HEAP8[$423>>0]|0;
         $425 = $424 << 24 >> 24;
         $426 = ($425|0)==(36);
         if (!($426)) {
          $427 = HEAP32[(612)>>2]|0;
          $428 = HEAP8[$427>>0]|0;
          $429 = $428 << 24 >> 24;
          $430 = ($429|0)==(63);
          if (!($430)) {
           $431 = HEAP32[(612)>>2]|0;
           $432 = HEAP8[$431>>0]|0;
           $433 = $432 << 24 >> 24;
           $434 = ($433|0)==(46);
           if (!($434)) {
            label = 92;
            break;
           }
           $435 = HEAP32[(560)>>2]|0;
           $436 = $435 >>> 4;
           $437 = $436 & 1;
           $438 = ($437|0)==(1);
           if (!($438)) {
            label = 92;
            break;
           }
          }
         }
        }
       }
      }
      $440 = HEAP8[$tok>>0]|0;
      $441 = $440&255;
      $442 = ($441|0)!=(8);
      if ($442) {
       $443 = HEAP32[(612)>>2]|0;
       HEAP32[$vararg_buffer15>>2] = $443;
       _EmitWarn(4,269,$vararg_buffer15);
      }
      $444 = $mindex;
      $445 = ($444|0)==(255);
      if ($445) {
       label = 96;
       break;
      }
      $446 = HEAP32[(612)>>2]|0;
      $447 = (_strlen($446)|0);
      $size = $447;
      $448 = $size;
      $$alloca_mul = $448;
      $449 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
      $450 = $mindex;
      $451 = (($mnames) + ($450<<3)|0);
      HEAP32[$451>>2] = $449;
      $452 = $mindex;
      $453 = (($mnames) + ($452<<3)|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = HEAP32[(612)>>2]|0;
      $456 = $size;
      _memcpy(($454|0),($455|0),($456|0))|0;
      $457 = $size;
      $458 = $457&65535;
      $459 = $mindex;
      $460 = (($mnames) + ($459<<3)|0);
      $461 = ((($460)) + 4|0);
      HEAP16[$461>>1] = $458;
      $462 = $mindex;
      $463 = (($462) + 1)|0;
      $mindex = $463;
      $464 = $mindex;
      $465 = (($mnames) + ($464<<3)|0);
      HEAP32[$465>>2] = 0;
      $466 = $info;
      $467 = ((($466)) + 2|0);
      $468 = HEAP16[$467>>1]|0;
      $469 = (($468) + 1)<<16>>16;
      HEAP16[$467>>1] = $469;
      while(1) {
       $470 = HEAP32[$ls>>2]|0;
       $471 = HEAP8[$470>>0]|0;
       $472 = $471 << 24 >> 24;
       $473 = (_isspace($472)|0);
       $474 = ($473|0)!=(0);
       $475 = HEAP32[$ls>>2]|0;
       if (!($474)) {
        break;
       }
       $476 = ((($475)) + 1|0);
       HEAP32[$ls>>2] = $476;
      }
      $477 = HEAP8[$475>>0]|0;
      $478 = $477 << 24 >> 24;
      $479 = ($478|0)==(44);
      $480 = HEAP32[$ls>>2]|0;
      if ($479) {
       $481 = ((($480)) + 1|0);
       HEAP32[$ls>>2] = $481;
       continue;
      }
      $482 = HEAP8[$480>>0]|0;
      $483 = $482 << 24 >> 24;
      $484 = (_isalpha($483)|0);
      $485 = ($484|0)!=(0);
      if ($485) {
       label = 109;
       break;
      }
      $486 = HEAP32[$ls>>2]|0;
      $487 = HEAP8[$486>>0]|0;
      $488 = $487 << 24 >> 24;
      $489 = ($488|0)==(95);
      if ($489) {
       label = 109;
       break;
      }
      $490 = HEAP32[$ls>>2]|0;
      $491 = HEAP8[$490>>0]|0;
      $492 = $491 << 24 >> 24;
      $493 = ($492|0)==(64);
      if ($493) {
       label = 109;
       break;
      }
      $494 = HEAP32[$ls>>2]|0;
      $495 = HEAP8[$494>>0]|0;
      $496 = $495 << 24 >> 24;
      $497 = ($496|0)==(36);
      if ($497) {
       label = 109;
       break;
      }
      $498 = HEAP32[$ls>>2]|0;
      $499 = HEAP8[$498>>0]|0;
      $500 = $499 << 24 >> 24;
      $501 = ($500|0)==(63);
      if ($501) {
       label = 109;
       break;
      }
      $502 = HEAP32[$ls>>2]|0;
      $503 = HEAP8[$502>>0]|0;
      $504 = $503 << 24 >> 24;
      $505 = ($504|0)==(46);
      if (!($505)) {
       continue;
      }
      $506 = HEAP32[(560)>>2]|0;
      $507 = $506 >>> 4;
      $508 = $507 & 1;
      $509 = ($508|0)==(1);
      if ($509) {
       label = 109;
       break;
      }
     }
     if ((label|0) == 92) {
      label = 0;
      $439 = HEAP32[(612)>>2]|0;
      HEAP32[$vararg_buffer12>>2] = $439;
      (_EmitErr(209,$vararg_buffer12)|0);
      continue;
     }
     else if ((label|0) == 96) {
      label = 0;
      (_EmitError(219)|0);
      continue;
     }
     else if ((label|0) == 109) {
      label = 0;
      $510 = HEAP32[$ls>>2]|0;
      HEAP32[$vararg_buffer18>>2] = $510;
      (_EmitErr(209,$vararg_buffer18)|0);
      continue;
     }
    }
   }
  }
  $locals_done = 1;
  $511 = HEAP8[$tok>>0]|0;
  $512 = $511&255;
  $513 = ($512|0)==(58);
  do {
   if ($513) {
    $514 = HEAP32[$ls>>2]|0;
    $515 = ((($514)) + -1|0);
    $src = $515;
   } else {
    $516 = HEAP8[$tok>>0]|0;
    $517 = $516&255;
    $518 = ($517|0)==(3);
    if ($518) {
     $519 = ((($tok)) + 8|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = ($520|0)==(317);
     if (!($521)) {
      $544 = ((($tok)) + 8|0);
      $545 = HEAP32[$544>>2]|0;
      $546 = ($545|0)==(318);
      if ($546) {
       $547 = $nesting_depth;
       $548 = ($547|0)!=(0);
       if (!($548)) {
        label = 146;
        break L66;
       }
       $549 = $nesting_depth;
       $550 = (($549) + -1)|0;
       $nesting_depth = $550;
       break;
      } else {
       $551 = ((($tok)) + 1|0);
       $552 = HEAP8[$551>>0]|0;
       $553 = $552&255;
       $554 = ($553|0)==(1);
       if (!($554)) {
        break;
       }
       $555 = $nesting_depth;
       $556 = (($555) + 1)|0;
       $nesting_depth = $556;
       break;
      }
     }
     $522 = $nesting_depth;
     $523 = ($522|0)==(0);
     if (!($523)) {
      break;
     }
     $524 = HEAP32[$ls>>2]|0;
     $ptr = $524;
     while(1) {
      $525 = $ptr;
      $526 = HEAP8[$525>>0]|0;
      $527 = $526 << 24 >> 24;
      $528 = (_isspace($527)|0);
      $529 = ($528|0)!=(0);
      $530 = $ptr;
      if (!($529)) {
       break;
      }
      $531 = ((($530)) + 1|0);
      $ptr = $531;
     }
     $532 = HEAP8[$530>>0]|0;
     $533 = $532 << 24 >> 24;
     $534 = ($533|0)!=(0);
     if (!($534)) {
      break;
     }
     $535 = $ptr;
     $536 = HEAP8[$535>>0]|0;
     $537 = $536 << 24 >> 24;
     $538 = ($537|0)!=(59);
     if (!($538)) {
      break;
     }
     $539 = $1;
     $540 = ((($539)) + 28|0);
     $541 = HEAP8[$540>>0]|0;
     $542 = $541 & -3;
     $543 = $542 | 2;
     HEAP8[$540>>0] = $543;
     break;
    }
    $557 = HEAP8[$tok>>0]|0;
    $558 = $557&255;
    $559 = ($558|0)!=(1);
    if (!($559)) {
     $560 = HEAP32[$ls>>2]|0;
     $561 = HEAP8[$560>>0]|0;
     $562 = $561 << 24 >> 24;
     $563 = ($562|0)==(38);
     if (!($563)) {
      break;
     }
    }
    while(1) {
     HEAP8[$tok>>0] = 0;
     while(1) {
      $564 = HEAP32[$ls>>2]|0;
      $565 = HEAP8[$564>>0]|0;
      $566 = $565 << 24 >> 24;
      $567 = (_isspace($566)|0);
      $568 = ($567|0)!=(0);
      $569 = HEAP32[$ls>>2]|0;
      if (!($568)) {
       break;
      }
      $570 = ((($569)) + 1|0);
      HEAP32[$ls>>2] = $570;
     }
     $571 = HEAP8[$569>>0]|0;
     $572 = $571 << 24 >> 24;
     $573 = ($572|0)==(0);
     if ($573) {
      break;
     }
     $574 = HEAP32[$ls>>2]|0;
     $575 = HEAP8[$574>>0]|0;
     $576 = $575 << 24 >> 24;
     $577 = ($576|0)==(59);
     if ($577) {
      break;
     }
     $578 = HEAP32[$ls>>2]|0;
     $579 = ((($578)) + -1|0);
     $580 = HEAP8[$579>>0]|0;
     $oldc = $580;
     $581 = (_GetToken($tok,$ls)|0);
     $582 = ($581|0)==(-1);
     if ($582) {
      break;
     }
     $583 = HEAP8[$tok>>0]|0;
     $584 = $583&255;
     $585 = ($584|0)==(1);
     if (!($585)) {
      $586 = HEAP8[$tok>>0]|0;
      $587 = $586&255;
      $588 = ($587|0)==(3);
      if (!($588)) {
       continue;
      }
     }
     $589 = $oldc;
     $590 = $589 << 24 >> 24;
     $591 = ($590|0)!=(38);
     if (!($591)) {
      continue;
     }
     $592 = HEAP32[$ls>>2]|0;
     $593 = HEAP8[$592>>0]|0;
     $594 = $593 << 24 >> 24;
     $595 = ($594|0)!=(38);
     if ($595) {
      break;
     }
    }
    $596 = HEAP8[$tok>>0]|0;
    $597 = $596&255;
    $598 = ($597|0)==(3);
    if ($598) {
     $599 = ((($tok)) + 8|0);
     $600 = HEAP32[$599>>2]|0;
     $601 = ($600|0)==(316);
     if (!($601)) {
      $602 = ((($tok)) + 1|0);
      $603 = HEAP8[$602>>0]|0;
      $604 = $603&255;
      $605 = ($604|0)==(1);
      if (!($605)) {
       break;
      }
     }
     $606 = $nesting_depth;
     $607 = (($606) + 1)|0;
     $nesting_depth = $607;
    }
   }
  } while(0);
  $608 = $4;
  $609 = ($608<<24>>24)!=(0);
  if (!($609)) {
   continue;
  }
  $phs = 0;
  $610 = $mindex;
  $611 = ($610|0)!=(0);
  if ($611) {
   $612 = $src;
   $613 = (_store_placeholders($612,$mnames)|0);
   $614 = $613&255;
   $phs = $614;
  }
  $615 = $src;
  $616 = (_strlen($615)|0);
  $j1 = $616;
  $617 = $j1;
  $618 = (8 + ($617))|0;
  $619 = (_LclAlloc($618)|0);
  $620 = $nextline;
  HEAP32[$620>>2] = $619;
  $621 = $nextline;
  $622 = HEAP32[$621>>2]|0;
  HEAP32[$622>>2] = 0;
  $623 = $phs;
  $624 = $nextline;
  $625 = HEAP32[$624>>2]|0;
  $626 = ((($625)) + 4|0);
  HEAP8[$626>>0] = $623;
  $627 = $nextline;
  $628 = HEAP32[$627>>2]|0;
  $629 = ((($628)) + 5|0);
  $630 = $src;
  $631 = $j1;
  $632 = (($631) + 1)|0;
  _memcpy(($629|0),($630|0),($632|0))|0;
  $633 = $nextline;
  $634 = HEAP32[$633>>2]|0;
  $nextline = $634;
 }
 if ((label|0) == 65) {
  $0 = -1;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 else if ((label|0) == 146) {
  $635 = $1;
  $636 = ((($635)) + 24|0);
  $637 = HEAP16[$636>>1]|0;
  $638 = $637 & -3;
  $639 = $638 | 2;
  HEAP16[$636>>1] = $639;
  $640 = $1;
  $641 = ((($640)) + 28|0);
  $642 = HEAP8[$641>>0]|0;
  $643 = $642 & -17;
  HEAP8[$641>>0] = $643;
  $0 = 0;
  $644 = $0;
  STACKTOP = sp;return ($644|0);
 }
 return (0)|0;
}
function _CreateMacro($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $macro = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_SymCreate($1)|0);
 $macro = $2;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $36 = $macro;
  STACKTOP = sp;return ($36|0);
 }
 $4 = $macro;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = 9;
 $6 = (_LclAlloc(16)|0);
 $7 = $macro;
 $8 = ((($7)) + 60|0);
 HEAP32[$8>>2] = $6;
 $9 = $macro;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP16[$11>>1] = 0;
 $12 = $macro;
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $macro;
 $17 = ((($16)) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 0;
 $20 = $macro;
 $21 = ((($20)) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = 0;
 $24 = $macro;
 $25 = ((($24)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 12|0);
 HEAP32[$27>>2] = 0;
 $28 = $macro;
 $29 = ((($28)) + 28|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 & -2;
 HEAP8[$29>>0] = $31;
 $32 = $macro;
 $33 = ((($32)) + 28|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 & -3;
 HEAP8[$33>>0] = $35;
 $36 = $macro;
 STACKTOP = sp;return ($36|0);
}
function _ReleaseMacroData($macro) {
 $macro = $macro|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $datacurr = 0, $datanext = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $macro;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = ($1|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 $10 = $0;
 $11 = ((($10)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP16[$12>>1] = 0;
 $13 = $0;
 $14 = ((($13)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = 0;
 $17 = $0;
 $18 = ((($17)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $0;
  $24 = ((($23)) + 60|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = 0;
 }
 $27 = $0;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $datacurr = $31;
 while(1) {
  $32 = $datacurr;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $datacurr;
  $35 = HEAP32[$34>>2]|0;
  $datanext = $35;
  $36 = $datanext;
  $datacurr = $36;
 }
 $37 = $0;
 $38 = ((($37)) + 60|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 8|0);
 HEAP32[$40>>2] = 0;
 $41 = $0;
 $42 = ((($41)) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = 0;
 $45 = $0;
 $46 = ((($45)) + 28|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 & -2;
 HEAP8[$46>>0] = $48;
 STACKTOP = sp;return;
}
function _MacroDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $macro = 0, $name = 0, $store_data = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $name = $5;
 $6 = $name;
 $7 = (_SymFind($6)|0);
 $macro = $7;
 $8 = $macro;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $10 = $name;
   $11 = (_CreateMacro($10)|0);
   $macro = $11;
  } else {
   $12 = $macro;
   $13 = ((($12)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(9);
   if ($15) {
    $16 = $macro;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     $22 = $macro;
     _sym_remove_table(15404,$22);
     $23 = $macro;
     $24 = ((($23)) + 16|0);
     HEAP32[$24>>2] = 9;
     $25 = (_LclAlloc(16)|0);
     $26 = $macro;
     $27 = ((($26)) + 60|0);
     HEAP32[$27>>2] = $25;
     $28 = $macro;
     $29 = ((($28)) + 60|0);
     $30 = HEAP32[$29>>2]|0;
     ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;
     break;
    }
    $20 = $name;
    HEAP32[$vararg_buffer>>2] = $20;
    $21 = (_EmitErr(143,$vararg_buffer)|0);
    $0 = $21;
    $72 = $0;
    STACKTOP = sp;return ($72|0);
   }
  }
 } while(0);
 $31 = (_get_curr_srcfile()|0);
 $32 = $macro;
 $33 = ((($32)) + 60|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $31;
 $36 = HEAP32[4884>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  label = 9;
 } else {
  $38 = $macro;
  $39 = ((($38)) + 24|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = ($40&65535) >>> 6;
  $42 = $41 & 1;
  $43 = $42&255;
  $44 = $43&255;
  $45 = ($44|0)!=(0);
  if ($45) {
   label = 9;
  } else {
   $store_data = 0;
  }
 }
 if ((label|0) == 9) {
  $46 = $macro;
  $47 = ((($46)) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = $macro;
   _ReleaseMacroData($52);
   $53 = $macro;
   $54 = ((($53)) + 28|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 & -3;
   HEAP8[$54>>0] = $56;
   $57 = $macro;
   $58 = ((($57)) + 24|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 & -65;
   $61 = $60 | 64;
   HEAP16[$58>>1] = $61;
  }
  $store_data = 1;
 }
 $62 = HEAP32[(560)>>2]|0;
 $63 = $62 >>> 11;
 $64 = $63 & 1;
 $65 = ($64|0)!=(0);
 if ($65) {
  _LstWriteSrcLine();
 }
 $66 = $macro;
 $67 = $1;
 $68 = (($67) + 1)|0;
 $1 = $68;
 $69 = $2;
 $70 = $store_data;
 $71 = (_StoreMacro($66,$68,$69,$70)|0);
 $0 = $71;
 $72 = $0;
 STACKTOP = sp;return ($72|0);
}
function _PurgeDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $1 = $4;
 while(1) {
  $5 = $1;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)!=(8);
  $11 = $1;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  if ($10) {
   label = 3;
   break;
  }
  $17 = (_SymFind($15)|0);
  $sym = $17;
  $18 = $sym;
  $19 = ($18|0)==(0|0);
  if ($19) {
   label = 5;
   break;
  }
  $26 = $sym;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(9);
  if ($29) {
   label = 7;
   break;
  }
  $31 = $sym;
  _ReleaseMacroData($31);
  $32 = $sym;
  $33 = ((($32)) + 24|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 & -65;
  $36 = $35 | 64;
  HEAP16[$33>>1] = $36;
  $37 = $sym;
  $38 = ((($37)) + 28|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & -17;
  $41 = $40 | 16;
  HEAP8[$38>>0] = $41;
  $42 = $1;
  $43 = (($42) + 1)|0;
  $1 = $43;
  $44 = $1;
  $45 = HEAP32[(616)>>2]|0;
  $46 = ($44|0)<($45|0);
  if ($46) {
   $47 = $1;
   $48 = $2;
   $49 = (($48) + ($47<<4)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($51|0)!=(44);
   if ($52) {
    label = 11;
    break;
   }
   $53 = $1;
   $54 = (($53) + 1)|0;
   $55 = $2;
   $56 = (($55) + ($54<<4)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)==(0);
   if ($59) {
    label = 11;
    break;
   }
   $66 = $1;
   $67 = (($66) + 1)|0;
   $1 = $67;
  }
  $68 = $1;
  $69 = HEAP32[(616)>>2]|0;
  $70 = ($68|0)<($69|0);
  if (!($70)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 5) {
  $20 = $1;
  $21 = $2;
  $22 = (($21) + ($20<<4)|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $24;
  $25 = (_EmitErr(102,$vararg_buffer1)|0);
  $0 = $25;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$vararg_buffer4>>2] = 89624;
  $30 = (_EmitErr(230,$vararg_buffer4)|0);
  $0 = $30;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 11) {
  $60 = $1;
  $61 = $2;
  $62 = (($61) + ($60<<4)|0);
  $63 = ((($62)) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $64;
  $65 = (_EmitErr(209,$vararg_buffer7)|0);
  $0 = $65;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 else if ((label|0) == 14) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function _MacroInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $macro = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 HEAP8[87007>>0] = 0;
 HEAP32[8972>>2] = 0;
 $1 = $0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 _StringInit();
 $3 = (_CreateMacro(89635)|0);
 $macro = $3;
 $4 = $macro;
 $5 = ((($4)) + 24|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & -3;
 $8 = $7 | 2;
 HEAP16[$5>>1] = $8;
 $9 = $macro;
 $10 = ((($9)) + 24|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & -33;
 $13 = $12 | 32;
 HEAP16[$10>>1] = $13;
 $14 = $macro;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = 218;
 $16 = $macro;
 $17 = ((($16)) + 28|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 & -3;
 $20 = $19 | 2;
 HEAP8[$17>>0] = $20;
 $21 = $macro;
 $22 = ((($21)) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP16[$23>>1] = 1;
 $24 = (_LclAlloc(8)|0);
 $25 = $macro;
 $26 = ((($25)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $24;
 $29 = $macro;
 $30 = ((($29)) + 60|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$33>>2] = 0;
 $34 = $macro;
 $35 = ((($34)) + 60|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 & -2;
 $42 = $41 | 1;
 HEAP8[$39>>0] = $42;
 STACKTOP = sp;return 0;
}
function _HexDigit($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = $2 & 15;
 $4 = $3&255;
 $0 = $4;
 $5 = $0;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>(9);
 $8 = $0;
 $9 = $8 << 24 >> 24;
 $10 = (($9) - 10)|0;
 $11 = (($10) + 65)|0;
 $12 = (($9) + 48)|0;
 $13 = $7 ? $11 : $12;
 $14 = $13&255;
 STACKTOP = sp;return ($14|0);
}
function _store_placeholders($line,$mnames) {
 $line = $line|0;
 $mnames = $mnames|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brlevel = 0, $p = 0, $params = 0;
 var $qlevel = 0, $quote = 0, $start = 0, $substprf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $mnames;
 $quote = 0;
 $brlevel = 0;
 $params = 0;
 $2 = $0;
 $p = $2;
 L1: while(1) {
  $3 = $p;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $p;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isdigit($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   while(1) {
    $12 = $p;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (_isalnum($14)|0);
    $16 = ($15|0)!=(0);
    if (!($16)) {
     $17 = $p;
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 << 24 >> 24;
     $20 = ($19|0)==(95);
     if (!($20)) {
      $21 = $p;
      $22 = HEAP8[$21>>0]|0;
      $23 = $22 << 24 >> 24;
      $24 = ($23|0)==(64);
      if (!($24)) {
       $25 = $p;
       $26 = HEAP8[$25>>0]|0;
       $27 = $26 << 24 >> 24;
       $28 = ($27|0)==(36);
       if (!($28)) {
        $29 = $p;
        $30 = HEAP8[$29>>0]|0;
        $31 = $30 << 24 >> 24;
        $32 = ($31|0)==(63);
        if (!($32)) {
         continue L1;
        }
       }
      }
     }
    }
    $33 = $p;
    $34 = ((($33)) + 1|0);
    $p = $34;
   }
  }
  $35 = $p;
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = (_isalnum($37)|0);
  $39 = ($38|0)!=(0);
  do {
   if (!($39)) {
    $40 = $p;
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    $43 = ($42|0)==(95);
    if (!($43)) {
     $44 = $p;
     $45 = HEAP8[$44>>0]|0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)==(64);
     if (!($47)) {
      $48 = $p;
      $49 = HEAP8[$48>>0]|0;
      $50 = $49 << 24 >> 24;
      $51 = ($50|0)==(36);
      if (!($51)) {
       $52 = $p;
       $53 = HEAP8[$52>>0]|0;
       $54 = $53 << 24 >> 24;
       $55 = ($54|0)==(63);
       if (!($55)) {
        $56 = $p;
        $57 = HEAP8[$56>>0]|0;
        $58 = $57 << 24 >> 24;
        $59 = ($58|0)==(46);
        if ($59) {
         $60 = HEAP32[(560)>>2]|0;
         $61 = $60 >>> 4;
         $62 = $61 & 1;
         $63 = ($62|0)!=(0);
         if ($63) {
          $64 = $p;
          $65 = $0;
          $66 = ($64|0)==($65|0);
          if ($66) {
           break;
          }
          $67 = $p;
          $68 = ((($67)) + -1|0);
          $69 = HEAP8[$68>>0]|0;
          $70 = $69 << 24 >> 24;
          $71 = ($70|0)!=(93);
          if ($71) {
           $72 = $p;
           $73 = ((($72)) + -1|0);
           $74 = HEAP8[$73>>0]|0;
           $75 = $74 << 24 >> 24;
           $76 = (_isalnum($75)|0);
           $77 = ($76|0)!=(0);
           if ($77) {
            $99 = 1;
           } else {
            $78 = $p;
            $79 = ((($78)) + -1|0);
            $80 = HEAP8[$79>>0]|0;
            $81 = $80 << 24 >> 24;
            $82 = ($81|0)==(95);
            if ($82) {
             $99 = 1;
            } else {
             $83 = $p;
             $84 = ((($83)) + -1|0);
             $85 = HEAP8[$84>>0]|0;
             $86 = $85 << 24 >> 24;
             $87 = ($86|0)==(64);
             if ($87) {
              $99 = 1;
             } else {
              $88 = $p;
              $89 = ((($88)) + -1|0);
              $90 = HEAP8[$89>>0]|0;
              $91 = $90 << 24 >> 24;
              $92 = ($91|0)==(36);
              if ($92) {
               $99 = 1;
              } else {
               $93 = $p;
               $94 = ((($93)) + -1|0);
               $95 = HEAP8[$94>>0]|0;
               $96 = $95 << 24 >> 24;
               $97 = ($96|0)==(63);
               $99 = $97;
              }
             }
            }
           }
           $98 = $99&1;
           $100 = ($98|0)==(0);
           if ($100) {
            break;
           }
          }
         }
        }
        $160 = $p;
        $161 = HEAP8[$160>>0]|0;
        $162 = $161 << 24 >> 24;
        L32: do {
         switch ($162|0) {
         case 33:  {
          $163 = $quote;
          $164 = $163 << 24 >> 24;
          $165 = ($164|0)==(0);
          if ($165) {
           $166 = $p;
           $167 = ((($166)) + 1|0);
           $168 = HEAP8[$167>>0]|0;
           $169 = $168 << 24 >> 24;
           $170 = (_strchr(89644,$169)|0);
           $171 = ($170|0)!=(0|0);
           if ($171) {
            $172 = $p;
            $173 = ((($172)) + 1|0);
            $p = $173;
           }
          }
          break;
         }
         case 60:  {
          $174 = $brlevel;
          $175 = (($174) + 1)|0;
          $brlevel = $175;
          break;
         }
         case 62:  {
          $176 = $brlevel;
          $177 = ($176|0)!=(0);
          if ($177) {
           $178 = $qlevel;
           $179 = $brlevel;
           $180 = ($178|0)==($179|0);
           if ($180) {
            $quote = 0;
           }
           $181 = $brlevel;
           $182 = (($181) + -1)|0;
           $brlevel = $182;
          }
          break;
         }
         case 39: case 34:  {
          $183 = $quote;
          $184 = ($183<<24>>24)!=(0);
          if (!($184)) {
           $191 = $p;
           $192 = HEAP8[$191>>0]|0;
           $quote = $192;
           $193 = $brlevel;
           $qlevel = $193;
           break L32;
          }
          $185 = $quote;
          $186 = $185 << 24 >> 24;
          $187 = $p;
          $188 = HEAP8[$187>>0]|0;
          $189 = $188 << 24 >> 24;
          $190 = ($186|0)==($189|0);
          if ($190) {
           $quote = 0;
          }
          break;
         }
         default: {
         }
         }
        } while(0);
        $194 = $p;
        $195 = ((($194)) + 1|0);
        $p = $195;
        continue L1;
       }
      }
     }
    }
   }
  } while(0);
  $101 = $p;
  $102 = ((($101)) + 1|0);
  $p = $102;
  $start = $101;
  while(1) {
   $103 = $p;
   $104 = HEAP8[$103>>0]|0;
   $105 = $104 << 24 >> 24;
   $106 = (_isalnum($105)|0);
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = $p;
    $109 = HEAP8[$108>>0]|0;
    $110 = $109 << 24 >> 24;
    $111 = ($110|0)==(95);
    if (!($111)) {
     $112 = $p;
     $113 = HEAP8[$112>>0]|0;
     $114 = $113 << 24 >> 24;
     $115 = ($114|0)==(64);
     if (!($115)) {
      $116 = $p;
      $117 = HEAP8[$116>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = ($118|0)==(36);
      if (!($119)) {
       $120 = $p;
       $121 = HEAP8[$120>>0]|0;
       $122 = $121 << 24 >> 24;
       $123 = ($122|0)==(63);
       if (!($123)) {
        break;
       }
      }
     }
    }
   }
   $124 = $p;
   $125 = ((($124)) + 1|0);
   $p = $125;
  }
  $126 = $start;
  $127 = $0;
  $128 = ($126>>>0)>($127>>>0);
  if ($128) {
   $129 = $start;
   $130 = ((($129)) + -1|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131 << 24 >> 24;
   $133 = ($132|0)==(38);
   if ($133) {
    $139 = 1;
   } else {
    label = 34;
   }
  } else {
   label = 34;
  }
  if ((label|0) == 34) {
   label = 0;
   $134 = $p;
   $135 = HEAP8[$134>>0]|0;
   $136 = $135 << 24 >> 24;
   $137 = ($136|0)==(38);
   $139 = $137;
  }
  $138 = $139&1;
  $140 = $138&255;
  $substprf = $140;
  $141 = $quote;
  $142 = $141 << 24 >> 24;
  $143 = ($142|0)==(0);
  if (!($143)) {
   $144 = $substprf;
   $145 = $144&255;
   $146 = ($145|0)!=(0);
   if (!($146)) {
    continue;
   }
  }
  $147 = $0;
  $148 = $start;
  $149 = $p;
  $150 = $start;
  $151 = $149;
  $152 = $150;
  $153 = (($151) - ($152))|0;
  $154 = $1;
  $155 = (_replace_parm($147,$148,$153,$154)|0);
  $start = $155;
  $156 = ($155|0)!=(0|0);
  if (!($156)) {
   continue;
  }
  $157 = $params;
  $158 = (($157) + 1)|0;
  $params = $158;
  $159 = $start;
  $p = $159;
 }
 $196 = $params;
 STACKTOP = sp;return ($196|0);
}
function _EnvironFunc($mi,$buffer,$tokenarray) {
 $mi = $mi|0;
 $buffer = $buffer|0;
 $tokenarray = $tokenarray|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi;
 $1 = $buffer;
 $2 = $tokenarray;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_getenv(($6|0))|0);
 $p = $7;
 $8 = $1;
 HEAP8[$8>>0] = 0;
 $9 = $p;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return 0;
 }
 $11 = $p;
 $12 = (_strlen($11)|0);
 $i = $12;
 $13 = $i;
 $14 = ($13|0)>=(600);
 $$ = $14 ? 599 : $12;
 $i = $$;
 $15 = $1;
 $16 = $p;
 $17 = $i;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = $i;
 $19 = $1;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return 0;
}
function _replace_parm($line,$start,$len,$mnames) {
 $line = $line|0;
 $start = $start|0;
 $len = $len|0;
 $mnames = $mnames|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $count = 0;
 var $dst = 0, $end = 0, $rest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $line;
 $2 = $start;
 $3 = $len;
 $4 = $mnames;
 $count = 1;
 while(1) {
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $4;
  $9 = ((($8)) + 4|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $3;
  $13 = ($11|0)==($12|0);
  if ($13) {
   $14 = HEAP32[33696>>2]|0;
   $15 = $2;
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = $3;
   $19 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$17,$18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $74 = $count;
  $75 = (($74) + 1)|0;
  $count = $75;
  $76 = $4;
  $77 = ((($76)) + 8|0);
  $4 = $77;
 }
 do {
  if ((label|0) == 5) {
   $21 = $count;
   $22 = ($21>>>0)>=(256);
   if ($22) {
    (_EmitError(219)|0);
    break;
   }
   $23 = $2;
   $24 = $3;
   $25 = (($23) + ($24)|0);
   $rest = $25;
   $26 = $2;
   $27 = $1;
   $28 = ($26|0)!=($27|0);
   if ($28) {
    $29 = $2;
    $30 = ((($29)) + -1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(38);
    if ($33) {
     $34 = $2;
     $35 = ((($34)) + -1|0);
     $2 = $35;
    }
   }
   $36 = $rest;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = ($38|0)==(38);
   if ($39) {
    $40 = $rest;
    $41 = ((($40)) + 1|0);
    $rest = $41;
   }
   $42 = $2;
   $43 = ((($42)) + 1|0);
   $2 = $43;
   HEAP8[$42>>0] = 10;
   $44 = $2;
   $45 = $rest;
   $46 = ($44>>>0)>=($45>>>0);
   if ($46) {
    $47 = $rest;
    $48 = $rest;
    $49 = (_strlen($48)|0);
    $50 = (($47) + ($49)|0);
    $end = $50;
    $51 = $end;
    $52 = ((($51)) + 1|0);
    $dst = $52;
    while(1) {
     $53 = $end;
     $54 = $rest;
     $55 = ($53>>>0)>=($54>>>0);
     if (!($55)) {
      break;
     }
     $56 = $end;
     $57 = ((($56)) + -1|0);
     $end = $57;
     $58 = HEAP8[$56>>0]|0;
     $59 = $dst;
     $60 = ((($59)) + -1|0);
     $dst = $60;
     HEAP8[$59>>0] = $58;
    }
    $61 = $count;
    $62 = $61&255;
    $63 = $2;
    HEAP8[$63>>0] = $62;
   } else {
    $64 = $count;
    $65 = $64&255;
    $66 = $2;
    $67 = ((($66)) + 1|0);
    $2 = $67;
    HEAP8[$66>>0] = $65;
    $68 = $2;
    $69 = $rest;
    $70 = $rest;
    $71 = (_strlen($70)|0);
    $72 = (($71) + 1)|0;
    _memmove(($68|0),($69|0),($72|0))|0;
   }
   $73 = $2;
   $0 = $73;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
 } while(0);
 $0 = 0;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $numArgs = 0, $numFiles = 0, $pEnv = 0, $rc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $numArgs = sp + 12|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 HEAP32[$numArgs>>2] = 0;
 $numFiles = 0;
 $rc = 0;
 $3 = (_getenv((89649|0))|0);
 $pEnv = $3;
 $4 = $pEnv;
 $5 = ($4|0)==(0|0);
 $$ = $5 ? 109841 : $3;
 $pEnv = $$;
 $6 = $pEnv;
 $7 = $2;
 HEAP32[$7>>2] = $6;
 (_signal(11,(219|0))|0);
 (_signal(15,(219|0))|0);
 while(1) {
  $8 = $2;
  $9 = (_ParseCmdline($8,$numArgs)|0);
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $numFiles;
  $12 = (($11) + 1)|0;
  $numFiles = $12;
  (_write_logo()|0);
  $13 = HEAP32[(6020)>>2]|0;
  $14 = (_AssembleModule($13)|0);
  $rc = $14;
 }
 _CmdlineFini();
 $15 = HEAP32[$numArgs>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  (_write_logo()|0);
  $17 = (_MsgGetEx(0)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  (_printf(89655,$vararg_buffer)|0);
  $20 = $rc;
  $21 = (1 - ($20))|0;
  STACKTOP = sp;return ($21|0);
 }
 $18 = $numFiles;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = $rc;
  $21 = (1 - ($20))|0;
  STACKTOP = sp;return ($21|0);
 }
 (_EmitError(104)|0);
 $20 = $rc;
 $21 = (1 - ($20))|0;
 STACKTOP = sp;return ($21|0);
}
function _genfailure($signo) {
 $signo = $signo|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $signo;
 $1 = $0;
 $2 = ($1|0)!=(15);
 if ($2) {
  (_EmitError(168)|0);
 }
 _close_files();
 _exit(1);
 // unreachable;
}
function _Mangle($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $mangler = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $2 = $0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 1:  {
  $5 = HEAP8[(6073)>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)!=(0);
  $8 = $7 ? 220 : 221;
  $mangler = $8;
  break;
 }
 case 2:  {
  $mangler = 220;
  break;
 }
 case 3:  {
  $9 = HEAP8[(6074)>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(1);
  $12 = $11 ? 220 : 222;
  $mangler = $12;
  break;
 }
 case 6: case 5: case 4:  {
  $mangler = 223;
  break;
 }
 case 7:  {
  $13 = HEAP32[(528)>>2]|0;
  $14 = (13864 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $mangler = $15;
  break;
 }
 default: {
  $mangler = 220;
 }
 }
 $16 = $mangler;
 $17 = $0;
 $18 = $1;
 $19 = (FUNCTION_TABLE_iii[$16 & 255]($17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function _SetMangler($sym,$langtype,$mangle_type) {
 $sym = $sym|0;
 $langtype = $langtype|0;
 $mangle_type = $mangle_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $langtype;
 $2 = $mangle_type;
 $3 = $1;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 48|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _VoidMangler($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 _memcpy(($2|0),($5|0),($10|0))|0;
 $11 = $0;
 $12 = ((($11)) + 44|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 STACKTOP = sp;return ($14|0);
}
function _UScoreMangler($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $2 = $1;
 HEAP8[$2>>0] = 95;
 $3 = $1;
 $4 = ((($3)) + 1|0);
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 44|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 _memcpy(($4|0),($7|0),($12|0))|0;
 $13 = $0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) + 1)|0;
 STACKTOP = sp;return ($17|0);
}
function _StdcallMangler($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $sym;
 $2 = $buffer;
 $3 = $1;
 $dir = $3;
 $4 = HEAP8[(6074)>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 24|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9&65535) >>> 11;
  $11 = $10 & 1;
  $12 = $11&255;
  $13 = $12&255;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $2;
   $16 = $1;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $dir;
   $20 = ((($19)) + 60|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$vararg_buffer>>2] = $18;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $23;
   $24 = (_sprintf($15,89665,$vararg_buffer)|0);
   $0 = $24;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $25 = $1;
 $26 = $2;
 $27 = (_UScoreMangler($25,$26)|0);
 $0 = $27;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _UCaseMangler($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 _memcpy(($2|0),($5|0),($10|0))|0;
 $11 = $1;
 (_strupr($11)|0);
 $12 = $0;
 $13 = ((($12)) + 44|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 STACKTOP = sp;return ($15|0);
}
function _ms32_decorate($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $buffer;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $11 = (_sprintf($2,89658,$vararg_buffer)|0);
 STACKTOP = sp;return ($11|0);
}
function _ow_decorate($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $changes = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $changes = 0;
 $2 = $0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4&65535) >>> 11;
 $6 = $5 & 1;
 $7 = $6&255;
 $8 = ($7<<24>>24)!=(0);
 L1: do {
  if ($8) {
   $9 = $changes;
   $10 = $9 | 2;
   $changes = $10;
  } else {
   $11 = $0;
   $12 = ((($11)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   switch ($13|0) {
   case 192: case 130: case 129:  {
    $14 = $changes;
    $15 = $14 | 2;
    $changes = $15;
    break L1;
    break;
   }
   default: {
    $16 = $changes;
    $17 = $16 | 1;
    $changes = $17;
    break L1;
   }
   }
  }
 } while(0);
 $18 = $1;
 $name = $18;
 $19 = $changes;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $name;
  $23 = ((($22)) + 1|0);
  $name = $23;
  HEAP8[$22>>0] = 95;
 }
 $24 = $name;
 $25 = $0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $0;
 $29 = ((($28)) + 44|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + 1)|0;
 _memcpy(($24|0),($27|0),($32|0))|0;
 $33 = $0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $name;
 $38 = (($37) + ($36)|0);
 $name = $38;
 $39 = $changes;
 $40 = $39 & 2;
 $41 = ($40|0)!=(0);
 if (!($41)) {
  $45 = $name;
  $46 = $1;
  $47 = $45;
  $48 = $46;
  $49 = (($47) - ($48))|0;
  STACKTOP = sp;return ($49|0);
 }
 $42 = $name;
 $43 = ((($42)) + 1|0);
 $name = $43;
 HEAP8[$42>>0] = 95;
 $44 = $name;
 HEAP8[$44>>0] = 0;
 $45 = $name;
 $46 = $1;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 STACKTOP = sp;return ($49|0);
}
function _ms64_decorate($sym,$buffer) {
 $sym = $sym|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $buffer;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 44|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 _memcpy(($2|0),($5|0),($10|0))|0;
 $11 = $0;
 $12 = ((($11)) + 44|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 STACKTOP = sp;return ($14|0);
}
function _MemInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[13876>>2] = 0;
 HEAP32[13880>>2] = 0;
 return;
}
function _MemFini() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pNext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 while(1) {
  $0 = HEAP32[13876>>2]|0;
  $1 = ($0|0)!=(0|0);
  if (!($1)) {
   break;
  }
  $2 = HEAP32[13876>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $pNext = $3;
  $4 = HEAP32[13876>>2]|0;
  _free($4);
  $5 = $pNext;
  HEAP32[13876>>2] = $5;
 }
 STACKTOP = sp;return;
}
function _LclAlloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $size;
 $1 = $0;
 $2 = (($1) + 4)|0;
 $3 = (($2) - 1)|0;
 $4 = $3 & -4;
 $0 = $4;
 $5 = HEAP32[13880>>2]|0;
 $6 = $0;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $8 = $0;
  $9 = ($8>>>0)<=(524284);
  $10 = $0;
  $11 = $9 ? 524284 : $10;
  HEAP32[13880>>2] = $11;
  $12 = HEAP32[13880>>2]|0;
  $13 = (($12) + 4)|0;
  $14 = (_malloc($13)|0);
  HEAP32[13884>>2] = $14;
  $15 = HEAP32[13884>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   HEAP32[13880>>2] = 0;
   _Fatal(105,$vararg_buffer);
  }
  $17 = HEAP32[13876>>2]|0;
  $18 = HEAP32[13884>>2]|0;
  HEAP32[$18>>2] = $17;
  $19 = HEAP32[13884>>2]|0;
  HEAP32[13876>>2] = $19;
  $20 = HEAP32[13884>>2]|0;
  $21 = ((($20)) + 4|0);
  HEAP32[13884>>2] = $21;
 }
 $22 = HEAP32[13884>>2]|0;
 $ptr = $22;
 $23 = $0;
 $24 = HEAP32[13884>>2]|0;
 $25 = (($24) + ($23)|0);
 HEAP32[13884>>2] = $25;
 $26 = $0;
 $27 = HEAP32[13880>>2]|0;
 $28 = (($27) - ($26))|0;
 HEAP32[13880>>2] = $28;
 $29 = $ptr;
 STACKTOP = sp;return ($29|0);
}
function _MemAlloc($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 $ptr = $2;
 $3 = $ptr;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _Fatal(105,$vararg_buffer);
 }
 $5 = $ptr;
 STACKTOP = sp;return ($5|0);
}
function _MemFree($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _MsgGetEx($msgid) {
 $msgid = $msgid|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $msgid;
 $1 = $0;
 $2 = (_MsgGet($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function _MsgGet($msgid,$buffer) {
 $msgid = $msgid|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $msgid;
 $2 = $buffer;
 $3 = $1;
 $4 = ($3|0)<(277);
 $5 = $2;
 if (!($4)) {
  $15 = ($5|0)==(0|0);
  if ($15) {
   $16 = HEAP32[(612)>>2]|0;
   $2 = $16;
  }
  $17 = $2;
  $18 = $1;
  HEAP32[$vararg_buffer>>2] = $18;
  (_sprintf($17,89684,$vararg_buffer)|0);
  $19 = $2;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $1;
  $9 = (13888 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  (_strcpy($7,$10)|0);
  $11 = $2;
  $0 = $11;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $12 = $1;
  $13 = (13888 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _omf_GetGrpIdx($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $8 = 0;
  STACKTOP = sp;return ($8|0);
 }
 $3 = $0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function _omf_OutSelect($is_data) {
 $is_data = $is_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $currofs = 0, $obj = 0, $or$cond = 0;
 var $sel_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 8|0;
 $buffer = sp + 52|0;
 $0 = $is_data;
 $1 = $0;
 $2 = ($1<<24>>24)!=(0);
 $3 = HEAP32[(584)>>2]|0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 67|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7&255) >>> 3;
 $9 = $8 & 1;
 if ($2) {
  $10 = $9&255;
  $11 = ($10|0)!=(0);
  if ($11) {
   STACKTOP = sp;return;
  }
  $12 = HEAP32[(584)>>2]|0;
  $13 = ((($12)) + 60|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(1);
  if ($17) {
   STACKTOP = sp;return;
  }
  $18 = (_GetCurrOffset()|0);
  HEAP32[15000>>2] = $18;
  $19 = HEAP32[(584)>>2]|0;
  $20 = ((($19)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 67|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 & -9;
  $25 = $24 | 8;
  HEAP8[$22>>0] = $25;
  STACKTOP = sp;return;
 }
 $26 = ($9<<24>>24)!=(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[(584)>>2]|0;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 67|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 & -9;
 HEAP8[$30>>0] = $32;
 $33 = HEAP8[81594>>0]|0;
 $34 = $33&255;
 $35 = ($34|0)==(1);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 _omf_InitRec($obj,-120);
 $36 = ((($obj)) + 16|0);
 HEAP8[$36>>0] = -128;
 $37 = ((($obj)) + 16|0);
 $38 = ((($37)) + 1|0);
 HEAP8[$38>>0] = -3;
 $39 = HEAP32[(584)>>2]|0;
 $40 = (_GetSegIdx($39)|0);
 $sel_idx = $40;
 _AttachData($obj,$buffer,11);
 $41 = (_GetCurrOffset()|0);
 $currofs = $41;
 $42 = HEAP32[15000>>2]|0;
 $43 = ($42>>>0)>(65535);
 $44 = $currofs;
 $45 = ($44>>>0)>(65535);
 $or$cond = $43 | $45;
 if ($or$cond) {
  _Put8($obj,83);
  $46 = $sel_idx;
  _PutIndex($obj,$46);
  $47 = HEAP32[15000>>2]|0;
  _Put32($obj,$47);
  $48 = $currofs;
  _Put32($obj,$48);
 } else {
  _Put8($obj,115);
  $49 = $sel_idx;
  _PutIndex($obj,$49);
  $50 = HEAP32[15000>>2]|0;
  $51 = $50&65535;
  _Put16($obj,$51);
  $52 = $currofs;
  $53 = $52&65535;
  _Put16($obj,$53);
 }
 $54 = ((($obj)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$obj>>2] = $55;
 _omf_write_record($obj);
 STACKTOP = sp;return;
}
function _omf_FlushCurrSeg() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(584)>>2]|0;
 _omf_write_ledata($0);
 $1 = HEAP8[(6005)>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 if (!($2)) {
  return;
 }
 $3 = HEAP8[98522>>0]|0;
 _omf_write_linnum($3);
 HEAP16[67814>>1] = 0;
 return;
}
function _omf_check_flush($curr) {
 $curr = $curr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_32 = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $curr;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[15004>>2]|0;
 $5 = ($3|0)!=($4|0);
 if ($5) {
  $6 = HEAP32[4888>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   _omf_FlushCurrSeg();
  }
  $8 = $0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_GetFName($10)|0);
  $12 = HEAP32[$11>>2]|0;
  _omf_write_theadr($12);
  $13 = $0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[15004>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>(65535);
 $20 = $19 ? 1 : 0;
 $21 = $20&255;
 $is_32 = $21;
 $22 = HEAP8[98522>>0]|0;
 $23 = $22&255;
 $24 = $is_32;
 $25 = $24&255;
 $26 = ($23|0)!=($25|0);
 if ($26) {
  $27 = HEAP32[4888>>2]|0;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   _omf_FlushCurrSeg();
  }
  $29 = $is_32;
  HEAP8[98522>>0] = $29;
  STACKTOP = sp;return;
 } else {
  $30 = $is_32;
  $31 = $30&255;
  $32 = ($31|0)!=(0);
  $33 = $32 ? 4 : 2;
  $34 = (2 + ($33))|0;
  $35 = $34&65535;
  $size = $35;
  $36 = HEAP16[67814>>1]|0;
  $37 = $36&65535;
  $38 = $size;
  $39 = $38&65535;
  $40 = (($37) + ($39))|0;
  $41 = ($40|0)>(1016);
  $42 = HEAP32[4888>>2]|0;
  $43 = ($42|0)!=(0|0);
  $or$cond = $41 & $43;
  if ($or$cond) {
   _omf_FlushCurrSeg();
  }
  $44 = $size;
  $45 = $44&65535;
  $46 = HEAP16[67814>>1]|0;
  $47 = $46&65535;
  $48 = (($47) + ($45))|0;
  $49 = $48&65535;
  HEAP16[67814>>1] = $49;
  STACKTOP = sp;return;
 }
}
function _omf_set_filepos() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(376)>>2]|0;
 $1 = HEAP32[15008>>2]|0;
 (_fseek($0,$1,0)|0);
 return;
}
function _omf_init($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = $0;
 $2 = ((($1)) + 152|0);
 HEAP32[$2>>2] = 224;
 $3 = $0;
 $4 = ((($3)) + 160|0);
 HEAP32[$4>>2] = 225;
 HEAP32[15012>>2] = 0;
 HEAP32[(15016)>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 260|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[15004>>2] = $7;
 HEAP16[67814>>1] = 0;
 STACKTOP = sp;return;
}
function _omf_InitRec($obj,$command) {
 $obj = $obj|0;
 $command = $command|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = $command;
 $2 = $0;
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 HEAP8[$9>>0] = $7;
 $10 = $0;
 $11 = ((($10)) + 13|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function _AttachData($objr,$data,$len) {
 $objr = $objr|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $data;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  (_InternalError(98525,259)|0);
 }
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = $0;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _Put8($objr,$value) {
 $objr = $objr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $value;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,181)|0);
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($11)|0);
 HEAP8[$16>>0] = $8;
 STACKTOP = sp;return;
}
function _PutIndex($objr,$idx) {
 $objr = $objr|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $idx;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $8 = $1;
  $9 = ($8>>>0)<=(32767);
  $or$cond = $7 & $9;
  if (!($or$cond)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,227)|0);
 }
 $10 = $1;
 $11 = ($10>>>0)>(127);
 if ($11) {
  $12 = $1;
  $13 = $12 >>> 8;
  $14 = $13 | 128;
  $15 = $14&255;
  $16 = $0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = $0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($18)|0);
  HEAP8[$23>>0] = $15;
 }
 $24 = $1;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$28>>2] = $30;
 $31 = $0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($29)|0);
 HEAP8[$34>>0] = $26;
 STACKTOP = sp;return;
}
function _Put32($objr,$value) {
 $objr = $objr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $value;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,197)|0);
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 HEAP32[$15>>2] = $8;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 4)|0;
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return;
}
function _Put16($objr,$value) {
 $objr = $objr|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $value;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,188)|0);
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 HEAP16[$15>>1] = $8;
 $16 = $0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 2)|0;
 HEAP32[$17>>2] = $19;
 STACKTOP = sp;return;
}
function _omf_write_ledata($seg) {
 $seg = $seg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $obj = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 4|0;
 $0 = $seg;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($5) - ($10))|0;
 $size = $11;
 $12 = $size;
 $13 = ($12|0)>(0);
 if (!($13)) {
  $149 = $0;
  $150 = ((($149)) + 60|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $0;
  $155 = ((($154)) + 60|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $153;
  STACKTOP = sp;return;
 }
 $14 = HEAP8[81594>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(1);
 if (!($16)) {
  $149 = $0;
  $150 = ((($149)) + 60|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $0;
  $155 = ((($154)) + 60|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $153;
  STACKTOP = sp;return;
 }
 $17 = $size;
 HEAP32[14996>>2] = $17;
 $18 = $0;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 68|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22&255) >>> 3;
 $24 = $23 & 7;
 $25 = ($24<<24>>24)!=(0);
 if ($25) {
  $26 = $0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 & 1;
  $30 = $29&255;
  $31 = ($30<<24>>24)!=(0);
  if ($31) {
   _omf_InitRec($obj,-68);
   $32 = HEAP32[(612)>>2]|0;
   _AttachData($obj,$32,4);
   $33 = $0;
   $34 = ((($33)) + 60|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 56|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   _PutIndex($obj,$38);
   _PutIndex($obj,0);
   $39 = ((($obj)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$obj>>2] = $40;
   _omf_write_record($obj);
   $41 = $0;
   $42 = ((($41)) + 60|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 40|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = HEAP32[15024>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[15024>>2] = $48;
    $49 = $0;
    $50 = ((($49)) + 60|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 40|0);
    HEAP32[$52>>2] = $47;
   }
  }
  _omf_InitRec($obj,-62);
  $53 = $0;
  $54 = ((($53)) + 60|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $size;
  _AttachData($obj,$57,$58);
  $59 = $0;
  $60 = ((($59)) + 60|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63>>>0)>(65535);
  if ($64) {
   $65 = ((($obj)) + 13|0);
   HEAP8[$65>>0] = 1;
  }
  $66 = ((($obj)) + 16|0);
  HEAP8[$66>>0] = 0;
  $67 = $0;
  $68 = ((($67)) + 60|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 44|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)==(1);
  $73 = HEAP32[(512)>>2]|0;
  $74 = ($73|0)==(7);
  if ($72) {
   $75 = $74 ? 3 : 1;
   $76 = $75&255;
   $77 = ((($obj)) + 16|0);
   $78 = ((($77)) + 1|0);
   HEAP8[$78>>0] = $76;
  } else {
   $79 = $74 ? 4 : 2;
   $80 = $79&255;
   $81 = ((($obj)) + 16|0);
   $82 = ((($81)) + 1|0);
   HEAP8[$82>>0] = $80;
  }
  $83 = $0;
  $84 = ((($83)) + 60|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($85)) + 66|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = (_get_omfalign($87)|0);
  $89 = ((($obj)) + 16|0);
  $90 = ((($89)) + 2|0);
  HEAP8[$90>>0] = $88;
  $91 = $0;
  $92 = ((($91)) + 60|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($obj)) + 16|0);
  $97 = ((($96)) + 4|0);
  HEAP32[$97>>2] = $95;
  $98 = ((($obj)) + 16|0);
  $99 = ((($98)) + 8|0);
  HEAP16[$99>>1] = 0;
  $100 = $0;
  $101 = ((($100)) + 60|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 56|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = ((($obj)) + 16|0);
  $106 = ((($105)) + 16|0);
  HEAP16[$106>>1] = $104;
 } else {
  _omf_InitRec($obj,-96);
  $107 = $0;
  $108 = ((($107)) + 60|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $size;
  _AttachData($obj,$111,$112);
  $113 = $0;
  $114 = ((($113)) + 60|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($115)) + 40|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117&65535;
  $119 = ((($obj)) + 16|0);
  HEAP16[$119>>1] = $118;
  $120 = $0;
  $121 = ((($120)) + 60|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($122)) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($obj)) + 16|0);
  $126 = ((($125)) + 4|0);
  HEAP32[$126>>2] = $124;
  $127 = ((($obj)) + 16|0);
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129>>>0)>(65535);
  if ($130) {
   $131 = ((($obj)) + 13|0);
   HEAP8[$131>>0] = 1;
  }
 }
 _omf_write_record($obj);
 $132 = $0;
 $133 = ((($132)) + 60|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($134)) + 24|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if (!($137)) {
  $149 = $0;
  $150 = ((($149)) + 60|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $0;
  $155 = ((($154)) + 60|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $153;
  STACKTOP = sp;return;
 }
 $138 = $0;
 _omf_write_fixupp($138,0);
 $139 = $0;
 _omf_write_fixupp($139,1);
 $140 = $0;
 $141 = ((($140)) + 60|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 24|0);
 $144 = ((($143)) + 4|0);
 HEAP32[$144>>2] = 0;
 $145 = $0;
 $146 = ((($145)) + 60|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ((($147)) + 24|0);
 HEAP32[$148>>2] = 0;
 $149 = $0;
 $150 = ((($149)) + 60|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ((($151)) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $0;
 $155 = ((($154)) + 60|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ((($156)) + 4|0);
 HEAP32[$157>>2] = $153;
 STACKTOP = sp;return;
}
function _omf_write_linnum($is32) {
 $is32 = $is32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $next = 0, $node = 0, $obj = 0, $ofssize = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $0 = $is32;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 4 : 2;
 $ofssize = $4;
 $5 = HEAP32[4888>>2]|0;
 $node = $5;
 $6 = HEAP32[(612)>>2]|0;
 $data = $6;
 while(1) {
  $7 = $node;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $node;
  $10 = HEAP32[$9>>2]|0;
  $next = $10;
  $11 = $node;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13&65535;
  $15 = $data;
  HEAP16[$15>>1] = $14;
  $16 = $data;
  $17 = ((($16)) + 2|0);
  $data = $17;
  $18 = $node;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $data;
  HEAP32[$21>>2] = $20;
  $22 = $ofssize;
  $23 = $data;
  $24 = (($23) + ($22)|0);
  $data = $24;
  $25 = $next;
  $node = $25;
 }
 HEAP32[4888>>2] = 0;
 $26 = $data;
 $27 = HEAP32[(612)>>2]|0;
 $28 = $26;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $size = $30;
 $31 = $size;
 $32 = ($31|0)!=(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 _omf_InitRec($obj,-108);
 $33 = $0;
 $34 = ((($obj)) + 13|0);
 HEAP8[$34>>0] = $33;
 $35 = HEAP32[(612)>>2]|0;
 $36 = $size;
 _AttachData($obj,$35,$36);
 $37 = HEAP32[(584)>>2]|0;
 $38 = (_GetGroup($37)|0);
 $39 = (_omf_GetGrpIdx($38)|0);
 $40 = $39&65535;
 $41 = ((($obj)) + 16|0);
 HEAP16[$41>>1] = $40;
 $42 = HEAP32[(584)>>2]|0;
 $43 = ((($42)) + 60|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 40|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46&65535;
 $48 = ((($obj)) + 16|0);
 $49 = ((($48)) + 2|0);
 HEAP16[$49>>1] = $47;
 $50 = ((($obj)) + 16|0);
 $51 = ((($50)) + 4|0);
 HEAP16[$51>>1] = 0;
 _omf_write_record($obj);
 STACKTOP = sp;return;
}
function _omf_write_theadr($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $len = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 4|0;
 $0 = $name;
 _omf_InitRec($obj,-128);
 $1 = $0;
 $2 = (_strlen($1)|0);
 $len = $2;
 $3 = HEAP32[(612)>>2]|0;
 $4 = $len;
 $5 = (($4) + 1)|0;
 _AttachData($obj,$3,$5);
 $6 = $0;
 $7 = $len;
 _PutName($obj,$6,$7);
 _omf_write_record($obj);
 STACKTOP = sp;return;
}
function _omf_write_module($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fh = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $modinfo;
 $1 = HEAP8[(6006)>>0]|0;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  _omf_write_debug_tables();
 }
 $3 = $0;
 $4 = ((($3)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 _omf_write_modend($5,$8);
 $9 = HEAP32[(376)>>2]|0;
 $10 = (_ftell($9)|0);
 $size = $10;
 $11 = HEAP32[(376)>>2]|0;
 $12 = (_fileno($11)|0);
 $fh = $12;
 $13 = $fh;
 $14 = $size;
 (_ftruncate($13,$14)|0);
 $15 = HEAP32[(376)>>2]|0;
 $16 = HEAP32[15020>>2]|0;
 (_fseek($15,$16,0)|0);
 _omf_write_segdef();
 $17 = HEAP32[(376)>>2]|0;
 $18 = HEAP32[15028>>2]|0;
 (_fseek($17,$18,0)|0);
 (_omf_write_pubdef()|0);
 STACKTOP = sp;return 0;
}
function _omf_write_header_initial($modinfo) {
 $modinfo = $modinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ext_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $modinfo;
 $2 = HEAP8[81594>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)==(0);
 if ($4) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $5 = HEAP32[(388)>>2]|0;
 _omf_write_theadr($5);
 $6 = HEAP8[(6006)>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 if ($7) {
  _omf_write_header_dbgcv();
 }
 $8 = HEAP8[(6005)>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 if ($9) {
  (_omf_write_autodep()|0);
 }
 $10 = HEAP32[(532)>>2]|0;
 $11 = ($10|0)==(1);
 if ($11) {
  _omf_write_dosseg();
 } else {
  $12 = HEAP32[(532)>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   _SortSegments(1);
  }
 }
 _omf_write_lib();
 _omf_write_lnames();
 $14 = HEAP32[(376)>>2]|0;
 $15 = (_ftell($14)|0);
 HEAP32[15020>>2] = $15;
 _omf_write_segdef();
 _omf_write_grpdef();
 $16 = (_omf_write_extdef()|0);
 $ext_idx = $16;
 $17 = $ext_idx;
 $18 = (_omf_write_comdef($17)|0);
 $19 = $18&65535;
 HEAP32[15024>>2] = $19;
 _omf_write_alias();
 $20 = HEAP32[(376)>>2]|0;
 $21 = (_ftell($20)|0);
 HEAP32[15028>>2] = $21;
 (_omf_write_pubdef()|0);
 _omf_write_export();
 $22 = HEAP32[(428)>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  _omf_end_of_pass1();
 }
 $24 = HEAP32[(376)>>2]|0;
 $25 = (_ftell($24)|0);
 HEAP32[15008>>2] = $25;
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _omf_write_header_dbgcv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 _omf_InitRec($obj,-120);
 $0 = ((($obj)) + 16|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($obj)) + 16|0);
 $2 = ((($1)) + 1|0);
 HEAP8[$2>>0] = -95;
 _AttachData($obj,98531,3);
 _omf_write_record($obj);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(2);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (15036 + ($5<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $i;
  $9 = (15036 + ($8<<3)|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_CreateIntSegment($7,$11,0,1,1)|0);
  $13 = $i;
  $14 = (15012 + ($13<<2)|0);
  HEAP32[$14>>2] = $12;
  $15 = ($12|0)!=(0|0);
  if ($15) {
   $16 = $i;
   $17 = (15012 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 60|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 67|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & -5;
   $24 = $23 | 4;
   HEAP8[$21>>0] = $24;
   $25 = $i;
   $26 = (15012 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 60|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 20|0);
   HEAP32[$30>>2] = 226;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return;
}
function _omf_write_autodep() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $idx = 0, $len = 0, $obj = 0, $p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 16|0;
 $0 = HEAP32[(612)>>2]|0;
 $p = $0;
 $idx = 0;
 $1 = HEAP32[(404)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $idx;
  $3 = HEAP32[(408)>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  _omf_InitRec($obj,-120);
  $5 = ((($obj)) + 16|0);
  HEAP8[$5>>0] = -128;
  $6 = ((($obj)) + 16|0);
  $7 = ((($6)) + 1|0);
  HEAP8[$7>>0] = -23;
  if (!($4)) {
   break;
  }
  $8 = $curr;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_strlen($9)|0);
  $len = $10;
  $11 = $len;
  $12 = ($11>>>0)>(255);
  $$ = $12 ? 255 : $10;
  $len = $$;
  $13 = $curr;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_GetFileTimeStamp($14)|0);
  $16 = (_timet2dostime($15)|0);
  $17 = $p;
  HEAP32[$17>>2] = $16;
  $18 = $len;
  $19 = $18&255;
  $20 = $p;
  $21 = ((($20)) + 4|0);
  HEAP8[$21>>0] = $19;
  $22 = $p;
  $23 = ((($22)) + 5|0);
  $24 = $curr;
  $25 = HEAP32[$24>>2]|0;
  $26 = $len;
  _memcpy(($23|0),($25|0),($26|0))|0;
  $27 = $p;
  $28 = $len;
  $29 = (($28) + 5)|0;
  _AttachData($obj,$27,$29);
  _omf_write_record($obj);
  $30 = $idx;
  $31 = (($30) + 1)|0;
  $idx = $31;
  $32 = $curr;
  $33 = ((($32)) + 4|0);
  $curr = $33;
 }
 _AttachData($obj,109841,0);
 _omf_write_record($obj);
 STACKTOP = sp;return 0;
}
function _omf_write_dosseg() {
 var $0 = 0, $1 = 0, $2 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 _omf_InitRec($obj,-120);
 $0 = ((($obj)) + 16|0);
 HEAP8[$0>>0] = -128;
 $1 = ((($obj)) + 16|0);
 $2 = ((($1)) + 1|0);
 HEAP8[$2>>0] = -98;
 _AttachData($obj,109841,0);
 _omf_write_record($obj);
 STACKTOP = sp;return;
}
function _omf_write_lib() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $name = 0, $next = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 12|0;
 $0 = HEAP32[(356)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = HEAP32[$3>>2]|0;
  $next = $4;
  $5 = $curr;
  $6 = ((($5)) + 4|0);
  $name = $6;
  _omf_InitRec($obj,-120);
  $7 = ((($obj)) + 16|0);
  HEAP8[$7>>0] = -128;
  $8 = ((($obj)) + 16|0);
  $9 = ((($8)) + 1|0);
  HEAP8[$9>>0] = -97;
  $10 = $name;
  $11 = $name;
  $12 = (_strlen($11)|0);
  _AttachData($obj,$10,$12);
  _omf_write_record($obj);
  $13 = $next;
  $curr = $13;
 }
 STACKTOP = sp;return;
}
function _omf_write_lnames() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $buffer = 0, $curr = 0, $items = 0, $obj = 0, $p = 0, $size = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $buffer = sp + 64|0;
 $p = $buffer;
 $0 = $p;
 $1 = ((($0)) + 1|0);
 $p = $1;
 HEAP8[$0>>0] = 0;
 $items = 1;
 HEAP32[15032>>2] = 1;
 $2 = HEAP32[(340)>>2]|0;
 $curr = $2;
 while(1) {
  $3 = $curr;
  $4 = ($3|0)!=(0|0);
  if ($4) {
   $5 = $curr;
   $6 = ((($5)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  } else {
   $8 = 0;
  }
  $sym = $8;
  $9 = $p;
  $10 = $9;
  $11 = $buffer;
  $12 = (($10) - ($11))|0;
  $size = $12;
  $13 = $sym;
  $14 = ($13|0)==(0|0);
  if ($14) {
   label = 6;
  } else {
   $15 = $size;
   $16 = $sym;
   $17 = ((($16)) + 44|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($15) + ($19))|0;
   $21 = (($20) + 4)|0;
   $22 = ($21|0)>(1024);
   if ($22) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $23 = $size;
   $24 = ($23|0)!=(0);
   if ($24) {
    _omf_InitRec($obj,-106);
    $25 = HEAP32[15032>>2]|0;
    $26 = $25&65535;
    $27 = ((($obj)) + 16|0);
    HEAP16[$27>>1] = $26;
    $28 = $items;
    $29 = $28&65535;
    $30 = ((($obj)) + 16|0);
    $31 = ((($30)) + 2|0);
    HEAP16[$31>>1] = $29;
    $32 = $size;
    _AttachData($obj,$buffer,$32);
    _omf_write_record($obj);
    $33 = $items;
    HEAP32[15032>>2] = $33;
   }
   $34 = $sym;
   $35 = ($34|0)==(0|0);
   if ($35) {
    break;
   }
   $p = $buffer;
  }
  $36 = $sym;
  $37 = ((($36)) + 44|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $p;
  $40 = ((($39)) + 1|0);
  $p = $40;
  HEAP8[$39>>0] = $38;
  $41 = $p;
  $42 = $sym;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $sym;
  $46 = ((($45)) + 44|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($48) + 1)|0;
  _memcpy(($41|0),($44|0),($49|0))|0;
  $50 = HEAP32[(560)>>2]|0;
  $51 = $50 & 1;
  $52 = ($51|0)==(0);
  if ($52) {
   $53 = $p;
   (_strupr($53)|0);
  }
  $54 = $sym;
  $55 = ((($54)) + 44|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $p;
  $59 = (($58) + ($57)|0);
  $p = $59;
  $60 = $items;
  $61 = (($60) + 1)|0;
  $items = $61;
  $62 = $sym;
  $63 = ((($62)) + 16|0);
  $64 = HEAP32[$63>>2]|0;
  switch ($64|0) {
  case 3:  {
   $65 = $items;
   $66 = $sym;
   $67 = ((($66)) + 60|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 48|0);
   HEAP32[$69>>2] = $65;
   break;
  }
  case 4:  {
   $70 = $items;
   $71 = $sym;
   $72 = ((($71)) + 60|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 8|0);
   HEAP32[$74>>2] = $70;
   break;
  }
  default: {
   $75 = $items;
   $76 = $sym;
   $77 = ((($76)) + 8|0);
   HEAP32[$77>>2] = $75;
  }
  }
  $78 = $curr;
  $79 = HEAP32[$78>>2]|0;
  $curr = $79;
 }
 STACKTOP = sp;return;
}
function _omf_write_segdef() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0;
 var $curr = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $buffer = sp + 48|0;
 $0 = HEAP32[(15420)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 68|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7&255) >>> 3;
  $9 = $8 & 7;
  $10 = ($9<<24>>24)!=(0);
  if (!($10)) {
   _omf_InitRec($obj,-104);
   $11 = $curr;
   $12 = ((($11)) + 60|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 64|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)>(0);
   if ($17) {
    $18 = $curr;
    $19 = ((($18)) + 60|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 67|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22&255) >>> 2;
    $24 = $23 & 1;
    $25 = $24&255;
    $26 = ($25|0)!=(0);
    if ($26) {
     $32 = 1;
    } else {
     $27 = $curr;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)>=(65536);
     $32 = $30;
    }
    $31 = $32 ? 1 : 0;
    $33 = $31&255;
    $34 = ((($obj)) + 13|0);
    HEAP8[$34>>0] = $33;
   } else {
    $35 = ((($obj)) + 13|0);
    HEAP8[$35>>0] = 0;
   }
   $36 = $curr;
   $37 = ((($36)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 40|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40&65535;
   $42 = ((($obj)) + 16|0);
   HEAP16[$42>>1] = $41;
   $43 = $curr;
   $44 = ((($43)) + 60|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 64|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ($48|0)>(0);
   $50 = $49 ? 1 : 0;
   $51 = $50&255;
   $52 = ((($obj)) + 16|0);
   $53 = ((($52)) + 2|0);
   HEAP8[$53>>0] = $51;
   $54 = $curr;
   $55 = ((($54)) + 60|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 66|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = (_get_omfalign($58)|0);
   $60 = ((($obj)) + 16|0);
   $61 = ((($60)) + 3|0);
   HEAP8[$61>>0] = $59;
   $62 = $curr;
   $63 = ((($62)) + 60|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 68|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 & 7;
   $68 = ((($obj)) + 16|0);
   $69 = ((($68)) + 4|0);
   HEAP8[$69>>0] = $67;
   $70 = $curr;
   $71 = ((($70)) + 60|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 56|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = ((($obj)) + 16|0);
   $76 = ((($75)) + 8|0);
   HEAP16[$76>>1] = $74;
   $77 = $curr;
   $78 = ((($77)) + 60|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($79)) + 60|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($obj)) + 16|0);
   $83 = ((($82)) + 8|0);
   $84 = ((($83)) + 4|0);
   HEAP32[$84>>2] = $81;
   $85 = $curr;
   $86 = ((($85)) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($obj)) + 16|0);
   $89 = ((($88)) + 16|0);
   HEAP32[$89>>2] = $87;
   $90 = $curr;
   $91 = ((($90)) + 60|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ((($92)) + 48|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94&65535;
   $96 = ((($obj)) + 16|0);
   $97 = ((($96)) + 20|0);
   HEAP16[$97>>1] = $95;
   $98 = $curr;
   $99 = ((($98)) + 60|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 52|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)!=(0|0);
   if ($103) {
    $104 = $curr;
    $105 = ((($104)) + 60|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($106)) + 52|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $112 = $110;
   } else {
    $112 = 1;
   }
   $111 = $112&65535;
   $113 = ((($obj)) + 16|0);
   $114 = ((($113)) + 22|0);
   HEAP16[$114>>1] = $111;
   $115 = ((($obj)) + 16|0);
   $116 = ((($115)) + 24|0);
   HEAP16[$116>>1] = 1;
   _omf_write_record($obj);
   $117 = $curr;
   $118 = ((($117)) + 60|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 44|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==(1);
   if ($122) {
    $123 = HEAP8[(6069)>>0]|0;
    $124 = $123&255;
    $125 = ($124|0)==(0);
    if ($125) {
     _omf_InitRec($obj,-120);
     $126 = ((($obj)) + 16|0);
     HEAP8[$126>>0] = -128;
     $127 = ((($obj)) + 16|0);
     $128 = ((($127)) + 1|0);
     HEAP8[$128>>0] = -2;
     _AttachData($obj,$buffer,3);
     _Put8($obj,79);
     $129 = $curr;
     $130 = ((($129)) + 60|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ((($131)) + 40|0);
     $133 = HEAP32[$132>>2]|0;
     _PutIndex($obj,$133);
     $134 = ((($obj)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     HEAP32[$obj>>2] = $135;
     _omf_write_record($obj);
    }
   }
  }
  $136 = $curr;
  $137 = ((($136)) + 64|0);
  $138 = HEAP32[$137>>2]|0;
  $curr = $138;
 }
 STACKTOP = sp;return;
}
function _omf_write_grpdef() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $grp = 0, $seg = 0, $segminfo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $grp = sp + 4|0;
 $0 = HEAP32[(15428)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  _omf_InitRec($grp,-102);
  $3 = $curr;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7&65535;
  $9 = ((($grp)) + 16|0);
  HEAP16[$9>>1] = $8;
  $10 = HEAP32[(612)>>2]|0;
  $11 = $curr;
  $12 = ((($11)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15*3)|0;
  $17 = (2 + ($16))|0;
  _AttachData($grp,$10,$17);
  $18 = $curr;
  $19 = ((($18)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  _PutIndex($grp,$22);
  $23 = $curr;
  $24 = ((($23)) + 60|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $seg = $26;
  while(1) {
   $27 = $seg;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    break;
   }
   $29 = $seg;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $segminfo = $31;
   _Put8($grp,-1);
   $32 = $segminfo;
   $33 = ((($32)) + 60|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 40|0);
   $36 = HEAP32[$35>>2]|0;
   _PutIndex($grp,$36);
   $37 = ((($grp)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38>>>0)>(4070);
   if ($39) {
    label = 6;
    break;
   }
   $43 = $seg;
   $44 = HEAP32[$43>>2]|0;
   $seg = $44;
  }
  if ((label|0) == 6) {
   label = 0;
   $40 = $curr;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$vararg_buffer>>2] = $42;
   _EmitWarn(2,266,$vararg_buffer);
  }
  $45 = ((($grp)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$grp>>2] = $46;
  _omf_write_record($grp);
  $47 = $curr;
  $48 = ((($47)) + 64|0);
  $49 = HEAP32[$48>>2]|0;
  $curr = $49;
 }
 STACKTOP = sp;return;
}
function _omf_write_extdef() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $data = 0, $len = 0;
 var $obj = 0, $r = 0, $rec_size = 0, $sym = 0, $symext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 24|0;
 $r = sp;
 $data = sp + 328|0;
 $buffer = sp + 72|0;
 $0 = HEAP32[(15412)>>2]|0;
 HEAP32[$r>>2] = $0;
 $1 = ((($r)) + 4|0);
 HEAP16[$1>>1] = 1;
 $2 = ((($r)) + 6|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($obj)) + 16|0);
 HEAP16[$3>>1] = 0;
 $4 = (_GetExt784($r)|0);
 $sym = $4;
 while(1) {
  $5 = $sym;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $rec_size = 0;
  $7 = ((($obj)) + 16|0);
  $8 = ((($7)) + 2|0);
  HEAP16[$8>>1] = 0;
  while(1) {
   $9 = $sym;
   $10 = ($9|0)!=(0|0);
   if (!($10)) {
    break;
   }
   $11 = $sym;
   $12 = (_Mangle($11,$buffer)|0);
   $len = $12;
   $13 = HEAP32[(560)>>2]|0;
   $14 = $13 >>> 1;
   $15 = $14 & 1;
   $16 = ($15|0)!=(0);
   if ($16) {
    (_strupr($buffer)|0);
   }
   $17 = $rec_size;
   $18 = $len;
   $19 = (($17) + ($18))|0;
   $20 = (($19) + 2)|0;
   $21 = ($20>>>0)>=(1020);
   if ($21) {
    break;
   }
   $22 = ((($obj)) + 16|0);
   $23 = ((($22)) + 2|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = (($24) + 1)<<16>>16;
   HEAP16[$23>>1] = $25;
   $26 = $len;
   $27 = $26&255;
   $28 = $rec_size;
   $29 = (($28) + 1)|0;
   $rec_size = $29;
   $30 = (($data) + ($28)|0);
   HEAP8[$30>>0] = $27;
   $31 = $rec_size;
   $32 = (($data) + ($31)|0);
   $33 = $len;
   _memcpy(($32|0),($buffer|0),($33|0))|0;
   $34 = $len;
   $35 = $rec_size;
   $36 = (($35) + ($34))|0;
   $rec_size = $36;
   $37 = $rec_size;
   $38 = (($37) + 1)|0;
   $rec_size = $38;
   $39 = (($data) + ($37)|0);
   HEAP8[$39>>0] = 0;
   $40 = (_GetExt784($r)|0);
   $sym = $40;
  }
  $41 = $rec_size;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   continue;
  }
  _omf_InitRec($obj,-116);
  $43 = $rec_size;
  _AttachData($obj,$data,$43);
  _omf_write_record($obj);
  $44 = ((($obj)) + 16|0);
  $45 = ((($44)) + 2|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ((($obj)) + 16|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = (($50) + ($47))|0;
  $52 = $51&65535;
  HEAP16[$48>>1] = $52;
 }
 $53 = HEAP32[(15412)>>2]|0;
 $symext = $53;
 while(1) {
  $54 = $symext;
  $55 = ($54|0)!=(0|0);
  if (!($55)) {
   break;
  }
  $56 = $symext;
  $57 = ((($56)) + 28|0);
  $58 = ((($57)) + 3|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59&255) >>> 2;
  $61 = $60 & 1;
  $62 = $61&255;
  $63 = ($62|0)==(0);
  if ($63) {
   $64 = $symext;
   $65 = ((($64)) + 40|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0|0);
   if ($67) {
    _omf_InitRec($obj,-120);
    $68 = ((($obj)) + 16|0);
    HEAP8[$68>>0] = -128;
    $69 = ((($obj)) + 16|0);
    $70 = ((($69)) + 1|0);
    HEAP8[$70>>0] = -88;
    _AttachData($obj,$buffer,4);
    $71 = $symext;
    $72 = ((($71)) + 56|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73&65535;
    _PutIndex($obj,$74);
    $75 = $symext;
    $76 = ((($75)) + 40|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ((($77)) + 56|0);
    $79 = ((($78)) + 2|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    _PutIndex($obj,$81);
    $82 = ((($obj)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    HEAP32[$obj>>2] = $83;
    _omf_write_record($obj);
   }
  }
  $84 = $symext;
  $85 = ((($84)) + 64|0);
  $86 = HEAP32[$85>>2]|0;
  $symext = $86;
 }
 $87 = HEAP32[(15412)>>2]|0;
 $symext = $87;
 while(1) {
  $88 = $symext;
  $89 = ($88|0)!=(0|0);
  if (!($89)) {
   break;
  }
  $90 = $symext;
  $91 = ((($90)) + 28|0);
  $92 = ((($91)) + 3|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = ($93&255) >>> 2;
  $95 = $94 & 1;
  $96 = $95&255;
  $97 = ($96|0)==(0);
  if ($97) {
   $98 = $symext;
   $99 = ((($98)) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)!=(0|0);
   if ($101) {
    $102 = $symext;
    $103 = ((($102)) + 40|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)!=(2);
    if ($107) {
     $108 = $symext;
     $109 = ((($108)) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($110)) + 56|0);
     HEAP32[$111>>2] = 0;
    }
   }
  }
  $112 = $symext;
  $113 = ((($112)) + 64|0);
  $114 = HEAP32[$113>>2]|0;
  $symext = $114;
 }
 $115 = ((($r)) + 4|0);
 $116 = HEAP16[$115>>1]|0;
 STACKTOP = sp;return ($116|0);
}
function _omf_write_comdef($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buffer = 0, $curr = 0, $data = 0, $num = 0, $number = 0, $numsize = 0, $obj = 0, $recsize = 0, $start = 0, $symsize = 0, $varsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1376|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 28|0;
 $buffer = sp + 1120|0;
 $data = sp + 96|0;
 $number = sp + 80|0;
 $0 = $index;
 $start = 0;
 $1 = HEAP32[(15412)>>2]|0;
 $curr = $1;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $num = 0;
  $recsize = 0;
  while(1) {
   $4 = $curr;
   $5 = ($4|0)!=(0|0);
   if (!($5)) {
    break;
   }
   $6 = $curr;
   $7 = ((($6)) + 28|0);
   $8 = ((($7)) + 3|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9&255) >>> 2;
   $11 = $10 & 1;
   $12 = $11&255;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = $curr;
    $15 = (_Mangle($14,$buffer)|0);
    $symsize = $15;
    $16 = HEAP32[(560)>>2]|0;
    $17 = $16 >>> 1;
    $18 = $17 & 1;
    $19 = ($18|0)!=(0);
    if ($19) {
     (_strupr($buffer)|0);
    }
    $20 = $curr;
    $21 = ((($20)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP8[(556)>>0]|0;
    $24 = $23&255;
    $25 = $curr;
    $26 = ((($25)) + 52|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_SizeFromMemtype($22,$24,$27)|0);
    $varsize = $28;
    $29 = $0;
    $30 = $29&65535;
    $31 = ($30|0)!=(0);
    if (!($31)) {
     (_InternalError(98525,1211)|0);
    }
    $32 = $0;
    $33 = (($32) + 1)<<16>>16;
    $0 = $33;
    $34 = $32&65535;
    $35 = $curr;
    $36 = ((($35)) + 56|0);
    HEAP32[$36>>2] = $34;
    $37 = $varsize;
    $38 = ($37|0)==(0);
    if ($38) {
     $39 = $curr;
     $40 = ((($39)) + 36|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $curr;
     $43 = ((($42)) + 40|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($41>>>0) / ($44>>>0))&-1;
     $varsize = $45;
    }
    $numsize = 1;
    $46 = $curr;
    $47 = ((($46)) + 28|0);
    $48 = ((($47)) + 3|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49&255) >>> 4;
    $51 = $50 & 1;
    $52 = $51&255;
    $53 = ($52|0)==(1);
    if ($53) {
     HEAP8[$number>>0] = 97;
     $54 = ((($number)) + 1|0);
     $55 = $curr;
     $56 = ((($55)) + 40|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (_put_comdef_number($54,$57)|0);
     $59 = $numsize;
     $60 = (($59) + ($58))|0;
     $numsize = $60;
     $61 = $numsize;
     $62 = (($number) + ($61)|0);
     $63 = $varsize;
     $64 = (_put_comdef_number($62,$63)|0);
     $65 = $numsize;
     $66 = (($65) + ($64))|0;
     $numsize = $66;
    } else {
     HEAP8[$number>>0] = 98;
     $67 = ((($number)) + 1|0);
     $68 = $curr;
     $69 = ((($68)) + 40|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = $varsize;
     $72 = Math_imul($70, $71)|0;
     $73 = (_put_comdef_number($67,$72)|0);
     $74 = $numsize;
     $75 = (($74) + ($73))|0;
     $numsize = $75;
    }
    $76 = $recsize;
    $77 = $symsize;
    $78 = (($76) + ($77))|0;
    $79 = $numsize;
    $80 = (($78) + ($79))|0;
    $81 = (($80) + 2)|0;
    $82 = ($81>>>0)>(1020);
    if ($82) {
     break;
    }
    $83 = $symsize;
    $84 = $83&255;
    $85 = $recsize;
    $86 = (($85) + 1)|0;
    $recsize = $86;
    $87 = (($data) + ($85)|0);
    HEAP8[$87>>0] = $84;
    $88 = $recsize;
    $89 = (($data) + ($88)|0);
    $90 = $symsize;
    _memcpy(($89|0),($buffer|0),($90|0))|0;
    $91 = $symsize;
    $92 = $recsize;
    $93 = (($92) + ($91))|0;
    $recsize = $93;
    $94 = $recsize;
    $95 = (($94) + 1)|0;
    $recsize = $95;
    $96 = (($data) + ($94)|0);
    HEAP8[$96>>0] = 0;
    $97 = $recsize;
    $98 = (($data) + ($97)|0);
    $99 = $numsize;
    _memcpy(($98|0),($number|0),($99|0))|0;
    $100 = $numsize;
    $101 = $recsize;
    $102 = (($101) + ($100))|0;
    $recsize = $102;
    $103 = $num;
    $104 = (($103) + 1)|0;
    $num = $104;
   }
   $105 = $curr;
   $106 = ((($105)) + 64|0);
   $107 = HEAP32[$106>>2]|0;
   $curr = $107;
  }
  $108 = $num;
  $109 = ($108>>>0)>(0);
  if (!($109)) {
   continue;
  }
  _omf_InitRec($obj,-80);
  $110 = $start;
  $111 = $110&65535;
  $112 = ((($obj)) + 16|0);
  HEAP16[$112>>1] = $111;
  $113 = $recsize;
  _AttachData($obj,$data,$113);
  $114 = $num;
  $115 = $114&65535;
  $116 = ((($obj)) + 16|0);
  $117 = ((($116)) + 2|0);
  HEAP16[$117>>1] = $115;
  _omf_write_record($obj);
  $118 = $num;
  $119 = $start;
  $120 = (($119) + ($118))|0;
  $start = $120;
 }
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function _omf_write_alias() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $curr = 0, $len1 = 0, $len2 = 0;
 var $obj = 0, $p = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 8|0;
 $tmp = sp + 552|0;
 $buff = sp + 56|0;
 $0 = HEAP32[(15444)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = (_Mangle($3,$tmp)|0);
  $5 = $4&255;
  $len1 = $5;
  $p = $buff;
  $6 = $len1;
  $7 = $p;
  $8 = ((($7)) + 1|0);
  $p = $8;
  HEAP8[$7>>0] = $6;
  $9 = $p;
  $10 = $len1;
  $11 = $10&255;
  _memcpy(($9|0),($tmp|0),($11|0))|0;
  $12 = $len1;
  $13 = $12&255;
  $14 = $p;
  $15 = (($14) + ($13)|0);
  $p = $15;
  $16 = $curr;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_Mangle($18,$tmp)|0);
  $20 = $19&255;
  $len2 = $20;
  $21 = $len2;
  $22 = $p;
  $23 = ((($22)) + 1|0);
  $p = $23;
  HEAP8[$22>>0] = $21;
  $24 = $p;
  $25 = $len2;
  $26 = $25&255;
  _memcpy(($24|0),($tmp|0),($26|0))|0;
  _omf_InitRec($obj,-58);
  $27 = $len1;
  $28 = $27&255;
  $29 = $len2;
  $30 = $29&255;
  $31 = (($28) + ($30))|0;
  $32 = (($31) + 2)|0;
  _AttachData($obj,$buff,$32);
  _omf_write_record($obj);
  $33 = $curr;
  $34 = ((($33)) + 64|0);
  $35 = HEAP32[$34>>2]|0;
  $curr = $35;
 }
 STACKTOP = sp;return;
}
function _omf_write_pubdef() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr32 = 0, $curr_seg = 0, $data = 0, $is32 = 0, $len = 0, $obj = 0, $obj1 = 0, $or$cond = 0, $q = 0, $recsize = 0, $seg = 0;
 var $size = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 44|0;
 $obj1 = sp;
 $0 = HEAP32[(332)>>2]|0;
 $q = $0;
 while(1) {
  $1 = $q;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $size = 0;
  $3 = HEAP32[(612)>>2]|0;
  $data = $3;
  while(1) {
   $4 = $q;
   $5 = ($4|0)!=(0|0);
   if (!($5)) {
    break;
   }
   $6 = $q;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $sym = $8;
   $9 = $sym;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   do {
    if ($12) {
     $13 = $sym;
     $14 = ((($13)) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 60|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($17)) + 68|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19&255) >>> 3;
     $21 = $20 & 7;
     $22 = $21&255;
     $23 = ($22|0)!=(0);
     if ($23) {
      $24 = $sym;
      $25 = ((($24)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $seg = $26;
      $27 = $seg;
      $28 = ((($27)) + 60|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($29)) + 56|0);
      $31 = HEAP16[$30>>1]|0;
      $32 = $31&65535;
      $33 = ($32|0)==(0);
      if (!($33)) {
       break;
      }
      $34 = HEAP32[15032>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[15032>>2] = $35;
      $36 = $35&65535;
      $37 = $seg;
      $38 = ((($37)) + 60|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($39)) + 56|0);
      HEAP16[$40>>1] = $36;
      $41 = $sym;
      $42 = ((($41)) + 24|0);
      $43 = HEAP16[$42>>1]|0;
      $44 = $43 & 1;
      $45 = $44&255;
      $46 = $seg;
      $47 = ((($46)) + 24|0);
      $48 = $45&255;
      $49 = HEAP16[$47>>1]|0;
      $50 = $48 & 1;
      $51 = $49 & -2;
      $52 = $51 | $50;
      HEAP16[$47>>1] = $52;
      _omf_InitRec($obj,-106);
      $53 = $sym;
      $54 = HEAP32[(612)>>2]|0;
      $55 = ((($54)) + 1|0);
      $56 = (_Mangle($53,$55)|0);
      $len = $56;
      $57 = $len;
      $58 = $57&255;
      $59 = HEAP32[(612)>>2]|0;
      HEAP8[$59>>0] = $58;
      $60 = HEAP32[(560)>>2]|0;
      $61 = $60 & 1;
      $62 = ($61|0)==(0);
      if ($62) {
       $63 = HEAP32[(612)>>2]|0;
       $64 = ((($63)) + 1|0);
       (_strupr($64)|0);
      }
      $65 = HEAP32[(612)>>2]|0;
      $66 = $len;
      $67 = (($66) + 1)|0;
      _AttachData($obj,$65,$67);
      _omf_write_record($obj);
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
   } while(0);
   if ((label|0) == 12) {
    label = 0;
    $68 = $sym;
    $69 = ((($68)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70>>>0)>(65535);
    $72 = $71 ? 1 : 0;
    $73 = $72&255;
    $is32 = $73;
    $74 = $size;
    $75 = $sym;
    $76 = ((($75)) + 44|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = (($74) + ($78))|0;
    $80 = (($79) + 8)|0;
    $81 = (($80) + 4)|0;
    $82 = (($81) + 4)|0;
    $83 = (($82) + 1)|0;
    $84 = (($83) + 1)|0;
    $85 = $is32;
    $86 = $85&255;
    $87 = ($86|0)!=(0);
    $88 = $87 ? 4 : 2;
    $89 = (($84) + ($88))|0;
    $recsize = $89;
    $90 = $size;
    $91 = ($90|0)!=(0);
    if ($91) {
     $92 = $sym;
     $93 = ((($92)) + 12|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $curr_seg;
     $96 = ($94|0)!=($95|0);
     if ($96) {
      break;
     }
     $97 = $is32;
     $98 = $97&255;
     $99 = $curr32;
     $100 = $99&255;
     $101 = ($98|0)!=($100|0);
     $102 = $recsize;
     $103 = ($102>>>0)>(1024);
     $or$cond = $101 | $103;
     if ($or$cond) {
      break;
     }
    }
    $104 = $sym;
    $105 = $data;
    $106 = ((($105)) + 1|0);
    $107 = (_Mangle($104,$106)|0);
    $len = $107;
    $108 = HEAP32[(560)>>2]|0;
    $109 = $108 >>> 1;
    $110 = $109 & 1;
    $111 = ($110|0)!=(0);
    if ($111) {
     $112 = $data;
     $113 = ((($112)) + 1|0);
     (_strupr($113)|0);
    }
    $114 = $sym;
    $115 = ((($114)) + 12|0);
    $116 = HEAP32[$115>>2]|0;
    $curr_seg = $116;
    $117 = $is32;
    $curr32 = $117;
    $118 = $len;
    $119 = $118&255;
    $120 = $data;
    HEAP8[$120>>0] = $119;
    $121 = $len;
    $122 = (($121) + 1)|0;
    $123 = $data;
    $124 = (($123) + ($122)|0);
    $data = $124;
    $125 = $curr32;
    $126 = ($125<<24>>24)!=(0);
    $127 = $sym;
    $128 = ((($127)) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    if ($126) {
     $130 = $data;
     HEAP32[$130>>2] = $129;
     $131 = $data;
     $132 = ((($131)) + 4|0);
     $data = $132;
    } else {
     $133 = $129&65535;
     $134 = $data;
     HEAP16[$134>>1] = $133;
     $135 = $data;
     $136 = ((($135)) + 2|0);
     $data = $136;
    }
    $137 = $data;
    $138 = ((($137)) + 1|0);
    $data = $138;
    HEAP8[$137>>0] = 0;
    $139 = $data;
    $140 = HEAP32[(612)>>2]|0;
    $141 = $139;
    $142 = $140;
    $143 = (($141) - ($142))|0;
    $size = $143;
   }
   $144 = $q;
   $145 = HEAP32[$144>>2]|0;
   $q = $145;
  }
  $146 = $size;
  $147 = ($146|0)!=(0);
  if (!($147)) {
   continue;
  }
  _omf_InitRec($obj1,-112);
  $148 = HEAP32[(612)>>2]|0;
  $149 = $size;
  _AttachData($obj1,$148,$149);
  $150 = $curr32;
  $151 = ((($obj1)) + 13|0);
  HEAP8[$151>>0] = $150;
  $152 = $curr_seg;
  $153 = ($152|0)==(0|0);
  if ($153) {
   $154 = ((($obj1)) + 16|0);
   HEAP16[$154>>1] = 0;
   $155 = ((($obj1)) + 16|0);
   $156 = ((($155)) + 2|0);
   HEAP16[$156>>1] = 0;
  } else {
   $157 = $curr_seg;
   $158 = (_GetSegIdx($157)|0);
   $159 = $158&65535;
   $160 = ((($obj1)) + 16|0);
   $161 = ((($160)) + 2|0);
   HEAP16[$161>>1] = $159;
   $162 = $curr_seg;
   $163 = (_GetGroup($162)|0);
   $164 = (_omf_GetGrpIdx($163)|0);
   $165 = $164&65535;
   $166 = ((($obj1)) + 16|0);
   HEAP16[$166>>1] = $165;
  }
  $167 = ((($obj1)) + 16|0);
  $168 = ((($167)) + 4|0);
  HEAP16[$168>>1] = 0;
  _omf_write_record($obj1);
 }
 STACKTOP = sp;return 0;
}
function _omf_write_export() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $dir = 0, $len = 0, $obj = 0, $parm = 0, $parmcnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp + 8|0;
 $0 = HEAP32[(15436)>>2]|0;
 $dir = $0;
 while(1) {
  $1 = $dir;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $dir;
  $4 = ((($3)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7&255) >>> 2;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   _omf_InitRec($obj,-120);
   $11 = ((($obj)) + 16|0);
   HEAP8[$11>>0] = 0;
   $12 = ((($obj)) + 16|0);
   $13 = ((($12)) + 1|0);
   HEAP8[$13>>0] = -96;
   $14 = HEAP32[(612)>>2]|0;
   $data = $14;
   $15 = HEAP8[(6075)>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $dir;
    $19 = $data;
    $20 = ((($19)) + 3|0);
    $21 = (_Mangle($18,$20)|0);
    $len = $21;
   } else {
    $22 = $data;
    $23 = ((($22)) + 3|0);
    $24 = $dir;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    (_strcpy($23,$26)|0);
    $27 = $dir;
    $28 = ((($27)) + 44|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $len = $30;
   }
   $31 = HEAP32[(560)>>2]|0;
   $32 = $31 >>> 1;
   $33 = $32 & 1;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $data;
    $36 = ((($35)) + 3|0);
    (_strupr($36)|0);
   }
   $37 = $data;
   $38 = $len;
   $39 = (($38) + 4)|0;
   _AttachData($obj,$37,$39);
   _Put8($obj,2);
   $40 = $dir;
   $41 = ((($40)) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $parm = $44;
   $parmcnt = 0;
   while(1) {
    $45 = $parm;
    $46 = ($45|0)!=(0|0);
    if (!($46)) {
     break;
    }
    $47 = $parm;
    $48 = ((($47)) + 68|0);
    $49 = HEAP32[$48>>2]|0;
    $parm = $49;
    $50 = $parmcnt;
    $51 = (($50) + 1)<<24>>24;
    $parmcnt = $51;
   }
   $52 = $parmcnt;
   $53 = $52&255;
   $54 = $53 & 31;
   $55 = $54&255;
   $parmcnt = $55;
   $56 = $parmcnt;
   _Put8($obj,$56);
   $57 = $len;
   $58 = $57&255;
   _Put8($obj,$58);
   $59 = $len;
   $60 = ((($obj)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($59))|0;
   HEAP32[$60>>2] = $62;
   _Put8($obj,0);
   _omf_write_record($obj);
  }
  $63 = $dir;
  $64 = ((($63)) + 68|0);
  $65 = HEAP32[$64>>2]|0;
  $dir = $65;
 }
 STACKTOP = sp;return;
}
function _omf_end_of_pass1() {
 var $0 = 0, $1 = 0, $2 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 _omf_InitRec($obj,-120);
 $0 = ((($obj)) + 16|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($obj)) + 16|0);
 $2 = ((($1)) + 1|0);
 HEAP8[$2>>0] = -94;
 _AttachData($obj,98523,1);
 _omf_write_record($obj);
 STACKTOP = sp;return;
}
function _put_comdef_number($buffer,$value) {
 $buffer = $buffer|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $symsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $value;
 $2 = $1;
 $3 = (_get_size_of_comdef_number($2)|0);
 $symsize = $3;
 $4 = $symsize;
 switch ($4|0) {
 case 1:  {
  $5 = $1;
  $6 = $5&255;
  $7 = $0;
  HEAP8[$7>>0] = $6;
  break;
 }
 case 3:  {
  $8 = $0;
  $9 = ((($8)) + 1|0);
  $0 = $9;
  HEAP8[$8>>0] = -127;
  break;
 }
 case 4:  {
  $10 = $0;
  $11 = ((($10)) + 1|0);
  $0 = $11;
  HEAP8[$10>>0] = -124;
  break;
 }
 case 5:  {
  $12 = $0;
  $13 = ((($12)) + 1|0);
  $0 = $13;
  HEAP8[$12>>0] = -120;
  break;
 }
 default: {
 }
 }
 $i = 1;
 while(1) {
  $14 = $i;
  $15 = $symsize;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = (($17>>>0) % 256)&-1;
  $19 = $18&255;
  $20 = $0;
  $21 = ((($20)) + 1|0);
  $0 = $21;
  HEAP8[$20>>0] = $19;
  $22 = $1;
  $23 = $22 >>> 8;
  $1 = $23;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $symsize;
 STACKTOP = sp;return ($26|0);
}
function _get_size_of_comdef_number($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $1;
 $3 = ($2>>>0)<(128);
 do {
  if ($3) {
   $0 = 1;
  } else {
   $4 = $1;
   $5 = ($4>>>0)<=(65535);
   if ($5) {
    $0 = 3;
    break;
   }
   $6 = $1;
   $7 = ($6>>>0)<=(16777215);
   if ($7) {
    $0 = 4;
    break;
   } else {
    $0 = 5;
    break;
   }
  }
 } while(0);
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _GetExt784($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $r;
 $2 = $1;
 $3 = ((($2)) + 6|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   while(1) {
    $7 = $1;
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)!=(0|0);
    $10 = $1;
    if (!($9)) {
     label = 9;
     break;
    }
    $11 = HEAP32[$10>>2]|0;
    $sym = $11;
    $12 = $1;
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 64|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $1;
    HEAP32[$16>>2] = $15;
    $17 = $sym;
    $18 = ((($17)) + 28|0);
    $19 = ((($18)) + 3|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20&255) >>> 2;
    $22 = $21 & 1;
    $23 = $22&255;
    $24 = ($23|0)==(1);
    if ($24) {
     continue;
    }
    $25 = $sym;
    $26 = ((($25)) + 40|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     continue;
    }
    $29 = $sym;
    $30 = ((($29)) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 24|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = ($33&65535) >>> 14;
    $35 = $34 & 1;
    $36 = $35&255;
    $37 = $36&255;
    $38 = ($37|0)==(0);
    if ($38) {
     break;
    }
   }
   if ((label|0) == 9) {
    $63 = ((($10)) + 6|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = (($64) + 1)<<24>>24;
    HEAP8[$63>>0] = $65;
    $66 = HEAP32[(15412)>>2]|0;
    $67 = $1;
    HEAP32[$67>>2] = $66;
    break;
   }
   $39 = $1;
   $40 = ((($39)) + 4|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    (_InternalError(98525,1008)|0);
   }
   $44 = $1;
   $45 = ((($44)) + 4|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = (($46) + 1)<<16>>16;
   HEAP16[$45>>1] = $47;
   $48 = $sym;
   $49 = ((($48)) + 40|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 56|0);
   $52 = ((($51)) + 2|0);
   HEAP16[$52>>1] = $46;
   $53 = $sym;
   $54 = ((($53)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 24|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57 & -16385;
   $59 = $58 | 16384;
   HEAP16[$56>>1] = $59;
   $60 = $sym;
   $61 = ((($60)) + 40|0);
   $62 = HEAP32[$61>>2]|0;
   $0 = $62;
   $106 = $0;
   STACKTOP = sp;return ($106|0);
  }
 } while(0);
 while(1) {
  $68 = $1;
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0|0);
  if (!($70)) {
   label = 16;
   break;
  }
  $71 = $1;
  $72 = HEAP32[$71>>2]|0;
  $sym = $72;
  $73 = $1;
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 64|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  HEAP32[$77>>2] = $76;
  $78 = $sym;
  $79 = ((($78)) + 28|0);
  $80 = ((($79)) + 3|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81&255) >>> 2;
  $83 = $82 & 1;
  $84 = $83&255;
  $85 = ($84|0)==(1);
  if ($85) {
   continue;
  }
  $86 = $sym;
  $87 = ((($86)) + 28|0);
  $88 = ((($87)) + 3|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89&255) >>> 3;
  $91 = $90 & 1;
  $92 = $91&255;
  $93 = ($92|0)==(1);
  if (!($93)) {
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $106 = $0;
  STACKTOP = sp;return ($106|0);
 }
 $94 = $1;
 $95 = ((($94)) + 4|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = $96&65535;
 $98 = ($97|0)!=(0);
 if (!($98)) {
  (_InternalError(98525,1022)|0);
 }
 $99 = $1;
 $100 = ((($99)) + 4|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = (($101) + 1)<<16>>16;
 HEAP16[$100>>1] = $102;
 $103 = $sym;
 $104 = ((($103)) + 56|0);
 HEAP16[$104>>1] = $101;
 $105 = $sym;
 $0 = $105;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function _get_omfalign($alignment) {
 $alignment = $alignment|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $alignment;
 $2 = $1;
 $3 = $2&255;
 switch ($3|0) {
 case 1:  {
  $0 = 2;
  break;
 }
 case 2:  {
  $0 = 5;
  break;
 }
 case 4:  {
  $0 = 3;
  break;
 }
 case 8:  {
  $0 = 4;
  break;
 }
 case 255:  {
  $0 = 0;
  break;
 }
 default: {
  $4 = $1;
  $5 = $4&255;
  $6 = ($5|0)==(0);
  if (!($6)) {
   (_InternalError(98525,845)|0);
  }
  $0 = 1;
 }
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _GetFileTimeStamp($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $statbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $statbuf = sp;
 $1 = $filename;
 $2 = $1;
 $3 = (_stat($2,$statbuf)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $5 = ((($statbuf)) + 56|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _timet2dostime($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dt = 0, $ltime = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $dt = sp;
 HEAP32[$0>>2] = $x;
 $1 = (_localtime(($0|0))|0);
 $ltime = $1;
 $2 = $ltime;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - 80)|0;
 $6 = $5 << 9;
 $7 = $ltime;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = $10 << 5;
 $12 = $6 | $11;
 $13 = $ltime;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 << 0;
 $17 = $12 | $16;
 $18 = $17&65535;
 $19 = ((($dt)) + 2|0);
 HEAP16[$19>>1] = $18;
 $20 = $ltime;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 << 11;
 $24 = $ltime;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 5;
 $28 = $23 | $27;
 $29 = $ltime;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30|0) / 2)&-1;
 $32 = $31 << 0;
 $33 = $28 | $32;
 $34 = $33&65535;
 HEAP16[$dt>>1] = $34;
 $35 = HEAP32[$dt>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _omf_cv_flushfunc($seg,$curr,$size,$pv) {
 $seg = $seg|0;
 $curr = $curr|0;
 $size = $size|0;
 $pv = $pv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $seg;
 $2 = $curr;
 $3 = $size;
 $4 = $pv;
 $5 = $1;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $buffer = $9;
 $10 = $2;
 $11 = $buffer;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $2;
  $17 = $buffer;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = $3;
  $22 = (($20) + ($21))|0;
  $23 = ($22>>>0)>(1016);
  if ($23) {
   $24 = $1;
   $25 = ((($24)) + 60|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $2;
   $30 = $buffer;
   $31 = $29;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($28) + ($33))|0;
   $35 = $1;
   $36 = ((($35)) + 60|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 8|0);
   HEAP32[$38>>2] = $34;
   $39 = $1;
   _omf_write_ledata($39);
   $40 = $buffer;
   $0 = $40;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $41 = $2;
 $0 = $41;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _omf_write_debug_tables() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[15012>>2]|0;
 $1 = ($0|0)!=(0|0);
 $2 = HEAP32[(15016)>>2]|0;
 $3 = ($2|0)!=(0|0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  return;
 }
 $4 = HEAP32[(600)>>2]|0;
 $5 = HEAP32[15012>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = $4;
 $9 = HEAP32[(600)>>2]|0;
 $10 = ((($9)) + 1024|0);
 $11 = HEAP32[(15016)>>2]|0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $10;
 $15 = HEAP32[15012>>2]|0;
 $16 = HEAP32[(15016)>>2]|0;
 _cv_write_debug_tables($15,$16,0);
 return;
}
function _omf_write_modend($fixup,$displ) {
 $fixup = $fixup|0;
 $displ = $displ|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $buffer = sp + 52|0;
 $0 = $fixup;
 $1 = $displ;
 _omf_InitRec($obj,-118);
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = ((($obj)) + 16|0);
 if ($3) {
  HEAP8[$4>>0] = 0;
  $5 = ((($obj)) + 16|0);
  $6 = ((($5)) + 1|0);
  HEAP8[$6>>0] = 0;
  _omf_write_record($obj);
  STACKTOP = sp;return;
 } else {
  $7 = ((($4)) + 1|0);
  HEAP8[$7>>0] = 1;
  $8 = ((($obj)) + 16|0);
  HEAP8[$8>>0] = 1;
  $9 = $0;
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_GetSymOfssize($11)|0);
  $13 = ($12|0)>(0);
  $14 = $13 ? 1 : 0;
  $15 = $14&255;
  $16 = ((($obj)) + 13|0);
  HEAP8[$16>>0] = $15;
  _AttachData($obj,$buffer,0);
  $17 = $0;
  $18 = $1;
  $19 = ((($obj)) + 13|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)!=(0);
  $23 = $22 ? 1 : 0;
  $24 = (_OmfFixGenFixModend($17,$buffer,$18,$23)|0);
  HEAP32[$obj>>2] = $24;
  _omf_write_record($obj);
  STACKTOP = sp;return;
 }
}
function _PutName($objr,$name,$len) {
 $objr = $objr|0;
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $name;
 $2 = $len;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,245)|0);
 }
 $9 = $2;
 $10 = $9&255;
 $11 = $0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($13)|0);
 HEAP8[$18>>0] = $10;
 $19 = $0;
 $20 = $1;
 $21 = $2;
 _PutData($19,$20,$21);
 STACKTOP = sp;return;
}
function _PutData($objr,$data,$len) {
 $objr = $objr|0;
 $data = $data|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $objr;
 $1 = $data;
 $2 = $len;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98525,237)|0);
 }
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) + ($14)|0);
 $16 = $1;
 $17 = $2;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = $2;
 $19 = $0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18))|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _omf_write_fixupp($seg,$is32) {
 $seg = $seg|0;
 $is32 = $is32|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $fix = 0, $obj = 0, $size = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $obj = sp;
 $0 = $seg;
 $1 = $is32;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)!=(0);
 $5 = $4 ? 1 : 0;
 $type = $5;
 $6 = $0;
 $7 = ((($6)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $fix = $10;
 while(1) {
  $11 = $fix;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[(612)>>2]|0;
  $data = $13;
  $size = 0;
  while(1) {
   $14 = $fix;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    break;
   }
   $16 = $fix;
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   switch ($18|0) {
   case 10: case 6: case 3:  {
    $19 = $1;
    $20 = ($19<<24>>24)!=(0);
    if ($20) {
     label = 8;
    }
    break;
   }
   default: {
    $21 = $1;
    $22 = ($21<<24>>24)!=(0);
    if (!($22)) {
     label = 8;
    }
   }
   }
   if ((label|0) == 8) {
    label = 0;
    $23 = $size;
    $24 = ($23>>>0)>(1009);
    if ($24) {
     break;
    }
    $25 = $fix;
    $26 = $0;
    $27 = ((($26)) + 60|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $data;
    $32 = $type;
    $33 = (_OmfFixGenFix($25,$30,$31,$32)|0);
    $34 = $data;
    $35 = (($34) + ($33)|0);
    $data = $35;
    $36 = $data;
    $37 = HEAP32[(612)>>2]|0;
    $38 = $36;
    $39 = $37;
    $40 = (($38) - ($39))|0;
    $size = $40;
   }
   $41 = $fix;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $fix = $43;
  }
  $44 = $size;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   continue;
  }
  _omf_InitRec($obj,-100);
  $46 = $1;
  $47 = ((($obj)) + 13|0);
  HEAP8[$47>>0] = $46;
  $48 = HEAP32[(612)>>2]|0;
  $49 = $size;
  _AttachData($obj,$48,$49);
  _omf_write_record($obj);
 }
 STACKTOP = sp;return;
}
function _OmfFixGenFixModend($fixup,$buf,$displ,$type) {
 $fixup = $fixup|0;
 $buf = $buf|0;
 $displ = $displ|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $lr = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lr = sp;
 $0 = $fixup;
 $1 = $buf;
 $2 = $displ;
 $3 = $type;
 $4 = $0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $sym = $6;
 $7 = ((($lr)) + 4|0);
 HEAP8[$7>>0] = 0;
 $8 = $sym;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = (($10) + ($11))|0;
 $13 = ((($lr)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = $0;
 $15 = ((($14)) + 28|0);
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ((($lr)) + 2|0);
 HEAP16[$18>>1] = $17;
 $19 = $sym;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(2);
 if ($22) {
  $23 = ((($lr)) + 5|0);
  HEAP8[$23>>0] = 2;
  $24 = $sym;
  $25 = ((($24)) + 56|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = ((($lr)) + 6|0);
  HEAP16[$27>>1] = $26;
  $28 = $0;
  $29 = ((($28)) + 28|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)==(1);
  if ($32) {
   $33 = $0;
   $34 = ((($33)) + 28|0);
   $35 = ((($34)) + 2|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = $sym;
    $40 = (_omf_GetGrpIdx($39)|0);
    $41 = $40&65535;
    $42 = ((($lr)) + 2|0);
    HEAP16[$42>>1] = $41;
   }
  }
 } else {
  $43 = $sym;
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(1);
  if (!($46)) {
   (_InternalError(98567,220)|0);
  }
  $47 = ((($lr)) + 5|0);
  HEAP8[$47>>0] = 0;
  $48 = $sym;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_GetSegIdx($50)|0);
  $52 = $51&65535;
  $53 = ((($lr)) + 6|0);
  HEAP16[$53>>1] = $52;
 }
 $54 = $0;
 $55 = ((($54)) + 28|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = ($57|0)!=(6);
 if ($58) {
  $59 = $0;
  $60 = ((($59)) + 28|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61 << 24 >> 24;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $0;
   $65 = ((($64)) + 28|0);
   $66 = HEAP8[$65>>0]|0;
   HEAP8[$lr>>0] = $66;
   $67 = $1;
   $68 = $3;
   $69 = (_TranslateLogref($lr,$67,$68)|0);
   STACKTOP = sp;return ($69|0);
  }
 }
 HEAP8[$lr>>0] = 5;
 $67 = $1;
 $68 = $3;
 $69 = (_TranslateLogref($lr,$67,$68)|0);
 STACKTOP = sp;return ($69|0);
}
function _OmfFixGenFix($fixup,$start_loc,$buf,$type) {
 $fixup = $fixup|0;
 $start_loc = $start_loc|0;
 $buf = $buf|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $data_rec_offset = 0, $locat1 = 0, $lr = 0, $or$cond = 0, $self_relative = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $lr = sp + 8|0;
 $1 = $fixup;
 $2 = $start_loc;
 $3 = $buf;
 $4 = $type;
 $self_relative = 0;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  (_InternalError(98567,376)|0);
 }
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  (_InternalError(98567,377)|0);
 }
 $9 = $4;
 $10 = ($9|0)==(0);
 $11 = $4;
 $12 = ($11|0)==(1);
 $or$cond = $10 | $12;
 if (!($or$cond)) {
  (_InternalError(98567,378)|0);
 }
 $13 = ((($lr)) + 4|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($lr)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 switch ($17|0) {
 case 1:  {
  $self_relative = 1;
  label = 9;
  break;
 }
 case 4:  {
  label = 9;
  break;
 }
 case 2:  {
  $self_relative = 1;
  label = 11;
  break;
 }
 case 5:  {
  label = 11;
  break;
 }
 case 3:  {
  $self_relative = 1;
  label = 13;
  break;
 }
 case 6:  {
  label = 13;
  break;
 }
 case 11:  {
  $locat1 = 16;
  break;
 }
 case 8:  {
  $locat1 = 8;
  break;
 }
 case 9:  {
  $locat1 = 12;
  break;
 }
 case 10:  {
  $locat1 = 44;
  break;
 }
 default: {
  $36 = HEAP32[(500)>>2]|0;
  $37 = ((($36)) + 6|0);
  $38 = $1;
  $39 = ((($38)) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $42 = $1;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46;
  } else {
   $47 = 83263;
  }
  HEAP32[$vararg_buffer>>2] = $37;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $47;
  (_EmitErr(197,$vararg_buffer)|0);
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 }
 if ((label|0) == 9) {
  $locat1 = 0;
 }
 else if ((label|0) == 11) {
  $18 = $1;
  $19 = ((($18)) + 24|0);
  $20 = ((($19)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 & 1;
  $23 = $22&255;
  $24 = ($23|0)!=(0);
  $25 = $24 ? 20 : 4;
  $26 = $25&255;
  $locat1 = $26;
 }
 else if ((label|0) == 13) {
  $27 = $1;
  $28 = ((($27)) + 24|0);
  $29 = ((($28)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 & 1;
  $32 = $31&255;
  $33 = ($32|0)!=(0);
  $34 = $33 ? 52 : 36;
  $35 = $34&255;
  $locat1 = $35;
 }
 $48 = $self_relative;
 $49 = $48&255;
 $50 = ($49|0)!=(0);
 $51 = $50 ? 128 : 192;
 $52 = $locat1;
 $53 = $52&255;
 $54 = $53 | $51;
 $55 = $54&255;
 $locat1 = $55;
 $56 = $1;
 $57 = (_omf_fill_logref($56,$lr)|0);
 $58 = ($57|0)==(0);
 if ($58) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $59 = $1;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $2;
 $63 = (($61) - ($62))|0;
 $64 = ($63>>>0)<(1024);
 if (!($64)) {
  (_InternalError(98567,426)|0);
 }
 $65 = $1;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $2;
 $69 = (($67) - ($68))|0;
 $data_rec_offset = $69;
 $70 = $data_rec_offset;
 $71 = $70 >>> 8;
 $72 = $locat1;
 $73 = $72&255;
 $74 = $73 | $71;
 $75 = $74&255;
 $locat1 = $75;
 $76 = $locat1;
 $77 = $3;
 HEAP8[$77>>0] = $76;
 $78 = $data_rec_offset;
 $79 = $78&255;
 $80 = $3;
 $81 = ((($80)) + 1|0);
 HEAP8[$81>>0] = $79;
 $82 = $3;
 $83 = ((($82)) + 2|0);
 $84 = $4;
 $85 = (_TranslateLogref($lr,$83,$84)|0);
 $86 = (2 + ($85))|0;
 $0 = $86;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _TranslateLogref($lr,$buf,$type) {
 $lr = $lr|0;
 $buf = $buf|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lr;
 $1 = $buf;
 $2 = $type;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  (_InternalError(98567,124)|0);
 }
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  (_InternalError(98567,125)|0);
 }
 $7 = $2;
 $8 = ($7|0)==(0);
 $9 = $2;
 $10 = ($9|0)==(1);
 $or$cond = $8 | $10;
 if (!($or$cond)) {
  (_InternalError(98567,126)|0);
 }
 $11 = $0;
 $12 = ((($11)) + 5|0);
 $13 = HEAP8[$12>>0]|0;
 $target = $13;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $target;
   $24 = $23&255;
   $25 = $24 | 4;
   $26 = $25&255;
   $target = $26;
  }
 }
 $27 = $1;
 $p = $27;
 $28 = $0;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 << 4;
 $32 = $target;
 $33 = $32&255;
 $34 = $31 | $33;
 $35 = $34&255;
 $36 = $p;
 $37 = ((($36)) + 1|0);
 $p = $37;
 HEAP8[$36>>0] = $35;
 $38 = $p;
 $39 = $0;
 $40 = HEAP8[$39>>0]|0;
 $41 = $0;
 $42 = ((($41)) + 2|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = (_putFrameDatum($38,$40,$43)|0);
 $p = $44;
 $45 = $p;
 $46 = $target;
 $47 = $0;
 $48 = ((($47)) + 6|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = (_putTargetDatum($45,$46,$49)|0);
 $p = $50;
 $51 = $target;
 $52 = $51&255;
 $53 = $52 & 4;
 $54 = ($53|0)==(0);
 if (!($54)) {
  $64 = $p;
  $65 = $1;
  $66 = $64;
  $67 = $65;
  $68 = (($66) - ($67))|0;
  STACKTOP = sp;return ($68|0);
 }
 $55 = $2;
 $56 = ($55|0)==(1);
 $57 = $p;
 $58 = $0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 if ($56) {
  $61 = (_put32($57,$60)|0);
  $p = $61;
  $64 = $p;
  $65 = $1;
  $66 = $64;
  $67 = $65;
  $68 = (($66) - ($67))|0;
  STACKTOP = sp;return ($68|0);
 } else {
  $62 = $60&65535;
  $63 = (_put16($57,$62)|0);
  $p = $63;
  $64 = $p;
  $65 = $1;
  $66 = $64;
  $67 = $65;
  $68 = (($66) - ($67))|0;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _omf_fill_logref($fixup,$lr) {
 $fixup = $fixup|0;
 $lr = $lr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $fixup;
 $2 = $lr;
 $3 = $1;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $sym = $5;
 $6 = $sym;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $8 = $1;
   $9 = ((($8)) + 28|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(6);
   if (!($12)) {
    $13 = $1;
    $14 = ((($13)) + 28|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $2;
    $17 = ((($16)) + 5|0);
    HEAP8[$17>>0] = $15;
    $18 = $1;
    $19 = ((($18)) + 28|0);
    $20 = ((($19)) + 2|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $2;
    $23 = ((($22)) + 6|0);
    HEAP16[$23>>1] = $21;
    $24 = $2;
    HEAP8[$24>>0] = 5;
    break;
   }
   $0 = 0;
   $213 = $0;
   STACKTOP = sp;return ($213|0);
  } else {
   $25 = $sym;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   $29 = $sym;
   if ($28) {
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    HEAP32[$vararg_buffer>>2] = $31;
    (_EmitErr(102,$vararg_buffer)|0);
    $0 = 0;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   $32 = ((($29)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(4);
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 5|0);
    HEAP8[$36>>0] = 5;
    $37 = $sym;
    $38 = ((($37)) + 60|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41&65535;
    $43 = $2;
    $44 = ((($43)) + 6|0);
    HEAP16[$44>>1] = $42;
    $45 = $1;
    $46 = ((($45)) + 28|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)!=(6);
    if ($49) {
     $50 = $1;
     $51 = ((($50)) + 28|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $2;
     HEAP8[$53>>0] = $52;
     $54 = $1;
     $55 = ((($54)) + 28|0);
     $56 = ((($55)) + 2|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $2;
     $59 = ((($58)) + 2|0);
     HEAP16[$59>>1] = $57;
     break;
    } else {
     $60 = $2;
     HEAP8[$60>>0] = 1;
     $61 = $2;
     $62 = ((($61)) + 6|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $2;
     $65 = ((($64)) + 2|0);
     HEAP16[$65>>1] = $63;
     break;
    }
   }
   $66 = $sym;
   $67 = ((($66)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(3);
   if ($69) {
    $70 = $2;
    $71 = ((($70)) + 5|0);
    HEAP8[$71>>0] = 4;
    $72 = $sym;
    $73 = (_GetSegIdx($72)|0);
    $74 = $73&65535;
    $75 = $2;
    $76 = ((($75)) + 6|0);
    HEAP16[$76>>1] = $74;
    $77 = $1;
    $78 = ((($77)) + 28|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)!=(6);
    if ($81) {
     $82 = $1;
     $83 = ((($82)) + 28|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $2;
     HEAP8[$85>>0] = $84;
     $86 = $1;
     $87 = ((($86)) + 28|0);
     $88 = ((($87)) + 2|0);
     $89 = HEAP16[$88>>1]|0;
     $90 = $2;
     $91 = ((($90)) + 2|0);
     HEAP16[$91>>1] = $89;
     break;
    } else {
     $92 = $2;
     HEAP8[$92>>0] = 0;
     $93 = $2;
     $94 = ((($93)) + 6|0);
     $95 = HEAP16[$94>>1]|0;
     $96 = $2;
     $97 = ((($96)) + 2|0);
     HEAP16[$97>>1] = $95;
     break;
    }
   }
   $98 = $1;
   $99 = ((($98)) + 28|0);
   $100 = ((($99)) + 2|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $2;
   $103 = ((($102)) + 2|0);
   HEAP16[$103>>1] = $101;
   $104 = $sym;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(2);
   do {
    if ($107) {
     $108 = $2;
     $109 = ((($108)) + 5|0);
     HEAP8[$109>>0] = 6;
     $110 = $sym;
     $111 = ((($110)) + 56|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $2;
     $114 = ((($113)) + 6|0);
     HEAP16[$114>>1] = $112;
     $115 = $1;
     $116 = ((($115)) + 28|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $117 << 24 >> 24;
     $119 = ($118|0)==(1);
     if ($119) {
      $120 = $1;
      $121 = ((($120)) + 28|0);
      $122 = ((($121)) + 2|0);
      $123 = HEAP16[$122>>1]|0;
      $124 = $123&65535;
      $125 = ($124|0)==(0);
      if ($125) {
       $126 = $sym;
       $127 = (_omf_GetGrpIdx($126)|0);
       $128 = $127&65535;
       $129 = $2;
       $130 = ((($129)) + 2|0);
       HEAP16[$130>>1] = $128;
      }
     }
    } else {
     $131 = $sym;
     $132 = ((($131)) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(1);
     if (!($134)) {
      (_InternalError(98567,308)|0);
     }
     $135 = $sym;
     $136 = ((($135)) + 24|0);
     $137 = HEAP16[$136>>1]|0;
     $138 = ($137&65535) >>> 6;
     $139 = $138 & 1;
     $140 = $139&255;
     $141 = ($140<<24>>24)!=(0);
     if ($141) {
      $142 = $1;
      $143 = ((($142)) + 28|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $144 << 24 >> 24;
      $146 = ($145|0)==(1);
      $147 = $146 ? 5 : 4;
      $148 = $147&255;
      $149 = $2;
      $150 = ((($149)) + 5|0);
      HEAP8[$150>>0] = $148;
      $151 = $1;
      $152 = ((($151)) + 28|0);
      $153 = ((($152)) + 2|0);
      $154 = HEAP16[$153>>1]|0;
      $155 = $2;
      $156 = ((($155)) + 6|0);
      HEAP16[$156>>1] = $154;
      break;
     }
     $157 = $sym;
     $158 = ((($157)) + 12|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     $161 = $sym;
     if ($160) {
      $162 = ((($161)) + 4|0);
      $163 = HEAP32[$162>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $163;
      (_EmitErr(164,$vararg_buffer1)|0);
      $0 = 0;
      $213 = $0;
      STACKTOP = sp;return ($213|0);
     }
     $164 = ((($161)) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ((($165)) + 60|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ((($167)) + 68|0);
     $169 = HEAP8[$168>>0]|0;
     $170 = ($169&255) >>> 3;
     $171 = $170 & 7;
     $172 = ($171<<24>>24)!=(0);
     $173 = $2;
     $174 = ((($173)) + 5|0);
     if (!($172)) {
      HEAP8[$174>>0] = 4;
      $186 = $sym;
      $187 = ((($186)) + 12|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (_GetSegIdx($188)|0);
      $190 = $189&65535;
      $191 = $2;
      $192 = ((($191)) + 6|0);
      HEAP16[$192>>1] = $190;
      break;
     }
     HEAP8[$174>>0] = 6;
     $175 = $sym;
     $176 = ((($175)) + 12|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ((($177)) + 60|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ((($179)) + 40|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $181&65535;
     $183 = $2;
     $184 = ((($183)) + 6|0);
     HEAP16[$184>>1] = $182;
     $185 = $2;
     HEAP8[$185>>0] = 5;
     $0 = 1;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
   } while(0);
   $193 = $1;
   $194 = ((($193)) + 28|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $195 << 24 >> 24;
   $197 = ($196|0)!=(6);
   if ($197) {
    $198 = $1;
    $199 = ((($198)) + 28|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $2;
    HEAP8[$201>>0] = $200;
    break;
   } else {
    $202 = $2;
    HEAP8[$202>>0] = 5;
    break;
   }
  }
 } while(0);
 $203 = $2;
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $2;
 $207 = ((($206)) + 5|0);
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $210 = (($209) - 4)|0;
 $211 = ($205|0)==($210|0);
 if ($211) {
  $212 = $2;
  HEAP8[$212>>0] = 5;
 }
 $0 = 1;
 $213 = $0;
 STACKTOP = sp;return ($213|0);
}
function _putFrameDatum($p,$method,$datum) {
 $p = $p|0;
 $method = $method|0;
 $datum = $datum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $method;
 $3 = $datum;
 $4 = $2;
 $5 = $4&255;
 $switch = ($5>>>0)<(3);
 $6 = $1;
 if ($switch) {
  $7 = $3;
  $8 = (_putIndex($6,$7)|0);
  $0 = $8;
 } else {
  $0 = $6;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _putTargetDatum($p,$method,$datum) {
 $p = $p|0;
 $method = $method|0;
 $datum = $datum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $method;
 $2 = $datum;
 $3 = $0;
 $4 = $2;
 $5 = (_putIndex($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _put32($p,$value) {
 $p = $p|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $value;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 STACKTOP = sp;return ($5|0);
}
function _put16($p,$value) {
 $p = $p|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $value;
 $2 = $1;
 $3 = $0;
 HEAP16[$3>>1] = $2;
 $4 = $0;
 $5 = ((($4)) + 2|0);
 STACKTOP = sp;return ($5|0);
}
function _putIndex($p,$index) {
 $p = $p|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $index;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>(127);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = $6 >> 8;
  $8 = 128 | $7;
  $9 = $8&255;
  $10 = $0;
  $11 = ((($10)) + 1|0);
  $0 = $11;
  HEAP8[$10>>0] = $9;
 }
 $12 = $1;
 $13 = $12&255;
 $14 = $0;
 $15 = ((($14)) + 1|0);
 $0 = $15;
 HEAP8[$14>>0] = $13;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _omf_write_record($objr) {
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $out = sp + 4|0;
 $0 = $objr;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = ((($3)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)>=(128);
  if ($7) {
   $8 = $0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)<=(203);
   if (!($12)) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  (_InternalError(98578,525)|0);
 }
 $13 = $0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($16) - 128)|0;
 $18 = $17 >> 1;
 $19 = (98587 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (15052 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 (FUNCTION_TABLE_iii[$23 & 255]($out,$24)|0);
 STACKTOP = sp;return;
}
function _writeUnexp($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $objr;
 HEAP32[$vararg_buffer>>2] = 98578;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 458;
 _Fatal(110,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _writeMisc($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  (_InternalError(98578,179)|0);
 }
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 _WBegRec($6,$9);
 $10 = $0;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 _PutMem($10,$13,$15);
 $16 = $0;
 _WEndRec($16);
 STACKTOP = sp;return 0;
}
function _writeMisc32($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  (_InternalError(98578,192)|0);
 }
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $1;
 $12 = ((($11)) + 13|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $10 | $14;
 $16 = $15&255;
 _WBegRec($6,$16);
 $17 = $0;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 _PutMem($17,$20,$22);
 $23 = $0;
 _WEndRec($23);
 STACKTOP = sp;return 0;
}
function _writeSegdef($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $acbp = 0, $align = 0, $is32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(152);
 if (!($6)) {
  (_InternalError(98578,220)|0);
 }
 $7 = $1;
 $8 = ((($7)) + 13|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $is32 = $10;
 $11 = $0;
 $12 = $is32;
 $13 = (152 + ($12))|0;
 $14 = $13&255;
 _WBegRec($11,$14);
 $15 = $1;
 $16 = ((($15)) + 16|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 2;
 $21 = $1;
 $22 = ((($21)) + 16|0);
 $23 = ((($22)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $20 | $25;
 $27 = $26&255;
 $acbp = $27;
 $28 = $1;
 $29 = ((($28)) + 16|0);
 $30 = ((($29)) + 3|0);
 $31 = HEAP8[$30>>0]|0;
 $align = $31;
 $32 = $align;
 $33 = $32&255;
 $34 = $33 << 5;
 $35 = $acbp;
 $36 = $35&255;
 $37 = $36 | $34;
 $38 = $37&255;
 $acbp = $38;
 $39 = $is32;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $1;
  $42 = ((($41)) + 16|0);
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(65536);
  if ($45) {
   $46 = $acbp;
   $47 = $46&255;
   $48 = $47 | 2;
   $49 = $48&255;
   $acbp = $49;
  }
 }
 $50 = $0;
 $51 = $acbp;
 _PutByte($50,$51);
 $52 = $align;
 $53 = $52&255;
 $54 = ($53|0)==(0);
 if ($54) {
  $55 = $0;
  $56 = $1;
  $57 = ((($56)) + 16|0);
  $58 = ((($57)) + 8|0);
  $59 = HEAP16[$58>>1]|0;
  _PutWord($55,$59);
  $60 = $0;
  $61 = $1;
  $62 = ((($61)) + 16|0);
  $63 = ((($62)) + 8|0);
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65&255;
  _PutByte($60,$66);
 }
 $67 = $is32;
 $68 = ($67|0)!=(0);
 $69 = $0;
 $70 = $1;
 $71 = ((($70)) + 16|0);
 $72 = ((($71)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 if ($68) {
  _PutDword($69,$73);
 } else {
  $74 = $73&65535;
  _PutWord($69,$74);
 }
 $75 = $0;
 $76 = $1;
 $77 = ((($76)) + 16|0);
 $78 = ((($77)) + 20|0);
 $79 = HEAP16[$78>>1]|0;
 _PutIndex799($75,$79);
 $80 = $0;
 $81 = $1;
 $82 = ((($81)) + 16|0);
 $83 = ((($82)) + 22|0);
 $84 = HEAP16[$83>>1]|0;
 _PutIndex799($80,$84);
 $85 = $0;
 $86 = $1;
 $87 = ((($86)) + 16|0);
 $88 = ((($87)) + 24|0);
 $89 = HEAP16[$88>>1]|0;
 _PutIndex799($85,$89);
 $90 = $0;
 _WEndRec($90);
 STACKTOP = sp;return 0;
}
function _writeLedata($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(160);
 if (!($6)) {
  $7 = $1;
  $8 = ((($7)) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(162);
  if (!($11)) {
   (_InternalError(98578,312)|0);
  }
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $1;
 $18 = ((($17)) + 13|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($16) + ($20))|0;
 $22 = $21&255;
 _WBegRec($12,$22);
 $23 = $0;
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = HEAP16[$25>>1]|0;
 _PutIndex799($23,$26);
 $27 = $1;
 $28 = ((($27)) + 13|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)!=(0);
 $31 = $0;
 $32 = $1;
 $33 = ((($32)) + 16|0);
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 if ($30) {
  _PutDword($31,$35);
  $37 = $0;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  _PutMem($37,$40,$42);
  $43 = $0;
  _WEndRec($43);
  STACKTOP = sp;return 0;
 } else {
  $36 = $35&65535;
  _PutWord($31,$36);
  $37 = $0;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $1;
  $42 = HEAP32[$41>>2]|0;
  _PutMem($37,$40,$42);
  $43 = $0;
  _WEndRec($43);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _writeComent($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  (_InternalError(98578,203)|0);
 }
 $6 = $0;
 _WBegRec($6,-120);
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP8[$9>>0]|0;
 _PutByte($7,$10);
 $11 = $0;
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 _PutByte($11,$15);
 $16 = $0;
 $17 = $1;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 _PutMem($16,$19,$21);
 $22 = $0;
 _WEndRec($22);
 STACKTOP = sp;return 0;
}
function _writeTheadr($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(128);
 if (!($6)) {
  (_InternalError(98578,329)|0);
 }
 $7 = $0;
 $8 = $1;
 $9 = (_writeMisc($7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _writeModend($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is32 = 0, $mtype = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(138);
 if (!($6)) {
  (_InternalError(98578,341)|0);
 }
 $7 = $1;
 $8 = ((($7)) + 13|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 16|0);
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(0);
  $19 = $17;
 } else {
  $19 = 0;
 }
 $18 = $19 ? 1 : 0;
 $is32 = $18;
 $20 = $0;
 $21 = $is32;
 $22 = (138 + ($21))|0;
 $23 = $22&255;
 _WBegRec($20,$23);
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)!=(0);
 $29 = $28 ? 128 : 0;
 $30 = $29&255;
 $mtype = $30;
 $31 = $1;
 $32 = ((($31)) + 16|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)!=(0);
 if ($35) {
  $36 = $mtype;
  $37 = $36&255;
  $38 = $37 | 65;
  $39 = $38&255;
  $mtype = $39;
  $40 = $0;
  $41 = $mtype;
  _PutByte($40,$41);
  $42 = $0;
  $43 = $1;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  _PutMem($42,$45,$47);
  $50 = $0;
  _WEndRec($50);
  STACKTOP = sp;return 0;
 } else {
  $48 = $0;
  $49 = $mtype;
  _PutByte($48,$49);
  $50 = $0;
  _WEndRec($50);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _writePubdef($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(144);
 if (!($6)) {
  $7 = $1;
  $8 = ((($7)) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(182);
  if (!($11)) {
   (_InternalError(98578,382)|0);
  }
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $1;
 $18 = ((($17)) + 13|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($16) + ($20))|0;
 $22 = $21&255;
 _WBegRec($12,$22);
 $23 = $0;
 $24 = $1;
 $25 = ((($24)) + 16|0);
 _PutBase($23,$25);
 $26 = $0;
 $27 = $1;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = HEAP32[$30>>2]|0;
 _PutMem($26,$29,$31);
 $32 = $0;
 _WEndRec($32);
 STACKTOP = sp;return 0;
}
function _writeLinnum($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(148);
 if (!($6)) {
  (_InternalError(98578,395)|0);
 }
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (148 + ($11))|0;
 $13 = $12&255;
 _WBegRec($7,$13);
 $14 = $0;
 $15 = $1;
 $16 = ((($15)) + 16|0);
 _PutBase($14,$16);
 $17 = $0;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 _PutMem($17,$20,$22);
 $23 = $0;
 _WEndRec($23);
 STACKTOP = sp;return 0;
}
function _writeComdat($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(194);
 if (!($6)) {
  (_InternalError(98578,413)|0);
 }
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $1;
 $13 = ((($12)) + 13|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($11) + ($15))|0;
 $17 = $16&255;
 _WBegRec($7,$17);
 $18 = $0;
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = HEAP8[$20>>0]|0;
 _PutByte($18,$21);
 $22 = $0;
 $23 = $1;
 $24 = ((($23)) + 16|0);
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 _PutByte($22,$26);
 $27 = $0;
 $28 = $1;
 $29 = ((($28)) + 16|0);
 $30 = ((($29)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 _PutByte($27,$31);
 $32 = $1;
 $33 = ((($32)) + 13|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)!=(0);
 $36 = $0;
 $37 = $1;
 $38 = ((($37)) + 16|0);
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 if ($35) {
  _PutDword($36,$40);
 } else {
  $41 = $40&65535;
  _PutWord($36,$41);
 }
 $42 = $0;
 $43 = $1;
 $44 = ((($43)) + 16|0);
 $45 = ((($44)) + 8|0);
 $46 = HEAP16[$45>>1]|0;
 _PutIndex799($42,$46);
 $47 = $1;
 $48 = ((($47)) + 16|0);
 $49 = ((($48)) + 1|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 15;
 $53 = ($52|0)==(0);
 if (!($53)) {
  $58 = $0;
  $59 = $1;
  $60 = ((($59)) + 16|0);
  $61 = ((($60)) + 16|0);
  $62 = HEAP16[$61>>1]|0;
  _PutIndex799($58,$62);
  $63 = $0;
  $64 = $1;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  _PutMem($63,$66,$68);
  $69 = $0;
  _WEndRec($69);
  STACKTOP = sp;return 0;
 }
 $54 = $0;
 $55 = $1;
 $56 = ((($55)) + 16|0);
 $57 = ((($56)) + 10|0);
 _PutBase($54,$57);
 $58 = $0;
 $59 = $1;
 $60 = ((($59)) + 16|0);
 $61 = ((($60)) + 16|0);
 $62 = HEAP16[$61>>1]|0;
 _PutIndex799($58,$62);
 $63 = $0;
 $64 = $1;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 _PutMem($63,$66,$68);
 $69 = $0;
 _WEndRec($69);
 STACKTOP = sp;return 0;
}
function _writeLinsym($out,$objr) {
 $out = $out|0;
 $objr = $objr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $objr;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(196);
 if (!($6)) {
  (_InternalError(98578,442)|0);
 }
 $7 = $0;
 $8 = $1;
 $9 = ((($8)) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (196 + ($11))|0;
 $13 = $12&255;
 _WBegRec($7,$13);
 $14 = $0;
 $15 = $1;
 $16 = ((($15)) + 16|0);
 $17 = HEAP8[$16>>0]|0;
 _PutByte($14,$17);
 $18 = $0;
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = ((($20)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 _PutIndex799($18,$22);
 $23 = $0;
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 _PutMem($23,$26,$28);
 $29 = $0;
 _WEndRec($29);
 STACKTOP = sp;return 0;
}
function _WBegRec($out,$command) {
 $out = $out|0;
 $command = $command|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $command;
 $2 = $0;
 HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = $3;
 STACKTOP = sp;return;
}
function _PutByte($out,$value) {
 $out = $out|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $value;
 $2 = $1;
 $3 = $0;
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = (($4) + 1)|0;
 HEAP8[$3>>0]=$5&255;HEAP8[$3+1>>0]=($5>>8)&255;HEAP8[$3+2>>0]=($5>>16)&255;HEAP8[$3+3>>0]=$5>>24;
 $6 = $0;
 $7 = ((($6)) + 7|0);
 $8 = (($7) + ($4)|0);
 HEAP8[$8>>0] = $2;
 STACKTOP = sp;return;
}
function _PutIndex799($out,$index) {
 $out = $out|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $index;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)>(127);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = $6&65535;
  $8 = $7 >> 8;
  $9 = 128 | $8;
  $10 = $9&255;
  _PutByte($5,$10);
 }
 $11 = $0;
 $12 = $1;
 $13 = $12&65535;
 $14 = $13 & 255;
 $15 = $14&255;
 _PutByte($11,$15);
 STACKTOP = sp;return;
}
function _PutMem($out,$buf,$length) {
 $out = $out|0;
 $buf = $buf|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $out;
 $1 = $buf;
 $2 = $length;
 $3 = $2;
 $4 = $0;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (4079 - ($5))|0;
 $7 = ($3>>>0)<=($6>>>0);
 if ($7) {
  $8 = $0;
  $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
  $10 = $0;
  $11 = ((($10)) + 7|0);
  $12 = (($11) + ($9)|0);
  $13 = $1;
  $14 = $2;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $2;
  $16 = $0;
  $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
  $18 = (($17) + ($15))|0;
  HEAP8[$16>>0]=$18&255;HEAP8[$16+1>>0]=($18>>8)&255;HEAP8[$16+2>>0]=($18>>16)&255;HEAP8[$16+3>>0]=$18>>24;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = 98578;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 168;
  _Fatal(110,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _WEndRec($out) {
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $checksum = 0, $end = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  (_InternalError(98578,96)|0);
 }
 $8 = $0;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = (($9) + 1)|0;
 $11 = $10&65535;
 $12 = $0;
 $13 = ((($12)) + 5|0);
 HEAP8[$13>>0]=$11&255;HEAP8[$13+1>>0]=$11>>8;
 $14 = $0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $0;
 $19 = ((($18)) + 5|0);
 $20 = HEAPU8[$19>>0]|(HEAPU8[$19+1>>0]<<8);
 $21 = $20&65535;
 $22 = $21 & 255;
 $23 = (($17) + ($22))|0;
 $24 = $0;
 $25 = ((($24)) + 5|0);
 $26 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
 $27 = $26&65535;
 $28 = $27 >> 8;
 $29 = (($23) + ($28))|0;
 $30 = $29&255;
 $checksum = $30;
 $31 = $0;
 $32 = ((($31)) + 7|0);
 $p = $32;
 $33 = $p;
 $34 = $0;
 $35 = HEAPU8[$34>>0]|(HEAPU8[$34+1>>0]<<8)|(HEAPU8[$34+2>>0]<<16)|(HEAPU8[$34+3>>0]<<24);
 $36 = (($33) + ($35)|0);
 $end = $36;
 while(1) {
  $37 = $p;
  $38 = $end;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $p;
  $41 = ((($40)) + 1|0);
  $p = $41;
  $42 = HEAP8[$40>>0]|0;
  $43 = $42&255;
  $44 = $checksum;
  $45 = $44&255;
  $46 = (($45) + ($43))|0;
  $47 = $46&255;
  $checksum = $47;
 }
 $48 = $checksum;
 $49 = $48&255;
 $50 = (0 - ($49))|0;
 $51 = $50&255;
 $checksum = $51;
 $52 = $checksum;
 $53 = $p;
 HEAP8[$53>>0] = $52;
 $54 = HEAP32[(376)>>2]|0;
 $55 = $0;
 $56 = ((($55)) + 4|0);
 $57 = $0;
 $58 = HEAPU8[$57>>0]|(HEAPU8[$57+1>>0]<<8)|(HEAPU8[$57+2>>0]<<16)|(HEAPU8[$57+3>>0]<<24);
 $59 = (($58) + 4)|0;
 _safeWrite($54,$56,$59);
 STACKTOP = sp;return;
}
function _safeWrite($file,$buf,$len) {
 $file = $file|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file;
 $1 = $buf;
 $2 = $len;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = (_fwrite($3,1,$4,$5)|0);
 $7 = $2;
 $8 = ($6|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 _WriteError();
 STACKTOP = sp;return;
}
function _PutDword($out,$value) {
 $out = $out|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $value;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 7|0);
 $5 = $0;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = (($4) + ($6)|0);
 HEAP32[$7>>2] = $2;
 $8 = $0;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = (($9) + 4)|0;
 HEAP8[$8>>0]=$10&255;HEAP8[$8+1>>0]=($10>>8)&255;HEAP8[$8+2>>0]=($10>>16)&255;HEAP8[$8+3>>0]=$10>>24;
 STACKTOP = sp;return;
}
function _PutWord($out,$value) {
 $out = $out|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $value;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 7|0);
 $5 = $0;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = (($4) + ($6)|0);
 HEAP16[$7>>1] = $2;
 $8 = $0;
 $9 = HEAPU8[$8>>0]|(HEAPU8[$8+1>>0]<<8)|(HEAPU8[$8+2>>0]<<16)|(HEAPU8[$8+3>>0]<<24);
 $10 = (($9) + 2)|0;
 HEAP8[$8>>0]=$10&255;HEAP8[$8+1>>0]=($10>>8)&255;HEAP8[$8+2>>0]=($10>>16)&255;HEAP8[$8+3>>0]=$10>>24;
 STACKTOP = sp;return;
}
function _PutBase($out,$base) {
 $out = $out|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $base;
 $2 = $0;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 _PutIndex799($2,$4);
 $5 = $0;
 $6 = $1;
 $7 = ((($6)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 _PutIndex799($5,$8);
 $9 = $1;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 _PutWord($18,$21);
 STACKTOP = sp;return;
}
function _OptionDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $idx = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $idx = -1;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$1>>2]|0;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  (_strupr($15)|0);
  $idx = 0;
  while(1) {
   $16 = $idx;
   $17 = ($16>>>0)<(38);
   if (!($17)) {
    break;
   }
   $18 = HEAP32[$1>>2]|0;
   $19 = $2;
   $20 = (($19) + ($18<<4)|0);
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $idx;
   $24 = (15100 + ($23<<3)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_strcmp($22,$25)|0);
   $27 = (0)==($26|0);
   if ($27) {
    break;
   }
   $28 = $idx;
   $29 = (($28) + 1)|0;
   $idx = $29;
  }
  $30 = $idx;
  $31 = ($30>>>0)>=(38);
  if ($31) {
   break;
  }
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$1>>2] = $33;
  $34 = $idx;
  $35 = ($34|0)>=(19);
  if ($35) {
   $36 = HEAP32[$1>>2]|0;
   $37 = $2;
   $38 = (($37) + ($36<<4)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)!=(58);
   if ($41) {
    label = 10;
    break;
   }
   $43 = HEAP32[$1>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$1>>2] = $44;
   $45 = HEAP32[$1>>2]|0;
   $46 = $2;
   $47 = (($46) + ($45<<4)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)==(0);
   if ($50) {
    label = 12;
    break;
   }
   $53 = $idx;
   $54 = ($53|0)>=(28);
   if ($54) {
    $55 = HEAP8[(6083)>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)!=(0);
    if ($57) {
     label = 15;
     break;
    }
   }
  }
  $60 = $idx;
  $61 = (15100 + ($60<<3)|0);
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $2;
  $65 = (FUNCTION_TABLE_iii[$63 & 255]($1,$64)|0);
  $66 = ($65|0)==(-1);
  if ($66) {
   label = 17;
   break;
  }
  $67 = HEAP32[$1>>2]|0;
  $68 = $2;
  $69 = (($68) + ($67<<4)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)!=(44);
  if ($72) {
   break;
  }
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$1>>2] = $74;
 }
 if ((label|0) == 10) {
  $42 = (_EmitError(84)|0);
  $0 = $42;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 12) {
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) - 2)|0;
  HEAP32[$1>>2] = $52;
 }
 else if ((label|0) == 15) {
  $58 = HEAP32[$1>>2]|0;
  $59 = (($58) - 2)|0;
  HEAP32[$1>>2] = $59;
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 $75 = $idx;
 $76 = ($75>>>0)>=(38);
 if (!($76)) {
  $77 = HEAP32[$1>>2]|0;
  $78 = $2;
  $79 = (($78) + ($77<<4)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = ($81|0)!=(0);
  if (!($82)) {
   $0 = 0;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  }
 }
 $83 = HEAP32[$1>>2]|0;
 $84 = $2;
 $85 = (($84) + ($83<<4)|0);
 $86 = ((($85)) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 HEAP32[$vararg_buffer>>2] = $87;
 $88 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $88;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _SetDotName($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -17;
 $4 = $3 | 16;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetNoDotName($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -17;
 HEAP32[(560)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _SetM510($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 _SetMasm510(1);
 STACKTOP = sp;return 0;
}
function _SetNoM510($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 _SetMasm510(0);
 STACKTOP = sp;return 0;
}
function _SetScoped($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -129;
 $4 = $3 | 128;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetNoScoped($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -129;
 HEAP32[(560)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _SetOldStructs($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -257;
 $4 = $3 | 256;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetNoOldStructs($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -257;
 HEAP32[(560)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _SetEmulator($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -513;
 $4 = $3 | 512;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetNoEmulator($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -513;
 HEAP32[(560)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _SetLJmp($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -33;
 $4 = $3 | 32;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetNoLJmp($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -33;
 HEAP32[(560)>>2] = $3;
 STACKTOP = sp;return 0;
}
function _Unsupported($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $pi;
 $1 = $tokenarray;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - 2)|0;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 $9 = (_EmitErr(72,$vararg_buffer)|0);
 STACKTOP = sp;return ($9|0);
}
function _SetNoReadonly($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 STACKTOP = sp;return 0;
}
function _SetNoOldmacros($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 STACKTOP = sp;return 0;
}
function _SetExpr32($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 STACKTOP = sp;return 0;
}
function _SetNoSignExt($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = HEAP32[(560)>>2]|0;
 $3 = $2 & -262145;
 $4 = $3 | 262144;
 HEAP32[(560)>>2] = $4;
 STACKTOP = sp;return 0;
}
function _SetCaseMap($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(8);
 $11 = $i;
 $12 = $2;
 $13 = (($12) + ($11<<4)|0);
 if (!($10)) {
  $56 = ((($13)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $57;
  $58 = (_EmitErr(209,$vararg_buffer1)|0);
  $0 = $58;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_strcasecmp($15,98965)|0);
 $17 = (0)==($16|0);
 do {
  if ($17) {
   $18 = HEAP32[(560)>>2]|0;
   $19 = $18 & -2;
   $20 = $19 | 1;
   HEAP32[(560)>>2] = $20;
   $21 = HEAP32[(560)>>2]|0;
   $22 = $21 & -3;
   HEAP32[(560)>>2] = $22;
  } else {
   $23 = $i;
   $24 = $2;
   $25 = (($24) + ($23<<4)|0);
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcasecmp($27,99036)|0);
   $29 = (0)==($28|0);
   if ($29) {
    $30 = HEAP32[(560)>>2]|0;
    $31 = $30 & -2;
    HEAP32[(560)>>2] = $31;
    $32 = HEAP32[(560)>>2]|0;
    $33 = $32 & -3;
    HEAP32[(560)>>2] = $33;
    break;
   }
   $34 = $i;
   $35 = $2;
   $36 = (($35) + ($34<<4)|0);
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (_strcasecmp($38,99046)|0);
   $40 = (0)==($39|0);
   if ($40) {
    $41 = HEAP32[(560)>>2]|0;
    $42 = $41 & -2;
    HEAP32[(560)>>2] = $42;
    $43 = HEAP32[(560)>>2]|0;
    $44 = $43 & -3;
    $45 = $44 | 2;
    HEAP32[(560)>>2] = $45;
    break;
   }
   $46 = $i;
   $47 = $2;
   $48 = (($47) + ($46<<4)|0);
   $49 = ((($48)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP32[$vararg_buffer>>2] = $50;
   $51 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $51;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $52 = $i;
 $53 = (($52) + 1)|0;
 $i = $53;
 _SymSetCmpFunc();
 $54 = $i;
 $55 = $1;
 HEAP32[$55>>2] = $54;
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _SetProc($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $i = $3;
 $4 = $i;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 L1: do {
  switch ($8|0) {
  case 8:  {
   $9 = $i;
   $10 = $1;
   $11 = (($10) + ($9<<4)|0);
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_strcasecmp($13,109618)|0);
   $15 = (0)==($14|0);
   if ($15) {
    $16 = HEAP32[(560)>>2]|0;
    $17 = $16 & -5;
    $18 = $17 | 4;
    HEAP32[(560)>>2] = $18;
    $19 = HEAP32[(560)>>2]|0;
    $20 = $19 & -9;
    HEAP32[(560)>>2] = $20;
    $21 = $i;
    $22 = (($21) + 1)|0;
    $i = $22;
    break L1;
   }
   $23 = $i;
   $24 = $1;
   $25 = (($24) + ($23<<4)|0);
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcasecmp($27,99115)|0);
   $29 = (0)==($28|0);
   if ($29) {
    $30 = HEAP32[(560)>>2]|0;
    $31 = $30 & -5;
    HEAP32[(560)>>2] = $31;
    $32 = HEAP32[(560)>>2]|0;
    $33 = $32 & -9;
    $34 = $33 | 8;
    HEAP32[(560)>>2] = $34;
    $35 = $i;
    $36 = (($35) + 1)|0;
    $i = $36;
   }
   break;
  }
  case 3:  {
   $37 = $i;
   $38 = $1;
   $39 = (($38) + ($37<<4)|0);
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(349);
   if ($42) {
    $43 = HEAP32[(560)>>2]|0;
    $44 = $43 & -5;
    HEAP32[(560)>>2] = $44;
    $45 = HEAP32[(560)>>2]|0;
    $46 = $45 & -9;
    HEAP32[(560)>>2] = $46;
    $47 = $i;
    $48 = (($47) + 1)|0;
    $i = $48;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $49 = $i;
 $50 = $0;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return 0;
}
function _SetPrologue($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(8);
 if ($10) {
  $11 = $i;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $17 = HEAP32[(488)>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  HEAP32[(488)>>2] = 0;
 }
 $19 = $i;
 $20 = $2;
 $21 = (($20) + ($19<<4)|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_strcasecmp($23,98965)|0);
 $25 = (0)==($24|0);
 do {
  if ($25) {
   HEAP8[(576)>>0] = 2;
  } else {
   $26 = $i;
   $27 = $2;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_strcasecmp($30,99024)|0);
   $32 = (0)==($31|0);
   if ($32) {
    HEAP8[(576)>>0] = 0;
    break;
   } else {
    HEAP8[(576)>>0] = 1;
    $33 = $i;
    $34 = $2;
    $35 = (($34) + ($33<<4)|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_strlen($37)|0);
    $39 = (($38) + 1)|0;
    $40 = (_LclAlloc($39)|0);
    HEAP32[(488)>>2] = $40;
    $41 = HEAP32[(488)>>2]|0;
    $42 = $i;
    $43 = $2;
    $44 = (($43) + ($42<<4)|0);
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    (_strcpy($41,$46)|0);
    break;
   }
  }
 } while(0);
 $47 = $i;
 $48 = (($47) + 1)|0;
 $i = $48;
 $49 = $i;
 $50 = $1;
 HEAP32[$50>>2] = $49;
 $0 = 0;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _SetEpilogue($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(8);
 if ($10) {
  $11 = $i;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $17 = HEAP32[(492)>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  HEAP32[(492)>>2] = 0;
 }
 $19 = $i;
 $20 = $2;
 $21 = (($20) + ($19<<4)|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_strcasecmp($23,98965)|0);
 $25 = (0)==($24|0);
 do {
  if ($25) {
   HEAP8[(577)>>0] = 2;
  } else {
   $26 = $i;
   $27 = $2;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_strcasecmp($30,99012)|0);
   $32 = (0)==($31|0);
   if ($32) {
    HEAP8[(577)>>0] = 0;
    break;
   } else {
    HEAP8[(577)>>0] = 1;
    $33 = $i;
    $34 = $2;
    $35 = (($34) + ($33<<4)|0);
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_strlen($37)|0);
    $39 = (($38) + 1)|0;
    $40 = (_LclAlloc($39)|0);
    HEAP32[(492)>>2] = $40;
    $41 = HEAP32[(492)>>2]|0;
    $42 = $i;
    $43 = $2;
    $44 = (($43) + ($42<<4)|0);
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    (_strcpy($41,$46)|0);
    break;
   }
  }
 } while(0);
 $47 = $i;
 $48 = (($47) + 1)|0;
 $i = $48;
 $49 = $i;
 $50 = $1;
 HEAP32[$50>>2] = $49;
 $0 = 0;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _SetLanguage($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $i = sp + 4|0;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = HEAP32[$i>>2]|0;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(7);
 if ($10) {
  $11 = $2;
  $12 = (_GetLangType($i,$11,(516))|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = HEAP32[(512)>>2]|0;
   $15 = ($14|0)!=(0);
   $16 = HEAP32[8436>>2]|0;
   $17 = ($16|0)!=(0|0);
   $or$cond = $15 & $17;
   if ($or$cond) {
    $18 = HEAP32[(516)>>2]|0;
    $19 = HEAP32[8436>>2]|0;
    $20 = ((($19)) + 8|0);
    HEAP32[$20>>2] = $18;
   }
   $21 = HEAP32[$i>>2]|0;
   $22 = $1;
   HEAP32[$22>>2] = $21;
   $0 = 0;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $23 = HEAP32[$i>>2]|0;
 $24 = $2;
 $25 = (($24) + ($23<<4)|0);
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer>>2] = $27;
 $28 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _SetNoKeyword($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $cnt = 0, $i = 0, $index = 0, $p = 0, $p2 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = HEAP32[4884>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = $2;
  _SkipOption($7,$8);
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $9 = $i;
 $10 = $2;
 $11 = (($10) + ($9<<4)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)!=(9);
 if (!($14)) {
  $15 = $i;
  $16 = $2;
  $17 = (($16) + ($15<<4)|0);
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(60);
  if (!($21)) {
   $28 = $i;
   $29 = $2;
   $30 = (($29) + ($28<<4)|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $p = $32;
   L8: while(1) {
    $33 = $p;
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)!=(0);
    if (!($35)) {
     label = 24;
     break;
    }
    while(1) {
     $36 = $p;
     $37 = HEAP8[$36>>0]|0;
     $38 = $37 << 24 >> 24;
     $39 = (_isspace($38)|0);
     $40 = ($39|0)!=(0);
     $41 = $p;
     if (!($40)) {
      break;
     }
     $42 = ((($41)) + 1|0);
     $p = $42;
    }
    $43 = HEAP8[$41>>0]|0;
    $44 = ($43<<24>>24)!=(0);
    do {
     if ($44) {
      $45 = $p;
      $p2 = $45;
      while(1) {
       $46 = $p;
       $47 = HEAP8[$46>>0]|0;
       $48 = ($47<<24>>24)!=(0);
       if (!($48)) {
        break;
       }
       $49 = $p;
       $50 = HEAP8[$49>>0]|0;
       $51 = $50 << 24 >> 24;
       $52 = (_isspace($51)|0);
       $53 = ($52|0)!=(0);
       if ($53) {
        break;
       }
       $54 = $p;
       $55 = HEAP8[$54>>0]|0;
       $56 = $55 << 24 >> 24;
       $57 = ($56|0)==(44);
       if ($57) {
        break;
       }
       $58 = $p;
       $59 = ((($58)) + 1|0);
       $p = $59;
      }
      $60 = $p;
      $61 = $p2;
      $62 = $60;
      $63 = $61;
      $64 = (($62) - ($63))|0;
      $65 = $64&255;
      $cnt = $65;
      $66 = $p2;
      $67 = $cnt;
      $68 = (_FindResWord($66,$67)|0);
      $index = $68;
      $69 = $index;
      $70 = ($69|0)!=(0);
      if ($70) {
       $71 = $index;
       _DisableKeyword($71);
       break;
      } else {
       $72 = $p2;
       $73 = $cnt;
       $74 = $73&255;
       $75 = (_IsKeywordDisabled($72,$74)|0);
       $76 = ($75<<24>>24)!=(0);
       if ($76) {
        label = 19;
        break L8;
       } else {
        break;
       }
      }
     }
    } while(0);
    while(1) {
     $78 = $p;
     $79 = HEAP8[$78>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = (_isspace($80)|0);
     $82 = ($81|0)!=(0);
     $83 = $p;
     if (!($82)) {
      break;
     }
     $84 = ((($83)) + 1|0);
     $p = $84;
    }
    $85 = HEAP8[$83>>0]|0;
    $86 = $85 << 24 >> 24;
    $87 = ($86|0)==(44);
    if (!($87)) {
     continue;
    }
    $88 = $p;
    $89 = ((($88)) + 1|0);
    $p = $89;
   }
   if ((label|0) == 19) {
    $77 = (_EmitError(158)|0);
    $0 = $77;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
   else if ((label|0) == 24) {
    $90 = $i;
    $91 = (($90) + 1)|0;
    $i = $91;
    $92 = $i;
    $93 = $1;
    HEAP32[$93>>2] = $92;
    $0 = 0;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
  }
 }
 $22 = $i;
 $23 = $2;
 $24 = (($23) + ($22<<4)|0);
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer>>2] = $26;
 $27 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $27;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function _SetSetIF2($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $i = $3;
 $4 = $i;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strcasecmp($8,99001)|0);
 $10 = (0)==($9|0);
 if ($10) {
  $11 = HEAP32[(560)>>2]|0;
  $12 = $11 & -1025;
  $13 = $12 | 1024;
  HEAP32[(560)>>2] = $13;
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 } else {
  $16 = $i;
  $17 = $1;
  $18 = (($17) + ($16<<4)|0);
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_strcasecmp($20,99006)|0);
  $22 = (0)==($21|0);
  if ($22) {
   $23 = HEAP32[(560)>>2]|0;
   $24 = $23 & -1025;
   HEAP32[(560)>>2] = $24;
   $25 = $i;
   $26 = (($25) + 1)|0;
   $i = $26;
  }
 }
 $27 = $i;
 $28 = $0;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return 0;
}
function _SetOffset($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_strcasecmp($9,98995)|0);
 $11 = (0)==($10|0);
 do {
  if ($11) {
   HEAP32[(536)>>2] = 0;
  } else {
   $12 = $i;
   $13 = $2;
   $14 = (($13) + ($12<<4)|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strcasecmp($16,109458)|0);
   $18 = (0)==($17|0);
   if ($18) {
    HEAP32[(536)>>2] = 1;
    break;
   }
   $19 = $i;
   $20 = $2;
   $21 = (($20) + ($19<<4)|0);
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_strcasecmp($23,98851)|0);
   $25 = (0)==($24|0);
   if ($25) {
    HEAP32[(536)>>2] = 2;
    break;
   }
   $26 = $i;
   $27 = $2;
   $28 = (($27) + ($26<<4)|0);
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer>>2] = $30;
   $31 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $31;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
 } while(0);
 $32 = $i;
 $33 = (($32) + 1)|0;
 $i = $33;
 $34 = $i;
 $35 = $1;
 HEAP32[$35>>2] = $34;
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _SetSegment($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(7);
 do {
  if ($10) {
   $11 = $i;
   $12 = $2;
   $13 = (($12) + ($11<<4)|0);
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(187);
   if ($16) {
    $17 = HEAP32[(544)>>2]|0;
    $18 = $17 & 240;
    $19 = ($18>>>0)>=(112);
    if ($19) {
     HEAP8[(557)>>0] = 2;
     break;
    } else {
     HEAP8[(557)>>0] = 1;
     break;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $20 = $i;
   $21 = $2;
   $22 = (($21) + ($20<<4)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)==(8);
   if ($25) {
    $26 = $i;
    $27 = $2;
    $28 = (($27) + ($26<<4)|0);
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_strcasecmp($30,109386)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[(557)>>0] = 0;
     break;
    }
   }
   $33 = $i;
   $34 = $2;
   $35 = (($34) + ($33<<4)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)==(8);
   if ($38) {
    $39 = $i;
    $40 = $2;
    $41 = (($40) + ($39<<4)|0);
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_strcasecmp($43,109579)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     HEAP8[(557)>>0] = 1;
     break;
    }
   }
   $46 = $i;
   $47 = $2;
   $48 = (($47) + ($46<<4)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(8);
   if ($51) {
    $52 = $i;
    $53 = $2;
    $54 = (($53) + ($52<<4)|0);
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (_strcasecmp($56,109392)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     HEAP8[(557)>>0] = 2;
     break;
    }
   }
   $59 = $i;
   $60 = $2;
   $61 = (($60) + ($59<<4)|0);
   $62 = ((($61)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP32[$vararg_buffer>>2] = $63;
   $64 = (_EmitErr(209,$vararg_buffer)|0);
   $0 = $64;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 } while(0);
 $65 = $i;
 $66 = (($65) + 1)|0;
 $i = $66;
 $67 = $i;
 $68 = $1;
 HEAP32[$68>>2] = $67;
 $0 = 0;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _SetFieldAlign($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opndx = 0, $temp = 0, $temp2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $i = sp + 84|0;
 $opndx = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = $2;
 $6 = HEAP32[(616)>>2]|0;
 $7 = (_EvalOperand($i,$5,$6,$opndx,2)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $9 = ((($opndx)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = (_EmitError(65)|0);
  $0 = $12;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $13 = HEAP32[$opndx>>2]|0;
 $14 = ($13>>>0)>(32);
 if ($14) {
  $15 = (_EmitError(214)|0);
  $0 = $15;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $temp = 1;
 $temp2 = 0;
 while(1) {
  $16 = $temp;
  $17 = HEAP32[$opndx>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $temp;
  if (!($18)) {
   break;
  }
  $20 = $19 << 1;
  $temp = $20;
  $21 = $temp2;
  $22 = (($21) + 1)|0;
  $temp2 = $22;
 }
 $23 = HEAP32[$opndx>>2]|0;
 $24 = ($19|0)!=($23|0);
 if ($24) {
  $25 = HEAP32[$opndx>>2]|0;
  HEAP32[$vararg_buffer>>2] = $25;
  $26 = (_EmitErr(129,$vararg_buffer)|0);
  $0 = $26;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 } else {
  $27 = $temp2;
  $28 = $27&255;
  HEAP8[(549)>>0] = $28;
  $29 = HEAP32[$i>>2]|0;
  $30 = $1;
  HEAP32[$30>>2] = $29;
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _SetProcAlign($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opndx = 0, $temp = 0, $temp2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $i = sp + 84|0;
 $opndx = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = $2;
 $6 = HEAP32[(616)>>2]|0;
 $7 = (_EvalOperand($i,$5,$6,$opndx,2)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $9 = ((($opndx)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = (_EmitError(65)|0);
  $0 = $12;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $13 = HEAP32[$opndx>>2]|0;
 $14 = ($13|0)>(32);
 if ($14) {
  (_EmitError(214)|0);
 }
 $temp = 1;
 $temp2 = 0;
 while(1) {
  $15 = $temp;
  $16 = HEAP32[$opndx>>2]|0;
  $17 = ($15|0)<($16|0);
  $18 = $temp;
  if (!($17)) {
   break;
  }
  $19 = $18 << 1;
  $temp = $19;
  $20 = $temp2;
  $21 = (($20) + 1)|0;
  $temp2 = $21;
 }
 $22 = HEAP32[$opndx>>2]|0;
 $23 = ($18|0)!=($22|0);
 if ($23) {
  $24 = HEAP32[$opndx>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  $25 = (_EmitErr(129,$vararg_buffer)|0);
  $0 = $25;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 } else {
  $26 = $temp2;
  $27 = $26&255;
  HEAP8[(551)>>0] = $27;
  $28 = HEAP32[$i>>2]|0;
  $29 = $1;
  HEAP32[$29>>2] = $28;
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _SetMZ($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $opndx = 0, $parms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 84|0;
 $opndx = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $j = 0;
 $parms = (564);
 while(1) {
  $5 = $j;
  $6 = ($5|0)<(4);
  if (!($6)) {
   label = 23;
   break;
  }
  $7 = HEAP32[$i>>2]|0;
  $k = $7;
  while(1) {
   $8 = $k;
   $9 = $2;
   $10 = (($9) + ($8<<4)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    break;
   }
   $14 = $k;
   $15 = $2;
   $16 = (($15) + ($14<<4)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)==(44);
   if ($19) {
    break;
   }
   $20 = $k;
   $21 = $2;
   $22 = (($21) + ($20<<4)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($24|0)==(58);
   if ($25) {
    break;
   }
   $26 = $k;
   $27 = $2;
   $28 = (($27) + ($26<<4)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = ($30|0)==(13);
   if ($31) {
    break;
   }
   $32 = $k;
   $33 = (($32) + 1)|0;
   $k = $33;
  }
  $34 = $2;
  $35 = $k;
  $36 = (_EvalOperand($i,$34,$35,$opndx,0)|0);
  $37 = ($36|0)==(-1);
  if ($37) {
   label = 10;
   break;
  }
  $38 = ((($opndx)) + 40|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(-2);
  if (!($40)) {
   $41 = ((($opndx)) + 40|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if (!($43)) {
    label = 17;
    break;
   }
   $44 = $opndx;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)>(0);
   $51 = ($46>>>0)>(65535);
   $52 = ($49|0)==(0);
   $53 = $52 & $51;
   $54 = $50 | $53;
   if ($54) {
    label = 14;
    break;
   }
   $56 = HEAP32[(524)>>2]|0;
   $57 = ($56|0)==(1);
   if ($57) {
    $58 = HEAP32[$opndx>>2]|0;
    $59 = $58&65535;
    $60 = $parms;
    $61 = $j;
    $62 = (($60) + ($61<<1)|0);
    HEAP16[$62>>1] = $59;
   }
  }
  $64 = HEAP32[$i>>2]|0;
  $65 = $2;
  $66 = (($65) + ($64<<4)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)==(58);
  $70 = HEAP32[$i>>2]|0;
  if ($69) {
   $71 = (($70) + 1)|0;
   HEAP32[$i>>2] = $71;
  } else {
   $72 = $2;
   $73 = (($72) + ($70<<4)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = ($75|0)==(13);
   if ($76) {
    $77 = HEAP32[$i>>2]|0;
    $78 = (($77) + 1)|0;
    HEAP32[$i>>2] = $78;
    $79 = $j;
    $80 = (($79) + 1)|0;
    $j = $80;
   }
  }
  $81 = $j;
  $82 = (($81) + 1)|0;
  $j = $82;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 else if ((label|0) == 14) {
  $55 = (_EmitConstError($opndx)|0);
  $0 = $55;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 else if ((label|0) == 17) {
  $63 = (_EmitError(65)|0);
  $0 = $63;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 else if ((label|0) == 23) {
  $83 = HEAP32[(524)>>2]|0;
  $84 = ($83|0)==(1);
  if ($84) {
   $85 = HEAP16[(564)>>1]|0;
   $86 = $85&65535;
   $87 = ($86|0)<(30);
   if ($87) {
    HEAP16[(564)>>1] = 30;
   }
   $j = 16;
   while(1) {
    $88 = $j;
    $89 = HEAP16[(566)>>1]|0;
    $90 = $89&65535;
    $91 = ($88|0)<($90|0);
    $92 = $j;
    if (!($91)) {
     break;
    }
    $93 = $92 << 1;
    $j = $93;
   }
   $94 = HEAP16[(566)>>1]|0;
   $95 = $94&65535;
   $96 = ($92|0)!=($95|0);
   if ($96) {
    (_EmitError(205)|0);
   }
   $97 = HEAP16[(570)>>1]|0;
   $98 = $97&65535;
   $99 = HEAP16[(568)>>1]|0;
   $100 = $99&65535;
   $101 = ($98|0)<($100|0);
   if ($101) {
    $102 = HEAP16[(568)>>1]|0;
    HEAP16[(570)>>1] = $102;
   }
  }
  $103 = HEAP32[$i>>2]|0;
  $104 = $1;
  HEAP32[$104>>2] = $103;
  $0 = 0;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 return (0)|0;
}
function _SetFrame($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $i = $3;
 $4 = $i;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strcasecmp($8,98983)|0);
 $10 = (0)==($9|0);
 if ($10) {
  $11 = HEAP32[(560)>>2]|0;
  $12 = $11 & -131073;
  $13 = $12 | 131072;
  HEAP32[(560)>>2] = $13;
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
  $27 = $i;
  $28 = $0;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return 0;
 }
 $16 = $i;
 $17 = $1;
 $18 = (($17) + ($16<<4)|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_strcasecmp($20,98988)|0);
 $22 = (0)==($21|0);
 if (!($22)) {
  $27 = $i;
  $28 = $0;
  HEAP32[$28>>2] = $27;
  STACKTOP = sp;return 0;
 }
 $23 = HEAP32[(560)>>2]|0;
 $24 = $23 & -131073;
 HEAP32[(560)>>2] = $24;
 $25 = $i;
 $26 = (($25) + 1)|0;
 $i = $26;
 $27 = $i;
 $28 = $0;
 HEAP32[$28>>2] = $27;
 STACKTOP = sp;return 0;
}
function _SetElf($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opndx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 72|0;
 $opndx = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = $2;
 $6 = HEAP32[(616)>>2]|0;
 $7 = (_EvalOperand($i,$5,$6,$opndx,0)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $9 = ((($opndx)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $28 = (_EmitError(65)|0);
  $0 = $28;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $12 = $opndx;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(0);
 $19 = ($14>>>0)>(255);
 $20 = ($17|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 if ($22) {
  $23 = (_EmitConstError($opndx)|0);
  $0 = $23;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $24 = HEAP32[(6100)>>2]|0;
 $25 = ($24|0)==(3);
 if ($25) {
  $26 = HEAP32[$opndx>>2]|0;
  $27 = $26&255;
  HEAP8[(564)>>0] = $27;
 }
 $29 = HEAP32[$i>>2]|0;
 $30 = $1;
 HEAP32[$30>>2] = $29;
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _SetRenameKey($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i = 0, $index = 0, $oldname = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(9);
 if (!($10)) {
  $11 = $i;
  $12 = $2;
  $13 = (($12) + ($11<<4)|0);
  $14 = ((($13)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(60);
  if (!($17)) {
   $24 = $i;
   $25 = $2;
   $26 = (($25) + ($24<<4)|0);
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $oldname = $28;
   $29 = $i;
   $30 = (($29) + 1)|0;
   $i = $30;
   $31 = $i;
   $32 = $2;
   $33 = (($32) + ($31<<4)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)!=(3);
   if (!($36)) {
    $37 = $i;
    $38 = $2;
    $39 = (($38) + ($37<<4)|0);
    $40 = ((($39)) + 1|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($42|0)!=(48);
    if (!($43)) {
     $50 = $i;
     $51 = (($50) + 1)|0;
     $i = $51;
     $52 = $i;
     $53 = $2;
     $54 = (($53) + ($52<<4)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = ($56|0)!=(8);
     if ($57) {
      $58 = $i;
      $59 = $2;
      $60 = (($59) + ($58<<4)|0);
      $61 = ((($60)) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $62;
      $63 = (_EmitErr(209,$vararg_buffer4)|0);
      $0 = $63;
      $89 = $0;
      STACKTOP = sp;return ($89|0);
     }
     $64 = $oldname;
     $65 = $oldname;
     $66 = (_strlen($65)|0);
     $67 = $66&255;
     $68 = (_FindResWord($64,$67)|0);
     $index = $68;
     $69 = $index;
     $70 = ($69|0)==(0);
     if ($70) {
      $71 = (_EmitError(158)|0);
      $0 = $71;
      $89 = $0;
      STACKTOP = sp;return ($89|0);
     } else {
      $72 = $index;
      $73 = $i;
      $74 = $2;
      $75 = (($74) + ($73<<4)|0);
      $76 = ((($75)) + 4|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $i;
      $79 = $2;
      $80 = (($79) + ($78<<4)|0);
      $81 = ((($80)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (_strlen($82)|0);
      $84 = $83&255;
      _RenameKeyword($72,$77,$84);
      $85 = $i;
      $86 = (($85) + 1)|0;
      $i = $86;
      $87 = $i;
      $88 = $1;
      HEAP32[$88>>2] = $87;
      $0 = 0;
      $89 = $0;
      STACKTOP = sp;return ($89|0);
     }
    }
   }
   $44 = $i;
   $45 = $2;
   $46 = (($45) + ($44<<4)|0);
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $48;
   $49 = (_EmitErr(209,$vararg_buffer1)|0);
   $0 = $49;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  }
 }
 $18 = $i;
 $19 = $2;
 $20 = (($19) + ($18<<4)|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer>>2] = $22;
 $23 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $23;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _SetWin64($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opndx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 72|0;
 $opndx = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = HEAP8[(557)>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)!=(2);
 if ($7) {
  $8 = $1;
  $9 = $2;
  _SkipOption($8,$9);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $10 = $2;
 $11 = HEAP32[(616)>>2]|0;
 $12 = (_EvalOperand($i,$10,$11,$opndx,0)|0);
 $13 = ($12|0)==(-1);
 if ($13) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $14 = ((($opndx)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $32 = (_EmitError(65)|0);
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $17 = $opndx;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $19 & -8;
 $24 = ($23|0)!=(0);
 $25 = ($22|0)!=(0);
 $26 = $24 | $25;
 if ($26) {
  $27 = (_EmitConstError($opndx)|0);
  $0 = $27;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $28 = HEAP32[$opndx>>2]|0;
  $29 = $28&255;
  HEAP8[((((564)) + 1|0))>>0] = $29;
  $30 = HEAP32[$i>>2]|0;
  $31 = $1;
  HEAP32[$31>>2] = $30;
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _SetDllImport($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $i = $3;
 $4 = $i;
 $5 = $1;
 $6 = (($5) + ($4<<4)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(8);
 if ($9) {
  $10 = $i;
  $11 = $1;
  $12 = (($11) + ($10<<4)|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_strcasecmp($14,98965)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[(496)>>2] = 0;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $19 = $i;
  $20 = $1;
  $21 = (($20) + ($19<<4)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(9);
  if ($24) {
   $25 = $i;
   $26 = $1;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 1|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)==(60);
   if ($31) {
    $32 = HEAP32[4884>>2]|0;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = $i;
     $35 = $1;
     $36 = (($35) + ($34<<4)|0);
     $37 = ((($36)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (_IncludeDll($38)|0);
     HEAP32[(496)>>2] = $39;
    }
    $40 = $i;
    $41 = (($40) + 1)|0;
    $i = $41;
   }
  }
 }
 $42 = $i;
 $43 = $0;
 HEAP32[$43>>2] = $42;
 STACKTOP = sp;return 0;
}
function _SetCodeView($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $opnd = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 72|0;
 $opnd = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $4;
 $5 = $2;
 $6 = HEAP32[(616)>>2]|0;
 $7 = (_EvalOperand($i,$5,$6,$opnd,0)|0);
 $8 = ($7|0)==(-1);
 if ($8) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $9 = ((($opnd)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$opnd>>2]|0;
  $13 = $12&255;
  HEAP8[(579)>>0] = $13;
  $14 = HEAP32[$i>>2]|0;
  $15 = $1;
  HEAP32[$15>>2] = $14;
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $16 = (_EmitError(65)|0);
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _SetStackBase($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $i = $4;
 $5 = $i;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)!=(2);
 $11 = $i;
 $12 = $2;
 $13 = (($12) + ($11<<4)|0);
 if ($10) {
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $16 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $16;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $17 = ((($13)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (15660 + (($18*12)|0)|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 32;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = (_EmitError(33)|0);
  $0 = $24;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $25 = $i;
 $26 = $2;
 $27 = (($26) + ($25<<4)|0);
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP8[(556)>>0]|0;
 $31 = $30&255;
 $32 = ((620) + ($31<<2)|0);
 HEAP32[$32>>2] = $29;
 $33 = HEAP32[(464)>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = (_CreateVariable(98942,0)|0);
  HEAP32[(464)>>2] = $35;
  $36 = HEAP32[(464)>>2]|0;
  $37 = ((($36)) + 24|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 & -33;
  $40 = $39 | 32;
  HEAP16[$37>>1] = $40;
  $41 = HEAP32[(464)>>2]|0;
  $42 = ((($41)) + 40|0);
  HEAP32[$42>>2] = 227;
  $43 = (_CreateVariable(98953,0)|0);
  HEAP32[(468)>>2] = $43;
  $44 = HEAP32[(468)>>2]|0;
  $45 = ((($44)) + 24|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 & -33;
  $48 = $47 | 32;
  HEAP16[$45>>1] = $48;
  $49 = HEAP32[(468)>>2]|0;
  $50 = ((($49)) + 40|0);
  HEAP32[$50>>2] = 228;
 }
 $51 = $i;
 $52 = (($51) + 1)|0;
 $i = $52;
 $53 = $i;
 $54 = $1;
 HEAP32[$54>>2] = $53;
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _IncludeDll($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $q = (364);
 while(1) {
  $6 = $q;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 8;
   break;
  }
  $9 = $q;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = $1;
  $13 = (_strcasecmp($11,$12)|0);
  $14 = ($13|0)==(0);
  $15 = $q;
  $16 = HEAP32[$15>>2]|0;
  if ($14) {
   label = 6;
   break;
  }
  $q = $16;
 }
 if ((label|0) == 6) {
  $0 = $16;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 8) {
  $17 = $1;
  $18 = (_strlen($17)|0);
  $19 = (12 + ($18))|0;
  $20 = (_LclAlloc($19)|0);
  $node = $20;
  $21 = $node;
  HEAP32[$21>>2] = 0;
  $22 = $node;
  $23 = ((($22)) + 4|0);
  HEAP32[$23>>2] = 0;
  $24 = $node;
  $25 = ((($24)) + 8|0);
  $26 = $1;
  (_strcpy($25,$26)|0);
  $27 = $node;
  $28 = $q;
  HEAP32[$28>>2] = $27;
  $29 = HEAP8[(557)>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)==(2);
  $32 = $31 ? 98970 : 98977;
  HEAP32[(368)>>2] = $32;
  $33 = $node;
  $0 = $33;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _SkipOption($pi,$tokenarray) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pi;
 $1 = $tokenarray;
 while(1) {
  $2 = $0;
  $3 = HEAP32[$2>>2]|0;
  $4 = $1;
  $5 = (($4) + ($3<<4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = (($11) + ($10<<4)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)!=(44);
  if (!($15)) {
   label = 5;
   break;
  }
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _sym_add_table($queue,$item) {
 $queue = $queue|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $1 = $item;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = $0;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = $5;
  $8 = $0;
  HEAP32[$8>>2] = $5;
  $9 = $1;
  $10 = ((($9)) + 68|0);
  HEAP32[$10>>2] = 0;
  $11 = $1;
  $12 = ((($11)) + 64|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $13 = $0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = ((($16)) + 68|0);
  HEAP32[$17>>2] = $15;
  $18 = $1;
  $19 = $0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 64|0);
  HEAP32[$22>>2] = $18;
  $23 = $1;
  $24 = $0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $1;
  $27 = ((($26)) + 64|0);
  HEAP32[$27>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _sym_remove_table($queue,$item) {
 $queue = $queue|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $queue;
 $1 = $item;
 $2 = $1;
 $3 = ((($2)) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = ((($9)) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 64|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = $1;
 $14 = ((($13)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = ((($17)) + 68|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ((($20)) + 64|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 68|0);
  HEAP32[$23>>2] = $19;
 }
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = ($25|0)==($26|0);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 64|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $1;
 $36 = ($34|0)==($35|0);
 if (!($36)) {
  $42 = $1;
  $43 = ((($42)) + 64|0);
  HEAP32[$43>>2] = 0;
  $44 = $1;
  $45 = ((($44)) + 68|0);
  HEAP32[$45>>2] = 0;
  STACKTOP = sp;return;
 }
 $37 = $1;
 $38 = ((($37)) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $1;
 $43 = ((($42)) + 64|0);
 HEAP32[$43>>2] = 0;
 $44 = $1;
 $45 = ((($44)) + 68|0);
 HEAP32[$45>>2] = 0;
 STACKTOP = sp;return;
}
function _sym_ext2int($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3&65535) >>> 11;
 $5 = $4 & 1;
 $6 = $5&255;
 $7 = $6&255;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11&65535) >>> 7;
  $13 = $12 & 1;
  $14 = $13&255;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 & -129;
   $21 = $20 | 128;
   HEAP16[$18>>1] = $21;
   $22 = $0;
   _AddPublicData($22);
  }
 }
 $23 = $0;
 _sym_remove_table((15412),$23);
 $24 = $0;
 $25 = ((($24)) + 24|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($26&65535) >>> 11;
 $28 = $27 & 1;
 $29 = $28&255;
 $30 = $29&255;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $34 = $0;
  $35 = ((($34)) + 16|0);
  HEAP32[$35>>2] = 1;
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = ((($32)) + 28|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = ((($34)) + 16|0);
 HEAP32[$35>>2] = 1;
 STACKTOP = sp;return;
}
function _GetLangType($i,$tokenarray,$plang) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $plang = $plang|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $tokenarray;
 $3 = $plang;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(7);
 if ($10) {
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = (($13) + ($12<<4)|0);
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)>=(190);
  if ($17) {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = $2;
   $21 = (($20) + ($19<<4)|0);
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23>>>0)<=(196);
   if ($24) {
    $25 = $1;
    $26 = HEAP32[$25>>2]|0;
    $27 = $2;
    $28 = (($27) + ($26<<4)|0);
    $29 = ((($28)) + 1|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $3;
    HEAP32[$32>>2] = $31;
    $33 = $1;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$33>>2] = $35;
    $0 = 0;
    $36 = $0;
    STACKTOP = sp;return ($36|0);
   }
  }
 }
 $0 = -1;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _SizeFromRegister($registertoken) {
 $registertoken = $registertoken|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $registertoken;
 $2 = $1;
 $3 = (15660 + (($2*12)|0)|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 31;
 $flags = $6;
 $7 = $flags;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $flags;
  $0 = $9;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $10 = $1;
 $11 = (15660 + (($10*12)|0)|0);
 $12 = HEAP32[$11>>2]|0;
 $flags = $12;
 $13 = $flags;
 $14 = $13 & 6144;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP8[(558)>>0]|0;
  $17 = $16&255;
  $0 = $17;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $18 = HEAP8[(556)>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(2);
  $21 = $20 ? 8 : 4;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _SizeFromMemtype($mem_type,$Ofssize,$type) {
 $mem_type = $mem_type|0;
 $Ofssize = $Ofssize|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mem_type;
 $2 = $Ofssize;
 $3 = $type;
 $4 = $1;
 $5 = $4 & 128;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $1;
   $8 = $7 & 31;
   $9 = (($8) + 1)|0;
   $0 = $9;
  } else {
   $10 = $2;
   $11 = ($10|0)==(254);
   if ($11) {
    $12 = HEAP8[(556)>>0]|0;
    $13 = $12&255;
    $2 = $13;
   }
   $14 = $1;
   switch ($14|0) {
   case 129:  {
    $15 = $2;
    $16 = 2 << $15;
    $0 = $16;
    break L1;
    break;
   }
   case 130:  {
    $17 = $2;
    $18 = 2 << $17;
    $19 = (($18) + 2)|0;
    $0 = $19;
    break L1;
    break;
   }
   case 128:  {
    $20 = $2;
    $21 = 2 << $20;
    $22 = $3;
    $23 = ((($22)) + 28|0);
    $24 = ((($23)) + 3|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25&255) >>> 4;
    $27 = $26 & 1;
    $28 = $27&255;
    $29 = ($28|0)!=(0);
    $30 = $29 ? 2 : 0;
    $31 = (($21) + ($30))|0;
    $0 = $31;
    break L1;
    break;
   }
   case 195:  {
    $32 = $2;
    $33 = 2 << $32;
    $34 = HEAP32[(512)>>2]|0;
    $35 = 1 << $34;
    $36 = 104 & $35;
    $37 = ($36|0)!=(0);
    $38 = $37 ? 2 : 0;
    $39 = (($33) + ($38))|0;
    $0 = $39;
    break L1;
    break;
   }
   case 196:  {
    $40 = $3;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $3;
     $43 = ((($42)) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $0 = $44;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $0 = 0;
  }
 } while(0);
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _MemtypeFromSize($size,$ptype) {
 $size = $size|0;
 $ptype = $ptype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $size;
 $2 = $ptype;
 $i = 132;
 while(1) {
  $3 = $i;
  $4 = (15660 + (($3*12)|0)|0);
  $5 = ((($4)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)==(6);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = $i;
  $10 = (15660 + (($9*12)|0)|0);
  $11 = ((($10)) + 10|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & 128;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $i;
   $17 = (15660 + (($16*12)|0)|0);
   $18 = ((($17)) + 10|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $20 & 31;
   $22 = (($21) + 1)|0;
   $23 = $1;
   $24 = ($22|0)==($23|0);
   if ($24) {
    label = 5;
    break;
   }
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 5) {
  $25 = $i;
  $26 = (15660 + (($25*12)|0)|0);
  $27 = ((($26)) + 10|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $2;
  HEAP32[$30>>2] = $29;
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _OperandSize($opnd,$CodeInfo) {
 $opnd = $opnd|0;
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opnd;
 $2 = $CodeInfo;
 $3 = $1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $0 = 0;
  } else {
   $5 = $1;
   $6 = ($5|0)==(-1627389952);
   if ($6) {
    $7 = $2;
    $8 = ((($7)) + 20|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $2;
    $11 = ((($10)) + 98|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = (_SizeFromMemtype($9,$13,0)|0);
    $0 = $14;
    break;
   }
   $15 = $1;
   $16 = $15 & 16842753;
   $17 = ($16|0)!=(0);
   if ($17) {
    $0 = 1;
    break;
   }
   $18 = $1;
   $19 = $18 & 33691650;
   $20 = ($19|0)!=(0);
   if ($20) {
    $0 = 2;
    break;
   }
   $21 = $1;
   $22 = $21 & 67371012;
   $23 = ($22|0)!=(0);
   if ($23) {
    $0 = 4;
    break;
   }
   $24 = $1;
   $25 = $24 & 134742040;
   $26 = ($25|0)!=(0);
   if ($26) {
    $0 = 8;
    break;
   }
   $27 = $1;
   $28 = $27 & 1074790400;
   $29 = ($28|0)!=(0);
   if ($29) {
    $0 = 6;
    break;
   }
   $30 = $1;
   $31 = $30 & -2147459072;
   $32 = ($31|0)!=(0);
   if ($32) {
    $0 = 10;
    break;
   }
   $33 = $1;
   $34 = $33 & 268435488;
   $35 = ($34|0)!=(0);
   if ($35) {
    $0 = 16;
    break;
   }
   $36 = $1;
   $37 = $36 & 536870976;
   $38 = ($37|0)!=(0);
   if ($38) {
    $0 = 32;
    break;
   }
   $39 = $1;
   $40 = $39 & 1024;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $2;
    $43 = ((($42)) + 98|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = ($45|0)==(2);
    $47 = $46 ? 8 : 4;
    $0 = $47;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _set_frame($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = HEAP32[15452>>2]|0;
 $2 = ($1|0)!=(0|0);
 $3 = HEAP32[15452>>2]|0;
 $4 = $0;
 $5 = $2 ? $3 : $4;
 _SetFixupFrame($5,0);
 STACKTOP = sp;return;
}
function _set_frame2($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = HEAP32[15452>>2]|0;
 $2 = ($1|0)!=(0|0);
 $3 = HEAP32[15452>>2]|0;
 $4 = $0;
 $5 = $2 ? $3 : $4;
 _SetFixupFrame($5,1);
 STACKTOP = sp;return;
}
function _segm_override($opndx,$CodeInfo) {
 $opndx = $opndx|0;
 $CodeInfo = $CodeInfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sym = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opndx;
 $2 = $CodeInfo;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)==(2);
   $13 = $1;
   $14 = ((($13)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   if ($12) {
    $16 = ((($15)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (15660 + (($17*12)|0)|0);
    $19 = ((($18)) + 10|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $temp = $21;
    $22 = $temp;
    $23 = (5008 + ($22<<3)|0);
    $24 = ((($23)) + 4|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)!=(0);
    if ($26) {
     $27 = (_EmitError(183)|0);
     $0 = $27;
     $62 = $0;
     STACKTOP = sp;return ($62|0);
    }
    $28 = $2;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = $2;
     $31 = ((($30)) + 98|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = ($33|0)==(2);
     $35 = $temp;
     $36 = ($35|0)<(4);
     $or$cond = $34 & $36;
     if ($or$cond) {
      $37 = (_EmitError(274)|0);
      $0 = $37;
      $62 = $0;
      STACKTOP = sp;return ($62|0);
     }
    }
    $38 = $temp;
    $39 = (_GetOverrideAssume($38)|0);
    $sym = $39;
    $40 = $2;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $2;
     $43 = ((($42)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     HEAP32[15456>>2] = $44;
     $45 = $temp;
     $46 = $2;
     $47 = ((($46)) + 4|0);
     HEAP32[$47>>2] = $45;
    }
   } else {
    $48 = ((($15)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (_SymFind($49)|0);
    $sym = $50;
   }
   $51 = $sym;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $sym;
    $54 = ((($53)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(4);
    if (!($56)) {
     $57 = $sym;
     $58 = ((($57)) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)==(3);
     if (!($60)) {
      break;
     }
    }
    $61 = $sym;
    HEAP32[15452>>2] = $61;
   }
  }
 } while(0);
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _idata_fixup($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ofssize = 0, $fixup_option = 0, $fixup_type = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $size = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 16|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $fixup_option = 0;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>=(373);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<=(422);
  if ($11) {
   $12 = $1;
   $13 = $2;
   $14 = $3;
   $15 = (_process_branch($12,$13,$14)|0);
   $0 = $15;
   $614 = $0;
   STACKTOP = sp;return ($614|0);
  }
 }
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = $1;
 $20 = ((($19)) + 24|0);
 $21 = (($20) + (($18*24)|0)|0);
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $17;
 $23 = $3;
 $24 = ((($23)) + 49|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(254);
 $28 = $3;
 do {
  if ($27) {
   $29 = ((($28)) + 49|0);
   $30 = HEAP8[$29>>0]|0;
   $Ofssize = $30;
  } else {
   $31 = ((($28)) + 56|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(3);
   if (!($35)) {
    $36 = $3;
    $37 = ((($36)) + 56|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(4);
    if (!($41)) {
     $42 = $3;
     $43 = ((($42)) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(170);
     if (!($45)) {
      $46 = $3;
      $47 = ((($46)) + 52|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = ($48&255) >>> 2;
      $50 = $49 & 1;
      $51 = $50&255;
      $52 = ($51|0)!=(0);
      if ($52) {
       $Ofssize = 0;
       break;
      } else {
       $53 = $3;
       $54 = ((($53)) + 56|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (_GetSymOfssize($55)|0);
       $57 = $56&255;
       $Ofssize = $57;
       break;
      }
     }
    }
   }
   $Ofssize = 0;
  }
 } while(0);
 $58 = $3;
 $59 = ((($58)) + 36|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(171);
 if ($61) {
  $62 = (_EmitErr(49,$vararg_buffer)|0);
  $0 = $62;
  $614 = $0;
  STACKTOP = sp;return ($614|0);
 }
 $63 = $3;
 $64 = ((($63)) + 52|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65&255) >>> 1;
 $67 = $66 & 1;
 $68 = $67&255;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $3;
  $71 = ((($70)) + 52|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = ($72&255) >>> 2;
  $74 = $73 & 1;
  $75 = $74&255;
  $76 = ($75|0)!=(0);
  if (!($76)) {
   $77 = $1;
   $78 = ((($77)) + 101|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79 & -9;
   $81 = $80 | 8;
   HEAP8[$78>>0] = $81;
   $82 = $1;
   $83 = ((($82)) + 20|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(192);
   if ($85) {
    $86 = $3;
    $87 = ((($86)) + 44|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $1;
    $90 = ((($89)) + 20|0);
    HEAP32[$90>>2] = $88;
   }
  }
 }
 $91 = $1;
 $92 = ((($91)) + 20|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(192);
 $95 = $2;
 $96 = ($95>>>0)>(0);
 $or$cond = $94 & $96;
 L27: do {
  if ($or$cond) {
   $97 = $3;
   $98 = ((($97)) + 49|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = ($100|0)==(254);
   if ($101) {
    $102 = $1;
    $103 = ((($102)) + 24|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $1;
    $106 = (_OperandSize($104,$105)|0);
    $size = $106;
    $107 = HEAP32[4884>>2]|0;
    $108 = ($107>>>0)>(0);
    L30: do {
     if ($108) {
      $109 = $3;
      $110 = ((($109)) + 36|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ($111|0)!=(-2);
      if ($112) {
       $113 = $3;
       $114 = ((($113)) + 36|0);
       $115 = HEAP32[$114>>2]|0;
       switch ($115|0) {
       case 170:  {
        $116 = $size;
        $117 = ($116|0)!=(0);
        $118 = $size;
        $119 = ($118|0)<(2);
        $or$cond3 = $117 & $119;
        if (!($or$cond3)) {
         break L30;
        }
        $120 = $size;
        HEAP32[$vararg_buffer12>>2] = $120;
        $vararg_ptr14 = ((($vararg_buffer12)) + 4|0);
        HEAP32[$vararg_ptr14>>2] = 2;
        $121 = (_EmitErr(48,$vararg_buffer12)|0);
        $0 = $121;
        $614 = $0;
        STACKTOP = sp;return ($614|0);
        break;
       }
       case 169: case 159: case 165: case 167:  {
        break;
       }
       default: {
        break L30;
       }
       }
       $122 = $size;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $size;
        $125 = ($124|0)<(2);
        if (!($125)) {
         $126 = $Ofssize;
         $127 = $126&255;
         $128 = ($127|0)!=(0);
         $129 = $size;
         $130 = ($129|0)<(4);
         $or$cond5 = $128 & $130;
         if (!($or$cond5)) {
          break;
         }
        }
        $131 = $size;
        $132 = $Ofssize;
        $133 = $132&255;
        $134 = 2 << $133;
        HEAP32[$vararg_buffer15>>2] = $131;
        $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
        HEAP32[$vararg_ptr18>>2] = $134;
        $135 = (_EmitErr(48,$vararg_buffer15)|0);
        $0 = $135;
        $614 = $0;
        STACKTOP = sp;return ($614|0);
       }
      }
     }
    } while(0);
    $136 = $size;
    switch ($136|0) {
    case 1:  {
     $137 = $3;
     $138 = ((($137)) + 52|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = ($139&255) >>> 2;
     $141 = $140 & 1;
     $142 = $141&255;
     $143 = ($142|0)!=(0);
     if (!($143)) {
      $144 = $3;
      $145 = ((($144)) + 36|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==(162);
      if (!($147)) {
       $148 = $3;
       $149 = ((($148)) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($150|0)==(156);
       if (!($151)) {
        break L27;
       }
      }
     }
     $152 = $1;
     $153 = ((($152)) + 20|0);
     HEAP32[$153>>2] = 0;
     break L27;
     break;
    }
    case 2:  {
     $154 = $3;
     $155 = ((($154)) + 52|0);
     $156 = HEAP8[$155>>0]|0;
     $157 = ($156&255) >>> 2;
     $158 = $157 & 1;
     $159 = $158&255;
     $160 = ($159|0)!=(0);
     if (!($160)) {
      $161 = $1;
      $162 = ((($161)) + 98|0);
      $163 = HEAP8[$162>>0]|0;
      $164 = $163&255;
      $165 = ($164|0)==(0);
      if (!($165)) {
       $166 = $3;
       $167 = ((($166)) + 36|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(164);
       if (!($169)) {
        $170 = $3;
        $171 = ((($170)) + 36|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(158);
        if (!($173)) {
         break L27;
        }
       }
      }
     }
     $174 = $1;
     $175 = ((($174)) + 20|0);
     HEAP32[$175>>2] = 1;
     break L27;
     break;
    }
    case 4:  {
     $176 = $1;
     $177 = ((($176)) + 20|0);
     HEAP32[$177>>2] = 3;
     break L27;
     break;
    }
    case 8:  {
     $178 = $Ofssize;
     $179 = $178&255;
     $180 = ($179|0)==(2);
     if (!($180)) {
      break L27;
     }
     $181 = $1;
     $182 = ((($181)) + 16|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)==(524);
     if ($184) {
      $185 = $1;
      $186 = ((($185)) + 24|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = $187 & 8;
      $189 = ($188|0)!=(0);
      if ($189) {
       $190 = $1;
       $191 = ((($190)) + 20|0);
       HEAP32[$191>>2] = 7;
       break L27;
      }
     }
     $192 = $3;
     $193 = ((($192)) + 36|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ($194|0)==(163);
     if (!($195)) {
      $196 = $3;
      $197 = ((($196)) + 36|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = ($198|0)==(157);
      if (!($199)) {
       break L27;
      }
     }
     $200 = $1;
     $201 = ((($200)) + 20|0);
     HEAP32[$201>>2] = 3;
     break L27;
     break;
    }
    default: {
     break L27;
    }
    }
   }
  }
 } while(0);
 $202 = $1;
 $203 = ((($202)) + 20|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($204|0)==(192);
 do {
  if ($205) {
   $206 = $3;
   $207 = ((($206)) + 52|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = ($208&255) >>> 2;
   $210 = $209 & 1;
   $211 = $210&255;
   $212 = ($211|0)!=(0);
   if ($212) {
    $213 = $3;
    $214 = ((($213)) + 44|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)!=(192);
    if ($216) {
     $217 = $3;
     $218 = ((($217)) + 44|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $1;
     $221 = ((($220)) + 20|0);
     HEAP32[$221>>2] = $219;
     break;
    }
    $222 = $1;
    $223 = ((($222)) + 16|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = ($224|0)==(521);
    $226 = $1;
    if ($225) {
     $227 = ((($226)) + 20|0);
     HEAP32[$227>>2] = 1;
     break;
    } else {
     $228 = ((($226)) + 98|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230|0)!=(0);
     $232 = $1;
     $233 = ((($232)) + 9|0);
     $234 = HEAP8[$233>>0]|0;
     $235 = ($234&255) >>> 1;
     $236 = $235 & 1;
     $237 = $236&255;
     $238 = ($237|0)==(0);
     $239 = ($237|0)==(1);
     $$sink = $231 ? $238 : $239;
     $240 = $$sink&1;
     $241 = ($240|0)!=(0);
     $242 = $241 ? 3 : 1;
     $243 = $1;
     $244 = ((($243)) + 20|0);
     HEAP32[$244>>2] = $242;
     break;
    }
   }
   $245 = $1;
   $246 = ((($245)) + 16|0);
   $247 = HEAP32[$246>>2]|0;
   L78: do {
    switch ($247|0) {
    case 519: case 483: case 521:  {
     $248 = $3;
     $249 = ((($248)) + 44|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = ($250|0)==(192);
     L80: do {
      if ($251) {
       $252 = $3;
       $253 = ((($252)) + 36|0);
       $254 = HEAP32[$253>>2]|0;
       switch ($254|0) {
       case 156: case 162: case -2:  {
        $255 = $3;
        $256 = ((($255)) + 44|0);
        HEAP32[$256>>2] = 0;
        break L80;
        break;
       }
       case 169: case 159: case 163:  {
        $257 = $3;
        $258 = ((($257)) + 44|0);
        HEAP32[$258>>2] = 3;
        break L80;
        break;
       }
       default: {
        break L80;
       }
       }
      }
     } while(0);
     $259 = $3;
     $260 = ((($259)) + 44|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = ($261|0)==(130);
     if ($262) {
      $263 = $3;
      $264 = ((($263)) + 52|0);
      $265 = HEAP8[$264>>0]|0;
      $266 = ($265&255) >>> 1;
      $267 = $266 & 1;
      $268 = $267&255;
      $269 = ($268|0)==(0);
      if ($269) {
       $270 = $3;
       $271 = ((($270)) + 44|0);
       HEAP32[$271>>2] = 129;
      }
     }
     $272 = $1;
     $273 = ((($272)) + 16|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ($274|0)==(521);
     if ($275) {
      $276 = $3;
      $277 = ((($276)) + 44|0);
      $278 = HEAP32[$277>>2]|0;
      $279 = $Ofssize;
      $280 = $279&255;
      $281 = $3;
      $282 = ((($281)) + 64|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = (_SizeFromMemtype($278,$280,$283)|0);
      $285 = ($284|0)<(2);
      if (!($285)) {
       break L78;
      }
      $286 = $3;
      $287 = ((($286)) + 44|0);
      HEAP32[$287>>2] = 1;
      break L78;
     }
     $288 = $1;
     $289 = ((($288)) + 16|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = ($290|0)==(483);
     if ($291) {
      $292 = $3;
      $293 = ((($292)) + 44|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = $Ofssize;
      $296 = $295&255;
      $297 = $3;
      $298 = ((($297)) + 64|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (_SizeFromMemtype($294,$296,$299)|0);
      $301 = ($300|0)<(4);
      if ($301) {
       $302 = $3;
       $303 = ((($302)) + 44|0);
       HEAP32[$303>>2] = 3;
      }
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $304 = $3;
   $305 = ((($304)) + 44|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)!=(192);
   $308 = $3;
   if ($307) {
    $309 = ((($308)) + 44|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = $1;
    $312 = ((($311)) + 20|0);
    HEAP32[$312>>2] = $310;
    break;
   }
   $313 = ((($308)) + 56|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ((($314)) + 16|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = ($316|0)==(0);
   if ($317) {
    $318 = $1;
    $319 = ((($318)) + 20|0);
    HEAP32[$319>>2] = 0;
    $fixup_option = 5;
    break;
   }
   $320 = $Ofssize;
   $321 = $320&255;
   $322 = ($321|0)==(2);
   if ($322) {
    $329 = 7;
   } else {
    $323 = $Ofssize;
    $324 = $323&255;
    $325 = ($324|0)==(1);
    $326 = $325 ? 3 : 1;
    $329 = $326;
   }
   $327 = $1;
   $328 = ((($327)) + 20|0);
   HEAP32[$328>>2] = $329;
  }
 } while(0);
 $330 = $1;
 $331 = ((($330)) + 20|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = $Ofssize;
 $334 = $333&255;
 $335 = (_SizeFromMemtype($332,$334,0)|0);
 $size = $335;
 $336 = $size;
 switch ($336|0) {
 case 1:  {
  $337 = $2;
  $338 = $1;
  $339 = ((($338)) + 24|0);
  $340 = (($339) + (($337*24)|0)|0);
  HEAP32[$340>>2] = 65536;
  $341 = $1;
  $342 = ((($341)) + 9|0);
  $343 = HEAP8[$342>>0]|0;
  $344 = $343 & -3;
  HEAP8[$342>>0] = $344;
  break;
 }
 case 2:  {
  $345 = $2;
  $346 = $1;
  $347 = ((($346)) + 24|0);
  $348 = (($347) + (($345*24)|0)|0);
  HEAP32[$348>>2] = 131072;
  $349 = $1;
  $350 = ((($349)) + 98|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $351&255;
  $353 = ($352|0)!=(0);
  $354 = $353 ? 1 : 0;
  $355 = $354&255;
  $356 = $1;
  $357 = ((($356)) + 9|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = $355 & 1;
  $360 = ($359 << 1)&255;
  $361 = $358 & -3;
  $362 = $361 | $360;
  HEAP8[$357>>0] = $362;
  break;
 }
 case 4:  {
  $363 = $2;
  $364 = $1;
  $365 = ((($364)) + 24|0);
  $366 = (($365) + (($363*24)|0)|0);
  HEAP32[$366>>2] = 262144;
  $367 = $1;
  $368 = ((($367)) + 98|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = $369&255;
  $371 = ($370|0)!=(0);
  $372 = $371 ? 0 : 1;
  $373 = $372&255;
  $374 = $1;
  $375 = ((($374)) + 9|0);
  $376 = HEAP8[$375>>0]|0;
  $377 = $373 & 1;
  $378 = ($377 << 1)&255;
  $379 = $376 & -3;
  $380 = $379 | $378;
  HEAP8[$375>>0] = $380;
  break;
 }
 case 8:  {
  $381 = $3;
  $382 = $381;
  $383 = $382;
  $384 = HEAP32[$383>>2]|0;
  $385 = (($382) + 4)|0;
  $386 = $385;
  $387 = HEAP32[$386>>2]|0;
  $388 = ($387|0)>(0);
  $389 = ($384>>>0)>(2147483647);
  $390 = ($387|0)==(0);
  $391 = $390 & $389;
  $392 = $388 | $391;
  L112: do {
   if ($392) {
    label = 84;
   } else {
    $393 = $3;
    $394 = $393;
    $395 = $394;
    $396 = HEAP32[$395>>2]|0;
    $397 = (($394) + 4)|0;
    $398 = $397;
    $399 = HEAP32[$398>>2]|0;
    $400 = ($399|0)<(-1);
    $401 = ($396>>>0)<(2147483648);
    $402 = ($399|0)==(-1);
    $403 = $402 & $401;
    $404 = $400 | $403;
    if ($404) {
     label = 84;
    } else {
     $405 = $3;
     $406 = ((($405)) + 52|0);
     $407 = HEAP8[$406>>0]|0;
     $408 = ($407&255) >>> 1;
     $409 = $408 & 1;
     $410 = $409&255;
     $411 = ($410|0)!=(0);
     if ($411) {
      $412 = $3;
      $413 = ((($412)) + 44|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = $414 & 31;
      $416 = ($415|0)==(7);
      if ($416) {
       label = 84;
       break;
      }
     }
     $430 = $Ofssize;
     $431 = $430&255;
     $432 = ($431|0)==(2);
     do {
      if ($432) {
       $433 = $3;
       $434 = ((($433)) + 36|0);
       $435 = HEAP32[$434>>2]|0;
       $436 = ($435|0)==(167);
       if (!($436)) {
        $437 = $1;
        $438 = ((($437)) + 16|0);
        $439 = HEAP32[$438>>2]|0;
        $440 = ($439|0)==(524);
        if (!($440)) {
         break;
        }
        $441 = $1;
        $442 = ((($441)) + 24|0);
        $443 = HEAP32[$442>>2]|0;
        $444 = $443 & 8;
        $445 = ($444|0)!=(0);
        if (!($445)) {
         break;
        }
       }
       $446 = $2;
       $447 = $1;
       $448 = ((($447)) + 24|0);
       $449 = (($448) + (($446*24)|0)|0);
       HEAP32[$449>>2] = 524288;
       $450 = $3;
       $451 = ((($450)) + 4|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = $2;
       $454 = $1;
       $455 = ((($454)) + 24|0);
       $456 = (($455) + (($453*24)|0)|0);
       $457 = ((($456)) + 8|0);
       $458 = ((($457)) + 4|0);
       HEAP32[$458>>2] = $452;
       break L112;
      }
     } while(0);
     $459 = $2;
     $460 = $1;
     $461 = ((($460)) + 24|0);
     $462 = (($461) + (($459*24)|0)|0);
     HEAP32[$462>>2] = 262144;
    }
   }
  } while(0);
  if ((label|0) == 84) {
   $417 = $2;
   $418 = $1;
   $419 = ((($418)) + 24|0);
   $420 = (($419) + (($417*24)|0)|0);
   HEAP32[$420>>2] = 524288;
   $421 = $3;
   $422 = ((($421)) + 4|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = $2;
   $425 = $1;
   $426 = ((($425)) + 24|0);
   $427 = (($426) + (($424*24)|0)|0);
   $428 = ((($427)) + 8|0);
   $429 = ((($428)) + 4|0);
   HEAP32[$429>>2] = $423;
  }
  $463 = $1;
  $464 = ((($463)) + 98|0);
  $465 = HEAP8[$464>>0]|0;
  $466 = $465&255;
  $467 = ($466|0)!=(0);
  $468 = $467 ? 0 : 1;
  $469 = $468&255;
  $470 = $1;
  $471 = ((($470)) + 9|0);
  $472 = HEAP8[$471>>0]|0;
  $473 = $469 & 1;
  $474 = ($473 << 1)&255;
  $475 = $472 & -3;
  $476 = $475 | $474;
  HEAP8[$471>>0] = $476;
  break;
 }
 default: {
 }
 }
 $477 = $3;
 $478 = ((($477)) + 36|0);
 $479 = HEAP32[$478>>2]|0;
 $480 = ($479|0)==(170);
 L129: do {
  if ($480) {
   $fixup_type = 8;
  } else {
   $481 = $1;
   $482 = ((($481)) + 20|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = ($483|0)==(0);
   if ($484) {
    $485 = $3;
    $486 = ((($485)) + 36|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = ($487|0)==(156);
    if ($488) {
     $fixup_type = 11;
     break;
    } else {
     $fixup_type = 4;
     break;
    }
   }
   $489 = $1;
   $490 = ((($489)) + 98|0);
   $491 = HEAP8[$490>>0]|0;
   $492 = $491&255;
   $493 = ($492|0)!=(0);
   $494 = $1;
   $495 = ((($494)) + 9|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = ($496&255) >>> 1;
   $498 = $497 & 1;
   $499 = $498&255;
   if ($493) {
    $500 = ($499|0)==(0);
    if (!($500)) {
     label = 113;
    }
   } else {
    $501 = ($499|0)==(1);
    if (!($501)) {
     label = 113;
    }
   }
   if ((label|0) == 113) {
    $fixup_type = 5;
    break;
   }
   $502 = $2;
   $503 = $1;
   $504 = ((($503)) + 24|0);
   $505 = (($504) + (($502*24)|0)|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = ($506|0)==(524288);
   do {
    if ($507) {
     $508 = $3;
     $509 = ((($508)) + 36|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = ($510|0)==(-2);
     if (!($511)) {
      $512 = $3;
      $513 = ((($512)) + 36|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = ($514|0)==(167);
      if (!($515)) {
       break;
      }
     }
     $fixup_type = 7;
     break L129;
    }
   } while(0);
   $516 = $size;
   $517 = ($516|0)>=(4);
   if ($517) {
    $518 = $3;
    $519 = ((($518)) + 36|0);
    $520 = HEAP32[$519>>2]|0;
    $521 = ($520|0)!=(164);
    if ($521) {
     $522 = $3;
     $523 = ((($522)) + 52|0);
     $524 = HEAP8[$523>>0]|0;
     $525 = ($524&255) >>> 1;
     $526 = $525 & 1;
     $527 = $526&255;
     $528 = ($527|0)!=(0);
     if ($528) {
      $529 = $Ofssize;
      $530 = $529&255;
      $531 = ($530|0)==(0);
      if ($531) {
       $532 = $3;
       $533 = ((($532)) + 44|0);
       $534 = HEAP32[$533>>2]|0;
       $535 = ($534|0)==(130);
       if ($535) {
        $fixup_type = 9;
        break;
       }
      }
     }
     $fixup_type = 6;
     break;
    }
   }
   $fixup_type = 5;
  }
 } while(0);
 $536 = $2;
 $537 = ($536|0)==(1);
 $538 = $size;
 $539 = ($538|0)!=(1);
 $or$cond7 = $537 & $539;
 if ($or$cond7) {
  $540 = $1;
  $541 = ((($540)) + 101|0);
  $542 = HEAP8[$541>>0]|0;
  $543 = $542 & -2;
  $544 = $543 | 1;
  HEAP8[$541>>0] = $544;
 }
 $545 = $3;
 (_segm_override($545,0)|0);
 $546 = HEAP32[(536)>>2]|0;
 $547 = ($546|0)==(2);
 do {
  if ($547) {
   $548 = $3;
   $549 = ((($548)) + 36|0);
   $550 = HEAP32[$549>>2]|0;
   $551 = ($550|0)==(167);
   if (!($551)) {
    $552 = $3;
    $553 = ((($552)) + 36|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ($554|0)==(170);
    if (!($555)) {
     label = 120;
     break;
    }
   }
   $556 = $3;
   $557 = ((($556)) + 56|0);
   $558 = HEAP32[$557>>2]|0;
   _set_frame2($558);
  } else {
   label = 120;
  }
 } while(0);
 if ((label|0) == 120) {
  $559 = $3;
  $560 = ((($559)) + 56|0);
  $561 = HEAP32[$560>>2]|0;
  _set_frame($561);
 }
 $562 = $3;
 $563 = ((($562)) + 56|0);
 $564 = HEAP32[$563>>2]|0;
 $565 = $fixup_type;
 $566 = $fixup_option;
 $567 = (_CreateFixup($564,$565,$566)|0);
 $568 = $2;
 $569 = $1;
 $570 = ((($569)) + 24|0);
 $571 = (($570) + (($568*24)|0)|0);
 $572 = ((($571)) + 16|0);
 HEAP32[$572>>2] = $567;
 $573 = $3;
 $574 = ((($573)) + 36|0);
 $575 = HEAP32[$574>>2]|0;
 $576 = ($575|0)==(165);
 if ($576) {
  $577 = $2;
  $578 = $1;
  $579 = ((($578)) + 24|0);
  $580 = (($579) + (($577*24)|0)|0);
  $581 = ((($580)) + 16|0);
  $582 = HEAP32[$581>>2]|0;
  $583 = ((($582)) + 24|0);
  $584 = ((($583)) + 1|0);
  $585 = HEAP8[$584>>0]|0;
  $586 = $585 & -2;
  $587 = $586 | 1;
  HEAP8[$584>>0] = $587;
 }
 $588 = $3;
 $589 = ((($588)) + 36|0);
 $590 = HEAP32[$589>>2]|0;
 $591 = ($590|0)==(159);
 $592 = $fixup_type;
 $593 = ($592|0)==(6);
 $or$cond9 = $591 & $593;
 if ($or$cond9) {
  $594 = $2;
  $595 = $1;
  $596 = ((($595)) + 24|0);
  $597 = (($596) + (($594*24)|0)|0);
  $598 = ((($597)) + 16|0);
  $599 = HEAP32[$598>>2]|0;
  $600 = ((($599)) + 16|0);
  HEAP32[$600>>2] = 12;
 }
 $601 = $3;
 $602 = ((($601)) + 36|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = ($603|0)==(169);
 $605 = $fixup_type;
 $606 = ($605|0)==(6);
 $or$cond11 = $604 & $606;
 if ($or$cond11) {
  $607 = $2;
  $608 = $1;
  $609 = ((($608)) + 24|0);
  $610 = (($609) + (($607*24)|0)|0);
  $611 = ((($610)) + 16|0);
  $612 = HEAP32[$611>>2]|0;
  $613 = ((($612)) + 16|0);
  HEAP32[$613>>2] = 13;
 }
 $0 = 0;
 $614 = $0;
 STACKTOP = sp;return ($614|0);
}
function _ParseLine($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CodeInfo = 0, $CurrOpnd = 0, $dirflags = 0, $flags = 0, $i = 0, $j = 0, $oldofs = 0, $opndx = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $sym = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer32 = sp + 464|0;
 $vararg_buffer29 = sp + 456|0;
 $vararg_buffer27 = sp + 448|0;
 $vararg_buffer25 = sp + 440|0;
 $vararg_buffer22 = sp + 432|0;
 $vararg_buffer19 = sp + 424|0;
 $vararg_buffer16 = sp + 416|0;
 $vararg_buffer13 = sp + 408|0;
 $vararg_buffer10 = sp + 400|0;
 $vararg_buffer = sp + 392|0;
 $i = sp + 496|0;
 $CodeInfo = sp + 288|0;
 $opndx = sp;
 $1 = $tokenarray;
 HEAP32[$i>>2] = 0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(8);
 do {
  if ($5) {
   $6 = $1;
   $7 = ((($6)) + 16|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = ($9|0)==(58);
   if (!($10)) {
    $11 = $1;
    $12 = ((($11)) + 16|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = ($14|0)==(13);
    if (!($15)) {
     break;
    }
   }
   HEAP32[$i>>2] = 2;
   $16 = HEAP32[15484>>2]|0;
   $17 = $16 & 128;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $1;
    _write_prologue($19);
   }
   $20 = $1;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[(560)>>2]|0;
   $24 = $23 >>> 7;
   $25 = $24 & 1;
   $26 = ($25|0)!=(0);
   $27 = HEAP32[15488>>2]|0;
   $28 = ($27|0)!=(0|0);
   $or$cond = $26 & $28;
   if ($or$cond) {
    $29 = $1;
    $30 = ((($29)) + 16|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)!=(13);
    $35 = $33;
   } else {
    $35 = 0;
   }
   $34 = $35&1;
   $36 = $34&255;
   $37 = (_CreateLabel($22,129,0,$36)|0);
   $38 = ($37|0)==(0|0);
   if ($38) {
    $0 = -1;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
   $39 = HEAP32[$i>>2]|0;
   $40 = $1;
   $41 = (($40) + ($39<<4)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[4884>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $47 = HEAP32[(600)>>2]|0;
     _StoreLine($47,0,0);
    }
    $48 = HEAP32[(380)>>2]|0;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     _LstWrite(7,0,0);
    }
    $0 = 0;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
  }
 } while(0);
 $50 = HEAP32[$i>>2]|0;
 $51 = $1;
 $52 = (($51) + ($50<<4)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($54|0)!=(1);
 if ($55) {
  HEAP8[87037>>0] = 6;
  HEAP32[15452>>2] = 0;
  $56 = HEAP32[$i>>2]|0;
  $57 = ($56|0)==(0);
  do {
   if ($57) {
    $58 = $1;
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = ($60|0)==(8);
    if ($61) {
     $62 = $1;
     $63 = ((($62)) + 16|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = ($65|0)==(3);
     if ($66) {
      $67 = HEAP32[$i>>2]|0;
      $68 = (($67) + 1)|0;
      HEAP32[$i>>2] = $68;
      break;
     }
     $69 = $1;
     $70 = ((($69)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (_IsType($71)|0);
     $sym = $72;
     $73 = $sym;
     $74 = ($73|0)==(0|0);
     if ($74) {
      $75 = HEAP32[$i>>2]|0;
      $76 = (($75) + 1)|0;
      HEAP32[$i>>2] = $76;
      break;
     }
     $77 = HEAP32[66812>>2]|0;
     $78 = ($77|0)!=(0|0);
     if ($78) {
      $79 = $1;
      $80 = ((($79)) + 16|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $83 = ($82|0)==(6);
      if (!($83)) {
       $84 = $1;
       $85 = ((($84)) + 16|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = $86&255;
       $88 = ($87|0)==(8);
       if (!($88)) {
        break;
       }
       $89 = $1;
       $90 = ((($89)) + 16|0);
       $91 = ((($90)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (_IsType($92)|0);
       $94 = ($93|0)!=(0|0);
       if (!($94)) {
        break;
       }
      }
      $95 = HEAP32[$i>>2]|0;
      $96 = (($95) + 1)|0;
      HEAP32[$i>>2] = $96;
     }
    }
   }
  } while(0);
  $97 = HEAP32[$i>>2]|0;
  $98 = $1;
  $99 = (($98) + ($97<<4)|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  switch ($101|0) {
  case 3:  {
   $102 = HEAP32[$i>>2]|0;
   $103 = $1;
   $104 = (($103) + ($102<<4)|0);
   $105 = ((($104)) + 1|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = ($107|0)==(8);
   $109 = HEAP32[$i>>2]|0;
   $110 = $1;
   if ($108) {
    $111 = (_data_dir($109,$110,0)|0);
    $0 = $111;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
   $112 = (($110) + ($109<<4)|0);
   $113 = ((($112)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (15660 + (($114*12)|0)|0);
   $116 = HEAP32[$115>>2]|0;
   $dirflags = $116;
   $117 = HEAP32[66812>>2]|0;
   $118 = ($117|0)!=(0|0);
   if ($118) {
    $119 = $dirflags;
    $120 = $119 & 16;
    $121 = ($120|0)!=(0);
    if ($121) {
     $122 = (_EmitError(141)|0);
     $0 = $122;
     $907 = $0;
     STACKTOP = sp;return ($907|0);
    }
   }
   $123 = $dirflags;
   $124 = $123 & 8;
   $125 = ($124|0)!=(0);
   $126 = HEAP32[$i>>2]|0;
   $127 = ($126|0)!=(0);
   if ($125) {
    if ($127) {
     $128 = $1;
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = ($130|0)!=(8);
     if ($131) {
      $132 = $1;
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      HEAP32[$vararg_buffer>>2] = $134;
      $135 = (_EmitErr(209,$vararg_buffer)|0);
      $0 = $135;
      $907 = $0;
      STACKTOP = sp;return ($907|0);
     }
    }
   } else {
    if ($127) {
     $136 = HEAP32[$i>>2]|0;
     $137 = (($136) - 1)|0;
     $138 = $1;
     $139 = (($138) + ($137<<4)|0);
     $140 = HEAP8[$139>>0]|0;
     $141 = $140&255;
     $142 = ($141|0)!=(58);
     if ($142) {
      $143 = HEAP32[$i>>2]|0;
      $144 = (($143) - 1)|0;
      $145 = $1;
      $146 = (($145) + ($144<<4)|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147&255;
      $149 = ($148|0)!=(13);
      if ($149) {
       $150 = HEAP32[$i>>2]|0;
       $151 = (($150) - 1)|0;
       $152 = $1;
       $153 = (($152) + ($151<<4)|0);
       $154 = ((($153)) + 4|0);
       $155 = HEAP32[$154>>2]|0;
       HEAP32[$vararg_buffer10>>2] = $155;
       $156 = (_EmitErr(209,$vararg_buffer10)|0);
       $0 = $156;
       $907 = $0;
       STACKTOP = sp;return ($907|0);
      }
     }
    }
   }
   $157 = HEAP32[15484>>2]|0;
   $158 = $157 & 128;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $dirflags;
    $161 = $160 & 64;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = $1;
     _write_prologue($163);
    }
   }
   $164 = HEAP8[87035>>0]|0;
   $165 = $164&255;
   $166 = ($165|0)!=(0);
   if ($166) {
    label = 47;
   } else {
    $167 = $dirflags;
    $168 = $167 & 128;
    $169 = ($168|0)!=(0);
    if ($169) {
     label = 47;
    }
   }
   do {
    if ((label|0) == 47) {
     $170 = $dirflags;
     $171 = $170 & 256;
     $172 = ($171|0)!=(0);
     $173 = HEAP32[(604)>>2]|0;
     $174 = ($173|0)!=(0|0);
     $or$cond3 = $172 & $174;
     if ($or$cond3) {
      $175 = HEAP32[(560)>>2]|0;
      $176 = $175 >>> 14;
      $177 = $176 & 1;
      $178 = ($177|0)!=(0);
      if ($178) {
       $179 = HEAP32[4884>>2]|0;
       $180 = ($179|0)==(0);
       if (!($180)) {
        break;
       }
       $181 = HEAP32[(600)>>2]|0;
       _StoreLine($181,1,0);
       break;
      }
     }
     $182 = HEAP32[4884>>2]|0;
     $183 = ($182|0)==(0);
     if ($183) {
      $184 = HEAP32[(600)>>2]|0;
      _StoreLine($184,0,0);
     }
    }
   } while(0);
   $185 = HEAP32[$i>>2]|0;
   $186 = $1;
   $187 = (($186) + ($185<<4)|0);
   $188 = ((($187)) + 1|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = ($190|0)>(8);
   L82: do {
    if ($191) {
     $192 = HEAP32[$i>>2]|0;
     $193 = $1;
     $194 = (($193) + ($192<<4)|0);
     $195 = ((($194)) + 1|0);
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = (8468 + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = HEAP32[$i>>2]|0;
     $201 = $1;
     $202 = (FUNCTION_TABLE_iii[$199 & 255]($200,$201)|0);
     $temp = $202;
    } else {
     $temp = -1;
     $203 = HEAP32[$i>>2]|0;
     $204 = $1;
     $205 = (($204) + ($203<<4)|0);
     $206 = ((($205)) + 8|0);
     $207 = HEAP32[$206>>2]|0;
     switch ($207|0) {
     case 318:  {
      (_EmitError(162)|0);
      break L82;
      break;
     }
     case 319: case 317:  {
      (_EmitError(178)|0);
      break L82;
      break;
     }
     default: {
      $208 = HEAP32[$i>>2]|0;
      $209 = $1;
      $210 = (($209) + ($208<<4)|0);
      $211 = ((($210)) + 4|0);
      $212 = HEAP32[$211>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $212;
      (_EmitErr(209,$vararg_buffer13)|0);
      break L82;
     }
     }
    }
   } while(0);
   $213 = HEAP32[(560)>>2]|0;
   $214 = $213 >>> 11;
   $215 = $214 & 1;
   $216 = ($215|0)!=(0);
   do {
    if ($216) {
     $217 = HEAP32[4884>>2]|0;
     $218 = ($217|0)==(0);
     $219 = HEAP32[(596)>>2]|0;
     $220 = ($219|0)!=(0);
     $or$cond5 = $218 | $220;
     if (!($or$cond5)) {
      $221 = HEAP8[87036>>0]|0;
      $222 = $221&255;
      $223 = ($222|0)==(0);
      if (!($223)) {
       break;
      }
     }
     _LstWriteSrcLine();
    }
   } while(0);
   $224 = $temp;
   $0 = $224;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
   break;
  }
  case 6:  {
   $225 = HEAP32[$i>>2]|0;
   $226 = $1;
   $227 = (_data_dir($225,$226,0)|0);
   $0 = $227;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
   break;
  }
  case 8:  {
   $228 = HEAP32[$i>>2]|0;
   $229 = $1;
   $230 = (($229) + ($228<<4)|0);
   $231 = ((($230)) + 4|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = (_IsType($232)|0);
   $sym = $233;
   $234 = ($233|0)!=(0|0);
   if ($234) {
    $235 = HEAP32[$i>>2]|0;
    $236 = $1;
    $237 = $sym;
    $238 = (_data_dir($235,$236,$237)|0);
    $0 = $238;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
   break;
  }
  default: {
   $239 = HEAP32[$i>>2]|0;
   $240 = $1;
   $241 = (($240) + ($239<<4)|0);
   $242 = HEAP8[$241>>0]|0;
   $243 = $242&255;
   $244 = ($243|0)==(58);
   if ($244) {
    $245 = (_EmitError(47)|0);
    $0 = $245;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
  }
  }
  $246 = HEAP32[$i>>2]|0;
  $247 = ($246|0)!=(0);
  if ($247) {
   $248 = HEAP32[$i>>2]|0;
   $249 = (($248) - 1)|0;
   $250 = $1;
   $251 = (($250) + ($249<<4)|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = ($253|0)==(8);
   if ($254) {
    $255 = HEAP32[$i>>2]|0;
    $256 = (($255) + -1)|0;
    HEAP32[$i>>2] = $256;
   }
  }
  $257 = HEAP32[$i>>2]|0;
  $258 = $1;
  $259 = (($258) + ($257<<4)|0);
  $260 = ((($259)) + 4|0);
  $261 = HEAP32[$260>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $261;
  $262 = (_EmitErr(209,$vararg_buffer16)|0);
  $0 = $262;
  $907 = $0;
  STACKTOP = sp;return ($907|0);
 }
 $263 = HEAP32[66812>>2]|0;
 $264 = ($263|0)!=(0|0);
 if ($264) {
  $265 = (_EmitError(141)|0);
  $0 = $265;
  $907 = $0;
  STACKTOP = sp;return ($907|0);
 }
 $266 = HEAP32[15484>>2]|0;
 $267 = $266 & 128;
 $268 = ($267|0)!=(0);
 if ($268) {
  $269 = $1;
  _write_prologue($269);
 }
 $270 = HEAP32[(380)>>2]|0;
 $271 = ($270|0)!=(0|0);
 if ($271) {
  $272 = (_GetCurrOffset()|0);
  $oldofs = $272;
 }
 HEAP32[$CodeInfo>>2] = -2;
 $273 = ((($CodeInfo)) + 4|0);
 HEAP32[$273>>2] = -2;
 $274 = ((($CodeInfo)) + 8|0);
 HEAP8[$274>>0] = 0;
 $275 = ((($CodeInfo)) + 9|0);
 $276 = HEAP8[$275>>0]|0;
 $277 = $276 & -2;
 HEAP8[$275>>0] = $277;
 $278 = ((($CodeInfo)) + 9|0);
 $279 = HEAP8[$278>>0]|0;
 $280 = $279 & -3;
 HEAP8[$278>>0] = $280;
 $281 = ((($CodeInfo)) + 20|0);
 HEAP32[$281>>2] = 192;
 $j = 0;
 while(1) {
  $282 = $j;
  $283 = ($282|0)<(3);
  if (!($283)) {
   break;
  }
  $284 = $j;
  $285 = ((($CodeInfo)) + 24|0);
  $286 = (($285) + (($284*24)|0)|0);
  HEAP32[$286>>2] = 0;
  $287 = $j;
  $288 = (($287) + 1)|0;
  $j = $288;
 }
 $289 = ((($CodeInfo)) + 96|0);
 HEAP8[$289>>0] = 0;
 $290 = ((($CodeInfo)) + 97|0);
 HEAP8[$290>>0] = 0;
 $291 = HEAP8[(556)>>0]|0;
 $292 = ((($CodeInfo)) + 98|0);
 HEAP8[$292>>0] = $291;
 $293 = ((($CodeInfo)) + 99|0);
 HEAP8[$293>>0] = 0;
 $294 = ((($CodeInfo)) + 100|0);
 HEAP8[$294>>0] = 0;
 $295 = ((($CodeInfo)) + 101|0);
 HEAP8[$295>>0] = 0;
 $296 = HEAP32[$i>>2]|0;
 $297 = $1;
 $298 = (($297) + ($296<<4)|0);
 $299 = ((($298)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = ($300>>>0)>=(500);
 if ($301) {
  $302 = HEAP32[$i>>2]|0;
  $303 = $1;
  $304 = (($303) + ($302<<4)|0);
  $305 = ((($304)) + 8|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = ($306>>>0)<=(505);
  if ($307) {
   $308 = HEAP32[$i>>2]|0;
   $309 = $1;
   $310 = (($309) + ($308<<4)|0);
   $311 = ((($310)) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   HEAP32[$CodeInfo>>2] = $312;
   $313 = HEAP32[$i>>2]|0;
   $314 = (($313) + 1)|0;
   HEAP32[$i>>2] = $314;
   $315 = HEAP32[$i>>2]|0;
   $316 = $1;
   $317 = (($316) + ($315<<4)|0);
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = ($319|0)!=(1);
   if ($320) {
    $321 = (_EmitError(46)|0);
    $0 = $321;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
  }
 }
 $322 = HEAP32[15488>>2]|0;
 $323 = ($322|0)!=(0|0);
 L129: do {
  if ($323) {
   $324 = HEAP32[$i>>2]|0;
   $325 = $1;
   $326 = (($325) + ($324<<4)|0);
   $327 = ((($326)) + 8|0);
   $328 = HEAP32[$327>>2]|0;
   switch ($328|0) {
   case 1030: case 546: case 545: case 567:  {
    break;
   }
   default: {
    break L129;
   }
   }
   $329 = HEAP32[15484>>2]|0;
   $330 = $329 & 2;
   $331 = ($330|0)!=(0);
   if (!($331)) {
    $332 = HEAP8[(577)>>0]|0;
    $333 = $332&255;
    $334 = ($333|0)!=(2);
    if ($334) {
     $335 = HEAP32[4884>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $337 = HEAP32[(600)>>2]|0;
      $338 = HEAP32[(604)>>2]|0;
      $339 = ($338|0)!=(0|0);
      if ($339) {
       $340 = HEAP32[(560)>>2]|0;
       $341 = $340 >>> 14;
       $342 = $341 & 1;
       $343 = ($342|0)!=(0);
       $345 = $343;
      } else {
       $345 = 0;
      }
      $344 = $345 ? 1 : 0;
      _StoreLine($337,$344,0);
     }
     $346 = HEAP32[15484>>2]|0;
     $347 = $346 | 2;
     HEAP32[15484>>2] = $347;
     $348 = HEAP32[$i>>2]|0;
     $349 = $1;
     $350 = HEAP32[(616)>>2]|0;
     $351 = (_RetInstr($348,$349,$350)|0);
     $temp = $351;
     $352 = HEAP32[15484>>2]|0;
     $353 = $352 & -3;
     HEAP32[15484>>2] = $353;
     $354 = $temp;
     $0 = $354;
     $907 = $0;
     STACKTOP = sp;return ($907|0);
    }
   }
   $355 = HEAP32[$i>>2]|0;
   $356 = $1;
   $357 = (($356) + ($355<<4)|0);
   $358 = ((($357)) + 8|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = ($359|0)==(567);
   if ($360) {
    $361 = HEAP32[15488>>2]|0;
    $362 = ((($361)) + 20|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = ($363|0)==(130);
    if ($364) {
     $365 = HEAP32[$i>>2]|0;
     $366 = $1;
     $367 = (($366) + ($365<<4)|0);
     $368 = ((($367)) + 8|0);
     HEAP32[$368>>2] = 569;
    }
   }
  }
 } while(0);
 $369 = HEAP32[4884>>2]|0;
 $370 = ($369|0)==(0);
 if ($370) {
  $371 = HEAP32[(600)>>2]|0;
  _StoreLine($371,0,0);
 }
 $372 = HEAP32[$i>>2]|0;
 $373 = $1;
 $374 = (($373) + ($372<<4)|0);
 $375 = ((($374)) + 8|0);
 $376 = HEAP32[$375>>2]|0;
 $377 = ((($CodeInfo)) + 16|0);
 HEAP32[$377>>2] = $376;
 $378 = ((($CodeInfo)) + 16|0);
 $379 = HEAP32[$378>>2]|0;
 $380 = (($379) - 373)|0;
 $381 = (77956 + ($380<<1)|0);
 $382 = HEAP16[$381>>1]|0;
 $383 = $382&65535;
 $384 = (68332 + ($383<<3)|0);
 $385 = ((($CodeInfo)) + 12|0);
 HEAP32[$385>>2] = $384;
 $386 = HEAP32[$i>>2]|0;
 $387 = (($386) + 1)|0;
 HEAP32[$i>>2] = $387;
 $388 = HEAP32[(584)>>2]|0;
 $389 = ($388|0)==(0|0);
 if ($389) {
  $390 = (_EmitError(82)|0);
  $0 = $390;
  $907 = $0;
  STACKTOP = sp;return ($907|0);
 }
 $391 = HEAP32[(584)>>2]|0;
 $392 = ((($391)) + 60|0);
 $393 = HEAP32[$392>>2]|0;
 $394 = ((($393)) + 44|0);
 $395 = HEAP32[$394>>2]|0;
 $396 = ($395|0)==(0);
 if ($396) {
  $397 = HEAP32[(584)>>2]|0;
  $398 = ((($397)) + 60|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = ((($399)) + 44|0);
  HEAP32[$400>>2] = 1;
 }
 $401 = HEAP8[(575)>>0]|0;
 $402 = ($401<<24>>24)!=(0);
 if ($402) {
  _omf_OutSelect(0);
 }
 $j = 0;
 L159: while(1) {
  $403 = $j;
  $404 = ($403>>>0)<(4);
  if (!($404)) {
   label = 125;
   break;
  }
  $405 = HEAP32[$i>>2]|0;
  $406 = $1;
  $407 = (($406) + ($405<<4)|0);
  $408 = HEAP8[$407>>0]|0;
  $409 = $408&255;
  $410 = ($409|0)!=(0);
  if (!($410)) {
   label = 125;
   break;
  }
  $411 = $j;
  $412 = ($411|0)!=(0);
  if ($412) {
   $413 = HEAP32[$i>>2]|0;
   $414 = $1;
   $415 = (($414) + ($413<<4)|0);
   $416 = HEAP8[$415>>0]|0;
   $417 = $416&255;
   $418 = ($417|0)!=(44);
   if ($418) {
    label = 125;
    break;
   }
   $419 = HEAP32[$i>>2]|0;
   $420 = (($419) + 1)|0;
   HEAP32[$i>>2] = $420;
  }
  $421 = $1;
  $422 = HEAP32[(616)>>2]|0;
  $423 = $j;
  $424 = (($opndx) + (($423*72)|0)|0);
  $425 = (_EvalOperand($i,$421,$422,$424,0)|0);
  $426 = ($425|0)==(-1);
  if ($426) {
   label = 113;
   break;
  }
  $427 = $j;
  $428 = (($opndx) + (($427*72)|0)|0);
  $429 = ((($428)) + 40|0);
  $430 = HEAP32[$429>>2]|0;
  switch ($430|0) {
  case -2:  {
   label = 121;
   break L159;
   break;
  }
  case -1:  {
   break L159;
   break;
  }
  case 3:  {
   $431 = $j;
   $432 = ($431|0)==(1);
   if (!($432)) {
    $433 = ((($CodeInfo)) + 16|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ($434|0)==(519);
    if (!($435)) {
     $436 = ((($CodeInfo)) + 16|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = ($437|0)==(483);
     if (!($438)) {
      label = 121;
      break L159;
     }
    }
   }
   $439 = HEAP8[(6083)>>0]|0;
   $440 = $439&255;
   $441 = ($440|0)==(0);
   if (!($441)) {
    label = 120;
    break L159;
   }
   $442 = $j;
   $443 = (($opndx) + (($442*72)|0)|0);
   $444 = $j;
   $445 = (($opndx) + (($444*72)|0)|0);
   $446 = ((($445)) + 16|0);
   $447 = HEAP32[$446>>2]|0;
   $448 = ((($447)) + 4|0);
   $449 = HEAP32[$448>>2]|0;
   $450 = $j;
   $451 = (($opndx) + (($450*72)|0)|0);
   $452 = ((($451)) + 44|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = ($453|0)==(39);
   $455 = $454 ? 8 : 4;
   $456 = $j;
   $457 = (($opndx) + (($456*72)|0)|0);
   $458 = ((($457)) + 52|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = ($459&255) >>> 5;
   $461 = $460 & 1;
   $462 = $461&255;
   $463 = $462&255;
   $464 = $j;
   $465 = (($opndx) + (($464*72)|0)|0);
   $466 = ((($465)) + 16|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = ((($467)) + 1|0);
   $469 = HEAP8[$468>>0]|0;
   _atofloat($443,$449,$455,$463,$469);
   $470 = $j;
   $471 = (($opndx) + (($470*72)|0)|0);
   $472 = ((($471)) + 40|0);
   HEAP32[$472>>2] = 0;
   $473 = $j;
   $474 = (($opndx) + (($473*72)|0)|0);
   $475 = ((($474)) + 16|0);
   HEAP32[$475>>2] = 0;
   break;
  }
  default: {
  }
  }
  $488 = $j;
  $489 = (($488) + 1)|0;
  $j = $489;
 }
 if ((label|0) == 113) {
  $0 = -1;
  $907 = $0;
  STACKTOP = sp;return ($907|0);
 }
 else if ((label|0) == 120) {
  $476 = (_EmitError(74)|0);
  $0 = $476;
  $907 = $0;
  STACKTOP = sp;return ($907|0);
 }
 else if ((label|0) == 121) {
  $477 = HEAP32[$i>>2]|0;
  $478 = HEAP32[(616)>>2]|0;
  $479 = ($477|0)==($478|0);
  if ($479) {
   $480 = HEAP32[$i>>2]|0;
   $481 = (($480) + -1)|0;
   HEAP32[$i>>2] = $481;
  }
 }
 else if ((label|0) == 125) {
  $490 = HEAP32[$i>>2]|0;
  $491 = $1;
  $492 = (($491) + ($490<<4)|0);
  $493 = HEAP8[$492>>0]|0;
  $494 = $493&255;
  $495 = ($494|0)!=(0);
  if ($495) {
   $496 = HEAP32[$i>>2]|0;
   $497 = $1;
   $498 = (($497) + ($496<<4)|0);
   $499 = ((($498)) + 12|0);
   $500 = HEAP32[$499>>2]|0;
   HEAP32[$vararg_buffer22>>2] = $500;
   $501 = (_EmitErr(209,$vararg_buffer22)|0);
   $0 = $501;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  $CurrOpnd = 0;
  L182: while(1) {
   $502 = $CurrOpnd;
   $503 = $j;
   $504 = ($502>>>0)<($503>>>0);
   $505 = $CurrOpnd;
   $506 = ($505>>>0)<(3);
   $507 = $504 ? $506 : 0;
   if (!($507)) {
    label = 170;
    break;
   }
   HEAP8[87037>>0] = 6;
   HEAP32[15452>>2] = 0;
   $508 = $CurrOpnd;
   $509 = ((($CodeInfo)) + 24|0);
   $510 = (($509) + (($508*24)|0)|0);
   $511 = ((($510)) + 8|0);
   HEAP32[$511>>2] = 0;
   $512 = $CurrOpnd;
   $513 = ((($CodeInfo)) + 24|0);
   $514 = (($513) + (($512*24)|0)|0);
   $515 = ((($514)) + 16|0);
   HEAP32[$515>>2] = 0;
   $516 = ((($CodeInfo)) + 16|0);
   $517 = HEAP32[$516>>2]|0;
   $518 = ($517>>>0)>=(1113);
   $519 = $CurrOpnd;
   $520 = ($519|0)==(1);
   $or$cond7 = $518 & $520;
   L185: do {
    if ($or$cond7) {
     $521 = ((($CodeInfo)) + 24|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = $522 & -1090518944;
     $524 = ($523|0)!=(0);
     if ($524) {
      $525 = ((($CodeInfo)) + 16|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = (($526) - 1113)|0;
      $528 = (99872 + ($527)|0);
      $529 = HEAP8[$528>>0]|0;
      $530 = $529&255;
      $531 = $530 & 2;
      $532 = ($531|0)!=(0);
      if (!($532)) {
       $533 = ((($CodeInfo)) + 16|0);
       $534 = HEAP32[$533>>2]|0;
       $535 = (($534) - 1113)|0;
       $536 = (99872 + ($535)|0);
       $537 = HEAP8[$536>>0]|0;
       $538 = $537&255;
       $539 = $538 & 8;
       $540 = ($539|0)!=(0);
       if ($540) {
        $541 = ((($opndx)) + 144|0);
        $542 = ((($541)) + 40|0);
        $543 = HEAP32[$542>>2]|0;
        $544 = ($543|0)==(0);
        $545 = $j;
        $546 = ($545|0)>(2);
        $or$cond9 = $544 & $546;
        if ($or$cond9) {
         break;
        }
       }
       $547 = ((($CodeInfo)) + 16|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = (($548) - 1113)|0;
       $550 = (99872 + ($549)|0);
       $551 = HEAP8[$550>>0]|0;
       $552 = $551&255;
       $553 = $552 & 16;
       $554 = ($553|0)!=(0);
       do {
        if ($554) {
         $555 = ((($CodeInfo)) + 24|0);
         $556 = HEAP32[$555>>2]|0;
         $557 = $556 & -1627389952;
         $558 = ($557|0)!=(0);
         if ($558) {
          break L185;
         }
         $559 = ((($CodeInfo)) + 16|0);
         $560 = HEAP32[$559>>2]|0;
         $561 = ($560|0)==(1219);
         if (!($561)) {
          $562 = ((($CodeInfo)) + 16|0);
          $563 = HEAP32[$562>>2]|0;
          $564 = ($563|0)==(1220);
          if (!($564)) {
           break;
          }
         }
         $565 = ((($opndx)) + 72|0);
         $566 = ((($565)) + 40|0);
         $567 = HEAP32[$566>>2]|0;
         $568 = ($567|0)!=(2);
         if ($568) {
          break L185;
         }
         $569 = ((($opndx)) + 72|0);
         $570 = ((($569)) + 52|0);
         $571 = HEAP8[$570>>0]|0;
         $572 = $571 & 1;
         $573 = $572&255;
         $574 = ($573|0)==(1);
         if ($574) {
          break L185;
         }
        }
       } while(0);
       $575 = ((($opndx)) + 72|0);
       $576 = ((($575)) + 40|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = ($577|0)!=(2);
       if ($578) {
        label = 142;
        break L182;
       }
       $579 = $CurrOpnd;
       $580 = (($opndx) + (($579*72)|0)|0);
       $581 = ((($580)) + 20|0);
       $582 = HEAP32[$581>>2]|0;
       $583 = ((($582)) + 8|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = (15660 + (($584*12)|0)|0);
       $586 = HEAP32[$585>>2]|0;
       $587 = $586 & 96;
       $588 = ($587|0)!=(0);
       if (!($588)) {
        label = 142;
        break L182;
       }
       $590 = $j;
       $591 = ($590|0)<=(2);
       L202: do {
        if (!($591)) {
         $592 = ((($CodeInfo)) + 16|0);
         $593 = HEAP32[$592>>2]|0;
         $594 = (($593) - 1113)|0;
         $595 = (99872 + ($594)|0);
         $596 = HEAP8[$595>>0]|0;
         $597 = $596&255;
         $598 = $597 & 4;
         $599 = ($598|0)!=(0);
         do {
          if ($599) {
           $600 = ((($opndx)) + 144|0);
           $601 = ((($600)) + 40|0);
           $602 = HEAP32[$601>>2]|0;
           $603 = ($602|0)==(0);
           if (!($603)) {
            break;
           }
           $604 = ((($opndx)) + 20|0);
           $605 = HEAP32[$604>>2]|0;
           $606 = ($605|0)!=(0|0);
           if (!($606)) {
            break L202;
           }
           $607 = ((($opndx)) + 20|0);
           $608 = HEAP32[$607>>2]|0;
           $609 = ((($608)) + 1|0);
           $610 = HEAP8[$609>>0]|0;
           $611 = $610&255;
           $612 = (($611) + 1)|0;
           $613 = $612&255;
           $614 = ((($CodeInfo)) + 100|0);
           HEAP8[$614>>0] = $613;
           $615 = $CurrOpnd;
           $616 = (($opndx) + (($615*72)|0)|0);
           _memcpy(($opndx|0),($616|0),216)|0;
           $617 = ((($CodeInfo)) + 96|0);
           HEAP8[$617>>0] = 0;
           $618 = (_process_register($CodeInfo,0,$opndx)|0);
           $619 = ($618|0)==(-1);
           if ($619) {
            label = 148;
            break L182;
           } else {
            break L202;
           }
          }
         } while(0);
         $620 = $CurrOpnd;
         $621 = (($opndx) + (($620*72)|0)|0);
         $622 = ((($621)) + 20|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = ((($623)) + 8|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = (15660 + (($625*12)|0)|0);
         $627 = HEAP32[$626>>2]|0;
         $flags = $627;
         $628 = ((($CodeInfo)) + 24|0);
         $629 = HEAP32[$628>>2]|0;
         $630 = ($629|0)==(-1627389952);
         do {
          if (!($630)) {
           $631 = $flags;
           $632 = $631 & 268435488;
           $633 = ($632|0)!=(0);
           if ($633) {
            $634 = ((($CodeInfo)) + 24|0);
            $635 = HEAP32[$634>>2]|0;
            $636 = $635 & 536870976;
            $637 = ($636|0)!=(0);
            if ($637) {
             label = 154;
             break L182;
            }
           }
           $638 = $flags;
           $639 = $638 & 536870976;
           $640 = ($639|0)!=(0);
           if (!($640)) {
            break;
           }
           $641 = ((($CodeInfo)) + 24|0);
           $642 = HEAP32[$641>>2]|0;
           $643 = $642 & 268435488;
           $644 = ($643|0)!=(0);
           if ($644) {
            label = 154;
            break L182;
           }
          }
         } while(0);
         $646 = $CurrOpnd;
         $647 = (($opndx) + (($646*72)|0)|0);
         $648 = ((($647)) + 20|0);
         $649 = HEAP32[$648>>2]|0;
         $650 = ((($649)) + 1|0);
         $651 = HEAP8[$650>>0]|0;
         $652 = $651&255;
         $653 = (($652) + 1)|0;
         $654 = $653&255;
         $655 = ((($CodeInfo)) + 100|0);
         HEAP8[$655>>0] = $654;
         $656 = $CurrOpnd;
         $657 = (($opndx) + (($656*72)|0)|0);
         $658 = $CurrOpnd;
         $659 = (($658) + 1)|0;
         $660 = (($opndx) + (($659*72)|0)|0);
         _memcpy(($657|0),($660|0),144)|0;
        }
       } while(0);
       $661 = $j;
       $662 = (($661) + -1)|0;
       $j = $662;
      }
     }
    }
   } while(0);
   $663 = $CurrOpnd;
   $664 = (($opndx) + (($663*72)|0)|0);
   $665 = ((($664)) + 40|0);
   $666 = HEAP32[$665>>2]|0;
   L218: do {
    switch ($666|0) {
    case 1:  {
     $667 = $CurrOpnd;
     $668 = $CurrOpnd;
     $669 = (($opndx) + (($668*72)|0)|0);
     $670 = (_process_address($CodeInfo,$667,$669)|0);
     $671 = ($670|0)==(-1);
     if ($671) {
      label = 159;
      break L182;
     }
     break;
    }
    case 0:  {
     $672 = $CurrOpnd;
     $673 = $CurrOpnd;
     $674 = (($opndx) + (($673*72)|0)|0);
     $675 = (_process_const($CodeInfo,$672,$674)|0);
     $676 = ($675|0)==(-1);
     if ($676) {
      label = 161;
      break L182;
     }
     break;
    }
    case 2:  {
     $677 = $CurrOpnd;
     $678 = (($opndx) + (($677*72)|0)|0);
     $679 = ((($678)) + 52|0);
     $680 = HEAP8[$679>>0]|0;
     $681 = $680 & 1;
     $682 = $681&255;
     $683 = ($682|0)!=(0);
     $684 = $CurrOpnd;
     if ($683) {
      $685 = $CurrOpnd;
      $686 = (($opndx) + (($685*72)|0)|0);
      $687 = (_process_address($CodeInfo,$684,$686)|0);
      $688 = ($687|0)==(-1);
      if ($688) {
       label = 164;
       break L182;
      } else {
       break L218;
      }
     }
     $689 = ($684|0)==(2);
     $690 = $CurrOpnd;
     if ($689) {
      $691 = (($opndx) + (($690*72)|0)|0);
      $692 = ((($691)) + 20|0);
      $693 = HEAP32[$692>>2]|0;
      $694 = ((($693)) + 8|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = (15660 + (($695*12)|0)|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = ((($CodeInfo)) + 24|0);
      $699 = ((($698)) + 48|0);
      HEAP32[$699>>2] = $697;
      $700 = $CurrOpnd;
      $701 = (($opndx) + (($700*72)|0)|0);
      $702 = ((($701)) + 20|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = ((($703)) + 1|0);
      $705 = HEAP8[$704>>0]|0;
      $706 = $705&255;
      $707 = ((($CodeInfo)) + 24|0);
      $708 = ((($707)) + 48|0);
      $709 = ((($708)) + 8|0);
      HEAP32[$709>>2] = $706;
      break L218;
     } else {
      $710 = (_process_register($CodeInfo,$690,$opndx)|0);
      $711 = ($710|0)==(-1);
      if ($711) {
       label = 168;
       break L182;
      } else {
       break L218;
      }
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $712 = $CurrOpnd;
   $713 = (($712) + 1)|0;
   $CurrOpnd = $713;
  }
  if ((label|0) == 142) {
   $589 = (_EmitErr(49,$vararg_buffer25)|0);
   $0 = $589;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 148) {
   $0 = -1;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 154) {
   $645 = (_EmitErr(49,$vararg_buffer27)|0);
   $0 = $645;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 159) {
   $0 = -1;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 161) {
   $0 = -1;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 164) {
   $0 = -1;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 168) {
   $0 = -1;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
  else if ((label|0) == 170) {
   $714 = $CurrOpnd;
   $715 = $j;
   $716 = ($714|0)!=($715|0);
   if ($716) {
    while(1) {
     $717 = HEAP32[$i>>2]|0;
     $718 = $1;
     $719 = (($718) + ($717<<4)|0);
     $720 = HEAP8[$719>>0]|0;
     $721 = $720&255;
     $722 = ($721|0)!=(44);
     $723 = HEAP32[$i>>2]|0;
     if (!($722)) {
      break;
     }
     $724 = (($723) + -1)|0;
     HEAP32[$i>>2] = $724;
    }
    $725 = $1;
    $726 = (($725) + ($723<<4)|0);
    $727 = ((($726)) + 12|0);
    $728 = HEAP32[$727>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $728;
    $729 = (_EmitErr(209,$vararg_buffer29)|0);
    $0 = $729;
    $907 = $0;
    STACKTOP = sp;return ($907|0);
   }
   $730 = ((($CodeInfo)) + 101|0);
   $731 = HEAP8[$730>>0]|0;
   $732 = ($731&255) >>> 2;
   $733 = $732 & 1;
   $734 = ($733<<24>>24)!=(0);
   do {
    if ($734) {
     $735 = ((($CodeInfo)) + 16|0);
     $736 = HEAP32[$735>>2]|0;
     $737 = ($736|0)==(373);
     if (!($737)) {
      $738 = ((($CodeInfo)) + 16|0);
      $739 = HEAP32[$738>>2]|0;
      $740 = ($739|0)==(374);
      if (!($740)) {
       break;
      }
     }
     while(1) {
      $741 = ((($CodeInfo)) + 12|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = ((($742)) + 8|0);
      HEAP32[$741>>2] = $743;
      $744 = ((($CodeInfo)) + 12|0);
      $745 = HEAP32[$744>>2]|0;
      $746 = ((($745)) + 2|0);
      $747 = HEAP8[$746>>0]|0;
      $748 = ($747&255) >>> 3;
      $749 = $748 & 1;
      $750 = $749&255;
      $751 = ($750|0)==(0);
      if (!($751)) {
       break;
      }
     }
    }
   } while(0);
   $752 = ((($CodeInfo)) + 12|0);
   $753 = HEAP32[$752>>2]|0;
   $754 = ((($753)) + 2|0);
   $755 = HEAP8[$754>>0]|0;
   $756 = $755 & 7;
   $757 = $756&255;
   $758 = ($757|0)==(2);
   L245: do {
    if ($758) {
     label = 180;
    } else {
     $759 = ((($CodeInfo)) + 12|0);
     $760 = HEAP32[$759>>2]|0;
     $761 = ((($760)) + 2|0);
     $762 = HEAP8[$761>>0]|0;
     $763 = $762 & 7;
     $764 = $763&255;
     $765 = ($764|0)==(3);
     if ($765) {
      label = 180;
     } else {
      $766 = $CurrOpnd;
      $767 = ($766>>>0)>(1);
      do {
       if ($767) {
        $768 = $CurrOpnd;
        $769 = ($768>>>0)>(2);
        L250: do {
         if ($769) {
          while(1) {
           $770 = ((($CodeInfo)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = HEAP8[$771>>0]|0;
           $773 = $772&255;
           $774 = (20136 + (($773*12)|0)|0);
           $775 = ((($774)) + 8|0);
           $776 = HEAP8[$775>>0]|0;
           $777 = $776&255;
           $778 = ($777|0)!=(0);
           if ($778) {
            break L250;
           }
           $779 = ((($CodeInfo)) + 12|0);
           $780 = HEAP32[$779>>2]|0;
           $781 = ((($780)) + 8|0);
           HEAP32[$779>>2] = $781;
           $782 = ((($CodeInfo)) + 12|0);
           $783 = HEAP32[$782>>2]|0;
           $784 = ((($783)) + 2|0);
           $785 = HEAP8[$784>>0]|0;
           $786 = ($785&255) >>> 3;
           $787 = $786 & 1;
           $788 = $787&255;
           $789 = ($788|0)==(1);
           if ($789) {
            break;
           }
          }
          while(1) {
           $790 = HEAP32[$i>>2]|0;
           $791 = $1;
           $792 = (($791) + ($790<<4)|0);
           $793 = HEAP8[$792>>0]|0;
           $794 = $793&255;
           $795 = ($794|0)!=(44);
           $796 = HEAP32[$i>>2]|0;
           if (!($795)) {
            break;
           }
           $797 = (($796) + -1)|0;
           HEAP32[$i>>2] = $797;
          }
          $798 = $1;
          $799 = (($798) + ($796<<4)|0);
          $800 = ((($799)) + 12|0);
          $801 = HEAP32[$800>>2]|0;
          HEAP32[$vararg_buffer32>>2] = $801;
          $802 = (_EmitErr(209,$vararg_buffer32)|0);
          $0 = $802;
          $907 = $0;
          STACKTOP = sp;return ($907|0);
         }
        } while(0);
        $803 = ((($CodeInfo)) + 16|0);
        $804 = HEAP32[$803>>2]|0;
        $805 = ($804|0)==(539);
        L260: do {
         if ($805) {
          $806 = ((($CodeInfo)) + 24|0);
          $807 = ((($806)) + 48|0);
          $808 = HEAP32[$807>>2]|0;
          $809 = ($808|0)==(0);
          do {
           if ($809) {
            $810 = ((($CodeInfo)) + 24|0);
            $811 = ((($810)) + 24|0);
            $812 = HEAP32[$811>>2]|0;
            $813 = $812 & 458752;
            $814 = ($813|0)!=(0);
            if (!($814)) {
             break;
            }
            $815 = ((($CodeInfo)) + 8|0);
            $816 = HEAP8[$815>>0]|0;
            $817 = $816&255;
            $818 = $817 & 1;
            $819 = ($818|0)!=(0);
            $820 = $819 ? 4 : 0;
            $821 = ((($CodeInfo)) + 8|0);
            $822 = HEAP8[$821>>0]|0;
            $823 = $822&255;
            $824 = $823 | $820;
            $825 = $824&255;
            HEAP8[$821>>0] = $825;
            $826 = ((($CodeInfo)) + 96|0);
            $827 = HEAP8[$826>>0]|0;
            $828 = $827&255;
            $829 = $828 & -57;
            $830 = ((($CodeInfo)) + 96|0);
            $831 = HEAP8[$830>>0]|0;
            $832 = $831&255;
            $833 = $832 & 7;
            $834 = $833 << 3;
            $835 = $829 | $834;
            $836 = $835&255;
            $837 = ((($CodeInfo)) + 96|0);
            HEAP8[$837>>0] = $836;
            break L260;
           }
          } while(0);
          $838 = ((($CodeInfo)) + 24|0);
          $839 = ((($838)) + 48|0);
          $840 = HEAP32[$839>>2]|0;
          $841 = ($840|0)!=(0);
          if (!($841)) {
           break;
          }
          $842 = ((($CodeInfo)) + 24|0);
          $843 = ((($842)) + 24|0);
          $844 = HEAP32[$843>>2]|0;
          $845 = $844 & 458752;
          $846 = ($845|0)!=(0);
          if (!($846)) {
           break;
          }
          $847 = ((($CodeInfo)) + 24|0);
          $848 = ((($847)) + 24|0);
          $849 = ((($848)) + 16|0);
          $850 = HEAP32[$849>>2]|0;
          $851 = ($850|0)!=(0|0);
          if (!($851)) {
           break;
          }
          $852 = ((($CodeInfo)) + 24|0);
          $853 = ((($852)) + 24|0);
          $854 = ((($853)) + 16|0);
          $855 = HEAP32[$854>>2]|0;
          $856 = ((($855)) + 36|0);
          $857 = HEAP32[$856>>2]|0;
          $858 = ((($857)) + 16|0);
          $859 = HEAP32[$858>>2]|0;
          $860 = ($859|0)==(0);
          if (!($860)) {
           break;
          }
          $861 = ((($CodeInfo)) + 24|0);
          $862 = ((($861)) + 24|0);
          HEAP32[$862>>2] = -1627389952;
         }
        } while(0);
        $863 = (_check_size($CodeInfo,$opndx)|0);
        $864 = ($863|0)==(-1);
        if (!($864)) {
         break;
        }
        $0 = -1;
        $907 = $0;
        STACKTOP = sp;return ($907|0);
       }
      } while(0);
      $865 = ((($CodeInfo)) + 98|0);
      $866 = HEAP8[$865>>0]|0;
      $867 = $866&255;
      $868 = ($867|0)==(2);
      if (!($868)) {
       break;
      }
      $869 = ((($CodeInfo)) + 101|0);
      $870 = HEAP8[$869>>0]|0;
      $871 = ($870&255) >>> 4;
      $872 = $871 & 1;
      $873 = $872&255;
      $874 = ($873|0)!=(0);
      do {
       if ($874) {
        $875 = ((($CodeInfo)) + 8|0);
        $876 = HEAP8[$875>>0]|0;
        $877 = $876&255;
        $878 = ($877|0)!=(0);
        if (!($878)) {
         break;
        }
        (_EmitError(253)|0);
       }
      } while(0);
      $879 = ((($CodeInfo)) + 16|0);
      $880 = HEAP32[$879>>2]|0;
      switch ($880|0) {
      case 520: case 519:  {
       $881 = ((($CodeInfo)) + 8|0);
       $882 = HEAP8[$881>>0]|0;
       $883 = $882&255;
       $884 = $883 & 7;
       $885 = $884&255;
       HEAP8[$881>>0] = $885;
       break L245;
       break;
      }
      case 1110: case 1109: case 374: case 373:  {
       $886 = ((($CodeInfo)) + 8|0);
       $887 = HEAP8[$886>>0]|0;
       $888 = $887&255;
       $889 = $888 & 7;
       $890 = $889&255;
       HEAP8[$886>>0] = $890;
       break L245;
       break;
      }
      case 524:  {
       $891 = ((($CodeInfo)) + 24|0);
       $892 = HEAP32[$891>>2]|0;
       $893 = $892 & 1024;
       $894 = ($893|0)!=(0);
       if (!($894)) {
        $895 = ((($CodeInfo)) + 24|0);
        $896 = ((($895)) + 24|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & 1024;
        $899 = ($898|0)!=(0);
        if (!($899)) {
         break L245;
        }
       }
       $900 = ((($CodeInfo)) + 8|0);
       $901 = HEAP8[$900>>0]|0;
       $902 = $901&255;
       $903 = $902 & 7;
       $904 = $903&255;
       HEAP8[$900>>0] = $904;
       break L245;
       break;
      }
      default: {
       break L245;
      }
      }
     }
    }
   } while(0);
   if ((label|0) == 180) {
    _HandleStringInstructions($CodeInfo,$opndx);
   }
   $905 = $oldofs;
   $906 = (_codegen($CodeInfo,$905)|0);
   $0 = $906;
   $907 = $0;
   STACKTOP = sp;return ($907|0);
  }
 }
 $482 = HEAP32[$i>>2]|0;
 $483 = $1;
 $484 = (($483) + ($482<<4)|0);
 $485 = ((($484)) + 4|0);
 $486 = HEAP32[$485>>2]|0;
 HEAP32[$vararg_buffer19>>2] = $486;
 $487 = (_EmitErr(209,$vararg_buffer19)|0);
 $0 = $487;
 $907 = $0;
 STACKTOP = sp;return ($907|0);
}
function _ProcessFile($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tokenarray;
 while(1) {
  $1 = HEAP32[(560)>>2]|0;
  $2 = $1 >>> 16;
  $3 = $2 & 1;
  $4 = ($3|0)==(0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = HEAP32[(600)>>2]|0;
  $6 = (_GetTextLine($5)|0);
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = HEAP32[(600)>>2]|0;
  $9 = $0;
  $10 = (_PreprocessLine($8,$9)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   continue;
  }
  $12 = $0;
  (_ParseLine($12)|0);
  $13 = HEAP8[(6081)>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(1);
  $16 = HEAP32[4884>>2]|0;
  $17 = ($16|0)==(0);
  $or$cond = $15 & $17;
  if (!($or$cond)) {
   continue;
  }
  $18 = HEAP32[(600)>>2]|0;
  _WritePreprocessedLine($18);
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _IsType($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_SymFind($2)|0);
 $sym = $3;
 $4 = $sym;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $sym;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(7);
  if ($9) {
   $10 = $sym;
   $0 = $10;
   $11 = $0;
   STACKTOP = sp;return ($11|0);
  }
 }
 $0 = 0;
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _process_register($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flags = 0;
 var $or$cond = 0, $or$cond3 = 0, $regno = 0, $regtok = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $2;
 $5 = $3;
 $6 = (($5) + (($4*72)|0)|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $regtok = $10;
 $11 = $regtok;
 $12 = (15660 + (($11*12)|0)|0);
 $13 = ((($12)) + 10|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $regno = $15;
 $16 = $regtok;
 $17 = (15660 + (($16*12)|0)|0);
 $18 = HEAP32[$17>>2]|0;
 $flags = $18;
 $19 = $flags;
 $20 = $2;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = (($22) + (($20*24)|0)|0);
 HEAP32[$23>>2] = $19;
 $24 = $flags;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 $27 = $flags;
 do {
  if ($26) {
   $28 = ($27|0)!=(257);
   if ($28) {
    $29 = $1;
    $30 = ((($29)) + 101|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 & -2;
    HEAP8[$30>>0] = $32;
   }
   $33 = $1;
   $34 = ((($33)) + 98|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==(2);
   $38 = $regno;
   $39 = ($38|0)>=(4);
   $or$cond = $37 & $39;
   $40 = $regno;
   $41 = ($40|0)<=(7);
   $or$cond3 = $or$cond & $41;
   do {
    if ($or$cond3) {
     $42 = $regtok;
     $43 = (15660 + (($42*12)|0)|0);
     $44 = ((($43)) + 8|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = ($46|0)==(0);
     $48 = $1;
     $49 = ((($48)) + 101|0);
     $50 = HEAP8[$49>>0]|0;
     if ($47) {
      $51 = $50 & -17;
      $52 = $51 | 16;
      HEAP8[$49>>0] = $52;
      break;
     } else {
      $53 = $50 & -33;
      $54 = $53 | 32;
      HEAP8[$49>>0] = $54;
      break;
     }
    }
   } while(0);
   $55 = $regno;
   $56 = (5056 + ($55<<3)|0);
   $57 = ((($56)) + 4|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $regtok;
   $61 = ($60>>>0)>=(5);
   $62 = $regtok;
   $63 = ($62>>>0)<=(8);
   $64 = $61 ? $63 : 0;
   $65 = $64 ? 16 : 1;
   $66 = $59 & $65;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = (_EmitError(183)|0);
    $0 = $68;
    $278 = $0;
    STACKTOP = sp;return ($278|0);
   }
  } else {
   $69 = $27 & 15;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $1;
    $72 = ((($71)) + 101|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 & -2;
    $75 = $74 | 1;
    HEAP8[$72>>0] = $75;
    $76 = $regno;
    $77 = (5056 + ($76<<3)|0);
    $78 = ((($77)) + 4|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $flags;
    $82 = $80 & $81;
    $83 = $82 & 15;
    $84 = ($83|0)!=(0);
    if ($84) {
     $85 = (_EmitError(183)|0);
     $0 = $85;
     $278 = $0;
     STACKTOP = sp;return ($278|0);
    }
    $86 = $flags;
    $87 = $86 & 2;
    $88 = ($87|0)!=(0);
    $89 = $1;
    $90 = ((($89)) + 98|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    if ($88) {
     $93 = ($92|0)>(0);
     if (!($93)) {
      break;
     }
     $94 = $1;
     $95 = ((($94)) + 9|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 & -3;
     $98 = $97 | 2;
     HEAP8[$95>>0] = $98;
     break;
    } else {
     $99 = ($92|0)==(0);
     if (!($99)) {
      break;
     }
     $100 = $1;
     $101 = ((($100)) + 9|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102 & -3;
     $104 = $103 | 2;
     HEAP8[$101>>0] = $104;
     break;
    }
   }
   $105 = $flags;
   $106 = $105 & 6144;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $regno;
    $109 = ($108|0)==(1);
    if (!($109)) {
     break;
    }
    $110 = $1;
    $111 = ((($110)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(520);
    if (!($113)) {
     break;
    }
    $114 = (_EmitError(41)|0);
    $0 = $114;
    $278 = $0;
    STACKTOP = sp;return ($278|0);
   }
   $115 = $flags;
   $116 = $115 & 8192;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $2;
    $119 = $3;
    $120 = (($119) + (($118*72)|0)|0);
    $121 = HEAP32[$120>>2]|0;
    $regno = $121;
    $122 = $regno;
    $123 = ($122|0)>(7);
    if ($123) {
     $124 = (_EmitError(252)|0);
     $0 = $124;
     $278 = $0;
     STACKTOP = sp;return ($278|0);
    }
    $125 = $regno;
    $126 = $1;
    $127 = ((($126)) + 96|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = $129 | $125;
    $131 = $130&255;
    HEAP8[$127>>0] = $131;
    $132 = $regno;
    $133 = ($132|0)!=(0);
    if ($133) {
     $134 = $2;
     $135 = $1;
     $136 = ((($135)) + 24|0);
     $137 = (($136) + (($134*24)|0)|0);
     HEAP32[$137>>2] = 16384;
    }
    $0 = 0;
    $278 = $0;
    STACKTOP = sp;return ($278|0);
   }
   $138 = $flags;
   $139 = $138 & 1024;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $1;
    $142 = ((($141)) + 16|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)!=(524);
    if ($144) {
     $145 = (_EmitError(42)|0);
     $0 = $145;
     $278 = $0;
     STACKTOP = sp;return ($278|0);
    }
    $146 = $regno;
    $147 = ($146|0)>=(32);
    if ($147) {
     $148 = $1;
     $149 = ((($148)) + 99|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = $151 | 4;
     $153 = $152&255;
     HEAP8[$149>>0] = $153;
     $154 = HEAP32[(544)>>2]|0;
     $155 = $154 & 240;
     $156 = ($155>>>0)>=(96);
     if ($156) {
      $157 = $regno;
      $158 = ($157|0)>(37);
      $159 = $158 ? 6 : 3;
      $160 = $regno;
      $161 = ($160|0)>(37);
      $162 = $161 ? 7 : 5;
      HEAP32[$vararg_buffer>>2] = $159;
      $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $162;
      $163 = (_EmitErr(32,$vararg_buffer)|0);
      $0 = $163;
      $278 = $0;
      STACKTOP = sp;return ($278|0);
     }
    } else {
     $164 = $regno;
     $165 = ($164|0)>=(16);
     if ($165) {
      $166 = $1;
      $167 = ((($166)) + 99|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168&255;
      $170 = $169 | 1;
      $171 = $170&255;
      HEAP8[$167>>0] = $171;
     }
    }
    $172 = $regno;
    $173 = $172 & 15;
    $regno = $173;
   }
  }
 } while(0);
 $174 = $regtok;
 $175 = (15660 + (($174*12)|0)|0);
 $176 = ((($175)) + 8|0);
 $177 = HEAP16[$176>>1]|0;
 $178 = $177&65535;
 $179 = $178 & 240;
 $180 = ($179|0)==(112);
 if ($180) {
  $181 = $1;
  $182 = ((($181)) + 8|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $184 | 64;
  $186 = $185&255;
  HEAP8[$182>>0] = $186;
  $187 = $flags;
  $188 = $187 & 8;
  $189 = ($188|0)!=(0);
  if ($189) {
   $190 = $1;
   $191 = ((($190)) + 8|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $193 | 8;
   $195 = $194&255;
   HEAP8[$191>>0] = $195;
  }
 }
 $196 = $2;
 $197 = ($196|0)==(0);
 $198 = $1;
 do {
  if ($197) {
   $199 = ((($198)) + 96|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = $201 | 192;
   $203 = $202&255;
   HEAP8[$199>>0] = $203;
   $204 = $regno;
   $205 = $204 & 8;
   $206 = $205 >> 3;
   $207 = $1;
   $208 = ((($207)) + 8|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = $210 | $206;
   $212 = $211&255;
   HEAP8[$208>>0] = $212;
   $213 = $regno;
   $214 = $213 & 7;
   $regno = $214;
   $215 = $regno;
   $216 = $1;
   $217 = ((($216)) + 96|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = $219 | $215;
   $221 = $220&255;
   HEAP8[$217>>0] = $221;
  } else {
   $222 = ((($198)) + 16|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ($223|0)==(584);
   if ($224) {
    $225 = $1;
    $226 = ((($225)) + 24|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $227 & 128;
    $229 = ($228|0)!=(0);
    if ($229) {
     $230 = $1;
     $231 = ((($230)) + 24|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = $232 & 1;
     $234 = (0)==($233|0);
     if ($234) {
      $235 = $regno;
      $236 = $235 & 8;
      $237 = $236 >> 3;
      $238 = $1;
      $239 = ((($238)) + 8|0);
      $240 = HEAP8[$239>>0]|0;
      $241 = $240&255;
      $242 = $241 | $237;
      $243 = $242&255;
      HEAP8[$239>>0] = $243;
      $244 = $regno;
      $245 = $244 & 7;
      $regno = $245;
      $246 = $1;
      $247 = ((($246)) + 96|0);
      $248 = HEAP8[$247>>0]|0;
      $249 = $248&255;
      $250 = $249 & 192;
      $251 = $regno;
      $252 = $250 | $251;
      $253 = $252&255;
      $254 = $1;
      $255 = ((($254)) + 96|0);
      HEAP8[$255>>0] = $253;
      break;
     }
    }
   }
   $256 = $regno;
   $257 = $256 & 8;
   $258 = $257 >> 1;
   $259 = $1;
   $260 = ((($259)) + 8|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = $261&255;
   $263 = $262 | $258;
   $264 = $263&255;
   HEAP8[$260>>0] = $264;
   $265 = $regno;
   $266 = $265 & 7;
   $regno = $266;
   $267 = $1;
   $268 = ((($267)) + 96|0);
   $269 = HEAP8[$268>>0]|0;
   $270 = $269&255;
   $271 = $270 & -57;
   $272 = $regno;
   $273 = $272 << 3;
   $274 = $271 | $273;
   $275 = $274&255;
   $276 = $1;
   $277 = ((($276)) + 96|0);
   HEAP8[$277>>0] = $275;
  }
 } while(0);
 $0 = 0;
 $278 = $0;
 STACKTOP = sp;return ($278|0);
}
function _process_address($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $p = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $3;
 $5 = ((($4)) + 52|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 $10 = $3;
 L1: do {
  if ($9) {
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0);
   do {
    if ($13) {
     $14 = $3;
     $15 = ((($14)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)!=(-1);
     if (!($17)) {
      $18 = $3;
      $19 = HEAP32[$18>>2]|0;
      $20 = ($19|0)>=(0);
      if (!($20)) {
       break;
      }
     }
     $21 = HEAP8[(556)>>0]|0;
     $22 = $21&255;
     $23 = ($22|0)==(2);
     $24 = $3;
     if (!($23)) {
      $26 = $24;
      $27 = $26;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($26) + 4)|0;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $32 = $vararg_buffer;
      $33 = $32;
      HEAP32[$33>>2] = $28;
      $34 = (($32) + 4)|0;
      $35 = $34;
      HEAP32[$35>>2] = $31;
      _EmitWarn(3,54,$vararg_buffer);
      break;
     }
     $25 = (_EmitConstError($24)|0);
     $0 = $25;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
   } while(0);
   $36 = $3;
   $37 = ((($36)) + 56|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = $3;
    $41 = ((($40)) + 56|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(5);
    if (!($45)) {
     break;
    }
   }
   $46 = $1;
   $47 = $2;
   $48 = $3;
   $49 = (_memory_operand($46,$47,$48,0)|0);
   $0 = $49;
   $232 = $0;
   STACKTOP = sp;return ($232|0);
  } else {
   $50 = ((($10)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(-2);
   $53 = $3;
   $54 = ((($53)) + 56|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if ($52) {
    $57 = $1;
    if ($56) {
     $58 = $2;
     $59 = $3;
     $60 = (_idata_nofixup($57,$58,$59)|0);
     $0 = $60;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    $61 = ((($57)) + 16|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(552);
    if ($63) {
     $64 = $3;
     $65 = ((($64)) + 36|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==(167);
     if ($67) {
      $68 = $1;
      $69 = $2;
      $70 = $3;
      $71 = (_memory_operand($68,$69,$70,1)|0);
      $0 = $71;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     }
    }
    $72 = $1;
    $73 = $2;
    $74 = $3;
    $75 = (_idata_fixup($72,$73,$74)|0);
    $0 = $75;
    $232 = $0;
    STACKTOP = sp;return ($232|0);
   }
   $76 = $3;
   if ($56) {
    $77 = ((($76)) + 32|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)!=(0|0);
    if (!($79)) {
     $99 = $1;
     $100 = $2;
     $101 = $3;
     $102 = (_idata_nofixup($99,$100,$101)|0);
     $0 = $102;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    $80 = $3;
    $81 = ((($80)) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = ($84|0)==(2);
    if (!($85)) {
     $86 = $1;
     $87 = ((($86)) + 98|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = ($89|0)==(2);
     if (!($90)) {
      $95 = $1;
      $96 = $2;
      $97 = $3;
      $98 = (_memory_operand($95,$96,$97,1)|0);
      $0 = $98;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     }
    }
    $91 = $1;
    $92 = $2;
    $93 = $3;
    $94 = (_memory_operand($91,$92,$93,0)|0);
    $0 = $94;
    $232 = $0;
    STACKTOP = sp;return ($232|0);
   }
   $103 = ((($76)) + 56|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 16|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0);
   if ($107) {
    $108 = $3;
    $109 = ((($108)) + 52|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = ($110&255) >>> 1;
    $112 = $111 & 1;
    $113 = $112&255;
    $114 = ($113|0)!=(0);
    if (!($114)) {
     $115 = $1;
     $116 = ((($115)) + 16|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117>>>0)>=(373);
     if ($118) {
      $119 = $1;
      $120 = ((($119)) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121>>>0)<=(422);
      if ($122) {
       $123 = $1;
       $124 = $2;
       $125 = $3;
       $126 = (_process_branch($123,$124,$125)|0);
       $0 = $126;
       $232 = $0;
       STACKTOP = sp;return ($232|0);
      }
     }
     $127 = $1;
     $128 = ((($127)) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     switch ($129|0) {
     case 483: case 521: case 519:  {
      $130 = HEAP32[(544)>>2]|0;
      $131 = $130 & 240;
      $132 = ($131>>>0)>(0);
      if (!($132)) {
       break L1;
      }
      $133 = $1;
      $134 = $2;
      $135 = $3;
      $136 = (_idata_fixup($133,$134,$135)|0);
      $0 = $136;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
      break;
     }
     default: {
     }
     }
     $137 = $2;
     $138 = ($137|0)==(1);
     L57: do {
      if ($138) {
       $139 = $1;
       $140 = ((($139)) + 24|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = $141 & 6144;
       $143 = ($142|0)==(0);
       if ($143) {
        $144 = $1;
        $145 = ((($144)) + 12|0);
        $146 = HEAP32[$145>>2]|0;
        $p = $146;
        while(1) {
         $147 = $p;
         $148 = HEAP8[$147>>0]|0;
         $149 = $148&255;
         $150 = (20136 + (($149*12)|0)|0);
         $151 = ((($150)) + 4|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = $152 & 458752;
         $154 = ($153|0)!=(0);
         if ($154) {
          break;
         }
         $159 = $p;
         $160 = ((($159)) + 8|0);
         $p = $160;
         $161 = $p;
         $162 = ((($161)) + 2|0);
         $163 = HEAP8[$162>>0]|0;
         $164 = ($163&255) >>> 3;
         $165 = $164 & 1;
         $166 = $165&255;
         $167 = ($166|0)==(0);
         if (!($167)) {
          break L57;
         }
        }
        $155 = $1;
        $156 = $2;
        $157 = $3;
        $158 = (_idata_fixup($155,$156,$157)|0);
        $0 = $158;
        $232 = $0;
        STACKTOP = sp;return ($232|0);
       }
      }
     } while(0);
     $168 = $2;
     $169 = ($168|0)==(2);
     if (!($169)) {
      break;
     }
     $170 = $1;
     $171 = $2;
     $172 = $3;
     $173 = (_idata_fixup($170,$171,$172)|0);
     $0 = $173;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
   }
   $174 = $3;
   $175 = ((($174)) + 56|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($176)) + 16|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(3);
   if (!($179)) {
    $180 = $3;
    $181 = ((($180)) + 56|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ((($182)) + 16|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($184|0)==(4);
    if (!($185)) {
     $192 = $3;
     $193 = ((($192)) + 52|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = ($194&255) >>> 2;
     $196 = $195 & 1;
     $197 = $196&255;
     $198 = ($197|0)!=(0);
     if ($198) {
      $199 = $1;
      $200 = $2;
      $201 = $3;
      $202 = (_idata_fixup($199,$200,$201)|0);
      $0 = $202;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     }
     $203 = $3;
     $204 = ((($203)) + 44|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ($205|0)==(129);
     if (!($206)) {
      $207 = $3;
      $208 = ((($207)) + 44|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($209|0)==(130);
      if (!($210)) {
       break;
      }
     }
     $211 = $1;
     $212 = ((($211)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(552);
     if ($214) {
      $215 = $1;
      $216 = $2;
      $217 = $3;
      $218 = (_memory_operand($215,$216,$217,1)|0);
      $0 = $218;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     }
     $219 = $3;
     $220 = ((($219)) + 60|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($221|0)!=(0|0);
     $223 = $1;
     $224 = $2;
     $225 = $3;
     if ($222) {
      $226 = (_memory_operand($223,$224,$225,1)|0);
      $0 = $226;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     } else {
      $227 = (_idata_fixup($223,$224,$225)|0);
      $0 = $227;
      $232 = $0;
      STACKTOP = sp;return ($232|0);
     }
    }
   }
   $186 = $3;
   $187 = ((($186)) + 36|0);
   HEAP32[$187>>2] = 170;
   $188 = $1;
   $189 = $2;
   $190 = $3;
   $191 = (_idata_fixup($188,$189,$190)|0);
   $0 = $191;
   $232 = $0;
   STACKTOP = sp;return ($232|0);
  }
 } while(0);
 $228 = $1;
 $229 = $2;
 $230 = $3;
 $231 = (_memory_operand($228,$229,$230,1)|0);
 $0 = $231;
 $232 = $0;
 STACKTOP = sp;return ($232|0);
}
function _process_const($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $3;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = (_EmitError(163)|0);
   $0 = $14;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $15 = $1;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 6|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 247;
 $22 = ($21|0)==(194);
 $23 = $2;
 $24 = ($23|0)==(0);
 $or$cond = $22 & $24;
 if ($or$cond) {
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = (_idata_nofixup($28,$29,$30)|0);
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _HandleStringInstructions($CodeInfo,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op_size = 0, $opndidx = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $opndx;
 $opndidx = 0;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 442: case 1166:  {
   $5 = $0;
   $6 = ((($5)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 48;
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = $0;
    $11 = ((($10)) + 8|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = $13 & -9;
    $15 = $14&255;
    HEAP8[$11>>0] = $15;
    STACKTOP = sp;return;
   } else {
    label = 4;
   }
   break;
  }
  case 1033: case 441: case 440: case 439:  {
   label = 4;
   break;
  }
  case 454: case 1219:  {
   $39 = $0;
   $40 = ((($39)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & 48;
   $43 = ($42|0)!=(0);
   if (!($43)) {
    $44 = $0;
    $45 = ((($44)) + 24|0);
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47 & 48;
    $49 = ($48|0)!=(0);
    if (!($49)) {
     label = 16;
     break L1;
    }
   }
   $50 = $0;
   $51 = ((($50)) + 8|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 & -9;
   $55 = $54&255;
   HEAP8[$51>>0] = $55;
   STACKTOP = sp;return;
   break;
  }
  case 1035: case 453: case 452: case 451:  {
   label = 16;
   break;
  }
  case 458: case 457: case 456: case 455:  {
   $71 = $0;
   $72 = ((($71)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(3);
   if ($74) {
    $75 = $0;
    $76 = ((($75)) + 4|0);
    HEAP32[$76>>2] = -2;
   }
   $opndidx = 1;
   break;
  }
  case 1034: case 450: case 449: case 448: case 447:  {
   $77 = $0;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)==(3);
   if ($80) {
    $81 = $0;
    $82 = ((($81)) + 4|0);
    HEAP32[$82>>2] = -2;
   }
   break;
  }
  default: {
   $83 = $0;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)!=(-2);
   if ($86) {
    $87 = $0;
    $88 = ((($87)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0);
    if ($90) {
     $91 = $0;
     $92 = ((($91)) + 4|0);
     HEAP32[$92>>2] = -2;
     break L1;
    } else {
     (_EmitError(49)|0);
     break L1;
    }
   }
  }
  }
 } while(0);
 do {
  if ((label|0) == 4) {
   $16 = $0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(-2);
   if ($19) {
    $20 = $1;
    $21 = ((($20)) + 72|0);
    $22 = ((($21)) + 32|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0|0);
    $25 = $0;
    $26 = ((($25)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    if (!($24)) {
     $36 = ($27|0)==(3);
     if (!($36)) {
      break;
     }
     $37 = $0;
     $38 = ((($37)) + 4|0);
     HEAP32[$38>>2] = -2;
     break;
    }
    $28 = ($27|0)==(0);
    if (!($28)) {
     (_EmitError(49)|0);
     break;
    }
    $29 = HEAP32[15456>>2]|0;
    $30 = ($29|0)==(3);
    if ($30) {
     $31 = $0;
     $32 = ((($31)) + 4|0);
     HEAP32[$32>>2] = -2;
     break;
    } else {
     $33 = HEAP32[15456>>2]|0;
     $34 = $0;
     $35 = ((($34)) + 4|0);
     HEAP32[$35>>2] = $33;
     break;
    }
   }
  }
  else if ((label|0) == 16) {
   $56 = $0;
   $57 = ((($56)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)!=(-2);
   if ($59) {
    $60 = $1;
    $61 = ((($60)) + 72|0);
    $62 = ((($61)) + 32|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if ($64) {
     (_EmitError(49)|0);
     break;
    }
    $65 = $0;
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(3);
    if ($68) {
     $69 = $0;
     $70 = ((($69)) + 4|0);
     HEAP32[$70>>2] = -2;
    }
   }
  }
 } while(0);
 $93 = $opndidx;
 $94 = $0;
 $95 = ((($94)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = (20136 + (($98*12)|0)|0);
 $100 = (($99) + ($93<<2)|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)==(0);
 if ($102) {
  $103 = $0;
  $104 = ((($103)) + 101|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105 & -2;
  HEAP8[$104>>0] = $106;
  $107 = $0;
  $108 = ((($107)) + 9|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109 & -3;
  HEAP8[$108>>0] = $110;
 }
 $111 = $opndidx;
 $112 = $0;
 $113 = ((($112)) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = (20136 + (($116*12)|0)|0);
 $118 = (($117) + ($111<<2)|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0);
 if (!($120)) {
  STACKTOP = sp;return;
 }
 $121 = $opndidx;
 $122 = $0;
 $123 = ((($122)) + 24|0);
 $124 = (($123) + (($121*24)|0)|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0);
 if (!($126)) {
  STACKTOP = sp;return;
 }
 $127 = $opndidx;
 $128 = $0;
 $129 = ((($128)) + 24|0);
 $130 = (($129) + (($127*24)|0)|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $0;
 $133 = (_OperandSize($131,$132)|0);
 $op_size = $133;
 $134 = $op_size;
 $135 = ($134|0)==(0);
 if ($135) {
  $136 = $opndidx;
  $137 = $0;
  $138 = ((($137)) + 24|0);
  $139 = (($138) + (($136*24)|0)|0);
  $140 = ((($139)) + 16|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(0|0);
  if ($142) {
   label = 37;
  } else {
   $143 = $opndidx;
   $144 = $0;
   $145 = ((($144)) + 24|0);
   $146 = (($145) + (($143*24)|0)|0);
   $147 = ((($146)) + 16|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ((($148)) + 36|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = ((($150)) + 16|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)!=(0);
   if ($153) {
    label = 37;
   }
  }
  if ((label|0) == 37) {
   (_EmitError(182)|0);
  }
  $op_size = 1;
 }
 $154 = $op_size;
 switch ($154|0) {
 case 1:  {
  $155 = $0;
  $156 = ((($155)) + 101|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157 & -2;
  HEAP8[$156>>0] = $158;
  $159 = $0;
  $160 = ((($159)) + 9|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161 & -3;
  HEAP8[$160>>0] = $162;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $163 = $0;
  $164 = ((($163)) + 101|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165 & -2;
  $167 = $166 | 1;
  HEAP8[$164>>0] = $167;
  $168 = $0;
  $169 = ((($168)) + 98|0);
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = ($171|0)!=(0);
  $173 = $172 ? 1 : 0;
  $174 = $173&255;
  $175 = $0;
  $176 = ((($175)) + 9|0);
  $177 = HEAP8[$176>>0]|0;
  $178 = $174 & 1;
  $179 = ($178 << 1)&255;
  $180 = $177 & -3;
  $181 = $180 | $179;
  HEAP8[$176>>0] = $181;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $182 = $0;
  $183 = ((($182)) + 101|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184 & -2;
  $186 = $185 | 1;
  HEAP8[$183>>0] = $186;
  $187 = $0;
  $188 = ((($187)) + 98|0);
  $189 = HEAP8[$188>>0]|0;
  $190 = $189&255;
  $191 = ($190|0)!=(0);
  $192 = $191 ? 0 : 1;
  $193 = $192&255;
  $194 = $0;
  $195 = ((($194)) + 9|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = $193 & 1;
  $198 = ($197 << 1)&255;
  $199 = $196 & -3;
  $200 = $199 | $198;
  HEAP8[$195>>0] = $200;
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $201 = $0;
  $202 = ((($201)) + 98|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = ($204|0)==(2);
  if (!($205)) {
   STACKTOP = sp;return;
  }
  $206 = $0;
  $207 = ((($206)) + 101|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = $208 & -2;
  $210 = $209 | 1;
  HEAP8[$207>>0] = $210;
  $211 = $0;
  $212 = ((($211)) + 9|0);
  $213 = HEAP8[$212>>0]|0;
  $214 = $213 & -3;
  HEAP8[$212>>0] = $214;
  $215 = $0;
  $216 = ((($215)) + 8|0);
  HEAP8[$216>>0] = 8;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _check_size($CodeInfo,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $opndx = $opndx|0;
 var $$old = 0, $$old28 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op1_size = 0, $op2 = 0, $op2_size = 0, $op3_size = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0;
 var $or$cond29 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $rc = 0, $vararg_buffer = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer51 = sp + 64|0;
 $vararg_buffer48 = sp + 56|0;
 $vararg_buffer45 = sp + 48|0;
 $vararg_buffer42 = sp + 40|0;
 $vararg_buffer38 = sp + 32|0;
 $vararg_buffer34 = sp + 24|0;
 $vararg_buffer32 = sp + 16|0;
 $vararg_buffer30 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $CodeInfo;
 $2 = $opndx;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $op1 = $5;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $op2 = $9;
 $rc = 0;
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 L1: do {
  switch ($12|0) {
  case 540:  {
   $13 = $op2;
   $14 = ($13|0)==(514);
   if ($14) {
    $15 = $op1;
    switch ($15|0) {
    case 132:  {
     break;
    }
    case 129:  {
     $16 = $1;
     $17 = ((($16)) + 101|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18 & -2;
     HEAP8[$17>>0] = $19;
     break;
    }
    default: {
     break L1;
    }
    }
    $20 = $1;
    $21 = ((($20)) + 98|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)!=(0);
    if ($23) {
     $24 = $1;
     $25 = ((($24)) + 9|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26 & -3;
     HEAP8[$25>>0] = $27;
    }
   }
   break;
  }
  case 562:  {
   $28 = $op1;
   $29 = ($28|0)==(514);
   if ($29) {
    $30 = $op2;
    switch ($30|0) {
    case 132:  {
     break;
    }
    case 129:  {
     $31 = $1;
     $32 = ((($31)) + 101|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33 & -2;
     HEAP8[$32>>0] = $34;
     break;
    }
    default: {
     break L1;
    }
    }
    $35 = $1;
    $36 = ((($35)) + 98|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)!=(0);
    if ($38) {
     $39 = $1;
     $40 = ((($39)) + 9|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41 & -3;
     HEAP8[$40>>0] = $42;
    }
   }
   break;
  }
  case 868: case 1112: case 1111: case 1190: case 1189: case 1184: case 1183: case 1118: case 1119: case 1115: case 1114: case 855: case 847: case 854: case 846: case 1032: case 537: case 552:  {
   break;
  }
  case 438: case 437: case 436: case 435: case 434: case 433: case 432: case 431:  {
   $43 = $1;
   $44 = ((($43)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(-1627389952);
   do {
    if ($46) {
     $47 = $1;
     $48 = ((($47)) + 101|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49&255) >>> 6;
     $51 = $50 & 1;
     $52 = $51&255;
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = $2;
      $55 = ((($54)) + 56|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==(0|0);
      if (!($57)) {
       $58 = $2;
       $59 = ((($58)) + 56|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($60)) + 16|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)!=(0);
       if (!($63)) {
        break;
       }
      }
      (_EmitErr(182,$vararg_buffer)|0);
      $rc = -1;
      break L1;
     }
    }
   } while(0);
   $64 = $2;
   $65 = ((($64)) + 72|0);
   $66 = ((($65)) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(1);
   $69 = HEAP32[4884>>2]|0;
   $70 = ($69|0)==(0);
   $or$cond = $68 & $70;
   if ($or$cond) {
    $71 = $2;
    $72 = ((($71)) + 72|0);
    $73 = ((($72)) + 52|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 & 1;
    $76 = $75&255;
    $77 = ($76|0)==(0);
    if ($77) {
     $78 = $2;
     $79 = ((($78)) + 72|0);
     $80 = ((($79)) + 56|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)!=(0|0);
     if ($82) {
      $83 = $2;
      $84 = ((($83)) + 72|0);
      $85 = ((($84)) + 56|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ((($86)) + 16|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(0);
      if ($89) {
       $90 = $1;
       $91 = ((($90)) + 24|0);
       $92 = ((($91)) + 24|0);
       HEAP32[$92>>2] = 65536;
       $93 = $1;
       $94 = ((($93)) + 24|0);
       $95 = ((($94)) + 24|0);
       $96 = ((($95)) + 8|0);
       HEAP32[$96>>2] = 1;
      }
     }
    }
   }
   $97 = $op1;
   $98 = $1;
   $99 = (_OperandSize($97,$98)|0);
   $100 = ($99|0)>(1);
   if ($100) {
    $101 = $1;
    $102 = ((($101)) + 101|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103 & -2;
    $105 = $104 | 1;
    HEAP8[$102>>0] = $105;
   }
   $106 = $op2;
   $107 = ($106|0)==(257);
   if ($107) {
    $108 = $1;
    $109 = ((($108)) + 96|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = $111 & 199;
    $113 = $112&255;
    HEAP8[$109>>0] = $113;
   }
   break;
  }
  case 556: case 555: case 554: case 474: case 473:  {
   $114 = $op1;
   $115 = $1;
   $116 = (_OperandSize($114,$115)|0);
   $117 = (($116) + 2)|0;
   $op1_size = $117;
   $118 = $op2;
   $119 = $1;
   $120 = (_OperandSize($118,$119)|0);
   $op2_size = $120;
   $121 = $op2_size;
   $122 = ($121|0)!=(0);
   if ($122) {
    $123 = $op1_size;
    $124 = $op2_size;
    $125 = ($123|0)!=($124|0);
    if ($125) {
     $126 = (_EmitError(71)|0);
     $0 = $126;
     $662 = $0;
     STACKTOP = sp;return ($662|0);
    }
   }
   break;
  }
  case 560: case 559:  {
   $127 = $1;
   $128 = ((($127)) + 101|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129 & -2;
   HEAP8[$128>>0] = $130;
   $131 = $op1;
   $132 = $1;
   $133 = (_OperandSize($131,$132)|0);
   $op1_size = $133;
   $134 = $op2;
   $135 = $1;
   $136 = (_OperandSize($134,$135)|0);
   $op2_size = $136;
   $137 = $op2_size;
   $138 = ($137|0)==(0);
   $139 = HEAP32[4884>>2]|0;
   $140 = ($139|0)==(1);
   $or$cond3 = $138 & $140;
   do {
    if ($or$cond3) {
     $141 = $op1_size;
     $142 = ($141|0)==(2);
     if ($142) {
      HEAP32[$vararg_buffer30>>2] = 109346;
      _EmitWarn(2,73,$vararg_buffer30);
      break;
     } else {
      (_EmitErr(182,$vararg_buffer32)|0);
      break;
     }
    }
   } while(0);
   $143 = $op1_size;
   switch ($143|0) {
   case 4: case 8:  {
    $144 = $op2_size;
    $145 = ($144|0)<(2);
    do {
     if (!($145)) {
      $146 = $op2_size;
      $147 = ($146|0)==(2);
      if ($147) {
       $148 = $1;
       $149 = ((($148)) + 101|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150 & -2;
       $152 = $151 | 1;
       HEAP8[$149>>0] = $152;
       break;
      } else {
       (_EmitError(59)|0);
       $rc = -1;
       break;
      }
     }
    } while(0);
    $153 = $1;
    $154 = ((($153)) + 98|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = ($156|0)!=(0);
    $158 = $157 ? 0 : 1;
    $159 = $158&255;
    $160 = $1;
    $161 = ((($160)) + 9|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $159 & 1;
    $164 = ($163 << 1)&255;
    $165 = $162 & -3;
    $166 = $165 | $164;
    HEAP8[$161>>0] = $166;
    break L1;
    break;
   }
   case 2:  {
    $167 = $op2_size;
    $168 = ($167|0)>=(2);
    if ($168) {
     (_EmitError(59)|0);
     $rc = -1;
    }
    $169 = $1;
    $170 = ((($169)) + 98|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $173 = ($172|0)!=(0);
    $174 = $173 ? 1 : 0;
    $175 = $174&255;
    $176 = $1;
    $177 = ((($176)) + 9|0);
    $178 = HEAP8[$177>>0]|0;
    $179 = $175 & 1;
    $180 = ($179 << 1)&255;
    $181 = $178 & -3;
    $182 = $181 | $180;
    HEAP8[$177>>0] = $182;
    break L1;
    break;
   }
   default: {
    (_EmitError(60)|0);
    $rc = -1;
    break L1;
   }
   }
   break;
  }
  case 486:  {
   $183 = $1;
   $184 = ((($183)) + 9|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185 & -3;
   HEAP8[$184>>0] = $186;
   label = 92;
   break;
  }
  case 551: case 550:  {
   $187 = HEAP8[(556)>>0]|0;
   $188 = $187&255;
   $189 = ($188|0)!=(2);
   if ($189) {
    label = 92;
   } else {
    $190 = $op2;
    $191 = $190 & -1627389952;
    $192 = ($191|0)==(0);
    if ($192) {
     label = 92;
    } else {
     $193 = $op2;
     $194 = $1;
     $195 = (_OperandSize($193,$194)|0);
     $op2_size = $195;
     $196 = $op2_size;
     $197 = ($196|0)!=(2);
     $198 = $op2_size;
     $199 = ($198|0)!=(0);
     $or$cond5 = $197 & $199;
     if ($or$cond5) {
      $200 = (_EmitError(71)|0);
      $0 = $200;
      $662 = $0;
      STACKTOP = sp;return ($662|0);
     } else {
      $201 = $op1;
      $202 = $1;
      $203 = (_OperandSize($201,$202)|0);
      $op1_size = $203;
      $204 = $op1_size;
      $205 = ($204|0)!=(2);
      if (!($205)) {
       break L1;
      }
      $206 = $1;
      $207 = ((($206)) + 9|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $208 & -3;
      HEAP8[$207>>0] = $209;
      break L1;
     }
    }
   }
   break;
  }
  case 539:  {
   $210 = $1;
   $211 = ((($210)) + 24|0);
   $212 = ((($211)) + 48|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)!=(0);
   if ($214) {
    $215 = $op1;
    $216 = $1;
    $217 = (_OperandSize($215,$216)|0);
    $op1_size = $217;
    $218 = $1;
    $219 = ((($218)) + 24|0);
    $220 = ((($219)) + 48|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = $1;
    $223 = (_OperandSize($221,$222)|0);
    $op3_size = $223;
    $224 = $op1_size;
    $225 = ($224|0)==(2);
    $226 = $op3_size;
    $227 = ($226|0)>(2);
    $or$cond7 = $225 & $227;
    if ($or$cond7) {
     $228 = $op1_size;
     $229 = $op3_size;
     HEAP32[$vararg_buffer34>>2] = $228;
     $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
     HEAP32[$vararg_ptr37>>2] = $229;
     (_EmitErr(48,$vararg_buffer34)|0);
     $rc = -1;
     break L1;
    }
    $230 = $1;
    $231 = ((($230)) + 24|0);
    $232 = ((($231)) + 48|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $233 & 393216;
    $235 = ($234|0)!=(0);
    if ($235) {
     $236 = $op1_size;
     $237 = ($236|0)==(2);
     $238 = $237 ? 131072 : 262144;
     $239 = $1;
     $240 = ((($239)) + 24|0);
     $241 = ((($240)) + 48|0);
     HEAP32[$241>>2] = $238;
     label = 92;
    } else {
     label = 92;
    }
   } else {
    label = 92;
   }
   break;
  }
  case 1132: case 1131: case 1130:  {
   $242 = $op2;
   $243 = ($242|0)==(-1627389952);
   if ($243) {
    $244 = $2;
    $245 = ((($244)) + 72|0);
    $246 = ((($245)) + 52|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247 & 1;
    $249 = $248&255;
    $250 = ($249|0)!=(0);
    if ($250) {
     $251 = (_EmitError(182)|0);
     $0 = $251;
     $662 = $0;
     STACKTOP = sp;return ($662|0);
    }
   }
   break;
  }
  case 1133:  {
   $252 = $op1;
   $253 = $252 & 64;
   $254 = ($253|0)!=(0);
   $255 = $op2;
   $256 = ($255|0)==(-1627389952);
   $or$cond29 = $254 & $256;
   if ($or$cond29) {
    label = 60;
   }
   break;
  }
  case 1125:  {
   $$old = $op2;
   $$old28 = ($$old|0)==(-1627389952);
   if ($$old28) {
    label = 60;
   }
   break;
  }
  case 1089:  {
   $262 = $op2;
   $263 = $1;
   $264 = (_OperandSize($262,$263)|0);
   $op2_size = $264;
   $265 = $op2_size;
   $266 = ($265|0)<(2);
   if ($266) {
    $267 = $1;
    $268 = ((($267)) + 9|0);
    $269 = HEAP8[$268>>0]|0;
    $270 = $269 & -3;
    HEAP8[$268>>0] = $270;
    break L1;
   }
   $271 = $op2_size;
   $272 = ($271|0)==(2);
   $273 = $1;
   $274 = ((($273)) + 98|0);
   $275 = HEAP8[$274>>0]|0;
   $276 = $275&255;
   $277 = ($276|0)!=(0);
   if ($272) {
    $278 = $277 ? 1 : 0;
    $279 = $278&255;
    $280 = $1;
    $281 = ((($280)) + 9|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $279 & 1;
    $284 = ($283 << 1)&255;
    $285 = $282 & -3;
    $286 = $285 | $284;
    HEAP8[$281>>0] = $286;
    break L1;
   } else {
    $287 = $277 ? 0 : 1;
    $288 = $287&255;
    $289 = $1;
    $290 = ((($289)) + 9|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $288 & 1;
    $293 = ($292 << 1)&255;
    $294 = $291 & -3;
    $295 = $294 | $293;
    HEAP8[$290>>0] = $295;
    break L1;
   }
   break;
  }
  case 524:  {
   $296 = $op1;
   $297 = $296 & 6144;
   $298 = ($297|0)!=(0);
   $299 = $op2;
   if ($298) {
    $300 = $1;
    $301 = (_OperandSize($299,$300)|0);
    $op2_size = $301;
    $302 = $op2_size;
    $303 = ($302|0)==(2);
    $304 = $op2_size;
    $305 = ($304|0)==(4);
    $or$cond9 = $303 | $305;
    if (!($or$cond9)) {
     $306 = $op2_size;
     $307 = ($306|0)==(8);
     if (!($307)) {
      label = 92;
      break L1;
     }
     $308 = HEAP8[(556)>>0]|0;
     $309 = $308&255;
     $310 = ($309|0)==(2);
     if (!($310)) {
      label = 92;
      break L1;
     }
    }
    $0 = 0;
    $662 = $0;
    STACKTOP = sp;return ($662|0);
   }
   $311 = $299 & 6144;
   $312 = ($311|0)!=(0);
   $313 = $op1;
   if ($312) {
    $314 = $1;
    $315 = (_OperandSize($313,$314)|0);
    $op1_size = $315;
    $316 = $op1_size;
    $317 = ($316|0)==(2);
    $318 = $op1_size;
    $319 = ($318|0)==(4);
    $or$cond11 = $317 | $319;
    if (!($or$cond11)) {
     $320 = $op1_size;
     $321 = ($320|0)==(8);
     if (!($321)) {
      label = 92;
      break L1;
     }
     $322 = HEAP8[(556)>>0]|0;
     $323 = $322&255;
     $324 = ($323|0)==(2);
     if (!($324)) {
      label = 92;
      break L1;
     }
    }
    $0 = 0;
    $662 = $0;
    STACKTOP = sp;return ($662|0);
   }
   $325 = $313 & -1627389952;
   $326 = ($325|0)!=(0);
   if ($326) {
    $327 = $op2;
    $328 = $327 & 128;
    $329 = ($328|0)!=(0);
    if ($329) {
     $330 = $1;
     $331 = ((($330)) + 101|0);
     $332 = HEAP8[$331>>0]|0;
     $333 = ($332&255) >>> 1;
     $334 = $333 & 1;
     $335 = $334&255;
     $336 = ($335|0)==(0);
     $337 = $1;
     if ($336) {
      $338 = ((($337)) + 24|0);
      $339 = ((($338)) + 24|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = $340 & -129;
      HEAP32[$339>>2] = $341;
      label = 92;
      break L1;
     }
     $342 = ((($337)) + 98|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343&255;
     $345 = ($344|0)==(2);
     if (!($345)) {
      label = 92;
      break L1;
     }
     $346 = $1;
     $347 = ((($346)) + 24|0);
     $348 = ((($347)) + 8|0);
     $349 = $348;
     $350 = $349;
     $351 = HEAP32[$350>>2]|0;
     $352 = (($349) + 4)|0;
     $353 = $352;
     $354 = HEAP32[$353>>2]|0;
     $355 = ($354>>>0)<(0);
     $356 = ($351>>>0)<(2147483648);
     $357 = ($354|0)==(0);
     $358 = $357 & $356;
     $359 = $355 | $358;
     if (!($359)) {
      $360 = $1;
      $361 = ((($360)) + 24|0);
      $362 = ((($361)) + 8|0);
      $363 = $362;
      $364 = $363;
      $365 = HEAP32[$364>>2]|0;
      $366 = (($363) + 4)|0;
      $367 = $366;
      $368 = HEAP32[$367>>2]|0;
      $369 = ($368>>>0)>(4294967295);
      $370 = ($365>>>0)>=(2147483648);
      $371 = ($368|0)==(-1);
      $372 = $371 & $370;
      $373 = $369 | $372;
      if (!($373)) {
       label = 92;
       break L1;
      }
     }
     $374 = $1;
     $375 = ((($374)) + 24|0);
     $376 = ((($375)) + 24|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = $377 & -129;
     HEAP32[$376>>2] = $378;
     label = 92;
     break L1;
    }
   }
   $379 = $op1;
   $380 = $379 & 128;
   $381 = ($380|0)!=(0);
   if ($381) {
    $382 = $op2;
    $383 = $382 & -1627389952;
    $384 = ($383|0)!=(0);
    if ($384) {
     $385 = $1;
     $386 = ((($385)) + 101|0);
     $387 = HEAP8[$386>>0]|0;
     $388 = ($387&255) >>> 1;
     $389 = $388 & 1;
     $390 = $389&255;
     $391 = ($390|0)==(0);
     $392 = $1;
     if ($391) {
      $393 = ((($392)) + 24|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = $394 & -129;
      HEAP32[$393>>2] = $395;
      label = 92;
      break L1;
     }
     $396 = ((($392)) + 98|0);
     $397 = HEAP8[$396>>0]|0;
     $398 = $397&255;
     $399 = ($398|0)==(2);
     if ($399) {
      $400 = $1;
      $401 = ((($400)) + 24|0);
      $402 = ((($401)) + 24|0);
      $403 = ((($402)) + 8|0);
      $404 = $403;
      $405 = $404;
      $406 = HEAP32[$405>>2]|0;
      $407 = (($404) + 4)|0;
      $408 = $407;
      $409 = HEAP32[$408>>2]|0;
      $410 = ($409>>>0)<(0);
      $411 = ($406>>>0)<(2147483648);
      $412 = ($409|0)==(0);
      $413 = $412 & $411;
      $414 = $410 | $413;
      if (!($414)) {
       $415 = $1;
       $416 = ((($415)) + 24|0);
       $417 = ((($416)) + 24|0);
       $418 = ((($417)) + 8|0);
       $419 = $418;
       $420 = $419;
       $421 = HEAP32[$420>>2]|0;
       $422 = (($419) + 4)|0;
       $423 = $422;
       $424 = HEAP32[$423>>2]|0;
       $425 = ($424>>>0)>(4294967295);
       $426 = ($421>>>0)>=(2147483648);
       $427 = ($424|0)==(-1);
       $428 = $427 & $426;
       $429 = $425 | $428;
       if (!($429)) {
        label = 92;
        break L1;
       }
      }
      $430 = $1;
      $431 = ((($430)) + 24|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = $432 & -129;
      HEAP32[$431>>2] = $433;
      label = 92;
     } else {
      label = 92;
     }
    } else {
     label = 92;
    }
   } else {
    label = 92;
   }
   break;
  }
  default: {
   label = 92;
  }
  }
 } while(0);
 L121: do {
  if ((label|0) == 60) {
   $257 = $1;
   $258 = ((($257)) + 24|0);
   $259 = ((($258)) + 24|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = $260 | 536870912;
   HEAP32[$259>>2] = $261;
  }
  else if ((label|0) == 92) {
   $434 = $op1;
   $435 = $1;
   $436 = (_OperandSize($434,$435)|0);
   $op1_size = $436;
   $437 = $op2;
   $438 = $1;
   $439 = (_OperandSize($437,$438)|0);
   $op2_size = $439;
   $440 = $op1_size;
   $441 = $op2_size;
   $442 = ($440|0)>($441|0);
   if ($442) {
    $443 = $op2;
    $444 = ($443>>>0)>=(65536);
    $445 = $op2;
    $446 = ($445>>>0)<=(262144);
    $or$cond13 = $444 & $446;
    if ($or$cond13) {
     $447 = $op1_size;
     $op2_size = $447;
    }
   }
   $448 = $op1_size;
   $449 = ($448|0)==(1);
   $450 = $op2;
   $451 = ($450|0)==(131072);
   $or$cond15 = $449 & $451;
   if ($or$cond15) {
    $452 = $1;
    $453 = ((($452)) + 24|0);
    $454 = ((($453)) + 24|0);
    $455 = ((($454)) + 8|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = ($456|0)<=(255);
    if ($457) {
     $458 = $1;
     $459 = ((($458)) + 24|0);
     $460 = ((($459)) + 24|0);
     $461 = ((($460)) + 8|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = ($462|0)>=(-255);
     if ($463) {
      $464 = $rc;
      $0 = $464;
      $662 = $0;
      STACKTOP = sp;return ($662|0);
     }
    }
   }
   $465 = $op1_size;
   $466 = $op2_size;
   $467 = ($465|0)!=($466|0);
   if ($467) {
    $468 = $op1;
    $469 = $op2;
    $470 = $468 | $469;
    $471 = $470 & 112;
    $472 = ($471|0)!=(0);
    if (!($472)) {
     $473 = $op1_size;
     $474 = ($473|0)!=(0);
     $475 = $op2_size;
     $476 = ($475|0)!=(0);
     $or$cond17 = $474 & $476;
     if ($or$cond17) {
      $477 = $op1_size;
      $478 = $op2_size;
      HEAP32[$vararg_buffer38>>2] = $477;
      $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
      HEAP32[$vararg_ptr41>>2] = $478;
      (_EmitErr(48,$vararg_buffer38)|0);
      $rc = -1;
     }
    }
    $479 = $op1_size;
    $480 = ($479|0)==(0);
    if ($480) {
     $481 = $op1;
     $482 = $481 & -16777216;
     $483 = ($482|0)!=(0);
     if ($483) {
      $484 = $op2;
      $485 = $484 & 458752;
      $486 = ($485|0)!=(0);
      if ($486) {
       $p = 109569;
       $487 = $1;
       $488 = ((($487)) + 24|0);
       $489 = ((($488)) + 24|0);
       $490 = ((($489)) + 8|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = ($491>>>0)>(65535);
       $493 = $op2_size;
       $494 = ($493|0)==(4);
       $or$cond19 = $492 | $494;
       $495 = $1;
       do {
        if ($or$cond19) {
         $496 = ((($495)) + 101|0);
         $497 = HEAP8[$496>>0]|0;
         $498 = $497 & -2;
         $499 = $498 | 1;
         HEAP8[$496>>0] = $499;
         $500 = HEAP8[(556)>>0]|0;
         $501 = $500&255;
         $502 = ($501|0)==(0);
         $503 = $op2_size;
         $504 = ($503|0)>(2);
         $or$cond21 = $502 & $504;
         if ($or$cond21) {
          $505 = $1;
          $506 = ((($505)) + 24|0);
          $507 = ((($506)) + 24|0);
          $508 = ((($507)) + 8|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = ($509|0)>(65535);
          if (!($510)) {
           $511 = $1;
           $512 = ((($511)) + 24|0);
           $513 = ((($512)) + 24|0);
           $514 = ((($513)) + 8|0);
           $515 = HEAP32[$514>>2]|0;
           $516 = ($515|0)<(-65535);
           if (!($516)) {
            $op2_size = 2;
           }
          }
         }
         $517 = $op2_size;
         $518 = ($517|0)<=(2);
         if ($518) {
          $519 = $1;
          $520 = ((($519)) + 24|0);
          $521 = ((($520)) + 24|0);
          $522 = ((($521)) + 8|0);
          $523 = HEAP32[$522>>2]|0;
          $524 = ($523|0)>(-32768);
          if ($524) {
           $525 = HEAP8[(556)>>0]|0;
           $526 = $525&255;
           $527 = ($526|0)==(0);
           if ($527) {
            $528 = $1;
            $529 = ((($528)) + 20|0);
            HEAP32[$529>>2] = 1;
            $530 = $1;
            $531 = ((($530)) + 24|0);
            $532 = ((($531)) + 24|0);
            HEAP32[$532>>2] = 131072;
            break;
           }
          }
         }
         $533 = $1;
         $534 = ((($533)) + 20|0);
         HEAP32[$534>>2] = 3;
         $535 = $1;
         $536 = ((($535)) + 24|0);
         $537 = ((($536)) + 24|0);
         HEAP32[$537>>2] = 262144;
         $p = 109585;
        } else {
         $538 = ((($495)) + 24|0);
         $539 = ((($538)) + 24|0);
         $540 = ((($539)) + 8|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = ($541>>>0)>(255);
         $543 = $op2_size;
         $544 = ($543|0)==(2);
         $or$cond23 = $542 | $544;
         $545 = $1;
         $546 = ((($545)) + 20|0);
         if ($or$cond23) {
          HEAP32[$546>>2] = 1;
          $547 = $1;
          $548 = ((($547)) + 101|0);
          $549 = HEAP8[$548>>0]|0;
          $550 = $549 & -2;
          $551 = $550 | 1;
          HEAP8[$548>>0] = $551;
          $552 = $1;
          $553 = ((($552)) + 24|0);
          $554 = ((($553)) + 24|0);
          HEAP32[$554>>2] = 131072;
          break;
         } else {
          HEAP32[$546>>2] = 0;
          $555 = $1;
          $556 = ((($555)) + 24|0);
          $557 = ((($556)) + 24|0);
          HEAP32[$557>>2] = 65536;
          $p = 109346;
          break;
         }
        }
       } while(0);
       $558 = $2;
       $559 = ((($558)) + 72|0);
       $560 = ((($559)) + 52|0);
       $561 = HEAP8[$560>>0]|0;
       $562 = ($561&255) >>> 1;
       $563 = $562 & 1;
       $564 = $563&255;
       $565 = ($564|0)==(0);
       if (!($565)) {
        break;
       }
       $566 = $1;
       $567 = ((($566)) + 24|0);
       $568 = ((($567)) + 16|0);
       $569 = HEAP32[$568>>2]|0;
       $570 = ($569|0)==(0|0);
       $571 = HEAP32[4884>>2]|0;
       $572 = ($571|0)==(0);
       $or$cond25 = $570 & $572;
       if ($or$cond25) {
        $573 = $1;
        $574 = ((($573)) + 101|0);
        $575 = HEAP8[$574>>0]|0;
        $576 = ($575&255) >>> 6;
        $577 = $576 & 1;
        $578 = $577&255;
        $579 = ($578|0)==(0);
        if (!($579)) {
         label = 122;
        }
       } else {
        label = 122;
       }
       if ((label|0) == 122) {
        $580 = $1;
        $581 = ((($580)) + 24|0);
        $582 = ((($581)) + 16|0);
        $583 = HEAP32[$582>>2]|0;
        $584 = ($583|0)!=(0|0);
        $585 = HEAP32[4884>>2]|0;
        $586 = ($585|0)==(1);
        $or$cond27 = $584 & $586;
        if (!($or$cond27)) {
         break;
        }
       }
       $587 = $p;
       HEAP32[$vararg_buffer42>>2] = $587;
       _EmitWarn(1,73,$vararg_buffer42);
       break;
      }
     }
     $588 = $op1;
     $589 = $588 & -16777216;
     $590 = ($589|0)!=(0);
     if ($590) {
      $591 = $op2;
      $592 = $591 & 6159;
      $593 = ($592|0)!=(0);
      if ($593) {
       break;
      }
     }
     $594 = $op1;
     $595 = $594 & 48;
     $596 = ($595|0)!=(0);
     if ($596) {
      $597 = $op2;
      $598 = $597 & 458752;
      $599 = ($598|0)!=(0);
      if ($599) {
       $600 = $1;
       $601 = ((($600)) + 24|0);
       $602 = ((($601)) + 24|0);
       $603 = ((($602)) + 8|0);
       $604 = HEAP32[$603>>2]|0;
       $605 = ($604>>>0)>(65535);
       $606 = $1;
       $607 = ((($606)) + 24|0);
       $608 = ((($607)) + 24|0);
       if ($605) {
        HEAP32[$608>>2] = 262144;
        break;
       }
       $609 = ((($608)) + 8|0);
       $610 = HEAP32[$609>>2]|0;
       $611 = ($610>>>0)>(255);
       $612 = $1;
       $613 = ((($612)) + 24|0);
       $614 = ((($613)) + 24|0);
       if ($611) {
        HEAP32[$614>>2] = 131072;
        break;
       } else {
        HEAP32[$614>>2] = 65536;
        break;
       }
      }
     }
     $615 = $op1;
     $616 = $op2;
     $617 = $615 | $616;
     $618 = $617 & 48;
     $619 = ($618|0)!=(0);
     if (!($619)) {
      $620 = $op2_size;
      switch ($620|0) {
      case 1:  {
       $621 = $1;
       $622 = ((($621)) + 20|0);
       HEAP32[$622>>2] = 0;
       $623 = HEAP32[4884>>2]|0;
       $624 = ($623|0)==(0);
       if (!($624)) {
        break L121;
       }
       $625 = $op2;
       $626 = $625 & 458752;
       $627 = ($626|0)!=(0);
       if (!($627)) {
        break L121;
       }
       HEAP32[$vararg_buffer45>>2] = 109346;
       _EmitWarn(1,73,$vararg_buffer45);
       break L121;
       break;
      }
      case 2:  {
       $628 = $1;
       $629 = ((($628)) + 20|0);
       HEAP32[$629>>2] = 1;
       $630 = $1;
       $631 = ((($630)) + 101|0);
       $632 = HEAP8[$631>>0]|0;
       $633 = $632 & -2;
       $634 = $633 | 1;
       HEAP8[$631>>0] = $634;
       $635 = HEAP32[4884>>2]|0;
       $636 = ($635|0)==(0);
       if ($636) {
        $637 = $op2;
        $638 = $637 & 458752;
        $639 = ($638|0)!=(0);
        if ($639) {
         HEAP32[$vararg_buffer48>>2] = 109569;
         _EmitWarn(1,73,$vararg_buffer48);
        }
       }
       $640 = $1;
       $641 = ((($640)) + 98|0);
       $642 = HEAP8[$641>>0]|0;
       $643 = ($642<<24>>24)!=(0);
       if (!($643)) {
        break L121;
       }
       $644 = $1;
       $645 = ((($644)) + 9|0);
       $646 = HEAP8[$645>>0]|0;
       $647 = $646 & -3;
       $648 = $647 | 2;
       HEAP8[$645>>0] = $648;
       break L121;
       break;
      }
      case 4:  {
       $649 = $1;
       $650 = ((($649)) + 20|0);
       HEAP32[$650>>2] = 3;
       $651 = $1;
       $652 = ((($651)) + 101|0);
       $653 = HEAP8[$652>>0]|0;
       $654 = $653 & -2;
       $655 = $654 | 1;
       HEAP8[$652>>0] = $655;
       $656 = HEAP32[4884>>2]|0;
       $657 = ($656|0)==(0);
       if (!($657)) {
        break L121;
       }
       $658 = $op2;
       $659 = $658 & 458752;
       $660 = ($659|0)!=(0);
       if (!($660)) {
        break L121;
       }
       HEAP32[$vararg_buffer51>>2] = 109585;
       _EmitWarn(1,73,$vararg_buffer51);
       break L121;
       break;
      }
      default: {
       break L121;
      }
      }
     }
    }
   }
  }
 } while(0);
 $661 = $rc;
 $0 = $661;
 $662 = $0;
 STACKTOP = sp;return ($662|0);
}
function _idata_nofixup($CodeInfo,$CurrOpnd,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $op_type = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $size = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>=(373);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<=(422);
  if ($11) {
   $12 = $1;
   $13 = $2;
   $14 = $3;
   $15 = (_process_branch($12,$13,$14)|0);
   $0 = $15;
   $259 = $0;
   STACKTOP = sp;return ($259|0);
  }
 }
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $value = $17;
 $18 = $value;
 $19 = $2;
 $20 = $1;
 $21 = ((($20)) + 24|0);
 $22 = (($21) + (($19*24)|0)|0);
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $18;
 $24 = $3;
 $25 = ((($24)) + 8|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)!=(0);
 $33 = ($31|0)!=(0);
 $34 = $32 | $33;
 if ($34) {
  $35 = $3;
  $36 = (_EmitConstError($35)|0);
  $0 = $36;
  $259 = $0;
  STACKTOP = sp;return ($259|0);
 }
 $37 = $1;
 $38 = ((($37)) + 98|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = ($40|0)==(2);
 do {
  if ($41) {
   $42 = $1;
   $43 = ((($42)) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(524);
   $46 = $2;
   $47 = ($46|0)==(1);
   $or$cond = $45 & $47;
   if ($or$cond) {
    $48 = $1;
    $49 = ((($48)) + 24|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $50 & 8;
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $3;
     $54 = $53;
     $55 = $54;
     $56 = HEAP32[$55>>2]|0;
     $57 = (($54) + 4)|0;
     $58 = $57;
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)>(0);
     $61 = ($56>>>0)>(2147483647);
     $62 = ($59|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if (!($64)) {
      $65 = $3;
      $66 = $65;
      $67 = $66;
      $68 = HEAP32[$67>>2]|0;
      $69 = (($66) + 4)|0;
      $70 = $69;
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)<(-1);
      $73 = ($68>>>0)<(2147483648);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if (!($76)) {
       $77 = $3;
       $78 = ((($77)) + 52|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ($79&255) >>> 1;
       $81 = $80 & 1;
       $82 = $81&255;
       $83 = ($82|0)!=(0);
       if (!($83)) {
        break;
       }
       $84 = $3;
       $85 = ((($84)) + 44|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($86|0)==(7);
       if (!($87)) {
        $88 = $3;
        $89 = ((($88)) + 44|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($90|0)==(71);
        if (!($91)) {
         break;
        }
       }
      }
     }
     $92 = $2;
     $93 = $1;
     $94 = ((($93)) + 24|0);
     $95 = (($94) + (($92*24)|0)|0);
     HEAP32[$95>>2] = 524288;
     $96 = $3;
     $97 = ((($96)) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $2;
     $100 = $1;
     $101 = ((($100)) + 24|0);
     $102 = (($101) + (($99*24)|0)|0);
     $103 = ((($102)) + 8|0);
     $104 = ((($103)) + 4|0);
     HEAP32[$104>>2] = $98;
     $0 = 0;
     $259 = $0;
     STACKTOP = sp;return ($259|0);
    }
   }
  }
 } while(0);
 $105 = $3;
 $106 = $105;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($106) + 4)|0;
 $110 = $109;
 $111 = HEAP32[$110>>2]|0;
 $112 = 296;
 $113 = $112;
 $114 = HEAP32[$113>>2]|0;
 $115 = (($112) + 4)|0;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = ($111|0)<($117|0);
 $119 = ($108>>>0)<=($114>>>0);
 $120 = ($111|0)==($117|0);
 $121 = $120 & $119;
 $122 = $118 | $121;
 if (!($122)) {
  $123 = $3;
  $124 = $123;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = 272;
  $131 = $130;
  $132 = HEAP32[$131>>2]|0;
  $133 = (($130) + 4)|0;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = ($129|0)>($135|0);
  $137 = ($126>>>0)>($132>>>0);
  $138 = ($129|0)==($135|0);
  $139 = $138 & $137;
  $140 = $136 | $139;
  if (!($140)) {
   $143 = $3;
   $144 = ((($143)) + 52|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = ($145&255) >>> 1;
   $147 = $146 & 1;
   $148 = $147&255;
   $149 = ($148|0)!=(0);
   L25: do {
    if ($149) {
     $150 = $1;
     $151 = ((($150)) + 101|0);
     $152 = HEAP8[$151>>0]|0;
     $153 = $152 & -9;
     $154 = $153 | 8;
     HEAP8[$151>>0] = $154;
     $155 = $3;
     $156 = ((($155)) + 44|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $3;
     $159 = ((($158)) + 49|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160&255;
     $162 = $3;
     $163 = ((($162)) + 64|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = (_SizeFromMemtype($157,$161,$164)|0);
     $size = $165;
     $166 = $size;
     switch ($166|0) {
     case 1:  {
      $op_type = 65536;
      break L25;
      break;
     }
     case 2:  {
      $op_type = 131072;
      break L25;
      break;
     }
     case 4:  {
      $op_type = 262144;
      break L25;
      break;
     }
     default: {
      $167 = (_EmitError(49)|0);
      $0 = $167;
      $259 = $0;
      STACKTOP = sp;return ($259|0);
     }
     }
    } else {
     $168 = $value;
     $169 = $168&255;
     $170 = $169 << 24 >> 24;
     $171 = $value;
     $172 = ($170|0)==($171|0);
     if ($172) {
      $op_type = 65536;
      break;
     }
     $173 = $value;
     $174 = ($173|0)<=(65535);
     $175 = $value;
     $176 = ($175|0)>=(-65535);
     $or$cond3 = $174 & $176;
     if ($or$cond3) {
      $op_type = 131072;
      break;
     } else {
      $op_type = 262144;
      break;
     }
    }
   } while(0);
   $177 = $1;
   $178 = ((($177)) + 16|0);
   $179 = HEAP32[$178>>2]|0;
   L41: do {
    switch ($179|0) {
    case 519:  {
     $180 = $3;
     $181 = ((($180)) + 52|0);
     $182 = HEAP8[$181>>0]|0;
     $183 = ($182&255) >>> 1;
     $184 = $183 & 1;
     $185 = $184&255;
     $186 = ($185|0)==(0);
     if ($186) {
      $187 = $1;
      $188 = ((($187)) + 98|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189&255;
      $191 = ($190|0)>(0);
      $192 = $op_type;
      $193 = ($192|0)==(131072);
      $or$cond5 = $191 & $193;
      if ($or$cond5) {
       $op_type = 262144;
      }
     }
     $194 = $op_type;
     $195 = ($194|0)==(131072);
     if ($195) {
      $196 = $1;
      $197 = ((($196)) + 98|0);
      $198 = HEAP8[$197>>0]|0;
      $199 = $198&255;
      $200 = ($199|0)!=(0);
      $201 = $200 ? 1 : 0;
      $202 = $201&255;
      $203 = $1;
      $204 = ((($203)) + 9|0);
      $205 = HEAP8[$204>>0]|0;
      $206 = $202 & 1;
      $207 = ($206 << 1)&255;
      $208 = $205 & -3;
      $209 = $208 | $207;
      HEAP8[$204>>0] = $209;
      break L41;
     }
     $210 = $op_type;
     $211 = ($210|0)==(262144);
     if ($211) {
      $212 = $1;
      $213 = ((($212)) + 98|0);
      $214 = HEAP8[$213>>0]|0;
      $215 = $214&255;
      $216 = ($215|0)!=(0);
      $217 = $216 ? 0 : 1;
      $218 = $217&255;
      $219 = $1;
      $220 = ((($219)) + 9|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $218 & 1;
      $223 = ($222 << 1)&255;
      $224 = $221 & -3;
      $225 = $224 | $223;
      HEAP8[$220>>0] = $225;
     }
     break;
    }
    case 521:  {
     $226 = $op_type;
     $227 = ($226|0)!=(262144);
     if ($227) {
      $op_type = 131072;
      $228 = $value;
      $229 = $228&255;
      $230 = $229 << 24 >> 24;
      $231 = $value;
      $232 = $231&65535;
      $233 = $232 << 16 >> 16;
      $234 = ($230|0)==($233|0);
      $$ = $234 ? 65536 : 131072;
      $op_type = $$;
     }
     break;
    }
    case 483:  {
     $235 = $op_type;
     $236 = ($235|0)==(131072);
     if ($236) {
      $op_type = 262144;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $237 = $2;
   $238 = ($237|0)==(1);
   if ($238) {
    $239 = $1;
    $240 = ((($239)) + 20|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $241 & 128;
    $243 = ($242|0)!=(0);
    if (!($243)) {
     $244 = $1;
     $245 = ((($244)) + 20|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $246 & 31;
     $248 = ($247|0)!=(0);
     if ($248) {
      $249 = $1;
      $250 = ((($249)) + 101|0);
      $251 = HEAP8[$250>>0]|0;
      $252 = $251 & -2;
      $253 = $252 | 1;
      HEAP8[$250>>0] = $253;
     }
    }
   }
   $254 = $op_type;
   $255 = $2;
   $256 = $1;
   $257 = ((($256)) + 24|0);
   $258 = (($257) + (($255*24)|0)|0);
   HEAP32[$258>>2] = $254;
   $0 = 0;
   $259 = $0;
   STACKTOP = sp;return ($259|0);
  }
 }
 $141 = $3;
 $142 = (_EmitConstError($141)|0);
 $0 = $142;
 $259 = $0;
 STACKTOP = sp;return ($259|0);
}
function _memory_operand($CodeInfo,$CurrOpnd,$opndx,$with_fixup) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $opndx = $opndx|0;
 $with_fixup = $with_fixup|0;
 var $$off = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ofssize = 0, $base = 0;
 var $fixup_type = 0, $index = 0, $j = 0, $mem_type = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $size = 0, $ss = 0, $switch = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 16|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer = sp;
 $mem_type = sp + 20|0;
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $opndx;
 $4 = $with_fixup;
 $ss = 0;
 $5 = $3;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = (($14) + (($12*24)|0)|0);
 $16 = ((($15)) + 8|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $8;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $11;
 $21 = $2;
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = (($23) + (($21*24)|0)|0);
 HEAP32[$24>>2] = -1627389952;
 $25 = $3;
 $26 = ((($25)) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $sym = $27;
 $28 = $3;
 $29 = $1;
 (_segm_override($28,$29)|0);
 $30 = $3;
 $31 = ((($30)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(195);
 if ($33) {
  $34 = $1;
  $35 = $3;
  _SetPtrMemtype($34,$35);
 } else {
  $36 = $3;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & 192;
  $40 = ($39|0)==(128);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 49|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = ($44|0)==(254);
   $46 = $sym;
   $47 = ($46|0)!=(0|0);
   $or$cond = $45 & $47;
   if ($or$cond) {
    $48 = $sym;
    $49 = (_GetSymOfssize($48)|0);
    $50 = $49&255;
    $51 = $3;
    $52 = ((($51)) + 49|0);
    HEAP8[$52>>0] = $50;
   }
   $53 = $3;
   $54 = ((($53)) + 44|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $3;
   $57 = ((($56)) + 49|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $3;
   $61 = ((($60)) + 64|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_SizeFromMemtype($55,$59,$62)|0);
   $size = $63;
   $64 = $size;
   $65 = $3;
   $66 = ((($65)) + 44|0);
   (_MemtypeFromSize($64,$66)|0);
  }
 }
 $67 = $1;
 $68 = $3;
 $69 = ((($68)) + 44|0);
 $70 = HEAP32[$69>>2]|0;
 _Set_Memtype($67,$70);
 $71 = $3;
 $72 = ((($71)) + 60|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if ($74) {
  $75 = $3;
  $76 = ((($75)) + 60|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(196);
  if ($80) {
   $81 = $3;
   $82 = ((($81)) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(192);
   if ($84) {
    $85 = $3;
    $86 = ((($85)) + 60|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (_MemtypeFromSize($89,$mem_type)|0);
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = $1;
     $93 = HEAP32[$mem_type>>2]|0;
     _Set_Memtype($92,$93);
    }
   }
  }
  $94 = $3;
  $95 = ((($94)) + 60|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($96)) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0);
  if ($99) {
   $100 = $1;
   $101 = ((($100)) + 101|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102 & -65;
   $104 = $103 | 64;
   HEAP8[$101>>0] = $104;
  }
 }
 $105 = $1;
 $106 = ((($105)) + 16|0);
 $107 = HEAP32[$106>>2]|0;
 $$off = (($107) + -373)|0;
 $switch = ($$off>>>0)<(2);
 L18: do {
  if ($switch) {
   $108 = $1;
   $109 = ((($108)) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==(192);
   if ($111) {
    $112 = HEAP32[(560)>>2]|0;
    $113 = $112 >>> 6;
    $114 = $113 & 1;
    $115 = ($114|0)==(0);
    $116 = HEAP32[4884>>2]|0;
    $117 = ($116>>>0)>(0);
    $or$cond3 = $115 & $117;
    if ($or$cond3) {
     $118 = $3;
     $119 = ((($118)) + 56|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($120|0)==(0|0);
     if ($121) {
      $122 = (_EmitError(182)|0);
      $0 = $122;
      $575 = $0;
      STACKTOP = sp;return ($575|0);
     }
    }
    $123 = $1;
    $124 = ((($123)) + 98|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = ($126|0)==(2);
    if ($127) {
     $136 = 7;
    } else {
     $128 = $1;
     $129 = ((($128)) + 98|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130&255;
     $132 = ($131|0)==(1);
     $133 = $132 ? 3 : 1;
     $136 = $133;
    }
    $134 = $3;
    $135 = ((($134)) + 44|0);
    HEAP32[$135>>2] = $136;
    $137 = $1;
    $138 = $3;
    $139 = ((($138)) + 44|0);
    $140 = HEAP32[$139>>2]|0;
    _Set_Memtype($137,$140);
   }
   $141 = $1;
   $142 = ((($141)) + 20|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $1;
   $145 = ((($144)) + 98|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (_SizeFromMemtype($143,$147,0)|0);
   $j = $148;
   $149 = $j;
   $150 = ($149|0)==(1);
   $151 = $j;
   $152 = ($151|0)>(6);
   $or$cond5 = $150 | $152;
   if ($or$cond5) {
    $153 = $1;
    $154 = ((($153)) + 98|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = ($156|0)!=(2);
    if ($157) {
     $158 = (_EmitError(71)|0);
     $0 = $158;
     $575 = $0;
     STACKTOP = sp;return ($575|0);
    }
   }
   $159 = $3;
   $160 = ((($159)) + 44|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ($161|0)==(130);
   do {
    if (!($162)) {
     $163 = $1;
     $164 = ((($163)) + 20|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(5);
     if (!($166)) {
      $167 = $1;
      $168 = ((($167)) + 20|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($169|0)==(9);
      if ($170) {
       $171 = $1;
       $172 = ((($171)) + 98|0);
       $173 = HEAP8[$172>>0]|0;
       $174 = $173&255;
       $175 = ($174|0)==(2);
       if ($175) {
        break;
       }
      }
      $176 = $1;
      $177 = ((($176)) + 20|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(3);
      if (!($179)) {
       break L18;
      }
      $180 = $1;
      $181 = ((($180)) + 98|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182&255;
      $184 = ($183|0)==(0);
      if ($184) {
       $185 = $3;
       $186 = ((($185)) + 49|0);
       $187 = HEAP8[$186>>0]|0;
       $188 = $187&255;
       $189 = ($188|0)!=(1);
       if ($189) {
        break;
       }
      }
      $190 = $1;
      $191 = ((($190)) + 98|0);
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = ($193|0)==(1);
      if (!($194)) {
       break L18;
      }
      $195 = $3;
      $196 = ((($195)) + 49|0);
      $197 = HEAP8[$196>>0]|0;
      $198 = $197&255;
      $199 = ($198|0)==(0);
      if (!($199)) {
       break L18;
      }
     }
    }
   } while(0);
   $200 = $1;
   $201 = ((($200)) + 101|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202 & -5;
   $204 = $203 | 4;
   HEAP8[$201>>0] = $204;
  }
 } while(0);
 $205 = $1;
 $206 = ((($205)) + 20|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & 128;
 $209 = ($208|0)==(0);
 $210 = $1;
 $211 = ((($210)) + 20|0);
 $212 = HEAP32[$211>>2]|0;
 L49: do {
  if ($209) {
   $213 = $212 & 31;
   switch ($213|0) {
   case 0:  {
    $214 = $2;
    $215 = $1;
    $216 = ((($215)) + 24|0);
    $217 = (($216) + (($214*24)|0)|0);
    HEAP32[$217>>2] = 16777216;
    break L49;
    break;
   }
   case 1:  {
    $218 = $2;
    $219 = $1;
    $220 = ((($219)) + 24|0);
    $221 = (($220) + (($218*24)|0)|0);
    HEAP32[$221>>2] = 33554432;
    break L49;
    break;
   }
   case 3:  {
    $222 = $2;
    $223 = $1;
    $224 = ((($223)) + 24|0);
    $225 = (($224) + (($222*24)|0)|0);
    HEAP32[$225>>2] = 67108864;
    break L49;
    break;
   }
   case 5:  {
    $226 = $2;
    $227 = $1;
    $228 = ((($227)) + 24|0);
    $229 = (($228) + (($226*24)|0)|0);
    HEAP32[$229>>2] = 1073741824;
    break L49;
    break;
   }
   case 7:  {
    $230 = $2;
    $231 = $1;
    $232 = ((($231)) + 24|0);
    $233 = (($232) + (($230*24)|0)|0);
    HEAP32[$233>>2] = 134217728;
    break L49;
    break;
   }
   case 9:  {
    $234 = $2;
    $235 = $1;
    $236 = ((($235)) + 24|0);
    $237 = (($236) + (($234*24)|0)|0);
    HEAP32[$237>>2] = -2147483648;
    break L49;
    break;
   }
   case 15:  {
    $238 = $2;
    $239 = $1;
    $240 = ((($239)) + 24|0);
    $241 = (($240) + (($238*24)|0)|0);
    HEAP32[$241>>2] = 268435456;
    break L49;
    break;
   }
   case 31:  {
    $242 = $2;
    $243 = $1;
    $244 = ((($243)) + 24|0);
    $245 = (($244) + (($242*24)|0)|0);
    HEAP32[$245>>2] = 536870912;
    break L49;
    break;
   }
   default: {
    break L49;
   }
   }
  } else {
   $246 = ($212|0)==(192);
   if ($246) {
    $247 = $1;
    $248 = ((($247)) + 16|0);
    $249 = HEAP32[$248>>2]|0;
    switch ($249|0) {
    case 518: case 517:  {
     $250 = $3;
     $251 = ((($250)) + 56|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     if (!($253)) {
      break L49;
     }
     $254 = (_EmitError(182)|0);
     $0 = $254;
     $575 = $0;
     STACKTOP = sp;return ($575|0);
     break;
    }
    case 520: case 519:  {
     $255 = $3;
     $256 = ((($255)) + 44|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($257|0)==(196);
     if (!($258)) {
      break L49;
     }
     $259 = (_EmitError(49)|0);
     $0 = $259;
     $575 = $0;
     STACKTOP = sp;return ($575|0);
     break;
    }
    default: {
     break L49;
    }
    }
   }
  }
 } while(0);
 $260 = $3;
 $261 = ((($260)) + 20|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($262|0)!=(0|0);
 if ($263) {
  $264 = $3;
  $265 = ((($264)) + 20|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ((($266)) + 8|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = $268;
 } else {
  $269 = -2;
 }
 $base = $269;
 $270 = $3;
 $271 = ((($270)) + 24|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = ($272|0)!=(0|0);
 if ($273) {
  $274 = $3;
  $275 = ((($274)) + 24|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ((($276)) + 8|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $278;
 } else {
  $279 = -2;
 }
 $index = $279;
 $280 = $base;
 $281 = ($280|0)!=(-2);
 L76: do {
  if ($281) {
   $282 = $base;
   $283 = (15660 + (($282*12)|0)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = $284 & 4;
   $286 = ($285|0)!=(0);
   if ($286) {
    $287 = $1;
    $288 = ((($287)) + 98|0);
    $289 = HEAP8[$288>>0]|0;
    $290 = $289&255;
    $291 = ($290|0)==(1);
    if (!($291)) {
     label = 58;
    }
   } else {
    label = 58;
   }
   do {
    if ((label|0) == 58) {
     $292 = $base;
     $293 = (15660 + (($292*12)|0)|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = $294 & 8;
     $296 = ($295|0)!=(0);
     if ($296) {
      $297 = $1;
      $298 = ((($297)) + 98|0);
      $299 = HEAP8[$298>>0]|0;
      $300 = $299&255;
      $301 = ($300|0)==(2);
      if ($301) {
       break;
      }
     }
     $302 = $base;
     $303 = (15660 + (($302*12)|0)|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $304 & 2;
     $306 = ($305|0)!=(0);
     if ($306) {
      $307 = $1;
      $308 = ((($307)) + 98|0);
      $309 = HEAP8[$308>>0]|0;
      $310 = $309&255;
      $311 = ($310|0)==(0);
      if ($311) {
       break;
      }
     }
     $316 = $1;
     $317 = ((($316)) + 9|0);
     $318 = HEAP8[$317>>0]|0;
     $319 = $318 & -2;
     $320 = $319 | 1;
     HEAP8[$317>>0] = $320;
     $321 = $base;
     $322 = (15660 + (($321*12)|0)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $323 & 2;
     $325 = ($324|0)!=(0);
     if (!($325)) {
      break L76;
     }
     $326 = $1;
     $327 = ((($326)) + 98|0);
     $328 = HEAP8[$327>>0]|0;
     $329 = $328&255;
     $330 = ($329|0)==(2);
     if (!($330)) {
      break L76;
     }
     $331 = (_EmitError(31)|0);
     $0 = $331;
     $575 = $0;
     STACKTOP = sp;return ($575|0);
    }
   } while(0);
   $312 = $1;
   $313 = ((($312)) + 9|0);
   $314 = HEAP8[$313>>0]|0;
   $315 = $314 & -2;
   HEAP8[$313>>0] = $315;
  }
 } while(0);
 $332 = $index;
 $333 = ($332|0)!=(-2);
 L93: do {
  if ($333) {
   $334 = $index;
   $335 = (15660 + (($334*12)|0)|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $336 & 4;
   $338 = ($337|0)!=(0);
   if ($338) {
    $339 = $1;
    $340 = ((($339)) + 98|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = ($342|0)==(1);
    if ($343) {
     label = 73;
    } else {
     label = 69;
    }
   } else {
    label = 69;
   }
   do {
    if ((label|0) == 69) {
     $344 = $index;
     $345 = (15660 + (($344*12)|0)|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = $346 & 8;
     $348 = ($347|0)!=(0);
     if ($348) {
      $349 = $1;
      $350 = ((($349)) + 98|0);
      $351 = HEAP8[$350>>0]|0;
      $352 = $351&255;
      $353 = ($352|0)==(2);
      if ($353) {
       label = 73;
       break;
      }
     }
     $354 = $index;
     $355 = (15660 + (($354*12)|0)|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = $356 & 2;
     $358 = ($357|0)!=(0);
     if ($358) {
      $359 = $1;
      $360 = ((($359)) + 98|0);
      $361 = HEAP8[$360>>0]|0;
      $362 = $361&255;
      $363 = ($362|0)==(0);
      if ($363) {
       label = 73;
       break;
      }
     }
     $368 = $1;
     $369 = ((($368)) + 9|0);
     $370 = HEAP8[$369>>0]|0;
     $371 = $370 & -2;
     $372 = $371 | 1;
     HEAP8[$369>>0] = $372;
    }
   } while(0);
   if ((label|0) == 73) {
    $364 = $1;
    $365 = ((($364)) + 9|0);
    $366 = HEAP8[$365>>0]|0;
    $367 = $366 & -2;
    HEAP8[$365>>0] = $367;
   }
   $373 = $index;
   $374 = (15660 + (($373*12)|0)|0);
   $375 = ((($374)) + 10|0);
   $376 = HEAP8[$375>>0]|0;
   $377 = $376&255;
   $378 = ($377|0)==(4);
   if ($378) {
    $379 = $3;
    $380 = ((($379)) + 48|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = ($381<<24>>24)!=(0);
    if ($382) {
     $383 = $index;
     $384 = (_GetResWName($383,0)|0);
     HEAP32[$vararg_buffer>>2] = $384;
     (_EmitErr(37,$vararg_buffer)|0);
    } else {
     (_EmitErr(29,$vararg_buffer10)|0);
    }
    $0 = -1;
    $575 = $0;
    STACKTOP = sp;return ($575|0);
   }
   $385 = $1;
   $386 = ((($385)) + 98|0);
   $387 = HEAP8[$386>>0]|0;
   $388 = $387&255;
   $389 = ($388|0)==(0);
   if ($389) {
    $390 = $1;
    $391 = ((($390)) + 9|0);
    $392 = HEAP8[$391>>0]|0;
    $393 = $392 & 1;
    $394 = $393&255;
    $395 = ($394|0)==(1);
    if (!($395)) {
     label = 82;
    }
   } else {
    label = 82;
   }
   do {
    if ((label|0) == 82) {
     $396 = $1;
     $397 = ((($396)) + 98|0);
     $398 = HEAP8[$397>>0]|0;
     $399 = $398&255;
     $400 = ($399|0)==(2);
     if (!($400)) {
      $401 = $1;
      $402 = ((($401)) + 98|0);
      $403 = HEAP8[$402>>0]|0;
      $404 = $403&255;
      $405 = ($404|0)==(1);
      if ($405) {
       $406 = $1;
       $407 = ((($406)) + 9|0);
       $408 = HEAP8[$407>>0]|0;
       $409 = $408 & 1;
       $410 = $409&255;
       $411 = ($410|0)==(0);
       if ($411) {
        break;
       }
      }
      $421 = $3;
      $422 = ((($421)) + 48|0);
      $423 = HEAP8[$422>>0]|0;
      $424 = ($423<<24>>24)!=(0);
      if (!($424)) {
       break L93;
      }
      $425 = (_EmitError(170)|0);
      $0 = $425;
      $575 = $0;
      STACKTOP = sp;return ($575|0);
     }
    }
   } while(0);
   $412 = HEAP32[(544)>>2]|0;
   $413 = $412 & 240;
   $414 = ($413>>>0)>=(48);
   if (!($414)) {
    $420 = (_EmitError(31)|0);
    $0 = $420;
    $575 = $0;
    STACKTOP = sp;return ($575|0);
   }
   $415 = $3;
   $416 = ((($415)) + 48|0);
   $417 = HEAP8[$416>>0]|0;
   $418 = $417&255;
   switch ($418|0) {
   case 1: case 0:  {
    break L93;
    break;
   }
   case 2:  {
    $ss = 64;
    break L93;
    break;
   }
   case 4:  {
    $ss = -128;
    break L93;
    break;
   }
   case 8:  {
    $ss = -64;
    break L93;
    break;
   }
   default: {
    $419 = (_EmitError(36)|0);
    $0 = $419;
    $575 = $0;
    STACKTOP = sp;return ($575|0);
   }
   }
  }
 } while(0);
 $426 = $4;
 $427 = ($426<<24>>24)!=(0);
 if ($427) {
  $428 = $3;
  $429 = ((($428)) + 52|0);
  $430 = HEAP8[$429>>0]|0;
  $431 = ($430&255) >>> 2;
  $432 = $431 & 1;
  $433 = $432&255;
  $434 = ($433|0)!=(0);
  do {
   if ($434) {
    $435 = $1;
    $436 = ((($435)) + 98|0);
    $437 = HEAP8[$436>>0]|0;
    $438 = $437&255;
    $439 = ($438|0)!=(0);
    $440 = $1;
    $441 = ((($440)) + 9|0);
    $442 = HEAP8[$441>>0]|0;
    $443 = $442 & 1;
    $444 = $443&255;
    $445 = ($444|0)==(0);
    $446 = ($444|0)==(1);
    $$sink = $439 ? $445 : $446;
    $447 = $$sink&1;
    $448 = $447&255;
    $Ofssize = $448;
   } else {
    $449 = $sym;
    $450 = ($449|0)!=(0|0);
    if ($450) {
     $451 = $sym;
     $452 = (_GetSymOfssize($451)|0);
     $453 = $452&255;
     $Ofssize = $453;
     break;
    }
    $454 = HEAP32[15452>>2]|0;
    $455 = ($454|0)!=(0|0);
    if ($455) {
     $456 = HEAP32[15452>>2]|0;
     $457 = (_GetSymOfssize($456)|0);
     $458 = $457&255;
     $Ofssize = $458;
     break;
    } else {
     $459 = $1;
     $460 = ((($459)) + 98|0);
     $461 = HEAP8[$460>>0]|0;
     $Ofssize = $461;
     break;
    }
   }
  } while(0);
  $462 = $base;
  $463 = ($462|0)==(-2);
  $464 = $index;
  $465 = ($464|0)==(-2);
  $or$cond7 = $463 & $465;
  $466 = $Ofssize;
  $467 = $466&255;
  do {
   if ($or$cond7) {
    $468 = $1;
    $469 = ((($468)) + 98|0);
    $470 = HEAP8[$469>>0]|0;
    $471 = $470&255;
    $472 = $467 ^ $471;
    $473 = ($472|0)!=(0);
    $474 = $473 ? 1 : 0;
    $475 = $474&255;
    $476 = $1;
    $477 = ((($476)) + 9|0);
    $478 = HEAP8[$477>>0]|0;
    $479 = $475 & 1;
    $480 = $478 & -2;
    $481 = $480 | $479;
    HEAP8[$477>>0] = $481;
    $482 = $Ofssize;
    $483 = $482&255;
    $484 = ($483|0)==(2);
    if (!($484)) {
     $492 = $Ofssize;
     $493 = $492&255;
     $494 = ($493|0)!=(0);
     $495 = $494 ? 6 : 5;
     $fixup_type = $495;
     break;
    }
    $485 = $3;
    $486 = ((($485)) + 32|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = ($487|0)!=(0|0);
    if ($488) {
     $489 = HEAP32[15452>>2]|0;
     $490 = HEAP32[(588)>>2]|0;
     $491 = ($489|0)!=($490|0);
     if ($491) {
      $fixup_type = 6;
      break;
     }
    }
    $fixup_type = 3;
   } else {
    $496 = ($467|0)==(2);
    if ($496) {
     $fixup_type = 6;
     break;
    }
    $497 = $1;
    $498 = ((($497)) + 98|0);
    $499 = HEAP8[$498>>0]|0;
    $500 = $499&255;
    $501 = ($500|0)!=(0);
    $502 = $1;
    $503 = ((($502)) + 9|0);
    $504 = HEAP8[$503>>0]|0;
    $505 = $504 & 1;
    $506 = $505&255;
    if ($501) {
     $507 = ($506|0)==(0);
     if ($507) {
      label = 114;
     }
    } else {
     $508 = ($506|0)==(1);
     if ($508) {
      label = 114;
     }
    }
    if ((label|0) == 114) {
     $fixup_type = 6;
     break;
    }
    $fixup_type = 5;
    $509 = $Ofssize;
    $510 = $509&255;
    $511 = ($510|0)!=(0);
    $512 = HEAP32[4884>>2]|0;
    $513 = ($512|0)==(1);
    $or$cond9 = $511 & $513;
    if ($or$cond9) {
     $514 = $sym;
     $515 = ((($514)) + 4|0);
     $516 = HEAP32[$515>>2]|0;
     HEAP32[$vararg_buffer12>>2] = $516;
     _EmitWarn(2,218,$vararg_buffer12);
    }
   }
  } while(0);
  $517 = $fixup_type;
  $518 = ($517|0)==(6);
  do {
   if ($518) {
    $519 = $3;
    $520 = ((($519)) + 36|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = ($521|0)==(159);
    if ($522) {
     $fixup_type = 12;
     break;
    }
    $523 = $3;
    $524 = ((($523)) + 36|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = ($525|0)==(169);
    if ($526) {
     $fixup_type = 13;
    }
   }
  } while(0);
  $527 = $1;
  $528 = ((($527)) + 16|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = ($529|0)!=(585);
  if ($530) {
   $531 = $1;
   $532 = ((($531)) + 16|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = ($533|0)!=(586);
   if ($534) {
    $535 = $sym;
    $536 = $fixup_type;
    $537 = (_CreateFixup($535,$536,0)|0);
    $538 = $2;
    $539 = $1;
    $540 = ((($539)) + 24|0);
    $541 = (($540) + (($538*24)|0)|0);
    $542 = ((($541)) + 16|0);
    HEAP32[$542>>2] = $537;
   }
  }
 }
 $543 = $1;
 $544 = $2;
 $545 = $ss;
 $546 = $index;
 $547 = $base;
 $548 = $sym;
 $549 = (_set_rm_sib($543,$544,$545,$546,$547,$548)|0);
 $550 = ($549|0)==(-1);
 if ($550) {
  $0 = -1;
  $575 = $0;
  STACKTOP = sp;return ($575|0);
 }
 $551 = $2;
 $552 = $1;
 $553 = ((($552)) + 24|0);
 $554 = (($553) + (($551*24)|0)|0);
 $555 = ((($554)) + 16|0);
 $556 = HEAP32[$555>>2]|0;
 $557 = ($556|0)!=(0|0);
 if ($557) {
  $558 = HEAP8[87037>>0]|0;
  $559 = $2;
  $560 = $1;
  $561 = ((($560)) + 24|0);
  $562 = (($561) + (($559*24)|0)|0);
  $563 = ((($562)) + 16|0);
  $564 = HEAP32[$563>>2]|0;
  $565 = ((($564)) + 28|0);
  HEAP8[$565>>0] = $558;
  $566 = HEAP16[67776>>1]|0;
  $567 = $2;
  $568 = $1;
  $569 = ((($568)) + 24|0);
  $570 = (($569) + (($567*24)|0)|0);
  $571 = ((($570)) + 16|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = ((($572)) + 28|0);
  $574 = ((($573)) + 2|0);
  HEAP16[$574>>1] = $566;
 }
 $0 = 0;
 $575 = $0;
 STACKTOP = sp;return ($575|0);
}
function _SetPtrMemtype($CodeInfo,$opndx) {
 $CodeInfo = $CodeInfo|0;
 $opndx = $opndx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $size = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $opndx;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $sym = $4;
 $size = 0;
 $5 = $1;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $sym = $11;
 }
 $12 = $1;
 $13 = ((($12)) + 52|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14&255) >>> 1;
 $16 = $15 & 1;
 $17 = $16&255;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 64|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $1;
   $24 = ((($23)) + 64|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 36|0);
   $27 = HEAP32[$26>>2]|0;
   $size = $27;
   $28 = $1;
   $29 = ((($28)) + 64|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = ((($31)) + 3|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33&255) >>> 4;
   $35 = $34 & 1;
   $36 = $0;
   $37 = ((($36)) + 101|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $35 & 1;
   $40 = ($39 << 2)&255;
   $41 = $38 & -5;
   $42 = $41 | $40;
   HEAP8[$37>>0] = $42;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $43 = $sym;
   $44 = ($43|0)!=(0|0);
   if (!($44)) {
    $132 = HEAP32[(512)>>2]|0;
    $133 = 1 << $132;
    $134 = 104 & $133;
    $135 = ($134|0)!=(0);
    if ($135) {
     $size = 2;
    }
    $136 = HEAP8[(557)>>0]|0;
    $137 = $136&255;
    $138 = 2 << $137;
    $139 = $size;
    $140 = (($139) + ($138))|0;
    $size = $140;
    break;
   }
   $45 = $sym;
   $46 = ((($45)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)!=(0|0);
   $49 = $sym;
   if ($48) {
    $50 = ((($49)) + 52|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $size = $53;
    $54 = $sym;
    $55 = ((($54)) + 52|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ((($56)) + 28|0);
    $58 = ((($57)) + 3|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = ($59&255) >>> 4;
    $61 = $60 & 1;
    $62 = $0;
    $63 = ((($62)) + 101|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $61 & 1;
    $66 = ($65 << 2)&255;
    $67 = $64 & -5;
    $68 = $67 | $66;
    HEAP8[$63>>0] = $68;
    $69 = $size;
    $70 = ($69|0)==(4);
    if (!($70)) {
     break;
    }
    $71 = $sym;
    $72 = ((($71)) + 52|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 28|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = $0;
    $78 = ((($77)) + 98|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = ($76|0)!=($80|0);
    if (!($81)) {
     break;
    }
    $82 = $sym;
    $83 = ((($82)) + 52|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 28|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $1;
    $88 = ((($87)) + 49|0);
    HEAP8[$88>>0] = $86;
    break;
   }
   $89 = ((($49)) + 20|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==(195);
   $92 = $sym;
   if ($91) {
    $93 = ((($92)) + 28|0);
    $94 = ((($93)) + 3|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = ($95&255) >>> 4;
    $97 = $96 & 1;
    $98 = $97&255;
    $99 = ($98|0)!=(0);
    $100 = $99 ? 130 : 129;
    $101 = $sym;
    $102 = ((($101)) + 28|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (_SizeFromMemtype($100,$104,0)|0);
    $size = $105;
    $106 = $sym;
    $107 = ((($106)) + 28|0);
    $108 = ((($107)) + 3|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = ($109&255) >>> 4;
    $111 = $110 & 1;
    $112 = $0;
    $113 = ((($112)) + 101|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $111 & 1;
    $116 = ($115 << 2)&255;
    $117 = $114 & -5;
    $118 = $117 | $116;
    HEAP8[$113>>0] = $118;
    break;
   }
   $119 = ((($92)) + 24|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = ($120&65535) >>> 9;
   $122 = $121 & 1;
   $123 = $122&255;
   $124 = ($123<<24>>24)!=(0);
   $125 = $sym;
   $126 = ((($125)) + 36|0);
   $127 = HEAP32[$126>>2]|0;
   if ($124) {
    $128 = $sym;
    $129 = ((($128)) + 40|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($127>>>0) / ($130>>>0))&-1;
    $size = $131;
    break;
   } else {
    $size = $127;
    break;
   }
  }
 } while(0);
 $141 = $size;
 $142 = ($141|0)!=(0);
 if (!($142)) {
  STACKTOP = sp;return;
 }
 $143 = $size;
 $144 = $1;
 $145 = ((($144)) + 44|0);
 (_MemtypeFromSize($143,$145)|0);
 STACKTOP = sp;return;
}
function _Set_Memtype($CodeInfo,$mem_type) {
 $CodeInfo = $CodeInfo|0;
 $mem_type = $mem_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $mem_type;
 $2 = $0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(552);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ($6|0)==(192);
 $8 = $1;
 $9 = ($8|0)==(196);
 $or$cond = $7 | $9;
 $10 = $1;
 $11 = ($10|0)==(129);
 $or$cond3 = $or$cond | $11;
 $12 = $1;
 $13 = ($12|0)==(130);
 $or$cond5 = $or$cond3 | $13;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $14 = $1;
 $15 = $0;
 $16 = ((($15)) + 20|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = ((($17)) + 98|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)>(0);
 $22 = $1;
 if (!($21)) {
  $78 = $22 & 192;
  $79 = ($78>>>0)<(128);
  if ($79) {
   $80 = $1;
   $81 = $80 & 31;
   $82 = ($81|0)==(3);
   if ($82) {
    $83 = $0;
    $84 = ((($83)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    switch ($85|0) {
    case 374: case 373: case 556: case 555: case 554: case 474: case 473:  {
     STACKTOP = sp;return;
     break;
    }
    default: {
    }
    }
    $86 = $0;
    $87 = ((($86)) + 9|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88 & -3;
    $90 = $89 | 2;
    HEAP8[$87>>0] = $90;
    STACKTOP = sp;return;
   }
  }
  $91 = $1;
  $92 = $91 & 192;
  $93 = ($92>>>0)<(128);
  if (!($93)) {
   STACKTOP = sp;return;
  }
  $94 = $1;
  $95 = $94 & 31;
  $96 = ($95|0)==(7);
  if (!($96)) {
   STACKTOP = sp;return;
  }
  $97 = $0;
  $98 = ((($97)) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = (20136 + (($101*12)|0)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(-16777216);
  if ($104) {
   STACKTOP = sp;return;
  }
  $105 = $0;
  $106 = ((($105)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107)) + 4|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = $109&65535;
  $111 = $110 & 65287;
  $112 = ($111|0)!=(0);
  if ($112) {
   STACKTOP = sp;return;
  }
  $113 = $0;
  $114 = ((($113)) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)!=(535);
  if (!($116)) {
   STACKTOP = sp;return;
  }
  $117 = $0;
  $118 = ((($117)) + 8|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 | 8;
  $122 = $121&255;
  HEAP8[$118>>0] = $122;
  STACKTOP = sp;return;
 }
 $23 = ($22|0)==(1);
 $24 = $1;
 $25 = ($24|0)==(65);
 $or$cond7 = $23 | $25;
 if ($or$cond7) {
  $26 = $0;
  $27 = ((($26)) + 9|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 & -3;
  $30 = $29 | 2;
  HEAP8[$27>>0] = $30;
  STACKTOP = sp;return;
 }
 $31 = $1;
 $32 = $31 & 192;
 $33 = ($32>>>0)<(128);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $1;
 $35 = $34 & 31;
 $36 = ($35|0)==(7);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 switch ($39|0) {
 case 1108: case 1107: case 1106: case 1105: case 535: case 520: case 519:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $40 = $0;
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (20136 + (($44*12)|0)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(-16777216);
 if ($47) {
  STACKTOP = sp;return;
 }
 $48 = $0;
 $49 = ((($48)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 4|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = $53 & 7;
 $55 = ($54|0)!=(0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = $0;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = $61 & 65280;
 $63 = ($62|0)!=(0);
 $64 = $0;
 if (!($63)) {
  $73 = ((($64)) + 8|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $75 | 8;
  $77 = $76&255;
  HEAP8[$73>>0] = $77;
  STACKTOP = sp;return;
 }
 $65 = ((($64)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 switch ($66|0) {
 case 1209: case 1270: case 1269: case 1187: case 1186: case 868: case 1039: case 1038: case 851: case 850:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $67 = $0;
 $68 = ((($67)) + 8|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 | 8;
 $72 = $71&255;
 HEAP8[$68>>0] = $72;
 STACKTOP = sp;return;
}
function _set_rm_sib($CodeInfo,$CurrOpnd,$ss,$index,$base,$sym) {
 $CodeInfo = $CodeInfo|0;
 $CurrOpnd = $CurrOpnd|0;
 $ss = $ss|0;
 $index = $index|0;
 $base = $base|0;
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_reg = 0, $bit3_base = 0, $bit3_idx = 0, $idx_reg = 0, $mod_field = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $rex = 0, $rm_field = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $CodeInfo;
 $2 = $CurrOpnd;
 $3 = $ss;
 $4 = $index;
 $5 = $base;
 $6 = $sym;
 $rm_field = 0;
 $bit3_base = 0;
 $bit3_idx = 0;
 $rex = 0;
 $7 = $2;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = (($9) + (($7*24)|0)|0);
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $mod_field = -128;
  } else {
   $14 = $2;
   $15 = $1;
   $16 = ((($15)) + 24|0);
   $17 = (($16) + (($14*24)|0)|0);
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $mod_field = 0;
    break;
   }
   $21 = $2;
   $22 = $1;
   $23 = ((($22)) + 24|0);
   $24 = (($23) + (($21*24)|0)|0);
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)>(127);
   if (!($27)) {
    $28 = $2;
    $29 = $1;
    $30 = ((($29)) + 24|0);
    $31 = (($30) + (($28*24)|0)|0);
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)<(-128);
    if (!($34)) {
     $mod_field = 64;
     break;
    }
   }
   $mod_field = -128;
  }
 } while(0);
 $35 = $4;
 $36 = ($35|0)==(-2);
 $37 = $5;
 $38 = ($37|0)==(-2);
 $or$cond = $36 & $38;
 L12: do {
  if ($or$cond) {
   $39 = $1;
   $40 = ((($39)) + 101|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 & -3;
   $43 = $42 | 2;
   HEAP8[$40>>0] = $43;
   $mod_field = 0;
   $44 = $1;
   $45 = $6;
   _seg_override($44,28,$45,1);
   $46 = $1;
   $47 = ((($46)) + 98|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = $1;
    $52 = ((($51)) + 9|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 & 1;
    $55 = $54&255;
    $56 = ($55|0)==(0);
    if (!($56)) {
     label = 12;
    }
   } else {
    label = 12;
   }
   do {
    if ((label|0) == 12) {
     $57 = $1;
     $58 = ((($57)) + 98|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)==(1);
     if ($61) {
      $62 = $1;
      $63 = ((($62)) + 9|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64 & 1;
      $66 = $65&255;
      $67 = ($66|0)==(1);
      if ($67) {
       break;
      }
     }
     $rm_field = 5;
     $83 = $1;
     $84 = ((($83)) + 98|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = ($86|0)==(2);
     if (!($87)) {
      break L12;
     }
     $88 = $2;
     $89 = $1;
     $90 = ((($89)) + 24|0);
     $91 = (($90) + (($88*24)|0)|0);
     $92 = ((($91)) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(0|0);
     if (!($94)) {
      break L12;
     }
     $rm_field = 4;
     $95 = $1;
     $96 = ((($95)) + 97|0);
     HEAP8[$96>>0] = 37;
     break L12;
    }
   } while(0);
   $68 = $2;
   $69 = $1;
   $70 = ((($69)) + 24|0);
   $71 = (($70) + (($68*24)|0)|0);
   $72 = ((($71)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)>(65535);
   if (!($74)) {
    $75 = $2;
    $76 = $1;
    $77 = ((($76)) + 24|0);
    $78 = (($77) + (($75*24)|0)|0);
    $79 = ((($78)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)<(-65535);
    if (!($81)) {
     $rm_field = 6;
     break;
    }
   }
   $82 = (_EmitError(58)|0);
   $0 = $82;
   $306 = $0;
   STACKTOP = sp;return ($306|0);
  } else {
   $97 = $4;
   $98 = ($97|0)==(-2);
   $99 = $5;
   $100 = ($99|0)!=(-2);
   $or$cond3 = $98 & $100;
   if ($or$cond3) {
    $101 = $5;
    switch ($101|0) {
    case 15:  {
     $rm_field = 4;
     break;
    }
    case 16:  {
     $rm_field = 5;
     break;
    }
    case 14:  {
     $rm_field = 6;
     $102 = $mod_field;
     $103 = $102&255;
     $104 = ($103|0)==(0);
     if ($104) {
      $mod_field = 64;
     }
     break;
    }
    case 12:  {
     $rm_field = 7;
     break;
    }
    default: {
     $105 = $5;
     $106 = (15660 + (($105*12)|0)|0);
     $107 = ((($106)) + 10|0);
     $108 = HEAP8[$107>>0]|0;
     $base_reg = $108;
     $109 = $base_reg;
     $110 = $109&255;
     $111 = $110 >> 3;
     $112 = $111&255;
     $bit3_base = $112;
     $113 = $base_reg;
     $114 = $113&255;
     $115 = $114 & 7;
     $116 = $115&255;
     $base_reg = $116;
     $117 = $base_reg;
     $rm_field = $117;
     $118 = $base_reg;
     $119 = $118&255;
     $120 = ($119|0)==(4);
     if ($120) {
      $121 = $1;
      $122 = ((($121)) + 97|0);
      HEAP8[$122>>0] = 36;
     } else {
      $123 = $base_reg;
      $124 = $123&255;
      $125 = ($124|0)==(5);
      if ($125) {
       $126 = $mod_field;
       $127 = $126&255;
       $128 = ($127|0)==(0);
       if ($128) {
        $mod_field = 64;
       }
      }
     }
     $129 = $bit3_base;
     $rex = $129;
    }
    }
    $130 = $1;
    $131 = $5;
    $132 = $6;
    _seg_override($130,$131,$132,0);
    break;
   }
   $133 = $4;
   $134 = ($133|0)!=(-2);
   $135 = $5;
   $136 = ($135|0)==(-2);
   $or$cond5 = $134 & $136;
   if ($or$cond5) {
    $137 = $4;
    $138 = (15660 + (($137*12)|0)|0);
    $139 = ((($138)) + 10|0);
    $140 = HEAP8[$139>>0]|0;
    $idx_reg = $140;
    $141 = $idx_reg;
    $142 = $141&255;
    $143 = $142 >> 3;
    $144 = $143&255;
    $bit3_idx = $144;
    $145 = $idx_reg;
    $146 = $145&255;
    $147 = $146 & 7;
    $148 = $147&255;
    $idx_reg = $148;
    $mod_field = 0;
    $rm_field = 4;
    $149 = $3;
    $150 = $149 << 24 >> 24;
    $151 = $idx_reg;
    $152 = $151&255;
    $153 = $152 << 3;
    $154 = $150 | $153;
    $155 = $154 | 5;
    $156 = $155&255;
    $157 = $1;
    $158 = ((($157)) + 97|0);
    HEAP8[$158>>0] = $156;
    $159 = $bit3_idx;
    $160 = $159&255;
    $161 = $160 << 1;
    $162 = $161&255;
    $rex = $162;
    $163 = $1;
    $164 = $6;
    _seg_override($163,28,$164,0);
    break;
   }
   $165 = $5;
   $166 = (15660 + (($165*12)|0)|0);
   $167 = ((($166)) + 10|0);
   $168 = HEAP8[$167>>0]|0;
   $base_reg = $168;
   $169 = $4;
   $170 = (15660 + (($169*12)|0)|0);
   $171 = ((($170)) + 10|0);
   $172 = HEAP8[$171>>0]|0;
   $idx_reg = $172;
   $173 = $base_reg;
   $174 = $173&255;
   $175 = $174 >> 3;
   $176 = $175&255;
   $bit3_base = $176;
   $177 = $idx_reg;
   $178 = $177&255;
   $179 = $178 >> 3;
   $180 = $179&255;
   $bit3_idx = $180;
   $181 = $base_reg;
   $182 = $181&255;
   $183 = $182 & 7;
   $184 = $183&255;
   $base_reg = $184;
   $185 = $idx_reg;
   $186 = $185&255;
   $187 = $186 & 7;
   $188 = $187&255;
   $idx_reg = $188;
   $189 = $5;
   $190 = (15660 + (($189*12)|0)|0);
   $191 = ((($190)) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $4;
   $194 = (15660 + (($193*12)|0)|0);
   $195 = ((($194)) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $192 & $196;
   $198 = $197 & 31;
   $199 = ($198|0)==(0);
   if ($199) {
    $200 = (_EmitError(38)|0);
    $0 = $200;
    $306 = $0;
    STACKTOP = sp;return ($306|0);
   }
   $201 = $4;
   switch ($201|0) {
   case 14: case 12:  {
    $202 = $4;
    $203 = $5;
    $204 = (_comp_mem16($202,$203)|0);
    $temp = $204;
    $205 = ($204|0)==(-1);
    if (!($205)) {
     $206 = $temp;
     $207 = $206&255;
     $rm_field = $207;
     $208 = $1;
     $209 = $4;
     $210 = $6;
     _seg_override($208,$209,$210,0);
     break L12;
    }
    $0 = -1;
    $306 = $0;
    STACKTOP = sp;return ($306|0);
    break;
   }
   case 16: case 15:  {
    $211 = $5;
    $212 = $4;
    $213 = (_comp_mem16($211,$212)|0);
    $temp = $213;
    $214 = ($213|0)==(-1);
    if (!($214)) {
     $215 = $temp;
     $216 = $215&255;
     $rm_field = $216;
     $217 = $1;
     $218 = $5;
     $219 = $6;
     _seg_override($217,$218,$219,0);
     break L12;
    }
    $0 = -1;
    $306 = $0;
    STACKTOP = sp;return ($306|0);
    break;
   }
   case 21: case 103:  {
    $220 = (_EmitError(170)|0);
    $0 = $220;
    $306 = $0;
    STACKTOP = sp;return ($306|0);
    break;
   }
   default: {
    $221 = $base_reg;
    $222 = $221&255;
    $223 = ($222|0)==(5);
    if ($223) {
     $224 = $mod_field;
     $225 = $224&255;
     $226 = ($225|0)==(0);
     if ($226) {
      $mod_field = 64;
     }
    }
    $227 = $rm_field;
    $228 = $227&255;
    $229 = $228 | 4;
    $230 = $229&255;
    $rm_field = $230;
    $231 = $3;
    $232 = $231 << 24 >> 24;
    $233 = $idx_reg;
    $234 = $233&255;
    $235 = $234 << 3;
    $236 = $232 | $235;
    $237 = $base_reg;
    $238 = $237&255;
    $239 = $236 | $238;
    $240 = $239&255;
    $241 = $1;
    $242 = ((($241)) + 97|0);
    HEAP8[$242>>0] = $240;
    $243 = $bit3_idx;
    $244 = $243&255;
    $245 = $244 << 1;
    $246 = $bit3_base;
    $247 = $246&255;
    $248 = (($245) + ($247))|0;
    $249 = $248&255;
    $rex = $249;
    $250 = $1;
    $251 = $5;
    $252 = $6;
    _seg_override($250,$251,$252,0);
    break L12;
   }
   }
  }
 } while(0);
 $253 = $2;
 $254 = ($253|0)==(1);
 if ($254) {
  $255 = $mod_field;
  $256 = $255&255;
  $257 = $rm_field;
  $258 = $257&255;
  $259 = $258 << 3;
  $260 = $256 | $259;
  $261 = $1;
  $262 = ((($261)) + 96|0);
  $263 = HEAP8[$262>>0]|0;
  $264 = $263&255;
  $265 = $264 & 7;
  $266 = $260 | $265;
  $267 = $266&255;
  $268 = $1;
  $269 = ((($268)) + 96|0);
  HEAP8[$269>>0] = $267;
  $270 = $rex;
  $271 = $270&255;
  $272 = $271 >> 2;
  $273 = $rex;
  $274 = $273&255;
  $275 = $274 & 2;
  $276 = $272 | $275;
  $277 = $rex;
  $278 = $277&255;
  $279 = $278 & 1;
  $280 = $279 << 2;
  $281 = $276 | $280;
  $282 = $1;
  $283 = ((($282)) + 8|0);
  $284 = HEAP8[$283>>0]|0;
  $285 = $284&255;
  $286 = $285 | $281;
  $287 = $286&255;
  HEAP8[$283>>0] = $287;
 } else {
  $288 = $2;
  $289 = ($288|0)==(0);
  if ($289) {
   $290 = $mod_field;
   $291 = $290&255;
   $292 = $rm_field;
   $293 = $292&255;
   $294 = $291 | $293;
   $295 = $294&255;
   $296 = $1;
   $297 = ((($296)) + 96|0);
   HEAP8[$297>>0] = $295;
   $298 = $rex;
   $299 = $298&255;
   $300 = $1;
   $301 = ((($300)) + 8|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $304 = $303 | $299;
   $305 = $304&255;
   HEAP8[$301>>0] = $305;
  }
 }
 $0 = 0;
 $306 = $0;
 STACKTOP = sp;return ($306|0);
}
function _seg_override($CodeInfo,$seg_reg,$sym,$direct) {
 $CodeInfo = $CodeInfo|0;
 $seg_reg = $seg_reg|0;
 $sym = $sym|0;
 $direct = $direct|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $assume = 0, $default_seg = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CodeInfo;
 $1 = $seg_reg;
 $2 = $sym;
 $3 = $direct;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 2|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 7;
 $10 = $9&255;
 $11 = ($10|0)==(2);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 & 7;
 $18 = $17&255;
 $19 = ($18|0)==(3);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(552);
 if ($23) {
  $24 = $0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = -2;
  $26 = $2;
  _SetFixupFrame($26,0);
  STACKTOP = sp;return;
 }
 $27 = $1;
 switch ($27|0) {
 case 21: case 22: case 14:  {
  $default_seg = 2;
  break;
 }
 default: {
  $default_seg = 3;
 }
 }
 $28 = $0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(-2);
 do {
  if ($31) {
   $32 = $0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_GetOverrideAssume($34)|0);
   $assume = $35;
   $36 = $2;
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $assume;
    $39 = ($38|0)!=(0|0);
    $40 = $assume;
    $41 = $2;
    $42 = $39 ? $40 : $41;
    _SetFixupFrame($42,0);
    break;
   }
   $43 = $3;
   $44 = ($43<<24>>24)!=(0);
   if ($44) {
    $45 = $assume;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = $assume;
     $48 = (_GetSymOfssize($47)|0);
     $49 = $0;
     $50 = ((($49)) + 98|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = $48 ^ $52;
     $54 = ($53|0)!=(0);
     $55 = $54 ? 1 : 0;
     $56 = $55&255;
     $57 = $0;
     $58 = ((($57)) + 9|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $56 & 1;
     $61 = $59 & -2;
     $62 = $61 | $60;
     HEAP8[$58>>0] = $62;
     break;
    }
    $63 = HEAP32[(560)>>2]|0;
    $64 = $63 >>> 6;
    $65 = $64 & 1;
    $66 = ($65|0)!=(0);
    if ($66) {
     $67 = HEAP8[(556)>>0]|0;
     $68 = $67&255;
     $69 = $0;
     $70 = ((($69)) + 98|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = $68 ^ $72;
     $74 = ($73|0)!=(0);
     $75 = $74 ? 1 : 0;
     $76 = $75&255;
     $77 = $0;
     $78 = ((($77)) + 9|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $76 & 1;
     $81 = $79 & -2;
     $82 = $81 | $80;
     HEAP8[$78>>0] = $82;
     break;
    } else {
     $83 = HEAP8[(557)>>0]|0;
     $84 = $83&255;
     $85 = $0;
     $86 = ((($85)) + 98|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $84 ^ $88;
     $90 = ($89|0)!=(0);
     $91 = $90 ? 1 : 0;
     $92 = $91&255;
     $93 = $0;
     $94 = ((($93)) + 9|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $92 & 1;
     $97 = $95 & -2;
     $98 = $97 | $96;
     HEAP8[$94>>0] = $98;
     break;
    }
   }
  } else {
   $99 = $2;
   $100 = ($99|0)!=(0|0);
   $101 = HEAP32[15452>>2]|0;
   $102 = ($101|0)!=(0|0);
   $or$cond = $100 | $102;
   if ($or$cond) {
    $103 = $0;
    $104 = $2;
    $105 = $default_seg;
    _check_assume($103,$104,$105);
   }
   $106 = $2;
   $107 = ($106|0)==(0|0);
   $108 = HEAP32[15452>>2]|0;
   $109 = ($108|0)!=(0|0);
   $or$cond3 = $107 & $109;
   if ($or$cond3) {
    $110 = HEAP32[15452>>2]|0;
    $111 = (_GetSymOfssize($110)|0);
    $112 = $0;
    $113 = ((($112)) + 98|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $111 ^ $115;
    $117 = ($116|0)!=(0);
    $118 = $117 ? 1 : 0;
    $119 = $118&255;
    $120 = $0;
    $121 = ((($120)) + 9|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $119 & 1;
    $124 = $122 & -2;
    $125 = $124 | $123;
    HEAP8[$121>>0] = $125;
   }
  }
 } while(0);
 $126 = $0;
 $127 = ((($126)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $default_seg;
 $130 = ($128|0)==($129|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $131 = $0;
 $132 = ((($131)) + 4|0);
 HEAP32[$132>>2] = -2;
 STACKTOP = sp;return;
}
function _comp_mem16($reg1,$reg2) {
 $reg1 = $reg1|0;
 $reg2 = $reg2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $reg1;
 $2 = $reg2;
 $3 = $1;
 L1: do {
  switch ($3|0) {
  case 12:  {
   $4 = $2;
   switch ($4|0) {
   case 15:  {
    $0 = 0;
    break L1;
    break;
   }
   case 16:  {
    $0 = 1;
    break L1;
    break;
   }
   default: {
    label = 9;
    break L1;
   }
   }
   break;
  }
  case 14:  {
   $5 = $2;
   switch ($5|0) {
   case 15:  {
    $0 = 2;
    break L1;
    break;
   }
   case 16:  {
    $0 = 3;
    break L1;
    break;
   }
   default: {
    label = 9;
    break L1;
   }
   }
   break;
  }
  default: {
   $6 = (_EmitError(34)|0);
   $0 = $6;
  }
  }
 } while(0);
 if ((label|0) == 9) {
  $7 = (_EmitError(29)|0);
  $0 = $7;
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function _check_assume($CodeInfo,$sym,$default_reg) {
 $CodeInfo = $CodeInfo|0;
 $sym = $sym|0;
 $default_reg = $default_reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $assume = 0, $reg = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $assume = sp + 12|0;
 $0 = $CodeInfo;
 $1 = $sym;
 $2 = $default_reg;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   STACKTOP = sp;return;
  }
 }
 $9 = HEAP32[15452>>2]|0;
 $10 = $1;
 $11 = $2;
 $12 = (_GetAssume($9,$10,$11,$assume)|0);
 $reg = $12;
 $13 = HEAP32[$assume>>2]|0;
 _SetFixupFrame($13,0);
 $14 = $reg;
 $15 = ($14|0)==(-2);
 if (!($15)) {
  $31 = $2;
  $32 = ($31|0)!=(-2);
  if (!($32)) {
   STACKTOP = sp;return;
  }
  $33 = $reg;
  $34 = $0;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $28 = HEAP32[15452>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $30;
  (_EmitErr(89,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
 $18 = $1;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $1;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  (_EmitErr(89,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $25 = $2;
  $26 = $0;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _OrgDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $opndx = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $1 = sp + 80|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$1>>2] = $4;
 $5 = $2;
 $6 = HEAP32[(616)>>2]|0;
 $7 = HEAP8[(6083)>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 $10 = $9 ? 2 : 0;
 $11 = $10&255;
 $12 = (_EvalOperand($1,$5,$6,$opndx,$11)|0);
 $13 = (-1)==($12|0);
 if ($13) {
  $0 = -1;
  $83 = $0;
  STACKTOP = sp;return ($83|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = $2;
 $16 = (($15) + ($14<<4)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP32[$1>>2]|0;
  $21 = $2;
  $22 = (($21) + ($20<<4)|0);
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  $25 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $25;
  $83 = $0;
  STACKTOP = sp;return ($83|0);
 }
 $26 = HEAP32[66812>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = ((($opndx)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = HEAP32[$opndx>>2]|0;
   $32 = (_SetStructCurrentOffset($31)|0);
   $0 = $32;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
  }
 } else {
  $33 = HEAP32[(584)>>2]|0;
  $34 = ($33|0)==(0|0);
  if ($34) {
   $35 = (_EmitError(82)|0);
   $0 = $35;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
  }
  $36 = HEAP8[87035>>0]|0;
  $37 = $36&255;
  $38 = ($37|0)==(0);
  $39 = HEAP32[4884>>2]|0;
  $40 = ($39|0)==(0);
  $or$cond = $38 & $40;
  if ($or$cond) {
   $41 = HEAP32[(600)>>2]|0;
   _StoreLine($41,0,0);
  }
  $42 = HEAP32[4884>>2]|0;
  $43 = ($42|0)==(0);
  if ($43) {
   $44 = HEAP32[(584)>>2]|0;
   $45 = ((($44)) + 60|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = HEAP32[(584)>>2]|0;
    $51 = ((($50)) + 60|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 24|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 24|0);
    $56 = ((($55)) + 1|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 & -3;
    $59 = $58 | 2;
    HEAP8[$56>>0] = $59;
   }
  }
  $60 = ((($opndx)) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0);
  if ($62) {
   $63 = HEAP32[(584)>>2]|0;
   $64 = HEAP32[$opndx>>2]|0;
   $65 = (_SetCurrOffset($63,$64,0,0)|0);
   $0 = $65;
   $83 = $0;
   STACKTOP = sp;return ($83|0);
  }
  $66 = ((($opndx)) + 40|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(1);
  if ($68) {
   $69 = ((($opndx)) + 52|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70 & 1;
   $72 = $71&255;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = HEAP32[(584)>>2]|0;
    $75 = ((($opndx)) + 56|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[$opndx>>2]|0;
    $80 = (($78) + ($79))|0;
    $81 = (_SetCurrOffset($74,$80,0,0)|0);
    $0 = $81;
    $83 = $0;
    STACKTOP = sp;return ($83|0);
   }
  }
 }
 $82 = (_EmitError(40)|0);
 $0 = $82;
 $83 = $0;
 STACKTOP = sp;return ($83|0);
}
function _AlignCurrOffset($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CurrAddr = 0, $alignment = 0, $seg_align = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = 1 << $1;
 $alignment = $2;
 $3 = (_GetCurrOffset()|0);
 $CurrAddr = $3;
 $4 = $CurrAddr;
 $5 = $alignment;
 $6 = (($4>>>0) % ($5>>>0))&-1;
 $seg_align = $6;
 $7 = $seg_align;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $seg_align;
 $10 = $alignment;
 $11 = (($10) - ($9))|0;
 $alignment = $11;
 $12 = $alignment;
 _fill_in_objfile_space($12);
 STACKTOP = sp;return;
}
function _AlignDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CurrAddr = 0, $buffer = 0, $opndx = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $power = 0, $seg_align = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 108|0;
 $opndx = sp;
 $buffer = sp + 120|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 L1: do {
  switch ($7|0) {
  case 357:  {
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$1>>2] = $9;
   $10 = $2;
   $11 = HEAP32[(616)>>2]|0;
   $12 = (_EvalOperand($1,$10,$11,$opndx,2)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $0 = -1;
    $107 = $0;
    STACKTOP = sp;return ($107|0);
   }
   $14 = ((($opndx)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $power = 1;
    while(1) {
     $17 = $power;
     $18 = HEAP32[$opndx>>2]|0;
     $19 = ($17|0)<($18|0);
     $20 = $power;
     if (!($19)) {
      break;
     }
     $21 = $20 << 1;
     $power = $21;
    }
    $22 = HEAP32[$opndx>>2]|0;
    $23 = ($20|0)!=($22|0);
    if (!($23)) {
     break L1;
    }
    $24 = HEAP32[$opndx>>2]|0;
    HEAP32[$vararg_buffer>>2] = $24;
    $25 = (_EmitErr(129,$vararg_buffer)|0);
    $0 = $25;
    $107 = $0;
    STACKTOP = sp;return ($107|0);
   } else {
    $26 = ((($opndx)) + 40|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(-2);
    if (!($28)) {
     $38 = (_EmitError(65)|0);
     $0 = $38;
     $107 = $0;
     STACKTOP = sp;return ($107|0);
    }
    $29 = HEAP32[66812>>2]|0;
    $30 = ($29|0)!=(0|0);
    if ($30) {
     $31 = HEAP32[66812>>2]|0;
     $32 = ((($31)) + 60|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($33)) + 8|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     HEAP32[$opndx>>2] = $36;
     break L1;
    } else {
     $37 = (_GetCurrSegAlign()|0);
     HEAP32[$opndx>>2] = $37;
     break L1;
    }
   }
   break;
  }
  case 358:  {
   HEAP32[$opndx>>2] = 2;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$1>>2] = $40;
   break;
  }
  default: {
  }
  }
 } while(0);
 $41 = HEAP32[$1>>2]|0;
 $42 = $2;
 $43 = (($42) + ($41<<4)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = HEAP32[$1>>2]|0;
  $48 = $2;
  $49 = (($48) + ($47<<4)|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $51;
  $52 = (_EmitErr(209,$vararg_buffer6)|0);
  $0 = $52;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $53 = HEAP32[66812>>2]|0;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = HEAP32[$opndx>>2]|0;
  $56 = (_AlignInStruct($55)|0);
  $0 = $56;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $57 = HEAP8[87035>>0]|0;
 $58 = $57&255;
 $59 = ($58|0)==(0);
 $60 = HEAP32[4884>>2]|0;
 $61 = ($60|0)==(0);
 $or$cond3 = $59 & $61;
 if ($or$cond3) {
  $62 = HEAP32[(600)>>2]|0;
  _StoreLine($62,0,0);
 }
 $63 = (_GetCurrSegAlign()|0);
 $seg_align = $63;
 $64 = $seg_align;
 $65 = ($64|0)<=(0);
 if ($65) {
  $66 = (_EmitError(82)|0);
  $0 = $66;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $67 = HEAP32[$opndx>>2]|0;
 $68 = $seg_align;
 $69 = ($67|0)>($68|0);
 $70 = HEAP32[4884>>2]|0;
 $71 = ($70|0)==(0);
 $or$cond5 = $69 & $71;
 if ($or$cond5) {
  $72 = HEAP32[$opndx>>2]|0;
  $73 = (_myltoa($72,$buffer,10,0,0)|0);
  HEAP32[$vararg_buffer9>>2] = $73;
  _EmitWarn(1,130,$vararg_buffer9);
 }
 $74 = HEAP32[4884>>2]|0;
 $75 = ($74|0)==(0);
 $76 = HEAP32[(584)>>2]|0;
 $77 = ($76|0)!=(0|0);
 $or$cond = $75 & $77;
 if ($or$cond) {
  $78 = HEAP32[(584)>>2]|0;
  $79 = ((($78)) + 60|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = HEAP32[(584)>>2]|0;
   $85 = ((($84)) + 60|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ((($86)) + 24|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($88)) + 24|0);
   $90 = ((($89)) + 1|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91 & -3;
   $93 = $92 | 2;
   HEAP8[$90>>0] = $93;
  }
 }
 $94 = (_GetCurrOffset()|0);
 $CurrAddr = $94;
 $95 = $CurrAddr;
 $96 = HEAP32[$opndx>>2]|0;
 $97 = (($95>>>0) % ($96>>>0))&-1;
 $seg_align = $97;
 $98 = $seg_align;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $seg_align;
  $101 = HEAP32[$opndx>>2]|0;
  $102 = (($101) - ($100))|0;
  HEAP32[$opndx>>2] = $102;
  $103 = HEAP32[$opndx>>2]|0;
  _fill_in_objfile_space($103);
 }
 $104 = HEAP32[(380)>>2]|0;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = $CurrAddr;
  _LstWrite(0,$106,0);
 }
 $0 = 0;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _fill_in_objfile_space($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $i = 0, $nop_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = HEAP32[(584)>>2]|0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 67|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 5;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)==(0);
 $10 = HEAP32[(584)>>2]|0;
 if ($9) {
  $11 = $0;
  (_SetCurrOffset($10,$11,1,1)|0);
  STACKTOP = sp;return;
 }
 $12 = ((($10)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(1);
 if ($16) {
  $17 = $0;
  _FillDataBytes(0,$17);
  STACKTOP = sp;return;
 }
 while(1) {
  $18 = $0;
  $19 = HEAP8[(556)>>0]|0;
  $20 = $19&255;
  $21 = (15460 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($18>>>0)>($24>>>0);
  if (!($25)) {
   break;
  }
  $i = 1;
  while(1) {
   $26 = $i;
   $27 = HEAP8[(556)>>0]|0;
   $28 = $27&255;
   $29 = (15460 + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ($26|0)<=($32|0);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = HEAP8[(556)>>0]|0;
   $36 = $35&255;
   $37 = (15460 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($34)|0);
   $40 = HEAP8[$39>>0]|0;
   _OutputByte($40);
   $41 = $i;
   $42 = (($41) + 1)|0;
   $i = $42;
  }
  $43 = HEAP8[(556)>>0]|0;
  $44 = $43&255;
  $45 = (15460 + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $0;
  $50 = (($49) - ($48))|0;
  $0 = $50;
 }
 $51 = $0;
 $52 = ($51|0)==(0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $i = 1;
 $53 = HEAP8[(556)>>0]|0;
 $54 = $53&255;
 $55 = (15460 + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $nop_type = $58;
 while(1) {
  $59 = $nop_type;
  $60 = $0;
  $61 = ($59>>>0)>($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $nop_type;
  $63 = $i;
  $64 = (($63) + ($62))|0;
  $i = $64;
  $65 = $nop_type;
  $66 = (($65) + -1)|0;
  $nop_type = $66;
 }
 while(1) {
  $67 = $nop_type;
  $68 = ($67|0)>(0);
  if (!($68)) {
   break;
  }
  $69 = $i;
  $70 = HEAP8[(556)>>0]|0;
  $71 = $70&255;
  $72 = (15460 + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($69)|0);
  $75 = HEAP8[$74>>0]|0;
  _OutputByte($75);
  $76 = $nop_type;
  $77 = (($76) + -1)|0;
  $nop_type = $77;
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 STACKTOP = sp;return;
}
function _WriteCodeLabel($line,$tokenarray) {
 $line = $line|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldchar = 0, $oldcnt = 0, $oldtoken = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $line;
 $2 = $tokenarray;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(8);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $11 = HEAP32[(380)>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  _LstWrite(7,0,0);
 }
 $13 = HEAP32[(616)>>2]|0;
 $oldcnt = $13;
 $14 = $2;
 $15 = ((($14)) + 32|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $oldtoken = $17;
 $18 = $2;
 $19 = ((($18)) + 32|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP8[$21>>0]|0;
 $oldchar = $22;
 HEAP32[(616)>>2] = 2;
 $23 = $2;
 $24 = ((($23)) + 32|0);
 HEAP8[$24>>0] = 0;
 $25 = $2;
 $26 = ((($25)) + 32|0);
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP8[$28>>0] = 0;
 $29 = $2;
 (_ParseLine($29)|0);
 $30 = HEAP8[(6081)>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)==(1);
 if ($32) {
  $33 = $1;
  _WritePreprocessedLine($33);
 }
 $34 = $oldcnt;
 HEAP32[(616)>>2] = $34;
 $35 = $oldtoken;
 $36 = $35&255;
 $37 = $2;
 $38 = ((($37)) + 32|0);
 HEAP8[$38>>0] = $36;
 $39 = $oldchar;
 $40 = $2;
 $41 = ((($40)) + 32|0);
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP8[$43>>0] = $39;
 $0 = 0;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _PreprocessLine($line,$tokenarray) {
 $line = $line|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $or$cond = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $line;
 $2 = $tokenarray;
 HEAP32[(604)>>2] = 0;
 HEAP8[(550)>>0] = 0;
 $3 = $1;
 $4 = $2;
 $5 = (_Tokenize($3,0,$4,0)|0);
 HEAP32[(616)>>2] = $5;
 $6 = HEAP32[(616)>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = HEAP32[8316>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = HEAP32[(560)>>2]|0;
    $11 = $10 >>> 13;
    $12 = $11 & 1;
    $13 = ($12|0)!=(0);
    if (!($13)) {
     break;
    }
   }
   _LstWriteSrcLine();
  }
 } while(0);
 $14 = HEAP32[(616)>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $16 = HEAP32[8316>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[(616)>>2]|0;
  $19 = $2;
  $20 = (($19) + ($18<<4)|0);
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 & 2;
  $25 = ($24|0)!=(0);
  $26 = $1;
  $27 = $2;
  if ($25) {
   $28 = (_ExpandText($26,$27,1)|0);
   $31 = $28;
  } else {
   $29 = (_ExpandLine($26,$27)|0);
   $31 = $29;
  }
  $30 = ($31|0)<(0);
  if ($30) {
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 $i = 0;
 $32 = HEAP32[(616)>>2]|0;
 $33 = ($32|0)>(2);
 do {
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 16|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)==(58);
   if (!($38)) {
    $39 = $2;
    $40 = ((($39)) + 16|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($42|0)==(13);
    if (!($43)) {
     break;
    }
   }
   $i = 2;
  }
 } while(0);
 $44 = $i;
 $45 = $2;
 $46 = (($45) + ($44<<4)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)==(3);
 if ($49) {
  $50 = $i;
  $51 = $2;
  $52 = (($51) + ($50<<4)|0);
  $53 = ((($52)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)<=(3);
  if ($56) {
   $57 = $i;
   $58 = ($57|0)>(1);
   if ($58) {
    $59 = $1;
    $60 = $2;
    $61 = (_WriteCodeLabel($59,$60)|0);
    $62 = (-1)==($61|0);
    if ($62) {
     $0 = 0;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
    }
   }
   $63 = $i;
   $64 = $2;
   $65 = (($64) + ($63<<4)|0);
   $66 = ((($65)) + 1|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = (8468 + ($68<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $i;
   $72 = $2;
   (FUNCTION_TABLE_iii[$70 & 255]($71,$72)|0);
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 $73 = $2;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = ($75|0)==(8);
 L36: do {
  if ($76) {
   $77 = $2;
   $78 = ((($77)) + 16|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = ($80|0)==(3);
   if ($81) {
    $82 = $2;
    $83 = ((($82)) + 16|0);
    $84 = ((($83)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    switch ($86|0) {
    case 47:  {
     break;
    }
    case 6: case 5: case 4:  {
     $113 = $2;
     $114 = ((($113)) + 16|0);
     $115 = ((($114)) + 1|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $118 = (8468 + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $2;
     (FUNCTION_TABLE_iii[$119 & 255](1,$120)|0);
     $0 = 0;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
     break;
    }
    default: {
     break L36;
    }
    }
    $87 = $2;
    $88 = (_CreateConstant($87)|0);
    $sym = $88;
    $89 = ($88|0)!=(0|0);
    if ($89) {
     $90 = $sym;
     $91 = ((($90)) + 16|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)!=(10);
     if ($93) {
      $94 = HEAP8[87035>>0]|0;
      $95 = ($94<<24>>24)!=(0);
      $96 = HEAP32[4884>>2]|0;
      $97 = ($96|0)==(0);
      $or$cond = $95 & $97;
      if ($or$cond) {
       $98 = HEAP32[(600)>>2]|0;
       _StoreLine($98,0,0);
      }
      $99 = HEAP8[(6081)>>0]|0;
      $100 = $99&255;
      $101 = ($100|0)==(1);
      if ($101) {
       $102 = $1;
       _WritePreprocessedLine($102);
      }
     }
     $103 = HEAP32[(560)>>2]|0;
     $104 = $103 >>> 11;
     $105 = $104 & 1;
     $106 = ($105|0)==(1);
     if ($106) {
      $107 = $sym;
      $108 = ((($107)) + 16|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109|0)==(1);
      $111 = $110 ? 2 : 3;
      $112 = $sym;
      _LstWrite($111,0,$112);
     }
    }
    $0 = 0;
    $122 = $0;
    STACKTOP = sp;return ($122|0);
   }
  }
 } while(0);
 $121 = HEAP32[(616)>>2]|0;
 $0 = $121;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _LocalDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $curr = 0, $info = 0, $j = 0, $local = 0, $name = 0, $opndx = 0, $or$cond = 0, $ti = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 128|0;
 $ti = sp + 88|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $0 = 0;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 $5 = HEAP32[15484>>2]|0;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = HEAP32[15488>>2]|0;
 $9 = ($8|0)==(0|0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $10 = (_EmitError(92)|0);
  $0 = $10;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 $11 = HEAP32[15488>>2]|0;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $info = $13;
 $14 = $info;
 $15 = ((($14)) + 42|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (15660 + (($17*12)|0)|0);
 $19 = ((($18)) + 10|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(4);
 if ($22) {
  $23 = $info;
  $24 = ((($23)) + 40|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 & 127;
  $27 = $26 | -128;
  HEAP8[$24>>0] = $27;
  $28 = HEAP32[15484>>2]|0;
  $29 = $28 | 4;
  HEAP32[15484>>2] = $29;
 }
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$1>>2] = $31;
 L12: while(1) {
  $32 = HEAP32[$1>>2]|0;
  $33 = $2;
  $34 = (($33) + ($32<<4)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)!=(8);
  $38 = HEAP32[$1>>2]|0;
  $39 = $2;
  $40 = (($39) + ($38<<4)|0);
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  if ($37) {
   label = 9;
   break;
  }
  $name = $42;
  $44 = ((($ti)) + 4|0);
  HEAP32[$44>>2] = 0;
  $45 = ((($ti)) + 12|0);
  HEAP8[$45>>0] = 0;
  $46 = ((($ti)) + 16|0);
  HEAP32[$46>>2] = 192;
  $47 = HEAP32[(512)>>2]|0;
  $48 = 1 << $47;
  $49 = 104 & $48;
  $50 = ($49|0)!=(0);
  $51 = ((($ti)) + 13|0);
  if ($50) {
   HEAP8[$51>>0] = 1;
  } else {
   HEAP8[$51>>0] = 0;
  }
  $52 = HEAP8[(556)>>0]|0;
  $53 = ((($ti)) + 14|0);
  HEAP8[$53>>0] = $52;
  $54 = $name;
  $55 = (_SymLCreate($54)|0);
  $local = $55;
  $56 = $local;
  $57 = ($56|0)!=(0|0);
  if (!($57)) {
   label = 14;
   break;
  }
  $58 = $local;
  $59 = ((($58)) + 16|0);
  HEAP32[$59>>2] = 5;
  $60 = $local;
  $61 = ((($60)) + 24|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 & -3;
  $64 = $63 | 2;
  HEAP16[$61>>1] = $64;
  $65 = $local;
  $66 = ((($65)) + 40|0);
  HEAP32[$66>>2] = 1;
  $67 = ((($ti)) + 14|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $cond = ($69|0)==(0);
  $70 = $local;
  $71 = ((($70)) + 20|0);
  if ($cond) {
   HEAP32[$71>>2] = 1;
   HEAP32[$ti>>2] = 2;
  } else {
   HEAP32[$71>>2] = 3;
   HEAP32[$ti>>2] = 4;
  }
  $72 = HEAP32[$1>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[$1>>2] = $73;
  $74 = HEAP32[$1>>2]|0;
  $75 = $2;
  $76 = (($75) + ($74<<4)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(91);
  do {
   if ($79) {
    $80 = HEAP32[$1>>2]|0;
    $81 = (($80) + 1)|0;
    HEAP32[$1>>2] = $81;
    $82 = HEAP32[$1>>2]|0;
    $j = $82;
    while(1) {
     $83 = $j;
     $84 = HEAP32[(616)>>2]|0;
     $85 = ($83|0)<($84|0);
     if (!($85)) {
      break;
     }
     $86 = $j;
     $87 = $2;
     $88 = (($87) + ($86<<4)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = ($90|0)==(44);
     if ($91) {
      break;
     }
     $92 = $j;
     $93 = $2;
     $94 = (($93) + ($92<<4)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = ($96|0)==(58);
     if ($97) {
      break;
     }
     $98 = $j;
     $99 = (($98) + 1)|0;
     $j = $99;
    }
    $100 = $2;
    $101 = $j;
    $102 = (_EvalOperand($1,$100,$101,$opndx,0)|0);
    $103 = (-1)==($102|0);
    if ($103) {
     label = 25;
     break L12;
    }
    $104 = ((($opndx)) + 40|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($105|0)!=(0);
    if ($106) {
     (_EmitError(65)|0);
     HEAP32[$opndx>>2] = 1;
    }
    $107 = HEAP32[$opndx>>2]|0;
    $108 = $local;
    $109 = ((($108)) + 40|0);
    HEAP32[$109>>2] = $107;
    $110 = $local;
    $111 = ((($110)) + 24|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = $112 & -513;
    $114 = $113 | 512;
    HEAP16[$111>>1] = $114;
    $115 = HEAP32[$1>>2]|0;
    $116 = $2;
    $117 = (($116) + ($115<<4)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($119|0)==(93);
    if ($120) {
     $121 = HEAP32[$1>>2]|0;
     $122 = (($121) + 1)|0;
     HEAP32[$1>>2] = $122;
     break;
    } else {
     (_EmitError(111)|0);
     break;
    }
   }
  } while(0);
  $123 = HEAP32[$1>>2]|0;
  $124 = $2;
  $125 = (($124) + ($123<<4)|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = ($127|0)==(58);
  do {
   if ($128) {
    $129 = HEAP32[$1>>2]|0;
    $130 = (($129) + 1)|0;
    HEAP32[$1>>2] = $130;
    $131 = $2;
    $132 = (_GetQualifiedType($1,$131,$ti)|0);
    $133 = ($132|0)==(-1);
    if ($133) {
     label = 33;
     break L12;
    }
    $134 = ((($ti)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $local;
    $137 = ((($136)) + 20|0);
    HEAP32[$137>>2] = $135;
    $138 = ((($ti)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)==(196);
    $141 = ((($ti)) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $local;
    if ($140) {
     $144 = ((($143)) + 52|0);
     HEAP32[$144>>2] = $142;
     break;
    } else {
     $145 = ((($143)) + 32|0);
     HEAP32[$145>>2] = $142;
     break;
    }
   }
  } while(0);
  $146 = ((($ti)) + 12|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $local;
  $149 = ((($148)) + 28|0);
  $150 = ((($149)) + 1|0);
  HEAP8[$150>>0] = $147;
  $151 = ((($ti)) + 13|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $local;
  $154 = ((($153)) + 28|0);
  $155 = ((($154)) + 3|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $152 & 1;
  $158 = ($157 << 4)&255;
  $159 = $156 & -17;
  $160 = $159 | $158;
  HEAP8[$155>>0] = $160;
  $161 = ((($ti)) + 14|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $local;
  $164 = ((($163)) + 28|0);
  HEAP8[$164>>0] = $162;
  $165 = ((($ti)) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166&255;
  $168 = $local;
  $169 = ((($168)) + 28|0);
  $170 = ((($169)) + 2|0);
  HEAP8[$170>>0] = $167;
  $171 = HEAP32[$ti>>2]|0;
  $172 = $local;
  $173 = ((($172)) + 40|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = Math_imul($171, $174)|0;
  $176 = $local;
  $177 = ((($176)) + 36|0);
  HEAP32[$177>>2] = $175;
  $178 = $info;
  $179 = ((($178)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)==(0|0);
  if ($181) {
   $182 = $local;
   $183 = $info;
   $184 = ((($183)) + 8|0);
   HEAP32[$184>>2] = $182;
  } else {
   $185 = $info;
   $186 = ((($185)) + 8|0);
   $187 = HEAP32[$186>>2]|0;
   $curr = $187;
   while(1) {
    $188 = $curr;
    $189 = ((($188)) + 68|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)!=(0|0);
    if (!($191)) {
     break;
    }
    $192 = $curr;
    $193 = ((($192)) + 68|0);
    $194 = HEAP32[$193>>2]|0;
    $curr = $194;
   }
   $195 = $local;
   $196 = $curr;
   $197 = ((($196)) + 68|0);
   HEAP32[$197>>2] = $195;
  }
  $198 = HEAP32[$1>>2]|0;
  $199 = $2;
  $200 = (($199) + ($198<<4)|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = ($202|0)!=(0);
  if ($203) {
   $204 = HEAP32[$1>>2]|0;
   $205 = $2;
   $206 = (($205) + ($204<<4)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = ($208|0)==(44);
   $210 = HEAP32[$1>>2]|0;
   if (!($209)) {
    label = 47;
    break;
   }
   $211 = (($210) + 1)|0;
   $212 = HEAP32[(616)>>2]|0;
   $213 = ($211|0)<($212|0);
   if ($213) {
    $214 = HEAP32[$1>>2]|0;
    $215 = (($214) + 1)|0;
    HEAP32[$1>>2] = $215;
   }
  }
  $221 = HEAP32[$1>>2]|0;
  $222 = HEAP32[(616)>>2]|0;
  $223 = ($221|0)<($222|0);
  if (!($223)) {
   label = 49;
   break;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$vararg_buffer>>2] = $42;
  $43 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $43;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 else if ((label|0) == 25) {
  $0 = -1;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 else if ((label|0) == 33) {
  $0 = -1;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 else if ((label|0) == 47) {
  $216 = $2;
  $217 = (($216) + ($210<<4)|0);
  $218 = ((($217)) + 12|0);
  $219 = HEAP32[$218>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $219;
  $220 = (_EmitErr(39,$vararg_buffer2)|0);
  $0 = $220;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 else if ((label|0) == 49) {
  $0 = 0;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 return (0)|0;
}
function _UpdateStackBase($sym,$opnd) {
 $sym = $sym|0;
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $opnd;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[15492>>2] = $5;
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[15496>>2] = $8;
 }
 $9 = HEAP32[15492>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[15496>>2]|0;
 $13 = $0;
 $14 = ((($13)) + 36|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _UpdateProcStatus($sym,$opnd) {
 $sym = $sym|0;
 $opnd = $opnd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $opnd;
 $2 = HEAP32[15488>>2]|0;
 $3 = ($2|0)!=(0|0);
 $4 = HEAP32[15484>>2]|0;
 $5 = $3 ? $4 : 0;
 $6 = $0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _ParseProc($proc,$i,$tokenarray,$IsPROC,$langtype) {
 $proc = $proc|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $IsPROC = $IsPROC|0;
 $langtype = $langtype|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ofssize = 0, $cnt = 0, $idx = 0, $j = 0, $max = 0, $newmemtype = 0, $newofssize = 0, $oldofssize = 0, $oldpublic = 0, $or$cond = 0, $regist = 0, $sym = 0, $token = 0;
 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 132|0;
 $5 = sp + 124|0;
 $1 = $proc;
 HEAP32[$2>>2] = $i;
 $3 = $tokenarray;
 $4 = $IsPROC;
 HEAP32[$5>>2] = $langtype;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8&65535) >>> 7;
 $10 = $9 & 1;
 $11 = $10&255;
 $oldpublic = $11;
 $12 = $4;
 $13 = ($12<<24>>24)!=(0);
 do {
  if ($13) {
   $14 = HEAP32[(560)>>2]|0;
   $15 = $14 >>> 3;
   $16 = $15 & 1;
   $17 = $16&255;
   $18 = $1;
   $19 = ((($18)) + 60|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 40|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $17 & 1;
   $24 = ($23 << 2)&255;
   $25 = $22 & -5;
   $26 = $25 | $24;
   HEAP8[$21>>0] = $26;
   $27 = HEAP32[(560)>>2]|0;
   $28 = $27 >>> 2;
   $29 = $28 & 1;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 24|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = $33 & -129;
    $35 = $34 | 128;
    HEAP16[$32>>1] = $35;
   }
   $36 = $1;
   $37 = ((($36)) + 60|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($38)) + 42|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = $40&65535;
   $42 = (15660 + (($41*12)|0)|0);
   $43 = ((($42)) + 10|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)!=(5);
   if ($46) {
    $47 = $1;
    $48 = ((($47)) + 60|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 40|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51 & -3;
    HEAP8[$50>>0] = $52;
    break;
   }
   $53 = HEAP8[(6084)>>0]|0;
   $54 = ($53<<24>>24)!=(0);
   if ($54) {
    $55 = HEAP8[(556)>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)>(0);
    if ($57) {
     $65 = 1;
    } else {
     $58 = HEAP32[(544)>>2]|0;
     $59 = $58 & 240;
     $60 = ($59|0)==(32);
     if ($60) {
      $65 = 1;
     } else {
      $61 = HEAP32[(544)>>2]|0;
      $62 = $61 & 240;
      $63 = ($62>>>0)>=(80);
      $65 = $63;
     }
    }
    $64 = $65 ? 1 : 0;
    $66 = $64&255;
    $67 = $1;
    $68 = ((($67)) + 60|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ((($69)) + 40|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $66 & 1;
    $73 = ($72 << 1)&255;
    $74 = $71 & -3;
    $75 = $74 | $73;
    HEAP8[$70>>0] = $75;
    break;
   } else {
    $76 = HEAP32[(544)>>2]|0;
    $77 = $76 & 240;
    $78 = ($77|0)==(32);
    if ($78) {
     $86 = 1;
    } else {
     $79 = HEAP32[(544)>>2]|0;
     $80 = $79 & 240;
     $81 = ($80|0)==(112);
     if ($81) {
      $86 = 1;
     } else {
      $82 = HEAP32[(544)>>2]|0;
      $83 = $82 & 240;
      $84 = ($83|0)==(48);
      $86 = $84;
     }
    }
    $85 = $86 ? 1 : 0;
    $87 = $85&255;
    $88 = $1;
    $89 = ((($88)) + 60|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 40|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $87 & 1;
    $94 = ($93 << 1)&255;
    $95 = $92 & -3;
    $96 = $95 | $94;
    HEAP8[$91>>0] = $96;
    break;
   }
  }
 } while(0);
 $97 = HEAP32[$2>>2]|0;
 $98 = $3;
 $99 = (($98) + ($97<<4)|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = ($101|0)==(6);
 if ($102) {
  $103 = HEAP32[$2>>2]|0;
  $104 = $3;
  $105 = (($104) + ($103<<4)|0);
  $106 = ((($105)) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107>>>0)>=(147);
  if ($108) {
   $109 = HEAP32[$2>>2]|0;
   $110 = $3;
   $111 = (($110) + ($109<<4)|0);
   $112 = ((($111)) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113>>>0)<=(152);
   if ($114) {
    $115 = HEAP32[$2>>2]|0;
    $116 = $3;
    $117 = (($116) + ($115<<4)|0);
    $118 = ((($117)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (15660 + (($119*12)|0)|0);
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $122&255;
    $Ofssize = $123;
    $124 = $4;
    $125 = ($124<<24>>24)!=(0);
    do {
     if ($125) {
      $126 = HEAP8[(556)>>0]|0;
      $127 = $126&255;
      $128 = ($127|0)>=(1);
      if ($128) {
       $129 = $Ofssize;
       $130 = $129&255;
       $131 = ($130|0)==(0);
       if (!($131)) {
        label = 21;
       }
      } else {
       label = 21;
      }
      if ((label|0) == 21) {
       $132 = HEAP8[(556)>>0]|0;
       $133 = $132&255;
       $134 = ($133|0)==(0);
       if (!($134)) {
        break;
       }
       $135 = $Ofssize;
       $136 = $135&255;
       $137 = ($136|0)==(1);
       if (!($137)) {
        break;
       }
      }
      (_EmitError(171)|0);
     }
    } while(0);
    $138 = HEAP32[$2>>2]|0;
    $139 = $3;
    $140 = (($139) + ($138<<4)|0);
    $141 = ((($140)) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (15660 + (($142*12)|0)|0);
    $144 = ((($143)) + 10|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $newmemtype = $146;
    $147 = $Ofssize;
    $148 = $147&255;
    $149 = ($148|0)!=(254);
    $150 = $Ofssize;
    $151 = HEAP8[(556)>>0]|0;
    $$sink = $149 ? $150 : $151;
    $152 = $$sink&255;
    $153 = $152&255;
    $newofssize = $153;
    $154 = HEAP32[$2>>2]|0;
    $155 = (($154) + 1)|0;
    HEAP32[$2>>2] = $155;
   } else {
    label = 25;
   }
  } else {
   label = 25;
  }
 } else {
  label = 25;
 }
 if ((label|0) == 25) {
  $156 = HEAP32[(512)>>2]|0;
  $157 = 1 << $156;
  $158 = 112 & $157;
  $159 = ($158|0)!=(0);
  $160 = $159 ? 130 : 129;
  $newmemtype = $160;
  $161 = HEAP8[(556)>>0]|0;
  $newofssize = $161;
 }
 $162 = $1;
 $163 = ((($162)) + 16|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)==(7);
 $166 = $1;
 if ($165) {
  $167 = ((($166)) + 28|0);
  $168 = ((($167)) + 3|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = $169 & 3;
  $oldofssize = $170;
 } else {
  $171 = (_GetSymOfssize($166)|0);
  $172 = $171&255;
  $oldofssize = $172;
 }
 $173 = $1;
 $174 = ((($173)) + 20|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(192);
 do {
  if ($176) {
   $177 = $1;
   $178 = ((($177)) + 20|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $newmemtype;
   $181 = ($179|0)!=($180|0);
   if (!($181)) {
    $182 = $oldofssize;
    $183 = $182&255;
    $184 = $newofssize;
    $185 = $184&255;
    $186 = ($183|0)!=($185|0);
    if (!($186)) {
     label = 36;
     break;
    }
   }
   $187 = $1;
   $188 = ((($187)) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)==(129);
   if (!($190)) {
    $191 = $1;
    $192 = ((($191)) + 20|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)==(130);
    if (!($194)) {
     $195 = $1;
     $196 = ((($195)) + 4|0);
     $197 = HEAP32[$196>>2]|0;
     HEAP32[$vararg_buffer>>2] = $197;
     $198 = (_EmitErr(143,$vararg_buffer)|0);
     $0 = $198;
     $685 = $0;
     STACKTOP = sp;return ($685|0);
    }
   }
   (_EmitError(138)|0);
  } else {
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $199 = $newmemtype;
  $200 = $1;
  $201 = ((($200)) + 20|0);
  HEAP32[$201>>2] = $199;
  $202 = $4;
  $203 = $202&255;
  $204 = ($203|0)==(0);
  if ($204) {
   $205 = $newofssize;
   $206 = $1;
   $207 = ((($206)) + 28|0);
   $208 = ((($207)) + 3|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $205 & 3;
   $211 = $209 & -4;
   $212 = $211 | $210;
   HEAP8[$208>>0] = $212;
  }
 }
 $213 = $3;
 (_GetLangType($2,$213,$5)|0);
 $214 = $1;
 $215 = ((($214)) + 48|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)!=(0);
 if ($217) {
  $218 = $1;
  $219 = ((($218)) + 48|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = HEAP32[$5>>2]|0;
  $222 = ($220|0)!=($221|0);
  if ($222) {
   (_EmitError(138)|0);
  } else {
   label = 41;
  }
 } else {
  label = 41;
 }
 if ((label|0) == 41) {
  $223 = HEAP32[$5>>2]|0;
  $224 = $1;
  $225 = ((($224)) + 48|0);
  HEAP32[$225>>2] = $223;
 }
 $226 = HEAP32[$2>>2]|0;
 $227 = $3;
 $228 = (($227) + ($226<<4)|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = $229&255;
 $231 = ($230|0)==(8);
 if ($231) {
  label = 44;
 } else {
  $232 = HEAP32[$2>>2]|0;
  $233 = $3;
  $234 = (($233) + ($232<<4)|0);
  $235 = HEAP8[$234>>0]|0;
  $236 = $235&255;
  $237 = ($236|0)==(3);
  if ($237) {
   label = 44;
  }
 }
 do {
  if ((label|0) == 44) {
   $238 = HEAP32[$2>>2]|0;
   $239 = $3;
   $240 = (($239) + ($238<<4)|0);
   $241 = ((($240)) + 4|0);
   $242 = HEAP32[$241>>2]|0;
   $token = $242;
   $243 = $token;
   $244 = (_strcasecmp($243,109618)|0);
   $245 = ($244|0)==(0);
   $246 = $4;
   if ($245) {
    $247 = ($246<<24>>24)!=(0);
    if ($247) {
     $248 = $1;
     $249 = ((($248)) + 24|0);
     $250 = HEAP16[$249>>1]|0;
     $251 = $250 & -129;
     HEAP16[$249>>1] = $251;
     $252 = $1;
     $253 = ((($252)) + 24|0);
     $254 = HEAP16[$253>>1]|0;
     $255 = $254 & -5;
     $256 = $255 | 4;
     HEAP16[$253>>1] = $256;
     $257 = $oldpublic;
     $258 = ($257<<24>>24)!=(0);
     if ($258) {
      _SkipSavedState();
     }
     $259 = $1;
     $260 = ((($259)) + 60|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = ((($261)) + 40|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263 & -5;
     HEAP8[$262>>0] = $264;
    }
    $265 = HEAP32[$2>>2]|0;
    $266 = (($265) + 1)|0;
    HEAP32[$2>>2] = $266;
    break;
   }
   $267 = $246&255;
   $268 = ($267|0)!=(0);
   if ($268) {
    $269 = $token;
    $270 = (_strcasecmp($269,109611)|0);
    $271 = ($270|0)==(0);
    if ($271) {
     $272 = $1;
     $273 = ((($272)) + 24|0);
     $274 = HEAP16[$273>>1]|0;
     $275 = $274 & -129;
     $276 = $275 | 128;
     HEAP16[$273>>1] = $276;
     $277 = $1;
     $278 = ((($277)) + 60|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ((($279)) + 40|0);
     $281 = HEAP8[$280>>0]|0;
     $282 = $281 & -5;
     HEAP8[$280>>0] = $282;
     $283 = HEAP32[$2>>2]|0;
     $284 = (($283) + 1)|0;
     HEAP32[$2>>2] = $284;
     break;
    }
   }
   $285 = $token;
   $286 = (_strcasecmp($285,99115)|0);
   $287 = ($286|0)==(0);
   if ($287) {
    $288 = $4;
    $289 = ($288<<24>>24)!=(0);
    if ($289) {
     $290 = $1;
     $291 = ((($290)) + 24|0);
     $292 = HEAP16[$291>>1]|0;
     $293 = $292 & -129;
     $294 = $293 | 128;
     HEAP16[$291>>1] = $294;
     $295 = $1;
     $296 = ((($295)) + 60|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((($297)) + 40|0);
     $299 = HEAP8[$298>>0]|0;
     $300 = $299 & -5;
     $301 = $300 | 4;
     HEAP8[$298>>0] = $301;
     $302 = HEAP8[(556)>>0]|0;
     $303 = $302&255;
     $304 = ($303|0)==(0);
     if ($304) {
      $305 = $1;
      $306 = ((($305)) + 20|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ($307|0)==(129);
      if ($308) {
       $309 = $1;
       $310 = ((($309)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       HEAP32[$vararg_buffer2>>2] = $311;
       (_EmitErr(276,$vararg_buffer2)|0);
      }
     }
    }
    $312 = HEAP32[$2>>2]|0;
    $313 = (($312) + 1)|0;
    HEAP32[$2>>2] = $313;
   }
  }
 } while(0);
 $314 = $4;
 $315 = $314&255;
 $316 = ($315|0)!=(0);
 if ($316) {
  $317 = HEAP32[$2>>2]|0;
  $318 = $3;
  $319 = (($318) + ($317<<4)|0);
  $320 = HEAP8[$319>>0]|0;
  $321 = $320&255;
  $322 = ($321|0)==(9);
  if ($322) {
   $323 = HEAP32[$2>>2]|0;
   $324 = $3;
   $325 = (($324) + ($323<<4)|0);
   $326 = ((($325)) + 1|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = $327 << 24 >> 24;
   $329 = ($328|0)==(60);
   if ($329) {
    $330 = HEAP32[(616)>>2]|0;
    $331 = (($330) + 1)|0;
    $idx = $331;
    $332 = HEAP8[(576)>>0]|0;
    $333 = $332&255;
    $334 = ($333|0)==(2);
    L89: do {
     if (!($334)) {
      $335 = HEAP8[(576)>>0]|0;
      $336 = $335&255;
      $337 = ($336|0)==(1);
      $338 = HEAP32[$2>>2]|0;
      $339 = $3;
      $340 = (($339) + ($338<<4)|0);
      if ($337) {
       $341 = ((($340)) + 8|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = (($342) + 1)|0;
       $344 = (_LclAlloc($343)|0);
       $345 = $1;
       $346 = ((($345)) + 60|0);
       $347 = HEAP32[$346>>2]|0;
       $348 = ((($347)) + 24|0);
       HEAP32[$348>>2] = $344;
       $349 = $1;
       $350 = ((($349)) + 60|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($351)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = HEAP32[$2>>2]|0;
       $355 = $3;
       $356 = (($355) + ($354<<4)|0);
       $357 = ((($356)) + 4|0);
       $358 = HEAP32[$357>>2]|0;
       (_strcpy($353,$358)|0);
       break;
      }
      $359 = ((($340)) + 4|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $idx;
      $362 = $3;
      $363 = (_Tokenize($360,$361,$362,1)|0);
      $max = $363;
      L94: while(1) {
       $364 = $idx;
       $365 = $max;
       $366 = ($364|0)<($365|0);
       if (!($366)) {
        break L89;
       }
       $367 = $idx;
       $368 = $3;
       $369 = (($368) + ($367<<4)|0);
       $370 = HEAP8[$369>>0]|0;
       $371 = $370&255;
       $372 = ($371|0)==(8);
       $373 = $idx;
       $374 = $3;
       $375 = (($374) + ($373<<4)|0);
       $376 = ((($375)) + 4|0);
       $377 = HEAP32[$376>>2]|0;
       if (!($372)) {
        label = 79;
        break;
       }
       $378 = (_strcasecmp($377,99122)|0);
       $379 = ($378|0)==(0);
       do {
        if ($379) {
         $380 = $1;
         $381 = ((($380)) + 60|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ((($382)) + 40|0);
         $384 = HEAP8[$383>>0]|0;
         $385 = $384 & -9;
         $386 = $385 | 8;
         HEAP8[$383>>0] = $386;
        } else {
         $387 = HEAP8[(556)>>0]|0;
         $388 = $387&255;
         $389 = ($388|0)!=(2);
         if (!($389)) {
          label = 75;
          break L94;
         }
         $390 = $idx;
         $391 = $3;
         $392 = (($391) + ($390<<4)|0);
         $393 = ((($392)) + 4|0);
         $394 = HEAP32[$393>>2]|0;
         $395 = (_strcasecmp($394,99133)|0);
         $396 = ($395|0)==(0);
         if (!($396)) {
          label = 75;
          break L94;
         }
         $397 = HEAP32[(512)>>2]|0;
         $398 = ($397|0)==(7);
         if ($398) {
          _EmitWarn(2,226,$vararg_buffer5);
          break;
         } else {
          $399 = $1;
          $400 = ((($399)) + 60|0);
          $401 = HEAP32[$400>>2]|0;
          $402 = ((($401)) + 40|0);
          $403 = HEAP8[$402>>0]|0;
          $404 = $403 & -17;
          $405 = $404 | 16;
          HEAP8[$402>>0] = $405;
          break;
         }
        }
       } while(0);
       $412 = $idx;
       $413 = (($412) + 1)|0;
       $414 = $3;
       $415 = (($414) + ($413<<4)|0);
       $416 = HEAP8[$415>>0]|0;
       $417 = $416&255;
       $418 = ($417|0)==(44);
       if ($418) {
        $419 = $idx;
        $420 = (($419) + 2)|0;
        $421 = $3;
        $422 = (($421) + ($420<<4)|0);
        $423 = HEAP8[$422>>0]|0;
        $424 = $423&255;
        $425 = ($424|0)!=(0);
        if ($425) {
         $426 = $idx;
         $427 = (($426) + 1)|0;
         $idx = $427;
        }
       }
       $429 = $idx;
       $430 = (($429) + 1)|0;
       $idx = $430;
      }
      if ((label|0) == 75) {
       $406 = $idx;
       $407 = $3;
       $408 = (($407) + ($406<<4)|0);
       $409 = ((($408)) + 4|0);
       $410 = HEAP32[$409>>2]|0;
       HEAP32[$vararg_buffer7>>2] = $410;
       $411 = (_EmitErr(225,$vararg_buffer7)|0);
       $0 = $411;
       $685 = $0;
       STACKTOP = sp;return ($685|0);
      }
      else if ((label|0) == 79) {
       HEAP32[$vararg_buffer10>>2] = $377;
       $428 = (_EmitErr(209,$vararg_buffer10)|0);
       $0 = $428;
       $685 = $0;
       STACKTOP = sp;return ($685|0);
      }
     }
    } while(0);
    $431 = HEAP32[$2>>2]|0;
    $432 = (($431) + 1)|0;
    HEAP32[$2>>2] = $432;
   }
  }
 }
 $433 = HEAP8[(556)>>0]|0;
 $434 = $433&255;
 $435 = ($434|0)==(2);
 if ($435) {
  $436 = $4;
  $437 = $436&255;
  $438 = ($437|0)!=(0);
  if ($438) {
   $439 = HEAP32[$2>>2]|0;
   $440 = $3;
   $441 = (($440) + ($439<<4)|0);
   $442 = HEAP8[$441>>0]|0;
   $443 = $442&255;
   $444 = ($443|0)==(7);
   if ($444) {
    $445 = HEAP32[$2>>2]|0;
    $446 = $3;
    $447 = (($446) + ($445<<4)|0);
    $448 = ((($447)) + 8|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ($449|0)==(189);
    if ($450) {
     $451 = HEAP32[(6100)>>2]|0;
     $452 = ($451|0)!=(2);
     $453 = HEAP32[(524)>>2]|0;
     $454 = ($453|0)!=(2);
     $or$cond = $452 & $454;
     if ($or$cond) {
      $455 = (_GetResWName(189,0)|0);
      HEAP32[$vararg_buffer13>>2] = $455;
      $456 = (_EmitErr(224,$vararg_buffer13)|0);
      $0 = $456;
      $685 = $0;
      STACKTOP = sp;return ($685|0);
     }
     $457 = HEAP32[$2>>2]|0;
     $458 = (($457) + 1)|0;
     HEAP32[$2>>2] = $458;
     $459 = HEAP32[$2>>2]|0;
     $460 = $3;
     $461 = (($460) + ($459<<4)|0);
     $462 = HEAP8[$461>>0]|0;
     $463 = $462&255;
     $464 = ($463|0)==(58);
     if ($464) {
      $465 = HEAP32[$2>>2]|0;
      $466 = (($465) + 1)|0;
      HEAP32[$2>>2] = $466;
      $467 = HEAP32[$2>>2]|0;
      $468 = $3;
      $469 = (($468) + ($467<<4)|0);
      $470 = HEAP8[$469>>0]|0;
      $471 = $470&255;
      $472 = ($471|0)!=(8);
      $473 = HEAP32[$2>>2]|0;
      $474 = $3;
      $475 = (($474) + ($473<<4)|0);
      $476 = ((($475)) + 4|0);
      $477 = HEAP32[$476>>2]|0;
      if ($472) {
       HEAP32[$vararg_buffer16>>2] = $477;
       $478 = (_EmitErr(209,$vararg_buffer16)|0);
       $0 = $478;
       $685 = $0;
       STACKTOP = sp;return ($685|0);
      }
      $479 = (_SymFind($477)|0);
      $sym = $479;
      $480 = $sym;
      $481 = ($480|0)==(0|0);
      do {
       if ($481) {
        $482 = HEAP32[$2>>2]|0;
        $483 = $3;
        $484 = (($483) + ($482<<4)|0);
        $485 = ((($484)) + 4|0);
        $486 = HEAP32[$485>>2]|0;
        $487 = (_SymCreate($486)|0);
        $sym = $487;
        $488 = $sym;
        $489 = ((($488)) + 16|0);
        HEAP32[$489>>2] = 0;
        $490 = $sym;
        $491 = ((($490)) + 24|0);
        $492 = HEAP16[$491>>1]|0;
        $493 = $492 & -2;
        $494 = $493 | 1;
        HEAP16[$491>>1] = $494;
        $495 = $sym;
        _sym_add_table(15404,$495);
       } else {
        $496 = $sym;
        $497 = ((($496)) + 16|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = ($498|0)!=(0);
        if ($499) {
         $500 = $sym;
         $501 = ((($500)) + 16|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = ($502|0)!=(1);
         if ($503) {
          $504 = $sym;
          $505 = ((($504)) + 16|0);
          $506 = HEAP32[$505>>2]|0;
          $507 = ($506|0)!=(2);
          if (!($507)) {
           break;
          }
          $508 = $sym;
          $509 = ((($508)) + 4|0);
          $510 = HEAP32[$509>>2]|0;
          HEAP32[$vararg_buffer19>>2] = $510;
          $511 = (_EmitErr(143,$vararg_buffer19)|0);
          $0 = $511;
          $685 = $0;
          STACKTOP = sp;return ($685|0);
         }
        }
       }
      } while(0);
      $512 = $sym;
      $513 = $1;
      $514 = ((($513)) + 60|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ((($515)) + 28|0);
      HEAP32[$516>>2] = $512;
      $517 = HEAP32[$2>>2]|0;
      $518 = (($517) + 1)|0;
      HEAP32[$2>>2] = $518;
     } else {
      $519 = $1;
      $520 = ((($519)) + 60|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = ((($521)) + 28|0);
      HEAP32[$522>>2] = 0;
     }
     $523 = $1;
     $524 = ((($523)) + 60|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = ((($525)) + 40|0);
     $527 = HEAP8[$526>>0]|0;
     $528 = $527 & -65;
     $529 = $528 | 64;
     HEAP8[$526>>0] = $529;
    }
   }
  }
 }
 $530 = HEAP32[$2>>2]|0;
 $531 = $3;
 $532 = (($531) + ($530<<4)|0);
 $533 = HEAP8[$532>>0]|0;
 $534 = $533&255;
 $535 = ($534|0)==(8);
 L144: do {
  if ($535) {
   $536 = HEAP32[$2>>2]|0;
   $537 = $3;
   $538 = (($537) + ($536<<4)|0);
   $539 = ((($538)) + 4|0);
   $540 = HEAP32[$539>>2]|0;
   $541 = (_strcasecmp($540,99140)|0);
   $542 = ($541|0)==(0);
   if ($542) {
    $543 = $4;
    $544 = ($543<<24>>24)!=(0);
    if (!($544)) {
     $545 = HEAP32[$2>>2]|0;
     $546 = $3;
     $547 = (($546) + ($545<<4)|0);
     $548 = ((($547)) + 4|0);
     $549 = HEAP32[$548>>2]|0;
     HEAP32[$vararg_buffer22>>2] = $549;
     (_EmitErr(209,$vararg_buffer22)|0);
    }
    $550 = HEAP32[$2>>2]|0;
    $551 = (($550) + 1)|0;
    HEAP32[$2>>2] = $551;
    $cnt = 0;
    $552 = HEAP32[$2>>2]|0;
    $j = $552;
    while(1) {
     $553 = $j;
     $554 = $3;
     $555 = (($554) + ($553<<4)|0);
     $556 = HEAP8[$555>>0]|0;
     $557 = $556&255;
     $558 = ($557|0)==(2);
     if (!($558)) {
      break;
     }
     $559 = $j;
     $560 = (($559) + 1)|0;
     $j = $560;
     $561 = $cnt;
     $562 = (($561) + 1)|0;
     $cnt = $562;
    }
    $563 = $cnt;
    $564 = ($563|0)==(0);
    if ($564) {
     $565 = HEAP32[$2>>2]|0;
     $566 = (($565) - 1)|0;
     $567 = $3;
     $568 = (($567) + ($566<<4)|0);
     $569 = ((($568)) + 12|0);
     $570 = HEAP32[$569>>2]|0;
     HEAP32[$vararg_buffer25>>2] = $570;
     (_EmitErr(209,$vararg_buffer25)|0);
     break;
    }
    $571 = $cnt;
    $572 = (($571) + 1)|0;
    $573 = $572<<1;
    $574 = (_LclAlloc($573)|0);
    $regist = $574;
    $575 = $regist;
    $576 = $1;
    $577 = ((($576)) + 60|0);
    $578 = HEAP32[$577>>2]|0;
    HEAP32[$578>>2] = $575;
    $579 = $cnt;
    $580 = $579&65535;
    $581 = $regist;
    $582 = ((($581)) + 2|0);
    $regist = $582;
    HEAP16[$581>>1] = $580;
    while(1) {
     $583 = HEAP32[$2>>2]|0;
     $584 = $3;
     $585 = (($584) + ($583<<4)|0);
     $586 = HEAP8[$585>>0]|0;
     $587 = $586&255;
     $588 = ($587|0)==(2);
     if (!($588)) {
      break L144;
     }
     $589 = HEAP32[$2>>2]|0;
     $590 = $3;
     $591 = (($590) + ($589<<4)|0);
     $592 = ((($591)) + 8|0);
     $593 = HEAP32[$592>>2]|0;
     $594 = (_SizeFromRegister($593)|0);
     $595 = ($594|0)==(1);
     if ($595) {
      (_EmitError(170)|0);
     }
     $596 = HEAP32[$2>>2]|0;
     $597 = $3;
     $598 = (($597) + ($596<<4)|0);
     $599 = ((($598)) + 8|0);
     $600 = HEAP32[$599>>2]|0;
     $601 = $600&65535;
     $602 = $regist;
     $603 = ((($602)) + 2|0);
     $regist = $603;
     HEAP16[$602>>1] = $601;
     $604 = HEAP32[$2>>2]|0;
     $605 = (($604) + 1)|0;
     HEAP32[$2>>2] = $605;
    }
   }
  }
 } while(0);
 $606 = HEAP32[$2>>2]|0;
 $607 = $3;
 $608 = (($607) + ($606<<4)|0);
 $609 = HEAP8[$608>>0]|0;
 $610 = $609&255;
 $611 = ($610|0)==(6);
 if (!($611)) {
  $612 = HEAP32[$2>>2]|0;
  $613 = $3;
  $614 = (($613) + ($612<<4)|0);
  $615 = HEAP8[$614>>0]|0;
  $616 = $615&255;
  $617 = ($616|0)==(7);
  if (!($617)) {
   $618 = HEAP32[$2>>2]|0;
   $619 = $3;
   $620 = (($619) + ($618<<4)|0);
   $621 = HEAP8[$620>>0]|0;
   $622 = $621&255;
   $623 = ($622|0)==(3);
   if (!($623)) {
    $630 = HEAP32[$2>>2]|0;
    $631 = $3;
    $632 = (($631) + ($630<<4)|0);
    $633 = HEAP8[$632>>0]|0;
    $634 = $633&255;
    $635 = ($634|0)==(44);
    if ($635) {
     $636 = HEAP32[$2>>2]|0;
     $637 = (($636) + 1)|0;
     HEAP32[$2>>2] = $637;
    }
    $638 = HEAP32[$2>>2]|0;
    $639 = HEAP32[(616)>>2]|0;
    $640 = ($638|0)>=($639|0);
    $641 = $1;
    do {
     if ($640) {
      $642 = ((($641)) + 60|0);
      $643 = HEAP32[$642>>2]|0;
      $644 = ((($643)) + 4|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = ($645|0)!=(0|0);
      if ($646) {
       HEAP32[$vararg_buffer31>>2] = 109841;
       (_EmitErr(137,$vararg_buffer31)|0);
      }
     } else {
      $647 = ((($641)) + 48|0);
      $648 = HEAP32[$647>>2]|0;
      $649 = ($648|0)==(0);
      if ($649) {
       (_EmitError(91)|0);
       break;
      }
      $650 = HEAP32[(616)>>2]|0;
      $651 = (($650) - 1)|0;
      $652 = $3;
      $653 = (($652) + ($651<<4)|0);
      $654 = HEAP8[$653>>0]|0;
      $655 = $654&255;
      $656 = ($655|0)==(7);
      if ($656) {
       $657 = HEAP32[(616)>>2]|0;
       $658 = (($657) - 1)|0;
       $659 = $3;
       $660 = (($659) + ($658<<4)|0);
       $661 = ((($660)) + 8|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = ($662|0)==(188);
       if ($663) {
        $664 = $1;
        $665 = ((($664)) + 60|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = ((($666)) + 40|0);
        $668 = HEAP8[$667>>0]|0;
        $669 = $668 & -2;
        $670 = $669 | 1;
        HEAP8[$667>>0] = $670;
       }
      }
      $671 = $1;
      $672 = HEAP32[$2>>2]|0;
      $673 = $3;
      $674 = $4;
      (_ParseParams($671,$672,$673,$674)|0);
     }
    } while(0);
    $675 = $1;
    $676 = ((($675)) + 24|0);
    $677 = HEAP16[$676>>1]|0;
    $678 = $677 & -3;
    $679 = $678 | 2;
    HEAP16[$676>>1] = $679;
    $680 = $1;
    $681 = ((($680)) + 24|0);
    $682 = HEAP16[$681>>1]|0;
    $683 = $682 & -2049;
    $684 = $683 | 2048;
    HEAP16[$681>>1] = $684;
    $0 = 0;
    $685 = $0;
    STACKTOP = sp;return ($685|0);
   }
  }
 }
 $624 = HEAP32[$2>>2]|0;
 $625 = $3;
 $626 = (($625) + ($624<<4)|0);
 $627 = ((($626)) + 4|0);
 $628 = HEAP32[$627>>2]|0;
 HEAP32[$vararg_buffer28>>2] = $628;
 $629 = (_EmitErr(209,$vararg_buffer28)|0);
 $0 = $629;
 $685 = $0;
 STACKTOP = sp;return ($685|0);
}
function _CreateProc($sym,$name,$state) {
 $sym = $sym|0;
 $name = $name|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $name;
 $2 = $state;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  $9 = $1;
  if ($8) {
   $10 = (_SymCreate($9)|0);
   $12 = $10;
  } else {
   $11 = (_SymAlloc($9)|0);
   $12 = $11;
  }
  $0 = $12;
 } else {
  $13 = $0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  $17 = $16 ? 15404 : (15412);
  $18 = $0;
  _sym_remove_table($17,$18);
 }
 $19 = $0;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 $21 = $2;
 $22 = $0;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ($24|0)!=(1);
 if ($25) {
  $26 = HEAP8[(556)>>0]|0;
  $27 = $0;
  $28 = ((($27)) + 28|0);
  $29 = ((($28)) + 3|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $26 & 3;
  $32 = $30 & -4;
  $33 = $32 | $31;
  HEAP8[$29>>0] = $33;
 }
 $34 = (_LclAlloc(44)|0);
 $info = $34;
 $35 = $info;
 $36 = $0;
 $37 = ((($36)) + 60|0);
 HEAP32[$37>>2] = $35;
 $38 = $info;
 HEAP32[$38>>2] = 0;
 $39 = $info;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = 0;
 $41 = $info;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = 0;
 $43 = $info;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = 0;
 $45 = $info;
 $46 = ((($45)) + 16|0);
 HEAP32[$46>>2] = 0;
 $47 = $info;
 $48 = ((($47)) + 20|0);
 HEAP32[$48>>2] = 0;
 $49 = $info;
 $50 = ((($49)) + 24|0);
 HEAP32[$50>>2] = 0;
 $51 = $info;
 $52 = ((($51)) + 40|0);
 HEAP8[$52>>0] = 0;
 $53 = $0;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 switch ($55|0) {
 case 1:  {
  $56 = HEAP32[(15436)>>2]|0;
  $57 = ($56|0)==(0|0);
  $58 = $0;
  if ($57) {
   HEAP32[(15436)>>2] = $58;
  } else {
   $59 = HEAP32[(15440)>>2]|0;
   $60 = ((($59)) + 68|0);
   HEAP32[$60>>2] = $58;
  }
  $61 = $0;
  HEAP32[(15440)>>2] = $61;
  $62 = HEAP32[15500>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[15500>>2] = $63;
  $64 = HEAP8[(6005)>>0]|0;
  $65 = ($64<<24>>24)!=(0);
  if (!($65)) {
   $82 = $0;
   STACKTOP = sp;return ($82|0);
  }
  $66 = (_LclAlloc(24)|0);
  $67 = $0;
  $68 = ((($67)) + 40|0);
  HEAP32[$68>>2] = $66;
  $69 = (_get_curr_srcfile()|0);
  $70 = $69&65535;
  $71 = $0;
  $72 = ((($71)) + 40|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 14|0);
  HEAP16[$74>>1] = $70;
  $82 = $0;
  STACKTOP = sp;return ($82|0);
  break;
 }
 case 2:  {
  $75 = $0;
  $76 = ((($75)) + 28|0);
  $77 = ((($76)) + 3|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 & -9;
  $80 = $79 | 8;
  HEAP8[$77>>0] = $80;
  $81 = $0;
  _sym_add_table((15412),$81);
  $82 = $0;
  STACKTOP = sp;return ($82|0);
  break;
 }
 default: {
  $82 = $0;
  STACKTOP = sp;return ($82|0);
 }
 }
 return (0)|0;
}
function _DeleteProc($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $next = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $curr = $9;
 while(1) {
  $10 = $curr;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $curr;
  $13 = ((($12)) + 60|0);
  $14 = HEAP32[$13>>2]|0;
  $next = $14;
  $15 = $curr;
  _SymFree($15);
  $16 = $next;
  $curr = $16;
 }
 STACKTOP = sp;return;
}
function _ProcDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $is_global = 0, $name = 0, $ofs = 0, $oldpubstate = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = ($3|0)!=(1);
 if ($4) {
  $5 = $1;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $305 = $0;
  STACKTOP = sp;return ($305|0);
 }
 $11 = HEAP32[(584)>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = (_EmitError(82)|0);
  $0 = $13;
  $305 = $0;
  STACKTOP = sp;return ($305|0);
 }
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $name = $16;
 $17 = HEAP32[15488>>2]|0;
 $18 = ($17|0)!=(0|0);
 do {
  if ($18) {
   $19 = HEAP32[15488>>2]|0;
   $20 = ((($19)) + 60|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    $25 = HEAP32[15488>>2]|0;
    $26 = ((($25)) + 60|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($27)) + 40|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29&255) >>> 6;
    $31 = $30 & 1;
    $32 = $31&255;
    $33 = ($32|0)!=(0);
    if (!($33)) {
     $34 = HEAP32[15488>>2]|0;
     $35 = ((($34)) + 60|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($36)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)!=(0|0);
     if (!($39)) {
      $40 = HEAP32[15488>>2]|0;
      $41 = ((($40)) + 60|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)!=(0|0);
      if (!($44)) {
       $47 = HEAP32[15488>>2]|0;
       _push_proc($47);
       break;
      }
     }
    }
   }
   $45 = $name;
   HEAP32[$vararg_buffer1>>2] = $45;
   $46 = (_EmitErr(93,$vararg_buffer1)|0);
   $0 = $46;
   $305 = $0;
   STACKTOP = sp;return ($305|0);
  }
 } while(0);
 $48 = HEAP8[(551)>>0]|0;
 $49 = ($48<<24>>24)!=(0);
 if ($49) {
  $50 = HEAP8[(551)>>0]|0;
  $51 = $50&255;
  _AlignCurrOffset($51);
 }
 $52 = $1;
 $53 = (($52) + 1)|0;
 $1 = $53;
 $54 = $name;
 $55 = (_SymFind($54)|0);
 $sym = $55;
 $56 = HEAP32[4884>>2]|0;
 $57 = ($56|0)==(0);
 $58 = $sym;
 $59 = ($58|0)!=(0|0);
 if ($57) {
  if ($59) {
   $60 = $sym;
   $61 = ((($60)) + 24|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = ($62&65535) >>> 7;
   $64 = $63 & 1;
   $65 = $64&255;
   $66 = $65&255;
   $68 = $66;
  } else {
   $68 = 0;
  }
  $67 = $68&255;
  $oldpubstate = $67;
  $69 = $sym;
  $70 = ($69|0)==(0|0);
  do {
   if ($70) {
    label = 19;
   } else {
    $71 = $sym;
    $72 = ((($71)) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0);
    if ($74) {
     label = 19;
    } else {
     $78 = $sym;
     $79 = ((($78)) + 16|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(2);
     if ($81) {
      $82 = $sym;
      $83 = ((($82)) + 28|0);
      $84 = ((($83)) + 3|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = ($85&255) >>> 3;
      $87 = $86 & 1;
      $88 = $87&255;
      $89 = ($88|0)==(1);
      if ($89) {
       $is_global = 1;
       $90 = $sym;
       $91 = ((($90)) + 24|0);
       $92 = HEAP16[$91>>1]|0;
       $93 = ($92&65535) >>> 11;
       $94 = $93 & 1;
       $95 = $94&255;
       $96 = $95&255;
       $97 = ($96|0)==(1);
       if (!($97)) {
        $111 = $sym;
        $112 = $name;
        $113 = (_CreateProc($111,$112,1)|0);
        $sym = $113;
        break;
       }
       $98 = HEAP32[15500>>2]|0;
       $99 = (($98) + 1)|0;
       HEAP32[15500>>2] = $99;
       $100 = HEAP8[(6005)>>0]|0;
       $101 = ($100<<24>>24)!=(0);
       if (!($101)) {
        break;
       }
       $102 = (_LclAlloc(24)|0);
       $103 = $sym;
       $104 = ((($103)) + 40|0);
       HEAP32[$104>>2] = $102;
       $105 = (_get_curr_srcfile()|0);
       $106 = $105&65535;
       $107 = $sym;
       $108 = ((($107)) + 40|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ((($109)) + 14|0);
       HEAP16[$110>>1] = $106;
       break;
      }
     }
     $114 = $sym;
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $116;
     $117 = (_EmitErr(143,$vararg_buffer4)|0);
     $0 = $117;
     $305 = $0;
     STACKTOP = sp;return ($305|0);
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $75 = $sym;
   $76 = $name;
   $77 = (_CreateProc($75,$76,1)|0);
   $sym = $77;
   $is_global = 0;
  }
  $118 = $sym;
  _SetSymSegOfs($118);
  _SymClearLocal();
  $119 = HEAP8[(556)>>0]|0;
  $120 = $119&255;
  $121 = ((620) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122&65535;
  $124 = $sym;
  $125 = ((($124)) + 60|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 42|0);
  HEAP16[$127>>1] = $123;
  $128 = $sym;
  HEAP32[15488>>2] = $128;
  $129 = $sym;
  $130 = $1;
  $131 = $2;
  $132 = HEAP32[(516)>>2]|0;
  $133 = (_ParseProc($129,$130,$131,1,$132)|0);
  $134 = ($133|0)==(-1);
  if ($134) {
   HEAP32[15488>>2] = 0;
   $0 = -1;
   $305 = $0;
   STACKTOP = sp;return ($305|0);
  }
  $135 = $is_global;
  $136 = $135&255;
  $137 = ($136|0)!=(0);
  if ($137) {
   $138 = HEAP8[(6085)>>0]|0;
   $139 = $138&255;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $sym;
    $142 = ((($141)) + 24|0);
    $143 = HEAP16[$142>>1]|0;
    $144 = $143 & -129;
    $145 = $144 | 128;
    HEAP16[$142>>1] = $145;
   }
  }
  $146 = $sym;
  $147 = ((($146)) + 16|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)==(2);
  if ($149) {
   $150 = $sym;
   $151 = ((($150)) + 24|0);
   $152 = HEAP16[$151>>1]|0;
   $153 = ($152&65535) >>> 11;
   $154 = $153 & 1;
   $155 = $154&255;
   $156 = $155&255;
   $157 = ($156|0)==(1);
   if ($157) {
    $158 = $sym;
    _sym_ext2int($158);
    $159 = HEAP32[(15436)>>2]|0;
    $160 = ($159|0)==(0|0);
    $161 = $sym;
    if ($160) {
     HEAP32[(15436)>>2] = $161;
    } else {
     $162 = HEAP32[(15440)>>2]|0;
     $163 = ((($162)) + 68|0);
     HEAP32[$163>>2] = $161;
    }
    $164 = $sym;
    HEAP32[(15440)>>2] = $164;
   }
  }
  $165 = HEAP32[15488>>2]|0;
  $166 = ((($165)) + 60|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ((($167)) + 4|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)!=(0|0);
  if ($170) {
   $171 = HEAP32[15488>>2]|0;
   $172 = ((($171)) + 60|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ((($173)) + 42|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = $175&65535;
   $177 = (15660 + (($176*12)|0)|0);
   $178 = ((($177)) + 10|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = ($180|0)==(4);
   if ($181) {
    $182 = HEAP32[15488>>2]|0;
    $183 = ((($182)) + 60|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ((($184)) + 40|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186 & 127;
    $188 = $187 | -128;
    HEAP8[$185>>0] = $188;
   }
  }
  $189 = $sym;
  $190 = ((($189)) + 24|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = ($191&65535) >>> 7;
  $193 = $192 & 1;
  $194 = $193&255;
  $195 = $194&255;
  $196 = ($195|0)==(1);
  if ($196) {
   $197 = $oldpubstate;
   $198 = $197&255;
   $199 = ($198|0)==(0);
   if ($199) {
    $200 = $sym;
    _AddPublicData($200);
   }
  }
  $201 = HEAP32[(584)>>2]|0;
  $202 = ((($201)) + 60|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($203)) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $sym;
  $207 = ((($206)) + 64|0);
  HEAP32[$207>>2] = $205;
  $208 = $sym;
  $209 = HEAP32[(584)>>2]|0;
  $210 = ((($209)) + 60|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ((($211)) + 20|0);
  HEAP32[$212>>2] = $208;
 } else {
  if (!($59)) {
   (_InternalError(99145,1520)|0);
  }
  $213 = HEAP32[15500>>2]|0;
  $214 = (($213) + 1)|0;
  HEAP32[15500>>2] = $214;
  $215 = $sym;
  $216 = ((($215)) + 24|0);
  $217 = HEAP16[$216>>1]|0;
  $218 = $217 & -3;
  $219 = $218 | 2;
  HEAP16[$216>>1] = $219;
  $220 = $sym;
  _SymSetLocal($220);
  $221 = (_GetCurrOffset()|0);
  $ofs = $221;
  $222 = $ofs;
  $223 = $sym;
  $224 = ((($223)) + 8|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($222|0)!=($225|0);
  if ($226) {
   $227 = $ofs;
   $228 = $sym;
   $229 = ((($228)) + 8|0);
   HEAP32[$229>>2] = $227;
   HEAP8[(574)>>0] = 1;
  }
  $230 = $sym;
  HEAP32[15488>>2] = $230;
  $231 = HEAP32[15488>>2]|0;
  $232 = ((($231)) + 60|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ((($233)) + 40|0);
  $235 = HEAP8[$234>>0]|0;
  $236 = ($235&255) >>> 6;
  $237 = $236 & 1;
  $238 = $237&255;
  $239 = ($238|0)!=(0);
  if ($239) {
   $240 = HEAP32[15488>>2]|0;
   $241 = ((($240)) + 60|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = ((($242)) + 28|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = ($244|0)!=(0|0);
   if ($245) {
    $246 = HEAP32[15488>>2]|0;
    $247 = ((($246)) + 60|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 28|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = ((($250)) + 16|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)==(0);
    if ($253) {
     $254 = HEAP32[15488>>2]|0;
     $255 = ((($254)) + 60|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = ((($256)) + 28|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ((($258)) + 4|0);
     $260 = HEAP32[$259>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $260;
     (_EmitErr(102,$vararg_buffer7)|0);
    }
   }
  }
 }
 $261 = HEAP32[15488>>2]|0;
 $262 = ((($261)) + 60|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ((($263)) + 40|0);
 $265 = HEAP8[$264>>0]|0;
 $266 = ($265&255) >>> 7;
 $267 = $266&255;
 $268 = ($267|0)!=(0);
 $269 = $268 ? 4 : 0;
 $270 = 128 | $269;
 HEAP32[15484>>2] = $270;
 HEAP32[15492>>2] = 0;
 HEAP32[15496>>2] = 0;
 $271 = HEAP32[15488>>2]|0;
 $272 = ((($271)) + 60|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = ((($273)) + 40|0);
 $275 = HEAP8[$274>>0]|0;
 $276 = ($275&255) >>> 6;
 $277 = $276 & 1;
 $278 = ($277<<24>>24)!=(0);
 if ($278) {
  HEAP8[99152>>0] = 0;
  ;HEAP8[99153>>0]=0|0;HEAP8[99153+1>>0]=0|0;HEAP8[99153+2>>0]=0|0;HEAP8[99153+3>>0]=0|0;
  $279 = HEAP32[15488>>2]|0;
  $280 = ((($279)) + 60|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ((($281)) + 28|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ($283|0)!=(0|0);
  if ($284) {
   $285 = HEAP8[99153>>0]|0;
   $286 = $285 & 7;
   $287 = $286 | 24;
   HEAP8[99153>>0] = $287;
  }
 }
 $288 = HEAP32[4884>>2]|0;
 $289 = $288&255;
 $290 = $sym;
 $291 = ((($290)) + 28|0);
 $292 = ((($291)) + 2|0);
 HEAP8[$292>>0] = $289;
 $293 = HEAP32[(560)>>2]|0;
 $294 = $293 >>> 11;
 $295 = $294 & 1;
 $296 = ($295|0)!=(0);
 if ($296) {
  _LstWrite(7,0,0);
 }
 $297 = HEAP8[(6005)>>0]|0;
 $298 = ($297<<24>>24)!=(0);
 if ($298) {
  $299 = (_get_curr_srcfile()|0);
  $300 = HEAP32[(6100)>>2]|0;
  $301 = ($300|0)==(2);
  if ($301) {
   $303 = 0;
  } else {
   $302 = (_GetLineNumber()|0);
   $303 = $302;
  }
  _AddLinnumDataRef($299,$303);
 }
 $304 = $sym;
 (_BackPatch($304)|0);
 $0 = 0;
 $305 = $0;
 STACKTOP = sp;return ($305|0);
}
function _CopyPrototype($proc,$src) {
 $proc = $proc|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $newl = 0, $oldl = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $proc;
 $2 = $src;
 $3 = $2;
 $4 = ((($3)) + 24|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5&65535) >>> 11;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = $8&255;
 $10 = ($9|0)==(0);
 if ($10) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $11 = $1;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 dest=$13; src=$16; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $17 = $2;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $23 = ((($22)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 $26 = ((($25)) + 48|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 $28 = ((($27)) + 24|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = ($29&65535) >>> 7;
 $31 = $30 & 1;
 $32 = $31&255;
 $33 = $1;
 $34 = ((($33)) + 24|0);
 $35 = $32&255;
 $36 = HEAP16[$34>>1]|0;
 $37 = $35 & 1;
 $38 = ($37 << 7)&65535;
 $39 = $36 & -129;
 $40 = $39 | $38;
 HEAP16[$34>>1] = $40;
 $41 = $2;
 $42 = ((($41)) + 28|0);
 $43 = ((($42)) + 3|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 & 3;
 $46 = $1;
 $47 = ((($46)) + 28|0);
 $48 = ((($47)) + 3|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $45 & 3;
 $51 = $49 & -4;
 $52 = $51 | $50;
 HEAP8[$48>>0] = $52;
 $53 = $1;
 $54 = ((($53)) + 24|0);
 $55 = HEAP16[$54>>1]|0;
 $56 = $55 & -2049;
 $57 = $56 | 2048;
 HEAP16[$54>>1] = $57;
 $58 = $1;
 $59 = ((($58)) + 60|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = 0;
 $62 = $2;
 $63 = ((($62)) + 60|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $curr = $66;
 while(1) {
  $67 = $curr;
  $68 = ($67|0)!=(0|0);
  if (!($68)) {
   break;
  }
  $69 = (_LclAlloc(72)|0);
  $newl = $69;
  $70 = $newl;
  $71 = $curr;
  dest=$70; src=$71; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $72 = $newl;
  $73 = ((($72)) + 68|0);
  HEAP32[$73>>2] = 0;
  $74 = $1;
  $75 = ((($74)) + 60|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==(0|0);
  if ($79) {
   $80 = $newl;
   $81 = $1;
   $82 = ((($81)) + 60|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 4|0);
   HEAP32[$84>>2] = $80;
  } else {
   $85 = $1;
   $86 = ((($85)) + 60|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $oldl = $89;
   while(1) {
    $90 = $oldl;
    $91 = ((($90)) + 68|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)!=(0|0);
    if (!($93)) {
     break;
    }
    $94 = $oldl;
    $95 = ((($94)) + 68|0);
    $96 = HEAP32[$95>>2]|0;
    $oldl = $96;
   }
   $97 = $newl;
   $98 = $oldl;
   $99 = ((($98)) + 68|0);
   HEAP32[$99>>2] = $97;
  }
  $100 = $curr;
  $101 = ((($100)) + 68|0);
  $102 = HEAP32[$101>>2]|0;
  $curr = $102;
 }
 $0 = 0;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function _EndpDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = ($3|0)!=(1);
 if (!($4)) {
  $5 = $2;
  $6 = ((($5)) + 32|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $16 = HEAP32[15488>>2]|0;
   $17 = ($16|0)!=(0|0);
   if ($17) {
    $18 = HEAP32[33696>>2]|0;
    $19 = HEAP32[15488>>2]|0;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $2;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[15488>>2]|0;
    $26 = ((($25)) + 44|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = (($28) + 1)|0;
    $30 = (FUNCTION_TABLE_iiii[$18 & 255]($21,$24,$29)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = HEAP32[15488>>2]|0;
     _ProcFini($32);
     $0 = 0;
     $37 = $0;
     STACKTOP = sp;return ($37|0);
    }
   }
   $33 = $2;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $35;
   $36 = (_EmitErr(142,$vararg_buffer1)|0);
   $0 = $36;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $10 = $1;
 $11 = $2;
 $12 = (($11) + ($10<<4)|0);
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$vararg_buffer>>2] = $14;
 $15 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $15;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _ExcFrameDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ofs = 0, $oldcodes = 0, $opndx = 0, $or$cond = 0, $puc = 0, $reg = 0, $size = 0, $token = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 128|0;
 $vararg_buffer17 = sp + 120|0;
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer11 = sp + 104|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 148|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP8[(99155)>>0]|0;
 $oldcodes = $3;
 $4 = HEAP32[(6100)>>2]|0;
 $5 = ($4|0)!=(2);
 $6 = HEAP32[(524)>>2]|0;
 $7 = ($6|0)!=(2);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = HEAP32[$1>>2]|0;
  $9 = $2;
  $10 = (($9) + ($8<<4)|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_GetResWName($12,0)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_EmitErr(224,$vararg_buffer)|0);
  $0 = $14;
  $467 = $0;
  STACKTOP = sp;return ($467|0);
 }
 $15 = HEAP32[15488>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = HEAP8[99152>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(1);
  if (!($19)) {
   $21 = HEAP32[15488>>2]|0;
   $22 = ((($21)) + 60|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 40|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25&255) >>> 6;
   $27 = $26 & 1;
   $28 = $27&255;
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = (_EmitError(255)|0);
    $0 = $30;
    $467 = $0;
    STACKTOP = sp;return ($467|0);
   }
   $31 = HEAP8[(99155)>>0]|0;
   $32 = $31&255;
   $33 = (67816 + ($32<<1)|0);
   $puc = $33;
   $34 = (_GetCurrOffset()|0);
   $35 = HEAP32[15488>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($34) - ($37))|0;
   $39 = $38&255;
   $ofs = $39;
   $40 = HEAP32[$1>>2]|0;
   $41 = $2;
   $42 = (($41) + ($40<<4)|0);
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $token = $44;
   $45 = HEAP32[$1>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$1>>2] = $46;
   $47 = $token;
   L12: do {
    switch ($47|0) {
    case 333:  {
     $48 = $2;
     $49 = HEAP32[(616)>>2]|0;
     $50 = (_EvalOperand($1,$48,$49,$opndx,0)|0);
     $51 = (-1)==($50|0);
     if ($51) {
      $0 = -1;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $52 = ((($opndx)) + 40|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(1);
     if ($54) {
      $55 = ((($opndx)) + 56|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 16|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(0);
      if (!($59)) {
       label = 13;
      }
     } else {
      label = 13;
     }
     if ((label|0) == 13) {
      $60 = ((($opndx)) + 40|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)!=(0);
      if ($62) {
       $63 = (_EmitError(65)|0);
       $0 = $63;
       $467 = $0;
       STACKTOP = sp;return ($467|0);
      }
     }
     $64 = ((($opndx)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)!=(0);
     if ($66) {
      $67 = (_EmitConstError($opndx)|0);
      $0 = $67;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $68 = HEAP32[$opndx>>2]|0;
     $69 = ($68|0)==(0);
     if ($69) {
      $70 = (_EmitError(257)|0);
      $0 = $70;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $71 = HEAP32[$opndx>>2]|0;
     $72 = $71 & 7;
     $73 = ($72|0)!=(0);
     if ($73) {
      $74 = (_EmitError(256)|0);
      $0 = $74;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $75 = HEAP32[$opndx>>2]|0;
     $76 = ($75>>>0)>(128);
     if ($76) {
      $77 = HEAP32[$opndx>>2]|0;
      $78 = ($77>>>0)>=(524288);
      $79 = HEAP32[$opndx>>2]|0;
      if ($78) {
       $80 = $79 >>> 16;
       $81 = $80&65535;
       $82 = $puc;
       HEAP16[$82>>1] = $81;
       $83 = $puc;
       $84 = ((($83)) + 2|0);
       $puc = $84;
       $85 = HEAP32[$opndx>>2]|0;
       $86 = $85 & 65535;
       $87 = $86&65535;
       $88 = $puc;
       HEAP16[$88>>1] = $87;
       $89 = $puc;
       $90 = ((($89)) + 2|0);
       $puc = $90;
       $91 = HEAP8[(99155)>>0]|0;
       $92 = $91&255;
       $93 = (($92) + 2)|0;
       $94 = $93&255;
       HEAP8[(99155)>>0] = $94;
       $95 = $puc;
       $96 = ((($95)) + 1|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97 & 15;
       $99 = $98 | 16;
       HEAP8[$96>>0] = $99;
      } else {
       $100 = $79 >>> 3;
       $101 = $100&65535;
       $102 = $puc;
       HEAP16[$102>>1] = $101;
       $103 = $puc;
       $104 = ((($103)) + 2|0);
       $puc = $104;
       $105 = HEAP8[(99155)>>0]|0;
       $106 = (($105) + 1)<<24>>24;
       HEAP8[(99155)>>0] = $106;
       $107 = $puc;
       $108 = ((($107)) + 1|0);
       $109 = HEAP8[$108>>0]|0;
       $110 = $109 & 15;
       HEAP8[$108>>0] = $110;
      }
      $111 = $puc;
      $112 = ((($111)) + 1|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = $113 & -16;
      $115 = $114 | 1;
      HEAP8[$112>>0] = $115;
     } else {
      $116 = $puc;
      $117 = ((($116)) + 1|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118 & -16;
      $120 = $119 | 2;
      HEAP8[$117>>0] = $120;
      $121 = HEAP32[$opndx>>2]|0;
      $122 = (($121) - 8)|0;
      $123 = $122 >>> 3;
      $124 = $123&255;
      $125 = $puc;
      $126 = ((($125)) + 1|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $124 & 15;
      $129 = ($128 << 4)&255;
      $130 = $127 & 15;
      $131 = $130 | $129;
      HEAP8[$126>>0] = $131;
     }
     $132 = $ofs;
     $133 = $puc;
     HEAP8[$133>>0] = $132;
     $134 = HEAP8[(99155)>>0]|0;
     $135 = (($134) + 1)<<24>>24;
     HEAP8[(99155)>>0] = $135;
     break;
    }
    case 334:  {
     $136 = (_GetCurrOffset()|0);
     $137 = HEAP32[15488>>2]|0;
     $138 = ((($137)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($136) - ($139))|0;
     HEAP32[$opndx>>2] = $140;
     $141 = HEAP32[$opndx>>2]|0;
     $142 = ($141>>>0)>(255);
     if (!($142)) {
      $144 = HEAP32[$opndx>>2]|0;
      $145 = $144&255;
      HEAP8[(99154)>>0] = $145;
      HEAP8[99152>>0] = 1;
      break L12;
     }
     $143 = (_EmitError(258)|0);
     $0 = $143;
     $467 = $0;
     STACKTOP = sp;return ($467|0);
     break;
    }
    case 335:  {
     $146 = $ofs;
     $147 = $puc;
     HEAP8[$147>>0] = $146;
     $148 = $puc;
     $149 = ((($148)) + 1|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150 & -16;
     $152 = $151 | 10;
     HEAP8[$149>>0] = $152;
     $153 = $puc;
     $154 = ((($153)) + 1|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155 & 15;
     HEAP8[$154>>0] = $156;
     $157 = HEAP32[$1>>2]|0;
     $158 = $2;
     $159 = (($158) + ($157<<4)|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160&255;
     $162 = ($161|0)==(8);
     if ($162) {
      $163 = HEAP32[$1>>2]|0;
      $164 = $2;
      $165 = (($164) + ($163<<4)|0);
      $166 = ((($165)) + 4|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (_strcasecmp($167,109626)|0);
      $169 = ($168|0)==(0);
      if ($169) {
       $170 = $puc;
       $171 = ((($170)) + 1|0);
       $172 = HEAP8[$171>>0]|0;
       $173 = $172 & 15;
       $174 = $173 | 16;
       HEAP8[$171>>0] = $174;
       $175 = HEAP32[$1>>2]|0;
       $176 = (($175) + 1)|0;
       HEAP32[$1>>2] = $176;
      }
     }
     $177 = HEAP8[(99155)>>0]|0;
     $178 = (($177) + 1)<<24>>24;
     HEAP8[(99155)>>0] = $178;
     break;
    }
    case 336:  {
     $179 = HEAP32[$1>>2]|0;
     $180 = $2;
     $181 = (($180) + ($179<<4)|0);
     $182 = HEAP8[$181>>0]|0;
     $183 = $182&255;
     $184 = ($183|0)!=(2);
     if (!($184)) {
      $185 = HEAP32[$1>>2]|0;
      $186 = $2;
      $187 = (($186) + ($185<<4)|0);
      $188 = ((($187)) + 8|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = (15660 + (($189*12)|0)|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = $191 & 8;
      $193 = ($192|0)!=(0);
      if ($193) {
       $200 = $ofs;
       $201 = $puc;
       HEAP8[$201>>0] = $200;
       $202 = $puc;
       $203 = ((($202)) + 1|0);
       $204 = HEAP8[$203>>0]|0;
       $205 = $204 & -16;
       HEAP8[$203>>0] = $205;
       $206 = HEAP32[$1>>2]|0;
       $207 = $2;
       $208 = (($207) + ($206<<4)|0);
       $209 = ((($208)) + 8|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (15660 + (($210*12)|0)|0);
       $212 = ((($211)) + 10|0);
       $213 = HEAP8[$212>>0]|0;
       $214 = $puc;
       $215 = ((($214)) + 1|0);
       $216 = HEAP8[$215>>0]|0;
       $217 = $213 & 15;
       $218 = ($217 << 4)&255;
       $219 = $216 & 15;
       $220 = $219 | $218;
       HEAP8[$215>>0] = $220;
       $221 = HEAP8[(99155)>>0]|0;
       $222 = (($221) + 1)<<24>>24;
       HEAP8[(99155)>>0] = $222;
       $223 = HEAP32[$1>>2]|0;
       $224 = (($223) + 1)|0;
       HEAP32[$1>>2] = $224;
       break L12;
      }
     }
     $194 = HEAP32[$1>>2]|0;
     $195 = $2;
     $196 = (($195) + ($194<<4)|0);
     $197 = ((($196)) + 4|0);
     $198 = HEAP32[$197>>2]|0;
     HEAP32[$vararg_buffer2>>2] = $198;
     $199 = (_EmitErr(209,$vararg_buffer2)|0);
     $0 = $199;
     $467 = $0;
     STACKTOP = sp;return ($467|0);
     break;
    }
    case 339: case 338: case 337:  {
     $225 = HEAP32[$1>>2]|0;
     $226 = $2;
     $227 = (($226) + ($225<<4)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229|0)!=(2);
     if ($230) {
      $231 = HEAP32[$1>>2]|0;
      $232 = $2;
      $233 = (($232) + ($231<<4)|0);
      $234 = ((($233)) + 4|0);
      $235 = HEAP32[$234>>2]|0;
      HEAP32[$vararg_buffer5>>2] = $235;
      $236 = (_EmitErr(209,$vararg_buffer5)|0);
      $0 = $236;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $237 = $token;
     $238 = ($237|0)==(338);
     $239 = HEAP32[$1>>2]|0;
     $240 = $2;
     $241 = (($240) + ($239<<4)|0);
     $242 = ((($241)) + 8|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = (15660 + (($243*12)|0)|0);
     $245 = HEAP32[$244>>2]|0;
     if ($238) {
      $246 = $245 & 32;
      $247 = ($246|0)!=(0);
      if (!($247)) {
       $248 = HEAP32[$1>>2]|0;
       $249 = $2;
       $250 = (($249) + ($248<<4)|0);
       $251 = ((($250)) + 4|0);
       $252 = HEAP32[$251>>2]|0;
       HEAP32[$vararg_buffer8>>2] = $252;
       $253 = (_EmitErr(209,$vararg_buffer8)|0);
       $0 = $253;
       $467 = $0;
       STACKTOP = sp;return ($467|0);
      }
     } else {
      $254 = $245 & 8;
      $255 = ($254|0)!=(0);
      if (!($255)) {
       $256 = HEAP32[$1>>2]|0;
       $257 = $2;
       $258 = (($257) + ($256<<4)|0);
       $259 = ((($258)) + 4|0);
       $260 = HEAP32[$259>>2]|0;
       HEAP32[$vararg_buffer11>>2] = $260;
       $261 = (_EmitErr(209,$vararg_buffer11)|0);
       $0 = $261;
       $467 = $0;
       STACKTOP = sp;return ($467|0);
      }
     }
     $262 = HEAP32[$1>>2]|0;
     $263 = $2;
     $264 = (($263) + ($262<<4)|0);
     $265 = ((($264)) + 8|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = (15660 + (($266*12)|0)|0);
     $268 = ((($267)) + 10|0);
     $269 = HEAP8[$268>>0]|0;
     $reg = $269;
     $270 = $token;
     $271 = ($270|0)==(337);
     if ($271) {
      $size = 8;
     } else {
      $size = 16;
     }
     $272 = HEAP32[$1>>2]|0;
     $273 = (($272) + 1)|0;
     HEAP32[$1>>2] = $273;
     $274 = HEAP32[$1>>2]|0;
     $275 = $2;
     $276 = (($275) + ($274<<4)|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = $277&255;
     $279 = ($278|0)!=(44);
     $280 = HEAP32[$1>>2]|0;
     if ($279) {
      $281 = $2;
      $282 = (($281) + ($280<<4)|0);
      $283 = ((($282)) + 4|0);
      $284 = HEAP32[$283>>2]|0;
      HEAP32[$vararg_buffer14>>2] = $284;
      $285 = (_EmitErr(209,$vararg_buffer14)|0);
      $0 = $285;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $286 = (($280) + 1)|0;
     HEAP32[$1>>2] = $286;
     $287 = $2;
     $288 = HEAP32[(616)>>2]|0;
     $289 = (_EvalOperand($1,$287,$288,$opndx,0)|0);
     $290 = (-1)==($289|0);
     if ($290) {
      $0 = -1;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $291 = ((($opndx)) + 40|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($292|0)==(1);
     if ($293) {
      $294 = ((($opndx)) + 56|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = ((($295)) + 16|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ($297|0)==(0);
      if (!($298)) {
       label = 55;
      }
     } else {
      label = 55;
     }
     if ((label|0) == 55) {
      $299 = ((($opndx)) + 40|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ($300|0)!=(0);
      if ($301) {
       $302 = (_EmitError(65)|0);
       $0 = $302;
       $467 = $0;
       STACKTOP = sp;return ($467|0);
      }
     }
     $303 = HEAP32[$opndx>>2]|0;
     $304 = $size;
     $305 = (($304) - 1)|0;
     $306 = $303 & $305;
     $307 = ($306|0)!=(0);
     if ($307) {
      $308 = (_EmitError(256)|0);
      $0 = $308;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
     }
     $309 = $token;
     switch ($309|0) {
     case 337:  {
      $310 = $reg;
      $311 = $puc;
      $312 = ((($311)) + 1|0);
      $313 = HEAP8[$312>>0]|0;
      $314 = $310 & 15;
      $315 = ($314 << 4)&255;
      $316 = $313 & 15;
      $317 = $316 | $315;
      HEAP8[$312>>0] = $317;
      $318 = HEAP32[$opndx>>2]|0;
      $319 = $size;
      $320 = $319<<16;
      $321 = ($318>>>0)>($320>>>0);
      $322 = HEAP32[$opndx>>2]|0;
      if ($321) {
       $323 = $322 >> 19;
       $324 = $323&65535;
       $325 = $puc;
       HEAP16[$325>>1] = $324;
       $326 = $puc;
       $327 = ((($326)) + 2|0);
       $puc = $327;
       $328 = HEAP32[$opndx>>2]|0;
       $329 = $328 >> 3;
       $330 = $329&65535;
       $331 = $puc;
       HEAP16[$331>>1] = $330;
       $332 = $puc;
       $333 = ((($332)) + 2|0);
       $puc = $333;
       $334 = $puc;
       $335 = ((($334)) + 1|0);
       $336 = HEAP8[$335>>0]|0;
       $337 = $336 & -16;
       $338 = $337 | 5;
       HEAP8[$335>>0] = $338;
       $339 = HEAP8[(99155)>>0]|0;
       $340 = $339&255;
       $341 = (($340) + 3)|0;
       $342 = $341&255;
       HEAP8[(99155)>>0] = $342;
      } else {
       $343 = $322 >> 3;
       $344 = $343&65535;
       $345 = $puc;
       HEAP16[$345>>1] = $344;
       $346 = $puc;
       $347 = ((($346)) + 2|0);
       $puc = $347;
       $348 = $puc;
       $349 = ((($348)) + 1|0);
       $350 = HEAP8[$349>>0]|0;
       $351 = $350 & -16;
       $352 = $351 | 4;
       HEAP8[$349>>0] = $352;
       $353 = HEAP8[(99155)>>0]|0;
       $354 = $353&255;
       $355 = (($354) + 2)|0;
       $356 = $355&255;
       HEAP8[(99155)>>0] = $356;
      }
      $357 = $ofs;
      $358 = $puc;
      HEAP8[$358>>0] = $357;
      $359 = $reg;
      $360 = $puc;
      $361 = ((($360)) + 1|0);
      $362 = HEAP8[$361>>0]|0;
      $363 = $359 & 15;
      $364 = ($363 << 4)&255;
      $365 = $362 & 15;
      $366 = $365 | $364;
      HEAP8[$361>>0] = $366;
      break L12;
      break;
     }
     case 338:  {
      $367 = HEAP32[$opndx>>2]|0;
      $368 = $size;
      $369 = $368<<16;
      $370 = ($367>>>0)>($369>>>0);
      $371 = HEAP32[$opndx>>2]|0;
      if ($370) {
       $372 = $371 >> 20;
       $373 = $372&65535;
       $374 = $puc;
       HEAP16[$374>>1] = $373;
       $375 = $puc;
       $376 = ((($375)) + 2|0);
       $puc = $376;
       $377 = HEAP32[$opndx>>2]|0;
       $378 = $377 >> 4;
       $379 = $378&65535;
       $380 = $puc;
       HEAP16[$380>>1] = $379;
       $381 = $puc;
       $382 = ((($381)) + 2|0);
       $puc = $382;
       $383 = $puc;
       $384 = ((($383)) + 1|0);
       $385 = HEAP8[$384>>0]|0;
       $386 = $385 & -16;
       $387 = $386 | 9;
       HEAP8[$384>>0] = $387;
       $388 = HEAP8[(99155)>>0]|0;
       $389 = $388&255;
       $390 = (($389) + 3)|0;
       $391 = $390&255;
       HEAP8[(99155)>>0] = $391;
      } else {
       $392 = $371 >> 4;
       $393 = $392&65535;
       $394 = $puc;
       HEAP16[$394>>1] = $393;
       $395 = $puc;
       $396 = ((($395)) + 2|0);
       $puc = $396;
       $397 = $puc;
       $398 = ((($397)) + 1|0);
       $399 = HEAP8[$398>>0]|0;
       $400 = $399 & -16;
       $401 = $400 | 8;
       HEAP8[$398>>0] = $401;
       $402 = HEAP8[(99155)>>0]|0;
       $403 = $402&255;
       $404 = (($403) + 2)|0;
       $405 = $404&255;
       HEAP8[(99155)>>0] = $405;
      }
      $406 = $ofs;
      $407 = $puc;
      HEAP8[$407>>0] = $406;
      $408 = $reg;
      $409 = $puc;
      $410 = ((($409)) + 1|0);
      $411 = HEAP8[$410>>0]|0;
      $412 = $408 & 15;
      $413 = ($412 << 4)&255;
      $414 = $411 & 15;
      $415 = $414 | $413;
      HEAP8[$410>>0] = $415;
      break L12;
      break;
     }
     case 339:  {
      $416 = HEAP32[$opndx>>2]|0;
      $417 = ($416>>>0)>(240);
      if (!($417)) {
       $419 = $reg;
       $420 = HEAP8[(99156)>>0]|0;
       $421 = $419 & 15;
       $422 = $420 & -16;
       $423 = $422 | $421;
       HEAP8[(99156)>>0] = $423;
       $424 = HEAP32[$opndx>>2]|0;
       $425 = $424 >>> 4;
       $426 = $425&255;
       $427 = HEAP8[(99156)>>0]|0;
       $428 = $426 & 15;
       $429 = ($428 << 4)&255;
       $430 = $427 & 15;
       $431 = $430 | $429;
       HEAP8[(99156)>>0] = $431;
       $432 = $ofs;
       $433 = $puc;
       HEAP8[$433>>0] = $432;
       $434 = $puc;
       $435 = ((($434)) + 1|0);
       $436 = HEAP8[$435>>0]|0;
       $437 = $436 & -16;
       $438 = $437 | 3;
       HEAP8[$435>>0] = $438;
       $439 = $reg;
       $440 = $puc;
       $441 = ((($440)) + 1|0);
       $442 = HEAP8[$441>>0]|0;
       $443 = $439 & 15;
       $444 = ($443 << 4)&255;
       $445 = $442 & 15;
       $446 = $445 | $444;
       HEAP8[$441>>0] = $446;
       $447 = HEAP8[(99155)>>0]|0;
       $448 = (($447) + 1)<<24>>24;
       HEAP8[(99155)>>0] = $448;
       break L12;
      }
      $418 = (_EmitConstError($opndx)|0);
      $0 = $418;
      $467 = $0;
      STACKTOP = sp;return ($467|0);
      break;
     }
     default: {
      break L12;
     }
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $449 = HEAP32[$1>>2]|0;
   $450 = $2;
   $451 = (($450) + ($449<<4)|0);
   $452 = HEAP8[$451>>0]|0;
   $453 = $452&255;
   $454 = ($453|0)!=(0);
   if ($454) {
    $455 = HEAP32[$1>>2]|0;
    $456 = $2;
    $457 = (($456) + ($455<<4)|0);
    $458 = ((($457)) + 4|0);
    $459 = HEAP32[$458>>2]|0;
    HEAP32[$vararg_buffer17>>2] = $459;
    $460 = (_EmitErr(209,$vararg_buffer17)|0);
    $0 = $460;
    $467 = $0;
    STACKTOP = sp;return ($467|0);
   }
   $461 = $oldcodes;
   $462 = $461&255;
   $463 = HEAP8[(99155)>>0]|0;
   $464 = $463&255;
   $465 = ($462|0)>($464|0);
   if ($465) {
    $466 = (_EmitErr(210,$vararg_buffer20)|0);
    $0 = $466;
    $467 = $0;
    STACKTOP = sp;return ($467|0);
   } else {
    $0 = 0;
    $467 = $0;
    STACKTOP = sp;return ($467|0);
   }
  }
 }
 $20 = (_EmitError(254)|0);
 $0 = $20;
 $467 = $0;
 STACKTOP = sp;return ($467|0);
}
function _ProcCheckOpen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 while(1) {
  $0 = HEAP32[15488>>2]|0;
  $1 = ($0|0)!=(0|0);
  if (!($1)) {
   break;
  }
  $2 = HEAP32[15488>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_EmitErr(142,$vararg_buffer)|0);
  $5 = HEAP32[15488>>2]|0;
  _ProcFini($5);
 }
 STACKTOP = sp;return;
}
function _write_prologue($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tokenarray;
 $1 = HEAP32[15484>>2]|0;
 $2 = $1 & -129;
 HEAP32[15484>>2] = $2;
 $3 = HEAP32[(528)>>2]|0;
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = HEAP8[((((564)) + 1|0))>>0]|0;
  $6 = $5&255;
  $7 = $6 & 2;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = HEAP32[4884>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $18 = 32;
   } else {
    $11 = HEAP32[15488>>2]|0;
    $12 = ((($11)) + 60|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 32|0);
    $15 = HEAP32[$14>>2]|0;
    $18 = $15;
   }
   $16 = HEAP32[15504>>2]|0;
   $17 = ((($16)) + 8|0);
   HEAP32[$17>>2] = $18;
  }
 }
 $19 = HEAP32[4884>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[15488>>2]|0;
  $22 = ((($21)) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  _SetLocalOffsets($23);
 }
 $24 = HEAP32[15484>>2]|0;
 $25 = $24 | 1;
 HEAP32[15484>>2] = $25;
 $26 = HEAP8[(576)>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)==(0);
 if ($28) {
  (_write_default_prologue()|0);
 } else {
  $29 = HEAP8[(576)>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)==(2);
  if (!($31)) {
   $32 = $0;
   (_write_userdef_prologue($32)|0);
  }
 }
 $33 = HEAP32[15484>>2]|0;
 $34 = $33 & -2;
 HEAP32[15484>>2] = $34;
 $35 = (_GetCurrOffset()|0);
 $36 = HEAP32[15488>>2]|0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) - ($38))|0;
 $40 = $39&255;
 $41 = HEAP32[15488>>2]|0;
 $42 = ((($41)) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 41|0);
 HEAP8[$44>>0] = $40;
 STACKTOP = sp;return;
}
function _RetInstr($i,$tokenarray,$count) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $info = 0, $is_iret = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer = sp + 40|0;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $count;
 $is_iret = 0;
 $4 = $1;
 $5 = $2;
 $6 = (($5) + ($4<<4)|0);
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(545);
 if ($9) {
  label = 4;
 } else {
  $10 = $1;
  $11 = $2;
  $12 = (($11) + ($10<<4)|0);
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(546);
  if ($15) {
   label = 4;
  } else {
   $16 = $1;
   $17 = $2;
   $18 = (($17) + ($16<<4)|0);
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1030);
   if ($21) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $is_iret = 1;
 }
 $22 = HEAP8[(577)>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(1);
 if ($24) {
  $25 = HEAP8[87036>>0]|0;
  $26 = ($25<<24>>24)!=(0);
  do {
   if ($26) {
    $27 = HEAP32[4884>>2]|0;
    $28 = ($27>>>0)>(0);
    if (!($28)) {
     $31 = HEAP32[9080>>2]|0;
     $32 = ((($31)) + 12|0);
     HEAP8[$32>>0] = 59;
     break;
    }
    $29 = $2;
    $30 = (_ParseLine($29)|0);
    $0 = $30;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   }
  } while(0);
  $33 = $is_iret;
  $34 = $2;
  $35 = (_write_userdef_epilogue($33,$34)|0);
  $0 = $35;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 $36 = HEAP32[(560)>>2]|0;
 $37 = $36 >>> 11;
 $38 = $37 & 1;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = (_GetCurrOffset()|0);
  _LstWrite(4,$40,0);
 }
 $41 = $1;
 $42 = $2;
 $43 = (($42) + ($41<<4)|0);
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 (_strcpy($buffer,$45)|0);
 $46 = (_strlen($buffer)|0);
 $47 = (($buffer) + ($46)|0);
 $p = $47;
 _write_default_epilogue();
 $48 = HEAP32[15488>>2]|0;
 $49 = ((($48)) + 60|0);
 $50 = HEAP32[$49>>2]|0;
 $info = $50;
 $51 = $is_iret;
 $52 = $51&255;
 $53 = ($52|0)==(0);
 do {
  if ($53) {
   $54 = HEAP32[15488>>2]|0;
   $55 = ((($54)) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(130);
   $58 = $p;
   $59 = ((($58)) + 1|0);
   $p = $59;
   if ($57) {
    HEAP8[$58>>0] = 102;
    break;
   } else {
    HEAP8[$58>>0] = 110;
    break;
   }
  }
 } while(0);
 $60 = $1;
 $61 = (($60) + 1)|0;
 $1 = $61;
 $62 = $info;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 if ($65) {
  label = 19;
 } else {
  $66 = $3;
  $67 = $1;
  $68 = ($66|0)!=($67|0);
  if ($68) {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $69 = $p;
  $70 = ((($69)) + 1|0);
  $p = $70;
  HEAP8[$69>>0] = 32;
 }
 $71 = $p;
 HEAP8[$71>>0] = 0;
 $72 = $is_iret;
 $73 = $72&255;
 $74 = ($73|0)==(0);
 L32: do {
  if ($74) {
   $75 = $3;
   $76 = $1;
   $77 = ($75|0)==($76|0);
   if ($77) {
    $78 = HEAP8[(577)>>0]|0;
    $79 = $78&255;
    $80 = ($79|0)!=(2);
    if ($80) {
     $81 = HEAP32[15488>>2]|0;
     $82 = ((($81)) + 48|0);
     $83 = HEAP32[$82>>2]|0;
     switch ($83|0) {
     case 4: case 5: case 6:  {
      $84 = $info;
      $85 = ((($84)) + 16|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)!=(0);
      if (!($87)) {
       break L32;
      }
      $88 = $p;
      $89 = $info;
      $90 = ((($89)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP8[(548)>>0]|0;
      $93 = $92&255;
      $94 = ($93|0)!=(10);
      $95 = $94 ? 116 : 0;
      HEAP32[$vararg_buffer>>2] = $91;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $95;
      (_sprintf($88,99157,$vararg_buffer)|0);
      break L32;
      break;
     }
     case 7:  {
      $96 = HEAP32[(528)>>2]|0;
      $97 = (15508 + ($96<<3)|0);
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = HEAP32[15488>>2]|0;
      FUNCTION_TABLE_vii[$99 & 255]($100,$buffer);
      break L32;
      break;
     }
     case 3:  {
      $101 = $info;
      $102 = ((($101)) + 40|0);
      $103 = HEAP8[$102>>0]|0;
      $104 = $103 & 1;
      $105 = ($104<<24>>24)!=(0);
      if ($105) {
       break L32;
      }
      $106 = $info;
      $107 = ((($106)) + 16|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)!=(0);
      if (!($109)) {
       break L32;
      }
      $110 = $p;
      $111 = $info;
      $112 = ((($111)) + 16|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = HEAP8[(548)>>0]|0;
      $115 = $114&255;
      $116 = ($115|0)!=(10);
      $117 = $116 ? 116 : 0;
      HEAP32[$vararg_buffer2>>2] = $113;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $117;
      (_sprintf($110,99157,$vararg_buffer2)|0);
      break L32;
      break;
     }
     default: {
      break L32;
     }
     }
    }
   } else {
    label = 30;
   }
  } else {
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $118 = $p;
  $119 = $1;
  $120 = $2;
  $121 = (($120) + ($119<<4)|0);
  $122 = ((($121)) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  (_strcpy($118,$123)|0);
 }
 _AddLineQueue($buffer);
 _RunLineQueue();
 $0 = 0;
 $124 = $0;
 STACKTOP = sp;return ($124|0);
}
function _ProcInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[15532>>2] = 0;
 HEAP32[15488>>2] = 0;
 HEAP32[15500>>2] = 1;
 HEAP32[15484>>2] = 0;
 HEAP8[(576)>>0] = 0;
 HEAP8[(577)>>0] = 0;
 $0 = HEAP8[(6083)>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 2 : 0;
 $4 = $3&255;
 HEAP8[(578)>>0] = $4;
 HEAP32[(620)>>2] = 14;
 HEAP32[(624)>>2] = 22;
 HEAP32[(628)>>2] = 104;
 HEAP8[99162>>0] = 0;
 return;
}
function _ParseParams($proc,$i,$tokenarray,$IsPROC) {
 $proc = $proc|0;
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 $IsPROC = $IsPROC|0;
 var $$sink = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cntParam = 0, $cond = 0, $curr = 0, $fcint = 0, $init_done = 0, $is_vararg = 0, $l = 0, $name = 0, $offset = 0, $on = 0, $oo = 0, $or$cond = 0, $or$cond7 = 0;
 var $paracurr = 0, $paranode = 0, $sym = 0, $ti = 0, $tn = 0, $to = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer17 = sp + 32|0;
 $vararg_buffer14 = sp + 24|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 112|0;
 $fcint = sp + 88|0;
 $ti = sp + 68|0;
 $1 = $proc;
 HEAP32[$2>>2] = $i;
 $3 = $tokenarray;
 $4 = $IsPROC;
 HEAP32[$fcint>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(1);
 do {
  if ($8) {
   label = 6;
  } else {
   $9 = $1;
   $10 = ((($9)) + 48|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    label = 6;
   } else {
    $13 = $1;
    $14 = ((($13)) + 48|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(7);
    if ($16) {
     $17 = HEAP8[(556)>>0]|0;
     $18 = $17&255;
     $19 = ($18|0)!=(2);
     if ($19) {
      label = 6;
      break;
     }
    }
    $20 = $1;
    $21 = ((($20)) + 48|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(3);
    if ($23) {
     label = 6;
    } else {
     $38 = $1;
     $39 = ((($38)) + 60|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $paracurr = $42;
    }
   }
  }
 } while(0);
 L8: do {
  if ((label|0) == 6) {
   $24 = $1;
   $25 = ((($24)) + 60|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $paracurr = $28;
   while(1) {
    $29 = $paracurr;
    $30 = ($29|0)!=(0|0);
    if (!($30)) {
     break L8;
    }
    $31 = $paracurr;
    $32 = ((($31)) + 68|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)!=(0|0);
    if (!($34)) {
     break L8;
    }
    $35 = $paracurr;
    $36 = ((($35)) + 68|0);
    $37 = HEAP32[$36>>2]|0;
    $paracurr = $37;
   }
  }
 } while(0);
 $43 = $1;
 $44 = ((($43)) + 24|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = ($45&65535) >>> 11;
 $47 = $46 & 1;
 $48 = $47&255;
 $init_done = $48;
 $cntParam = 0;
 L15: while(1) {
  $49 = HEAP32[$2>>2]|0;
  $50 = $3;
  $51 = (($50) + ($49<<4)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   label = 118;
   break;
  }
  $55 = HEAP32[$2>>2]|0;
  $56 = $3;
  $57 = (($56) + ($55<<4)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(8);
  do {
   if ($60) {
    $61 = HEAP32[$2>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[$2>>2] = $62;
    $63 = $3;
    $64 = (($63) + ($61<<4)|0);
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $name = $66;
   } else {
    $67 = $4;
    $68 = $67&255;
    $69 = ($68|0)==(0);
    if (!($69)) {
     label = 20;
     break L15;
    }
    $70 = HEAP32[$2>>2]|0;
    $71 = $3;
    $72 = (($71) + ($70<<4)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = ($74|0)==(58);
    if (!($75)) {
     label = 20;
     break L15;
    }
    $76 = $paracurr;
    $77 = ($76|0)!=(0|0);
    if ($77) {
     $78 = $paracurr;
     $79 = ((($78)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $name = $80;
     break;
    } else {
     $name = 109841;
     break;
    }
   }
  } while(0);
  $87 = ((($ti)) + 4|0);
  HEAP32[$87>>2] = 0;
  $88 = ((($ti)) + 12|0);
  HEAP8[$88>>0] = 0;
  $89 = ((($ti)) + 16|0);
  HEAP32[$89>>2] = 192;
  $90 = HEAP32[(512)>>2]|0;
  $91 = 1 << $90;
  $92 = 104 & $91;
  $93 = ($92|0)!=(0);
  $94 = ((($ti)) + 13|0);
  if ($93) {
   HEAP8[$94>>0] = 1;
  } else {
   HEAP8[$94>>0] = 0;
  }
  $95 = HEAP8[(556)>>0]|0;
  $96 = ((($ti)) + 14|0);
  HEAP8[$96>>0] = $95;
  $97 = HEAP8[(558)>>0]|0;
  $98 = $97&255;
  HEAP32[$ti>>2] = $98;
  $is_vararg = 0;
  $99 = HEAP32[$2>>2]|0;
  $100 = $3;
  $101 = (($100) + ($99<<4)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = ($103|0)!=(58);
  do {
   if ($104) {
    $105 = $4;
    $106 = $105&255;
    $107 = ($106|0)==(0);
    if ($107) {
     label = 26;
     break L15;
    }
    $109 = ((($ti)) + 14|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $cond = ($111|0)==(0);
    $112 = ((($ti)) + 8|0);
    if ($cond) {
     HEAP32[$112>>2] = 1;
     break;
    } else {
     HEAP32[$112>>2] = 3;
     break;
    }
   } else {
    $113 = HEAP32[$2>>2]|0;
    $114 = (($113) + 1)|0;
    HEAP32[$2>>2] = $114;
    $115 = HEAP32[$2>>2]|0;
    $116 = $3;
    $117 = (($116) + ($115<<4)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($119|0)==(7);
    if ($120) {
     $121 = HEAP32[$2>>2]|0;
     $122 = $3;
     $123 = (($122) + ($121<<4)|0);
     $124 = ((($123)) + 8|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)==(188);
     if ($126) {
      $127 = $1;
      $128 = ((($127)) + 48|0);
      $129 = HEAP32[$128>>2]|0;
      switch ($129|0) {
      case 3: case 4: case 5: case 6: case 0:  {
       label = 33;
       break L15;
       break;
      }
      default: {
      }
      }
      $131 = HEAP32[$2>>2]|0;
      $132 = (($131) + 1)|0;
      $133 = $3;
      $134 = (($133) + ($132<<4)|0);
      $135 = HEAP8[$134>>0]|0;
      $136 = $135&255;
      $137 = ($136|0)!=(0);
      if ($137) {
       (_EmitError(147)|0);
      } else {
       $is_vararg = 1;
      }
      $138 = ((($ti)) + 8|0);
      HEAP32[$138>>2] = 192;
      HEAP32[$ti>>2] = 0;
      $139 = HEAP32[$2>>2]|0;
      $140 = (($139) + 1)|0;
      HEAP32[$2>>2] = $140;
      break;
     }
    }
    $141 = $3;
    $142 = (_GetQualifiedType($2,$141,$ti)|0);
    $143 = ($142|0)==(-1);
    if ($143) {
     label = 39;
     break L15;
    }
   }
  } while(0);
  $144 = $4;
  $145 = $144&255;
  $146 = ($145|0)!=(0);
  if ($146) {
   $147 = $name;
   $148 = (_SymFind($147)|0);
   $sym = $148;
   $149 = ($148|0)!=(0|0);
   if ($149) {
    $150 = $sym;
    $151 = ((($150)) + 16|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)!=(0);
    if ($153) {
     label = 43;
     break;
    }
   }
  }
  $156 = $paracurr;
  $157 = ($156|0)!=(0|0);
  L52: do {
   if ($157) {
    $158 = ((($ti)) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $tn = $159;
    while(1) {
     $160 = $tn;
     $161 = ($160|0)!=(0|0);
     if (!($161)) {
      break;
     }
     $162 = $tn;
     $163 = ((($162)) + 52|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)!=(0|0);
     if (!($165)) {
      break;
     }
     $166 = $tn;
     $167 = ((($166)) + 52|0);
     $168 = HEAP32[$167>>2]|0;
     $tn = $168;
    }
    $169 = $paracurr;
    $170 = ((($169)) + 20|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ($171|0)==(196);
    $173 = $paracurr;
    if ($172) {
     $174 = ((($173)) + 52|0);
     $175 = HEAP32[$174>>2]|0;
     $to = $175;
    } else {
     $176 = ((($173)) + 20|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($177|0)==(195);
     if ($178) {
      $179 = $paracurr;
      $180 = ((($179)) + 32|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $181;
     } else {
      $182 = 0;
     }
     $to = $182;
    }
    while(1) {
     $183 = $to;
     $184 = ($183|0)!=(0|0);
     if (!($184)) {
      break;
     }
     $185 = $to;
     $186 = ((($185)) + 52|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($187|0)!=(0|0);
     if (!($188)) {
      break;
     }
     $189 = $to;
     $190 = ((($189)) + 52|0);
     $191 = HEAP32[$190>>2]|0;
     $to = $191;
    }
    $192 = $paracurr;
    $193 = ((($192)) + 28|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = ($195|0)!=(254);
    if ($196) {
     $197 = $paracurr;
     $198 = ((($197)) + 28|0);
     $199 = HEAP8[$198>>0]|0;
     $$sink = $199;
    } else {
     $200 = HEAP8[(556)>>0]|0;
     $$sink = $200;
    }
    $201 = $$sink&255;
    $202 = $201&255;
    $oo = $202;
    $203 = ((($ti)) + 14|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = $204&255;
    $206 = ($205|0)!=(254);
    $207 = ((($ti)) + 14|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = HEAP8[(556)>>0]|0;
    $$sink3 = $206 ? $208 : $209;
    $210 = $$sink3&255;
    $211 = $210&255;
    $on = $211;
    $212 = ((($ti)) + 8|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $paracurr;
    $215 = ((($214)) + 20|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($213|0)!=($216|0);
    do {
     if ($217) {
      label = 68;
     } else {
      $218 = ((($ti)) + 8|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ($219|0)==(196);
      if ($220) {
       $221 = $tn;
       $222 = $to;
       $223 = ($221|0)!=($222|0);
       if ($223) {
        label = 68;
        break;
       }
      }
      $224 = ((($ti)) + 8|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = ($225|0)==(195);
      if ($226) {
       $227 = ((($ti)) + 13|0);
       $228 = HEAP8[$227>>0]|0;
       $229 = $228&255;
       $230 = $paracurr;
       $231 = ((($230)) + 28|0);
       $232 = ((($231)) + 3|0);
       $233 = HEAP8[$232>>0]|0;
       $234 = ($233&255) >>> 4;
       $235 = $234 & 1;
       $236 = $235&255;
       $237 = ($229|0)!=($236|0);
       if ($237) {
        label = 68;
       } else {
        $238 = $on;
        $239 = $238 << 24 >> 24;
        $240 = $oo;
        $241 = $240 << 24 >> 24;
        $242 = ($239|0)!=($241|0);
        if ($242) {
         label = 68;
        } else {
         $243 = ((($ti)) + 16|0);
         $244 = HEAP32[$243>>2]|0;
         $245 = $paracurr;
         $246 = ((($245)) + 28|0);
         $247 = ((($246)) + 2|0);
         $248 = HEAP8[$247>>0]|0;
         $249 = $248&255;
         $250 = ($244|0)!=($249|0);
         if ($250) {
          label = 68;
         } else {
          $251 = $tn;
          $252 = $to;
          $253 = ($251|0)!=($252|0);
          if ($253) {
           label = 68;
          }
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 68) {
     label = 0;
     $254 = $name;
     HEAP32[$vararg_buffer11>>2] = $254;
     (_EmitErr(137,$vararg_buffer11)|0);
    }
    $255 = $4;
    $256 = ($255<<24>>24)!=(0);
    if ($256) {
     $257 = $paracurr;
     $258 = $name;
     (_SymAddLocal($257,$258)|0);
    }
    $259 = $1;
    $260 = ((($259)) + 48|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)==(1);
    do {
     if (!($262)) {
      $263 = $1;
      $264 = ((($263)) + 48|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)==(2);
      if (!($266)) {
       $267 = $1;
       $268 = ((($267)) + 48|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($269|0)==(7);
       if ($270) {
        $271 = ((($ti)) + 14|0);
        $272 = HEAP8[$271>>0]|0;
        $273 = $272&255;
        $274 = ($273|0)!=(2);
        if ($274) {
         break;
        }
       }
       $275 = $1;
       $276 = ((($275)) + 48|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ($277|0)==(3);
       if (!($278)) {
        $295 = $paracurr;
        $296 = ((($295)) + 68|0);
        $297 = HEAP32[$296>>2]|0;
        $paracurr = $297;
        break L52;
       }
      }
     }
    } while(0);
    $279 = $1;
    $280 = ((($279)) + 60|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = ((($281)) + 4|0);
    $283 = HEAP32[$282>>2]|0;
    $l = $283;
    while(1) {
     $284 = $l;
     $285 = ($284|0)!=(0|0);
     if (!($285)) {
      break;
     }
     $286 = $l;
     $287 = ((($286)) + 68|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $paracurr;
     $290 = ($288|0)!=($289|0);
     if (!($290)) {
      break;
     }
     $291 = $l;
     $292 = ((($291)) + 68|0);
     $293 = HEAP32[$292>>2]|0;
     $l = $293;
    }
    $294 = $l;
    $paracurr = $294;
   } else {
    $298 = $init_done;
    $299 = $298&255;
    $300 = ($299|0)==(1);
    if ($300) {
     label = 83;
     break L15;
    }
    $302 = $4;
    $303 = ($302<<24>>24)!=(0);
    if ($303) {
     $304 = $name;
     $305 = (_SymLCreate($304)|0);
     $paranode = $305;
    } else {
     $306 = (_SymAlloc(109841)|0);
     $paranode = $306;
    }
    $307 = $paranode;
    $308 = ($307|0)==(0|0);
    if ($308) {
     label = 88;
     break L15;
    }
    $309 = $paranode;
    $310 = ((($309)) + 24|0);
    $311 = HEAP16[$310>>1]|0;
    $312 = $311 & -3;
    $313 = $312 | 2;
    HEAP16[$310>>1] = $313;
    $314 = ((($ti)) + 8|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = $paranode;
    $317 = ((($316)) + 20|0);
    HEAP32[$317>>2] = $315;
    $318 = ((($ti)) + 8|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319|0)==(196);
    $321 = ((($ti)) + 4|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $paranode;
    if ($320) {
     $324 = ((($323)) + 52|0);
     HEAP32[$324>>2] = $322;
    } else {
     $325 = ((($323)) + 32|0);
     HEAP32[$325>>2] = $322;
    }
    $326 = ((($ti)) + 13|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = $paranode;
    $329 = ((($328)) + 28|0);
    $330 = ((($329)) + 3|0);
    $331 = HEAP8[$330>>0]|0;
    $332 = $327 & 1;
    $333 = ($332 << 4)&255;
    $334 = $331 & -17;
    $335 = $334 | $333;
    HEAP8[$330>>0] = $335;
    $336 = ((($ti)) + 14|0);
    $337 = HEAP8[$336>>0]|0;
    $338 = $paranode;
    $339 = ((($338)) + 28|0);
    HEAP8[$339>>0] = $337;
    $340 = ((($ti)) + 12|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $paranode;
    $343 = ((($342)) + 28|0);
    $344 = ((($343)) + 1|0);
    HEAP8[$344>>0] = $341;
    $345 = ((($ti)) + 16|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = $346&255;
    $348 = $paranode;
    $349 = ((($348)) + 28|0);
    $350 = ((($349)) + 2|0);
    HEAP8[$350>>0] = $347;
    $351 = $is_vararg;
    $352 = $paranode;
    $353 = ((($352)) + 28|0);
    $354 = ((($353)) + 3|0);
    $355 = HEAP8[$354>>0]|0;
    $356 = $351 & 1;
    $357 = ($356 << 5)&255;
    $358 = $355 & -33;
    $359 = $358 | $357;
    HEAP8[$354>>0] = $359;
    $360 = $1;
    $361 = ((($360)) + 48|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = ($362|0)==(7);
    if ($363) {
     $364 = HEAP32[(528)>>2]|0;
     $365 = (15508 + ($364<<3)|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $1;
     $368 = $paranode;
     $369 = (FUNCTION_TABLE_iiii[$366 & 255]($367,$368,$fcint)|0);
     $370 = ($369|0)!=(0);
     if (!($370)) {
      label = 94;
     }
    } else {
     label = 94;
    }
    if ((label|0) == 94) {
     label = 0;
     $371 = $paranode;
     $372 = ((($371)) + 16|0);
     HEAP32[$372>>2] = 5;
    }
    $373 = $paranode;
    $374 = ((($373)) + 40|0);
    HEAP32[$374>>2] = 1;
    $375 = HEAP32[$ti>>2]|0;
    $376 = $paranode;
    $377 = ((($376)) + 36|0);
    HEAP32[$377>>2] = $375;
    $378 = $paranode;
    $379 = ((($378)) + 28|0);
    $380 = ((($379)) + 3|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = ($381&255) >>> 5;
    $383 = $382 & 1;
    $384 = $383&255;
    $385 = ($384|0)==(0);
    if ($385) {
     $386 = HEAP32[$ti>>2]|0;
     $387 = $4;
     $388 = $387&255;
     $389 = ($388|0)!=(0);
     if ($389) {
      $390 = HEAP8[(558)>>0]|0;
      $391 = $390&255;
      $400 = $391;
     } else {
      $392 = $1;
      $393 = ((($392)) + 28|0);
      $394 = ((($393)) + 3|0);
      $395 = HEAP8[$394>>0]|0;
      $396 = $395 & 3;
      $397 = $396&255;
      $398 = 2 << $397;
      $400 = $398;
     }
     $399 = (($400) - 1)|0;
     $401 = (($386) + ($399))|0;
     $402 = $4;
     $403 = $402&255;
     $404 = ($403|0)!=(0);
     if ($404) {
      $405 = HEAP8[(558)>>0]|0;
      $406 = $405&255;
      $415 = $406;
     } else {
      $407 = $1;
      $408 = ((($407)) + 28|0);
      $409 = ((($408)) + 3|0);
      $410 = HEAP8[$409>>0]|0;
      $411 = $410 & 3;
      $412 = $411&255;
      $413 = 2 << $412;
      $415 = $413;
     }
     $414 = (($415) - 1)|0;
     $416 = $414 ^ -1;
     $417 = $401 & $416;
     $418 = $1;
     $419 = ((($418)) + 60|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ((($420)) + 16|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = (($422) + ($417))|0;
     HEAP32[$421>>2] = $423;
    }
    $424 = $1;
    $425 = ((($424)) + 48|0);
    $426 = HEAP32[$425>>2]|0;
    switch ($426|0) {
    case 4: case 5: case 6:  {
     break;
    }
    case 7:  {
     $455 = ((($ti)) + 14|0);
     $456 = HEAP8[$455>>0]|0;
     $457 = $456&255;
     $458 = ($457|0)==(2);
     if (!($458)) {
      $459 = ((($ti)) + 14|0);
      $460 = HEAP8[$459>>0]|0;
      $461 = $460&255;
      $462 = ($461|0)==(0);
      $463 = HEAP32[(528)>>2]|0;
      $464 = ($463|0)==(0);
      $or$cond = $462 & $464;
      if (!($or$cond)) {
       label = 112;
      }
     }
     break;
    }
    default: {
     label = 112;
    }
    }
    if ((label|0) == 112) {
     label = 0;
     $465 = $1;
     $466 = ((($465)) + 60|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = ((($467)) + 4|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = $paranode;
     $471 = ((($470)) + 68|0);
     HEAP32[$471>>2] = $469;
     $472 = $paranode;
     $473 = $1;
     $474 = ((($473)) + 60|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = ((($475)) + 4|0);
     HEAP32[$476>>2] = $472;
     break;
    }
    $427 = $paranode;
    $428 = ((($427)) + 68|0);
    HEAP32[$428>>2] = 0;
    $429 = $1;
    $430 = ((($429)) + 60|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = ((($431)) + 4|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = ($433|0)==(0|0);
    if ($434) {
     $435 = $paranode;
     $436 = $1;
     $437 = ((($436)) + 60|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ((($438)) + 4|0);
     HEAP32[$439>>2] = $435;
     break;
    }
    $440 = $1;
    $441 = ((($440)) + 60|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = ((($442)) + 4|0);
    $444 = HEAP32[$443>>2]|0;
    $paracurr = $444;
    while(1) {
     $445 = $paracurr;
     $446 = ((($445)) + 68|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($447|0)==(0|0);
     if ($448) {
      break;
     }
     $449 = $paracurr;
     $450 = ((($449)) + 68|0);
     $451 = HEAP32[$450>>2]|0;
     $paracurr = $451;
    }
    $452 = $paranode;
    $453 = $paracurr;
    $454 = ((($453)) + 68|0);
    HEAP32[$454>>2] = $452;
    $paracurr = 0;
   }
  } while(0);
  $477 = HEAP32[$2>>2]|0;
  $478 = $3;
  $479 = (($478) + ($477<<4)|0);
  $480 = HEAP8[$479>>0]|0;
  $481 = $480&255;
  $482 = ($481|0)!=(0);
  if ($482) {
   $483 = HEAP32[$2>>2]|0;
   $484 = $3;
   $485 = (($484) + ($483<<4)|0);
   $486 = HEAP8[$485>>0]|0;
   $487 = $486&255;
   $488 = ($487|0)!=(44);
   $489 = HEAP32[$2>>2]|0;
   if ($488) {
    label = 115;
    break;
   }
   $495 = (($489) + 1)|0;
   HEAP32[$2>>2] = $495;
  }
  $496 = $cntParam;
  $497 = (($496) + 1)|0;
  $cntParam = $497;
 }
 if ((label|0) == 20) {
  $81 = HEAP32[$2>>2]|0;
  $82 = $3;
  $83 = (($82) + ($81<<4)|0);
  $84 = ((($83)) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  HEAP32[$vararg_buffer>>2] = $85;
  $86 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $86;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 26) {
  $108 = (_EmitError(84)|0);
  $0 = $108;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 33) {
  $130 = (_EmitError(94)|0);
  $0 = $130;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 39) {
  $0 = -1;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 43) {
  $154 = $name;
  HEAP32[$vararg_buffer8>>2] = $154;
  $155 = (_EmitErr(143,$vararg_buffer8)|0);
  $0 = $155;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 83) {
  HEAP32[$vararg_buffer14>>2] = 109841;
  $301 = (_EmitErr(137,$vararg_buffer14)|0);
  $0 = $301;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 88) {
  $0 = -1;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 115) {
  $490 = $3;
  $491 = (($490) + ($489<<4)|0);
  $492 = ((($491)) + 12|0);
  $493 = HEAP32[$492>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $493;
  $494 = (_EmitErr(39,$vararg_buffer17)|0);
  $0 = $494;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 else if ((label|0) == 118) {
  $498 = $init_done;
  $499 = $498&255;
  $500 = ($499|0)==(1);
  $501 = $paracurr;
  $502 = ($501|0)!=(0|0);
  $or$cond7 = $500 & $502;
  if ($or$cond7) {
   HEAP32[$vararg_buffer20>>2] = 109841;
   $503 = (_EmitErr(137,$vararg_buffer20)|0);
   $0 = $503;
   $604 = $0;
   STACKTOP = sp;return ($604|0);
  }
  $504 = $4;
  $505 = ($504<<24>>24)!=(0);
  L153: do {
   if ($505) {
    $506 = $1;
    $507 = ((($506)) + 20|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = ($508|0)==(130);
    $510 = $509 ? 1 : 0;
    $511 = (2 + ($510))|0;
    $512 = HEAP8[(558)>>0]|0;
    $513 = $512&255;
    $514 = Math_imul($511, $513)|0;
    $offset = $514;
    $515 = HEAP8[(556)>>0]|0;
    $516 = $515&255;
    $517 = ($516|0)==(2);
    if ($517) {
     $518 = $1;
     $519 = ((($518)) + 48|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = ($520|0)==(7);
     if ($521) {
      $522 = $1;
      $523 = ((($522)) + 60|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = ((($524)) + 4|0);
      $526 = HEAP32[$525>>2]|0;
      $paranode = $526;
      while(1) {
       $527 = $paranode;
       $528 = ($527|0)!=(0|0);
       if (!($528)) {
        break L153;
       }
       $529 = $paranode;
       $530 = ((($529)) + 16|0);
       $531 = HEAP32[$530>>2]|0;
       $532 = ($531|0)==(10);
       if (!($532)) {
        $533 = $offset;
        $534 = $paranode;
        $535 = ((($534)) + 8|0);
        HEAP32[$535>>2] = $533;
        $536 = $1;
        $537 = ((($536)) + 60|0);
        $538 = HEAP32[$537>>2]|0;
        $539 = ((($538)) + 40|0);
        $540 = HEAP8[$539>>0]|0;
        $541 = $540 & -33;
        $542 = $541 | 32;
        HEAP8[$539>>0] = $542;
        $543 = $paranode;
        $544 = ((($543)) + 36|0);
        $545 = HEAP32[$544>>2]|0;
        $546 = HEAP8[(558)>>0]|0;
        $547 = $546&255;
        $548 = (($547) - 1)|0;
        $549 = (($545) + ($548))|0;
        $550 = HEAP8[(558)>>0]|0;
        $551 = $550&255;
        $552 = (($551) - 1)|0;
        $553 = $552 ^ -1;
        $554 = $549 & $553;
        $555 = $offset;
        $556 = (($555) + ($554))|0;
        $offset = $556;
       }
       $557 = $paranode;
       $558 = ((($557)) + 68|0);
       $559 = HEAP32[$558>>2]|0;
       $paranode = $559;
      }
     }
    }
    while(1) {
     $560 = $cntParam;
     $561 = ($560|0)!=(0);
     if (!($561)) {
      break L153;
     }
     $curr = 1;
     $562 = $1;
     $563 = ((($562)) + 60|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = ((($564)) + 4|0);
     $566 = HEAP32[$565>>2]|0;
     $paranode = $566;
     while(1) {
      $567 = $curr;
      $568 = $cntParam;
      $569 = ($567|0)<($568|0);
      $570 = $paranode;
      if (!($569)) {
       break;
      }
      $571 = ((($570)) + 68|0);
      $572 = HEAP32[$571>>2]|0;
      $paranode = $572;
      $573 = $curr;
      $574 = (($573) + 1)|0;
      $curr = $574;
     }
     $575 = ((($570)) + 16|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = ($576|0)==(10);
     if (!($577)) {
      $578 = $offset;
      $579 = $paranode;
      $580 = ((($579)) + 8|0);
      HEAP32[$580>>2] = $578;
      $581 = $1;
      $582 = ((($581)) + 60|0);
      $583 = HEAP32[$582>>2]|0;
      $584 = ((($583)) + 40|0);
      $585 = HEAP8[$584>>0]|0;
      $586 = $585 & -33;
      $587 = $586 | 32;
      HEAP8[$584>>0] = $587;
      $588 = $paranode;
      $589 = ((($588)) + 36|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = HEAP8[(558)>>0]|0;
      $592 = $591&255;
      $593 = (($592) - 1)|0;
      $594 = (($590) + ($593))|0;
      $595 = HEAP8[(558)>>0]|0;
      $596 = $595&255;
      $597 = (($596) - 1)|0;
      $598 = $597 ^ -1;
      $599 = $594 & $598;
      $600 = $offset;
      $601 = (($600) + ($599))|0;
      $offset = $601;
     }
     $602 = $cntParam;
     $603 = (($602) + -1)|0;
     $cntParam = $603;
    }
   }
  } while(0);
  $0 = 0;
  $604 = $0;
  STACKTOP = sp;return ($604|0);
 }
 return (0)|0;
}
function _push_proc($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = HEAP32[4884>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = $0;
  _SymGetLocal($3);
 }
 $4 = $0;
 _pushitem(15532,$4);
 STACKTOP = sp;return;
}
function _ProcFini($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(584)>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  $6 = (_GetCurrOffset()|0);
  $7 = $0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($6) - ($9))|0;
  $11 = $0;
  $12 = ((($11)) + 36|0);
  HEAP32[$12>>2] = $10;
 } else {
  $13 = $0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  (_EmitErr(142,$vararg_buffer)|0);
  $16 = HEAP32[15488>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($20) - ($23))|0;
  $25 = $0;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = HEAP8[(6017)>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)>(2);
 $30 = HEAP32[4884>>2]|0;
 $31 = ($30|0)==(0);
 $or$cond = $29 & $31;
 L5: do {
  if ($or$cond) {
   $32 = $0;
   $33 = ((($32)) + 60|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $curr = $36;
   while(1) {
    $37 = $curr;
    $38 = ($37|0)!=(0|0);
    if (!($38)) {
     break;
    }
    $39 = $curr;
    $40 = ((($39)) + 24|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41 & 1;
    $43 = $42&255;
    $44 = $43&255;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $curr;
     $47 = ((($46)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $48;
     _EmitWarn(3,265,$vararg_buffer4);
    }
    $49 = $curr;
    $50 = ((($49)) + 68|0);
    $51 = HEAP32[$50>>2]|0;
    $curr = $51;
   }
   $52 = $0;
   $53 = ((($52)) + 60|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $curr = $56;
   while(1) {
    $57 = $curr;
    $58 = ($57|0)!=(0|0);
    if (!($58)) {
     break L5;
    }
    $59 = $curr;
    $60 = ((($59)) + 24|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61 & 1;
    $63 = $62&255;
    $64 = $63&255;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = $curr;
     $67 = ((($66)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $68;
     _EmitWarn(3,265,$vararg_buffer7);
    }
    $69 = $curr;
    $70 = ((($69)) + 68|0);
    $71 = HEAP32[$70>>2]|0;
    $curr = $71;
   }
  }
 } while(0);
 $72 = HEAP32[4884>>2]|0;
 $73 = ($72|0)==(0);
 $74 = HEAP32[(528)>>2]|0;
 $75 = ($74|0)==(2);
 $or$cond3 = $73 & $75;
 L21: do {
  if ($or$cond3) {
   $76 = HEAP8[((((564)) + 1|0))>>0]|0;
   $77 = $76&255;
   $78 = $77 & 2;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = HEAP32[15504>>2]|0;
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $0;
    $84 = ((($83)) + 60|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 32|0);
    HEAP32[$86>>2] = $82;
    $87 = $0;
    $88 = ((($87)) + 60|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($89)) + 40|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($91&255) >>> 7;
    $93 = ($92<<24>>24)!=(0);
    if ($93) {
     $94 = $0;
     $95 = ((($94)) + 60|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($96)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     $curr = $98;
     while(1) {
      $99 = $curr;
      $100 = ($99|0)!=(0|0);
      $101 = $0;
      $102 = ((($101)) + 60|0);
      $103 = HEAP32[$102>>2]|0;
      if (!($100)) {
       break;
      }
      $104 = ((($103)) + 32|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $curr;
      $107 = ((($106)) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($108) + ($105))|0;
      HEAP32[$107>>2] = $109;
      $110 = $curr;
      $111 = ((($110)) + 68|0);
      $112 = HEAP32[$111>>2]|0;
      $curr = $112;
     }
     $113 = ((($103)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $curr = $114;
     while(1) {
      $115 = $curr;
      $116 = ($115|0)!=(0|0);
      if (!($116)) {
       break L21;
      }
      $117 = $0;
      $118 = ((($117)) + 60|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ((($119)) + 32|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $curr;
      $123 = ((($122)) + 8|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = (($124) + ($121))|0;
      HEAP32[$123>>2] = $125;
      $126 = $curr;
      $127 = ((($126)) + 68|0);
      $128 = HEAP32[$127>>2]|0;
      $curr = $128;
     }
    }
   }
  }
 } while(0);
 $129 = $0;
 $130 = ((($129)) + 60|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($131)) + 40|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = ($133&255) >>> 6;
 $135 = $134 & 1;
 $136 = ($135<<24>>24)!=(0);
 if ($136) {
  _LstSetPosition();
  $137 = $0;
  _WriteSEHData($137);
 }
 $138 = HEAP32[(560)>>2]|0;
 $139 = $138 >>> 11;
 $140 = $139 & 1;
 $141 = ($140|0)!=(0);
 if ($141) {
  _LstWrite(7,0,0);
 }
 $142 = HEAP32[4884>>2]|0;
 $143 = ($142|0)==(0);
 if ($143) {
  $144 = HEAP32[15484>>2]|0;
  $145 = $144 & 128;
  $146 = ($145|0)!=(0);
  if ($146) {
   $147 = HEAP32[15488>>2]|0;
   $148 = ((($147)) + 60|0);
   $149 = HEAP32[$148>>2]|0;
   _SetLocalOffsets($149);
  }
  $150 = HEAP32[15488>>2]|0;
  _SymGetLocal($150);
 }
 $151 = (_pop_proc()|0);
 HEAP32[15488>>2] = $151;
 $152 = HEAP32[15488>>2]|0;
 $153 = ($152|0)!=(0|0);
 if (!($153)) {
  HEAP32[15484>>2] = 0;
  STACKTOP = sp;return;
 }
 $154 = HEAP32[15488>>2]|0;
 _SymSetLocal($154);
 HEAP32[15484>>2] = 0;
 STACKTOP = sp;return;
}
function _SetLocalOffsets($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $cnt = 0, $cntstd = 0, $cntxmm = 0, $curr = 0, $itemsize = 0, $localadj = 0, $or$cond = 0, $paramadj = 0, $regs = 0;
 var $rspalign = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $info;
 $cntxmm = 0;
 $cntstd = 0;
 $start = 0;
 $rspalign = 0;
 $1 = HEAP8[(558)>>0]|0;
 $2 = $1&255;
 $align = $2;
 $3 = $0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 6;
 $7 = $6 & 1;
 $8 = $7&255;
 $9 = ($8|0)!=(0);
 if ($9) {
  label = 4;
 } else {
  $10 = HEAP32[(528)>>2]|0;
  $11 = ($10|0)==(2);
  if ($11) {
   $12 = HEAP8[((((564)) + 1|0))>>0]|0;
   $13 = $12&255;
   $14 = $13 & 2;
   $15 = ($14|0)!=(0);
   if ($15) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $rspalign = 1;
  $16 = HEAP8[((((564)) + 1|0))>>0]|0;
  $17 = $16&255;
  $18 = $17 & 4;
  $19 = ($18|0)!=(0);
  if ($19) {
   $align = 16;
  }
 }
 $20 = $0;
 $21 = ((($20)) + 40|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22&255) >>> 7;
 $24 = $23&255;
 $25 = ($24|0)!=(0);
 $26 = $rspalign;
 $27 = ($26|0)!=(0);
 $or$cond = $25 | $27;
 if ($or$cond) {
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(0|0);
  L10: do {
   if ($30) {
    $31 = $0;
    $32 = HEAP32[$31>>2]|0;
    $regs = $32;
    $33 = $regs;
    $34 = ((($33)) + 2|0);
    $regs = $34;
    $35 = HEAP16[$33>>1]|0;
    $36 = $35&65535;
    $cnt = $36;
    while(1) {
     $37 = $cnt;
     $38 = ($37|0)!=(0);
     if (!($38)) {
      break L10;
     }
     $39 = $regs;
     $40 = HEAP16[$39>>1]|0;
     $41 = $40&65535;
     $42 = (15660 + (($41*12)|0)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $43 & 32;
     $45 = ($44|0)!=(0);
     if ($45) {
      $46 = $cntxmm;
      $47 = (($46) + 1)|0;
      $cntxmm = $47;
     } else {
      $48 = $cntstd;
      $49 = (($48) + 1)|0;
      $cntstd = $49;
     }
     $50 = $cnt;
     $51 = (($50) + -1)|0;
     $cnt = $51;
     $52 = $regs;
     $53 = ((($52)) + 2|0);
     $regs = $53;
    }
   }
  } while(0);
  $54 = $0;
  $55 = ((($54)) + 40|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56&255) >>> 7;
  $58 = $57&255;
  $59 = ($58|0)!=(0);
  if ($59) {
   label = 17;
  } else {
   $60 = $0;
   $61 = ((($60)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = $0;
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if ($67) {
     label = 17;
    }
   }
  }
  if ((label|0) == 17) {
   $68 = HEAP8[(558)>>0]|0;
   $69 = $68&255;
   $start = $69;
  }
  $70 = $rspalign;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $start;
   $73 = $cntstd;
   $74 = HEAP8[(558)>>0]|0;
   $75 = $74&255;
   $76 = Math_imul($73, $75)|0;
   $77 = (($72) + ($76))|0;
   $78 = $0;
   $79 = ((($78)) + 20|0);
   HEAP32[$79>>2] = $77;
   $80 = $cntxmm;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $cntxmm;
    $83 = $82<<4;
    $84 = $0;
    $85 = ((($84)) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($83))|0;
    HEAP32[$85>>2] = $87;
    $88 = $0;
    $89 = ((($88)) + 20|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 15)|0;
    $92 = $91 & -16;
    $93 = $0;
    $94 = ((($93)) + 20|0);
    HEAP32[$94>>2] = $92;
   }
  }
 }
 $95 = $0;
 $96 = ((($95)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $curr = $97;
 while(1) {
  $98 = $curr;
  $99 = ($98|0)!=(0|0);
  if (!($99)) {
   break;
  }
  $100 = $curr;
  $101 = ((($100)) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   $111 = 0;
  } else {
   $104 = $curr;
   $105 = ((($104)) + 36|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $curr;
   $108 = ((($107)) + 40|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($106>>>0) / ($109>>>0))&-1;
   $111 = $110;
  }
  $itemsize = $111;
  $112 = $curr;
  $113 = ((($112)) + 36|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $0;
  $116 = ((($115)) + 20|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + ($114))|0;
  HEAP32[$116>>2] = $118;
  $119 = $itemsize;
  $120 = $align;
  $121 = ($119>>>0)>($120>>>0);
  if ($121) {
   $122 = $0;
   $123 = ((($122)) + 20|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $align;
   $126 = (($125) - 1)|0;
   $127 = (($124) + ($126))|0;
   $128 = $align;
   $129 = (($128) - 1)|0;
   $130 = $129 ^ -1;
   $131 = $127 & $130;
   $132 = $0;
   $133 = ((($132)) + 20|0);
   HEAP32[$133>>2] = $131;
  } else {
   $134 = $itemsize;
   $135 = ($134|0)!=(0);
   if ($135) {
    $136 = $0;
    $137 = ((($136)) + 20|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $itemsize;
    $140 = (($139) - 1)|0;
    $141 = (($138) + ($140))|0;
    $142 = $itemsize;
    $143 = (($142) - 1)|0;
    $144 = $143 ^ -1;
    $145 = $141 & $144;
    $146 = $0;
    $147 = ((($146)) + 20|0);
    HEAP32[$147>>2] = $145;
   }
  }
  $148 = $0;
  $149 = ((($148)) + 20|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (0 - ($150))|0;
  $152 = $curr;
  $153 = ((($152)) + 8|0);
  HEAP32[$153>>2] = $151;
  $154 = $curr;
  $155 = ((($154)) + 68|0);
  $156 = HEAP32[$155>>2]|0;
  $curr = $156;
 }
 $157 = $0;
 $158 = ((($157)) + 20|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = HEAP8[(558)>>0]|0;
 $161 = $160&255;
 $162 = (($161) - 1)|0;
 $163 = (($159) + ($162))|0;
 $164 = HEAP8[(558)>>0]|0;
 $165 = $164&255;
 $166 = (($165) - 1)|0;
 $167 = $166 ^ -1;
 $168 = $163 & $167;
 $169 = $0;
 $170 = ((($169)) + 20|0);
 HEAP32[$170>>2] = $168;
 $171 = $rspalign;
 $172 = ($171|0)!=(0);
 if ($172) {
  $173 = $0;
  $174 = ((($173)) + 20|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($175) + 15)|0;
  $177 = $176 & -16;
  $178 = $0;
  $179 = ((($178)) + 20|0);
  HEAP32[$179>>2] = $177;
 }
 $180 = $0;
 $181 = ((($180)) + 40|0);
 $182 = HEAP8[$181>>0]|0;
 $183 = ($182&255) >>> 7;
 $184 = ($183<<24>>24)!=(0);
 L44: do {
  if ($184) {
   $185 = $rspalign;
   $186 = ($185|0)!=(0);
   $187 = $0;
   $188 = ((($187)) + 20|0);
   $189 = HEAP32[$188>>2]|0;
   if ($186) {
    $localadj = $189;
    $190 = $0;
    $191 = ((($190)) + 20|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = HEAP8[(558)>>0]|0;
    $194 = $193&255;
    $195 = (($192) - ($194))|0;
    $196 = $start;
    $197 = (($195) - ($196))|0;
    $paramadj = $197;
   } else {
    $198 = $cntstd;
    $199 = HEAP8[(558)>>0]|0;
    $200 = $199&255;
    $201 = Math_imul($198, $200)|0;
    $202 = (($189) + ($201))|0;
    $localadj = $202;
    $203 = $0;
    $204 = ((($203)) + 20|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $cntstd;
    $207 = HEAP8[(558)>>0]|0;
    $208 = $207&255;
    $209 = Math_imul($206, $208)|0;
    $210 = (($205) + ($209))|0;
    $211 = HEAP8[(558)>>0]|0;
    $212 = $211&255;
    $213 = (($210) - ($212))|0;
    $paramadj = $213;
   }
   $214 = $0;
   $215 = ((($214)) + 8|0);
   $216 = HEAP32[$215>>2]|0;
   $curr = $216;
   while(1) {
    $217 = $curr;
    $218 = ($217|0)!=(0|0);
    if (!($218)) {
     break;
    }
    $219 = $localadj;
    $220 = $curr;
    $221 = ((($220)) + 8|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (($222) + ($219))|0;
    HEAP32[$221>>2] = $223;
    $224 = $curr;
    $225 = ((($224)) + 68|0);
    $226 = HEAP32[$225>>2]|0;
    $curr = $226;
   }
   $227 = $0;
   $228 = ((($227)) + 4|0);
   $229 = HEAP32[$228>>2]|0;
   $curr = $229;
   while(1) {
    $230 = $curr;
    $231 = ($230|0)!=(0|0);
    if (!($231)) {
     break L44;
    }
    $232 = $paramadj;
    $233 = $curr;
    $234 = ((($233)) + 8|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = (($235) + ($232))|0;
    HEAP32[$234>>2] = $236;
    $237 = $curr;
    $238 = ((($237)) + 68|0);
    $239 = HEAP32[$238>>2]|0;
    $curr = $239;
   }
  }
 } while(0);
 $240 = $rspalign;
 $241 = ($240|0)!=(0);
 if (!($241)) {
  STACKTOP = sp;return;
 }
 $242 = $cntstd;
 $243 = $242<<3;
 $244 = $start;
 $245 = (($243) + ($244))|0;
 $246 = $0;
 $247 = ((($246)) + 20|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = (($248) - ($245))|0;
 HEAP32[$247>>2] = $249;
 STACKTOP = sp;return;
}
function _write_default_prologue() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cnt = 0, $info = 0, $oldlinenumbers = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $regist = 0, $resstack = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer39 = sp + 80|0;
 $vararg_buffer35 = sp + 72|0;
 $vararg_buffer31 = sp + 64|0;
 $vararg_buffer28 = sp + 56|0;
 $vararg_buffer24 = sp + 48|0;
 $vararg_buffer20 = sp + 40|0;
 $vararg_buffer15 = sp + 24|0;
 $vararg_buffer12 = sp + 16|0;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $resstack = 0;
 $1 = HEAP32[15488>>2]|0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $info = $3;
 $4 = $info;
 $5 = ((($4)) + 40|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6&255) >>> 6;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)!=(0);
 L1: do {
  if ($9) {
   $10 = HEAP32[(560)>>2]|0;
   $11 = $10 >>> 17;
   $12 = $11 & 1;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $info;
    _write_win64_default_prologue($14);
    break;
   }
   $0 = 0;
   $220 = $0;
   STACKTOP = sp;return ($220|0);
  } else {
   $15 = HEAP8[(556)>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(2);
   $18 = HEAP32[(528)>>2]|0;
   $19 = ($18|0)==(2);
   $or$cond = $17 & $19;
   if ($or$cond) {
    $20 = HEAP8[((((564)) + 1|0))>>0]|0;
    $21 = $20&255;
    $22 = $21 & 2;
    $23 = ($22|0)!=(0);
    if ($23) {
     $24 = HEAP32[15504>>2]|0;
     $25 = ((($24)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $resstack = $26;
    }
   }
   $27 = $info;
   $28 = ((($27)) + 40|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29&255) >>> 3;
   $31 = $30 & 1;
   $32 = $31&255;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $info;
    $35 = ((($34)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = $info;
     $39 = ((($38)) + 40|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40&255) >>> 5;
     $42 = $41 & 1;
     $43 = $42&255;
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = $info;
      $46 = ((($45)) + 40|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47 & 1;
      $49 = $48&255;
      $50 = ($49|0)==(0);
      $51 = $resstack;
      $52 = ($51|0)==(0);
      $or$cond3 = $50 & $52;
      if ($or$cond3) {
       $53 = $info;
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0|0);
       if ($55) {
        $0 = 0;
        $220 = $0;
        STACKTOP = sp;return ($220|0);
       }
      }
     }
    }
   }
   $56 = $info;
   $57 = HEAP32[$56>>2]|0;
   $regist = $57;
   $58 = HEAP8[(556)>>0]|0;
   $59 = $58&255;
   $60 = ($59|0)==(2);
   if ($60) {
    $61 = HEAP32[15488>>2]|0;
    $62 = ((($61)) + 48|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(7);
    $65 = HEAP32[(528)>>2]|0;
    $66 = ($65|0)==(2);
    $or$cond5 = $64 & $66;
    if ($or$cond5) {
     $67 = HEAP8[((((564)) + 1|0))>>0]|0;
     $68 = $67&255;
     $69 = $68 & 1;
     $70 = ($69|0)!=(0);
     if ($70) {
      $71 = $info;
      _win64_SaveRegParams($71);
     }
    }
   }
   $72 = $info;
   $73 = ((($72)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)!=(0|0);
   if ($75) {
    label = 22;
   } else {
    $76 = $info;
    $77 = ((($76)) + 40|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78&255) >>> 5;
    $80 = $79 & 1;
    $81 = $80&255;
    $82 = ($81|0)!=(0);
    if ($82) {
     label = 22;
    } else {
     $83 = $info;
     $84 = ((($83)) + 40|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85 & 1;
     $87 = $86&255;
     $88 = ($87|0)!=(0);
     if ($88) {
      label = 22;
     } else {
      $89 = $info;
      $90 = ((($89)) + 40|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = ($91&255) >>> 3;
      $93 = $92 & 1;
      $94 = $93&255;
      $95 = ($94|0)!=(0);
      if ($95) {
       label = 22;
      }
     }
    }
   }
   if ((label|0) == 22) {
    $96 = $info;
    $97 = ((($96)) + 40|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = ($98&255) >>> 7;
    $100 = ($99<<24>>24)!=(0);
    if (!($100)) {
     $101 = $info;
     $102 = ((($101)) + 42|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&65535;
     HEAP32[$vararg_buffer>>2] = $104;
     _AddLineQueueX(99481,$vararg_buffer);
     $105 = $info;
     $106 = ((($105)) + 42|0);
     $107 = HEAP16[$106>>1]|0;
     $108 = $107&65535;
     $109 = HEAP8[(556)>>0]|0;
     $110 = $109&255;
     $111 = (15472 + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $108;
     $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $112;
     _AddLineQueueX(99306,$vararg_buffer8);
    }
   }
   $113 = $resstack;
   $114 = ($113|0)!=(0);
   do {
    if ($114) {
     $115 = $regist;
     $116 = ($115|0)!=(0|0);
     if ($116) {
      $117 = $regist;
      $118 = ((($117)) + 2|0);
      $regist = $118;
      $119 = HEAP16[$117>>1]|0;
      $120 = $119&65535;
      $cnt = $120;
      while(1) {
       $121 = $cnt;
       $122 = ($121|0)!=(0);
       if (!($122)) {
        break;
       }
       $123 = $regist;
       $124 = HEAP16[$123>>1]|0;
       $125 = $124&65535;
       HEAP32[$vararg_buffer12>>2] = $125;
       _AddLineQueueX(99481,$vararg_buffer12);
       $126 = $cnt;
       $127 = (($126) + -1)|0;
       $cnt = $127;
       $128 = $regist;
       $129 = ((($128)) + 2|0);
       $regist = $129;
      }
      $regist = 0;
     }
     $130 = HEAP8[(556)>>0]|0;
     $131 = $130&255;
     $132 = (15472 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $info;
     $135 = ((($134)) + 20|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = HEAP32[15504>>2]|0;
     $138 = ((($137)) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     HEAP32[$vararg_buffer15>>2] = $133;
     $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
     HEAP32[$vararg_ptr18>>2] = $136;
     $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
     HEAP32[$vararg_ptr19>>2] = $139;
     _AddLineQueueX(99489,$vararg_buffer15);
    } else {
     $140 = $info;
     $141 = ((($140)) + 20|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)!=(0);
     if ($143) {
      $144 = HEAP8[(6084)>>0]|0;
      $145 = $144&255;
      $146 = ($145|0)!=(0);
      if (!($146)) {
       $147 = $info;
       $148 = ((($147)) + 20|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($149|0)==(128);
       if (!($150)) {
        $159 = HEAP8[(556)>>0]|0;
        $160 = $159&255;
        $161 = (15472 + ($160<<2)|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = $info;
        $164 = ((($163)) + 20|0);
        $165 = HEAP32[$164>>2]|0;
        HEAP32[$vararg_buffer24>>2] = $162;
        $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
        HEAP32[$vararg_ptr27>>2] = $165;
        _AddLineQueueX(99505,$vararg_buffer24);
        break;
       }
      }
      $151 = HEAP8[(556)>>0]|0;
      $152 = $151&255;
      $153 = (15472 + ($152<<2)|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $info;
      $156 = ((($155)) + 20|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (0 - ($157))|0;
      HEAP32[$vararg_buffer20>>2] = $154;
      $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
      HEAP32[$vararg_ptr23>>2] = $158;
      _AddLineQueueX(99295,$vararg_buffer20);
     }
    }
   } while(0);
   $166 = $info;
   $167 = ((($166)) + 40|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = ($168&255) >>> 4;
   $170 = $169 & 1;
   $171 = ($170<<24>>24)!=(0);
   if ($171) {
    HEAP32[$vararg_buffer28>>2] = 28;
    _AddLineQueueX(99481,$vararg_buffer28);
    HEAP32[$vararg_buffer31>>2] = 9;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 81669;
    _AddLineQueueX(99516,$vararg_buffer31);
    $172 = HEAP8[(556)>>0]|0;
    $173 = $172&255;
    $174 = ($173|0)!=(0);
    $175 = $174 ? 17 : 9;
    HEAP32[$vararg_buffer35>>2] = 28;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = $175;
    _AddLineQueueX(99306,$vararg_buffer35);
   }
   $176 = $regist;
   $177 = ($176|0)!=(0|0);
   if ($177) {
    $178 = $regist;
    $179 = ((($178)) + 2|0);
    $regist = $179;
    $180 = HEAP16[$178>>1]|0;
    $181 = $180&65535;
    $cnt = $181;
    while(1) {
     $182 = $cnt;
     $183 = ($182|0)!=(0);
     if (!($183)) {
      break L1;
     }
     $184 = $regist;
     $185 = HEAP16[$184>>1]|0;
     $186 = $185&65535;
     HEAP32[$vararg_buffer39>>2] = $186;
     _AddLineQueueX(99481,$vararg_buffer39);
     $187 = $cnt;
     $188 = (($187) + -1)|0;
     $cnt = $188;
     $189 = $regist;
     $190 = ((($189)) + 2|0);
     $regist = $190;
    }
   }
  }
 } while(0);
 $191 = HEAP32[(560)>>2]|0;
 $192 = $191 >>> 11;
 $193 = $192 & 1;
 $194 = ($193|0)!=(0);
 do {
  if ($194) {
   $195 = HEAP8[87036>>0]|0;
   $196 = $195&255;
   $197 = ($196|0)!=(0);
   if ($197) {
    $198 = HEAP32[4884>>2]|0;
    $199 = ($198|0)==(0);
    if ($199) {
     $200 = HEAP32[13516>>2]|0;
     $201 = $info;
     $202 = ((($201)) + 36|0);
     HEAP32[$202>>2] = $200;
     break;
    } else {
     $203 = $info;
     $204 = ((($203)) + 36|0);
     $205 = HEAP32[$204>>2]|0;
     HEAP32[13516>>2] = $205;
     break;
    }
   }
  }
 } while(0);
 $206 = HEAP8[(6005)>>0]|0;
 $oldlinenumbers = $206;
 HEAP8[(6005)>>0] = 0;
 _RunLineQueue();
 $207 = $oldlinenumbers;
 HEAP8[(6005)>>0] = $207;
 $208 = HEAP32[(560)>>2]|0;
 $209 = $208 >>> 11;
 $210 = $209 & 1;
 $211 = ($210|0)!=(0);
 if ($211) {
  $212 = HEAP8[87036>>0]|0;
  $213 = $212&255;
  $214 = ($213|0)!=(0);
  $215 = HEAP32[4884>>2]|0;
  $216 = ($215>>>0)>(0);
  $or$cond7 = $214 & $216;
  if ($or$cond7) {
   $217 = HEAP32[13516>>2]|0;
   $218 = HEAP32[9080>>2]|0;
   $219 = ((($218)) + 8|0);
   HEAP32[$219>>2] = $217;
  }
 }
 $0 = 0;
 $220 = $0;
 STACKTOP = sp;return ($220|0);
}
function _write_userdef_prologue($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $curr = 0, $dir = 0, $flags = 0;
 var $i = 0, $info = 0, $is_exitm = 0, $len = 0, $or$cond = 0, $p = 0, $reglst = 0, $regs = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $is_exitm = sp + 800|0;
 $reglst = sp + 672|0;
 $buffer = sp + 72|0;
 $1 = $tokenarray;
 $2 = HEAP32[15488>>2]|0;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $flags = $4;
 $5 = HEAP32[4884>>2]|0;
 $6 = ($5>>>0)>(0);
 if ($6) {
  $7 = HEAP8[87036>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)!=(0);
  if ($9) {
   $0 = 0;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
 }
 $10 = HEAP32[15488>>2]|0;
 $11 = ((($10)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $info = $12;
 $13 = HEAP32[15488>>2]|0;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(7);
 $17 = HEAP32[(528)>>2]|0;
 $18 = ($17|0)==(2);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $flags = 0;
 }
 $19 = HEAP32[15488>>2]|0;
 $20 = ((($19)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(1);
 if ($22) {
  label = 9;
 } else {
  $23 = HEAP32[15488>>2]|0;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(2);
  if ($26) {
   label = 9;
  } else {
   $27 = HEAP32[15488>>2]|0;
   $28 = ((($27)) + 48|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(7);
   if ($30) {
    label = 9;
   }
  }
 }
 if ((label|0) == 9) {
  $31 = $flags;
  $32 = $31 | 16;
  $flags = $32;
 }
 $33 = HEAP32[15488>>2]|0;
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(130);
 $37 = $36 ? 32 : 0;
 $38 = $flags;
 $39 = $38 | $37;
 $flags = $39;
 $40 = HEAP32[15488>>2]|0;
 $41 = ((($40)) + 24|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = ($42&65535) >>> 7;
 $44 = $43 & 1;
 $45 = $44&255;
 $46 = $45&255;
 $47 = ($46|0)!=(0);
 $48 = $47 ? 0 : 64;
 $49 = $flags;
 $50 = $49 | $48;
 $flags = $50;
 $51 = $info;
 $52 = ((($51)) + 40|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = ($53&255) >>> 2;
 $55 = $54 & 1;
 $56 = $55&255;
 $57 = ($56|0)!=(0);
 $58 = $57 ? 128 : 0;
 $59 = $flags;
 $60 = $59 | $58;
 $flags = $60;
 $61 = HEAP32[(488)>>2]|0;
 $62 = (_SymFind($61)|0);
 $dir = $62;
 $63 = $dir;
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  $65 = $dir;
  $66 = ((($65)) + 16|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(9);
  if (!($68)) {
   $69 = $dir;
   $70 = ((($69)) + 28|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71&255) >>> 1;
   $73 = $72 & 1;
   $74 = $73&255;
   $75 = ($74|0)!=(1);
   if (!($75)) {
    $77 = HEAP8[(6081)>>0]|0;
    $78 = ($77<<24>>24)!=(0);
    if ($78) {
     (_printf(99421,$vararg_buffer)|0);
    }
    $p = $reglst;
    $79 = $info;
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)!=(0|0);
    L22: do {
     if ($81) {
      $82 = $info;
      $83 = HEAP32[$82>>2]|0;
      $regs = $83;
      $84 = $regs;
      $85 = ((($84)) + 2|0);
      $regs = $85;
      $86 = HEAP16[$84>>1]|0;
      $87 = $86&65535;
      $len = $87;
      while(1) {
       $88 = $len;
       $89 = ($88|0)!=(0);
       if (!($89)) {
        break L22;
       }
       $90 = $regs;
       $91 = HEAP16[$90>>1]|0;
       $92 = $91&65535;
       $93 = $p;
       (_GetResWName($92,$93)|0);
       $94 = $p;
       $95 = (_strlen($94)|0);
       $96 = $p;
       $97 = (($96) + ($95)|0);
       $p = $97;
       $98 = $len;
       $99 = ($98|0)>(1);
       if ($99) {
        $100 = $p;
        $101 = ((($100)) + 1|0);
        $p = $101;
        HEAP8[$100>>0] = 44;
       }
       $102 = $len;
       $103 = (($102) + -1)|0;
       $len = $103;
       $104 = $regs;
       $105 = ((($104)) + 2|0);
       $regs = $105;
      }
     }
    } while(0);
    $106 = $p;
    HEAP8[$106>>0] = 0;
    $107 = HEAP32[15488>>2]|0;
    $108 = ((($107)) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $flags;
    $111 = $info;
    $112 = ((($111)) + 16|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $info;
    $115 = ((($114)) + 20|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $info;
    $118 = ((($117)) + 24|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)!=(0|0);
    if ($120) {
     $121 = $info;
     $122 = ((($121)) + 24|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $123;
    } else {
     $124 = 109841;
    }
    HEAP32[$vararg_buffer2>>2] = $109;
    $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $110;
    $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $113;
    $vararg_ptr6 = ((($vararg_buffer2)) + 12|0);
    HEAP32[$vararg_ptr6>>2] = $116;
    $vararg_ptr7 = ((($vararg_buffer2)) + 16|0);
    HEAP32[$vararg_ptr7>>2] = $reglst;
    $vararg_ptr8 = ((($vararg_buffer2)) + 20|0);
    HEAP32[$vararg_ptr8>>2] = $124;
    (_sprintf($buffer,99443,$vararg_buffer2)|0);
    $125 = HEAP32[(616)>>2]|0;
    $126 = (($125) + 1)|0;
    $i = $126;
    $127 = $i;
    $128 = $1;
    $129 = (_Tokenize($buffer,$127,$128,1)|0);
    HEAP32[(616)>>2] = $129;
    $130 = $dir;
    $131 = $i;
    $132 = $1;
    (_RunMacro($130,$131,$132,$buffer,0,$is_exitm)|0);
    $133 = $i;
    $134 = (($133) - 1)|0;
    HEAP32[(616)>>2] = $134;
    $135 = HEAP32[4884>>2]|0;
    $136 = ($135|0)==(0);
    L34: do {
     if ($136) {
      $137 = (_atoi($buffer)|0);
      $138 = $info;
      $139 = ((($138)) + 20|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($137) - ($140))|0;
      $len = $141;
      $142 = $info;
      $143 = ((($142)) + 8|0);
      $144 = HEAP32[$143>>2]|0;
      $curr = $144;
      while(1) {
       $145 = $curr;
       $146 = ($145|0)!=(0|0);
       if (!($146)) {
        break L34;
       }
       $147 = $len;
       $148 = $curr;
       $149 = ((($148)) + 8|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($150) - ($147))|0;
       HEAP32[$149>>2] = $151;
       $152 = $curr;
       $153 = ((($152)) + 68|0);
       $154 = HEAP32[$153>>2]|0;
       $curr = $154;
      }
     }
    } while(0);
    $0 = 0;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
  }
 }
 $76 = (_EmitError(156)|0);
 $0 = $76;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _write_userdef_epilogue($flag_iret,$tokenarray) {
 $flag_iret = $flag_iret|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buffer = 0, $cnt = 0, $dir = 0, $flags = 0, $i = 0, $info = 0, $is_exitm = 0, $or$cond = 0, $p = 0, $reglst = 0, $regs = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $is_exitm = sp + 800|0;
 $reglst = sp + 672|0;
 $buffer = sp + 72|0;
 $1 = $flag_iret;
 $2 = $tokenarray;
 $3 = HEAP32[15488>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $flags = $5;
 $6 = HEAP32[(492)>>2]|0;
 $7 = (_SymFind($6)|0);
 $dir = $7;
 $8 = $dir;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $dir;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(9);
  if (!($13)) {
   $14 = $dir;
   $15 = ((($14)) + 28|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16&255) >>> 1;
   $18 = $17 & 1;
   $19 = $18&255;
   $20 = ($19|0)==(1);
   if (!($20)) {
    $23 = HEAP32[15488>>2]|0;
    $24 = ((($23)) + 60|0);
    $25 = HEAP32[$24>>2]|0;
    $info = $25;
    $26 = HEAP32[15488>>2]|0;
    $27 = ((($26)) + 48|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(7);
    $30 = HEAP32[(528)>>2]|0;
    $31 = ($30|0)==(2);
    $or$cond = $29 & $31;
    if ($or$cond) {
     $flags = 0;
    }
    $32 = HEAP32[15488>>2]|0;
    $33 = ((($32)) + 48|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(1);
    if ($35) {
     label = 10;
    } else {
     $36 = HEAP32[15488>>2]|0;
     $37 = ((($36)) + 48|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==(2);
     if ($39) {
      label = 10;
     } else {
      $40 = HEAP32[15488>>2]|0;
      $41 = ((($40)) + 48|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)==(7);
      if ($43) {
       label = 10;
      }
     }
    }
    if ((label|0) == 10) {
     $44 = $flags;
     $45 = $44 | 16;
     $flags = $45;
    }
    $46 = HEAP32[15488>>2]|0;
    $47 = ((($46)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(130);
    $50 = $49 ? 32 : 0;
    $51 = $flags;
    $52 = $51 | $50;
    $flags = $52;
    $53 = HEAP32[15488>>2]|0;
    $54 = ((($53)) + 24|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = ($55&65535) >>> 7;
    $57 = $56 & 1;
    $58 = $57&255;
    $59 = $58&255;
    $60 = ($59|0)!=(0);
    $61 = $60 ? 0 : 64;
    $62 = $flags;
    $63 = $62 | $61;
    $flags = $63;
    $64 = $info;
    $65 = ((($64)) + 40|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66&255) >>> 2;
    $68 = $67 & 1;
    $69 = $68&255;
    $70 = ($69|0)!=(0);
    $71 = $70 ? 128 : 0;
    $72 = $flags;
    $73 = $72 | $71;
    $flags = $73;
    $74 = $1;
    $75 = $74&255;
    $76 = ($75|0)!=(0);
    $77 = $76 ? 256 : 0;
    $78 = $flags;
    $79 = $78 | $77;
    $flags = $79;
    $p = $reglst;
    $80 = $info;
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)!=(0|0);
    L14: do {
     if ($82) {
      $83 = $info;
      $84 = HEAP32[$83>>2]|0;
      $85 = HEAP16[$84>>1]|0;
      $86 = $85&65535;
      $cnt = $86;
      $87 = $info;
      $88 = HEAP32[$87>>2]|0;
      $89 = $cnt;
      $90 = (($88) + ($89<<1)|0);
      $regs = $90;
      while(1) {
       $91 = $cnt;
       $92 = ($91|0)!=(0);
       if (!($92)) {
        break L14;
       }
       $93 = $regs;
       $94 = HEAP16[$93>>1]|0;
       $95 = $94&65535;
       $96 = $p;
       (_GetResWName($95,$96)|0);
       $97 = $p;
       $98 = (_strlen($97)|0);
       $99 = $p;
       $100 = (($99) + ($98)|0);
       $p = $100;
       $101 = $cnt;
       $102 = ($101|0)!=(1);
       if ($102) {
        $103 = $p;
        $104 = ((($103)) + 1|0);
        $p = $104;
        HEAP8[$103>>0] = 44;
       }
       $105 = $regs;
       $106 = ((($105)) + -2|0);
       $regs = $106;
       $107 = $cnt;
       $108 = (($107) + -1)|0;
       $cnt = $108;
      }
     }
    } while(0);
    $109 = $p;
    HEAP8[$109>>0] = 0;
    $110 = HEAP32[15488>>2]|0;
    $111 = ((($110)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $flags;
    $114 = $info;
    $115 = ((($114)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $info;
    $118 = ((($117)) + 20|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $info;
    $121 = ((($120)) + 24|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)!=(0|0);
    if ($123) {
     $124 = $info;
     $125 = ((($124)) + 24|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126;
    } else {
     $127 = 109841;
    }
    HEAP32[$vararg_buffer2>>2] = $112;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $113;
    $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
    HEAP32[$vararg_ptr6>>2] = $116;
    $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
    HEAP32[$vararg_ptr7>>2] = $119;
    $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
    HEAP32[$vararg_ptr8>>2] = $reglst;
    $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
    HEAP32[$vararg_ptr9>>2] = $127;
    (_sprintf($buffer,99364,$vararg_buffer2)|0);
    $128 = HEAP32[(616)>>2]|0;
    $129 = (($128) + 1)|0;
    $i = $129;
    $130 = $i;
    $131 = $2;
    (_Tokenize($buffer,$130,$131,1)|0);
    $132 = HEAP8[(6081)>>0]|0;
    $133 = ($132<<24>>24)!=(0);
    if ($133) {
     (_printf(99399,$vararg_buffer10)|0);
    }
    $134 = $dir;
    $135 = $i;
    $136 = $2;
    (_RunMacro($134,$135,$136,0,0,$is_exitm)|0);
    $137 = $i;
    $138 = (($137) - 1)|0;
    HEAP32[(616)>>2] = $138;
    $0 = 0;
    $139 = $0;
    STACKTOP = sp;return ($139|0);
   }
  }
 }
 $21 = HEAP32[(492)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $21;
 $22 = (_EmitErr(157,$vararg_buffer)|0);
 $0 = $22;
 $139 = $0;
 STACKTOP = sp;return ($139|0);
}
function _write_default_epilogue() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $resstack = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer = sp;
 $resstack = 0;
 $0 = HEAP32[15488>>2]|0;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $info = $2;
 $3 = $info;
 $4 = ((($3)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5&255) >>> 6;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)!=(0);
 if ($8) {
  $9 = HEAP32[(560)>>2]|0;
  $10 = $9 >>> 17;
  $11 = $10 & 1;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   STACKTOP = sp;return;
  }
  $13 = $info;
  _write_win64_default_epilogue($13);
  STACKTOP = sp;return;
 }
 $14 = HEAP8[(556)>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(2);
 $17 = HEAP32[(528)>>2]|0;
 $18 = ($17|0)==(2);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $19 = HEAP8[((((564)) + 1|0))>>0]|0;
  $20 = $19&255;
  $21 = $20 & 2;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = HEAP32[15504>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $resstack = $25;
   $26 = HEAP8[(556)>>0]|0;
   $27 = $26&255;
   $28 = (15472 + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $info;
   $31 = ((($30)) + 20|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[15504>>2]|0;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer>>2] = $29;
   $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $32;
   $vararg_ptr7 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $35;
   _AddLineQueueX(99266,$vararg_buffer);
  }
 }
 $36 = HEAP32[15488>>2]|0;
 $37 = ((($36)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 _pop_register($39);
 $40 = $info;
 $41 = ((($40)) + 40|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42&255) >>> 4;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)!=(0);
 if ($45) {
  HEAP32[$vararg_buffer8>>2] = 28;
  _AddLineQueueX(99282,$vararg_buffer8);
 }
 $46 = $info;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if ($49) {
  $50 = $info;
  $51 = ((($50)) + 40|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52&255) >>> 5;
  $54 = $53 & 1;
  $55 = $54&255;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $info;
   $58 = ((($57)) + 40|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 & 1;
   $61 = $60&255;
   $62 = ($61|0)==(0);
   $63 = $resstack;
   $64 = ($63|0)==(0);
   $or$cond3 = $62 & $64;
   if ($or$cond3) {
    $65 = $info;
    $66 = ((($65)) + 40|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ($67&255) >>> 3;
    $69 = $68 & 1;
    $70 = $69&255;
    $71 = ($70|0)==(0);
    if ($71) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $72 = $info;
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if (!($75)) {
  $76 = $info;
  $77 = ((($76)) + 40|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ($78&255) >>> 5;
  $80 = $79 & 1;
  $81 = $80&255;
  $82 = ($81|0)!=(0);
  if (!($82)) {
   $83 = $info;
   $84 = ((($83)) + 40|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85 & 1;
   $87 = $86&255;
   $88 = ($87|0)!=(0);
   if (!($88)) {
    $89 = $info;
    $90 = ((($89)) + 40|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = ($91&255) >>> 3;
    $93 = $92 & 1;
    $94 = $93&255;
    $95 = ($94|0)!=(0);
    if (!($95)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $96 = $info;
 $97 = ((($96)) + 40|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = ($98&255) >>> 1;
 $100 = $99 & 1;
 $101 = ($100<<24>>24)!=(0);
 if ($101) {
  _AddLineQueue(99289);
  STACKTOP = sp;return;
 }
 $102 = $info;
 $103 = ((($102)) + 40|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = ($104&255) >>> 7;
 $106 = ($105<<24>>24)!=(0);
 if (!($106)) {
  $127 = $info;
  $128 = ((($127)) + 20|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($129|0)!=(0);
  if ($130) {
   $131 = HEAP8[(556)>>0]|0;
   $132 = $131&255;
   $133 = (15472 + ($132<<2)|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $info;
   $136 = ((($135)) + 42|0);
   $137 = HEAP16[$136>>1]|0;
   $138 = $137&65535;
   HEAP32[$vararg_buffer15>>2] = $134;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $138;
   _AddLineQueueX(99306,$vararg_buffer15);
  }
  $139 = $info;
  $140 = ((($139)) + 42|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141&65535;
  HEAP32[$vararg_buffer19>>2] = $142;
  _AddLineQueueX(99282,$vararg_buffer19);
  STACKTOP = sp;return;
 }
 $107 = HEAP8[(556)>>0]|0;
 $108 = $107&255;
 $109 = ($108|0)==(2);
 $110 = HEAP32[(528)>>2]|0;
 $111 = ($110|0)==(2);
 $or$cond5 = $109 & $111;
 if ($or$cond5) {
  $112 = HEAP8[((((564)) + 1|0))>>0]|0;
  $113 = $112&255;
  $114 = $113 & 2;
  $115 = ($114|0)!=(0);
  if ($115) {
   STACKTOP = sp;return;
  }
 }
 $116 = $info;
 $117 = ((($116)) + 20|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0);
 if (!($119)) {
  STACKTOP = sp;return;
 }
 $120 = HEAP8[(556)>>0]|0;
 $121 = $120&255;
 $122 = (15472 + ($121<<2)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $info;
 $125 = ((($124)) + 20|0);
 $126 = HEAP32[$125>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $123;
 $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $126;
 _AddLineQueueX(99295,$vararg_buffer11);
 STACKTOP = sp;return;
}
function _ms32_pcheck($proc,$paranode,$used) {
 $proc = $proc|0;
 $paranode = $paranode|0;
 $used = $used|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $regname = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $regname = sp + 24|0;
 $1 = $proc;
 $2 = $paranode;
 $3 = $used;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 28|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $2;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_SizeFromMemtype($6,$10,$13)|0);
 $size = $14;
 $15 = $size;
 $16 = HEAP8[(558)>>0]|0;
 $17 = $16&255;
 $18 = ($15|0)>($17|0);
 if (!($18)) {
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP8[(556)>>0]|0;
  $22 = $21&255;
  $23 = (15600 + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($20|0)>=($24|0);
  if (!($25)) {
   $26 = $2;
   $27 = ((($26)) + 16|0);
   HEAP32[$27>>2] = 10;
   $28 = HEAP8[(556)>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)!=(0);
   $31 = $3;
   $32 = HEAP32[$31>>2]|0;
   if ($30) {
    $33 = (15608 + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $38 = $34;
   } else {
    $35 = (15616 + ($32<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $38 = $36;
   }
   $37 = $38&65535;
   $39 = $2;
   $40 = ((($39)) + 32|0);
   HEAP16[$40>>1] = $37;
   $41 = HEAP8[(556)>>0]|0;
   $42 = $41&255;
   $43 = ($42|0)!=(0);
   $44 = $3;
   $45 = HEAP32[$44>>2]|0;
   if ($43) {
    $46 = (15608 + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $50 = $47;
   } else {
    $48 = (15616 + ($45<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49;
   }
   (_GetResWName($50,$regname)|0);
   $51 = (_strlen($regname)|0);
   $52 = (($51) + 1)|0;
   $53 = (_LclAlloc($52)|0);
   $54 = $2;
   $55 = ((($54)) + 8|0);
   HEAP32[$55>>2] = $53;
   $56 = $2;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   (_strcpy($58,$regname)|0);
   $59 = $3;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$59>>2] = $61;
   $0 = 1;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $0 = 0;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _ms32_return($proc,$buffer) {
 $proc = $proc|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $buffer;
 $2 = $0;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP8[(556)>>0]|0;
 $8 = $7&255;
 $9 = (15600 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP8[(558)>>0]|0;
 $12 = $11&255;
 $13 = Math_imul($10, $12)|0;
 $14 = ($6>>>0)>($13>>>0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $1;
 $16 = $1;
 $17 = (_strlen($16)|0);
 $18 = (($15) + ($17)|0);
 $19 = $0;
 $20 = ((($19)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP8[(556)>>0]|0;
 $25 = $24&255;
 $26 = (15600 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP8[(558)>>0]|0;
 $29 = $28&255;
 $30 = Math_imul($27, $29)|0;
 $31 = (($23) - ($30))|0;
 $32 = HEAP8[(548)>>0]|0;
 $33 = $32&255;
 $34 = ($33|0)!=(10);
 $35 = $34 ? 116 : 0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $35;
 (_sprintf($18,99157,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _watc_pcheck($proc,$paranode,$used) {
 $proc = $proc|0;
 $paranode = $paranode|0;
 $used = $used|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $Ofssize = 0, $firstreg = 0, $newflg = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $shift = 0, $size = 0, $vararg_buffer = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $proc;
 $2 = $paranode;
 $3 = $used;
 $4 = $1;
 $5 = (_GetSymOfssize($4)|0);
 $6 = $5&255;
 $Ofssize = $6;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 28|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $2;
 $15 = ((($14)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_SizeFromMemtype($9,$13,$16)|0);
 $size = $17;
 $18 = $1;
 $19 = ((($18)) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 40|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 1;
 $24 = ($23<<24>>24)!=(0);
 if ($24) {
  $0 = 0;
  $160 = $0;
  STACKTOP = sp;return ($160|0);
 }
 $25 = $size;
 $26 = ($25|0)!=(1);
 $27 = $size;
 $28 = ($27|0)!=(2);
 $or$cond = $26 & $28;
 $29 = $size;
 $30 = ($29|0)!=(4);
 $or$cond3 = $or$cond & $30;
 $31 = $size;
 $32 = ($31|0)!=(8);
 $or$cond5 = $or$cond3 & $32;
 if ($or$cond5) {
  $0 = 0;
  $160 = $0;
  STACKTOP = sp;return ($160|0);
 }
 $33 = $size;
 $34 = ($33|0)==(8);
 do {
  if ($34) {
   $35 = $Ofssize;
   $36 = $35&255;
   $37 = ($36|0)!=(0);
   $38 = $37 ? 3 : 15;
   $newflg = $38;
   $39 = $Ofssize;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   $42 = $41 ? 2 : 4;
   $shift = $42;
  } else {
   $43 = $size;
   $44 = ($43|0)==(4);
   if ($44) {
    $45 = $Ofssize;
    $46 = $45&255;
    $47 = ($46|0)==(0);
    if ($47) {
     $newflg = 3;
     $shift = 2;
     break;
    }
   }
   $newflg = 1;
   $shift = 1;
  }
 } while(0);
 $firstreg = 0;
 while(1) {
  $48 = $firstreg;
  $49 = ($48|0)<(4);
  if (!($49)) {
   break;
  }
  $50 = $newflg;
  $51 = $3;
  $52 = HEAP32[$51>>2]|0;
  $53 = $50 & $52;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   break;
  }
  $55 = $shift;
  $56 = $newflg;
  $57 = $56 << $55;
  $newflg = $57;
  $58 = $shift;
  $59 = $firstreg;
  $60 = (($59) + ($58))|0;
  $firstreg = $60;
 }
 $61 = $firstreg;
 $62 = ($61|0)>=(4);
 if ($62) {
  $0 = 0;
  $160 = $0;
  STACKTOP = sp;return ($160|0);
 }
 $63 = $2;
 $64 = ((($63)) + 16|0);
 HEAP32[$64>>2] = 10;
 $65 = $size;
 L26: do {
  switch ($65|0) {
  case 1:  {
   $66 = $firstreg;
   $67 = (15536 + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68&65535;
   $70 = $2;
   $71 = ((($70)) + 32|0);
   HEAP16[$71>>1] = $69;
   break;
  }
  case 2:  {
   $72 = $firstreg;
   $73 = (15552 + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74&65535;
   $76 = $2;
   $77 = ((($76)) + 32|0);
   HEAP16[$77>>1] = $75;
   break;
  }
  case 4:  {
   $78 = $Ofssize;
   $79 = ($78<<24>>24)!=(0);
   $80 = $firstreg;
   if ($79) {
    $81 = (15568 + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82&65535;
    $84 = $2;
    $85 = ((($84)) + 32|0);
    HEAP16[$85>>1] = $83;
    break L26;
   } else {
    $86 = (15552 + ($80<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $87&65535;
    $89 = $2;
    $90 = ((($89)) + 32|0);
    HEAP16[$90>>1] = $88;
    $91 = $firstreg;
    $92 = (($91) + 1)|0;
    $93 = (15552 + ($92<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94&65535;
    $96 = $2;
    $97 = ((($96)) + 32|0);
    $98 = ((($97)) + 2|0);
    HEAP16[$98>>1] = $95;
    break L26;
   }
   break;
  }
  case 8:  {
   $99 = $Ofssize;
   $100 = ($99<<24>>24)!=(0);
   if ($100) {
    $101 = $firstreg;
    $102 = (15568 + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $103&65535;
    $105 = $2;
    $106 = ((($105)) + 32|0);
    HEAP16[$106>>1] = $104;
    $107 = $firstreg;
    $108 = (($107) + 1)|0;
    $109 = (15568 + ($108<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110&65535;
    $112 = $2;
    $113 = ((($112)) + 32|0);
    $114 = ((($113)) + 2|0);
    HEAP16[$114>>1] = $111;
    break L26;
   }
   $firstreg = 0;
   HEAP8[99163>>0] = 0;
   while(1) {
    $115 = $firstreg;
    $116 = ($115|0)<(4);
    if (!($116)) {
     break L26;
    }
    $117 = $firstreg;
    $118 = (15584 + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (_strlen(99163)|0);
    $121 = (99163 + ($120)|0);
    (_GetResWName($119,$121)|0);
    $122 = $firstreg;
    $123 = ($122|0)!=(3);
    if ($123) {
     (_strcat(99163,109806)|0);
    }
    $124 = $firstreg;
    $125 = (($124) + 1)|0;
    $firstreg = $125;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $126 = $2;
 $127 = ((($126)) + 32|0);
 $128 = ((($127)) + 2|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = ($129<<16>>16)!=(0);
 $131 = $2;
 $132 = ((($131)) + 32|0);
 if ($130) {
  $133 = ((($132)) + 2|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134&65535;
  $136 = (_GetResWName($135,99227)|0);
  $137 = $2;
  $138 = ((($137)) + 32|0);
  $139 = HEAP16[$138>>1]|0;
  $140 = $139&65535;
  $141 = (_GetResWName($140,0)|0);
  HEAP32[$vararg_buffer>>2] = $136;
  $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $141;
  (_sprintf(99163,99259,$vararg_buffer)|0);
 } else {
  $142 = HEAP16[$132>>1]|0;
  $143 = ($142<<16>>16)!=(0);
  if ($143) {
   $144 = $2;
   $145 = ((($144)) + 32|0);
   $146 = HEAP16[$145>>1]|0;
   $147 = $146&65535;
   (_GetResWName($147,99163)|0);
  }
 }
 $148 = $newflg;
 $149 = $3;
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 | $148;
 HEAP32[$149>>2] = $151;
 $152 = (_strlen(99163)|0);
 $153 = (($152) + 1)|0;
 $154 = (_LclAlloc($153)|0);
 $155 = $2;
 $156 = ((($155)) + 8|0);
 HEAP32[$156>>2] = $154;
 $157 = $2;
 $158 = ((($157)) + 8|0);
 $159 = HEAP32[$158>>2]|0;
 (_strcpy($159,99163)|0);
 $0 = 1;
 $160 = $0;
 STACKTOP = sp;return ($160|0);
}
function _watc_return($proc,$buffer) {
 $proc = $proc|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $proc;
 $1 = $buffer;
 $2 = HEAP8[(558)>>0]|0;
 $3 = $2&255;
 $4 = $3<<2;
 $value = $4;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = $10&255;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $value;
 $19 = ($17>>>0)>($18>>>0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 $21 = $1;
 $22 = (_strlen($21)|0);
 $23 = (($20) + ($22)|0);
 $24 = $0;
 $25 = ((($24)) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $value;
 $30 = (($28) - ($29))|0;
 $31 = HEAP8[(548)>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)!=(10);
 $34 = $33 ? 116 : 0;
 HEAP32[$vararg_buffer>>2] = $30;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $34;
 (_sprintf($23,99157,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _ms64_pcheck($proc,$paranode,$used) {
 $proc = $proc|0;
 $paranode = $paranode|0;
 $used = $used|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $paranode;
 $2 = $used;
 STACKTOP = sp;return 0;
}
function _ms64_return($proc,$buffer) {
 $proc = $proc|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $buffer;
 STACKTOP = sp;return;
}
function _write_win64_default_epilogue($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $i = 0;
 var $regs = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $info;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $0;
   $5 = HEAP32[$4>>2]|0;
   $regs = $5;
   $6 = $regs;
   $7 = ((($6)) + 2|0);
   $regs = $7;
   $8 = HEAP16[$6>>1]|0;
   $9 = $8&65535;
   $cnt = $9;
   $i = 0;
   while(1) {
    $10 = $cnt;
    $11 = ($10|0)!=(0);
    if (!($11)) {
     break;
    }
    $12 = $regs;
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    $15 = (15660 + (($14*12)|0)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 32;
    $18 = ($17|0)!=(0);
    if ($18) {
     $19 = $i;
     $20 = (($19) + 1)|0;
     $i = $20;
    }
    $21 = $cnt;
    $22 = (($21) + -1)|0;
    $cnt = $22;
    $23 = $regs;
    $24 = ((($23)) + 2|0);
    $regs = $24;
   }
   $25 = $i;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $0;
    $28 = ((($27)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $i;
    $31 = $30<<4;
    $32 = (($29) - ($31))|0;
    $33 = $32 & -16;
    $i = $33;
    $34 = $0;
    $35 = HEAP32[$34>>2]|0;
    $regs = $35;
    $36 = $regs;
    $37 = ((($36)) + 2|0);
    $regs = $37;
    $38 = HEAP16[$36>>1]|0;
    $39 = $38&65535;
    $cnt = $39;
    while(1) {
     $40 = $cnt;
     $41 = ($40|0)!=(0);
     if (!($41)) {
      break L1;
     }
     $42 = $regs;
     $43 = HEAP16[$42>>1]|0;
     $44 = $43&65535;
     $45 = (15660 + (($44*12)|0)|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = $46 & 32;
     $48 = ($47|0)!=(0);
     if ($48) {
      $49 = HEAP8[((((564)) + 1|0))>>0]|0;
      $50 = $49&255;
      $51 = $50 & 2;
      $52 = ($51|0)!=(0);
      $53 = $regs;
      $54 = HEAP16[$53>>1]|0;
      $55 = $54&65535;
      $56 = HEAP8[(556)>>0]|0;
      $57 = $56&255;
      $58 = (15472 + ($57<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $i;
      if ($52) {
       $61 = HEAP32[15504>>2]|0;
       $62 = ((($61)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       HEAP32[$vararg_buffer>>2] = $55;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $59;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $60;
       $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
       HEAP32[$vararg_ptr3>>2] = $63;
       _AddLineQueueX(99317,$vararg_buffer);
      } else {
       HEAP32[$vararg_buffer4>>2] = $55;
       $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
       HEAP32[$vararg_ptr7>>2] = $59;
       $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
       HEAP32[$vararg_ptr8>>2] = $60;
       _AddLineQueueX(99343,$vararg_buffer4);
      }
      $64 = $i;
      $65 = (($64) + 16)|0;
      $i = $65;
     }
     $66 = $cnt;
     $67 = (($66) + -1)|0;
     $cnt = $67;
     $68 = $regs;
     $69 = ((($68)) + 2|0);
     $regs = $69;
    }
   }
  }
 } while(0);
 $70 = HEAP32[(528)>>2]|0;
 $71 = ($70|0)==(2);
 if ($71) {
  $72 = HEAP8[((((564)) + 1|0))>>0]|0;
  $73 = $72&255;
  $74 = $73 & 2;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = HEAP8[(556)>>0]|0;
   $77 = $76&255;
   $78 = (15472 + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $0;
   $81 = ((($80)) + 20|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = HEAP32[15504>>2]|0;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $79;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $82;
   $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
   HEAP32[$vararg_ptr13>>2] = $85;
   _AddLineQueueX(99266,$vararg_buffer9);
  } else {
   label = 19;
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $86 = HEAP8[(556)>>0]|0;
  $87 = $86&255;
  $88 = (15472 + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $0;
  $91 = ((($90)) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $89;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $92;
  _AddLineQueueX(99295,$vararg_buffer14);
 }
 $93 = HEAP32[15488>>2]|0;
 $94 = ((($93)) + 60|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = HEAP32[$95>>2]|0;
 _pop_register($96);
 $97 = $0;
 $98 = ((($97)) + 42|0);
 $99 = HEAP16[$98>>1]|0;
 $100 = $99&65535;
 $101 = (15660 + (($100*12)|0)|0);
 $102 = ((($101)) + 10|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = ($104|0)!=(4);
 if (!($105)) {
  STACKTOP = sp;return;
 }
 $106 = $0;
 $107 = ((($106)) + 16|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0);
 if (!($109)) {
  $110 = $0;
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   STACKTOP = sp;return;
  }
 }
 $114 = $0;
 $115 = ((($114)) + 42|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 HEAP32[$vararg_buffer18>>2] = $117;
 _AddLineQueueX(99282,$vararg_buffer18);
 STACKTOP = sp;return;
}
function _pop_register($regist) {
 $regist = $regist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $regist;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $cnt = $5;
 $6 = $cnt;
 $7 = $0;
 $8 = (($7) + ($6<<1)|0);
 $0 = $8;
 while(1) {
  $9 = $cnt;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (15660 + (($13*12)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 32;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   $18 = $0;
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   HEAP32[$vararg_buffer>>2] = $20;
   _AddLineQueueX(99282,$vararg_buffer);
  }
  $21 = $cnt;
  $22 = (($21) + -1)|0;
  $cnt = $22;
  $23 = $0;
  $24 = ((($23)) + -2|0);
  $0 = $24;
 }
 STACKTOP = sp;return;
}
function _write_win64_default_prologue($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $cnt1 = 0, $cntxmm = 0, $i = 0, $ppfmt = 0, $regist = 0, $resstack = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer36 = 0, $vararg_buffer42 = 0, $vararg_buffer47 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0;
 var $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer52 = sp + 144|0;
 $vararg_buffer47 = sp + 128|0;
 $vararg_buffer42 = sp + 112|0;
 $vararg_buffer36 = sp + 96|0;
 $vararg_buffer30 = sp + 80|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $info;
 $1 = HEAP8[((((564)) + 1|0))>>0]|0;
 $2 = $1&255;
 $3 = $2 & 2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[15504>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7;
 } else {
  $8 = 0;
 }
 $resstack = $8;
 $9 = HEAP8[((((564)) + 1|0))>>0]|0;
 $10 = $9&255;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  _win64_SaveRegParams($13);
 }
 $14 = $0;
 $15 = ((($14)) + 40|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16&255) >>> 7;
 $18 = $17&255;
 $19 = ($18|0)!=(0);
 do {
  if (!($19)) {
   $20 = $0;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $0;
    $25 = ((($24)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     break;
    }
   }
   $28 = $0;
   $29 = ((($28)) + 42|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   HEAP32[$vararg_buffer>>2] = $31;
   _AddLineQueueX(99481,$vararg_buffer);
   $32 = $0;
   $33 = ((($32)) + 42|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   HEAP32[$vararg_buffer1>>2] = 336;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $35;
   _AddLineQueueX(99560,$vararg_buffer1);
   $36 = $0;
   $37 = ((($36)) + 42|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   HEAP32[$vararg_buffer5>>2] = $39;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = 103;
   _AddLineQueueX(99306,$vararg_buffer5);
   $40 = $0;
   $41 = ((($40)) + 42|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42&65535;
   HEAP32[$vararg_buffer9>>2] = 339;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $43;
   _AddLineQueueX(99566,$vararg_buffer9);
  }
 } while(0);
 $cntxmm = 0;
 $44 = $0;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)!=(0|0);
 L13: do {
  if ($46) {
   $47 = $0;
   $48 = HEAP32[$47>>2]|0;
   $regist = $48;
   $49 = $regist;
   $50 = ((($49)) + 2|0);
   $regist = $50;
   $51 = HEAP16[$49>>1]|0;
   $52 = $51&65535;
   $cnt = $52;
   while(1) {
    $53 = $cnt;
    $54 = ($53|0)!=(0);
    if (!($54)) {
     break L13;
    }
    $55 = $regist;
    $56 = HEAP16[$55>>1]|0;
    $57 = $56&65535;
    $58 = (15660 + (($57*12)|0)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 32;
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $cntxmm;
     $63 = (($62) + 1)|0;
     $cntxmm = $63;
    } else {
     $64 = $regist;
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     HEAP32[$vararg_buffer13>>2] = $66;
     _AddLineQueueX(99481,$vararg_buffer13);
     $67 = $regist;
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = (15660 + (($69*12)|0)|0);
     $71 = ((($70)) + 10|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = 1 << $73;
     $75 = $74 & 61672;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = $regist;
      $78 = HEAP16[$77>>1]|0;
      $79 = $78&65535;
      HEAP32[$vararg_buffer16>>2] = 336;
      $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
      HEAP32[$vararg_ptr19>>2] = $79;
      _AddLineQueueX(99560,$vararg_buffer16);
     }
    }
    $80 = $cnt;
    $81 = (($80) + -1)|0;
    $cnt = $81;
    $82 = $regist;
    $83 = ((($82)) + 2|0);
    $regist = $83;
   }
  }
 } while(0);
 $84 = $0;
 $85 = ((($84)) + 20|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $resstack;
 $88 = (($86) + ($87))|0;
 $89 = ($88|0)!=(0);
 if (!($89)) {
  HEAP32[$vararg_buffer52>>2] = 334;
  _AddLineQueueX(99639,$vararg_buffer52);
  STACKTOP = sp;return;
 }
 $90 = $resstack;
 $91 = ($90|0)!=(0);
 $92 = $91 ? 15644 : 15652;
 $ppfmt = $92;
 $93 = $ppfmt;
 $94 = HEAP32[$93>>2]|0;
 $95 = $0;
 $96 = ((($95)) + 20|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[15504>>2]|0;
 $99 = ((($98)) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 HEAP32[$vararg_buffer20>>2] = 103;
 $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
 HEAP32[$vararg_ptr23>>2] = $97;
 $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
 HEAP32[$vararg_ptr24>>2] = $100;
 _AddLineQueueX($94,$vararg_buffer20);
 $101 = $ppfmt;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $0;
 $105 = ((($104)) + 20|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[15504>>2]|0;
 $108 = ((($107)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$vararg_buffer25>>2] = 333;
 $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
 HEAP32[$vararg_ptr28>>2] = $106;
 $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
 HEAP32[$vararg_ptr29>>2] = $109;
 _AddLineQueueX($103,$vararg_buffer25);
 $110 = $cntxmm;
 $111 = ($110|0)!=(0);
 if (!($111)) {
  HEAP32[$vararg_buffer52>>2] = 334;
  _AddLineQueueX(99639,$vararg_buffer52);
  STACKTOP = sp;return;
 }
 $112 = $0;
 $113 = HEAP32[$112>>2]|0;
 $regist = $113;
 $114 = $0;
 $115 = ((($114)) + 20|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $cntxmm;
 $118 = $117<<4;
 $119 = (($116) - ($118))|0;
 $120 = $119 & -16;
 $i = $120;
 $121 = $regist;
 $122 = ((($121)) + 2|0);
 $regist = $122;
 $123 = HEAP16[$121>>1]|0;
 $124 = $123&65535;
 $cnt1 = $124;
 while(1) {
  $125 = $cnt1;
  $126 = ($125|0)!=(0);
  if (!($126)) {
   break;
  }
  $127 = $regist;
  $128 = HEAP16[$127>>1]|0;
  $129 = $128&65535;
  $130 = (15660 + (($129*12)|0)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $131 & 32;
  $133 = ($132|0)!=(0);
  if ($133) {
   $134 = $resstack;
   $135 = ($134|0)!=(0);
   $136 = $i;
   if ($135) {
    $137 = HEAP32[15504>>2]|0;
    $138 = ((($137)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $regist;
    $141 = HEAP16[$140>>1]|0;
    $142 = $141&65535;
    HEAP32[$vararg_buffer30>>2] = 103;
    $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
    HEAP32[$vararg_ptr33>>2] = $136;
    $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
    HEAP32[$vararg_ptr34>>2] = $139;
    $vararg_ptr35 = ((($vararg_buffer30)) + 12|0);
    HEAP32[$vararg_ptr35>>2] = $142;
    _AddLineQueueX(99575,$vararg_buffer30);
    $143 = $regist;
    $144 = HEAP16[$143>>1]|0;
    $145 = $144&65535;
    $146 = (15660 + (($145*12)|0)|0);
    $147 = ((($146)) + 10|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = 1 << $149;
    $151 = $150 & 65472;
    $152 = ($151|0)!=(0);
    if ($152) {
     $153 = $regist;
     $154 = HEAP16[$153>>1]|0;
     $155 = $154&65535;
     $156 = $i;
     $157 = HEAP32[15504>>2]|0;
     $158 = ((($157)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     HEAP32[$vararg_buffer36>>2] = 338;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = $155;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = $156;
     $vararg_ptr41 = ((($vararg_buffer36)) + 12|0);
     HEAP32[$vararg_ptr41>>2] = $159;
     _AddLineQueueX(99597,$vararg_buffer36);
    }
   } else {
    $160 = $regist;
    $161 = HEAP16[$160>>1]|0;
    $162 = $161&65535;
    HEAP32[$vararg_buffer42>>2] = 103;
    $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
    HEAP32[$vararg_ptr45>>2] = $136;
    $vararg_ptr46 = ((($vararg_buffer42)) + 8|0);
    HEAP32[$vararg_ptr46>>2] = $162;
    _AddLineQueueX(99610,$vararg_buffer42);
    $163 = $regist;
    $164 = HEAP16[$163>>1]|0;
    $165 = $164&65535;
    $166 = (15660 + (($165*12)|0)|0);
    $167 = ((($166)) + 10|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = 1 << $169;
    $171 = $170 & 65472;
    $172 = ($171|0)!=(0);
    if ($172) {
     $173 = $regist;
     $174 = HEAP16[$173>>1]|0;
     $175 = $174&65535;
     $176 = $i;
     HEAP32[$vararg_buffer47>>2] = 338;
     $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
     HEAP32[$vararg_ptr50>>2] = $175;
     $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
     HEAP32[$vararg_ptr51>>2] = $176;
     _AddLineQueueX(99629,$vararg_buffer47);
    }
   }
   $177 = $i;
   $178 = (($177) + 16)|0;
   $i = $178;
  }
  $179 = $cnt1;
  $180 = (($179) + -1)|0;
  $cnt1 = $180;
  $181 = $regist;
  $182 = ((($181)) + 2|0);
  $regist = $182;
 }
 HEAP32[$vararg_buffer52>>2] = 334;
 _AddLineQueueX(99639,$vararg_buffer52);
 STACKTOP = sp;return;
}
function _win64_SaveRegParams($info) {
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $param = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $info;
 $i = 0;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $param = $3;
 while(1) {
  $4 = $param;
  $5 = ($4|0)!=(0|0);
  $6 = $i;
  $7 = ($6|0)<(4);
  $8 = $5 ? $7 : 0;
  if (!($8)) {
   break;
  }
  $9 = $param;
  $10 = ((($9)) + 28|0);
  $11 = ((($10)) + 3|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12&255) >>> 5;
  $14 = $13 & 1;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $param;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 32;
   $21 = ($20|0)!=(0);
   $22 = $i;
   $23 = $22<<3;
   $24 = (8 + ($23))|0;
   $25 = $i;
   if ($21) {
    $26 = (40 + ($25))|0;
    HEAP32[$vararg_buffer>>2] = 103;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $26;
    _AddLineQueueX(99527,$vararg_buffer);
   } else {
    $27 = (15628 + ($25<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$vararg_buffer3>>2] = 103;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $28;
    _AddLineQueueX(99544,$vararg_buffer3);
   }
   $29 = $param;
   $30 = ((($29)) + 68|0);
   $31 = HEAP32[$30>>2]|0;
   $param = $31;
  } else {
   $32 = $i;
   $33 = $32<<3;
   $34 = (8 + ($33))|0;
   $35 = $i;
   $36 = (15628 + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer8>>2] = 103;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $34;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $37;
   _AddLineQueueX(99544,$vararg_buffer8);
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 STACKTOP = sp;return;
}
function _WriteSEHData($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $i = 0, $olddotname = 0, $pfx = 0, $segname = 0, $segnamebuff = 0, $simplespec = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer57 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr28 = 0;
 var $vararg_ptr35 = 0, $vararg_ptr4 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr60 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $xdata = 0, $xdataofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer57 = sp + 160|0;
 $vararg_buffer48 = sp + 128|0;
 $vararg_buffer43 = sp + 112|0;
 $vararg_buffer39 = sp + 104|0;
 $vararg_buffer36 = sp + 96|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $segnamebuff = sp + 328|0;
 $buffer = sp + 200|0;
 $0 = $proc;
 $segname = 99659;
 $xdataofs = 0;
 $1 = HEAP8[99152>>0]|0;
 $2 = $1&255;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  (_EmitErr(259,$vararg_buffer)|0);
 }
 $7 = HEAP8[99162>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 $9 = $segname;
 if ($8) {
  HEAP32[$vararg_buffer1>>2] = $9;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 359;
  _AddLineQueueX(109563,$vararg_buffer1);
 } else {
  HEAP32[$vararg_buffer5>>2] = $9;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 359;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = 8;
  _AddLineQueueX(99666,$vararg_buffer5);
  _AddLineQueue(99699);
 }
 $xdataofs = 0;
 $10 = $segname;
 $11 = (_SymFind($10)|0);
 $xdata = $11;
 $12 = $xdata;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $xdata;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $xdataofs = $16;
 }
 $17 = HEAP8[99153>>0]|0;
 $18 = ($17&255) >>> 3;
 $19 = $18&255;
 $20 = HEAP8[(99154)>>0]|0;
 $21 = $20&255;
 $22 = HEAP8[(99155)>>0]|0;
 $23 = $22&255;
 $24 = HEAP8[(99156)>>0]|0;
 $25 = $24 & 15;
 $26 = $25&255;
 $27 = HEAP8[(99156)>>0]|0;
 $28 = ($27&255) >>> 4;
 $29 = $28&255;
 HEAP32[$vararg_buffer10>>2] = 1;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $19;
 $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
 HEAP32[$vararg_ptr14>>2] = $21;
 $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
 HEAP32[$vararg_ptr15>>2] = $23;
 $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
 HEAP32[$vararg_ptr16>>2] = $26;
 $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
 HEAP32[$vararg_ptr17>>2] = $29;
 _AddLineQueueX(99720,$vararg_buffer10);
 $30 = HEAP8[(99155)>>0]|0;
 $31 = ($30<<24>>24)!=(0);
 L11: do {
  if ($31) {
   $pfx = 99773;
   HEAP8[$buffer>>0] = 0;
   $32 = HEAP8[(99155)>>0]|0;
   $33 = $32&255;
   $i = $33;
   while(1) {
    $34 = $i;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     break L11;
    }
    $36 = (_strlen($buffer)|0);
    $37 = (($buffer) + ($36)|0);
    $38 = $pfx;
    $39 = $i;
    $40 = (($39) - 1)|0;
    $41 = (67816 + ($40<<1)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $42&65535;
    HEAP32[$vararg_buffer18>>2] = $38;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $43;
    (_sprintf($37,99776,$vararg_buffer18)|0);
    $pfx = 99784;
    $44 = $i;
    $45 = ($44|0)==(1);
    if ($45) {
     label = 13;
    } else {
     $46 = (_strlen($buffer)|0);
     $47 = ($46>>>0)>(72);
     if ($47) {
      label = 13;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     _AddLineQueue($buffer);
     HEAP8[$buffer>>0] = 0;
     $pfx = 99773;
    }
    $48 = $i;
    $49 = (($48) + -1)|0;
    $i = $49;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer22>>2] = 357;
 _AddLineQueueX(99786,$vararg_buffer22);
 $50 = $0;
 $51 = ((($50)) + 60|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 28|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = $0;
  $57 = ((($56)) + 60|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  HEAP32[$vararg_buffer25>>2] = 159;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $62;
  _AddLineQueueX(99791,$vararg_buffer25);
  HEAP32[$vararg_buffer29>>2] = 357;
  _AddLineQueueX(99800,$vararg_buffer29);
 }
 $63 = $segname;
 HEAP32[$vararg_buffer32>>2] = $63;
 $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
 HEAP32[$vararg_ptr35>>2] = 360;
 _AddLineQueueX(109563,$vararg_buffer32);
 $64 = (_SimGetSegName(0)|0);
 $65 = $0;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_strcmp($64,$69)|0);
 $71 = (0)==($70|0);
 if ($71) {
  $segname = 99805;
  $72 = HEAP8[99162>>0]|0;
  $73 = $72&255;
  $74 = $73 & 1;
  $simplespec = $74;
  HEAP8[99162>>0] = 3;
 } else {
  $segname = $segnamebuff;
  $75 = $segname;
  $76 = $0;
  $77 = ((($76)) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_GetSegIdx($78)|0);
  HEAP32[$vararg_buffer36>>2] = $79;
  (_sprintf($75,99812,$vararg_buffer36)|0);
  $simplespec = 0;
  $80 = HEAP8[99162>>0]|0;
  $81 = $80&255;
  $82 = $81 | 2;
  $83 = $82&255;
  HEAP8[99162>>0] = $83;
 }
 $84 = $simplespec;
 $85 = ($84|0)!=(0);
 $86 = $segname;
 if ($85) {
  HEAP32[$vararg_buffer39>>2] = $86;
  $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
  HEAP32[$vararg_ptr42>>2] = 359;
  _AddLineQueueX(109563,$vararg_buffer39);
 } else {
  HEAP32[$vararg_buffer43>>2] = $86;
  $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
  HEAP32[$vararg_ptr46>>2] = 359;
  $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
  HEAP32[$vararg_ptr47>>2] = 4;
  _AddLineQueueX(99666,$vararg_buffer43);
 }
 $87 = $0;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $0;
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $0;
 $94 = ((($93)) + 36|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $xdataofs;
 HEAP32[$vararg_buffer48>>2] = 159;
 $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
 HEAP32[$vararg_ptr51>>2] = $89;
 $vararg_ptr52 = ((($vararg_buffer48)) + 8|0);
 HEAP32[$vararg_ptr52>>2] = 159;
 $vararg_ptr53 = ((($vararg_buffer48)) + 12|0);
 HEAP32[$vararg_ptr53>>2] = $92;
 $vararg_ptr54 = ((($vararg_buffer48)) + 16|0);
 HEAP32[$vararg_ptr54>>2] = $95;
 $vararg_ptr55 = ((($vararg_buffer48)) + 20|0);
 HEAP32[$vararg_ptr55>>2] = 159;
 $vararg_ptr56 = ((($vararg_buffer48)) + 24|0);
 HEAP32[$vararg_ptr56>>2] = $96;
 _AddLineQueueX(99824,$vararg_buffer48);
 $97 = $segname;
 HEAP32[$vararg_buffer57>>2] = $97;
 $vararg_ptr60 = ((($vararg_buffer57)) + 4|0);
 HEAP32[$vararg_ptr60>>2] = 360;
 _AddLineQueueX(109563,$vararg_buffer57);
 $98 = HEAP32[(560)>>2]|0;
 $99 = $98 >>> 4;
 $100 = $99 & 1;
 $101 = $100&255;
 $olddotname = $101;
 $102 = HEAP32[(560)>>2]|0;
 $103 = $102 & -17;
 $104 = $103 | 16;
 HEAP32[(560)>>2] = $104;
 _RunLineQueue();
 $105 = $olddotname;
 $106 = $105&255;
 $107 = HEAP32[(560)>>2]|0;
 $108 = $106 & 1;
 $109 = $108 << 4;
 $110 = $107 & -17;
 $111 = $110 | $109;
 HEAP32[(560)>>2] = $111;
 STACKTOP = sp;return;
}
function _pop_proc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[15532>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $0 = 0;
 } else {
  $3 = (_popitem(15532)|0);
  $0 = $3;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _popitem($stk) {
 $stk = $stk|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elmt = 0, $node = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stk;
 $1 = $0;
 $stack = $1;
 $2 = $stack;
 $3 = HEAP32[$2>>2]|0;
 $node = $3;
 $4 = $node;
 $5 = HEAP32[$4>>2]|0;
 $6 = $stack;
 HEAP32[$6>>2] = $5;
 $7 = $node;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $elmt = $9;
 $10 = $elmt;
 STACKTOP = sp;return ($10|0);
}
function _pushitem($stk,$elmt) {
 $stk = $stk|0;
 $elmt = $elmt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $stk;
 $1 = $elmt;
 $2 = $0;
 $stack = $2;
 $3 = (_LclAlloc(8)|0);
 $node = $3;
 $4 = $stack;
 $5 = HEAP32[$4>>2]|0;
 $6 = $node;
 HEAP32[$6>>2] = $5;
 $7 = $1;
 $8 = $node;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $node;
 $11 = $stack;
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _QEnqueue($q,$item) {
 $q = $q|0;
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $item;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $1;
  $6 = $0;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = $5;
  $8 = $0;
  HEAP32[$8>>2] = $5;
  $20 = $1;
  HEAP32[$20>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_InternalError(99864,52)|0);
 }
 $13 = $1;
 $14 = $0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$16>>2] = $13;
 $17 = $1;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _QAddItem($q,$data) {
 $q = $q|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $q;
 $1 = $data;
 $2 = (_LclAlloc(8)|0);
 $node = $2;
 $3 = $1;
 $4 = $node;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = $0;
 $7 = $node;
 _QEnqueue($6,$7);
 STACKTOP = sp;return;
}
function _FindResWord($name,$size) {
 $name = $name|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = (_get_hash($3,$4)|0);
 $6 = (79940 + ($5<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $i = $8;
 while(1) {
  $9 = $i;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = $i;
  $12 = (22260 + ($11<<3)|0);
  $inst = $12;
  $13 = $inst;
  $14 = ((($13)) + 2|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $2;
  $18 = $17&255;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $20 = $1;
   $21 = $inst;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $inst;
   $25 = ((($24)) + 2|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = (_strncasecmp($20,$23,$27)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    label = 5;
    break;
   }
  }
  $31 = $inst;
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $i = $33;
 }
 if ((label|0) == 5) {
  $30 = $i;
  $0 = $30;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _RenameKeyword($token,$newname,$length) {
 $token = $token|0;
 $newname = $newname|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $prev = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $token;
 $1 = $newname;
 $2 = $length;
 $3 = $0;
 $4 = (22260 + ($3<<3)|0);
 $5 = ((($4)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $2;
 $9 = $8&255;
 $10 = ($7|0)==($9|0);
 if ($10) {
  $11 = $1;
  $12 = $0;
  $13 = (22260 + ($12<<3)|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = $16&255;
  $18 = (_strncasecmp($11,$15,$17)|0);
  $19 = ($18|0)!=(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
 }
 $20 = $0;
 (_RemoveResWord($20)|0);
 $21 = $0;
 $22 = (22260 + ($21<<3)|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24>>>0)>=(100124>>>0);
 do {
  if ($25) {
   $26 = $0;
   $27 = (22260 + ($26<<3)|0);
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29>>>0)<((107969)>>>0);
   if ($30) {
    $31 = (_LclAlloc(12)|0);
    $curr = $31;
    $32 = $curr;
    HEAP32[$32>>2] = 0;
    $33 = $0;
    $34 = (22260 + ($33<<3)|0);
    $35 = ((($34)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $curr;
    $38 = ((($37)) + 4|0);
    HEAP32[$38>>2] = $36;
    $39 = $0;
    $40 = $39&65535;
    $41 = $curr;
    $42 = ((($41)) + 8|0);
    HEAP16[$42>>1] = $40;
    $43 = $0;
    $44 = (22260 + ($43<<3)|0);
    $45 = ((($44)) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $curr;
    $48 = ((($47)) + 10|0);
    HEAP8[$48>>0] = $46;
    $49 = HEAP32[33180>>2]|0;
    $50 = ($49|0)==(0|0);
    $51 = $curr;
    if ($50) {
     HEAP32[(33184)>>2] = $51;
     HEAP32[33180>>2] = $51;
     break;
    } else {
     $52 = HEAP32[(33184)>>2]|0;
     HEAP32[$52>>2] = $51;
     $53 = $curr;
     HEAP32[(33184)>>2] = $53;
     break;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } while(0);
 L11: do {
  if ((label|0) == 8) {
   $54 = HEAP32[33180>>2]|0;
   $curr = $54;
   $prev = 0;
   while(1) {
    $55 = $curr;
    $56 = ($55|0)!=(0|0);
    if (!($56)) {
     break L11;
    }
    $57 = $curr;
    $58 = ((($57)) + 8|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = $0;
    $62 = ($60|0)==($61|0);
    $63 = $curr;
    if ($62) {
     break;
    }
    $prev = $63;
   }
   $64 = ((($63)) + 10|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $2;
   $68 = $67&255;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = $1;
    $71 = $curr;
    $72 = ((($71)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $2;
    $75 = $74&255;
    $76 = (_memcmp($70,$73,$75)|0);
    $77 = ($76|0)!=(0);
    if (!($77)) {
     $78 = $prev;
     $79 = ($78|0)!=(0|0);
     $80 = $curr;
     $81 = HEAP32[$80>>2]|0;
     if ($79) {
      $82 = $prev;
      HEAP32[$82>>2] = $81;
     } else {
      HEAP32[33180>>2] = $81;
     }
     $83 = HEAP32[(33184)>>2]|0;
     $84 = $curr;
     $85 = ($83|0)==($84|0);
     if ($85) {
      $86 = $prev;
      HEAP32[(33184)>>2] = $86;
     }
     $87 = $curr;
     $88 = ((($87)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $0;
     $91 = (22260 + ($90<<3)|0);
     $92 = ((($91)) + 4|0);
     HEAP32[$92>>2] = $89;
     $93 = $curr;
     $94 = ((($93)) + 10|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $0;
     $97 = (22260 + ($96<<3)|0);
     $98 = ((($97)) + 2|0);
     HEAP8[$98>>0] = $95;
     $99 = $0;
     _AddResWord($99);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $100 = $2;
 $101 = $100&255;
 $102 = (_LclAlloc($101)|0);
 $103 = $0;
 $104 = (22260 + ($103<<3)|0);
 $105 = ((($104)) + 4|0);
 HEAP32[$105>>2] = $102;
 $106 = $0;
 $107 = (22260 + ($106<<3)|0);
 $108 = ((($107)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $1;
 $111 = $2;
 $112 = $111&255;
 _memcpy(($109|0),($110|0),($112|0))|0;
 $113 = $2;
 $114 = $0;
 $115 = (22260 + ($114<<3)|0);
 $116 = ((($115)) + 2|0);
 HEAP8[$116>>0] = $113;
 $117 = $0;
 _AddResWord($117);
 STACKTOP = sp;return;
}
function _Set64Bit($newmode) {
 $newmode = $newmode|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $newmode;
 $1 = $0;
 $2 = $1&255;
 $3 = HEAP8[107969>>0]|0;
 $4 = $3&255;
 $5 = ($2|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 $9 = HEAP16[(78244)>>1]|0;
 L4: do {
  if ($8) {
   $10 = (($9) + 1)<<16>>16;
   HEAP16[(78244)>>1] = $10;
   $11 = HEAP16[(78246)>>1]|0;
   $12 = (($11) + 1)<<16>>16;
   HEAP16[(78246)>>1] = $12;
   (_RemoveResWord(191)|0);
   $13 = HEAP32[(23792)>>2]|0;
   HEAP32[33188>>2] = $13;
   HEAP32[(23792)>>2] = (107960);
   $14 = HEAP8[(23790)>>0]|0;
   $15 = (($14) + 1)<<24>>24;
   HEAP8[(23790)>>0] = $15;
   _AddResWord(191);
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = ($16>>>0)<(6);
    if (!($17)) {
     break;
    }
    $18 = $i;
    $19 = (33192 + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $token = $20;
    while(1) {
     $21 = $token;
     $22 = (22260 + ($21<<3)|0);
     $23 = ((($22)) + 3|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $25 & 4;
     $27 = ($26|0)!=(0);
     if (!($27)) {
      break;
     }
     $28 = $token;
     $29 = (22260 + ($28<<3)|0);
     $30 = ((($29)) + 3|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 1;
     $34 = ($33|0)!=(0);
     if (!($34)) {
      $35 = $token;
      _AddResWord($35);
     }
     $36 = $token;
     $37 = (($36) + 1)|0;
     $token = $37;
    }
    $38 = $i;
    $39 = (($38) + 1)|0;
    $i = $39;
   }
   $i = 0;
   while(1) {
    $40 = $i;
    $41 = ($40>>>0)<(5);
    if (!($41)) {
     break;
    }
    $42 = $i;
    $43 = (33216 + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $token = $44;
    while(1) {
     $45 = $token;
     $46 = (22260 + ($45<<3)|0);
     $47 = ((($46)) + 3|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = $49 & 2;
     $51 = ($50|0)!=(0);
     if (!($51)) {
      break;
     }
     $52 = $token;
     $53 = (22260 + ($52<<3)|0);
     $54 = ((($53)) + 3|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = $56 & 1;
     $58 = ($57|0)!=(0);
     if (!($58)) {
      $59 = $token;
      (_RemoveResWord($59)|0);
     }
     $60 = $token;
     $61 = (($60) + 1)|0;
     $token = $61;
    }
    $62 = $i;
    $63 = (($62) + 1)|0;
    $i = $63;
   }
   $i = 0;
   while(1) {
    $64 = $i;
    $65 = ($64>>>0)<(11);
    if (!($65)) {
     break L4;
    }
    $66 = $i;
    $67 = (33236 + (($66*12)|0)|0);
    $68 = ((($67)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69&65535;
    $71 = $i;
    $72 = (33236 + (($71*12)|0)|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73&65535;
    $75 = (77956 + ($74<<1)|0);
    HEAP16[$75>>1] = $70;
    $76 = $i;
    $77 = (($76) + 1)|0;
    $i = $77;
   }
  } else {
   $78 = (($9) + -1)<<16>>16;
   HEAP16[(78244)>>1] = $78;
   $79 = HEAP16[(78246)>>1]|0;
   $80 = (($79) + -1)<<16>>16;
   HEAP16[(78246)>>1] = $80;
   $i = 0;
   while(1) {
    $81 = $i;
    $82 = ($81>>>0)<(6);
    if (!($82)) {
     break;
    }
    $83 = $i;
    $84 = (33192 + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $token = $85;
    while(1) {
     $86 = $token;
     $87 = (22260 + ($86<<3)|0);
     $88 = ((($87)) + 3|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = $90 & 4;
     $92 = ($91|0)!=(0);
     if (!($92)) {
      break;
     }
     $93 = $token;
     $94 = (22260 + ($93<<3)|0);
     $95 = ((($94)) + 3|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $97 & 1;
     $99 = ($98|0)!=(0);
     if (!($99)) {
      $100 = $token;
      (_RemoveResWord($100)|0);
     }
     $101 = $token;
     $102 = (($101) + 1)|0;
     $token = $102;
    }
    $103 = $i;
    $104 = (($103) + 1)|0;
    $i = $104;
   }
   $i = 0;
   while(1) {
    $105 = $i;
    $106 = ($105>>>0)<(5);
    if (!($106)) {
     break;
    }
    $107 = $i;
    $108 = (33216 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $token = $109;
    while(1) {
     $110 = $token;
     $111 = (22260 + ($110<<3)|0);
     $112 = ((($111)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = $114 & 2;
     $116 = ($115|0)!=(0);
     if (!($116)) {
      break;
     }
     $117 = $token;
     $118 = (22260 + ($117<<3)|0);
     $119 = ((($118)) + 3|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $121 & 1;
     $123 = ($122|0)!=(0);
     if (!($123)) {
      $124 = $token;
      _AddResWord($124);
     }
     $125 = $token;
     $126 = (($125) + 1)|0;
     $token = $126;
    }
    $127 = $i;
    $128 = (($127) + 1)|0;
    $i = $128;
   }
   $i = 0;
   while(1) {
    $129 = $i;
    $130 = ($129>>>0)<(11);
    if (!($130)) {
     break;
    }
    $131 = $i;
    $132 = (33236 + (($131*12)|0)|0);
    $133 = ((($132)) + 4|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $134&65535;
    $136 = $i;
    $137 = (33236 + (($136*12)|0)|0);
    $138 = HEAP16[$137>>1]|0;
    $139 = $138&65535;
    $140 = (77956 + ($139<<1)|0);
    HEAP16[$140>>1] = $135;
    $141 = $i;
    $142 = (($141) + 1)|0;
    $i = $142;
   }
   (_RemoveResWord(191)|0);
   $143 = HEAP32[33188>>2]|0;
   HEAP32[(23792)>>2] = $143;
   $144 = HEAP8[(23790)>>0]|0;
   $145 = (($144) + -1)<<24>>24;
   HEAP8[(23790)>>0] = $145;
   _AddResWord(191);
  }
 } while(0);
 $146 = $0;
 HEAP8[107969>>0] = $146;
 STACKTOP = sp;return;
}
function _DisableKeyword($token) {
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $token;
 $1 = $0;
 $2 = (22260 + ($1<<3)|0);
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 (_RemoveResWord($8)|0);
 $9 = $0;
 $10 = (22260 + ($9<<3)|0);
 HEAP16[$10>>1] = 0;
 $11 = $0;
 $12 = (22260 + ($11<<3)|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 | 1;
 $17 = $16&255;
 HEAP8[$13>>0] = $17;
 $18 = HEAP16[81562>>1]|0;
 $19 = $18&65535;
 $20 = ($19|0)==(0);
 $21 = $0;
 $22 = $21&65535;
 if ($20) {
  HEAP16[(81564)>>1] = $22;
  HEAP16[81562>>1] = $22;
  STACKTOP = sp;return;
 } else {
  $23 = HEAP16[(81564)>>1]|0;
  $24 = $23&65535;
  $25 = (22260 + ($24<<3)|0);
  HEAP16[$25>>1] = $22;
  $26 = $0;
  $27 = $26&65535;
  HEAP16[(81564)>>1] = $27;
  STACKTOP = sp;return;
 }
}
function _IsKeywordDisabled($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $len;
 $3 = HEAP16[81562>>1]|0;
 $4 = $3&65535;
 $token = $4;
 while(1) {
  $5 = $token;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $2;
  $8 = $token;
  $9 = (22260 + ($8<<3)|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($7)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $1;
   $17 = $token;
   $18 = (22260 + ($17<<3)|0);
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = (_strncasecmp($16,$20,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    label = 5;
    break;
   }
  }
  $24 = $token;
  $25 = (22260 + ($24<<3)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $token = $27;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _GetResWName($resword,$buff) {
 $resword = $resword|0;
 $buff = $buff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buff$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $resword;
 $1 = $buff;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 $buff$ = $3 ? $buff : 107970;
 $1 = $buff$;
 $4 = $1;
 $5 = $0;
 $6 = (22260 + ($5<<3)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (22260 + ($9<<3)|0);
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 _memcpy(($4|0),($8|0),($13|0))|0;
 $14 = $0;
 $15 = (22260 + ($14<<3)|0);
 $16 = ((($15)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $1;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _ResWordsInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = 100124;
 $0 = HEAP32[(22272)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _memset((79940|0),0,1622)|0;
 $2 = HEAP8[(32415)>>0]|0;
 $3 = $2&255;
 $4 = $3 | 4;
 $5 = $4&255;
 HEAP8[(32415)>>0] = $5;
 $6 = HEAP8[(32423)>>0]|0;
 $7 = $6&255;
 $8 = $7 | 4;
 $9 = $8&255;
 HEAP8[(32423)>>0] = $9;
 $i = 1;
 while(1) {
  $10 = $i;
  $11 = ($10>>>0)<(1365);
  if (!($11)) {
   break;
  }
  $12 = $p;
  $13 = $i;
  $14 = (22260 + ($13<<3)|0);
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = $i;
  $17 = (22260 + ($16<<3)|0);
  $18 = ((($17)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $p;
  $22 = (($21) + ($20)|0);
  $p = $22;
  $23 = $i;
  $24 = (22260 + ($23<<3)|0);
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 & 4;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $i;
   _AddResWord($30);
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 STACKTOP = sp;return;
}
function _ResWordsFini() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $next = 0, $rencurr = 0, $tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[33180>>2]|0;
 $rencurr = $0;
 while(1) {
  $1 = $rencurr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $rencurr;
  $4 = HEAP32[$3>>2]|0;
  $tmp = $4;
  $5 = $rencurr;
  $6 = ((($5)) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  (_RemoveResWord($8)|0);
  $9 = $rencurr;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $rencurr;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (22260 + ($15<<3)|0);
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $11;
  $18 = $rencurr;
  $19 = ((($18)) + 10|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $rencurr;
  $22 = ((($21)) + 8|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (22260 + ($24<<3)|0);
  $26 = ((($25)) + 2|0);
  HEAP8[$26>>0] = $20;
  $27 = $rencurr;
  $28 = ((($27)) + 8|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  _AddResWord($30);
  $31 = $tmp;
  $rencurr = $31;
 }
 HEAP32[33180>>2] = 0;
 $32 = HEAP16[81562>>1]|0;
 $33 = $32&65535;
 $i = $33;
 while(1) {
  $34 = $i;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = (22260 + ($36<<3)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $next = $39;
  $40 = $i;
  $41 = (22260 + ($40<<3)|0);
  $42 = ((($41)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 & -2;
  $46 = $45&255;
  HEAP8[$42>>0] = $46;
  $47 = $i;
  $48 = (22260 + ($47<<3)|0);
  $49 = ((($48)) + 3|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 & 4;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   $54 = $i;
   _AddResWord($54);
  }
  $55 = $next;
  $i = $55;
 }
 HEAP16[(81564)>>1] = 0;
 HEAP16[81562>>1] = 0;
 STACKTOP = sp;return;
}
function _get_hash($s,$size) {
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $size;
 $h = 0;
 while(1) {
  $2 = $1;
  $3 = ($2<<24>>24)!=(0);
  $4 = $h;
  if (!($3)) {
   break;
  }
  $5 = $4 << 3;
  $6 = $0;
  $7 = ((($6)) + 1|0);
  $0 = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = $9 | 32;
  $11 = (($5) + ($10))|0;
  $h = $11;
  $12 = $h;
  $13 = $12 & -8192;
  $g = $13;
  $14 = $g;
  $15 = $h;
  $16 = $15 ^ $14;
  $h = $16;
  $17 = $g;
  $18 = $17 >>> 13;
  $19 = $h;
  $20 = $19 ^ $18;
  $h = $20;
  $21 = $1;
  $22 = (($21) + -1)<<24>>24;
  $1 = $22;
 }
 $23 = (($4>>>0) % 811)&-1;
 STACKTOP = sp;return ($23|0);
}
function _RemoveResWord($token) {
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $i = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $token;
 $2 = $1;
 $3 = (22260 + ($2<<3)|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (22260 + ($6<<3)|0);
 $8 = ((($7)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (_get_hash($5,$9)|0);
 $i = $10;
 $11 = $i;
 $12 = (79940 + ($11<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $curr = $14;
 $old = 0;
 while(1) {
  $15 = $curr;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 9;
   break;
  }
  $17 = $curr;
  $18 = $1;
  $19 = ($17|0)==($18|0);
  if ($19) {
   break;
  }
  $29 = $curr;
  $old = $29;
  $30 = $curr;
  $31 = (22260 + ($30<<3)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $curr = $33;
 }
 if ((label|0) == 9) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $20 = $old;
 $21 = ($20|0)!=(0);
 $22 = $curr;
 $23 = (22260 + ($22<<3)|0);
 $24 = HEAP16[$23>>1]|0;
 if ($21) {
  $25 = $old;
  $26 = (22260 + ($25<<3)|0);
  HEAP16[$26>>1] = $24;
 } else {
  $27 = $i;
  $28 = (79940 + ($27<<1)|0);
  HEAP16[$28>>1] = $24;
 }
 $0 = 1;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _AddResWord($token) {
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $i = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $token;
 $1 = $0;
 $2 = (22260 + ($1<<3)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (22260 + ($5<<3)|0);
 $7 = ((($6)) + 2|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (_get_hash($4,$8)|0);
 $i = $9;
 $10 = $i;
 $11 = (79940 + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $curr = $13;
 $old = 0;
 while(1) {
  $14 = $curr;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = $curr;
  $17 = (22260 + ($16<<3)|0);
  $18 = ((($17)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $0;
  $22 = (22260 + ($21<<3)|0);
  $23 = ((($22)) + 2|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($20|0)<=($25|0);
  if (!($26)) {
   break;
  }
  $27 = $curr;
  $old = $27;
  $28 = $curr;
  $29 = (22260 + ($28<<3)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $curr = $31;
 }
 $32 = $old;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = $i;
  $35 = (79940 + ($34<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $0;
  $38 = (22260 + ($37<<3)|0);
  HEAP16[$38>>1] = $36;
  $39 = $0;
  $40 = $39&65535;
  $41 = $i;
  $42 = (79940 + ($41<<1)|0);
  HEAP16[$42>>1] = $40;
  STACKTOP = sp;return;
 } else {
  $43 = $old;
  $44 = (22260 + ($43<<3)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $0;
  $47 = (22260 + ($46<<3)|0);
  HEAP16[$47>>1] = $45;
  $48 = $0;
  $49 = $48&65535;
  $50 = $old;
  $51 = (22260 + ($50<<3)|0);
  HEAP16[$51>>1] = $49;
  STACKTOP = sp;return;
 }
}
function _SafeSEHDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $node = 0, $sym = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[(6100)>>2]|0;
 $4 = ($3|0)!=(2);
 if ($4) {
  $5 = HEAP32[4884>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$vararg_buffer>>2] = 108226;
   _EmitWarn(2,261,$vararg_buffer);
  }
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $7 = HEAP8[(6095)>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[4884>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   HEAP32[$vararg_buffer1>>2] = 108231;
   _EmitWarn(2,261,$vararg_buffer1);
  }
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $12 = $1;
 $13 = (($12) + 1)|0;
 $1 = $13;
 $14 = $1;
 $15 = $2;
 $16 = (($15) + ($14<<4)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(8);
 $20 = $1;
 $21 = $2;
 $22 = (($21) + ($20<<4)|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 if ($19) {
  HEAP32[$vararg_buffer4>>2] = $24;
  $25 = (_EmitErr(209,$vararg_buffer4)|0);
  $0 = $25;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 $26 = (_SymFind($24)|0);
 $sym = $26;
 $27 = $sym;
 $28 = ($27|0)==(0|0);
 if ($28) {
  label = 13;
 } else {
  $29 = $sym;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   label = 13;
  } else {
   $41 = $sym;
   $42 = ((($41)) + 24|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43&65535) >>> 11;
   $45 = $44 & 1;
   $46 = $45&255;
   $47 = $46&255;
   $48 = ($47|0)==(0);
   if ($48) {
    $49 = $1;
    $50 = $2;
    $51 = (($50) + ($49<<4)|0);
    $52 = ((($51)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $53;
    $54 = (_EmitErr(260,$vararg_buffer10)|0);
    $0 = $54;
    $97 = $0;
    STACKTOP = sp;return ($97|0);
   }
  }
 }
 if ((label|0) == 13) {
  $33 = HEAP32[4884>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $1;
   $36 = $2;
   $37 = (($36) + ($35<<4)|0);
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $39;
   $40 = (_EmitErr(102,$vararg_buffer7)|0);
   $0 = $40;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  }
 }
 $55 = HEAP32[4884>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  $57 = $sym;
  $58 = ($57|0)!=(0|0);
  L31: do {
   if ($58) {
    $59 = HEAP32[(348)>>2]|0;
    $node = $59;
    while(1) {
     $60 = $node;
     $61 = ($60|0)!=(0|0);
     if (!($61)) {
      break L31;
     }
     $62 = $node;
     $63 = ((($62)) + 4|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $sym;
     $66 = ($64|0)==($65|0);
     if ($66) {
      break L31;
     }
     $67 = $node;
     $68 = HEAP32[$67>>2]|0;
     $node = $68;
    }
   } else {
    $69 = $1;
    $70 = $2;
    $71 = (($70) + ($69<<4)|0);
    $72 = ((($71)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (_SymCreate($73)|0);
    $sym = $74;
    $node = 0;
   }
  } while(0);
  $75 = $node;
  $76 = ($75|0)==(0|0);
  if ($76) {
   $77 = $sym;
   $78 = ((($77)) + 24|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 & -2;
   $81 = $80 | 1;
   HEAP16[$78>>1] = $81;
   $82 = $sym;
   _QAddItem((348),$82);
  }
 }
 $83 = $1;
 $84 = (($83) + 1)|0;
 $1 = $84;
 $85 = $1;
 $86 = $2;
 $87 = (($86) + ($85<<4)|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $1;
  $92 = $2;
  $93 = (($92) + ($91<<4)|0);
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $95;
  $96 = (_EmitErr(209,$vararg_buffer13)|0);
  $0 = $96;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 } else {
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function _UpdateCurPC($sym,$p) {
 $sym = $sym|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $sym;
 $1 = $p;
 $2 = HEAP32[66812>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 20|0);
  HEAP32[$5>>2] = 192;
  $6 = $0;
  $7 = ((($6)) + 12|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[66812>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[66812>>2]|0;
  $12 = ((($11)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = HEAP32[66812>>2]|0;
   $16 = ((($15)) + 64|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $21 = $19;
  } else {
   $21 = 0;
  }
  $20 = (($10) + ($21))|0;
  $22 = $0;
  $23 = ((($22)) + 8|0);
  HEAP32[$23>>2] = $20;
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(584)>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $0;
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = 129;
  $28 = HEAP32[(584)>>2]|0;
  $29 = $0;
  $30 = ((($29)) + 12|0);
  HEAP32[$30>>2] = $28;
  $31 = (_GetCurrOffset()|0);
  $32 = $0;
  $33 = ((($32)) + 8|0);
  HEAP32[$33>>2] = $31;
  STACKTOP = sp;return;
 } else {
  (_EmitErr(82,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function _GetCurrOffset() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(584)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  $7 = 0;
  return ($7|0);
 }
 $2 = HEAP32[(584)>>2]|0;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 return ($7|0);
}
function _GetCurrSegAlign() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(584)>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $3 = HEAP32[(584)>>2]|0;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 66|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(255);
 if ($9) {
  $0 = 16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $10 = HEAP32[(584)>>2]|0;
  $11 = ((($10)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 66|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = 1 << $15;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _DeleteGroup($dir) {
 $dir = $dir|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dir;
 STACKTOP = sp;return;
}
function _GrpDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $grp = 0, $name = 0, $or$cond = 0, $or$cond3 = 0, $seg = 0, $si = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = ($3|0)!=(1);
 if ($4) {
  $5 = $1;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 $11 = HEAP32[(6100)>>2]|0;
 $12 = ($11|0)==(2);
 $13 = HEAP32[(6100)>>2]|0;
 $14 = ($13|0)==(3);
 $or$cond = $12 | $14;
 if (!($or$cond)) {
  $15 = HEAP32[(6100)>>2]|0;
  $16 = ($15|0)==(0);
  $17 = HEAP32[(524)>>2]|0;
  $18 = ($17|0)==(2);
  $or$cond3 = $16 & $18;
  if (!($or$cond3)) {
   $26 = $2;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_CreateGroup($28)|0);
   $grp = $29;
   $30 = $grp;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $0 = -1;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   $32 = $1;
   $33 = (($32) + 1)|0;
   $1 = $33;
   L12: while(1) {
    $34 = $1;
    $35 = $2;
    $36 = (($35) + ($34<<4)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)!=(8);
    $40 = $1;
    $41 = $2;
    $42 = (($41) + ($40<<4)|0);
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    if ($39) {
     label = 10;
     break;
    }
    $name = $44;
    $46 = $1;
    $47 = (($46) + 1)|0;
    $1 = $47;
    $48 = $name;
    $49 = (_SymFind($48)|0);
    $seg = $49;
    $50 = HEAP32[4884>>2]|0;
    $51 = ($50|0)==(0);
    $52 = $seg;
    $53 = ($52|0)==(0|0);
    do {
     if ($51) {
      if ($53) {
       label = 14;
      } else {
       $54 = $seg;
       $55 = ((($54)) + 16|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0);
       if ($57) {
        label = 14;
       } else {
        $73 = $seg;
        $74 = ((($73)) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($75|0)!=(3);
        if ($76) {
         label = 17;
         break L12;
        }
        $79 = $seg;
        $80 = ((($79)) + 60|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = HEAP32[$81>>2]|0;
        $83 = ($82|0)!=(0|0);
        if ($83) {
         $84 = $seg;
         $85 = ((($84)) + 60|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = HEAP32[$86>>2]|0;
         $88 = HEAP32[(588)>>2]|0;
         $89 = ($87|0)!=($88|0);
         if ($89) {
          $90 = $seg;
          $91 = ((($90)) + 60|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = HEAP32[$92>>2]|0;
          $94 = $grp;
          $95 = ($93|0)!=($94|0);
          if ($95) {
           label = 21;
           break L12;
          }
         }
        }
       }
      }
      if ((label|0) == 14) {
       label = 0;
       $58 = $seg;
       $59 = $name;
       $60 = (_CreateSegment($58,$59,1)|0);
       $seg = $60;
       $61 = $grp;
       $62 = ((($61)) + 60|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)!=(0|0);
       if ($65) {
        $66 = $grp;
        $67 = ((($66)) + 28|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = $seg;
        $70 = ((($69)) + 60|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ((($71)) + 64|0);
        HEAP8[$72>>0] = $68;
       }
      }
      $98 = $grp;
      $99 = ((($98)) + 60|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)==(0|0);
      if ($102) {
       $103 = $seg;
       $104 = ((($103)) + 60|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ((($105)) + 64|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $grp;
       $109 = ((($108)) + 28|0);
       HEAP8[$109>>0] = $107;
       break;
      } else {
       $110 = $grp;
       $111 = ((($110)) + 28|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = $seg;
       $115 = ((($114)) + 60|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ((($116)) + 64|0);
       $118 = HEAP8[$117>>0]|0;
       $119 = $118&255;
       $120 = ($113|0)!=($119|0);
       if ($120) {
        label = 25;
        break L12;
       } else {
        break;
       }
      }
     } else {
      if ($53) {
       label = 29;
       break L12;
      }
      $128 = $seg;
      $129 = ((($128)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)!=(3);
      if ($131) {
       label = 29;
       break L12;
      }
      $132 = $seg;
      $133 = ((($132)) + 12|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       label = 29;
       break L12;
      }
     }
    } while(0);
    $138 = $seg;
    $139 = ((($138)) + 60|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = HEAP32[$140>>2]|0;
    $142 = ($141|0)==(0|0);
    do {
     if ($142) {
      $143 = $grp;
      $144 = $seg;
      $145 = ((($144)) + 60|0);
      $146 = HEAP32[$145>>2]|0;
      HEAP32[$146>>2] = $143;
      $147 = (_LclAlloc(8)|0);
      $si = $147;
      $148 = $seg;
      $149 = $si;
      $150 = ((($149)) + 4|0);
      HEAP32[$150>>2] = $148;
      $151 = $si;
      HEAP32[$151>>2] = 0;
      $152 = $grp;
      $153 = ((($152)) + 60|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 12|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + 1)|0;
      HEAP32[$155>>2] = $157;
      $158 = $grp;
      $159 = ((($158)) + 60|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161|0)==(0|0);
      if ($162) {
       $163 = $si;
       $164 = $grp;
       $165 = ((($164)) + 60|0);
       $166 = HEAP32[$165>>2]|0;
       HEAP32[$166>>2] = $163;
       break;
      }
      $167 = $grp;
      $168 = ((($167)) + 60|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[$169>>2]|0;
      $curr = $170;
      while(1) {
       $171 = $curr;
       $172 = HEAP32[$171>>2]|0;
       $173 = ($172|0)!=(0|0);
       if (!($173)) {
        break;
       }
       $174 = $curr;
       $175 = HEAP32[$174>>2]|0;
       $curr = $175;
      }
      $176 = $si;
      $177 = $curr;
      HEAP32[$177>>2] = $176;
     }
    } while(0);
    $178 = $1;
    $179 = HEAP32[(616)>>2]|0;
    $180 = ($178|0)<($179|0);
    if ($180) {
     $181 = $1;
     $182 = $2;
     $183 = (($182) + ($181<<4)|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = ($185|0)!=(44);
     if ($186) {
      label = 40;
      break;
     }
     $187 = $1;
     $188 = (($187) + 1)|0;
     $189 = $2;
     $190 = (($189) + ($188<<4)|0);
     $191 = HEAP8[$190>>0]|0;
     $192 = $191&255;
     $193 = ($192|0)==(0);
     if ($193) {
      label = 40;
      break;
     }
     $200 = $1;
     $201 = (($200) + 1)|0;
     $1 = $201;
    }
    $202 = $1;
    $203 = HEAP32[(616)>>2]|0;
    $204 = ($202|0)<($203|0);
    if (!($204)) {
     label = 43;
     break;
    }
   }
   if ((label|0) == 10) {
    HEAP32[$vararg_buffer7>>2] = $44;
    $45 = (_EmitErr(209,$vararg_buffer7)|0);
    $0 = $45;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 17) {
    $77 = $name;
    HEAP32[$vararg_buffer10>>2] = $77;
    $78 = (_EmitErr(131,$vararg_buffer10)|0);
    $0 = $78;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 21) {
    $96 = $name;
    HEAP32[$vararg_buffer13>>2] = $96;
    $97 = (_EmitErr(135,$vararg_buffer13)|0);
    $0 = $97;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 25) {
    $121 = $grp;
    $122 = ((($121)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $seg;
    $125 = ((($124)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $123;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $126;
    $127 = (_EmitErr(239,$vararg_buffer16)|0);
    $0 = $127;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 29) {
    $136 = $name;
    HEAP32[$vararg_buffer20>>2] = $136;
    $137 = (_EmitErr(83,$vararg_buffer20)|0);
    $0 = $137;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 40) {
    $194 = $1;
    $195 = $2;
    $196 = (($195) + ($194<<4)|0);
    $197 = ((($196)) + 12|0);
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$vararg_buffer23>>2] = $198;
    $199 = (_EmitErr(209,$vararg_buffer23)|0);
    $0 = $199;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
   else if ((label|0) == 43) {
    $0 = 0;
    $205 = $0;
    STACKTOP = sp;return ($205|0);
   }
  }
 }
 $19 = $1;
 $20 = $2;
 $21 = (($20) + ($19<<4)|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_strupr($23)|0);
 HEAP32[$vararg_buffer4>>2] = $24;
 $25 = (_EmitErr(224,$vararg_buffer4)|0);
 $0 = $25;
 $205 = $0;
 STACKTOP = sp;return ($205|0);
}
function _UpdateWordSize($sym,$p) {
 $sym = $sym|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $p;
 $2 = HEAP8[(558)>>0]|0;
 $3 = $2&255;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _SetOfssize() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = HEAP32[(584)>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP8[(557)>>0]|0;
  HEAP8[(556)>>0] = $3;
 } else {
  $4 = HEAP32[(584)>>2]|0;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 64|0);
  $8 = HEAP8[$7>>0]|0;
  HEAP8[(556)>>0] = $8;
  $9 = HEAP32[(544)>>2]|0;
  $10 = $9&255;
  $11 = $10&255;
  $12 = HEAP8[(556)>>0]|0;
  $13 = $12&255;
  $14 = (81566 + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($11|0)<($16|0);
  if ($17) {
   $18 = HEAP8[(556)>>0]|0;
   $19 = $18&255;
   $20 = 16 << $19;
   HEAP32[$vararg_buffer>>2] = $20;
   $21 = (_EmitErr(132,$vararg_buffer)|0);
   $0 = $21;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $22 = HEAP8[(556)>>0]|0;
 $23 = $22&255;
 $24 = 2 << $23;
 $25 = $24&255;
 HEAP8[(558)>>0] = $25;
 $26 = HEAP8[(556)>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)==(2);
 $29 = $28&1;
 $30 = $29&255;
 _Set64Bit($30);
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _DefineFlatGroup() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(588)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_CreateGroup(109458)|0);
  HEAP32[(588)>>2] = $2;
  $3 = HEAP8[(557)>>0]|0;
  $4 = HEAP32[(588)>>2]|0;
  $5 = ((($4)) + 28|0);
  HEAP8[$5>>0] = $3;
 }
 $6 = HEAP32[(588)>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & -3;
 $10 = $9 | 2;
 HEAP16[$7>>1] = $10;
 return;
}
function _GetSegIdx($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 60|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _GetGroup($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $curr = $4;
 $5 = $curr;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $curr;
  $8 = ((($7)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _GetSymOfssize($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $curr = $4;
 $5 = $curr;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $41 = $curr;
  $42 = ((($41)) + 60|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 64|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $0 = $46;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $7 = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(2);
 $11 = $1;
 if ($10) {
  $12 = ((($11)) + 28|0);
  $13 = ((($12)) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 & 3;
  $16 = $15&255;
  $0 = $16;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $17 = ((($11)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(5);
 if (!($19)) {
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(4);
  if (!($23)) {
   $28 = $1;
   $29 = ((($28)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(3);
   $32 = $1;
   if ($31) {
    $33 = ((($32)) + 60|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 64|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $0 = $37;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
   $38 = ((($32)) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(192);
   if ($40) {
    $0 = 0;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   } else {
    $47 = HEAP8[(556)>>0]|0;
    $48 = $47&255;
    $0 = $48;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  }
 }
 $24 = $1;
 $25 = ((($24)) + 28|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $0 = $27;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _SetSymSegOfs($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = HEAP32[(584)>>2]|0;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 HEAP32[$3>>2] = $1;
 $4 = (_GetCurrOffset()|0);
 $5 = $0;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _TypeFromClassName($seg,$clname) {
 $seg = $seg|0;
 $clname = $clname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $slen = 0, $uname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uname = sp + 16|0;
 $1 = $seg;
 $2 = $clname;
 $3 = $1;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 66|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(255);
 L1: do {
  if ($9) {
   $0 = 5;
  } else {
   $10 = $1;
   $11 = ((($10)) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 68|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14 & 7;
   $16 = $15&255;
   $17 = ($16|0)==(5);
   if ($17) {
    $0 = 4;
    break;
   }
   $18 = $2;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $0 = 0;
    break;
   }
   $20 = $2;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_GetCodeClass()|0);
   $24 = (_strcasecmp($22,$23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $0 = 1;
    break;
   }
   $26 = $2;
   $27 = ((($26)) + 44|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $slen = $29;
   $30 = $2;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   $34 = ((($33)) + 44|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (($36) + 1)|0;
   _memcpy(($uname|0),($32|0),($37|0))|0;
   (_strupr($uname)|0);
   $38 = $slen;
   switch ($38|0) {
   case 1: case 2: case 0:  {
    break;
   }
   case 4:  {
    label = 16;
    break;
   }
   case 3:  {
    label = 20;
    break;
   }
   default: {
    $39 = (_memcmp($uname,109557,6)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     $0 = 2;
     break L1;
    }
    $41 = (_memcmp($uname,108239,6)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     $0 = 2;
     break L1;
    }
    $43 = (_memcmp($uname,108245,6)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $0 = 2;
     break L1;
    } else {
     label = 16;
    }
   }
   }
   if ((label|0) == 16) {
    $45 = $slen;
    $46 = (($uname) + ($45)|0);
    $47 = ((($46)) + -4|0);
    $48 = (_memcmp($47,109626,4)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $0 = 1;
     break;
    }
    $50 = $slen;
    $51 = (($uname) + ($50)|0);
    $52 = ((($51)) + -4|0);
    $53 = (_memcmp($52,109631,4)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $0 = 2;
     break;
    } else {
     label = 20;
    }
   }
   if ((label|0) == 20) {
    $55 = $slen;
    $56 = (($uname) + ($55)|0);
    $57 = ((($56)) + -3|0);
    $58 = (_memcmp($57,109636,3)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     $0 = 3;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $60 = $0;
 STACKTOP = sp;return ($60|0);
}
function _CreateIntSegment($name,$classname,$alignment,$Ofssize,$add_global) {
 $name = $name|0;
 $classname = $classname|0;
 $alignment = $alignment|0;
 $Ofssize = $Ofssize|0;
 $add_global = $add_global|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $seg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $classname;
 $3 = $alignment;
 $4 = $Ofssize;
 $5 = $add_global;
 $6 = $5;
 $7 = ($6<<24>>24)!=(0);
 $8 = $1;
 do {
  if ($7) {
   $9 = (_SymFind($8)|0);
   $seg = $9;
   $10 = $seg;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = $seg;
    $13 = ((($12)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $20 = $seg;
     $21 = ((($20)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)!=(3);
     if (!($23)) {
      break;
     }
     $24 = $1;
     HEAP32[$vararg_buffer>>2] = $24;
     (_EmitErr(143,$vararg_buffer)|0);
     $0 = 0;
     $71 = $0;
     STACKTOP = sp;return ($71|0);
    }
   }
   $16 = $seg;
   $17 = $1;
   $18 = $5;
   $19 = (_CreateSegment($16,$17,$18)|0);
   $seg = $19;
  } else {
   $25 = (_CreateSegment(0,$8,0)|0);
   $seg = $25;
  }
 } while(0);
 $26 = $seg;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $28 = $seg;
 $29 = ((($28)) + 24|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = ($30&65535) >>> 1;
 $32 = $31 & 1;
 $33 = $32&255;
 $34 = $33&255;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[(328)>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[(328)>>2] = $37;
  $38 = $seg;
  $39 = ((($38)) + 60|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 40|0);
  HEAP32[$41>>2] = $37;
  $42 = $seg;
  _AddLnameItem($42);
  $43 = $seg;
  $44 = ((($43)) + 24|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & -3;
  $47 = $46 | 2;
  HEAP16[$44>>1] = $47;
 }
 $48 = $seg;
 $49 = ((($48)) + 60|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 67|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 & -17;
 $54 = $53 | 16;
 HEAP8[$51>>0] = $54;
 $55 = $seg;
 $56 = $seg;
 $57 = ((($56)) + 12|0);
 HEAP32[$57>>2] = $55;
 $58 = $3;
 $59 = $seg;
 $60 = ((($59)) + 60|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($61)) + 66|0);
 HEAP8[$62>>0] = $58;
 $63 = $4;
 $64 = $seg;
 $65 = ((($64)) + 60|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($66)) + 64|0);
 HEAP8[$67>>0] = $63;
 $68 = $seg;
 $69 = $2;
 (_SetSegmentClass($68,$69)|0);
 $70 = $seg;
 $0 = $70;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _EndsDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[66812>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 if ($4) {
  $6 = $2;
  $7 = (_EndstructDirective($5,$6)|0);
  $0 = $7;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $8 = ($5|0)!=(1);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = (($10) + ($9<<4)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $14;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $15 = HEAP32[4884>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[(560)>>2]|0;
  $18 = $17 >>> 11;
  $19 = $18 & 1;
  $20 = ($19|0)!=(0);
  if ($20) {
   _LstWrite(7,0,0);
  }
 }
 $21 = $2;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_CloseSeg($23)|0);
 $25 = ($24|0)==(-1);
 if ($25) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $26 = $1;
 $27 = (($26) + 1)|0;
 $1 = $27;
 $28 = $1;
 $29 = $2;
 $30 = (($29) + ($28<<4)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $1;
  $35 = $2;
  $36 = (($35) + ($34<<4)|0);
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $38;
  (_EmitErr(209,$vararg_buffer1)|0);
 }
 $39 = (_SetOfssize()|0);
 $0 = $39;
 $40 = $0;
 STACKTOP = sp;return ($40|0);
}
function _SegmentDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $initstate = 0, $is_old = 0, $name = 0, $newcharacteristics = 0, $oldOfssize = 0, $oldalign = 0, $oldcombine = 0;
 var $opndx = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $res = 0, $sym = 0, $sym2 = 0, $temp = 0, $temp2 = 0, $token = 0, $txt = 0, $type = 0, $typeidx = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer72 = 0, $vararg_buffer8 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer72 = sp + 248|0;
 $vararg_buffer68 = sp + 240|0;
 $vararg_buffer65 = sp + 232|0;
 $vararg_buffer62 = sp + 224|0;
 $vararg_buffer59 = sp + 216|0;
 $vararg_buffer56 = sp + 208|0;
 $vararg_buffer53 = sp + 200|0;
 $vararg_buffer50 = sp + 192|0;
 $vararg_buffer47 = sp + 184|0;
 $vararg_buffer44 = sp + 176|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer38 = sp + 160|0;
 $vararg_buffer35 = sp + 152|0;
 $vararg_buffer32 = sp + 144|0;
 $vararg_buffer29 = sp + 136|0;
 $vararg_buffer26 = sp + 128|0;
 $vararg_buffer23 = sp + 120|0;
 $vararg_buffer20 = sp + 112|0;
 $vararg_buffer17 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer11 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 308|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $is_old = 0;
 $initstate = 0;
 $newcharacteristics = 0;
 $3 = HEAP32[4884>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = $2;
  $7 = (_SetCurrSeg($5,$6)|0);
  $0 = $7;
  $671 = $0;
  STACKTOP = sp;return ($671|0);
 }
 $8 = ($5|0)!=(1);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = $2;
  $11 = (($10) + ($9<<4)|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $14;
  $671 = $0;
  STACKTOP = sp;return ($671|0);
 }
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $name = $17;
 $18 = $name;
 $19 = (_SymFind($18)|0);
 $sym = $19;
 $20 = $sym;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 7;
  } else {
   $22 = $sym;
   $23 = ((($22)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    label = 7;
   } else {
    $35 = $sym;
    $36 = ((($35)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(3);
    if (!($38)) {
     $73 = $name;
     HEAP32[$vararg_buffer8>>2] = $73;
     $74 = (_EmitErr(143,$vararg_buffer8)|0);
     $0 = $74;
     $671 = $0;
     STACKTOP = sp;return ($671|0);
    }
    $39 = $sym;
    $dir = $39;
    $40 = $sym;
    $41 = ((($40)) + 24|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = ($42&65535) >>> 1;
    $44 = $43 & 1;
    $45 = $44&255;
    $46 = $45&255;
    $47 = ($46|0)==(0);
    if (!($47)) {
     $is_old = 1;
     $57 = $dir;
     $58 = ((($57)) + 60|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ((($59)) + 64|0);
     $61 = HEAP8[$60>>0]|0;
     $oldOfssize = $61;
     $62 = $dir;
     $63 = ((($62)) + 60|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 66|0);
     $66 = HEAP8[$65>>0]|0;
     $oldalign = $66;
     $67 = $dir;
     $68 = ((($67)) + 60|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 68|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71 & 7;
     $oldcombine = $72;
     break;
    }
    $48 = $dir;
    _UnlinkSeg($48);
    $49 = $dir;
    $50 = ((($49)) + 64|0);
    HEAP32[$50>>2] = 0;
    $51 = HEAP32[(15420)>>2]|0;
    $52 = ($51|0)==(0|0);
    $53 = $dir;
    if ($52) {
     HEAP32[(15424)>>2] = $53;
     HEAP32[(15420)>>2] = $53;
     break;
    } else {
     $54 = HEAP32[(15424)>>2]|0;
     $55 = ((($54)) + 64|0);
     HEAP32[$55>>2] = $53;
     $56 = $dir;
     HEAP32[(15424)>>2] = $56;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $26 = $sym;
  $27 = $name;
  $28 = (_CreateSegment($26,$27,1)|0);
  $sym = $28;
  $29 = $sym;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 & -257;
  $33 = $32 | 256;
  HEAP16[$30>>1] = $33;
  $34 = $sym;
  $dir = $34;
 }
 $75 = HEAP32[$1>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[$1>>2] = $76;
 while(1) {
  $77 = HEAP32[$1>>2]|0;
  $78 = HEAP32[(616)>>2]|0;
  $79 = ($77|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = HEAP32[$1>>2]|0;
  $81 = $2;
  $82 = (($81) + ($80<<4)|0);
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $token = $84;
  $85 = HEAP32[$1>>2]|0;
  $86 = $2;
  $87 = (($86) + ($85<<4)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = ($89|0)==(9);
  L28: do {
   if ($90) {
    $91 = HEAP32[$1>>2]|0;
    $92 = $2;
    $93 = (($92) + ($91<<4)|0);
    $94 = ((($93)) + 1|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = ($96|0)!=(34);
    if ($97) {
     $98 = HEAP32[$1>>2]|0;
     $99 = $2;
     $100 = (($99) + ($98<<4)|0);
     $101 = ((($100)) + 1|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102 << 24 >> 24;
     $104 = ($103|0)!=(39);
     if ($104) {
      $105 = $token;
      HEAP32[$vararg_buffer11>>2] = $105;
      (_EmitErr(209,$vararg_buffer11)|0);
      break;
     }
    }
    $106 = $token;
    $107 = ((($106)) + 1|0);
    $token = $107;
    $108 = $token;
    $109 = HEAP32[$1>>2]|0;
    $110 = $2;
    $111 = (($110) + ($109<<4)|0);
    $112 = ((($111)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($108) + ($113)|0);
    HEAP8[$114>>0] = 0;
    $115 = $dir;
    $116 = $token;
    (_SetSegmentClass($115,$116)|0);
   } else {
    $117 = $token;
    $118 = (_FindToken1073($117,33372,27)|0);
    $typeidx = $118;
    $119 = $typeidx;
    $120 = ($119|0)<(0);
    if ($120) {
     $121 = $token;
     HEAP32[$vararg_buffer14>>2] = $121;
     (_EmitErr(81,$vararg_buffer14)|0);
     break;
    }
    $122 = $typeidx;
    $123 = (108251 + ($122<<1)|0);
    $type = $123;
    $124 = $initstate;
    $125 = $124 & 31;
    $126 = $type;
    $127 = ((($126)) + 1|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = $125 & $129;
    $131 = ($130|0)!=(0);
    if ($131) {
     $132 = $token;
     HEAP32[$vararg_buffer17>>2] = $132;
     (_EmitErr(77,$vararg_buffer17)|0);
     break;
    }
    $133 = $type;
    $134 = ((($133)) + 1|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $initstate;
    $138 = $137 | $136;
    $initstate = $138;
    $139 = $type;
    $140 = ((($139)) + 1|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    do {
     switch ($142|0) {
     case 1:  {
      $143 = $dir;
      $144 = ((($143)) + 60|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ((($145)) + 67|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147 & -2;
      $149 = $148 | 1;
      HEAP8[$146>>0] = $149;
      break L28;
      break;
     }
     case 2:  {
      $150 = $type;
      $151 = HEAP8[$150>>0]|0;
      $152 = $dir;
      $153 = ((($152)) + 60|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ((($154)) + 66|0);
      HEAP8[$155>>0] = $151;
      break L28;
      break;
     }
     case 130:  {
      $156 = HEAP32[(6100)>>2]|0;
      $157 = ($156|0)==(1);
      $158 = HEAP32[$1>>2]|0;
      if ($157) {
       $159 = $2;
       $160 = (($159) + ($158<<4)|0);
       $161 = ((($160)) + 4|0);
       $162 = HEAP32[$161>>2]|0;
       HEAP32[$vararg_buffer20>>2] = $162;
       (_EmitErr(223,$vararg_buffer20)|0);
       $163 = HEAP32[(616)>>2]|0;
       HEAP32[$1>>2] = $163;
       break L28;
      }
      $164 = (($158) + 1)|0;
      HEAP32[$1>>2] = $164;
      $165 = HEAP32[$1>>2]|0;
      $166 = $2;
      $167 = (($166) + ($165<<4)|0);
      $168 = HEAP8[$167>>0]|0;
      $169 = $168&255;
      $170 = ($169|0)!=(40);
      if ($170) {
       HEAP32[$vararg_buffer23>>2] = 108305;
       (_EmitErr(230,$vararg_buffer23)|0);
       break L28;
      }
      $171 = HEAP32[$1>>2]|0;
      $172 = (($171) + 1)|0;
      HEAP32[$1>>2] = $172;
      $173 = $2;
      $174 = HEAP32[(616)>>2]|0;
      $175 = (_EvalOperand($1,$173,$174,$opndx,0)|0);
      $176 = ($175|0)==(-1);
      if ($176) {
       break L28;
      }
      $177 = HEAP32[$1>>2]|0;
      $178 = $2;
      $179 = (($178) + ($177<<4)|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180&255;
      $182 = ($181|0)!=(41);
      if ($182) {
       HEAP32[$vararg_buffer26>>2] = 108307;
       (_EmitErr(230,$vararg_buffer26)|0);
       break L28;
      }
      $183 = ((($opndx)) + 40|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ($184|0)!=(0);
      if ($185) {
       (_EmitError(65)|0);
       break L28;
      }
      $temp = 1;
      $temp2 = 0;
      while(1) {
       $186 = $temp;
       $187 = HEAP32[$opndx>>2]|0;
       $188 = ($186|0)<($187|0);
       $189 = $temp;
       $190 = ($189|0)<(8192);
       $191 = $188 ? $190 : 0;
       $192 = $temp;
       if (!($191)) {
        break;
       }
       $193 = $192 << 1;
       $temp = $193;
       $194 = $temp2;
       $195 = (($194) + 1)|0;
       $temp2 = $195;
      }
      $196 = HEAP32[$opndx>>2]|0;
      $197 = ($192|0)!=($196|0);
      if ($197) {
       $198 = HEAP32[$opndx>>2]|0;
       HEAP32[$vararg_buffer29>>2] = $198;
       (_EmitErr(129,$vararg_buffer29)|0);
      }
      $199 = $temp2;
      $200 = $199&255;
      $201 = $dir;
      $202 = ((($201)) + 60|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ((($203)) + 66|0);
      HEAP8[$204>>0] = $200;
      break L28;
      break;
     }
     case 4:  {
      $205 = $type;
      $206 = HEAP8[$205>>0]|0;
      $207 = $dir;
      $208 = ((($207)) + 60|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ((($209)) + 68|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = $206 & 7;
      $213 = $211 & -8;
      $214 = $213 | $212;
      HEAP8[$210>>0] = $214;
      break L28;
      break;
     }
     case 132:  {
      $215 = $type;
      $216 = HEAP8[$215>>0]|0;
      $217 = $dir;
      $218 = ((($217)) + 60|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($219)) + 68|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $216 & 7;
      $223 = $221 & -8;
      $224 = $223 | $222;
      HEAP8[$220>>0] = $224;
      $225 = $dir;
      $226 = ((($225)) + 60|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ((($227)) + 66|0);
      HEAP8[$228>>0] = -1;
      $229 = HEAP32[$1>>2]|0;
      $230 = (($229) + 1)|0;
      HEAP32[$1>>2] = $230;
      $231 = $2;
      $232 = HEAP32[(616)>>2]|0;
      $233 = (_EvalOperand($1,$231,$232,$opndx,0)|0);
      $234 = ($233|0)!=(-1);
      if (!($234)) {
       break L28;
      }
      $235 = ((($opndx)) + 40|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = ($236|0)==(0);
      if ($237) {
       $238 = HEAP32[$opndx>>2]|0;
       $239 = $238&65535;
       $240 = $dir;
       $241 = ((($240)) + 60|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = ((($242)) + 56|0);
       HEAP16[$243>>1] = $239;
       $244 = $dir;
       $245 = ((($244)) + 60|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ((($246)) + 60|0);
       HEAP32[$247>>2] = 0;
       break L28;
      } else {
       (_EmitError(65)|0);
       break L28;
      }
      break;
     }
     case 196:  {
      $248 = HEAP32[(6100)>>2]|0;
      $249 = ($248|0)!=(2);
      $250 = HEAP32[(6100)>>2]|0;
      $251 = ($250|0)!=(1);
      $or$cond = $249 & $251;
      $252 = HEAP32[$1>>2]|0;
      if ($or$cond) {
       $253 = $2;
       $254 = (($253) + ($252<<4)|0);
       $255 = ((($254)) + 4|0);
       $256 = HEAP32[$255>>2]|0;
       HEAP32[$vararg_buffer32>>2] = $256;
       (_EmitErr(224,$vararg_buffer32)|0);
       $257 = HEAP32[(616)>>2]|0;
       HEAP32[$1>>2] = $257;
       break L28;
      }
      $258 = (($252) + 1)|0;
      HEAP32[$1>>2] = $258;
      $259 = HEAP32[$1>>2]|0;
      $260 = $2;
      $261 = (($260) + ($259<<4)|0);
      $262 = HEAP8[$261>>0]|0;
      $263 = $262&255;
      $264 = ($263|0)!=(40);
      if ($264) {
       HEAP32[$vararg_buffer35>>2] = 108305;
       (_EmitErr(230,$vararg_buffer35)|0);
       break L28;
      }
      $265 = HEAP32[$1>>2]|0;
      $266 = (($265) + 1)|0;
      HEAP32[$1>>2] = $266;
      $267 = $2;
      $268 = HEAP32[(616)>>2]|0;
      $269 = (_EvalOperand($1,$267,$268,$opndx,0)|0);
      $270 = ($269|0)==(-1);
      if ($270) {
       break L28;
      }
      $271 = ((($opndx)) + 40|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = ($272|0)!=(0);
      if ($273) {
       (_EmitError(65)|0);
       $274 = HEAP32[(616)>>2]|0;
       HEAP32[$1>>2] = $274;
       break L28;
      }
      $275 = HEAP32[$opndx>>2]|0;
      $276 = ($275|0)<(1);
      if ($276) {
       label = 58;
      } else {
       $277 = HEAP32[$opndx>>2]|0;
       $278 = ($277|0)>(6);
       if ($278) {
        label = 58;
       } else {
        $279 = HEAP32[$opndx>>2]|0;
        $280 = ($279|0)==(5);
        if ($280) {
         $281 = HEAP32[$1>>2]|0;
         $282 = $2;
         $283 = (($282) + ($281<<4)|0);
         $284 = HEAP8[$283>>0]|0;
         $285 = $284&255;
         $286 = ($285|0)!=(44);
         $287 = HEAP32[$1>>2]|0;
         if ($286) {
          $288 = $2;
          $289 = (($288) + ($287<<4)|0);
          $290 = ((($289)) + 12|0);
          $291 = HEAP32[$290>>2]|0;
          HEAP32[$vararg_buffer41>>2] = $291;
          (_EmitErr(39,$vararg_buffer41)|0);
          $292 = HEAP32[(616)>>2]|0;
          HEAP32[$1>>2] = $292;
          break L28;
         }
         $293 = (($287) + 1)|0;
         HEAP32[$1>>2] = $293;
         $294 = HEAP32[$1>>2]|0;
         $295 = $2;
         $296 = (($295) + ($294<<4)|0);
         $297 = HEAP8[$296>>0]|0;
         $298 = $297&255;
         $299 = ($298|0)!=(8);
         $300 = HEAP32[$1>>2]|0;
         $301 = $2;
         $302 = (($301) + ($300<<4)|0);
         $303 = ((($302)) + 4|0);
         $304 = HEAP32[$303>>2]|0;
         if ($299) {
          HEAP32[$vararg_buffer44>>2] = $304;
          (_EmitErr(209,$vararg_buffer44)|0);
          $305 = HEAP32[(616)>>2]|0;
          HEAP32[$1>>2] = $305;
          break L28;
         }
         $306 = (_SymFind($304)|0);
         $sym2 = $306;
         $307 = $sym2;
         $308 = ($307|0)==(0|0);
         do {
          if ($308) {
           label = 68;
          } else {
           $309 = $sym2;
           $310 = ((($309)) + 16|0);
           $311 = HEAP32[$310>>2]|0;
           $312 = ($311|0)!=(3);
           if ($312) {
            label = 68;
            break;
           }
           $313 = $sym2;
           $314 = ((($313)) + 60|0);
           $315 = HEAP32[$314>>2]|0;
           $316 = ((($315)) + 68|0);
           $317 = HEAP8[$316>>0]|0;
           $318 = ($317&255) >>> 3;
           $319 = $318 & 7;
           $320 = $319&255;
           $321 = ($320|0)==(0);
           if ($321) {
            label = 68;
            break;
           }
           $322 = $sym2;
           $323 = ((($322)) + 60|0);
           $324 = HEAP32[$323>>2]|0;
           $325 = ((($324)) + 68|0);
           $326 = HEAP8[$325>>0]|0;
           $327 = ($326&255) >>> 3;
           $328 = $327 & 7;
           $329 = $328&255;
           $330 = ($329|0)==(5);
           if ($330) {
            label = 68;
            break;
           }
           $336 = $sym2;
           $337 = ((($336)) + 60|0);
           $338 = HEAP32[$337>>2]|0;
           $339 = ((($338)) + 40|0);
           $340 = HEAP32[$339>>2]|0;
           $341 = $340&65535;
           $342 = $dir;
           $343 = ((($342)) + 60|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = ((($344)) + 56|0);
           HEAP16[$345>>1] = $341;
          }
         } while(0);
         if ((label|0) == 68) {
          label = 0;
          $331 = HEAP32[$1>>2]|0;
          $332 = $2;
          $333 = (($332) + ($331<<4)|0);
          $334 = ((($333)) + 4|0);
          $335 = HEAP32[$334>>2]|0;
          HEAP32[$vararg_buffer47>>2] = $335;
          (_EmitErr(25,$vararg_buffer47)|0);
         }
         $346 = HEAP32[$1>>2]|0;
         $347 = (($346) + 1)|0;
         HEAP32[$1>>2] = $347;
        }
       }
      }
      if ((label|0) == 58) {
       label = 0;
       HEAP32[$vararg_buffer38>>2] = 108309;
       (_EmitErr(24,$vararg_buffer38)|0);
      }
      $348 = HEAP32[$1>>2]|0;
      $349 = $2;
      $350 = (($349) + ($348<<4)|0);
      $351 = HEAP8[$350>>0]|0;
      $352 = $351&255;
      $353 = ($352|0)!=(41);
      if ($353) {
       HEAP32[$vararg_buffer50>>2] = 108307;
       (_EmitErr(230,$vararg_buffer50)|0);
       break L28;
      } else {
       $354 = HEAP32[$opndx>>2]|0;
       $355 = $354&255;
       $356 = $dir;
       $357 = ((($356)) + 60|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = ((($358)) + 68|0);
       $360 = HEAP8[$359>>0]|0;
       $361 = $355 & 7;
       $362 = ($361 << 3)&255;
       $363 = $360 & -57;
       $364 = $363 | $362;
       HEAP8[$359>>0] = $364;
       $365 = $type;
       $366 = HEAP8[$365>>0]|0;
       $367 = $dir;
       $368 = ((($367)) + 60|0);
       $369 = HEAP32[$368>>2]|0;
       $370 = ((($369)) + 68|0);
       $371 = HEAP8[$370>>0]|0;
       $372 = $366 & 7;
       $373 = $371 & -8;
       $374 = $373 | $372;
       HEAP8[$370>>0] = $374;
       break L28;
      }
      break;
     }
     case 136: case 8:  {
      $375 = $type;
      $376 = ((($375)) + 1|0);
      $377 = HEAP8[$376>>0]|0;
      $378 = $377&255;
      $379 = ($378|0)==(136);
      if ($379) {
       _DefineFlatGroup();
       $380 = HEAP8[(557)>>0]|0;
       $381 = $380&255;
       $382 = ($381|0)>(0);
       $383 = HEAP8[(557)>>0]|0;
       $384 = $383&255;
       $385 = $382 ? $384 : 1;
       $386 = $385&255;
       $387 = $dir;
       $388 = ((($387)) + 60|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = ((($389)) + 64|0);
       HEAP8[$390>>0] = $386;
       $391 = HEAP32[(588)>>2]|0;
       $392 = $dir;
       $393 = ((($392)) + 60|0);
       $394 = HEAP32[$393>>2]|0;
       HEAP32[$394>>2] = $391;
       break L28;
      } else {
       $395 = $type;
       $396 = HEAP8[$395>>0]|0;
       $397 = $dir;
       $398 = ((($397)) + 60|0);
       $399 = HEAP32[$398>>2]|0;
       $400 = ((($399)) + 64|0);
       HEAP8[$400>>0] = $396;
       break L28;
      }
      break;
     }
     case 160:  {
      $401 = $dir;
      $402 = ((($401)) + 60|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ((($403)) + 67|0);
      $405 = HEAP8[$404>>0]|0;
      $406 = $405 & -3;
      $407 = $406 | 2;
      HEAP8[$404>>0] = $407;
      break L28;
      break;
     }
     case 32:  {
      $408 = HEAP32[(6100)>>2]|0;
      $409 = ($408|0)==(1);
      if (!($409)) {
       $410 = HEAP32[(6100)>>2]|0;
       $411 = ($410|0)==(0);
       $412 = HEAP32[(524)>>2]|0;
       $413 = ($412|0)!=(2);
       $or$cond3 = $411 & $413;
       if (!($or$cond3)) {
        $419 = $type;
        $420 = HEAP8[$419>>0]|0;
        $421 = $420&255;
        $422 = $newcharacteristics;
        $423 = $422&255;
        $424 = $423 | $421;
        $425 = $424&255;
        $newcharacteristics = $425;
        break L28;
       }
      }
      $414 = HEAP32[$1>>2]|0;
      $415 = $2;
      $416 = (($415) + ($414<<4)|0);
      $417 = ((($416)) + 4|0);
      $418 = HEAP32[$417>>2]|0;
      HEAP32[$vararg_buffer53>>2] = $418;
      (_EmitErr(224,$vararg_buffer53)|0);
      break L28;
      break;
     }
     case 16:  {
      $426 = HEAP32[(6100)>>2]|0;
      $427 = ($426|0)==(1);
      if (!($427)) {
       $428 = HEAP32[(6100)>>2]|0;
       $429 = ($428|0)==(0);
       $430 = HEAP32[(524)>>2]|0;
       $431 = ($430|0)!=(2);
       $or$cond5 = $429 & $431;
       if (!($or$cond5)) {
        $438 = HEAP32[$1>>2]|0;
        $439 = (($438) + 1)|0;
        HEAP32[$1>>2] = $439;
        $440 = HEAP32[$1>>2]|0;
        $441 = $2;
        $442 = (($441) + ($440<<4)|0);
        $443 = HEAP8[$442>>0]|0;
        $444 = $443&255;
        $445 = ($444|0)!=(40);
        if ($445) {
         HEAP32[$vararg_buffer59>>2] = 108305;
         (_EmitErr(230,$vararg_buffer59)|0);
         break L28;
        }
        $446 = HEAP32[$1>>2]|0;
        $447 = (($446) + 1)|0;
        HEAP32[$1>>2] = $447;
        $448 = HEAP32[$1>>2]|0;
        $449 = $2;
        $450 = (($449) + ($448<<4)|0);
        $451 = HEAP8[$450>>0]|0;
        $452 = $451&255;
        $453 = ($452|0)!=(9);
        do {
         if (!($453)) {
          $454 = HEAP32[$1>>2]|0;
          $455 = $2;
          $456 = (($455) + ($454<<4)|0);
          $457 = ((($456)) + 1|0);
          $458 = HEAP8[$457>>0]|0;
          $459 = $458 << 24 >> 24;
          $460 = ($459|0)!=(34);
          if ($460) {
           $461 = HEAP32[$1>>2]|0;
           $462 = $2;
           $463 = (($462) + ($461<<4)|0);
           $464 = ((($463)) + 1|0);
           $465 = HEAP8[$464>>0]|0;
           $466 = $465 << 24 >> 24;
           $467 = ($466|0)!=(39);
           if ($467) {
            break;
           }
          }
          $470 = HEAP32[$1>>2]|0;
          $temp = $470;
          $471 = HEAP32[$1>>2]|0;
          $472 = (($471) + 1)|0;
          HEAP32[$1>>2] = $472;
          $473 = HEAP32[$1>>2]|0;
          $474 = $2;
          $475 = (($474) + ($473<<4)|0);
          $476 = HEAP8[$475>>0]|0;
          $477 = $476&255;
          $478 = ($477|0)!=(41);
          if ($478) {
           HEAP32[$vararg_buffer65>>2] = 108307;
           (_EmitErr(230,$vararg_buffer65)|0);
           break L28;
          }
          $479 = $is_old;
          $480 = ($479<<24>>24)!=(0);
          if (!($480)) {
           $521 = $temp;
           $522 = $2;
           $523 = (($522) + ($521<<4)|0);
           $524 = ((($523)) + 8|0);
           $525 = HEAP32[$524>>2]|0;
           $526 = (($525) + 1)|0;
           $527 = (_LclAlloc($526)|0);
           $528 = $dir;
           $529 = ((($528)) + 60|0);
           $530 = HEAP32[$529>>2]|0;
           $531 = ((($530)) + 60|0);
           HEAP32[$531>>2] = $527;
           $532 = $dir;
           $533 = ((($532)) + 60|0);
           $534 = HEAP32[$533>>2]|0;
           $535 = ((($534)) + 60|0);
           $536 = HEAP32[$535>>2]|0;
           $537 = $temp;
           $538 = $2;
           $539 = (($538) + ($537<<4)|0);
           $540 = ((($539)) + 4|0);
           $541 = HEAP32[$540>>2]|0;
           $542 = ((($541)) + 1|0);
           $543 = $temp;
           $544 = $2;
           $545 = (($544) + ($543<<4)|0);
           $546 = ((($545)) + 8|0);
           $547 = HEAP32[$546>>2]|0;
           _memcpy(($536|0),($542|0),($547|0))|0;
           $548 = $dir;
           $549 = ((($548)) + 60|0);
           $550 = HEAP32[$549>>2]|0;
           $551 = ((($550)) + 60|0);
           $552 = HEAP32[$551>>2]|0;
           $553 = $temp;
           $554 = $2;
           $555 = (($554) + ($553<<4)|0);
           $556 = ((($555)) + 8|0);
           $557 = HEAP32[$556>>2]|0;
           $558 = (($552) + ($557)|0);
           HEAP8[$558>>0] = 0;
           break L28;
          }
          $481 = $dir;
          $482 = ((($481)) + 60|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = ((($483)) + 60|0);
          $485 = HEAP32[$484>>2]|0;
          $486 = ($485|0)==(0|0);
          do {
           if (!($486)) {
            $487 = $temp;
            $488 = $2;
            $489 = (($488) + ($487<<4)|0);
            $490 = ((($489)) + 8|0);
            $491 = HEAP32[$490>>2]|0;
            $492 = $dir;
            $493 = ((($492)) + 60|0);
            $494 = HEAP32[$493>>2]|0;
            $495 = ((($494)) + 60|0);
            $496 = HEAP32[$495>>2]|0;
            $497 = (_strlen($496)|0);
            $498 = ($491|0)!=($497|0);
            if ($498) {
             break;
            }
            $499 = $dir;
            $500 = ((($499)) + 60|0);
            $501 = HEAP32[$500>>2]|0;
            $502 = ((($501)) + 60|0);
            $503 = HEAP32[$502>>2]|0;
            $504 = $temp;
            $505 = $2;
            $506 = (($505) + ($504<<4)|0);
            $507 = ((($506)) + 4|0);
            $508 = HEAP32[$507>>2]|0;
            $509 = ((($508)) + 1|0);
            $510 = $temp;
            $511 = $2;
            $512 = (($511) + ($510<<4)|0);
            $513 = ((($512)) + 8|0);
            $514 = HEAP32[$513>>2]|0;
            $515 = (_memcmp($503,$509,$514)|0);
            $516 = ($515|0)!=(0);
            if (!($516)) {
             break L28;
            }
           }
          } while(0);
          $517 = $dir;
          $518 = ((($517)) + 4|0);
          $519 = HEAP32[$518>>2]|0;
          $520 = (_MsgGetEx(13)|0);
          HEAP32[$vararg_buffer68>>2] = $519;
          $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
          HEAP32[$vararg_ptr71>>2] = $520;
          (_EmitErr(78,$vararg_buffer68)|0);
          break L28;
         }
        } while(0);
        $468 = $token;
        HEAP32[$vararg_buffer62>>2] = $468;
        (_EmitErr(209,$vararg_buffer62)|0);
        $469 = HEAP32[(616)>>2]|0;
        HEAP32[$1>>2] = $469;
        break L28;
       }
      }
      $432 = HEAP32[$1>>2]|0;
      $433 = $2;
      $434 = (($433) + ($432<<4)|0);
      $435 = ((($434)) + 4|0);
      $436 = HEAP32[$435>>2]|0;
      HEAP32[$vararg_buffer56>>2] = $436;
      (_EmitErr(224,$vararg_buffer56)|0);
      $437 = HEAP32[(616)>>2]|0;
      HEAP32[$1>>2] = $437;
      break L28;
      break;
     }
     default: {
      break L28;
     }
     }
    } while(0);
   }
  } while(0);
  $559 = HEAP32[$1>>2]|0;
  $560 = (($559) + 1)|0;
  HEAP32[$1>>2] = $560;
 }
 $561 = $dir;
 $562 = ((($561)) + 60|0);
 $563 = HEAP32[$562>>2]|0;
 $564 = ((($563)) + 44|0);
 $565 = HEAP32[$564>>2]|0;
 $566 = ($565|0)!=(1);
 if ($566) {
  $567 = $dir;
  $568 = $dir;
  $569 = ((($568)) + 60|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = ((($570)) + 52|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = (_TypeFromClassName($567,$572)|0);
  $res = $573;
  $574 = $res;
  $575 = ($574|0)!=(0);
  if ($575) {
   $576 = $res;
   $577 = $dir;
   $578 = ((($577)) + 60|0);
   $579 = HEAP32[$578>>2]|0;
   $580 = ((($579)) + 44|0);
   HEAP32[$580>>2] = $576;
  }
 }
 $581 = $is_old;
 $582 = ($581<<24>>24)!=(0);
 if ($582) {
  $txt = 0;
  $583 = $oldalign;
  $584 = $583 << 24 >> 24;
  $585 = $dir;
  $586 = ((($585)) + 60|0);
  $587 = HEAP32[$586>>2]|0;
  $588 = ((($587)) + 66|0);
  $589 = HEAP8[$588>>0]|0;
  $590 = $589&255;
  $591 = ($584|0)!=($590|0);
  do {
   if ($591) {
    $txt = 8;
   } else {
    $592 = $oldcombine;
    $593 = $592 << 24 >> 24;
    $594 = $dir;
    $595 = ((($594)) + 60|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = ((($596)) + 68|0);
    $598 = HEAP8[$597>>0]|0;
    $599 = $598 & 7;
    $600 = $599&255;
    $601 = ($593|0)!=($600|0);
    if ($601) {
     $txt = 9;
     break;
    }
    $602 = $oldOfssize;
    $603 = $602&255;
    $604 = $dir;
    $605 = ((($604)) + 60|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = ((($606)) + 64|0);
    $608 = HEAP8[$607>>0]|0;
    $609 = $608&255;
    $610 = ($603|0)!=($609|0);
    if ($610) {
     $txt = 10;
     break;
    }
    $611 = $newcharacteristics;
    $612 = $611&255;
    $613 = ($612|0)!=(0);
    if ($613) {
     $614 = $newcharacteristics;
     $615 = $614&255;
     $616 = $dir;
     $617 = ((($616)) + 60|0);
     $618 = HEAP32[$617>>2]|0;
     $619 = ((($618)) + 65|0);
     $620 = HEAP8[$619>>0]|0;
     $621 = $620&255;
     $622 = ($615|0)!=($621|0);
     if ($622) {
      $txt = 12;
     }
    }
   }
  } while(0);
  $623 = $txt;
  $624 = ($623|0)!=(0);
  if ($624) {
   $625 = $dir;
   $626 = ((($625)) + 4|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = $txt;
   $629 = (_MsgGetEx($628)|0);
   HEAP32[$vararg_buffer72>>2] = $627;
   $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
   HEAP32[$vararg_ptr75>>2] = $629;
   (_EmitErr(78,$vararg_buffer72)|0);
  }
 } else {
  $630 = $sym;
  $631 = ((($630)) + 24|0);
  $632 = HEAP16[$631>>1]|0;
  $633 = $632 & -3;
  $634 = $633 | 2;
  HEAP16[$631>>1] = $634;
  $635 = $sym;
  $636 = $sym;
  $637 = ((($636)) + 12|0);
  HEAP32[$637>>2] = $635;
  $638 = $sym;
  $639 = ((($638)) + 8|0);
  HEAP32[$639>>2] = 0;
  $640 = $dir;
  $641 = ((($640)) + 60|0);
  $642 = HEAP32[$641>>2]|0;
  $643 = ((($642)) + 68|0);
  $644 = HEAP8[$643>>0]|0;
  $645 = ($644&255) >>> 3;
  $646 = $645 & 7;
  $647 = $646&255;
  $648 = ($647|0)!=(0);
  $649 = HEAP32[(6100)>>2]|0;
  $650 = ($649|0)==(1);
  $or$cond7 = $648 & $650;
  if (!($or$cond7)) {
   $651 = HEAP32[(328)>>2]|0;
   $652 = (($651) + 1)|0;
   HEAP32[(328)>>2] = $652;
   $653 = $dir;
   $654 = ((($653)) + 60|0);
   $655 = HEAP32[$654>>2]|0;
   $656 = ((($655)) + 40|0);
   HEAP32[$656>>2] = $652;
   $657 = $sym;
   _AddLnameItem($657);
  }
 }
 $658 = $newcharacteristics;
 $659 = ($658<<24>>24)!=(0);
 if ($659) {
  $660 = $newcharacteristics;
  $661 = $dir;
  $662 = ((($661)) + 60|0);
  $663 = HEAP32[$662>>2]|0;
  $664 = ((($663)) + 65|0);
  HEAP8[$664>>0] = $660;
 }
 $665 = $dir;
 _push_seg($665);
 $666 = HEAP32[(560)>>2]|0;
 $667 = $666 >>> 11;
 $668 = $667 & 1;
 $669 = ($668|0)!=(0);
 if ($669) {
  _LstWrite(7,0,0);
 }
 $670 = (_SetOfssize()|0);
 $0 = $670;
 $671 = $0;
 STACKTOP = sp;return ($671|0);
}
function _SortSegments($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $changed = 0, $curr = 0, $prev = 0, $swap = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $changed = 1;
 L1: while(1) {
  $1 = $changed;
  $2 = $1&255;
  $3 = ($2|0)==(1);
  if (!($3)) {
   break;
  }
  $prev = 0;
  $changed = 0;
  $4 = HEAP32[(15420)>>2]|0;
  $curr = $4;
  while(1) {
   $5 = $curr;
   $6 = ($5|0)!=(0|0);
   if (!($6)) {
    continue L1;
   }
   $7 = $curr;
   $8 = ((($7)) + 64|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0|0);
   if (!($10)) {
    continue L1;
   }
   $swap = 0;
   $11 = $0;
   L8: do {
    switch ($11|0) {
    case 0:  {
     $12 = $curr;
     $13 = ((($12)) + 60|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($14)) + 32|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $curr;
     $18 = ((($17)) + 64|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 60|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 32|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($16>>>0)>($23>>>0);
     if ($24) {
      $swap = 1;
     }
     break;
    }
    case 1:  {
     $25 = $curr;
     $26 = ((($25)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $curr;
     $29 = ((($28)) + 64|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($30)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (_strcmp($27,$32)|0);
     $34 = ($33|0)>(0);
     if ($34) {
      $swap = 1;
     }
     break;
    }
    case 2:  {
     $35 = $curr;
     $36 = ((($35)) + 60|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($37)) + 48|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $curr;
     $41 = ((($40)) + 64|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ((($42)) + 60|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($44)) + 48|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($39|0)>($46|0);
     if (!($47)) {
      $48 = $curr;
      $49 = ((($48)) + 60|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($50)) + 48|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $curr;
      $54 = ((($53)) + 64|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ((($55)) + 60|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ((($57)) + 48|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($52|0)==($59|0);
      if (!($60)) {
       break L8;
      }
      $61 = $curr;
      $62 = ((($61)) + 4|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = $curr;
      $65 = ((($64)) + 64|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($66)) + 4|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (_strcasecmp($63,$68)|0);
      $70 = ($69|0)>(0);
      if (!($70)) {
       break L8;
      }
     }
     $swap = 1;
     break;
    }
    default: {
    }
    }
   } while(0);
   $71 = $swap;
   $72 = ($71<<24>>24)!=(0);
   if ($72) {
    $73 = $curr;
    $74 = ((($73)) + 64|0);
    $75 = HEAP32[$74>>2]|0;
    $tmp = $75;
    $changed = 1;
    $76 = $prev;
    $77 = ($76|0)==(0|0);
    $78 = $tmp;
    if ($77) {
     HEAP32[(15420)>>2] = $78;
    } else {
     $79 = $prev;
     $80 = ((($79)) + 64|0);
     HEAP32[$80>>2] = $78;
    }
    $81 = $tmp;
    $82 = ((($81)) + 64|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $curr;
    $85 = ((($84)) + 64|0);
    HEAP32[$85>>2] = $83;
    $86 = $curr;
    $87 = $tmp;
    $88 = ((($87)) + 64|0);
    HEAP32[$88>>2] = $86;
   }
   $89 = $curr;
   $prev = $89;
   $90 = $curr;
   $91 = ((($90)) + 64|0);
   $92 = HEAP32[$91>>2]|0;
   $curr = $92;
  }
 }
 STACKTOP = sp;return;
}
function _SegmentModuleExit() {
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(512)>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  _ModelSimSegmExit();
 }
 $2 = HEAP32[(584)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return 0;
 }
 $4 = HEAP32[(584)>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 (_EmitErr(80,$vararg_buffer)|0);
 $$old = HEAP32[(584)>>2]|0;
 $$old1 = ($$old|0)!=(0|0);
 if (!($$old1)) {
  STACKTOP = sp;return 0;
 }
 while(1) {
  $7 = HEAP32[(584)>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_CloseSeg($9)|0);
  $11 = ($10|0)==(0);
  $12 = HEAP32[(584)>>2]|0;
  $13 = ($12|0)!=(0|0);
  $or$cond = $11 & $13;
  if (!($or$cond)) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _SegmentFini() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _FreeLnameQueue();
 return;
}
function _SegmentInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $i = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 HEAP32[(584)>>2] = 0;
 HEAP32[33484>>2] = 0;
 $1 = $0;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[33488>>2] = 0;
  HEAP32[33492>>2] = 0;
 }
 $3 = HEAP32[(592)>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = HEAP32[(6100)>>2]|0;
 $6 = ($5|0)!=(1);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = HEAP32[(15420)>>2]|0;
  $curr = $7;
  HEAP32[33492>>2] = 0;
  while(1) {
   $8 = $curr;
   $9 = ($8|0)!=(0|0);
   if (!($9)) {
    break;
   }
   $10 = $curr;
   $11 = ((($10)) + 60|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 67|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14&255) >>> 4;
   $16 = $15 & 1;
   $17 = ($16<<24>>24)!=(0);
   if (!($17)) {
    $18 = $curr;
    $19 = ((($18)) + 60|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(0);
    if ($23) {
     $24 = $curr;
     $25 = ((($24)) + 36|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $curr;
     $28 = ((($27)) + 60|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($29)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($26) - ($31))|0;
     $i = $32;
     $33 = $curr;
     $34 = ((($33)) + 60|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($35)) + 44|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = $i;
      $40 = $i;
      $41 = $40 >>> 2;
      $42 = (($39) + ($41))|0;
      $i = $42;
     }
     $43 = $i;
     $44 = HEAP32[33492>>2]|0;
     $45 = (($44) + ($43))|0;
     HEAP32[33492>>2] = $45;
    }
   }
   $46 = $curr;
   $47 = ((($46)) + 64|0);
   $48 = HEAP32[$47>>2]|0;
   $curr = $48;
  }
  $49 = HEAP32[33492>>2]|0;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = HEAP32[33492>>2]|0;
   $52 = (_LclAlloc($51)|0);
   HEAP32[(592)>>2] = $52;
  }
 }
 $53 = HEAP32[(15420)>>2]|0;
 $curr = $53;
 $54 = HEAP32[(592)>>2]|0;
 $p = $54;
 while(1) {
  $55 = $curr;
  $56 = ($55|0)!=(0|0);
  if (!($56)) {
   break;
  }
  $57 = $curr;
  $58 = ((($57)) + 60|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 8|0);
  HEAP32[$60>>2] = 0;
  $61 = $curr;
  $62 = ((($61)) + 60|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + 67|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = ($65&255) >>> 4;
  $67 = $66 & 1;
  $68 = ($67<<24>>24)!=(0);
  if (!($68)) {
   $69 = $curr;
   $70 = ((($69)) + 60|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)!=(0);
   do {
    if ($74) {
     $75 = HEAP32[(6100)>>2]|0;
     $76 = ($75|0)==(1);
     if ($76) {
      $77 = $curr;
      $78 = ((($77)) + 60|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 12|0);
      HEAP32[$80>>2] = 108313;
      break;
     } else {
      $81 = $p;
      $82 = $curr;
      $83 = ((($82)) + 60|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($84)) + 12|0);
      HEAP32[$85>>2] = $81;
      $86 = $curr;
      $87 = ((($86)) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $curr;
      $90 = ((($89)) + 60|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ((($91)) + 4|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($88) - ($93))|0;
      $i = $94;
      $95 = $i;
      $96 = $p;
      $97 = (($96) + ($95)|0);
      $p = $97;
      break;
     }
    }
   } while(0);
   $98 = $curr;
   $99 = ((($98)) + 60|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 68|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102 & 7;
   $104 = $103&255;
   $105 = ($104|0)!=(5);
   if ($105) {
    $106 = $curr;
    $107 = ((($106)) + 36|0);
    HEAP32[$107>>2] = 0;
   }
   $108 = HEAP32[(6100)>>2]|0;
   $109 = ($108|0)==(1);
   if ($109) {
    $110 = $curr;
    $111 = ((($110)) + 60|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ((($112)) + 4|0);
    HEAP32[$113>>2] = 0;
    $114 = $curr;
    $115 = ((($114)) + 60|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($116)) + 67|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 & -9;
    HEAP8[$117>>0] = $119;
   }
   $120 = $curr;
   $121 = ((($120)) + 60|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($122)) + 16|0);
   HEAP32[$123>>2] = 0;
   $124 = $curr;
   $125 = ((($124)) + 60|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($126)) + 24|0);
   HEAP32[$127>>2] = 0;
   $128 = $curr;
   $129 = ((($128)) + 60|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($130)) + 24|0);
   $132 = ((($131)) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  $133 = $curr;
  $134 = ((($133)) + 64|0);
  $135 = HEAP32[$134>>2]|0;
  $curr = $135;
 }
 HEAP8[(556)>>0] = 0;
 $136 = $0;
 $137 = ($136|0)!=(0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = HEAP8[87036>>0]|0;
 $139 = $138&255;
 $140 = ($139|0)==(1);
 if (!($140)) {
  STACKTOP = sp;return;
 }
 $141 = HEAP32[33496>>2]|0;
 HEAP32[(584)>>2] = $141;
 $142 = HEAP32[33500>>2]|0;
 HEAP32[33484>>2] = $142;
 $143 = HEAP32[33484>>2]|0;
 $144 = ($143|0)!=(0);
 if ($144) {
  $145 = HEAP32[33480>>2]|0;
  $146 = HEAP32[33484>>2]|0;
  $147 = $146<<2;
  _memcpy((33504|0),($145|0),($147|0))|0;
 }
 _UpdateCurrSegVars();
 STACKTOP = sp;return;
}
function _SegmentSaveState() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(584)>>2]|0;
 HEAP32[33496>>2] = $0;
 $1 = HEAP32[33484>>2]|0;
 HEAP32[33500>>2] = $1;
 $2 = HEAP32[33484>>2]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[33484>>2]|0;
 $5 = $4<<2;
 $6 = (_LclAlloc($5)|0);
 HEAP32[33480>>2] = $6;
 $7 = HEAP32[33480>>2]|0;
 $8 = HEAP32[33484>>2]|0;
 $9 = $8<<2;
 _memcpy(($7|0),(33504|0),($9|0))|0;
 return;
}
function _CreateGroup($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $grp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $1;
 $3 = (_SymFind($2)|0);
 $grp = $3;
 $4 = $grp;
 $5 = ($4|0)==(0|0);
 if ($5) {
  label = 3;
 } else {
  $6 = $grp;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 3;
  } else {
   $40 = $grp;
   $41 = ((($40)) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(4);
   if ($43) {
    $44 = $1;
    HEAP32[$vararg_buffer>>2] = $44;
    (_EmitErr(143,$vararg_buffer)|0);
    $0 = 0;
    $51 = $0;
    STACKTOP = sp;return ($51|0);
   }
  }
 }
 if ((label|0) == 3) {
  $10 = $grp;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = $1;
   $13 = (_SymCreate($12)|0);
   $grp = $13;
  } else {
   $14 = $grp;
   _sym_remove_table(15404,$14);
  }
  $15 = $grp;
  $16 = ((($15)) + 16|0);
  HEAP32[$16>>2] = 4;
  $17 = (_LclAlloc(16)|0);
  $18 = $grp;
  $19 = ((($18)) + 60|0);
  HEAP32[$19>>2] = $17;
  $20 = $grp;
  $21 = ((($20)) + 60|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$22>>2] = 0;
  $23 = $grp;
  $24 = ((($23)) + 60|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 12|0);
  HEAP32[$26>>2] = 0;
  $27 = $grp;
  _sym_add_table((15428),$27);
  $28 = $grp;
  $29 = ((($28)) + 24|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 & -257;
  $32 = $31 | 256;
  HEAP16[$29>>1] = $32;
  $33 = HEAP32[33488>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[33488>>2] = $34;
  $35 = $grp;
  $36 = ((($35)) + 60|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 4|0);
  HEAP32[$38>>2] = $34;
  $39 = $grp;
  _AddLnameItem($39);
 }
 $45 = $grp;
 $46 = ((($45)) + 24|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 & -3;
 $49 = $48 | 2;
 HEAP16[$46>>1] = $49;
 $50 = $grp;
 $0 = $50;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _CreateSegment($seg,$name,$add_global) {
 $seg = $seg|0;
 $name = $name|0;
 $add_global = $add_global|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $seg;
 $1 = $name;
 $2 = $add_global;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $2;
  $6 = $5&255;
  $7 = ($6|0)!=(0);
  $8 = $1;
  if ($7) {
   $9 = (_SymCreate($8)|0);
   $$sink = $9;
  } else {
   $10 = (_SymAlloc($8)|0);
   $$sink = $10;
  }
  $0 = $$sink;
 } else {
  $11 = $0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = $0;
   _sym_remove_table(15404,$15);
  }
 }
 $16 = $0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $18 = $0;
 $19 = ((($18)) + 16|0);
 HEAP32[$19>>2] = 3;
 $20 = (_LclAlloc(72)|0);
 $21 = $0;
 $22 = ((($21)) + 60|0);
 HEAP32[$22>>2] = $20;
 $23 = $0;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 dest=$25; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $26 = HEAP8[(557)>>0]|0;
 $27 = $0;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 64|0);
 HEAP8[$30>>0] = $26;
 $31 = $0;
 $32 = ((($31)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 66|0);
 HEAP8[$34>>0] = 4;
 $35 = $0;
 $36 = ((($35)) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 68|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39 & -8;
 HEAP8[$38>>0] = $40;
 $41 = $0;
 $42 = ((($41)) + 64|0);
 HEAP32[$42>>2] = 0;
 $43 = HEAP32[(15420)>>2]|0;
 $44 = ($43|0)==(0|0);
 $45 = $0;
 if ($44) {
  HEAP32[(15424)>>2] = $45;
  HEAP32[(15420)>>2] = $45;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $46 = HEAP32[(15424)>>2]|0;
  $47 = ((($46)) + 64|0);
  HEAP32[$47>>2] = $45;
  $48 = $0;
  HEAP32[(15424)>>2] = $48;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _AddLnameItem($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 _QAddItem((340),$1);
 STACKTOP = sp;return;
}
function _SetSegmentClass($seg,$name) {
 $seg = $seg|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clsym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $seg;
 $2 = $name;
 $3 = $2;
 $4 = (_CreateClassLname($3)|0);
 $clsym = $4;
 $5 = $clsym;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = $clsym;
  $8 = $1;
  $9 = ((($8)) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 52|0);
  HEAP32[$11>>2] = $7;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _CloseSeg($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = HEAP32[(584)>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[33696>>2]|0;
  $5 = HEAP32[(584)>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = HEAP32[(584)>>2]|0;
  $10 = ((($9)) + 44|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (FUNCTION_TABLE_iiii[$4 & 255]($7,$8,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $17 = HEAP8[81594>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)!=(0);
   $20 = HEAP32[(6100)>>2]|0;
   $21 = ($20|0)==(1);
   $or$cond = $19 & $21;
   if ($or$cond) {
    _omf_FlushCurrSeg();
    $22 = HEAP8[(6068)>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)==(0);
    if ($24) {
     _omf_OutSelect(0);
    }
   }
   _pop_seg();
   $0 = 0;
   $25 = $0;
   STACKTOP = sp;return ($25|0);
  }
 }
 $15 = $1;
 HEAP32[$vararg_buffer>>2] = $15;
 $16 = (_EmitErr(80,$vararg_buffer)|0);
 $0 = $16;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _SetCurrSeg($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sym = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_SymFind($5)|0);
 $sym = $6;
 $7 = $sym;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $sym;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(3);
  if (!($12)) {
   $17 = $sym;
   $18 = ((($17)) + 24|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 & -3;
   $21 = $20 | 2;
   HEAP16[$18>>1] = $21;
   $22 = HEAP32[(584)>>2]|0;
   $23 = ($22|0)!=(0|0);
   $24 = HEAP32[(6100)>>2]|0;
   $25 = ($24|0)==(1);
   $or$cond = $23 & $25;
   if ($or$cond) {
    _omf_FlushCurrSeg();
    $26 = HEAP8[(6068)>>0]|0;
    $27 = $26&255;
    $28 = ($27|0)==(0);
    if ($28) {
     _omf_OutSelect(0);
    }
   }
   $29 = $sym;
   _push_seg($29);
   $30 = HEAP32[(560)>>2]|0;
   $31 = $30 >>> 11;
   $32 = $31 & 1;
   $33 = ($32|0)!=(0);
   if ($33) {
    _LstWrite(7,0,0);
   }
   $34 = (_SetOfssize()|0);
   $0 = $34;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$vararg_buffer>>2] = $15;
 $16 = (_EmitErr(83,$vararg_buffer)|0);
 $0 = $16;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _UnlinkSeg($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $curr = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dir;
 $1 = HEAP32[(15420)>>2]|0;
 $curr = $1;
 $prev = 0;
 while(1) {
  $2 = $curr;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   label = 10;
   break;
  }
  $4 = $curr;
  $5 = $0;
  $6 = ($4|0)==($5|0);
  if ($6) {
   break;
  }
  $19 = $curr;
  $prev = $19;
  $20 = $curr;
  $21 = ((($20)) + 64|0);
  $22 = HEAP32[$21>>2]|0;
  $curr = $22;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $7 = $prev;
 $8 = ($7|0)==(0|0);
 $9 = $curr;
 $10 = ((($9)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 if ($8) {
  HEAP32[(15420)>>2] = $11;
 } else {
  $12 = $prev;
  $13 = ((($12)) + 64|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = $curr;
 $15 = ((($14)) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $prev;
 HEAP32[(15424)>>2] = $18;
 STACKTOP = sp;return;
}
function _FindToken1073($token,$table,$size) {
 $token = $token|0;
 $table = $table|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $token;
 $2 = $table;
 $3 = $size;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (_strcasecmp($8,$9)|0);
  $11 = ($10|0)==(0);
  $12 = $i;
  if ($11) {
   label = 4;
   break;
  }
  $13 = (($12) + 1)|0;
  $i = $13;
  $14 = $2;
  $15 = ((($14)) + 4|0);
  $2 = $15;
 }
 if ((label|0) == 4) {
  $0 = $12;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _push_seg($seg) {
 $seg = $seg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $seg;
 $1 = HEAP32[33484>>2]|0;
 $2 = ($1|0)>=(20);
 if ($2) {
  (_EmitError(100)|0);
  STACKTOP = sp;return;
 } else {
  $3 = HEAP32[(584)>>2]|0;
  $4 = HEAP32[33484>>2]|0;
  $5 = (33504 + ($4<<2)|0);
  HEAP32[$5>>2] = $3;
  $6 = HEAP32[33484>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[33484>>2] = $7;
  $8 = $0;
  HEAP32[(584)>>2] = $8;
  _UpdateCurrSegVars();
  STACKTOP = sp;return;
 }
}
function _FreeLnameQueue() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[(340)>>2]|0;
 $curr = $0;
 while(1) {
  $1 = $curr;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = $curr;
  $4 = HEAP32[$3>>2]|0;
  $next = $4;
  $5 = $curr;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(11);
  if ($10) {
   $11 = $curr;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   _SymFree($13);
  }
  $14 = $next;
  $curr = $14;
 }
 STACKTOP = sp;return;
}
function _UpdateCurrSegVars() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = (5016);
 $0 = HEAP32[(584)>>2]|0;
 $1 = ($0|0)==(0|0);
 $2 = $info;
 if ($1) {
  HEAP32[$2>>2] = 0;
  $3 = $info;
  $4 = ((($3)) + 5|0);
  HEAP8[$4>>0] = 0;
  $5 = $info;
  $6 = ((($5)) + 4|0);
  HEAP8[$6>>0] = 1;
  $7 = HEAP32[33368>>2]|0;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = 109841;
  STACKTOP = sp;return;
 }
 $9 = ((($2)) + 5|0);
 HEAP8[$9>>0] = 0;
 $10 = $info;
 $11 = ((($10)) + 4|0);
 HEAP8[$11>>0] = 0;
 $12 = HEAP32[(584)>>2]|0;
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 $17 = HEAP32[(584)>>2]|0;
 if ($16) {
  $18 = ((($17)) + 60|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $info;
  HEAP32[$21>>2] = $20;
  $22 = $info;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[(588)>>2]|0;
  $25 = ($23|0)==($24|0);
  if ($25) {
   $26 = $info;
   $27 = ((($26)) + 5|0);
   HEAP8[$27>>0] = 1;
  }
 } else {
  $28 = $info;
  HEAP32[$28>>2] = $17;
 }
 $29 = HEAP32[(584)>>2]|0;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[33368>>2]|0;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _pop_seg() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[33484>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[33484>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[33484>>2] = $3;
 $4 = HEAP32[33484>>2]|0;
 $5 = (33504 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[(584)>>2] = $6;
 _UpdateCurrSegVars();
 return;
}
function _CreateClassLname($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $sym = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $len = $3;
 $4 = $len;
 $5 = ($4|0)>(255);
 if ($5) {
  (_EmitError(79)|0);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 $6 = $1;
 $7 = $len;
 $8 = (_FindClass($6,$7)|0);
 $sym = $8;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = $1;
  $11 = (_SymAlloc($10)|0);
  $sym = $11;
  $12 = $sym;
  $13 = ((($12)) + 16|0);
  HEAP32[$13>>2] = 11;
  $14 = $sym;
  _AddLnameItem($14);
 }
 $15 = $sym;
 $0 = $15;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _FindClass($name,$len) {
 $name = $name|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $len;
 $3 = HEAP32[(340)>>2]|0;
 $node = $3;
 while(1) {
  $4 = $node;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 7;
   break;
  }
  $6 = $node;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $sym = $8;
  $9 = $sym;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(11);
  if ($12) {
   $13 = HEAP32[33696>>2]|0;
   $14 = $sym;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = $2;
   $19 = (FUNCTION_TABLE_iiii[$13 & 255]($16,$17,$18)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    label = 5;
    break;
   }
  }
  $22 = $node;
  $23 = HEAP32[$22>>2]|0;
  $node = $23;
 }
 if ((label|0) == 5) {
  $21 = $sym;
  $0 = $21;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _SimGetSegName($segno) {
 $segno = $segno|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $segno;
 $1 = $0;
 $2 = (33584 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _GetCodeClass() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[(6052)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[(6052)>>2]|0;
  $0 = $3;
 } else {
  $4 = HEAP32[33612>>2]|0;
  $0 = $4;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _SimplifiedSegDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $init = 0, $name = 0, $opndx = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer24 = sp + 112|0;
 $vararg_buffer20 = sp + 104|0;
 $vararg_buffer17 = sp + 96|0;
 $vararg_buffer12 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 132|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $name = 0;
 _LstWrite(4,0,0);
 $3 = HEAP32[(512)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  (_EmitError(96)|0);
  $0 = -1;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = $2;
 $7 = (($6) + ($5<<4)|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (15660 + (($9*12)|0)|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $type = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$1>>2] = $14;
 $15 = $type;
 $16 = ($15|0)==(1);
 do {
  if ($16) {
   $17 = $2;
   $18 = HEAP32[(616)>>2]|0;
   $19 = (_EvalOperand($1,$17,$18,$opndx,0)|0);
   $20 = ($19|0)==(-1);
   if ($20) {
    $0 = -1;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
   $21 = ((($opndx)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(-2);
   if ($23) {
    HEAP32[$opndx>>2] = 1024;
    break;
   }
   $24 = ((($opndx)) + 40|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)!=(0);
   if ($26) {
    (_EmitError(65)|0);
    $0 = -1;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
  } else {
   $27 = HEAP32[$1>>2]|0;
   $28 = $2;
   $29 = (($28) + ($27<<4)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ($31|0)==(8);
   if ($32) {
    $33 = $type;
    $34 = ($33|0)==(0);
    $35 = $type;
    $36 = ($35|0)==(4);
    $or$cond = $34 | $36;
    $37 = $type;
    $38 = ($37|0)==(5);
    $or$cond3 = $or$cond | $38;
    if (!($or$cond3)) {
     $39 = HEAP8[(6083)>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)==(0);
     if (!($41)) {
      break;
     }
     $42 = $type;
     $43 = ($42|0)==(2);
     $44 = $type;
     $45 = ($44|0)==(3);
     $or$cond5 = $43 | $45;
     $46 = $type;
     $47 = ($46|0)==(6);
     $or$cond7 = $or$cond5 | $47;
     if (!($or$cond7)) {
      break;
     }
    }
    $48 = HEAP32[$1>>2]|0;
    $49 = $2;
    $50 = (($49) + ($48<<4)|0);
    $51 = ((($50)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $name = $52;
    $53 = HEAP32[$1>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$1>>2] = $54;
   }
  }
 } while(0);
 $55 = HEAP32[$1>>2]|0;
 $56 = $2;
 $57 = (($56) + ($55<<4)|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = HEAP32[$1>>2]|0;
  $62 = $2;
  $63 = (($62) + ($61<<4)|0);
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$vararg_buffer>>2] = $65;
  (_EmitErr(209,$vararg_buffer)|0);
  $0 = -1;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $66 = $type;
 $67 = ($66|0)!=(1);
 if ($67) {
  _close_currseg();
 }
 $68 = $name;
 $69 = ($68|0)==(0|0);
 if ($69) {
  $70 = HEAP8[(572)>>0]|0;
  $71 = $70&255;
  $72 = $type;
  $73 = 1 << $72;
  $74 = $71 & $73;
  $75 = $74&255;
  $init = $75;
 }
 $76 = $type;
 switch ($76|0) {
 case 0:  {
  $77 = $name;
  _SetSimSeg(0,$77);
  $78 = HEAP32[(512)>>2]|0;
  $79 = ($78|0)==(1);
  do {
   if ($79) {
    $80 = $name;
    $81 = ($80|0)!=(0|0);
    if ($81) {
     $82 = $name;
     _AddToDgroup(0,$82);
    }
    $name = 81669;
   } else {
    $83 = HEAP32[(512)>>2]|0;
    $84 = ($83|0)==(7);
    if ($84) {
     $name = 109458;
     break;
    }
    $85 = $name;
    $86 = ($85|0)==(0|0);
    if ($86) {
     $87 = HEAP32[33584>>2]|0;
     $name = $87;
    }
   }
  } while(0);
  $88 = $name;
  HEAP32[$vararg_buffer12>>2] = 362;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = 26;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $88;
  _AddLineQueueX(109463,$vararg_buffer12);
  break;
 }
 case 1:  {
  _SetSimSeg(1,0);
  $89 = HEAP32[$opndx>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $89;
  _AddLineQueueX(109472,$vararg_buffer17);
  _EndSimSeg(1);
  $90 = $init;
  $91 = ($90<<24>>24)==(0);
  $92 = HEAP32[(508)>>2]|0;
  $93 = ($92|0)!=(1);
  $or$cond11 = $91 & $93;
  if ($or$cond11) {
   _AddToDgroup(1,0);
  }
  break;
 }
 case 6: case 3: case 2:  {
  $94 = $type;
  $95 = $name;
  _SetSimSeg($94,$95);
  HEAP32[$vararg_buffer20>>2] = 362;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = 26;
  _AddLineQueueX(109481,$vararg_buffer20);
  $96 = $name;
  $97 = ($96|0)==(0|0);
  $98 = $init;
  $99 = ($98<<24>>24)!=(0);
  $or$cond9 = $97 & $99;
  if (!($or$cond9)) {
   $100 = $type;
   $101 = $name;
   _AddToDgroup($100,$101);
  }
  break;
 }
 case 5: case 4:  {
  $102 = $type;
  $103 = $name;
  _SetSimSeg($102,$103);
  HEAP32[$vararg_buffer24>>2] = 362;
  $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
  HEAP32[$vararg_ptr27>>2] = 26;
  _AddLineQueueX(109481,$vararg_buffer24);
  break;
 }
 default: {
  (_InternalError(109493,274)|0);
 }
 }
 _RunLineQueue();
 $0 = 0;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function _SetModelDefaultSegNames() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[33584>>2]=HEAP32[33640>>2]|0;HEAP32[33584+4>>2]=HEAP32[33640+4>>2]|0;HEAP32[33584+8>>2]=HEAP32[33640+8>>2]|0;HEAP32[33584+12>>2]=HEAP32[33640+12>>2]|0;HEAP32[33584+16>>2]=HEAP32[33640+16>>2]|0;HEAP32[33584+20>>2]=HEAP32[33640+20>>2]|0;HEAP32[33584+24>>2]=HEAP32[33640+24>>2]|0;
 $0 = HEAP32[(6044)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[(6044)>>2]|0;
  $3 = (_strlen($2)|0);
  $4 = (($3) + 1)|0;
  $5 = (_LclAlloc($4)|0);
  HEAP32[33584>>2] = $5;
  $6 = HEAP32[33584>>2]|0;
  $7 = HEAP32[(6044)>>2]|0;
  (_strcpy($6,$7)|0);
 } else {
  $8 = HEAP32[(512)>>2]|0;
  $9 = 1 << $8;
  $10 = 112 & $9;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[33640>>2]|0;
   $13 = (_strlen($12)|0);
   $14 = (_strlen((632))|0);
   $15 = (($13) + ($14))|0;
   $16 = (($15) + 1)|0;
   $17 = (_LclAlloc($16)|0);
   HEAP32[33584>>2] = $17;
   $18 = HEAP32[33584>>2]|0;
   (_strcpy($18,(632))|0);
   $19 = HEAP32[33584>>2]|0;
   $20 = HEAP32[33640>>2]|0;
   (_strcat($19,$20)|0);
  }
 }
 $21 = HEAP32[(6048)>>2]|0;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  return;
 }
 $23 = HEAP32[(6048)>>2]|0;
 $24 = (_strlen($23)|0);
 $25 = (($24) + 1)|0;
 $26 = (_LclAlloc($25)|0);
 HEAP32[(33592)>>2] = $26;
 $27 = HEAP32[(33592)>>2]|0;
 $28 = HEAP32[(6048)>>2]|0;
 (_strcpy($27,$28)|0);
 return;
}
function _ModelSimSegmInit($model) {
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 32|0;
 $0 = $model;
 HEAP8[(572)>>0] = 0;
 _SetSimSeg(0,0);
 _EndSimSeg(0);
 _SetSimSeg(2,0);
 _EndSimSeg(2);
 $1 = $0;
 $2 = ($1|0)!=(7);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[(6100)>>2]|0;
 $4 = ($3|0)==(1);
 $5 = HEAP32[(6100)>>2]|0;
 $6 = ($5|0)==(0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  STACKTOP = sp;return 0;
 }
 (_strcpy($buffer,109503)|0);
 $7 = $0;
 $8 = ($7|0)==(1);
 if ($8) {
  (_strcat($buffer,109512)|0);
  $9 = HEAP32[33584>>2]|0;
  $10 = HEAP32[(33592)>>2]|0;
  HEAP32[$vararg_buffer>>2] = 81669;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = 361;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $9;
  $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr4>>2] = $10;
  _AddLineQueueX($buffer,$vararg_buffer);
  STACKTOP = sp;return 0;
 } else {
  $11 = HEAP32[(33592)>>2]|0;
  HEAP32[$vararg_buffer5>>2] = 81669;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = 361;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $11;
  _AddLineQueueX($buffer,$vararg_buffer5);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _ModelSimSegmExit() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(584)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 _close_currseg();
 _RunLineQueue();
 return;
}
function _close_currseg() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(584)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(584)>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 360;
 _AddLineQueueX(109563,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SetSimSeg($segm,$name) {
 $segm = $segm|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond = 0, $or$cond3 = 0, $pAlign = 0, $pAlignSt = 0, $pClass = 0;
 var $pFmt = 0, $pUse = 0, $sym = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $segm;
 $1 = $name;
 $pAlign = 109569;
 $pAlignSt = 109574;
 $pUse = 109841;
 $2 = HEAP8[(557)>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[(512)>>2]|0;
  $6 = ($5|0)==(7);
  if ($6) {
   $pUse = 109458;
  } else {
   $pUse = 109579;
  }
  $7 = HEAP32[(544)>>2]|0;
  $8 = $7 & 240;
  $9 = ($8>>>0)<=(48);
  if ($9) {
   $pAlign = 109585;
  } else {
   $pAlign = 109574;
  }
  $10 = $pAlign;
  $pAlignSt = $10;
 }
 $11 = $0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (_GetCodeClass()|0);
  $pClass = $13;
 } else {
  $14 = $0;
  $15 = (33612 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $pClass = $16;
 }
 $17 = $0;
 $18 = ($17|0)==(1);
 $19 = $0;
 $20 = ($19|0)==(4);
 $or$cond = $18 | $20;
 $21 = $0;
 $22 = ($21|0)==(5);
 $or$cond3 = $or$cond | $22;
 if ($or$cond3) {
  $23 = $pAlignSt;
  $pAlign = $23;
 }
 $pFmt = 109591;
 $24 = $1;
 $25 = ($24|0)==(0|0);
 do {
  if ($25) {
   $26 = $0;
   $27 = (33584 + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $1 = $28;
   $29 = HEAP8[(572)>>0]|0;
   $30 = $29&255;
   $31 = $0;
   $32 = 1 << $31;
   $33 = $30 & $32;
   $34 = ($33|0)!=(0);
   if ($34) {
    $pFmt = 109563;
    break;
   }
   $35 = $0;
   $36 = 1 << $35;
   $37 = HEAP8[(572)>>0]|0;
   $38 = $37&255;
   $39 = $38 | $36;
   $40 = $39&255;
   HEAP8[(572)>>0] = $40;
   $41 = HEAP32[4884>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = $1;
    $44 = (_SymFind($43)|0);
    $sym = $44;
    $45 = $sym;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = $sym;
     $48 = ((($47)) + 16|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(3);
     if ($50) {
      $51 = $sym;
      $52 = ((($51)) + 24|0);
      $53 = HEAP16[$52>>1]|0;
      $54 = ($53&65535) >>> 1;
      $55 = $54 & 1;
      $56 = $55&255;
      $57 = $56&255;
      $58 = ($57|0)==(1);
      if ($58) {
       $59 = $0;
       $60 = 1 << $59;
       $61 = HEAP8[(573)>>0]|0;
       $62 = $61&255;
       $63 = $62 | $60;
       $64 = $63&255;
       HEAP8[(573)>>0] = $64;
      }
     }
    }
   }
   $65 = HEAP8[(573)>>0]|0;
   $66 = $65&255;
   $67 = $0;
   $68 = 1 << $67;
   $69 = $66 & $68;
   $70 = ($69|0)!=(0);
   if ($70) {
    $pFmt = 109563;
   }
  } else {
   $71 = $1;
   $72 = (_SymFind($71)|0);
   $sym = $72;
   $73 = $sym;
   $74 = ($73|0)!=(0|0);
   if ($74) {
    $75 = $sym;
    $76 = ((($75)) + 16|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(3);
    if ($78) {
     $79 = $sym;
     $80 = ((($79)) + 24|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = ($81&65535) >>> 1;
     $83 = $82 & 1;
     $84 = $83&255;
     $85 = $84&255;
     $86 = ($85|0)==(1);
     if ($86) {
      $pFmt = 109563;
     }
    }
   }
  }
 } while(0);
 $87 = $pFmt;
 $88 = $1;
 $89 = $pAlign;
 $90 = $pUse;
 $91 = $0;
 $92 = (33668 + ($91<<2)|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $pClass;
 HEAP32[$vararg_buffer>>2] = $88;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 359;
 $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $89;
 $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $90;
 $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $93;
 $vararg_ptr8 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr8>>2] = $94;
 _AddLineQueueX($87,$vararg_buffer);
 STACKTOP = sp;return;
}
function _AddToDgroup($segm,$name) {
 $segm = $segm|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $segm;
 $1 = $name;
 $2 = HEAP32[(512)>>2]|0;
 $3 = ($2|0)==(7);
 $4 = HEAP32[(6100)>>2]|0;
 $5 = ($4|0)==(2);
 $or$cond = $3 | $5;
 $6 = HEAP32[(6100)>>2]|0;
 $7 = ($6|0)==(3);
 $or$cond3 = $or$cond | $7;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $0;
  $11 = (33584 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $1 = $12;
 }
 $13 = $1;
 HEAP32[$vararg_buffer>>2] = 81669;
 $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 361;
 $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $13;
 _AddLineQueueX(109503,$vararg_buffer);
 STACKTOP = sp;return;
}
function _EndSimSeg($segm) {
 $segm = $segm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $segm;
 $1 = $0;
 $2 = (33584 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 360;
 _AddLineQueueX(109563,$vararg_buffer);
 STACKTOP = sp;return;
}
function _TextItemError($item) {
 $item = $item|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $item;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(9);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(60);
  if ($11) {
   $12 = (_EmitError(216)|0);
   $0 = $12;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $13 = $1;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(8);
 do {
  if ($16) {
   $17 = $1;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_SymFind($19)|0);
   $sym = $20;
   $21 = $sym;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $23 = $sym;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    if (!($26)) {
     break;
    }
   }
   $27 = $1;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$vararg_buffer>>2] = $29;
   $30 = (_EmitErr(102,$vararg_buffer)|0);
   $0 = $30;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 } while(0);
 $31 = (_EmitError(144)|0);
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _CatStrDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $count = 0, $p = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $1 = $4;
 $count = 0;
 while(1) {
  $5 = $1;
  $6 = HEAP32[(616)>>2]|0;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 12;
   break;
  }
  $8 = $1;
  $9 = $2;
  $10 = (($9) + ($8<<4)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)!=(9);
  if ($13) {
   label = 5;
   break;
  }
  $14 = $1;
  $15 = $2;
  $16 = (($15) + ($14<<4)|0);
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(60);
  if ($20) {
   label = 5;
   break;
  }
  $25 = $count;
  $26 = $1;
  $27 = $2;
  $28 = (($27) + ($26<<4)|0);
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($25) + ($30))|0;
  $32 = ($31>>>0)>=(600);
  if ($32) {
   label = 7;
   break;
  }
  $34 = $count;
  $35 = $1;
  $36 = $2;
  $37 = (($36) + ($35<<4)|0);
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($34) + ($39))|0;
  $count = $40;
  $41 = $1;
  $42 = (($41) + 1)|0;
  $1 = $42;
  $43 = $1;
  $44 = $2;
  $45 = (($44) + ($43<<4)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ($47|0)!=(44);
  if ($48) {
   $49 = $1;
   $50 = $2;
   $51 = (($50) + ($49<<4)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ($53|0)!=(0);
   if ($54) {
    label = 10;
    break;
   }
  }
  $61 = $1;
  $62 = (($61) + 1)|0;
  $1 = $62;
 }
 if ((label|0) == 5) {
  $21 = $1;
  $22 = $2;
  $23 = (($22) + ($21<<4)|0);
  $24 = (_TextItemError($23)|0);
  $0 = $24;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 7) {
  $33 = (_EmitError(155)|0);
  $0 = $33;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 10) {
  $55 = $1;
  $56 = $2;
  $57 = (($56) + ($55<<4)|0);
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$vararg_buffer>>2] = $59;
  $60 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $60;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 12) {
  $63 = $2;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_SymFind($65)|0);
  $sym = $66;
  $67 = $sym;
  $68 = ($67|0)==(0|0);
  do {
   if ($68) {
    $69 = $2;
    $70 = ((($69)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (_SymCreate($71)|0);
    $sym = $72;
   } else {
    $73 = $sym;
    $74 = ((($73)) + 16|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0);
    $77 = $sym;
    if ($76) {
     _sym_remove_table(15404,$77);
     _SkipSavedState();
     $78 = $sym;
     $79 = ((($78)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $80;
     _EmitWarn(2,236,$vararg_buffer1);
     break;
    }
    $81 = ((($77)) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)!=(10);
    if ($83) {
     $84 = $sym;
     $85 = ((($84)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $86;
     $87 = (_EmitErr(143,$vararg_buffer4)|0);
     $0 = $87;
     $141 = $0;
     STACKTOP = sp;return ($141|0);
    }
   }
  } while(0);
  $88 = $sym;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = 10;
  $90 = $sym;
  $91 = ((($90)) + 24|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 & -3;
  $94 = $93 | 2;
  HEAP16[$91>>1] = $94;
  $95 = $sym;
  $96 = ((($95)) + 36|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $count;
  $99 = (($98) + 1)|0;
  $100 = ($97>>>0)<($99>>>0);
  if ($100) {
   $101 = $count;
   $102 = (($101) + 1)|0;
   $103 = (_LclAlloc($102)|0);
   $104 = $sym;
   $105 = ((($104)) + 8|0);
   HEAP32[$105>>2] = $103;
   $106 = $count;
   $107 = (($106) + 1)|0;
   $108 = $sym;
   $109 = ((($108)) + 36|0);
   HEAP32[$109>>2] = $107;
  }
  $1 = 2;
  $110 = $sym;
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $p = $112;
  while(1) {
   $113 = $1;
   $114 = HEAP32[(616)>>2]|0;
   $115 = ($113|0)<($114|0);
   $116 = $p;
   if (!($115)) {
    break;
   }
   $117 = $1;
   $118 = $2;
   $119 = (($118) + ($117<<4)|0);
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $1;
   $123 = $2;
   $124 = (($123) + ($122<<4)|0);
   $125 = ((($124)) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   _memcpy(($116|0),($121|0),($126|0))|0;
   $127 = $1;
   $128 = $2;
   $129 = (($128) + ($127<<4)|0);
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $p;
   $133 = (($132) + ($131)|0);
   $p = $133;
   $134 = $1;
   $135 = (($134) + 2)|0;
   $1 = $135;
  }
  HEAP8[$116>>0] = 0;
  $136 = HEAP32[(560)>>2]|0;
  $137 = $136 >>> 11;
  $138 = $137 & 1;
  $139 = ($138|0)!=(0);
  if ($139) {
   $140 = $sym;
   _LstWrite(3,0,$140);
  }
  $0 = 0;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _SetTextMacro($tokenarray,$sym,$name,$value) {
 $tokenarray = $tokenarray|0;
 $sym = $sym|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $count = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $tokenarray;
 $2 = $sym;
 $3 = $name;
 $4 = $value;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = $3;
   $8 = (_SymCreate($7)|0);
   $2 = $8;
  } else {
   $9 = $2;
   $10 = ((($9)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $13 = $2;
   if ($12) {
    _sym_remove_table(15404,$13);
    _SkipSavedState();
    $14 = $2;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer>>2] = $16;
    _EmitWarn(2,236,$vararg_buffer);
    break;
   }
   $17 = ((($13)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)!=(10);
   if ($19) {
    $20 = $3;
    HEAP32[$vararg_buffer1>>2] = $20;
    (_EmitErr(143,$vararg_buffer1)|0);
    $0 = 0;
    $95 = $0;
    STACKTOP = sp;return ($95|0);
   }
  }
 } while(0);
 $21 = $2;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = 10;
 $23 = $2;
 $24 = ((($23)) + 24|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 & -3;
 $27 = $26 | 2;
 HEAP16[$24>>1] = $27;
 $28 = $1;
 $29 = ((($28)) + 32|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)==(9);
 do {
  if ($32) {
   $33 = $1;
   $34 = ((($33)) + 32|0);
   $35 = ((($34)) + 1|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 << 24 >> 24;
   $38 = ($37|0)==(60);
   if ($38) {
    $39 = $1;
    $40 = ((($39)) + 48|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = ($42|0)!=(0);
    $44 = $1;
    if (!($43)) {
     $48 = ((($44)) + 32|0);
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $4 = $50;
     $51 = $1;
     $52 = ((($51)) + 32|0);
     $53 = ((($52)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $count = $54;
     break;
    }
    $45 = ((($44)) + 48|0);
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $47;
    (_EmitErr(209,$vararg_buffer4)|0);
    $0 = 0;
    $95 = $0;
    STACKTOP = sp;return ($95|0);
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 L17: do {
  if ((label|0) == 12) {
   $55 = $4;
   $56 = (_strlen($55)|0);
   $count = $56;
   while(1) {
    $57 = $count;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     break L17;
    }
    $59 = $4;
    $60 = $count;
    $61 = (($59) + ($60)|0);
    $62 = ((($61)) + -1|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (_isspace($64)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     break L17;
    }
    $67 = $count;
    $68 = (($67) + -1)|0;
    $count = $68;
   }
  }
 } while(0);
 $69 = $2;
 $70 = ((($69)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $count;
 $73 = (($72) + 1)|0;
 $74 = ($71>>>0)<($73>>>0);
 if ($74) {
  $75 = $count;
  $76 = (($75) + 1)|0;
  $77 = (_LclAlloc($76)|0);
  $78 = $2;
  $79 = ((($78)) + 8|0);
  HEAP32[$79>>2] = $77;
  $80 = $count;
  $81 = (($80) + 1)|0;
  $82 = $2;
  $83 = ((($82)) + 36|0);
  HEAP32[$83>>2] = $81;
 }
 $84 = $2;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $4;
 $88 = $count;
 _memcpy(($86|0),($87|0),($88|0))|0;
 $89 = $2;
 $90 = ((($89)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $count;
 $93 = (($91) + ($92)|0);
 HEAP8[$93>>0] = 0;
 $94 = $2;
 $0 = $94;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function _AddPredefinedText($name,$value) {
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $value;
 $2 = $0;
 $3 = (_SymFind($2)|0);
 $sym = $3;
 $4 = (0|0)==($3|0);
 if ($4) {
  $5 = $0;
  $6 = (_SymCreate($5)|0);
  $sym = $6;
 }
 $7 = $sym;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = 10;
 $9 = $sym;
 $10 = ((($9)) + 24|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & -3;
 $13 = $12 | 2;
 HEAP16[$10>>1] = $13;
 $14 = $sym;
 $15 = ((($14)) + 24|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 & -33;
 $18 = $17 | 32;
 HEAP16[$15>>1] = $18;
 $19 = $1;
 $20 = $sym;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $sym;
 $23 = ((($22)) + 36|0);
 HEAP32[$23>>2] = 0;
 $24 = $sym;
 STACKTOP = sp;return ($24|0);
}
function _SubStrDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chksize = 0, $cnt = 0, $name = 0, $opndx = 0, $p = 0, $pos = 0, $size = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer4 = sp + 88|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 144|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $name = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = $2;
 $10 = (($9) + ($8<<4)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(9);
 if (!($13)) {
  $14 = HEAP32[$1>>2]|0;
  $15 = $2;
  $16 = (($15) + ($14<<4)|0);
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(60);
  if (!($20)) {
   $25 = HEAP32[$1>>2]|0;
   $26 = $2;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $p = $29;
   $30 = HEAP32[$1>>2]|0;
   $31 = $2;
   $32 = (($31) + ($30<<4)|0);
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $cnt = $34;
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$1>>2] = $36;
   $37 = HEAP32[$1>>2]|0;
   $38 = $2;
   $39 = (($38) + ($37<<4)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)!=(44);
   $43 = HEAP32[$1>>2]|0;
   if ($42) {
    $44 = $2;
    $45 = (($44) + ($43<<4)|0);
    $46 = ((($45)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer>>2] = $47;
    $48 = (_EmitErr(39,$vararg_buffer)|0);
    $0 = $48;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $49 = (($43) + 1)|0;
   HEAP32[$1>>2] = $49;
   $50 = $2;
   $51 = HEAP32[(616)>>2]|0;
   $52 = (_EvalOperand($1,$50,$51,$opndx,2)|0);
   $53 = ($52|0)==(-1);
   if ($53) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $54 = ((($opndx)) + 40|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = (_EmitError(65)|0);
    $0 = $57;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $58 = HEAP32[$opndx>>2]|0;
   $pos = $58;
   $59 = $pos;
   $60 = ($59|0)<=(0);
   if ($60) {
    $61 = (_EmitError(175)|0);
    $0 = $61;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $62 = HEAP32[$1>>2]|0;
   $63 = $2;
   $64 = (($63) + ($62<<4)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = ($66|0)!=(0);
   do {
    if ($67) {
     $68 = HEAP32[$1>>2]|0;
     $69 = $2;
     $70 = (($69) + ($68<<4)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = ($72|0)!=(44);
     $74 = HEAP32[$1>>2]|0;
     if ($73) {
      $75 = $2;
      $76 = (($75) + ($74<<4)|0);
      $77 = ((($76)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $78;
      $79 = (_EmitErr(39,$vararg_buffer1)|0);
      $0 = $79;
      $184 = $0;
      STACKTOP = sp;return ($184|0);
     }
     $80 = (($74) + 1)|0;
     HEAP32[$1>>2] = $80;
     $81 = $2;
     $82 = HEAP32[(616)>>2]|0;
     $83 = (_EvalOperand($1,$81,$82,$opndx,2)|0);
     $84 = ($83|0)==(-1);
     if ($84) {
      $0 = -1;
      $184 = $0;
      STACKTOP = sp;return ($184|0);
     }
     $85 = ((($opndx)) + 40|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = (_EmitError(65)|0);
      $0 = $88;
      $184 = $0;
      STACKTOP = sp;return ($184|0);
     }
     $89 = HEAP32[$opndx>>2]|0;
     $size = $89;
     $90 = HEAP32[$1>>2]|0;
     $91 = $2;
     $92 = (($91) + ($90<<4)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = ($94|0)!=(0);
     if ($95) {
      $96 = HEAP32[$1>>2]|0;
      $97 = $2;
      $98 = (($97) + ($96<<4)|0);
      $99 = ((($98)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $100;
      $101 = (_EmitErr(209,$vararg_buffer4)|0);
      $0 = $101;
      $184 = $0;
      STACKTOP = sp;return ($184|0);
     }
     $102 = $size;
     $103 = ($102|0)<(0);
     if (!($103)) {
      $chksize = 1;
      break;
     }
     $104 = (_EmitError(208)|0);
     $0 = $104;
     $184 = $0;
     STACKTOP = sp;return ($184|0);
    } else {
     $size = -1;
     $chksize = 0;
    }
   } while(0);
   $105 = $pos;
   $106 = $cnt;
   $107 = ($105|0)>($106|0);
   if ($107) {
    $108 = $pos;
    HEAP32[$vararg_buffer7>>2] = $108;
    $109 = (_EmitErr(206,$vararg_buffer7)|0);
    $0 = $109;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $110 = $chksize;
   $111 = $110&255;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $pos;
    $114 = $size;
    $115 = (($113) + ($114))|0;
    $116 = (($115) - 1)|0;
    $117 = $cnt;
    $118 = ($116|0)>($117|0);
    if ($118) {
     $119 = (_EmitError(207)|0);
     $0 = $119;
     $184 = $0;
     STACKTOP = sp;return ($184|0);
    }
   }
   $120 = $pos;
   $121 = (($120) - 1)|0;
   $122 = $p;
   $123 = (($122) + ($121)|0);
   $p = $123;
   $124 = $size;
   $125 = ($124|0)==(-1);
   if ($125) {
    $126 = $cnt;
    $127 = $pos;
    $128 = (($126) - ($127))|0;
    $129 = (($128) + 1)|0;
    $size = $129;
   }
   $130 = $name;
   $131 = (_SymFind($130)|0);
   $sym = $131;
   $132 = $sym;
   $133 = ($132|0)==(0|0);
   do {
    if ($133) {
     $134 = $name;
     $135 = (_SymCreate($134)|0);
     $sym = $135;
    } else {
     $136 = $sym;
     $137 = ((($136)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==(0);
     $140 = $sym;
     if ($139) {
      _sym_remove_table(15404,$140);
      _SkipSavedState();
      $141 = $sym;
      $142 = ((($141)) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      HEAP32[$vararg_buffer10>>2] = $143;
      _EmitWarn(2,236,$vararg_buffer10);
      break;
     }
     $144 = ((($140)) + 16|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)!=(10);
     if ($146) {
      $147 = $sym;
      $148 = ((($147)) + 4|0);
      $149 = HEAP32[$148>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $149;
      $150 = (_EmitErr(143,$vararg_buffer13)|0);
      $0 = $150;
      $184 = $0;
      STACKTOP = sp;return ($184|0);
     }
    }
   } while(0);
   $151 = $sym;
   $152 = ((($151)) + 16|0);
   HEAP32[$152>>2] = 10;
   $153 = $sym;
   $154 = ((($153)) + 24|0);
   $155 = HEAP16[$154>>1]|0;
   $156 = $155 & -3;
   $157 = $156 | 2;
   HEAP16[$154>>1] = $157;
   $158 = $sym;
   $159 = ((($158)) + 36|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $size;
   $162 = (($161) + 1)|0;
   $163 = ($160>>>0)<($162>>>0);
   if ($163) {
    $164 = $size;
    $165 = (($164) + 1)|0;
    $166 = (_LclAlloc($165)|0);
    $167 = $sym;
    $168 = ((($167)) + 8|0);
    HEAP32[$168>>2] = $166;
    $169 = $size;
    $170 = (($169) + 1)|0;
    $171 = $sym;
    $172 = ((($171)) + 36|0);
    HEAP32[$172>>2] = $170;
   }
   $173 = $sym;
   $174 = ((($173)) + 8|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $p;
   $177 = $size;
   _memcpy(($175|0),($176|0),($177|0))|0;
   $178 = $sym;
   $179 = ((($178)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $size;
   $182 = (($180) + ($181)|0);
   HEAP8[$182>>0] = 0;
   $183 = $sym;
   _LstWrite(3,0,$183);
   $0 = 0;
   $184 = $0;
   STACKTOP = sp;return ($184|0);
  }
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = $2;
 $23 = (($22) + ($21<<4)|0);
 $24 = (_TextItemError($23)|0);
 $0 = $24;
 $184 = $0;
 STACKTOP = sp;return ($184|0);
}
function _SizeStrDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sizestr = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = $1;
 $4 = ($3|0)!=(1);
 if ($4) {
  $5 = $1;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $11 = $2;
 $12 = ((($11)) + 32|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(9);
 if (!($15)) {
  $16 = $2;
  $17 = ((($16)) + 32|0);
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(60);
  if (!($21)) {
   $25 = HEAP32[(616)>>2]|0;
   $26 = ($25|0)>(3);
   $27 = $2;
   if ($26) {
    $28 = ((($27)) + 48|0);
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $30;
    $31 = (_EmitErr(209,$vararg_buffer1)|0);
    $0 = $31;
    $42 = $0;
    STACKTOP = sp;return ($42|0);
   }
   $32 = ((($27)) + 32|0);
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $sizestr = $34;
   $35 = $2;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $sizestr;
   $39 = (_CreateVariable($37,$38)|0);
   $sym = $39;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $41 = $sym;
    _LstWrite(2,0,$41);
    $0 = 0;
    $42 = $0;
    STACKTOP = sp;return ($42|0);
   } else {
    $0 = -1;
    $42 = $0;
    STACKTOP = sp;return ($42|0);
   }
  }
 }
 $22 = $2;
 $23 = ((($22)) + 32|0);
 $24 = (_TextItemError($23)|0);
 $0 = $24;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _InStrDir($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $opndx = 0, $or$cond = 0, $p = 0, $q = 0, $sizestr = 0, $src = 0, $start = 0, $string1 = 0, $strpos = 0, $sym = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer4 = sp + 88|0;
 $vararg_buffer2 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 156|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $start = 1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(1);
 $5 = HEAP32[$1>>2]|0;
 if ($4) {
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $165 = $0;
  STACKTOP = sp;return ($165|0);
 }
 $11 = (($5) + 1)|0;
 HEAP32[$1>>2] = $11;
 $12 = HEAP32[$1>>2]|0;
 $13 = $2;
 $14 = (($13) + ($12<<4)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)!=(9);
 if ($17) {
  label = 5;
 } else {
  $18 = HEAP32[$1>>2]|0;
  $19 = $2;
  $20 = (($19) + ($18<<4)|0);
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(60);
  if ($24) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $25 = $2;
   $26 = HEAP32[(616)>>2]|0;
   $27 = (_EvalOperand($1,$25,$26,$opndx,2)|0);
   $28 = ($27|0)==(-1);
   if ($28) {
    $0 = -1;
    $165 = $0;
    STACKTOP = sp;return ($165|0);
   }
   $29 = ((($opndx)) + 40|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = (_EmitError(65)|0);
    $0 = $32;
    $165 = $0;
    STACKTOP = sp;return ($165|0);
   }
   $33 = HEAP32[$opndx>>2]|0;
   $start = $33;
   $34 = $start;
   $35 = ($34|0)<=(0);
   if ($35) {
    _EmitWarn(3,175,$vararg_buffer2);
   }
   $36 = HEAP32[$1>>2]|0;
   $37 = $2;
   $38 = (($37) + ($36<<4)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)!=(44);
   $42 = HEAP32[$1>>2]|0;
   if (!($41)) {
    $48 = (($42) + 1)|0;
    HEAP32[$1>>2] = $48;
    break;
   }
   $43 = $2;
   $44 = (($43) + ($42<<4)|0);
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $46;
   $47 = (_EmitErr(39,$vararg_buffer4)|0);
   $0 = $47;
   $165 = $0;
   STACKTOP = sp;return ($165|0);
  }
 } while(0);
 $49 = HEAP32[$1>>2]|0;
 $50 = $2;
 $51 = (($50) + ($49<<4)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ($53|0)!=(9);
 if (!($54)) {
  $55 = HEAP32[$1>>2]|0;
  $56 = $2;
  $57 = (($56) + ($55<<4)|0);
  $58 = ((($57)) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)!=(60);
  if (!($61)) {
   $66 = HEAP32[$1>>2]|0;
   $67 = $2;
   $68 = (($67) + ($66<<4)|0);
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $src = $70;
   $71 = HEAP32[$1>>2]|0;
   $72 = $2;
   $73 = (($72) + ($71<<4)|0);
   $74 = ((($73)) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   $sizestr = $75;
   $76 = $start;
   $77 = $sizestr;
   $78 = ($76|0)>($77|0);
   if ($78) {
    $79 = $start;
    HEAP32[$vararg_buffer7>>2] = $79;
    $80 = (_EmitErr(206,$vararg_buffer7)|0);
    $0 = $80;
    $165 = $0;
    STACKTOP = sp;return ($165|0);
   }
   $81 = $src;
   $82 = $start;
   $83 = (($81) + ($82)|0);
   $84 = ((($83)) + -1|0);
   $p = $84;
   $85 = HEAP32[$1>>2]|0;
   $86 = (($85) + 1)|0;
   HEAP32[$1>>2] = $86;
   $87 = HEAP32[$1>>2]|0;
   $88 = $2;
   $89 = (($88) + ($87<<4)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)!=(44);
   $93 = HEAP32[$1>>2]|0;
   if ($92) {
    $94 = $2;
    $95 = (($94) + ($93<<4)|0);
    $96 = ((($95)) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $97;
    $98 = (_EmitErr(39,$vararg_buffer10)|0);
    $0 = $98;
    $165 = $0;
    STACKTOP = sp;return ($165|0);
   }
   $99 = (($93) + 1)|0;
   HEAP32[$1>>2] = $99;
   $100 = HEAP32[$1>>2]|0;
   $101 = $2;
   $102 = (($101) + ($100<<4)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)!=(9);
   if (!($105)) {
    $106 = HEAP32[$1>>2]|0;
    $107 = $2;
    $108 = (($107) + ($106<<4)|0);
    $109 = ((($108)) + 1|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $112 = ($111|0)!=(60);
    if (!($112)) {
     $117 = HEAP32[$1>>2]|0;
     $118 = $2;
     $119 = (($118) + ($117<<4)|0);
     $120 = ((($119)) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $q = $121;
     $122 = HEAP32[$1>>2]|0;
     $123 = $2;
     $124 = (($123) + ($122<<4)|0);
     $125 = ((($124)) + 8|0);
     $126 = HEAP32[$125>>2]|0;
     $j = $126;
     $127 = HEAP32[$1>>2]|0;
     $128 = (($127) + 1)|0;
     HEAP32[$1>>2] = $128;
     $129 = HEAP32[$1>>2]|0;
     $130 = $2;
     $131 = (($130) + ($129<<4)|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = ($133|0)!=(0);
     if ($134) {
      $135 = HEAP32[$1>>2]|0;
      $136 = $2;
      $137 = (($136) + ($135<<4)|0);
      $138 = ((($137)) + 4|0);
      $139 = HEAP32[$138>>2]|0;
      HEAP32[$vararg_buffer13>>2] = $139;
      $140 = (_EmitErr(209,$vararg_buffer13)|0);
      $0 = $140;
      $165 = $0;
      STACKTOP = sp;return ($165|0);
     }
     $strpos = 0;
     $141 = $start;
     $142 = ($141|0)>(0);
     if ($142) {
      $143 = $sizestr;
      $144 = $j;
      $145 = ($143|0)>=($144|0);
      $146 = $j;
      $147 = ($146|0)!=(0);
      $or$cond = $145 & $147;
      if ($or$cond) {
       $148 = $p;
       $149 = $q;
       $150 = (_strstr($148,$149)|0);
       $string1 = $150;
       $151 = ($150|0)!=(0|0);
       if ($151) {
        $152 = $string1;
        $153 = $src;
        $154 = $152;
        $155 = $153;
        $156 = (($154) - ($155))|0;
        $157 = (($156) + 1)|0;
        $strpos = $157;
       }
      }
     }
     $158 = $2;
     $159 = ((($158)) + 4|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $strpos;
     $162 = (_CreateVariable($160,$161)|0);
     $sym = $162;
     $163 = ($162|0)!=(0|0);
     if ($163) {
      $164 = $sym;
      _LstWrite(2,0,$164);
      $0 = 0;
      $165 = $0;
      STACKTOP = sp;return ($165|0);
     } else {
      $0 = -1;
      $165 = $0;
      STACKTOP = sp;return ($165|0);
     }
    }
   }
   $113 = HEAP32[$1>>2]|0;
   $114 = $2;
   $115 = (($114) + ($113<<4)|0);
   $116 = (_TextItemError($115)|0);
   $0 = $116;
   $165 = $0;
   STACKTOP = sp;return ($165|0);
  }
 }
 $62 = HEAP32[$1>>2]|0;
 $63 = $2;
 $64 = (($63) + ($62<<4)|0);
 $65 = (_TextItemError($64)|0);
 $0 = $65;
 $165 = $0;
 STACKTOP = sp;return ($165|0);
}
function _StringInit() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $macro = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_CreateMacro(109640)|0);
 $macro = $0;
 $1 = $macro;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & -3;
 $5 = $4 | 2;
 HEAP16[$2>>1] = $5;
 $6 = $macro;
 $7 = ((($6)) + 24|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & -33;
 $10 = $9 | 32;
 HEAP16[$7>>1] = $10;
 $11 = $macro;
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = 229;
 $13 = $macro;
 $14 = ((($13)) + 28|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & -3;
 $17 = $16 | 2;
 HEAP8[$14>>0] = $17;
 $18 = $macro;
 $19 = ((($18)) + 28|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & -2;
 $22 = $21 | 1;
 HEAP8[$19>>0] = $22;
 $23 = $macro;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP16[$25>>1] = 1;
 $26 = (_LclAlloc(8)|0);
 $27 = $macro;
 $28 = ((($27)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $26;
 $31 = $macro;
 $32 = ((($31)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$35>>2] = 0;
 $36 = $macro;
 $37 = ((($36)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 4|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 & -2;
 HEAP8[$41>>0] = $43;
 $44 = (_CreateMacro(109648)|0);
 $macro = $44;
 $45 = $macro;
 $46 = ((($45)) + 24|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 & -3;
 $49 = $48 | 2;
 HEAP16[$46>>1] = $49;
 $50 = $macro;
 $51 = ((($50)) + 24|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 & -33;
 $54 = $53 | 32;
 HEAP16[$51>>1] = $54;
 $55 = $macro;
 $56 = ((($55)) + 8|0);
 HEAP32[$56>>2] = 230;
 $57 = $macro;
 $58 = ((($57)) + 28|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59 & -3;
 $61 = $60 | 2;
 HEAP8[$58>>0] = $61;
 $62 = $macro;
 $63 = ((($62)) + 60|0);
 $64 = HEAP32[$63>>2]|0;
 HEAP16[$64>>1] = 3;
 $65 = $macro;
 $66 = ((($65)) + 60|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 2|0);
 HEAP16[$68>>1] = 1;
 $69 = (_LclAlloc(24)|0);
 $70 = $macro;
 $71 = ((($70)) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 4|0);
 HEAP32[$73>>2] = $69;
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = ($74|0)<(3);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = $macro;
  $78 = ((($77)) + 60|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($76<<3)|0);
  HEAP32[$82>>2] = 0;
  $83 = $i;
  $84 = ($83|0)!=(0);
  $85 = $84&1;
  $86 = $85&255;
  $87 = $i;
  $88 = $macro;
  $89 = ((($88)) + 60|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($87<<3)|0);
  $94 = ((($93)) + 4|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $86 & 1;
  $97 = $95 & -2;
  $98 = $97 | $96;
  HEAP8[$94>>0] = $98;
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 $101 = (_CreateMacro(109655)|0);
 $macro = $101;
 $102 = $macro;
 $103 = ((($102)) + 24|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104 & -3;
 $106 = $105 | 2;
 HEAP16[$103>>1] = $106;
 $107 = $macro;
 $108 = ((($107)) + 24|0);
 $109 = HEAP16[$108>>1]|0;
 $110 = $109 & -33;
 $111 = $110 | 32;
 HEAP16[$108>>1] = $111;
 $112 = $macro;
 $113 = ((($112)) + 8|0);
 HEAP32[$113>>2] = 231;
 $114 = $macro;
 $115 = ((($114)) + 28|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116 & -3;
 $118 = $117 | 2;
 HEAP8[$115>>0] = $118;
 $119 = $macro;
 $120 = ((($119)) + 60|0);
 $121 = HEAP32[$120>>2]|0;
 HEAP16[$121>>1] = 1;
 $122 = (_LclAlloc(8)|0);
 $123 = $macro;
 $124 = ((($123)) + 60|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ((($125)) + 4|0);
 HEAP32[$126>>2] = $122;
 $127 = $macro;
 $128 = ((($127)) + 60|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 HEAP32[$131>>2] = 0;
 $132 = $macro;
 $133 = ((($132)) + 60|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($134)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ((($136)) + 4|0);
 $138 = HEAP8[$137>>0]|0;
 $139 = $138 & -2;
 HEAP8[$137>>0] = $139;
 $140 = (_CreateMacro(109664)|0);
 $macro = $140;
 $141 = $macro;
 $142 = ((($141)) + 24|0);
 $143 = HEAP16[$142>>1]|0;
 $144 = $143 & -3;
 $145 = $144 | 2;
 HEAP16[$142>>1] = $145;
 $146 = $macro;
 $147 = ((($146)) + 24|0);
 $148 = HEAP16[$147>>1]|0;
 $149 = $148 & -33;
 $150 = $149 | 32;
 HEAP16[$147>>1] = $150;
 $151 = $macro;
 $152 = ((($151)) + 8|0);
 HEAP32[$152>>2] = 232;
 $153 = $macro;
 $154 = ((($153)) + 28|0);
 $155 = HEAP8[$154>>0]|0;
 $156 = $155 & -3;
 $157 = $156 | 2;
 HEAP8[$154>>0] = $157;
 $158 = $macro;
 $159 = ((($158)) + 60|0);
 $160 = HEAP32[$159>>2]|0;
 HEAP16[$160>>1] = 3;
 $161 = $macro;
 $162 = ((($161)) + 60|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ((($163)) + 2|0);
 HEAP16[$164>>1] = 6;
 $165 = (_LclAlloc(24)|0);
 $166 = $macro;
 $167 = ((($166)) + 60|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($168)) + 4|0);
 HEAP32[$169>>2] = $165;
 $i = 0;
 while(1) {
  $170 = $i;
  $171 = ($170|0)<(3);
  if (!($171)) {
   break;
  }
  $172 = $i;
  $173 = $macro;
  $174 = ((($173)) + 60|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + ($172<<3)|0);
  HEAP32[$178>>2] = 0;
  $179 = $i;
  $180 = ($179|0)<(2);
  $181 = $180&1;
  $182 = $181&255;
  $183 = $i;
  $184 = $macro;
  $185 = ((($184)) + 60|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ((($186)) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + ($183<<3)|0);
  $190 = ((($189)) + 4|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $182 & 1;
  $193 = $191 & -2;
  $194 = $193 | $192;
  HEAP8[$190>>0] = $194;
  $195 = $i;
  $196 = (($195) + 1)|0;
  $i = $196;
 }
 STACKTOP = sp;return;
}
function _CatStrFunc($mi,$buffer,$tokenarray) {
 $mi = $mi|0;
 $buffer = $buffer|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi;
 $1 = $buffer;
 $2 = $tokenarray;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $p = $6;
 while(1) {
  $7 = $0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $p;
  $12 = (_strlen($11)|0);
  $i = $12;
  $13 = $1;
  $14 = $p;
  $15 = $i;
  _memcpy(($13|0),($14|0),($15|0))|0;
  $16 = $p;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $19 = (($18) + 4)|0;
  $20 = (($19) - 1)|0;
  $21 = $20 & -4;
  $22 = (($16) + ($21)|0);
  $p = $22;
  $23 = $i;
  $24 = $1;
  $25 = (($24) + ($23)|0);
  $1 = $25;
  $26 = $0;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + -1)|0;
  HEAP32[$27>>2] = $29;
 }
 $30 = $1;
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return 0;
}
function _InStrFunc($mi,$buffer,$tokenarray) {
 $mi = $mi|0;
 $buffer = $buffer|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $found = 0, $p = 0, $pos = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pos = sp + 12|0;
 $1 = $mi;
 $2 = $buffer;
 $3 = $tokenarray;
 HEAP32[$pos>>2] = 1;
 $4 = $2;
 HEAP8[$4>>0] = 48;
 $5 = $2;
 $6 = ((($5)) + 1|0);
 HEAP8[$6>>0] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 do {
  if ($11) {
   $12 = $1;
   $13 = ((($12)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = $3;
   $17 = (_GetNumber1163($15,$pos,$16)|0);
   $18 = ($17|0)==(-1);
   if ($18) {
    $0 = -1;
    $71 = $0;
    STACKTOP = sp;return ($71|0);
   } else {
    $19 = HEAP32[$pos>>2]|0;
    $20 = ($19|0)==(0);
    if (!($20)) {
     break;
    }
    $21 = HEAP32[$pos>>2]|0;
    $22 = (($21) + 1)|0;
    HEAP32[$pos>>2] = $22;
    break;
   }
  }
 } while(0);
 $23 = HEAP32[$pos>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_strlen($28)|0);
 $30 = ($23>>>0)>($29>>>0);
 if ($30) {
  $31 = HEAP32[$pos>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $32 = (_EmitErr(206,$vararg_buffer)|0);
  $0 = $32;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $1;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$pos>>2]|0;
  $47 = (($45) + ($46)|0);
  $48 = ((($47)) + -1|0);
  $49 = $1;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_strstr($48,$53)|0);
  $p = $54;
  $55 = $p;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = $p;
   $58 = $1;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $57;
   $64 = $62;
   $65 = (($63) - ($64))|0;
   $66 = (($65) + 1)|0;
   $found = $66;
   $67 = $found;
   $68 = $2;
   $69 = HEAP8[(548)>>0]|0;
   $70 = $69&255;
   (_myltoa($67,$68,$70,0,1)|0);
  }
 }
 $0 = 0;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _SizeStrFunc($mi,$buffer,$tokenarray) {
 $mi = $mi|0;
 $buffer = $buffer|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mi;
 $1 = $buffer;
 $2 = $tokenarray;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen($11)|0);
  $13 = $1;
  $14 = HEAP8[(548)>>0]|0;
  $15 = $14&255;
  (_myltoa($12,$13,$15,0,1)|0);
  STACKTOP = sp;return 0;
 } else {
  $16 = $1;
  HEAP8[$16>>0] = 48;
  $17 = $1;
  $18 = ((($17)) + 1|0);
  HEAP8[$18>>0] = 0;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _SubStrFunc($mi,$buffer,$tokenarray) {
 $mi = $mi|0;
 $buffer = $buffer|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, $size = 0, $sizereq = 0, $src = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $pos = sp + 24|0;
 $sizereq = sp + 12|0;
 $1 = $mi;
 $2 = $buffer;
 $3 = $tokenarray;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $src = $7;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = (_GetNumber1163($12,$pos,$13)|0);
 $15 = ($14|0)==(-1);
 if ($15) {
  $0 = -1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $16 = HEAP32[$pos>>2]|0;
 $17 = ($16|0)<=(0);
 do {
  if ($17) {
   $18 = HEAP32[$pos>>2]|0;
   $19 = ($18|0)!=(0);
   if (!($19)) {
    HEAP32[$pos>>2] = 1;
    break;
   }
   $20 = HEAP32[$pos>>2]|0;
   HEAP32[$vararg_buffer>>2] = $20;
   $21 = (_EmitErr(206,$vararg_buffer)|0);
   $0 = $21;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $22 = $src;
 $23 = (_strlen($22)|0);
 $size = $23;
 $24 = HEAP32[$pos>>2]|0;
 $25 = $size;
 $26 = ($24|0)>($25|0);
 if ($26) {
  $27 = HEAP32[$pos>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $27;
  $28 = (_EmitErr(206,$vararg_buffer1)|0);
  $0 = $28;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $29 = $size;
 $30 = HEAP32[$pos>>2]|0;
 $31 = (($29) - ($30))|0;
 $32 = (($31) + 1)|0;
 $size = $32;
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 do {
  if ($38) {
   $39 = $1;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $3;
   $45 = (_GetNumber1163($43,$sizereq,$44)|0);
   $46 = ($45|0)==(-1);
   if ($46) {
    $0 = -1;
    $64 = $0;
    STACKTOP = sp;return ($64|0);
   }
   $47 = HEAP32[$sizereq>>2]|0;
   $48 = ($47|0)<(0);
   if ($48) {
    $49 = (_EmitError(208)|0);
    $0 = $49;
    $64 = $0;
    STACKTOP = sp;return ($64|0);
   }
   $50 = HEAP32[$sizereq>>2]|0;
   $51 = $size;
   $52 = ($50|0)>($51|0);
   if (!($52)) {
    $54 = HEAP32[$sizereq>>2]|0;
    $size = $54;
    break;
   }
   $53 = (_EmitError(207)|0);
   $0 = $53;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $55 = $2;
 $56 = $src;
 $57 = HEAP32[$pos>>2]|0;
 $58 = (($56) + ($57)|0);
 $59 = ((($58)) + -1|0);
 $60 = $size;
 _memcpy(($55|0),($59|0),($60|0))|0;
 $61 = $2;
 $62 = $size;
 $63 = (($61) + ($62)|0);
 HEAP8[$63>>0] = 0;
 $0 = 0;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _GetNumber1163($string,$pi,$tokenarray) {
 $string = $string|0;
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $last = 0, $opndx = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 72|0;
 $opndx = sp;
 $i = sp + 80|0;
 $1 = $string;
 $2 = $pi;
 $3 = $tokenarray;
 $4 = $1;
 $5 = HEAP32[(616)>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = $3;
 $8 = (_Tokenize($4,$6,$7,1)|0);
 $last = $8;
 $9 = HEAP32[(616)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$i>>2] = $10;
 $11 = $3;
 $12 = $last;
 $13 = (_EvalOperand($i,$11,$12,$opndx,2)|0);
 $14 = ($13|0)==(-1);
 if ($14) {
  $0 = -1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 $15 = ((($opndx)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = HEAP32[$i>>2]|0;
  $19 = $3;
  $20 = (($19) + ($18<<4)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   $26 = HEAP32[$opndx>>2]|0;
   $27 = $2;
   HEAP32[$27>>2] = $26;
   $0 = 0;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $24 = $1;
 HEAP32[$vararg_buffer>>2] = $24;
 $25 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $25;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _SymSetCmpFunc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(560)>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)==(1);
 $3 = $2 ? 233 : 234;
 HEAP32[33696>>2] = $3;
 return;
}
function _SymClearLocal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((33700|0),0,508)|0;
 return;
}
function _SymGetLocal($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $l = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(127);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (33700 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $i;
   $12 = (33700 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $l;
   HEAP32[$14>>2] = $13;
   $15 = $l;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 60|0);
   $l = $17;
  }
  $18 = $i;
  $19 = (($18) + 1)|0;
  $i = $19;
 }
 $20 = $l;
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _SymSetLocal($proc) {
 $proc = $proc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $proc;
 _SymClearLocal();
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $l = $5;
 while(1) {
  $6 = $l;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $l;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_hashpjw($10)|0);
  $12 = (($11>>>0) % 127)&-1;
  $i = $12;
  $13 = $l;
  $14 = $i;
  $15 = (33700 + ($14<<2)|0);
  HEAP32[$15>>2] = $13;
  $16 = $l;
  $17 = ((($16)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $l = $18;
 }
 STACKTOP = sp;return;
}
function _SymAlloc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $sym = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_strlen($1)|0);
 $len = $2;
 $3 = (_LclAlloc(72)|0);
 $sym = $3;
 $4 = $sym;
 dest=$4; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = $len;
 $6 = ($5|0)>(247);
 if ($6) {
  (_EmitError(70)|0);
  $len = 247;
 }
 $7 = $len;
 $8 = $7&255;
 $9 = $sym;
 $10 = ((($9)) + 44|0);
 HEAP8[$10>>0] = $8;
 $11 = HEAP32[(560)>>2]|0;
 $12 = $11 >>> 12;
 $13 = $12 & 1;
 $14 = $13&255;
 $15 = $sym;
 $16 = ((($15)) + 24|0);
 $17 = $14&255;
 $18 = HEAP16[$16>>1]|0;
 $19 = $17 & 1;
 $20 = ($19 << 8)&65535;
 $21 = $18 & -257;
 $22 = $21 | $20;
 HEAP16[$16>>1] = $22;
 $23 = $sym;
 $24 = ((($23)) + 20|0);
 HEAP32[$24>>2] = 192;
 $25 = $len;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $len;
  $28 = (($27) + 1)|0;
  $29 = (_LclAlloc($28)|0);
  $30 = $sym;
  $31 = ((($30)) + 4|0);
  HEAP32[$31>>2] = $29;
  $32 = $sym;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = $len;
  _memcpy(($34|0),($35|0),($36|0))|0;
  $37 = $len;
  $38 = $sym;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37)|0);
  HEAP8[$41>>0] = 0;
  $44 = $sym;
  STACKTOP = sp;return ($44|0);
 } else {
  $42 = $sym;
  $43 = ((($42)) + 4|0);
  HEAP32[$43>>2] = 109841;
  $44 = $sym;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _SymFind($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_strlen($2)|0);
 $len = $3;
 $4 = $1;
 $5 = (_hashpjw($4)|0);
 $i = $5;
 $6 = HEAP32[15488>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $8 = $i;
   $9 = (($8|0) % 127)&-1;
   $10 = (33700 + ($9<<2)|0);
   HEAP32[34208>>2] = $10;
   while(1) {
    $11 = HEAP32[34208>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)!=(0|0);
    if (!($13)) {
     break L1;
    }
    $14 = $len;
    $15 = HEAP32[34208>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 44|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ($14|0)==($19|0);
    if ($20) {
     $21 = HEAP32[33696>>2]|0;
     $22 = $1;
     $23 = HEAP32[34208>>2]|0;
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $len;
     $28 = (FUNCTION_TABLE_iiii[$21 & 255]($22,$26,$27)|0);
     $29 = ($28|0)==(0);
     if ($29) {
      break;
     }
    }
    $32 = HEAP32[34208>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    HEAP32[34208>>2] = $33;
   }
   $30 = HEAP32[34208>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $0 = $31;
   $60 = $0;
   STACKTOP = sp;return ($60|0);
  }
 } while(0);
 $34 = $i;
 $35 = (($34|0) % 8009)&-1;
 $36 = (34212 + ($35<<2)|0);
 HEAP32[66248>>2] = $36;
 while(1) {
  $37 = HEAP32[66248>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   label = 14;
   break;
  }
  $40 = $len;
  $41 = HEAP32[66248>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 44|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($40|0)==($45|0);
  if ($46) {
   $47 = HEAP32[33696>>2]|0;
   $48 = $1;
   $49 = HEAP32[66248>>2]|0;
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $len;
   $54 = (FUNCTION_TABLE_iiii[$47 & 255]($48,$52,$53)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    label = 12;
    break;
   }
  }
  $58 = HEAP32[66248>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  HEAP32[66248>>2] = $59;
 }
 if ((label|0) == 12) {
  $56 = HEAP32[66248>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 else if ((label|0) == 14) {
  $0 = 0;
  $60 = $0;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function _SymLookup($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_SymFind($1)|0);
 $sym = $2;
 $3 = $sym;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $11 = $sym;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $0;
 $6 = (_SymAlloc($5)|0);
 $sym = $6;
 $7 = $sym;
 $8 = HEAP32[66248>>2]|0;
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[66252>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[66252>>2] = $10;
 $11 = $sym;
 STACKTOP = sp;return ($11|0);
}
function _SymLookupLocal($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_SymFind($1)|0);
 $sym = $2;
 $3 = $sym;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $0;
  $6 = (_SymAlloc($5)|0);
  $sym = $6;
  $7 = $sym;
  $8 = ((($7)) + 24|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & -5;
  $11 = $10 | 4;
  HEAP16[$8>>1] = $11;
  $12 = $sym;
  $13 = HEAP32[34208>>2]|0;
  HEAP32[$13>>2] = $12;
  $39 = $sym;
  STACKTOP = sp;return ($39|0);
 }
 $14 = $sym;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $39 = $sym;
  STACKTOP = sp;return ($39|0);
 }
 $18 = $sym;
 $19 = ((($18)) + 24|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20&65535) >>> 2;
 $22 = $21 & 1;
 $23 = $22&255;
 $24 = $23&255;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $39 = $sym;
  STACKTOP = sp;return ($39|0);
 }
 $26 = $sym;
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[66248>>2]|0;
 HEAP32[$28>>2] = $27;
 $29 = HEAP32[66252>>2]|0;
 $30 = (($29) + -1)|0;
 HEAP32[66252>>2] = $30;
 $31 = $sym;
 $32 = ((($31)) + 24|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 & -5;
 $35 = $34 | 4;
 HEAP16[$32>>1] = $35;
 $36 = $sym;
 HEAP32[$36>>2] = 0;
 $37 = $sym;
 $38 = HEAP32[34208>>2]|0;
 HEAP32[$38>>2] = $37;
 $39 = $sym;
 STACKTOP = sp;return ($39|0);
}
function _SymFree($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 _free_ext($1);
 STACKTOP = sp;return;
}
function _SymAddLocal($sym,$name) {
 $sym = $sym|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym2 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $sym;
 $2 = $name;
 $3 = $2;
 $4 = (_SymFind($3)|0);
 $sym2 = $4;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $sym2;
  $7 = ((($6)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $2;
   HEAP32[$vararg_buffer>>2] = $10;
   (_EmitErr(56,$vararg_buffer)|0);
   $0 = 0;
   $37 = $0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $11 = $2;
 $12 = (_strlen($11)|0);
 $13 = $12&255;
 $14 = $1;
 $15 = ((($14)) + 44|0);
 HEAP8[$15>>0] = $13;
 $16 = $1;
 $17 = ((($16)) + 44|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($19) + 1)|0;
 $21 = (_LclAlloc($20)|0);
 $22 = $1;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = $1;
 $29 = ((($28)) + 44|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + 1)|0;
 _memcpy(($26|0),($27|0),($32|0))|0;
 $33 = $1;
 HEAP32[$33>>2] = 0;
 $34 = $1;
 $35 = HEAP32[34208>>2]|0;
 HEAP32[$35>>2] = $34;
 $36 = $1;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _SymAddGlobal($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $sym;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_SymFind($4)|0);
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 if ($6) {
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  (_EmitErr(56,$vararg_buffer)|0);
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  HEAP32[$7>>2] = 0;
  $10 = $1;
  $11 = HEAP32[66248>>2]|0;
  HEAP32[$11>>2] = $10;
  $12 = HEAP32[66252>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[66252>>2] = $13;
  $14 = $1;
  $0 = $14;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _SymCreate($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $1;
 $3 = (_SymFind($2)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $5;
  (_EmitErr(56,$vararg_buffer)|0);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $6 = (_SymAlloc($5)|0);
  $sym = $6;
  $7 = $sym;
  $8 = HEAP32[66248>>2]|0;
  HEAP32[$8>>2] = $7;
  $9 = HEAP32[66252>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[66252>>2] = $10;
  $11 = $sym;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _SymLCreate($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $name;
 $2 = $1;
 $3 = (_SymFind($2)|0);
 $sym = $3;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $sym;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $1;
   HEAP32[$vararg_buffer>>2] = $9;
   (_EmitErr(56,$vararg_buffer)|0);
   $0 = 0;
   $15 = $0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $10 = $1;
 $11 = (_SymAlloc($10)|0);
 $sym = $11;
 $12 = $sym;
 $13 = HEAP32[34208>>2]|0;
 HEAP32[$13>>2] = $12;
 $14 = $sym;
 $0 = $14;
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _SymMakeAllSymbolsPublic() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(8009);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (34212 + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $sym = $4;
  while(1) {
   $5 = $sym;
   $6 = ($5|0)!=(0|0);
   if (!($6)) {
    break;
   }
   $7 = $sym;
   $8 = ((($7)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = $sym;
    $12 = ((($11)) + 24|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($13&65535) >>> 4;
    $15 = $14 & 1;
    $16 = $15&255;
    $17 = $16&255;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = $sym;
     $20 = ((($19)) + 24|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = ($21&65535) >>> 5;
     $23 = $22 & 1;
     $24 = $23&255;
     $25 = $24&255;
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = $sym;
      $28 = ((($27)) + 24|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = ($29&65535) >>> 14;
      $31 = $30 & 1;
      $32 = $31&255;
      $33 = $32&255;
      $34 = ($33|0)==(0);
      if ($34) {
       $35 = $sym;
       $36 = ((($35)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($37)) + 1|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = $39 << 24 >> 24;
       $41 = ($40|0)!=(38);
       if ($41) {
        $42 = $sym;
        $43 = ((($42)) + 24|0);
        $44 = HEAP16[$43>>1]|0;
        $45 = ($44&65535) >>> 7;
        $46 = $45 & 1;
        $47 = $46&255;
        $48 = $47&255;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = $sym;
         $51 = ((($50)) + 24|0);
         $52 = HEAP16[$51>>1]|0;
         $53 = $52 & -129;
         $54 = $53 | 128;
         HEAP16[$51>>1] = $54;
         $55 = $sym;
         _AddPublicData($55);
        }
       }
      }
     }
    }
   }
   $56 = $sym;
   $57 = HEAP32[$56>>2]|0;
   $sym = $57;
  }
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 STACKTOP = sp;return;
}
function _SymFini() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _SymInit() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $now = 0, $sym = 0, $time_of_day = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $time_of_day = sp + 32|0;
 HEAP32[66252>>2] = 0;
 HEAP32[15488>>2] = 0;
 _memset((34212|0),0,32036)|0;
 $0 = (_time((0|0))|0);
 HEAP32[$time_of_day>>2] = $0;
 $1 = (_localtime(($time_of_day|0))|0);
 $now = $1;
 $2 = $now;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = $now;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $now;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) % 100)&-1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $12;
 (_sprintf(109672,109684,$vararg_buffer)|0);
 $13 = $now;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $now;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $now;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $15;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $18;
 $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
 HEAP32[$vararg_ptr7>>2] = $20;
 (_sprintf(109699,109711,$vararg_buffer3)|0);
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21>>>0)<(6);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = (66256 + (($23*12)|0)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_SymCreate($25)|0);
  $sym = $26;
  $27 = $sym;
  $28 = ((($27)) + 16|0);
  HEAP32[$28>>2] = 10;
  $29 = $sym;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 & -3;
  $33 = $32 | 2;
  HEAP16[$30>>1] = $33;
  $34 = $sym;
  $35 = ((($34)) + 24|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 & -33;
  $38 = $37 | 32;
  HEAP16[$35>>1] = $38;
  $39 = $i;
  $40 = (66256 + (($39*12)|0)|0);
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $sym;
  $44 = ((($43)) + 8|0);
  HEAP32[$44>>2] = $42;
  $45 = $i;
  $46 = (66256 + (($45*12)|0)|0);
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $sym;
   $51 = $i;
   $52 = (66256 + (($51*12)|0)|0);
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$54>>2] = $50;
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = ($57>>>0)<(4);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = (66328 + ($59<<4)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_SymCreate($61)|0);
  $sym = $62;
  $63 = $sym;
  $64 = ((($63)) + 16|0);
  HEAP32[$64>>2] = 1;
  $65 = $sym;
  $66 = ((($65)) + 24|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 & -3;
  $69 = $68 | 2;
  HEAP16[$66>>1] = $69;
  $70 = $sym;
  $71 = ((($70)) + 24|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 & -33;
  $74 = $73 | 32;
  HEAP16[$71>>1] = $74;
  $75 = $i;
  $76 = (66328 + ($75<<4)|0);
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $sym;
  $80 = ((($79)) + 8|0);
  HEAP32[$80>>2] = $78;
  $81 = $i;
  $82 = (66328 + ($81<<4)|0);
  $83 = ((($82)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $sym;
  $86 = ((($85)) + 40|0);
  HEAP32[$86>>2] = $84;
  $87 = $i;
  $88 = (66328 + ($87<<4)|0);
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)!=(0|0);
  if ($91) {
   $92 = $sym;
   $93 = $i;
   $94 = (66328 + ($93<<4)|0);
   $95 = ((($94)) + 12|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$96>>2] = $92;
  }
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 $99 = $sym;
 $100 = ((($99)) + 24|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = $101 & -257;
 HEAP16[$100>>1] = $102;
 $103 = HEAP32[66392>>2]|0;
 $104 = ((($103)) + 24|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105 & -65;
 $107 = $106 | 64;
 HEAP16[$104>>1] = $107;
 $108 = HEAP32[66392>>2]|0;
 $109 = ((($108)) + 24|0);
 $110 = HEAP16[$109>>1]|0;
 $111 = $110 & -257;
 HEAP16[$109>>1] = $111;
 $112 = HEAP32[13344>>2]|0;
 $113 = ((($112)) + 24|0);
 $114 = HEAP16[$113>>1]|0;
 $115 = $114 & -257;
 HEAP16[$113>>1] = $115;
 STACKTOP = sp;return;
}
function _SymPassInit($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pass;
 $1 = $0;
 $2 = ($1|0)==(0);
 $3 = HEAP8[87036>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 $or$cond = $2 | $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5>>>0)<(8009);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (34212 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $sym = $9;
  while(1) {
   $10 = $sym;
   $11 = ($10|0)!=(0|0);
   if (!($11)) {
    break;
   }
   $12 = $sym;
   $13 = ((($12)) + 24|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = ($14&65535) >>> 5;
   $16 = $15 & 1;
   $17 = $16&255;
   $18 = $17&255;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $sym;
    $21 = ((($20)) + 24|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22 & -3;
    HEAP16[$21>>1] = $23;
   }
   $24 = $sym;
   $25 = HEAP32[$24>>2]|0;
   $sym = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function _SymGetCount() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[66252>>2]|0;
 return ($0|0);
}
function _SymGetAll($syms) {
 $syms = $syms|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $sym = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $syms;
 $j = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1>>>0)<(8009);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (34212 + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $sym = $5;
  while(1) {
   $6 = $sym;
   $7 = ($6|0)!=(0|0);
   if (!($7)) {
    break;
   }
   $8 = $sym;
   $9 = $j;
   $10 = (($9) + 1)|0;
   $j = $10;
   $11 = $0;
   $12 = (($11) + ($9<<2)|0);
   HEAP32[$12>>2] = $8;
   $13 = $sym;
   $14 = HEAP32[$13>>2]|0;
   $sym = $14;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _SymEnum($sym,$pi) {
 $sym = $sym|0;
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $pi;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $1;
  HEAP32[$4>>2] = 0;
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = (34212 + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $0 = $8;
 } else {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $0 = $10;
 }
 while(1) {
  $11 = $0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(8008);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = (34212 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
 }
 if ((label|0) == 7) {
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _hashpjw($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $g = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $h = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  $4 = $h;
  if (!($3)) {
   break;
  }
  $5 = $4 << 5;
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = $8 | 32;
  $10 = (($5) + ($9))|0;
  $h = $10;
  $11 = $h;
  $12 = $11 & -32768;
  $g = $12;
  $13 = $g;
  $14 = $h;
  $15 = $14 ^ $13;
  $h = $15;
  $16 = $g;
  $17 = $16 >>> 15;
  $18 = $h;
  $19 = $18 ^ $17;
  $h = $19;
  $20 = $0;
  $21 = ((($20)) + 1|0);
  $0 = $21;
 }
 STACKTOP = sp;return ($4|0);
}
function _free_ext($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 1:  {
  $4 = $0;
  $5 = ((($4)) + 24|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6&65535) >>> 11;
  $8 = $7 & 1;
  $9 = $8&255;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   $11 = $0;
   _DeleteProc($11);
  }
  break;
 }
 case 2:  {
  $12 = $0;
  $13 = ((($12)) + 24|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14&65535) >>> 11;
  $16 = $15 & 1;
  $17 = $16&255;
  $18 = ($17<<24>>24)!=(0);
  if ($18) {
   $19 = $0;
   _DeleteProc($19);
  }
  $20 = $0;
  $21 = ((($20)) + 28|0);
  HEAP32[$21>>2] = 0;
  break;
 }
 case 3:  {
  break;
 }
 case 4:  {
  $22 = $0;
  _DeleteGroup($22);
  break;
 }
 case 7:  {
  $23 = $0;
  _DeleteType($23);
  break;
 }
 case 9:  {
  $24 = $0;
  _ReleaseMacroData($24);
  break;
 }
 case 10:  {
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function _strtotb($p,$ld,$negative) {
 $p = $p|0;
 $ld = $ld|0;
 $negative = $negative|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exp1 = 0, $exp_sign = 0, $exp_value = 0, $exponent = 0, $exponent_tmp = 0, $overflow = 0, $sign = 0, $value = 0, $value_tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $value = sp + 12|0;
 $value_tmp = sp;
 $1 = $p;
 $2 = $ld;
 $3 = $negative;
 $sign = 1;
 $exp_sign = 1;
 while(1) {
  $4 = $1;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (_isspace($6)|0);
  $8 = ($7|0)!=(0);
  $9 = $1;
  if (!($8)) {
   break;
  }
  $10 = ((($9)) + 1|0);
  $1 = $10;
 }
 $11 = HEAP8[$9>>0]|0;
 $12 = $11 << 24 >> 24;
 switch ($12|0) {
 case 45:  {
  $sign = -1;
  label = 6;
  break;
 }
 case 43:  {
  label = 6;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 6) {
  $13 = $1;
  $14 = ((($13)) + 1|0);
  $1 = $14;
 }
 $15 = $3;
 $16 = ($15<<24>>24)!=(0);
 if ($16) {
  $17 = $sign;
  $18 = (0 - ($17))|0;
  $sign = $18;
 }
 ;HEAP32[$value>>2]=0|0;HEAP32[$value+4>>2]=0|0;HEAP32[$value+8>>2]=0|0;
 ;HEAP32[$value_tmp>>2]=0|0;HEAP32[$value_tmp+4>>2]=0|0;HEAP32[$value_tmp+8>>2]=0|0;
 $exp1 = 0;
 $exponent_tmp = 0;
 $overflow = 0;
 while(1) {
  $19 = $1;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = (($21) - 48)|0;
  $23 = ($22>>>0)<(10);
  if (!($23)) {
   break;
  }
  $24 = $overflow;
  $25 = ($24|0)!=(0);
  do {
   if ($25) {
    $26 = $exponent_tmp;
    $27 = (($26) + 1)|0;
    $exponent_tmp = $27;
    $28 = $exp1;
    $29 = (($28) + 1)|0;
    $exp1 = $29;
   } else {
    $30 = $1;
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = (($32) - 48)|0;
    $34 = (_add_check_u96_overflow($value_tmp,$33)|0);
    $35 = ($34|0)!=(0);
    if ($35) {
     $overflow = 1;
     $36 = $exponent_tmp;
     $37 = (($36) + 1)|0;
     $exponent_tmp = $37;
     $38 = $exp1;
     $39 = (($38) + 1)|0;
     $exp1 = $39;
     break;
    }
    $40 = $1;
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 << 24 >> 24;
    $43 = ($42|0)!=(48);
    if ($43) {
     ;HEAP32[$value>>2]=HEAP32[$value_tmp>>2]|0;HEAP32[$value+4>>2]=HEAP32[$value_tmp+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$value_tmp+8>>2]|0;
     $exp1 = 0;
     break;
    }
    $44 = HEAP32[$value>>2]|0;
    $45 = ($44|0)!=(0);
    if (!($45)) {
     $46 = ((($value)) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)!=(0);
     if (!($48)) {
      $49 = ((($value)) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)!=(0);
      if (!($51)) {
       break;
      }
     }
    }
    $52 = $exp1;
    $53 = (($52) + 1)|0;
    $exp1 = $53;
   }
  } while(0);
  $54 = $1;
  $55 = ((($54)) + 1|0);
  $1 = $55;
 }
 $56 = $exp1;
 $exponent = $56;
 $57 = $1;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 << 24 >> 24;
 $60 = ($59|0)==(46);
 L31: do {
  if ($60) {
   $61 = $1;
   $62 = ((($61)) + 1|0);
   $1 = $62;
   while(1) {
    $63 = $1;
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = (($65) - 48)|0;
    $67 = ($66>>>0)<(10);
    if (!($67)) {
     break L31;
    }
    $68 = $overflow;
    $69 = ($68|0)==(0);
    do {
     if ($69) {
      $70 = $1;
      $71 = HEAP8[$70>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) - 48)|0;
      $74 = (_add_check_u96_overflow($value_tmp,$73)|0);
      $75 = ($74|0)!=(0);
      if ($75) {
       $overflow = 1;
       break;
      }
      $76 = $exponent_tmp;
      $77 = (($76) + -1)|0;
      $exponent_tmp = $77;
      $78 = $1;
      $79 = HEAP8[$78>>0]|0;
      $80 = $79 << 24 >> 24;
      $81 = ($80|0)!=(48);
      if ($81) {
       ;HEAP32[$value>>2]=HEAP32[$value_tmp>>2]|0;HEAP32[$value+4>>2]=HEAP32[$value_tmp+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$value_tmp+8>>2]|0;
       $82 = $exponent_tmp;
       $exponent = $82;
      }
     }
    } while(0);
    $83 = $1;
    $84 = ((($83)) + 1|0);
    $1 = $84;
   }
  }
 } while(0);
 $exp_value = 0;
 $85 = $1;
 $86 = HEAP8[$85>>0]|0;
 $87 = $86 << 24 >> 24;
 $88 = $87 | 32;
 $89 = ($88|0)==(101);
 if ($89) {
  $90 = $1;
  $91 = ((($90)) + 1|0);
  $1 = $91;
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 << 24 >> 24;
  switch ($93|0) {
  case 45:  {
   $exp_sign = -1;
   label = 34;
   break;
  }
  case 43:  {
   label = 34;
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
   break;
  }
  default: {
   $96 = $2;
   $97 = $96;
   $98 = $97;
   HEAP32[$98>>2] = 0;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = 0;
   $101 = $2;
   $102 = ((($101)) + 8|0);
   HEAP16[$102>>1] = 0;
   $103 = $sign;
   $104 = ($103|0)<(0);
   if ($104) {
    $105 = $2;
    $106 = ((($105)) + 8|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $108 | 32768;
    $110 = $109&65535;
    HEAP16[$106>>1] = $110;
   }
   $111 = $2;
   $0 = $111;
   $143 = $0;
   STACKTOP = sp;return ($143|0);
  }
  }
  if ((label|0) == 34) {
   $94 = $1;
   $95 = ((($94)) + 1|0);
   $1 = $95;
  }
  while(1) {
   $112 = $1;
   $113 = HEAP8[$112>>0]|0;
   $114 = $113 << 24 >> 24;
   $115 = (($114) - 48)|0;
   $116 = ($115>>>0)<(10);
   if (!($116)) {
    break;
   }
   $117 = $exp_value;
   $118 = ($117*10)|0;
   $119 = $1;
   $120 = ((($119)) + 1|0);
   $1 = $120;
   $121 = HEAP8[$119>>0]|0;
   $122 = $121 << 24 >> 24;
   $123 = (($122) - 48)|0;
   $124 = (($118) + ($123))|0;
   $exp_value = $124;
  }
  $125 = $exp_sign;
  $126 = ($125|0)<(0);
  if ($126) {
   $127 = $exp_value;
   $128 = (0 - ($127))|0;
   $exp_value = $128;
  }
 }
 $129 = $exponent;
 $130 = $exp_value;
 $131 = (($130) + ($129))|0;
 $exp_value = $131;
 $132 = $exp_value;
 $133 = $2;
 (_TB_create($value,$132,$133)|0);
 $134 = $sign;
 $135 = ($134|0)<(0);
 if ($135) {
  $136 = $2;
  $137 = ((($136)) + 8|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138&65535;
  $140 = $139 | 32768;
  $141 = $140&65535;
  HEAP16[$137>>1] = $141;
 }
 $142 = $2;
 $0 = $142;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function _add_check_u96_overflow($x,$c) {
 $x = $x|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cy = sp;
 $1 = $x;
 $2 = $c;
 $3 = $1;
 $4 = (_cmp_u96_max($3)|0);
 $5 = ($4|0)>(0);
 if ($5) {
  $0 = 1;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $6 = $2;
 $7 = $cy;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(3);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $1;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (___muldi3(($16|0),0,10,0)|0);
  $18 = tempRet0;
  $19 = $cy;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_i64Add(($21|0),($24|0),($17|0),($18|0))|0);
  $26 = tempRet0;
  $27 = $cy;
  $28 = $27;
  HEAP32[$28>>2] = $25;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = $cy;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $i;
  $38 = $1;
  $39 = (($38) + ($37<<2)|0);
  HEAP32[$39>>2] = $33;
  $40 = $cy;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = $cy;
  $47 = $46;
  HEAP32[$47>>2] = $45;
  $48 = (($46) + 4)|0;
  $49 = $48;
  HEAP32[$49>>2] = 0;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $0 = 0;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _TB_create($value,$exponent,$ld) {
 $value = $value|0;
 $exponent = $exponent|0;
 $ld = $ld|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $i = 0, $res = 0, $tabExp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $res = sp;
 $0 = $value;
 $1 = $exponent;
 $2 = $ld;
 $3 = $1;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = $1;
  $6 = (0 - ($5))|0;
  $1 = $6;
  $tabExp = 66396;
 } else {
  $tabExp = 66604;
 }
 $7 = $0;
 (_U96LD($7,$res)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(13);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $10 & 1;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = $tabExp;
   $14 = $i;
   $15 = (($13) + ($14<<4)|0);
   (_multiply($res,$15,$res)|0);
  }
  $16 = $1;
  $17 = $16 >> 1;
  $1 = $17;
  $18 = $1;
  $19 = ($18|0)==(0);
  if ($19) {
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = ((($res)) + 12|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 HEAP16[$25>>1] = $23;
 $26 = ((($res)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($res)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_i64Add(($27|0),0,0,($29|0))|0);
 $31 = tempRet0;
 $32 = $2;
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $31;
 $37 = HEAP32[$res>>2]|0;
 $38 = $37 & -2147483648;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return 0;
 }
 $40 = $2;
 $41 = $40;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)==(-1);
 $48 = ($46|0)==(-1);
 $49 = $47 & $48;
 $50 = $2;
 if ($49) {
  $51 = $50;
  $52 = $51;
  HEAP32[$52>>2] = 0;
  $53 = (($51) + 4)|0;
  $54 = $53;
  HEAP32[$54>>2] = -2147483648;
  $55 = $2;
  $56 = ((($55)) + 8|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = (($57) + 1)<<16>>16;
  HEAP16[$56>>1] = $58;
  STACKTOP = sp;return 0;
 } else {
  $59 = $50;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + 4)|0;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (_i64Add(($61|0),($64|0),1,0)|0);
  $66 = tempRet0;
  $67 = $50;
  $68 = $67;
  HEAP32[$68>>2] = $65;
  $69 = (($67) + 4)|0;
  $70 = $69;
  HEAP32[$70>>2] = $66;
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _U96LD($op,$res) {
 $op = $op|0;
 $res = $res|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $bs = 0, $shft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $op;
 $1 = $res;
 $2 = $1;
 $3 = $0;
 ;HEAP32[$2>>2]=HEAP32[$3>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_bitsize32($6)|0);
 $8 = (($7) + 64)|0;
 $bs = $8;
 $9 = $bs;
 $10 = ($9|0)==(64);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $1;
  HEAP32[$20>>2] = 0;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_bitsize32($23)|0);
  $25 = (($24) + 32)|0;
  $bs = $25;
 }
 $26 = $bs;
 $27 = ($26|0)==(32);
 if ($27) {
  $28 = $1;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $1;
  $32 = ((($31)) + 8|0);
  HEAP32[$32>>2] = $30;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $1;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
  $37 = $1;
  HEAP32[$37>>2] = 0;
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_bitsize32($40)|0);
  $bs = $41;
 }
 $42 = $bs;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $1;
  $45 = ((($44)) + 12|0);
  HEAP16[$45>>1] = 0;
  STACKTOP = sp;return 0;
 }
 $46 = $bs;
 $47 = (($46) - 1)|0;
 $48 = (($47) + 16383)|0;
 $49 = $48&65535;
 $50 = $1;
 $51 = ((($50)) + 12|0);
 HEAP16[$51>>1] = $49;
 $52 = $bs;
 $53 = (($52|0) % 32)&-1;
 $bs = $53;
 $54 = $bs;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  STACKTOP = sp;return 0;
 }
 $56 = $bs;
 $57 = (32 - ($56))|0;
 $shft = $57;
 $58 = $shft;
 $59 = $1;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 << $58;
 HEAP32[$60>>2] = $62;
 $63 = $1;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $bs;
 $67 = $65 >>> $66;
 $68 = $1;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 | $67;
 HEAP32[$69>>2] = $71;
 $72 = $shft;
 $73 = $1;
 $74 = ((($73)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 << $72;
 HEAP32[$74>>2] = $76;
 $77 = $1;
 $78 = HEAP32[$77>>2]|0;
 $79 = $bs;
 $80 = $78 >>> $79;
 $81 = $1;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 | $80;
 HEAP32[$82>>2] = $84;
 $85 = $shft;
 $86 = $1;
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 << $85;
 HEAP32[$86>>2] = $88;
 STACKTOP = sp;return 0;
}
function _multiply($op1,$op2,$res) {
 $op1 = $op1|0;
 $op2 = $op2|0;
 $res = $res|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exp = 0, $r1 = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x1 = sp + 24|0;
 $r1 = sp;
 $0 = $op1;
 $1 = $op2;
 $2 = $res;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 & 32767;
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 32767;
 $13 = (($7) + ($12))|0;
 $14 = (($13) - 16383)|0;
 $15 = (($14) + 1)|0;
 $exp = $15;
 $16 = $0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = (___muldi3(($17|0),0,($19|0),0)|0);
 $21 = tempRet0;
 $22 = $r1;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = $0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (___muldi3(($28|0),0,($31|0),0)|0);
 $33 = tempRet0;
 $34 = ((($r1)) + 8|0);
 $35 = $34;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $33;
 $39 = $0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (___muldi3(($41|0),0,($44|0),0)|0);
 $46 = tempRet0;
 $47 = ((($r1)) + 16|0);
 $48 = $47;
 $49 = $48;
 HEAP32[$49>>2] = $45;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $46;
 $52 = $0;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $1;
 $56 = HEAP32[$55>>2]|0;
 $57 = (___muldi3(($54|0),0,($56|0),0)|0);
 $58 = tempRet0;
 $59 = $x1;
 $60 = $59;
 HEAP32[$60>>2] = $57;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = $58;
 $63 = $x1;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + 4)|0;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 (_add192($r1,$65,$68,1)|0);
 $69 = $0;
 $70 = HEAP32[$69>>2]|0;
 $71 = $1;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (___muldi3(($70|0),0,($73|0),0)|0);
 $75 = tempRet0;
 $76 = $x1;
 $77 = $76;
 HEAP32[$77>>2] = $74;
 $78 = (($76) + 4)|0;
 $79 = $78;
 HEAP32[$79>>2] = $75;
 $80 = $x1;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) + 4)|0;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 (_add192($r1,$82,$85,1)|0);
 $86 = $0;
 $87 = HEAP32[$86>>2]|0;
 $88 = $1;
 $89 = ((($88)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (___muldi3(($87|0),0,($90|0),0)|0);
 $92 = tempRet0;
 $93 = $x1;
 $94 = $93;
 HEAP32[$94>>2] = $91;
 $95 = (($93) + 4)|0;
 $96 = $95;
 HEAP32[$96>>2] = $92;
 $97 = $x1;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 (_add192($r1,$99,$102,2)|0);
 $103 = $0;
 $104 = ((($103)) + 8|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $1;
 $107 = HEAP32[$106>>2]|0;
 $108 = (___muldi3(($105|0),0,($107|0),0)|0);
 $109 = tempRet0;
 $110 = $x1;
 $111 = $110;
 HEAP32[$111>>2] = $108;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $109;
 $114 = $x1;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 (_add192($r1,$116,$119,2)|0);
 $120 = $0;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $1;
 $124 = ((($123)) + 8|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (___muldi3(($122|0),0,($125|0),0)|0);
 $127 = tempRet0;
 $128 = $x1;
 $129 = $128;
 HEAP32[$129>>2] = $126;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = $127;
 $132 = $x1;
 $133 = $132;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($132) + 4)|0;
 $136 = $135;
 $137 = HEAP32[$136>>2]|0;
 (_add192($r1,$134,$137,3)|0);
 $138 = $0;
 $139 = ((($138)) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $1;
 $142 = ((($141)) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (___muldi3(($140|0),0,($143|0),0)|0);
 $145 = tempRet0;
 $146 = $x1;
 $147 = $146;
 HEAP32[$147>>2] = $144;
 $148 = (($146) + 4)|0;
 $149 = $148;
 HEAP32[$149>>2] = $145;
 $150 = $x1;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = (($150) + 4)|0;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 (_add192($r1,$152,$155,3)|0);
 $156 = (_normalize($r1)|0);
 $157 = $exp;
 $158 = (($157) + ($156))|0;
 $exp = $158;
 $159 = ((($r1)) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & -2147483648;
 $162 = ($161|0)!=(0);
 if (!($162)) {
  $187 = ((($r1)) + 12|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $2;
  HEAP32[$189>>2] = $188;
  $190 = ((($r1)) + 16|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $2;
  $193 = ((($192)) + 4|0);
  HEAP32[$193>>2] = $191;
  $194 = ((($r1)) + 20|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $2;
  $197 = ((($196)) + 8|0);
  HEAP32[$197>>2] = $195;
  $198 = $exp;
  $199 = $198&65535;
  $200 = $2;
  $201 = ((($200)) + 12|0);
  HEAP16[$201>>1] = $199;
  STACKTOP = sp;return 0;
 }
 $163 = ((($r1)) + 20|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)==(-1);
 if ($165) {
  $166 = ((($r1)) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(-1);
  if ($168) {
   $169 = ((($r1)) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)==(-1);
   if ($171) {
    $172 = ((($r1)) + 12|0);
    HEAP32[$172>>2] = 0;
    $173 = ((($r1)) + 16|0);
    HEAP32[$173>>2] = 0;
    $174 = ((($r1)) + 20|0);
    HEAP32[$174>>2] = -2147483648;
    $175 = $exp;
    $176 = (($175) + 1)|0;
    $exp = $176;
    $187 = ((($r1)) + 12|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $2;
    HEAP32[$189>>2] = $188;
    $190 = ((($r1)) + 16|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $2;
    $193 = ((($192)) + 4|0);
    HEAP32[$193>>2] = $191;
    $194 = ((($r1)) + 20|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $2;
    $197 = ((($196)) + 8|0);
    HEAP32[$197>>2] = $195;
    $198 = $exp;
    $199 = $198&65535;
    $200 = $2;
    $201 = ((($200)) + 12|0);
    HEAP16[$201>>1] = $199;
    STACKTOP = sp;return 0;
   }
  }
 }
 $177 = $x1;
 $178 = $177;
 HEAP32[$178>>2] = 1;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = 0;
 $181 = $x1;
 $182 = $181;
 $183 = HEAP32[$182>>2]|0;
 $184 = (($181) + 4)|0;
 $185 = $184;
 $186 = HEAP32[$185>>2]|0;
 (_add192($r1,$183,$186,3)|0);
 $187 = ((($r1)) + 12|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $2;
 HEAP32[$189>>2] = $188;
 $190 = ((($r1)) + 16|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $2;
 $193 = ((($192)) + 4|0);
 HEAP32[$193>>2] = $191;
 $194 = ((($r1)) + 20|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $2;
 $197 = ((($196)) + 8|0);
 HEAP32[$197>>2] = $195;
 $198 = $exp;
 $199 = $198&65535;
 $200 = $2;
 $201 = ((($200)) + 12|0);
 HEAP16[$201>>1] = $199;
 STACKTOP = sp;return 0;
}
function _add192($res,$0,$1,$pos) {
 $res = $res|0;
 $0 = $0|0;
 $1 = $1|0;
 $pos = $pos|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $cy = sp;
 $2 = $res;
 $5 = $3;
 $6 = $5;
 HEAP32[$6>>2] = $0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $4 = $pos;
 $9 = $3;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $cy;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $4;
 $i = $19;
 while(1) {
  $20 = $i;
  $21 = ($20|0)<(6);
  if (!($21)) {
   break;
  }
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $cy;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_i64Add(($28|0),($31|0),($25|0),0)|0);
  $33 = tempRet0;
  $34 = $cy;
  $35 = $34;
  HEAP32[$35>>2] = $32;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $33;
  $38 = $cy;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = $i;
  $45 = $2;
  $46 = (($45) + ($44<<2)|0);
  HEAP32[$46>>2] = $40;
  $47 = $cy;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = $cy;
  $54 = $53;
  HEAP32[$54>>2] = $52;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = 0;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 $59 = $3;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $cy;
 $66 = $65;
 HEAP32[$66>>2] = $64;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = $4;
 $70 = (($69) + 1)|0;
 $i = $70;
 while(1) {
  $71 = $i;
  $72 = ($71|0)<(6);
  if (!($72)) {
   break;
  }
  $73 = $i;
  $74 = $2;
  $75 = (($74) + ($73<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $cy;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (_i64Add(($79|0),($82|0),($76|0),0)|0);
  $84 = tempRet0;
  $85 = $cy;
  $86 = $85;
  HEAP32[$86>>2] = $83;
  $87 = (($85) + 4)|0;
  $88 = $87;
  HEAP32[$88>>2] = $84;
  $89 = $cy;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 4)|0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = $i;
  $96 = $2;
  $97 = (($96) + ($95<<2)|0);
  HEAP32[$97>>2] = $91;
  $98 = $cy;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = $cy;
  $105 = $104;
  HEAP32[$105>>2] = $103;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = 0;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 STACKTOP = sp;return 0;
}
function _normalize($res) {
 $res = $res|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bs = 0, $bs1 = 0, $shft = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $res;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_bitsize64($6,$9)|0);
 $11 = (($10) + 128)|0;
 $bs = $11;
 $12 = $bs;
 $13 = ($12|0)==(128);
 if ($13) {
  $14 = $1;
  $15 = ((($14)) + 8|0);
  $16 = $15;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = $18;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $21;
  $28 = $1;
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $1;
  $36 = ((($35)) + 8|0);
  $37 = $36;
  $38 = $37;
  HEAP32[$38>>2] = $31;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $34;
  $41 = $1;
  $42 = $41;
  $43 = $42;
  HEAP32[$43>>2] = 0;
  $44 = (($42) + 4)|0;
  $45 = $44;
  HEAP32[$45>>2] = 0;
  $46 = $1;
  $47 = ((($46)) + 16|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_bitsize64($50,$53)|0);
  $55 = (($54) + 64)|0;
  $bs = $55;
 }
 $56 = $bs;
 $57 = ($56|0)==(64);
 if ($57) {
  $58 = $1;
  $59 = ((($58)) + 8|0);
  $60 = $59;
  $61 = $60;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + 4)|0;
  $64 = $63;
  $65 = HEAP32[$64>>2]|0;
  $66 = $1;
  $67 = ((($66)) + 16|0);
  $68 = $67;
  $69 = $68;
  HEAP32[$69>>2] = $62;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = $65;
  $72 = $1;
  $73 = $72;
  $74 = $73;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + 4)|0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = $1;
  $80 = ((($79)) + 8|0);
  $81 = $80;
  $82 = $81;
  HEAP32[$82>>2] = $75;
  $83 = (($81) + 4)|0;
  $84 = $83;
  HEAP32[$84>>2] = $78;
  $85 = $1;
  $86 = $85;
  $87 = $86;
  HEAP32[$87>>2] = 0;
  $88 = (($86) + 4)|0;
  $89 = $88;
  HEAP32[$89>>2] = 0;
  $90 = $1;
  $91 = ((($90)) + 16|0);
  $92 = $91;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) + 4)|0;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (_bitsize64($94,$97)|0);
  $bs = $98;
 }
 $99 = $bs;
 $100 = ($99|0)==(0);
 if ($100) {
  $0 = 0;
  $202 = $0;
  STACKTOP = sp;return ($202|0);
 }
 $101 = $bs;
 $102 = (($101|0) % 64)&-1;
 $bs1 = $102;
 $103 = $bs1;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $bs1;
  $106 = (64 - ($105))|0;
  $shft = $106;
  $107 = $shft;
  $108 = $1;
  $109 = ((($108)) + 16|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (_bitshift64Shl(($112|0),($115|0),($107|0))|0);
  $117 = tempRet0;
  $118 = $109;
  $119 = $118;
  HEAP32[$119>>2] = $116;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP32[$121>>2] = $117;
  $122 = $1;
  $123 = ((($122)) + 8|0);
  $124 = $123;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 4)|0;
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $130 = $bs1;
  $131 = (_bitshift64Lshr(($126|0),($129|0),($130|0))|0);
  $132 = tempRet0;
  $133 = $1;
  $134 = ((($133)) + 16|0);
  $135 = $134;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = (($135) + 4)|0;
  $139 = $138;
  $140 = HEAP32[$139>>2]|0;
  $141 = $137 | $131;
  $142 = $140 | $132;
  $143 = $134;
  $144 = $143;
  HEAP32[$144>>2] = $141;
  $145 = (($143) + 4)|0;
  $146 = $145;
  HEAP32[$146>>2] = $142;
  $147 = $shft;
  $148 = $1;
  $149 = ((($148)) + 8|0);
  $150 = $149;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (($150) + 4)|0;
  $154 = $153;
  $155 = HEAP32[$154>>2]|0;
  $156 = (_bitshift64Shl(($152|0),($155|0),($147|0))|0);
  $157 = tempRet0;
  $158 = $149;
  $159 = $158;
  HEAP32[$159>>2] = $156;
  $160 = (($158) + 4)|0;
  $161 = $160;
  HEAP32[$161>>2] = $157;
  $162 = $1;
  $163 = $162;
  $164 = $163;
  $165 = HEAP32[$164>>2]|0;
  $166 = (($163) + 4)|0;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = $bs1;
  $170 = (_bitshift64Lshr(($165|0),($168|0),($169|0))|0);
  $171 = tempRet0;
  $172 = $1;
  $173 = ((($172)) + 8|0);
  $174 = $173;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = (($174) + 4)|0;
  $178 = $177;
  $179 = HEAP32[$178>>2]|0;
  $180 = $176 | $170;
  $181 = $179 | $171;
  $182 = $173;
  $183 = $182;
  HEAP32[$183>>2] = $180;
  $184 = (($182) + 4)|0;
  $185 = $184;
  HEAP32[$185>>2] = $181;
  $186 = $shft;
  $187 = $1;
  $188 = $187;
  $189 = $188;
  $190 = HEAP32[$189>>2]|0;
  $191 = (($188) + 4)|0;
  $192 = $191;
  $193 = HEAP32[$192>>2]|0;
  $194 = (_bitshift64Shl(($190|0),($193|0),($186|0))|0);
  $195 = tempRet0;
  $196 = $187;
  $197 = $196;
  HEAP32[$197>>2] = $194;
  $198 = (($196) + 4)|0;
  $199 = $198;
  HEAP32[$199>>2] = $195;
 }
 $200 = $bs;
 $201 = (($200) - 192)|0;
 $0 = $201;
 $202 = $0;
 STACKTOP = sp;return ($202|0);
}
function _bitsize64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $i = 64;
 while(1) {
  $7 = $i;
  $8 = ($7|0)>(0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $2;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & -2147483648;
  $16 = (0)!=(0);
  $17 = ($15|0)!=(0);
  $18 = $16 | $17;
  if ($18) {
   label = 5;
   break;
  }
  $19 = $2;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bitshift64Shl(($21|0),($24|0),1)|0);
  $26 = tempRet0;
  $27 = $2;
  $28 = $27;
  HEAP32[$28>>2] = $25;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = $i;
  $32 = (($31) + -1)|0;
  $i = $32;
 }
 if ((label|0) == 5) {
  $33 = $i;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _bitsize32($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $i = 32;
 while(1) {
  $1 = $i;
  $2 = ($1|0)>(0);
  if (!($2)) {
   label = 5;
   break;
  }
  $3 = $0;
  $4 = $3 & -2147483648;
  $5 = ($4|0)!=(0);
  if ($5) {
   label = 5;
   break;
  }
  $6 = $0;
  $7 = $6 << 1;
  $0 = $7;
  $8 = $i;
  $9 = (($8) + -1)|0;
  $i = $9;
 }
 if ((label|0) == 5) {
  $10 = $i;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _cmp_u96_max($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>(429496729);
 do {
  if ($5) {
   $0 = 1;
  } else {
   $6 = $1;
   $7 = ((($6)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8>>>0)<(429496729);
   if ($9) {
    $0 = -1;
    break;
   }
   $10 = $1;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12>>>0)>(2576980377);
   if ($13) {
    $0 = 1;
    break;
   }
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16>>>0)<(2576980377);
   if ($17) {
    $0 = -1;
    break;
   }
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19>>>0)>(2576980376);
   if ($20) {
    $0 = 1;
    break;
   }
   $21 = $1;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22>>>0)<(2576980376);
   if ($23) {
    $0 = -1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _GetToken($token,$p) {
 $token = $token|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $token;
 $2 = $p;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = (_isdigit($6)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = (_get_number($9,$10)|0);
  $0 = $11;
  $118 = $0;
  STACKTOP = sp;return ($118|0);
 }
 $12 = $2;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = (_isalpha($15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(95);
  if (!($22)) {
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)==(64);
   if (!($27)) {
    $28 = $2;
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = ($31|0)==(36);
    if (!($32)) {
     $33 = $2;
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = ($36|0)==(63);
     if (!($37)) {
      $41 = $2;
      $42 = HEAP32[$41>>2]|0;
      $43 = HEAP8[$42>>0]|0;
      $44 = $43 << 24 >> 24;
      $45 = ($44|0)==(46);
      do {
       if ($45) {
        $46 = $2;
        $47 = HEAP32[$46>>2]|0;
        $48 = ((($47)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = $49 << 24 >> 24;
        $51 = (_isalnum($50)|0);
        $52 = ($51|0)!=(0);
        if (!($52)) {
         $53 = $2;
         $54 = HEAP32[$53>>2]|0;
         $55 = ((($54)) + 1|0);
         $56 = HEAP8[$55>>0]|0;
         $57 = $56 << 24 >> 24;
         $58 = ($57|0)==(95);
         if (!($58)) {
          $59 = $2;
          $60 = HEAP32[$59>>2]|0;
          $61 = ((($60)) + 1|0);
          $62 = HEAP8[$61>>0]|0;
          $63 = $62 << 24 >> 24;
          $64 = ($63|0)==(64);
          if (!($64)) {
           $65 = $2;
           $66 = HEAP32[$65>>2]|0;
           $67 = ((($66)) + 1|0);
           $68 = HEAP8[$67>>0]|0;
           $69 = $68 << 24 >> 24;
           $70 = ($69|0)==(36);
           if (!($70)) {
            $71 = $2;
            $72 = HEAP32[$71>>2]|0;
            $73 = ((($72)) + 1|0);
            $74 = HEAP8[$73>>0]|0;
            $75 = $74 << 24 >> 24;
            $76 = ($75|0)==(63);
            if (!($76)) {
             break;
            }
           }
          }
         }
        }
        $77 = $2;
        $78 = ((($77)) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ($79|0)==(0);
        if (!($80)) {
         $81 = $1;
         $82 = ((($81)) + -16|0);
         $83 = HEAP8[$82>>0]|0;
         $84 = $83&255;
         $85 = ($84|0)!=(2);
         if (!($85)) {
          break;
         }
         $86 = $1;
         $87 = ((($86)) + -16|0);
         $88 = HEAP8[$87>>0]|0;
         $89 = $88&255;
         $90 = ($89|0)!=(41);
         if (!($90)) {
          break;
         }
         $91 = $1;
         $92 = ((($91)) + -16|0);
         $93 = HEAP8[$92>>0]|0;
         $94 = $93&255;
         $95 = ($94|0)!=(93);
         if (!($95)) {
          break;
         }
         $96 = $1;
         $97 = ((($96)) + -16|0);
         $98 = HEAP8[$97>>0]|0;
         $99 = $98&255;
         $100 = ($99|0)!=(8);
         if (!($100)) {
          break;
         }
        }
        $101 = $1;
        $102 = $2;
        $103 = (_get_id($101,$102)|0);
        $0 = $103;
        $118 = $0;
        STACKTOP = sp;return ($118|0);
       }
      } while(0);
      $104 = $2;
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP8[$105>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = ($107|0)==(96);
      if ($108) {
       $109 = HEAP8[(6083)>>0]|0;
       $110 = $109&255;
       $111 = ($110|0)==(0);
       if ($111) {
        $112 = $1;
        $113 = $2;
        $114 = (_get_id_in_backquotes($112,$113)|0);
        $0 = $114;
        $118 = $0;
        STACKTOP = sp;return ($118|0);
       }
      }
      $115 = $1;
      $116 = $2;
      $117 = (_get_special_symbol($115,$116)|0);
      $0 = $117;
      $118 = $0;
      STACKTOP = sp;return ($118|0);
     }
    }
   }
  }
 }
 $38 = $1;
 $39 = $2;
 $40 = (_get_id($38,$39)|0);
 $0 = $40;
 $118 = $0;
 STACKTOP = sp;return ($118|0);
}
function _Tokenize($line,$start,$tokenarray,$flags) {
 $line = $line|0;
 $start = $start|0;
 $tokenarray = $tokenarray|0;
 $flags = $flags|0;
 var $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $ptr = 0, $rc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 4|0;
 $0 = $line;
 $1 = $start;
 $2 = $tokenarray;
 $3 = $flags;
 $4 = $0;
 HEAP32[$p>>2] = $4;
 $5 = $0;
 $6 = ((($p)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = $1;
 $8 = ((($p)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = $3;
 $10 = $9&255;
 $11 = ((($p)) + 16|0);
 HEAP8[$11>>0] = $10;
 $12 = ((($p)) + 17|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($p)) + 18|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($p)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = HEAP32[13352>>2]|0;
  $18 = ((($p)) + 4|0);
  HEAP32[$18>>2] = $17;
  $19 = HEAP8[(559)>>0]|0;
  $20 = ($19<<24>>24)!=(0);
  if ($20) {
   $21 = $0;
   $22 = HEAP8[(559)>>0]|0;
   $23 = $22&255;
   $24 = (_strchr($21,$23)|0);
   $25 = ($24|0)!=(0|0);
   if ($25) {
    HEAP8[(559)>>0] = 0;
   }
  } else {
   label = 6;
  }
 } else {
  $26 = HEAP32[(612)>>2]|0;
  $27 = ((($p)) + 4|0);
  HEAP32[$27>>2] = $26;
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   L7: while(1) {
    label = 0;
    $28 = HEAP32[$p>>2]|0;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = (_isspace($30)|0);
    $32 = ($31|0)!=(0);
    $33 = HEAP32[$p>>2]|0;
    if ($32) {
     $34 = ((($33)) + 1|0);
     HEAP32[$p>>2] = $34;
     label = 6;
     continue;
    }
    $35 = HEAP8[$33>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = ($36|0)==(59);
    $38 = $3;
    $39 = ($38|0)==(0);
    $or$cond = $37 & $39;
    if ($or$cond) {
     while(1) {
      $40 = HEAP32[$p>>2]|0;
      $41 = $0;
      $42 = ($40>>>0)>($41>>>0);
      if (!($42)) {
       break;
      }
      $43 = HEAP32[$p>>2]|0;
      $44 = ((($43)) + -1|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = (_isspace($46)|0);
      $48 = ($47|0)!=(0);
      if (!($48)) {
       break;
      }
      $49 = HEAP32[$p>>2]|0;
      $50 = ((($49)) + -1|0);
      HEAP32[$p>>2] = $50;
     }
     $51 = HEAP32[13356>>2]|0;
     $52 = HEAP32[$p>>2]|0;
     (_strcpy($51,$52)|0);
     $53 = HEAP32[13356>>2]|0;
     HEAP32[(604)>>2] = $53;
     $54 = HEAP32[$p>>2]|0;
     HEAP8[$54>>0] = 0;
    }
    $55 = HEAP32[$p>>2]|0;
    $56 = ((($p)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $2;
    $59 = (($58) + ($57<<4)|0);
    $60 = ((($59)) + 12|0);
    HEAP32[$60>>2] = $55;
    $61 = HEAP32[$p>>2]|0;
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = ($63|0)==(0);
    if ($64) {
     $65 = ((($p)) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66>>>0)>(1);
     if (!($67)) {
      break;
     }
     $68 = ((($p)) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) - 1)|0;
     $71 = $2;
     $72 = (($71) + ($70<<4)|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = $73&255;
     $75 = ($74|0)==(44);
     if (!($75)) {
      break;
     }
     $76 = HEAP32[4884>>2]|0;
     $77 = ($76|0)==(0);
     if ($77) {
      $$old = $1;
      $$old2 = ($$old|0)==(0);
      if (!($$old2)) {
       break;
      }
     } else {
      $78 = HEAP8[87036>>0]|0;
      $79 = $78&255;
      $80 = ($79|0)==(0);
      $81 = $1;
      $82 = ($81|0)==(0);
      $or$cond3 = $80 & $82;
      if (!($or$cond3)) {
       break;
      }
     }
     $83 = $2;
     $84 = (_IsMultiLine($83)|0);
     $85 = ($84<<24>>24)!=(0);
     if (!($85)) {
      break;
     }
     $86 = ((($p)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($p)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (_strlen($89)|0);
     $91 = (($90) + 1)|0;
     $92 = (($91) + 4)|0;
     $93 = (($92) - 1)|0;
     $94 = $93 & -4;
     $95 = (($87) + ($94)|0);
     $ptr = $95;
     $96 = $ptr;
     $97 = (_GetTextLine($96)|0);
     $98 = ($97|0)!=(0|0);
     if (!($98)) {
      break;
     }
     while(1) {
      $99 = $ptr;
      $100 = HEAP8[$99>>0]|0;
      $101 = $100 << 24 >> 24;
      $102 = (_isspace($101)|0);
      $103 = ($102|0)!=(0);
      $104 = $ptr;
      if (!($103)) {
       break;
      }
      $105 = ((($104)) + 1|0);
      $ptr = $105;
     }
     $106 = HEAP8[$104>>0]|0;
     $107 = ($106<<24>>24)!=(0);
     if (!($107)) {
      break;
     }
     $108 = HEAP32[$p>>2]|0;
     $109 = $ptr;
     (_strcpy($108,$109)|0);
     $110 = ((($p)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (_strlen($111)|0);
     $113 = ($112>>>0)>=(600);
     if ($113) {
      label = 25;
      break;
     } else {
      label = 6;
      continue;
     }
    }
    $116 = ((($p)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($p)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $2;
    $121 = (($120) + ($119<<4)|0);
    $122 = ((($121)) + 4|0);
    HEAP32[$122>>2] = $117;
    $123 = ((($p)) + 12|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $2;
    $126 = (($125) + ($124<<4)|0);
    $127 = (_GetToken($126,$p)|0);
    $rc = $127;
    $128 = $rc;
    $129 = ($128|0)==(-2);
    if ($129) {
     label = 6;
     continue;
    }
    $130 = $rc;
    $131 = ($130|0)==(-1);
    if ($131) {
     label = 28;
     break;
    }
    $134 = $3;
    $135 = $134 & 1;
    $136 = ($135|0)!=(0);
    do {
     if (!($136)) {
      $137 = ((($p)) + 12|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0);
      if (!($139)) {
       $140 = ((($p)) + 12|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(2);
       if (!($142)) {
        break;
       }
       $143 = $2;
       $144 = ((($143)) + 16|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = $145&255;
       $147 = ($146|0)==(58);
       if (!($147)) {
        $148 = $2;
        $149 = ((($148)) + 16|0);
        $150 = HEAP8[$149>>0]|0;
        $151 = $150&255;
        $152 = ($151|0)==(13);
        if (!($152)) {
         break;
        }
       }
      }
      $153 = ((($p)) + 12|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $2;
      $156 = (($155) + ($154<<4)|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = ($158|0)==(3);
      if ($159) {
       $160 = ((($p)) + 12|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = $2;
       $163 = (($162) + ($161<<4)|0);
       $164 = ((($163)) + 1|0);
       $165 = HEAP8[$164>>0]|0;
       $166 = $165&255;
       $167 = ($166|0)==(0);
       if ($167) {
        $168 = ((($p)) + 12|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = $2;
        $171 = (($170) + ($169<<4)|0);
        $172 = ((($171)) + 8|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(282);
        if ($174) {
         label = 37;
         break L7;
        }
        $176 = ((($p)) + 12|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = $2;
        $179 = (($178) + ($177<<4)|0);
        $180 = ((($179)) + 8|0);
        $181 = HEAP32[$180>>2]|0;
        _conditional_assembly_prepare($181);
        $182 = HEAP32[8316>>2]|0;
        $183 = ($182|0)!=(0);
        if ($183) {
         label = 39;
         break L7;
        } else {
         break;
        }
       }
      }
      $187 = HEAP32[8316>>2]|0;
      $188 = ($187|0)!=(0);
      if ($188) {
       break L7;
      }
     }
    } while(0);
    $189 = ((($p)) + 12|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (($190) + 1)|0;
    HEAP32[$189>>2] = $191;
    $192 = ((($p)) + 12|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193>>>0)>=(150);
    if ($194) {
     label = 42;
     break;
    }
    $197 = HEAP32[13352>>2]|0;
    $198 = ((($p)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = HEAP32[13352>>2]|0;
    $201 = $199;
    $202 = $200;
    $203 = (($201) - ($202))|0;
    $204 = (($203) + 1)|0;
    $205 = (($204) + 4)|0;
    $206 = (($205) - 1)|0;
    $207 = $206 & -4;
    $208 = (($197) + ($207)|0);
    $209 = ((($p)) + 4|0);
    HEAP32[$209>>2] = $208;
    label = 6;
   }
   if ((label|0) == 25) {
    (_EmitError(61)|0);
    $114 = $1;
    $115 = ((($p)) + 12|0);
    HEAP32[$115>>2] = $114;
   }
   else if ((label|0) == 28) {
    $132 = $1;
    $133 = ((($p)) + 12|0);
    HEAP32[$133>>2] = $132;
   }
   else if ((label|0) == 37) {
    $175 = HEAP32[$p>>2]|0;
    _StartComment($175);
   }
   else if ((label|0) == 39) {
    $184 = ((($p)) + 12|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + 1)|0;
    HEAP32[$184>>2] = $186;
   }
   else if ((label|0) == 42) {
    (_EmitError(62)|0);
    $195 = $1;
    $196 = ((($p)) + 12|0);
    HEAP32[$196>>2] = $195;
    break;
   }
   $210 = HEAP32[13352>>2]|0;
   $211 = ((($p)) + 4|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = HEAP32[13352>>2]|0;
   $214 = $212;
   $215 = $213;
   $216 = (($214) - ($215))|0;
   $217 = (($216) + 1)|0;
   $218 = (($217) + 4)|0;
   $219 = (($218) - 1)|0;
   $220 = $219 & -4;
   $221 = (($210) + ($220)|0);
   $222 = ((($p)) + 4|0);
   HEAP32[$222>>2] = $221;
   $223 = ((($p)) + 4|0);
   $224 = HEAP32[$223>>2]|0;
   HEAP32[(612)>>2] = $224;
  }
 } while(0);
 $225 = ((($p)) + 12|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = $2;
 $228 = (($227) + ($226<<4)|0);
 HEAP8[$228>>0] = 0;
 $229 = ((($p)) + 18|0);
 $230 = HEAP8[$229>>0]|0;
 $231 = ((($p)) + 12|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = $2;
 $234 = (($233) + ($232<<4)|0);
 $235 = ((($234)) + 1|0);
 HEAP8[$235>>0] = $230;
 $236 = ((($p)) + 12|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = $2;
 $239 = (($238) + ($237<<4)|0);
 $240 = ((($239)) + 4|0);
 HEAP32[$240>>2] = 109841;
 $241 = ((($p)) + 12|0);
 $242 = HEAP32[$241>>2]|0;
 STACKTOP = sp;return ($242|0);
}
function _get_number($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $dig_end = 0, $dig_start = 0, $digits_seen = 0, $last_char = 0, $len = 0, $max = 0, $ptr = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $p;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $ptr = $4;
 $base = 0;
 $digits_seen = 0;
 $5 = $ptr;
 $dig_start = $5;
 while(1) {
  $6 = $ptr;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)>=(48);
  if ($9) {
   $10 = $ptr;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)<=(57);
   if ($13) {
    $14 = $ptr;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = (($16) - 48)|0;
    $18 = 1 << $17;
    $19 = $digits_seen;
    $20 = $19 | $18;
    $digits_seen = $20;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $21 = $ptr;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (_tolower($23)|0);
   $25 = $24&255;
   $last_char = $25;
   $26 = $last_char;
   $27 = $26 << 24 >> 24;
   $28 = ($27|0)>=(97);
   if (!($28)) {
    break;
   }
   $29 = $last_char;
   $30 = $29 << 24 >> 24;
   $31 = ($30|0)<=(102);
   if (!($31)) {
    break;
   }
   $32 = $last_char;
   $33 = $32 << 24 >> 24;
   $34 = (($33) + 10)|0;
   $35 = (($34) - 97)|0;
   $36 = 1 << $35;
   $37 = $digits_seen;
   $38 = $37 | $36;
   $digits_seen = $38;
  }
  $39 = $ptr;
  $40 = ((($39)) + 1|0);
  $ptr = $40;
 }
 $41 = $last_char;
 $42 = $41 << 24 >> 24;
 $43 = ($42|0)==(46);
 if ($43) {
  $44 = $1;
  $45 = $2;
  $46 = (_get_float($44,$45)|0);
  $0 = $46;
  $186 = $0;
  STACKTOP = sp;return ($186|0);
 }
 $47 = $last_char;
 $48 = $47 << 24 >> 24;
 L16: do {
  switch ($48|0) {
  case 114:  {
   $49 = $1;
   HEAP8[$49>>0] = 11;
   $50 = $1;
   $51 = ((($50)) + 1|0);
   HEAP8[$51>>0] = 114;
   $52 = $ptr;
   $53 = ((($52)) + 1|0);
   $ptr = $53;
   break;
  }
  case 104:  {
   $base = 16;
   $54 = $ptr;
   $dig_end = $54;
   $55 = $ptr;
   $56 = ((($55)) + 1|0);
   $ptr = $56;
   label = 31;
   break;
  }
  case 121:  {
   $57 = $digits_seen;
   $58 = $57 & -4;
   $59 = ($58|0)==(0);
   if ($59) {
    $base = 2;
    $60 = $ptr;
    $dig_end = $60;
    $61 = $ptr;
    $62 = ((($61)) + 1|0);
    $ptr = $62;
    label = 31;
   } else {
    label = 31;
   }
   break;
  }
  case 116:  {
   $63 = $digits_seen;
   $64 = $63 & -1024;
   $65 = ($64|0)==(0);
   if ($65) {
    $base = 10;
    $66 = $ptr;
    $dig_end = $66;
    $67 = $ptr;
    $68 = ((($67)) + 1|0);
    $ptr = $68;
    label = 31;
   } else {
    label = 31;
   }
   break;
  }
  case 111: case 113:  {
   $69 = $digits_seen;
   $70 = $69 & -256;
   $71 = ($70|0)==(0);
   if ($71) {
    $base = 8;
    $72 = $ptr;
    $dig_end = $72;
    $73 = $ptr;
    $74 = ((($73)) + 1|0);
    $ptr = $74;
    label = 31;
   } else {
    label = 31;
   }
   break;
  }
  default: {
   $75 = $ptr;
   $76 = ((($75)) + -1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = (_tolower($78)|0);
   $80 = $79&255;
   $last_char = $80;
   $81 = $last_char;
   $82 = $81 << 24 >> 24;
   $83 = ($82|0)==(98);
   if ($83) {
    label = 22;
   } else {
    $84 = $last_char;
    $85 = $84 << 24 >> 24;
    $86 = ($85|0)==(100);
    if ($86) {
     label = 22;
    }
   }
   if ((label|0) == 22) {
    $87 = $digits_seen;
    $88 = HEAP8[(548)>>0]|0;
    $89 = $88&255;
    $90 = 1 << $89;
    $91 = ($87>>>0)>=($90>>>0);
    if ($91) {
     $92 = $dig_start;
     $tmp = $92;
     $93 = $last_char;
     $94 = $93 << 24 >> 24;
     $95 = ($94|0)==(98);
     $96 = $95 ? 49 : 57;
     $97 = $96&255;
     $max = $97;
     $98 = $ptr;
     $99 = ((($98)) + -1|0);
     $dig_end = $99;
     while(1) {
      $100 = $tmp;
      $101 = $dig_end;
      $102 = ($100>>>0)<($101>>>0);
      if (!($102)) {
       break;
      }
      $103 = $tmp;
      $104 = HEAP8[$103>>0]|0;
      $105 = $104 << 24 >> 24;
      $106 = $max;
      $107 = $106 << 24 >> 24;
      $108 = ($105|0)<=($107|0);
      if (!($108)) {
       break;
      }
      $109 = $tmp;
      $110 = ((($109)) + 1|0);
      $tmp = $110;
     }
     $111 = $tmp;
     $112 = $dig_end;
     $113 = ($111|0)==($112|0);
     if ($113) {
      $114 = $last_char;
      $115 = $114 << 24 >> 24;
      $116 = ($115|0)==(98);
      $117 = $116 ? 2 : 10;
      $base = $117;
      label = 31;
      break L16;
     }
    }
   }
   $118 = $ptr;
   $dig_end = $118;
   $119 = $digits_seen;
   $120 = HEAP8[(548)>>0]|0;
   $121 = $120&255;
   $122 = 1 << $121;
   $123 = ($119>>>0)<($122>>>0);
   if ($123) {
    $124 = HEAP8[(548)>>0]|0;
    $125 = $124&255;
    $base = $125;
    label = 31;
   } else {
    label = 31;
   }
  }
  }
 } while(0);
 L39: do {
  if ((label|0) == 31) {
   $126 = $base;
   $127 = ($126|0)!=(0);
   $128 = $1;
   if ($127) {
    HEAP8[$128>>0] = 10;
    $129 = $base;
    $130 = $129&255;
    $131 = $1;
    $132 = ((($131)) + 1|0);
    HEAP8[$132>>0] = $130;
    $133 = $dig_end;
    $134 = $dig_start;
    $135 = $133;
    $136 = $134;
    $137 = (($135) - ($136))|0;
    $138 = $1;
    $139 = ((($138)) + 8|0);
    HEAP32[$139>>2] = $137;
    break;
   }
   HEAP8[$128>>0] = 12;
   while(1) {
    $140 = $ptr;
    $141 = HEAP8[$140>>0]|0;
    $142 = $141 << 24 >> 24;
    $143 = (_isalnum($142)|0);
    $144 = ($143|0)!=(0);
    if (!($144)) {
     $145 = $ptr;
     $146 = HEAP8[$145>>0]|0;
     $147 = $146 << 24 >> 24;
     $148 = ($147|0)==(95);
     if (!($148)) {
      $149 = $ptr;
      $150 = HEAP8[$149>>0]|0;
      $151 = $150 << 24 >> 24;
      $152 = ($151|0)==(64);
      if (!($152)) {
       $153 = $ptr;
       $154 = HEAP8[$153>>0]|0;
       $155 = $154 << 24 >> 24;
       $156 = ($155|0)==(36);
       if (!($156)) {
        $157 = $ptr;
        $158 = HEAP8[$157>>0]|0;
        $159 = $158 << 24 >> 24;
        $160 = ($159|0)==(63);
        if (!($160)) {
         break L39;
        }
       }
      }
     }
    }
    $161 = $ptr;
    $162 = ((($161)) + 1|0);
    $ptr = $162;
   }
  }
 } while(0);
 $163 = $ptr;
 $164 = $2;
 $165 = HEAP32[$164>>2]|0;
 $166 = $163;
 $167 = $165;
 $168 = (($166) - ($167))|0;
 $len = $168;
 $169 = $2;
 $170 = ((($169)) + 4|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $2;
 $173 = HEAP32[$172>>2]|0;
 $174 = $len;
 _memcpy(($171|0),($173|0),($174|0))|0;
 $175 = $len;
 $176 = $2;
 $177 = ((($176)) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + ($175)|0);
 HEAP32[$177>>2] = $179;
 $180 = $2;
 $181 = ((($180)) + 4|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ((($182)) + 1|0);
 HEAP32[$181>>2] = $183;
 HEAP8[$182>>0] = 0;
 $184 = $ptr;
 $185 = $2;
 HEAP32[$185>>2] = $184;
 $0 = 0;
 $186 = $0;
 STACKTOP = sp;return ($186|0);
}
function _get_id($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dst = 0, $index = 0, $size = 0, $src = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $buf;
 $2 = $p;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $src = $4;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $dst = $7;
 while(1) {
  $8 = $src;
  $9 = ((($8)) + 1|0);
  $src = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $dst;
  $12 = ((($11)) + 1|0);
  $dst = $12;
  HEAP8[$11>>0] = $10;
  $13 = $src;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = (_isalnum($15)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   continue;
  }
  $18 = $src;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(95);
  if ($21) {
   continue;
  }
  $22 = $src;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(64);
  if ($25) {
   continue;
  }
  $26 = $src;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(36);
  if ($29) {
   continue;
  }
  $30 = $src;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(63);
  if (!($33)) {
   break;
  }
 }
 $34 = $dst;
 $35 = $2;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $34;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $size = $40;
 $41 = $size;
 $42 = ($41>>>0)>(247);
 if ($42) {
  (_EmitErr(70,$vararg_buffer)|0);
  $43 = $2;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 247|0);
  $dst = $46;
 }
 $47 = $dst;
 $48 = ((($47)) + 1|0);
 $dst = $48;
 HEAP8[$47>>0] = 0;
 $49 = $size;
 $50 = ($49|0)==(1);
 if ($50) {
  $51 = $2;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = ($55|0)==(63);
  if ($56) {
   $57 = $src;
   $58 = $2;
   HEAP32[$58>>2] = $57;
   $59 = $1;
   HEAP8[$59>>0] = 63;
   $60 = $1;
   $61 = ((($60)) + 4|0);
   HEAP32[$61>>2] = 109828;
   $0 = 0;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  }
 }
 $62 = $2;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $size;
 $66 = $65&255;
 $67 = (_FindResWord($64,$66)|0);
 $index = $67;
 $68 = $index;
 $69 = ($68|0)==(0);
 if ($69) {
  $70 = $2;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = ($74|0)==(46);
  if ($75) {
   $76 = HEAP32[(560)>>2]|0;
   $77 = $76 >>> 4;
   $78 = $77 & 1;
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = $1;
    HEAP8[$80>>0] = 46;
    $81 = $1;
    $82 = ((($81)) + 4|0);
    HEAP32[$82>>2] = (81584);
    $83 = $2;
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($84)) + 1|0);
    HEAP32[$83>>2] = $85;
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
  }
  $86 = $src;
  $87 = $2;
  HEAP32[$87>>2] = $86;
  $88 = $dst;
  $89 = $2;
  $90 = ((($89)) + 4|0);
  HEAP32[$90>>2] = $88;
  $91 = $1;
  HEAP8[$91>>0] = 8;
  $92 = $1;
  $93 = ((($92)) + 8|0);
  HEAP32[$93>>2] = 0;
  $0 = 0;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
 }
 $94 = $src;
 $95 = $2;
 HEAP32[$95>>2] = $94;
 $96 = $dst;
 $97 = $2;
 $98 = ((($97)) + 4|0);
 HEAP32[$98>>2] = $96;
 $99 = $index;
 $100 = $1;
 $101 = ((($100)) + 8|0);
 HEAP32[$101>>2] = $99;
 $102 = $index;
 $103 = ($102|0)>=(373);
 if ($103) {
  $104 = HEAP32[(560)>>2]|0;
  $105 = $104 >>> 6;
  $106 = $105 & 1;
  $107 = ($106|0)!=(0);
  do {
   if ($107) {
    $108 = $1;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) - 373)|0;
    $112 = (77956 + ($111<<1)|0);
    $113 = HEAP16[$112>>1]|0;
    $114 = $113&65535;
    $index = $114;
    $115 = $index;
    $116 = (68332 + ($115<<3)|0);
    $117 = ((($116)) + 4|0);
    $118 = HEAP16[$117>>1]|0;
    $119 = $118&65535;
    $120 = $119 & 240;
    $121 = HEAP32[(544)>>2]|0;
    $122 = $121 & 240;
    $123 = ($120>>>0)>($122>>>0);
    if (!($123)) {
     $124 = $index;
     $125 = (68332 + ($124<<3)|0);
     $126 = ((($125)) + 4|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127&65535;
     $129 = $128 & 65280;
     $130 = HEAP32[(544)>>2]|0;
     $131 = $130 & 65280;
     $132 = ($129>>>0)>($131>>>0);
     if (!($132)) {
      break;
     }
    }
    $133 = $1;
    HEAP8[$133>>0] = 8;
    $134 = $1;
    $135 = ((($134)) + 8|0);
    HEAP32[$135>>2] = 0;
    $0 = 0;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
  } while(0);
  $136 = $1;
  HEAP8[$136>>0] = 1;
  $0 = 0;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
 }
 $137 = $1;
 $138 = ((($137)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $index = $139;
 $140 = $index;
 $141 = (15660 + (($140*12)|0)|0);
 $142 = ((($141)) + 10|0);
 $143 = HEAP8[$142>>0]|0;
 $144 = $1;
 $145 = ((($144)) + 1|0);
 HEAP8[$145>>0] = $143;
 $146 = $index;
 $147 = (15660 + (($146*12)|0)|0);
 $148 = ((($147)) + 11|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 switch ($150|0) {
 case 2:  {
  $151 = $1;
  HEAP8[$151>>0] = 2;
  break;
 }
 case 3:  {
  $152 = $1;
  HEAP8[$152>>0] = 3;
  $153 = $2;
  $154 = ((($153)) + 17|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = $155 << 24 >> 24;
  $157 = ($156|0)==(0);
  if ($157) {
   $158 = $index;
   $159 = (15660 + (($158*12)|0)|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $160&255;
   $162 = $2;
   $163 = ((($162)) + 17|0);
   HEAP8[$163>>0] = $161;
  }
  break;
 }
 case 4:  {
  $164 = $1;
  HEAP8[$164>>0] = 4;
  break;
 }
 case 5:  {
  $165 = $1;
  HEAP8[$165>>0] = 5;
  break;
 }
 case 6:  {
  $166 = $1;
  HEAP8[$166>>0] = 6;
  break;
 }
 case 7:  {
  $167 = $1;
  HEAP8[$167>>0] = 7;
  break;
 }
 default: {
  (_InternalError(109830,866)|0);
  $168 = $1;
  HEAP8[$168>>0] = 8;
  $169 = $1;
  $170 = ((($169)) + 8|0);
  HEAP32[$170>>2] = 0;
 }
 }
 $0 = 0;
 $171 = $0;
 STACKTOP = sp;return ($171|0);
}
function _get_id_in_backquotes($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $optr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $buf;
 $2 = $p;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $optr = $5;
 $6 = $1;
 HEAP8[$6>>0] = 8;
 $7 = $1;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 1|0);
 HEAP32[$9>>2] = $11;
 while(1) {
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(96);
  $17 = $2;
  $18 = HEAP32[$17>>2]|0;
  if (!($16)) {
   label = 7;
   break;
  }
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 5;
   break;
  }
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(59);
  if ($26) {
   label = 5;
   break;
  }
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 1|0);
  HEAP32[$33>>2] = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = $optr;
  $38 = ((($37)) + 1|0);
  $optr = $38;
  HEAP8[$37>>0] = $36;
 }
 if ((label|0) == 5) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP8[$29>>0] = 0;
  $30 = $2;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  (_EmitErr(97,$vararg_buffer)|0);
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 7) {
  $39 = ((($18)) + 1|0);
  HEAP32[$17>>2] = $39;
  $40 = $optr;
  $41 = ((($40)) + 1|0);
  $optr = $41;
  HEAP8[$40>>0] = 0;
  $42 = $optr;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _get_special_symbol($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sym = 0;
 var $symbol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $p;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $symbol = $5;
 $6 = $symbol;
 $7 = $6 << 24 >> 24;
 L1: do {
  switch ($7|0) {
  case 58:  {
   $8 = $2;
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 1|0);
   HEAP32[$8>>2] = $10;
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)==(58);
   if ($15) {
    $16 = $2;
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 1|0);
    HEAP32[$16>>2] = $18;
    $19 = $1;
    HEAP8[$19>>0] = 13;
    $20 = $1;
    $21 = ((($20)) + 4|0);
    HEAP32[$21>>2] = 109806;
    break L1;
   } else {
    $22 = $1;
    HEAP8[$22>>0] = 58;
    $23 = $1;
    $24 = ((($23)) + 4|0);
    HEAP32[$24>>2] = 109809;
    break L1;
   }
   break;
  }
  case 37:  {
   $25 = $2;
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 1|0);
   $28 = (_strncasecmp($27,109811,3)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = $2;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 4|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = (_isalnum($34)|0);
    $36 = ($35|0)!=(0);
    if (!($36)) {
     $37 = $2;
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 4|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40 << 24 >> 24;
     $42 = ($41|0)==(95);
     if (!($42)) {
      $43 = $2;
      $44 = HEAP32[$43>>2]|0;
      $45 = ((($44)) + 4|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46 << 24 >> 24;
      $48 = ($47|0)==(64);
      if (!($48)) {
       $49 = $2;
       $50 = HEAP32[$49>>2]|0;
       $51 = ((($50)) + 4|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = $52 << 24 >> 24;
       $54 = ($53|0)==(36);
       if (!($54)) {
        $55 = $2;
        $56 = HEAP32[$55>>2]|0;
        $57 = ((($56)) + 4|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = $58 << 24 >> 24;
        $60 = ($59|0)==(63);
        if (!($60)) {
         $61 = $1;
         HEAP8[$61>>0] = 3;
         $62 = $1;
         $63 = ((($62)) + 8|0);
         HEAP32[$63>>2] = 364;
         $64 = $1;
         $65 = ((($64)) + 1|0);
         HEAP8[$65>>0] = 46;
         $66 = $2;
         $67 = ((($66)) + 4|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = $2;
         $70 = HEAP32[$69>>2]|0;
         ;HEAP8[$68>>0]=HEAP8[$70>>0]|0;HEAP8[$68+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$68+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$68+3>>0]=HEAP8[$70+3>>0]|0;
         $71 = $2;
         $72 = HEAP32[$71>>2]|0;
         $73 = ((($72)) + 4|0);
         HEAP32[$71>>2] = $73;
         $74 = $2;
         $75 = ((($74)) + 4|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = ((($76)) + 4|0);
         HEAP32[$75>>2] = $77;
         $78 = $2;
         $79 = ((($78)) + 4|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = ((($80)) + 1|0);
         HEAP32[$79>>2] = $81;
         HEAP8[$80>>0] = 0;
         break L1;
        }
       }
      }
     }
    }
   }
   $82 = $2;
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 1|0);
   HEAP32[$82>>2] = $84;
   $85 = $2;
   $86 = ((($85)) + 16|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87 << 24 >> 24;
   $89 = ($88|0)==(0);
   if ($89) {
    $90 = $2;
    $91 = ((($90)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0);
    if ($93) {
     $94 = $2;
     $95 = ((($94)) + 18|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96 << 24 >> 24;
     $98 = $97 | 2;
     $99 = $98&255;
     HEAP8[$95>>0] = $99;
     $0 = -2;
     $258 = $0;
     STACKTOP = sp;return ($258|0);
    }
   }
   $100 = $1;
   HEAP8[$100>>0] = 37;
   $101 = $1;
   $102 = ((($101)) + 4|0);
   HEAP32[$102>>2] = 109815;
   break;
  }
  case 40:  {
   $103 = $2;
   $104 = ((($103)) + 17|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105 << 24 >> 24;
   $107 = $106 & 1;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $2;
    $110 = ((($109)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $1;
     $114 = ((($113)) + -16|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     $117 = ($116|0)==(8);
     if ($117) {
      $118 = $1;
      $119 = ((($118)) + -16|0);
      $120 = ((($119)) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (_SymFind($121)|0);
      $sym = $122;
      $123 = $sym;
      $124 = ($123|0)!=(0|0);
      if ($124) {
       $125 = $sym;
       $126 = ((($125)) + 16|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ($127|0)==(9);
       if ($128) {
        $129 = $sym;
        $130 = ((($129)) + 28|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = ($131&255) >>> 1;
        $133 = $132 & 1;
        $134 = $133&255;
        $135 = ($134|0)!=(0);
        if ($135) {
         $136 = $2;
         $137 = ((($136)) + 17|0);
         $138 = HEAP8[$137>>0]|0;
         $139 = $138 << 24 >> 24;
         $140 = $139 & -2;
         $141 = $140&255;
         HEAP8[$137>>0] = $141;
         label = 23;
        } else {
         label = 23;
        }
       } else {
        label = 23;
       }
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   break;
  }
  case 47: case 46: case 45: case 44: case 43: case 42: case 41:  {
   label = 23;
   break;
  }
  case 93: case 91:  {
   $155 = $2;
   $156 = HEAP32[$155>>2]|0;
   $157 = ((($156)) + 1|0);
   HEAP32[$155>>2] = $157;
   $158 = $symbol;
   $159 = $1;
   HEAP8[$159>>0] = $158;
   $160 = $symbol;
   $161 = $160 << 24 >> 24;
   $162 = (($161) - 91)|0;
   $163 = (81588 + ($162<<1)|0);
   $164 = $1;
   $165 = ((($164)) + 4|0);
   HEAP32[$165>>2] = $163;
   break;
  }
  case 61:  {
   $166 = $2;
   $167 = HEAP32[$166>>2]|0;
   $168 = ((($167)) + 1|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169 << 24 >> 24;
   $171 = ($170|0)!=(61);
   if ($171) {
    $172 = $1;
    HEAP8[$172>>0] = 3;
    $173 = $1;
    $174 = ((($173)) + 8|0);
    HEAP32[$174>>2] = 366;
    $175 = $1;
    $176 = ((($175)) + 1|0);
    HEAP8[$176>>0] = 48;
    $177 = $1;
    $178 = ((($177)) + 4|0);
    HEAP32[$178>>2] = 109817;
    $179 = $2;
    $180 = HEAP32[$179>>2]|0;
    $181 = ((($180)) + 1|0);
    HEAP32[$179>>2] = $181;
   } else {
    label = 27;
   }
   break;
  }
  default: {
   label = 27;
  }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $142 = $2;
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 1|0);
   HEAP32[$142>>2] = $144;
   $145 = $symbol;
   $146 = $1;
   HEAP8[$146>>0] = $145;
   $147 = $1;
   $148 = ((($147)) + 1|0);
   HEAP8[$148>>0] = 0;
   $149 = $symbol;
   $150 = $149 << 24 >> 24;
   $151 = (($150) - 40)|0;
   $152 = (81572 + ($151<<1)|0);
   $153 = $1;
   $154 = ((($153)) + 4|0);
   HEAP32[$154>>2] = $152;
  }
  else if ((label|0) == 27) {
   $182 = $2;
   $183 = ((($182)) + 17|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184 << 24 >> 24;
   $186 = $185 & 1;
   $187 = ($186|0)!=(0);
   if ($187) {
    $188 = $symbol;
    $189 = $188 << 24 >> 24;
    $190 = (_strchr(109819,$189)|0);
    $191 = ($190|0)!=(0|0);
    if ($191) {
     $192 = $symbol;
     $193 = $2;
     $194 = ((($193)) + 4|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ((($195)) + 1|0);
     HEAP32[$194>>2] = $196;
     HEAP8[$195>>0] = $192;
     $197 = $2;
     $198 = HEAP32[$197>>2]|0;
     $199 = ((($198)) + 1|0);
     HEAP32[$197>>2] = $199;
     $200 = $1;
     $201 = ((($200)) + 8|0);
     HEAP32[$201>>2] = 1;
     $202 = $symbol;
     $203 = $202 << 24 >> 24;
     $204 = ($203|0)==(38);
     if ($204) {
      label = 31;
     } else {
      $205 = $symbol;
      $206 = $205 << 24 >> 24;
      $207 = ($206|0)==(124);
      if ($207) {
       label = 31;
      } else {
       $225 = $2;
       $226 = HEAP32[$225>>2]|0;
       $227 = HEAP8[$226>>0]|0;
       $228 = $227 << 24 >> 24;
       $229 = ($228|0)==(61);
       if ($229) {
        $230 = $2;
        $231 = ((($230)) + 4|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = ((($232)) + 1|0);
        HEAP32[$231>>2] = $233;
        HEAP8[$232>>0] = 61;
        $234 = $2;
        $235 = HEAP32[$234>>2]|0;
        $236 = ((($235)) + 1|0);
        HEAP32[$234>>2] = $236;
        $237 = $1;
        $238 = ((($237)) + 8|0);
        HEAP32[$238>>2] = 2;
       }
      }
     }
     if ((label|0) == 31) {
      $208 = $2;
      $209 = HEAP32[$208>>2]|0;
      $210 = HEAP8[$209>>0]|0;
      $211 = $210 << 24 >> 24;
      $212 = $symbol;
      $213 = $212 << 24 >> 24;
      $214 = ($211|0)==($213|0);
      if ($214) {
       $215 = $symbol;
       $216 = $2;
       $217 = ((($216)) + 4|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ((($218)) + 1|0);
       HEAP32[$217>>2] = $219;
       HEAP8[$218>>0] = $215;
       $220 = $2;
       $221 = HEAP32[$220>>2]|0;
       $222 = ((($221)) + 1|0);
       HEAP32[$220>>2] = $222;
       $223 = $1;
       $224 = ((($223)) + 8|0);
       HEAP32[$224>>2] = 2;
      }
     }
     $239 = $1;
     HEAP8[$239>>0] = 9;
     $240 = $1;
     $241 = ((($240)) + 1|0);
     HEAP8[$241>>0] = 0;
     $242 = $2;
     $243 = ((($242)) + 4|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ((($244)) + 1|0);
     HEAP32[$243>>2] = $245;
     HEAP8[$244>>0] = 0;
     break;
    }
   }
   $246 = $symbol;
   $247 = $246 << 24 >> 24;
   $248 = ($247|0)==(38);
   if ($248) {
    $249 = $2;
    $250 = HEAP32[$249>>2]|0;
    $251 = ((($250)) + 1|0);
    HEAP32[$249>>2] = $251;
    $252 = $1;
    HEAP8[$252>>0] = 38;
    $253 = $1;
    $254 = ((($253)) + 4|0);
    HEAP32[$254>>2] = 109826;
    break;
   }
   $255 = $1;
   $256 = $2;
   $257 = (_get_string($255,$256)|0);
   $0 = $257;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
 } while(0);
 $0 = 0;
 $258 = $0;
 STACKTOP = sp;return ($258|0);
}
function _IsMultiLine($tokenarray) {
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $i = 0, $sym = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tokenarray;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(3);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 16|0);
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(366);
  if ($11) {
   $0 = 0;
   $76 = $0;
   STACKTOP = sp;return ($76|0);
  }
 }
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(58);
 $17 = $16 ? 2 : 0;
 $i = $17;
 $18 = $i;
 $19 = $1;
 $20 = (($19) + ($18<<4)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)==(8);
 $24 = $i;
 $25 = $1;
 $26 = (($25) + ($24<<4)|0);
 do {
  if ($23) {
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_SymFind($28)|0);
   $sym = $29;
   $30 = $sym;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $sym;
    $33 = ((($32)) + 16|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(9);
    if ($35) {
     $36 = $sym;
     $37 = ((($36)) + 28|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = ($38&255) >>> 3;
     $40 = $39 & 1;
     $41 = $40&255;
     $42 = ($41|0)==(0);
     if ($42) {
      $0 = 0;
      $76 = $0;
      STACKTOP = sp;return ($76|0);
     }
    }
   }
  } else {
   $43 = HEAP8[$26>>0]|0;
   $44 = $43&255;
   $45 = ($44|0)==(1);
   if (!($45)) {
    $46 = $i;
    $47 = $1;
    $48 = (($47) + ($46<<4)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = ($50|0)==(3);
    if (!($51)) {
     break;
    }
    $52 = $i;
    $53 = $1;
    $54 = (($53) + ($52<<4)|0);
    $55 = ((($54)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(364);
    if (!($57)) {
     $58 = $i;
     $59 = $1;
     $60 = (($59) + ($58<<4)|0);
     $61 = ((($60)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(321);
     if (!($63)) {
      $64 = $i;
      $65 = $1;
      $66 = (($65) + ($64<<4)|0);
      $67 = ((($66)) + 8|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(310);
      if (!($69)) {
       $70 = $i;
       $71 = $1;
       $72 = (($71) + ($70<<4)|0);
       $73 = ((($72)) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(312);
       if (!($75)) {
        break;
       }
      }
     }
    }
   }
   $0 = 0;
   $76 = $0;
   STACKTOP = sp;return ($76|0);
  }
 } while(0);
 $0 = 1;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _StartComment($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (_isspace($3)|0);
  $5 = ($4|0)!=(0);
  $6 = $0;
  if (!($5)) {
   break;
  }
  $7 = ((($6)) + 1|0);
  $0 = $7;
 }
 $8 = HEAP8[$6>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  (_EmitError(98)|0);
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 1|0);
 $0 = $12;
 $13 = HEAP8[$11>>0]|0;
 HEAP8[(559)>>0] = $13;
 $14 = $0;
 $15 = HEAP8[(559)>>0]|0;
 $16 = $15&255;
 $17 = (_strchr($14,$16)|0);
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 HEAP8[(559)>>0] = 0;
 STACKTOP = sp;return;
}
function _get_string($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $count = 0, $delim = 0, $dst = 0, $level = 0, $or$cond = 0, $or$cond9 = 0, $src = 0, $symbol_c = 0, $symbol_o = 0, $tcount = 0;
 var $tdst = 0, $tmp = 0, $tsrc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $p;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $src = $4;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $dst = $7;
 $count = 0;
 $8 = $src;
 $9 = HEAP8[$8>>0]|0;
 $symbol_o = $9;
 $10 = $symbol_o;
 $11 = $10 << 24 >> 24;
 L1: do {
  switch ($11|0) {
  case 39: case 34:  {
   $12 = $symbol_o;
   $13 = $1;
   $14 = ((($13)) + 1|0);
   HEAP8[$14>>0] = $12;
   $15 = $symbol_o;
   $16 = $dst;
   $17 = ((($16)) + 1|0);
   $dst = $17;
   HEAP8[$16>>0] = $15;
   $18 = $src;
   $19 = ((($18)) + 1|0);
   $src = $19;
   while(1) {
    $20 = $count;
    $21 = ($20|0)<(568);
    if (!($21)) {
     break L1;
    }
    $22 = $src;
    $23 = HEAP8[$22>>0]|0;
    $c = $23;
    $24 = $c;
    $25 = $24 << 24 >> 24;
    $26 = $symbol_o;
    $27 = $26 << 24 >> 24;
    $28 = ($25|0)==($27|0);
    $29 = $c;
    if ($28) {
     $30 = $dst;
     $31 = ((($30)) + 1|0);
     $dst = $31;
     HEAP8[$30>>0] = $29;
     $32 = $src;
     $33 = ((($32)) + 1|0);
     $src = $33;
     $34 = $src;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = $c;
     $38 = $37 << 24 >> 24;
     $39 = ($36|0)!=($38|0);
     if ($39) {
      break L1;
     }
    } else {
     $40 = $29 << 24 >> 24;
     $41 = ($40|0)==(0);
     if ($41) {
      break;
     }
     $46 = $c;
     $47 = $dst;
     $48 = ((($47)) + 1|0);
     $dst = $48;
     HEAP8[$47>>0] = $46;
    }
    $49 = $src;
    $50 = ((($49)) + 1|0);
    $src = $50;
    $51 = $count;
    $52 = (($51) + 1)|0;
    $count = $52;
   }
   $42 = $1;
   $43 = ((($42)) + 1|0);
   HEAP8[$43>>0] = 0;
   $44 = $count;
   $45 = (($44) + 1)|0;
   $count = $45;
   break;
  }
  case 123:  {
   $53 = $2;
   $54 = ((($53)) + 16|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 << 24 >> 24;
   $57 = $56 & 2;
   $58 = ($57|0)!=(0);
   if ($58) {
    label = 57;
   } else {
    label = 11;
   }
   break;
  }
  case 60:  {
   label = 11;
   break;
  }
  default: {
   label = 57;
  }
  }
 } while(0);
 L13: do {
  if ((label|0) == 11) {
   $59 = $symbol_o;
   $60 = $1;
   $61 = ((($60)) + 1|0);
   HEAP8[$61>>0] = $59;
   $62 = $symbol_o;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)==(60);
   $65 = $64 ? 62 : 125;
   $66 = $65&255;
   $symbol_c = $66;
   $67 = $src;
   $68 = ((($67)) + 1|0);
   $src = $68;
   $level = 0;
   L15: while(1) {
    $69 = $count;
    $70 = ($69|0)<(568);
    if (!($70)) {
     break L13;
    }
    $71 = $src;
    $72 = HEAP8[$71>>0]|0;
    $c = $72;
    $73 = $c;
    $74 = $73 << 24 >> 24;
    $75 = $symbol_o;
    $76 = $75 << 24 >> 24;
    $77 = ($74|0)==($76|0);
    if ($77) {
     $78 = $level;
     $79 = (($78) + 1)|0;
     $level = $79;
     $80 = $c;
     $81 = $dst;
     $82 = ((($81)) + 1|0);
     $dst = $82;
     HEAP8[$81>>0] = $80;
     $83 = $src;
     $84 = ((($83)) + 1|0);
     $src = $84;
     $85 = $count;
     $86 = (($85) + 1)|0;
     $count = $86;
     continue;
    }
    $87 = $c;
    $88 = $87 << 24 >> 24;
    $89 = $symbol_c;
    $90 = $89 << 24 >> 24;
    $91 = ($88|0)==($90|0);
    if ($91) {
     $92 = $level;
     $93 = ($92|0)!=(0);
     if (!($93)) {
      label = 18;
      break;
     }
     $94 = $level;
     $95 = (($94) + -1)|0;
     $level = $95;
     $96 = $c;
     $97 = $dst;
     $98 = ((($97)) + 1|0);
     $dst = $98;
     HEAP8[$97>>0] = $96;
     $99 = $src;
     $100 = ((($99)) + 1|0);
     $src = $100;
     $101 = $count;
     $102 = (($101) + 1)|0;
     $count = $102;
     continue;
    }
    $105 = $c;
    $106 = $105 << 24 >> 24;
    $107 = ($106|0)==(34);
    if ($107) {
     label = 21;
    } else {
     $108 = $c;
     $109 = $108 << 24 >> 24;
     $110 = ($109|0)==(39);
     if ($110) {
      label = 21;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $111 = $2;
     $112 = ((($111)) + 17|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113 << 24 >> 24;
     $115 = $114 & 2;
     $116 = ($115|0)==(0);
     if ($116) {
      $117 = $c;
      $delim = $117;
      $118 = $c;
      $119 = $dst;
      $120 = ((($119)) + 1|0);
      $dst = $120;
      HEAP8[$119>>0] = $118;
      $121 = $src;
      $122 = ((($121)) + 1|0);
      $src = $122;
      $123 = $count;
      $124 = (($123) + 1)|0;
      $count = $124;
      $125 = $dst;
      $tdst = $125;
      $126 = $src;
      $tsrc = $126;
      $127 = $count;
      $tcount = $127;
      while(1) {
       $128 = $src;
       $129 = HEAP8[$128>>0]|0;
       $130 = $129 << 24 >> 24;
       $131 = $delim;
       $132 = $131 << 24 >> 24;
       $133 = ($130|0)!=($132|0);
       if (!($133)) {
        break;
       }
       $134 = $src;
       $135 = HEAP8[$134>>0]|0;
       $136 = $135 << 24 >> 24;
       $137 = ($136|0)!=(0);
       $138 = $count;
       $139 = ($138|0)<(567);
       $or$cond9 = $137 & $139;
       if (!($or$cond9)) {
        break;
       }
       $140 = $symbol_o;
       $141 = $140 << 24 >> 24;
       $142 = ($141|0)==(60);
       if ($142) {
        $143 = $src;
        $144 = HEAP8[$143>>0]|0;
        $145 = $144 << 24 >> 24;
        $146 = ($145|0)==(33);
        if ($146) {
         $147 = $src;
         $148 = ((($147)) + 1|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = $149 << 24 >> 24;
         $151 = ($150|0)!=(0);
         if ($151) {
          $152 = $src;
          $153 = ((($152)) + 1|0);
          $src = $153;
         }
        }
       }
       $154 = $src;
       $155 = ((($154)) + 1|0);
       $src = $155;
       $156 = HEAP8[$154>>0]|0;
       $157 = $dst;
       $158 = ((($157)) + 1|0);
       $dst = $158;
       HEAP8[$157>>0] = $156;
       $159 = $count;
       $160 = (($159) + 1)|0;
       $count = $160;
      }
      $161 = $src;
      $162 = HEAP8[$161>>0]|0;
      $163 = $162 << 24 >> 24;
      $164 = $delim;
      $165 = $164 << 24 >> 24;
      $166 = ($163|0)==($165|0);
      if ($166) {
       $167 = $src;
       $168 = ((($167)) + 1|0);
       $src = $168;
       $169 = HEAP8[$167>>0]|0;
       $170 = $dst;
       $171 = ((($170)) + 1|0);
       $dst = $171;
       HEAP8[$170>>0] = $169;
       $172 = $count;
       $173 = (($172) + 1)|0;
       $count = $173;
       continue;
      } else {
       $174 = $tsrc;
       $src = $174;
       $175 = $tdst;
       $dst = $175;
       $176 = $tcount;
       $count = $176;
       continue;
      }
     }
    }
    $177 = $c;
    $178 = $177 << 24 >> 24;
    $179 = ($178|0)==(33);
    if ($179) {
     $180 = $symbol_o;
     $181 = $180 << 24 >> 24;
     $182 = ($181|0)==(60);
     if ($182) {
      $183 = $src;
      $184 = ((($183)) + 1|0);
      $185 = HEAP8[$184>>0]|0;
      $186 = $185 << 24 >> 24;
      $187 = ($186|0)!=(0);
      if ($187) {
       $188 = $src;
       $189 = ((($188)) + 1|0);
       $src = $189;
       $190 = $src;
       $191 = ((($190)) + 1|0);
       $src = $191;
       $192 = HEAP8[$190>>0]|0;
       $193 = $dst;
       $194 = ((($193)) + 1|0);
       $dst = $194;
       HEAP8[$193>>0] = $192;
       $195 = $count;
       $196 = (($195) + 1)|0;
       $count = $196;
       continue;
      }
     }
    }
    $197 = $c;
    $198 = $197 << 24 >> 24;
    $199 = ($198|0)==(92);
    if ($199) {
     $200 = $src;
     $201 = $count;
     $202 = $dst;
     $203 = $2;
     $204 = (_ConcatLine($200,$201,$202,$203)|0);
     $205 = ($204|0)!=(-2);
     if ($205) {
      $206 = $2;
      $207 = ((($206)) + 18|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = $208 << 24 >> 24;
      $210 = $209 | 1;
      $211 = $210&255;
      HEAP8[$207>>0] = $211;
      continue;
     }
    }
    $212 = $c;
    $213 = $212 << 24 >> 24;
    $214 = ($213|0)==(0);
    do {
     if (!($214)) {
      $215 = $c;
      $216 = $215 << 24 >> 24;
      $217 = ($216|0)==(59);
      if ($217) {
       $218 = $symbol_o;
       $219 = $218 << 24 >> 24;
       $220 = ($219|0)==(123);
       if ($220) {
        break;
       }
      }
      $282 = $c;
      $283 = $dst;
      $284 = ((($283)) + 1|0);
      $dst = $284;
      HEAP8[$283>>0] = $282;
      $285 = $src;
      $286 = ((($285)) + 1|0);
      $src = $286;
      $287 = $count;
      $288 = (($287) + 1)|0;
      $count = $288;
      continue L15;
     }
    } while(0);
    $221 = $2;
    $222 = ((($221)) + 16|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = $223 << 24 >> 24;
    $225 = ($224|0)==(0);
    if (!($225)) {
     label = 55;
     break;
    }
    $226 = $2;
    $227 = ((($226)) + 17|0);
    $228 = HEAP8[$227>>0]|0;
    $229 = $228 << 24 >> 24;
    $230 = $229 & 32;
    $231 = ($230|0)==(0);
    if (!($231)) {
     label = 55;
     break;
    }
    $232 = $dst;
    $233 = ((($232)) + -1|0);
    $tmp = $233;
    while(1) {
     $234 = $tmp;
     $235 = HEAP8[$234>>0]|0;
     $236 = $235 << 24 >> 24;
     $237 = (_isspace($236)|0);
     $238 = ($237|0)!=(0);
     $239 = $tmp;
     if (!($238)) {
      break;
     }
     $240 = ((($239)) + -1|0);
     $tmp = $240;
    }
    $241 = HEAP8[$239>>0]|0;
    $242 = $241 << 24 >> 24;
    $243 = ($242|0)==(44);
    if (!($243)) {
     label = 55;
     break;
    }
    $244 = $2;
    $245 = ((($244)) + 4|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = $2;
    $248 = ((($247)) + 4|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (_strlen($249)|0);
    $251 = (($250) + 1)|0;
    $252 = (($251) + 4)|0;
    $253 = (($252) - 1)|0;
    $254 = $253 & -4;
    $255 = (($246) + ($254)|0);
    $tmp = $255;
    $256 = $tmp;
    $257 = (_GetTextLine($256)|0);
    $258 = ($257|0)!=(0|0);
    if (!($258)) {
     label = 55;
     break;
    }
    while(1) {
     $259 = $tmp;
     $260 = HEAP8[$259>>0]|0;
     $261 = $260 << 24 >> 24;
     $262 = (_isspace($261)|0);
     $263 = ($262|0)!=(0);
     $264 = $tmp;
     if (!($263)) {
      break;
     }
     $265 = ((($264)) + 1|0);
     $tmp = $265;
    }
    $266 = (_strlen($264)|0);
    $267 = $count;
    $268 = (($266) + ($267))|0;
    $269 = ($268>>>0)>=(600);
    if ($269) {
     label = 53;
     break;
    }
    $270 = $src;
    $271 = $tmp;
    (_strcpy($270,$271)|0);
   }
   if ((label|0) == 18) {
    $103 = $src;
    $104 = ((($103)) + 1|0);
    $src = $104;
    break;
   }
   else if ((label|0) == 53) {
    (_EmitError(61)|0);
    $0 = -1;
    $388 = $0;
    STACKTOP = sp;return ($388|0);
   }
   else if ((label|0) == 55) {
    $272 = $2;
    $273 = HEAP32[$272>>2]|0;
    $src = $273;
    $274 = $2;
    $275 = ((($274)) + 4|0);
    $276 = HEAP32[$275>>2]|0;
    $dst = $276;
    $277 = $src;
    $278 = ((($277)) + 1|0);
    $src = $278;
    $279 = HEAP8[$277>>0]|0;
    $280 = $dst;
    $281 = ((($280)) + 1|0);
    $dst = $281;
    HEAP8[$280>>0] = $279;
    $count = 1;
    label = 57;
    break;
   }
  }
 } while(0);
 L76: do {
  if ((label|0) == 57) {
   $289 = $1;
   $290 = ((($289)) + 1|0);
   HEAP8[$290>>0] = 0;
   L78: while(1) {
    $291 = $count;
    $292 = ($291|0)<(568);
    if (!($292)) {
     break L76;
    }
    $293 = $src;
    $294 = HEAP8[$293>>0]|0;
    $295 = $294 << 24 >> 24;
    $296 = ($295|0)!=(0);
    if (!($296)) {
     break L76;
    }
    $297 = $src;
    $298 = HEAP8[$297>>0]|0;
    $299 = $298 << 24 >> 24;
    $300 = (_isspace($299)|0);
    $301 = ($300|0)!=(0);
    if ($301) {
     break L76;
    }
    $302 = $src;
    $303 = HEAP8[$302>>0]|0;
    $304 = $303 << 24 >> 24;
    $305 = ($304|0)!=(44);
    if (!($305)) {
     break L76;
    }
    $306 = $src;
    $307 = HEAP8[$306>>0]|0;
    $308 = $307 << 24 >> 24;
    $309 = ($308|0)!=(41);
    if (!($309)) {
     break L76;
    }
    $310 = $src;
    $311 = HEAP8[$310>>0]|0;
    $312 = $311 << 24 >> 24;
    $313 = ($312|0)!=(37);
    if (!($313)) {
     break L76;
    }
    $314 = $src;
    $315 = HEAP8[$314>>0]|0;
    $316 = $315 << 24 >> 24;
    $317 = ($316|0)==(59);
    if ($317) {
     $318 = $2;
     $319 = ((($318)) + 16|0);
     $320 = HEAP8[$319>>0]|0;
     $321 = $320 << 24 >> 24;
     $322 = ($321|0)==(0);
     if ($322) {
      break L76;
     }
    }
    $323 = $src;
    $324 = HEAP8[$323>>0]|0;
    $325 = $324 << 24 >> 24;
    $326 = ($325|0)==(92);
    do {
     if ($326) {
      $327 = $2;
      $328 = ((($327)) + 16|0);
      $329 = HEAP8[$328>>0]|0;
      $330 = $329 << 24 >> 24;
      $331 = ($330|0)==(0);
      if (!($331)) {
       $332 = $2;
       $333 = ((($332)) + 16|0);
       $334 = HEAP8[$333>>0]|0;
       $335 = $334 << 24 >> 24;
       $336 = $335 & 4;
       $337 = ($336|0)!=(0);
       if (!($337)) {
        break;
       }
      }
      $338 = $src;
      $339 = $count;
      $340 = $dst;
      $341 = $2;
      $342 = (_ConcatLine($338,$339,$340,$341)|0);
      $343 = ($342|0)!=(-2);
      if ($343) {
       $344 = $2;
       $345 = ((($344)) + 18|0);
       $346 = HEAP8[$345>>0]|0;
       $347 = $346 << 24 >> 24;
       $348 = $347 | 1;
       $349 = $348&255;
       HEAP8[$345>>0] = $349;
       $350 = $count;
       $351 = ($350|0)!=(0);
       if ($351) {
        continue L78;
       } else {
        break L78;
       }
      }
     }
    } while(0);
    $352 = $src;
    $353 = HEAP8[$352>>0]|0;
    $354 = $353 << 24 >> 24;
    $355 = ($354|0)==(33);
    if ($355) {
     $356 = $src;
     $357 = ((($356)) + 1|0);
     $358 = HEAP8[$357>>0]|0;
     $359 = $358 << 24 >> 24;
     $360 = ($359|0)!=(0);
     $361 = $count;
     $362 = ($361|0)<(567);
     $or$cond = $360 & $362;
     if ($or$cond) {
      $363 = $src;
      $364 = ((($363)) + 1|0);
      $src = $364;
      $365 = HEAP8[$363>>0]|0;
      $366 = $dst;
      $367 = ((($366)) + 1|0);
      $dst = $367;
      HEAP8[$366>>0] = $365;
     }
    }
    $368 = $src;
    $369 = ((($368)) + 1|0);
    $src = $369;
    $370 = HEAP8[$368>>0]|0;
    $371 = $dst;
    $372 = ((($371)) + 1|0);
    $dst = $372;
    HEAP8[$371>>0] = $370;
    $373 = $count;
    $374 = (($373) + 1)|0;
    $count = $374;
   }
   $0 = -2;
   $388 = $0;
   STACKTOP = sp;return ($388|0);
  }
 } while(0);
 $375 = $count;
 $376 = ($375|0)==(568);
 if ($376) {
  (_EmitError(155)|0);
  $0 = -1;
  $388 = $0;
  STACKTOP = sp;return ($388|0);
 } else {
  $377 = $dst;
  $378 = ((($377)) + 1|0);
  $dst = $378;
  HEAP8[$377>>0] = 0;
  $379 = $1;
  HEAP8[$379>>0] = 9;
  $380 = $count;
  $381 = $1;
  $382 = ((($381)) + 8|0);
  HEAP32[$382>>2] = $380;
  $383 = $src;
  $384 = $2;
  HEAP32[$384>>2] = $383;
  $385 = $dst;
  $386 = $2;
  $387 = ((($386)) + 4|0);
  HEAP32[$387>>2] = $385;
  $0 = 0;
  $388 = $0;
  STACKTOP = sp;return ($388|0);
 }
 return (0)|0;
}
function _ConcatLine($src,$cnt,$out,$ls) {
 $src = $src|0;
 $cnt = $cnt|0;
 $out = $out|0;
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $max = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $src;
 $2 = $cnt;
 $3 = $out;
 $4 = $ls;
 $5 = $1;
 $6 = ((($5)) + 1|0);
 $p = $6;
 while(1) {
  $7 = $p;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isspace($9)|0);
  $11 = ($10|0)!=(0);
  $12 = $p;
  if (!($11)) {
   break;
  }
  $13 = ((($12)) + 1|0);
  $p = $13;
 }
 $14 = HEAP8[$12>>0]|0;
 $15 = $14 << 24 >> 24;
 $16 = ($15|0)==(0);
 if ($16) {
  label = 6;
 } else {
  $17 = $p;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(59);
  if ($20) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $21 = $3;
  $buffer = $21;
  $22 = $buffer;
  $23 = (_GetTextLine($22)|0);
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = $buffer;
   $p = $25;
   while(1) {
    $26 = $p;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (_isspace($28)|0);
    $30 = ($29|0)!=(0);
    $31 = $p;
    if (!($30)) {
     break;
    }
    $32 = ((($31)) + 1|0);
    $p = $32;
   }
   $33 = (_strlen($31)|0);
   $max = $33;
   $34 = $2;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = $1;
    $37 = ((($36)) + 1|0);
    $1 = $37;
    HEAP8[$36>>0] = 32;
   }
   $38 = $1;
   $39 = $4;
   $40 = ((($39)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $38;
   $43 = $41;
   $44 = (($42) - ($43))|0;
   $45 = $max;
   $46 = (($44) + ($45))|0;
   $47 = ($46|0)>=(600);
   if ($47) {
    (_EmitError(61)|0);
    $48 = $1;
    $49 = $4;
    $50 = ((($49)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $48;
    $53 = $51;
    $54 = (($52) - ($53))|0;
    $55 = (($54) + 1)|0;
    $56 = (600 - ($55))|0;
    $max = $56;
    $57 = $p;
    $58 = $max;
    $59 = (($57) + ($58)|0);
    HEAP8[$59>>0] = 0;
   }
   $60 = $1;
   $61 = $p;
   $62 = $max;
   $63 = (($62) + 1)|0;
   _memcpy(($60|0),($61|0),($63|0))|0;
   $0 = 0;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 }
 $0 = -2;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function _get_float($buf,$p) {
 $buf = $buf|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $c = 0, $got_decimal = 0, $got_e = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $p;
 $got_decimal = 0;
 $got_e = 0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $ptr = $3;
 L1: while(1) {
  $4 = $ptr;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $ptr;
  $9 = HEAP8[$8>>0]|0;
  $c = $9;
  $10 = $c;
  $11 = $10 << 24 >> 24;
  $12 = (_isdigit($11)|0);
  $13 = ($12|0)!=(0);
  do {
   if (!($13)) {
    $14 = $c;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)==(46);
    if ($16) {
     $17 = $got_decimal;
     $18 = $17 << 24 >> 24;
     $19 = ($18|0)==(0);
     if ($19) {
      $got_decimal = 1;
      break;
     }
    }
    $20 = $c;
    $21 = $20 << 24 >> 24;
    $22 = (_tolower($21)|0);
    $23 = ($22|0)==(101);
    if (!($23)) {
     break L1;
    }
    $24 = $got_e;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(0);
    if (!($26)) {
     break L1;
    }
    $got_e = 1;
    $27 = $ptr;
    $28 = ((($27)) + 1|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($30|0)==(43);
    if (!($31)) {
     $32 = $ptr;
     $33 = ((($32)) + 1|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)==(45);
     if (!($36)) {
      break;
     }
    }
    $37 = $ptr;
    $38 = ((($37)) + 1|0);
    $ptr = $38;
   }
  } while(0);
  $39 = $ptr;
  $40 = ((($39)) + 1|0);
  $ptr = $40;
 }
 $41 = $0;
 HEAP8[$41>>0] = 11;
 $42 = $0;
 $43 = ((($42)) + 1|0);
 HEAP8[$43>>0] = 0;
 $44 = $1;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 $49 = $ptr;
 $50 = $1;
 $51 = HEAP32[$50>>2]|0;
 $52 = $49;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 _memcpy(($46|0),($48|0),($54|0))|0;
 $55 = $ptr;
 $56 = $1;
 $57 = HEAP32[$56>>2]|0;
 $58 = $55;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = $1;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($60)|0);
 HEAP32[$62>>2] = $64;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($67)) + 1|0);
 HEAP32[$66>>2] = $68;
 HEAP8[$67>>0] = 0;
 $69 = $ptr;
 $70 = $1;
 HEAP32[$70>>2] = $69;
 STACKTOP = sp;return 0;
}
function _TypesInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[66812>>2] = 0;
 HEAP32[66816>>2] = 0;
 return;
}
function _CreateTypeSymbol($sym,$name,$global) {
 $sym = $sym|0;
 $name = $name|0;
 $global = $global|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $si = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = $name;
 $2 = $global;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  _sym_remove_table(15404,$5);
 } else {
  $6 = $2;
  $7 = $6&255;
  $8 = ($7|0)!=(0);
  $9 = $1;
  if ($8) {
   $10 = (_SymCreate($9)|0);
   $12 = $10;
  } else {
   $11 = (_SymAlloc($9)|0);
   $12 = $11;
  }
  $0 = $12;
 }
 $13 = $0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $15 = $0;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = 7;
 $17 = $0;
 $18 = ((($17)) + 40|0);
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = 0;
 $20 = (_LclAlloc(12)|0);
 $si = $20;
 $21 = $0;
 $22 = ((($21)) + 60|0);
 HEAP32[$22>>2] = $20;
 $23 = $si;
 HEAP32[$23>>2] = 0;
 $24 = $si;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 $26 = $si;
 $27 = ((($26)) + 8|0);
 HEAP8[$27>>0] = 0;
 $28 = $si;
 $29 = ((($28)) + 9|0);
 HEAP8[$29>>0] = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _SearchNameInStruct($tstruct,$name,$poffset,$level) {
 $tstruct = $tstruct|0;
 $name = $name|0;
 $poffset = $poffset|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $fl = 0, $len = 0, $sym = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tstruct;
 $2 = $name;
 $3 = $poffset;
 $4 = $level;
 $5 = $2;
 $6 = (_strlen($5)|0);
 $len = $6;
 $7 = $1;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $fl = $10;
 $sym = 0;
 $11 = $4;
 $12 = ($11|0)>=(32);
 if ($12) {
  (_EmitError(100)|0);
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $13 = $4;
 $14 = (($13) + 1)|0;
 $4 = $14;
 L5: while(1) {
  $15 = $fl;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   break;
  }
  $17 = $fl;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(0);
  do {
   if ($22) {
    $23 = $fl;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(7);
    $27 = $fl;
    if ($26) {
     $28 = $2;
     $29 = $3;
     $30 = $4;
     $31 = (_SearchNameInStruct($27,$28,$29,$30)|0);
     $sym = $31;
     $32 = ($31|0)!=(0|0);
     if ($32) {
      label = 8;
      break L5;
     } else {
      break;
     }
    }
    $39 = ((($27)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(196);
    if ($41) {
     $42 = $fl;
     $43 = ((($42)) + 52|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $2;
     $46 = $3;
     $47 = $4;
     $48 = (_SearchNameInStruct($44,$45,$46,$47)|0);
     $sym = $48;
     $49 = ($48|0)!=(0|0);
     if ($49) {
      label = 11;
      break L5;
     }
    }
   } else {
    $56 = $len;
    $57 = $fl;
    $58 = ((($57)) + 44|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = ($56|0)==($60|0);
    if ($61) {
     $62 = HEAP32[33696>>2]|0;
     $63 = $2;
     $64 = $fl;
     $65 = ((($64)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $len;
     $68 = (FUNCTION_TABLE_iiii[$62 & 255]($63,$66,$67)|0);
     $69 = ($68|0)==(0);
     if ($69) {
      label = 14;
      break L5;
     }
    }
   }
  } while(0);
  $71 = $fl;
  $72 = ((($71)) + 60|0);
  $73 = HEAP32[$72>>2]|0;
  $fl = $73;
 }
 if ((label|0) == 8) {
  $33 = $fl;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $3;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($35))|0;
  HEAP32[$36>>2] = $38;
 }
 else if ((label|0) == 11) {
  $50 = $fl;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $3;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52))|0;
  HEAP32[$53>>2] = $55;
 }
 else if ((label|0) == 14) {
  $70 = $fl;
  $sym = $70;
 }
 $74 = $sym;
 $0 = $74;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function _StructDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alignment = 0, $dir = 0, $name = 0, $offset = 0, $opndx = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $power = 0, $sym = 0, $typekind = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer21 = sp + 120|0;
 $vararg_buffer18 = sp + 112|0;
 $vararg_buffer15 = sp + 104|0;
 $vararg_buffer12 = sp + 96|0;
 $vararg_buffer9 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 152|0;
 $offset = sp + 136|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = $2;
 $5 = (($4) + ($3<<4)|0);
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(342);
 $9 = $8 ? 2 : 1;
 $10 = $9&255;
 $typekind = $10;
 $11 = HEAP32[66812>>2]|0;
 $12 = ($11|0)==(0|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = ($13|0)!=(1);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  $15 = HEAP32[66812>>2]|0;
  $16 = ($15|0)!=(0|0);
  $17 = HEAP32[$1>>2]|0;
  $18 = ($17|0)!=(0);
  $or$cond3 = $16 & $18;
  if (!($or$cond3)) {
   $25 = HEAP8[(549)>>0]|0;
   $26 = $25&255;
   $27 = 1 << $26;
   $alignment = $27;
   $28 = HEAP32[$1>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[$1>>2] = $29;
   $30 = HEAP32[$1>>2]|0;
   $31 = ($30|0)==(1);
   do {
    if ($31) {
     $32 = HEAP32[$1>>2]|0;
     $33 = $2;
     $34 = (($33) + ($32<<4)|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = ($36|0)==(8);
     if ($37) {
      $38 = HEAP32[$1>>2]|0;
      $39 = $2;
      $40 = (($39) + ($38<<4)|0);
      $41 = ((($40)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      $name = $42;
      $43 = HEAP32[$1>>2]|0;
      $44 = (($43) + 1)|0;
      HEAP32[$1>>2] = $44;
      break;
     } else {
      $name = 109841;
      break;
     }
    } else {
     $45 = $2;
     $46 = ((($45)) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $name = $47;
    }
   } while(0);
   $48 = HEAP32[66812>>2]|0;
   $49 = ($48|0)==(0|0);
   if ($49) {
    $50 = HEAP32[$1>>2]|0;
    $51 = $2;
    $52 = (($51) + ($50<<4)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $2;
     $57 = HEAP32[(616)>>2]|0;
     $58 = (_EvalOperand($1,$56,$57,$opndx,0)|0);
     $59 = ($58|0)!=(-1);
     do {
      if ($59) {
       $60 = ((($opndx)) + 40|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(-2);
       if (!($62)) {
        $63 = ((($opndx)) + 40|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($64|0)!=(0);
        if ($65) {
         $66 = ((($opndx)) + 56|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = ($67|0)!=(0|0);
         if ($68) {
          $69 = ((($opndx)) + 56|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ((($70)) + 16|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = ($72|0)==(0);
          if ($73) {
           $74 = ((($opndx)) + 56|0);
           $75 = HEAP32[$74>>2]|0;
           $76 = ((($75)) + 4|0);
           $77 = HEAP32[$76>>2]|0;
           HEAP32[$vararg_buffer6>>2] = $77;
           (_EmitErr(102,$vararg_buffer6)|0);
           break;
          }
         }
         (_EmitError(65)|0);
         break;
        }
        $78 = HEAP32[$opndx>>2]|0;
        $79 = ($78|0)>(32);
        if ($79) {
         (_EmitError(214)|0);
         break;
        }
        $power = 1;
        while(1) {
         $80 = $power;
         $81 = HEAP32[$opndx>>2]|0;
         $82 = ($80|0)<($81|0);
         $83 = $power;
         if (!($82)) {
          break;
         }
         $84 = $83 << 1;
         $power = $84;
        }
        $85 = HEAP32[$opndx>>2]|0;
        $86 = ($83|0)!=($85|0);
        $87 = HEAP32[$opndx>>2]|0;
        if ($86) {
         HEAP32[$vararg_buffer9>>2] = $87;
         (_EmitErr(129,$vararg_buffer9)|0);
         break;
        } else {
         $alignment = $87;
         break;
        }
       }
      }
     } while(0);
     $88 = HEAP32[$1>>2]|0;
     $89 = $2;
     $90 = (($89) + ($88<<4)|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = ($92|0)==(44);
     if ($93) {
      $94 = HEAP32[$1>>2]|0;
      $95 = (($94) + 1)|0;
      HEAP32[$1>>2] = $95;
      $96 = HEAP32[$1>>2]|0;
      $97 = $2;
      $98 = (($97) + ($96<<4)|0);
      $99 = HEAP8[$98>>0]|0;
      $100 = $99&255;
      $101 = ($100|0)==(8);
      if ($101) {
       $102 = HEAP32[$1>>2]|0;
       $103 = $2;
       $104 = (($103) + ($102<<4)|0);
       $105 = ((($104)) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (_strcasecmp($106,109842)|0);
       $108 = ($107|0)==(0);
       if ($108) {
        HEAP32[$vararg_buffer12>>2] = 109842;
        _EmitWarn(2,250,$vararg_buffer12);
        $109 = HEAP32[$1>>2]|0;
        $110 = (($109) + 1)|0;
        HEAP32[$1>>2] = $110;
       }
      }
     }
    }
   }
   $111 = HEAP32[$1>>2]|0;
   $112 = $2;
   $113 = (($112) + ($111<<4)|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = ($115|0)!=(0);
   if ($116) {
    $117 = HEAP32[$1>>2]|0;
    $118 = $2;
    $119 = (($118) + ($117<<4)|0);
    $120 = ((($119)) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    HEAP32[$vararg_buffer15>>2] = $121;
    $122 = (_EmitErr(209,$vararg_buffer15)|0);
    $0 = $122;
    $263 = $0;
    STACKTOP = sp;return ($263|0);
   }
   $123 = $name;
   $124 = HEAP8[$123>>0]|0;
   $125 = ($124<<24>>24)!=(0);
   do {
    if ($125) {
     $126 = HEAP32[66812>>2]|0;
     $127 = ($126|0)==(0|0);
     if ($127) {
      $128 = $name;
      $129 = (_SymFind($128)|0);
      $sym = $129;
      break;
     } else {
      $130 = HEAP32[66812>>2]|0;
      $131 = $name;
      $132 = (_SearchNameInStruct($130,$131,$offset,0)|0);
      $sym = $132;
      break;
     }
    } else {
     $sym = 0;
    }
   } while(0);
   $133 = HEAP32[(560)>>2]|0;
   $134 = $133 >>> 11;
   $135 = $134 & 1;
   $136 = ($135|0)!=(0);
   do {
    if ($136) {
     $137 = HEAP32[66812>>2]|0;
     $138 = ($137|0)!=(0|0);
     if ($138) {
      $139 = HEAP32[66812>>2]|0;
      $140 = ((($139)) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      _LstWrite(6,$141,0);
      break;
     } else {
      _LstWrite(6,0,0);
      break;
     }
    }
   } while(0);
   $142 = HEAP32[4884>>2]|0;
   $143 = ($142>>>0)>(0);
   if ($143) {
    $144 = HEAP32[66812>>2]|0;
    $145 = ($144|0)!=(0|0);
    if ($145) {
     $146 = HEAP32[66812>>2]|0;
     $147 = ((($146)) + 60|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($148)) + 4|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ((($150)) + 52|0);
     $152 = HEAP32[$151>>2]|0;
     $sym = $152;
     $153 = $sym;
     $154 = ($153|0)!=(0|0);
     if (!($154)) {
      (_InternalError(109852,285)|0);
     }
     $155 = HEAP32[66812>>2]|0;
     $156 = ((($155)) + 60|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($157)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($159)) + 60|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = HEAP32[66812>>2]|0;
     $163 = ((($162)) + 60|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($164)) + 4|0);
     HEAP32[$165>>2] = $161;
    }
    $166 = $sym;
    $167 = ($166|0)!=(0|0);
    if (!($167)) {
     (_InternalError(109852,288)|0);
    }
    $168 = $sym;
    $dir = $168;
    $169 = $dir;
    $170 = ((($169)) + 60|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = HEAP32[$171>>2]|0;
    $173 = $dir;
    $174 = ((($173)) + 60|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ((($175)) + 4|0);
    HEAP32[$176>>2] = $172;
    $177 = $sym;
    $178 = ((($177)) + 8|0);
    HEAP32[$178>>2] = 0;
    $179 = $sym;
    $180 = ((($179)) + 24|0);
    $181 = HEAP16[$180>>1]|0;
    $182 = $181 & -3;
    $183 = $182 | 2;
    HEAP16[$180>>1] = $183;
    $184 = HEAP32[66812>>2]|0;
    $185 = $sym;
    $186 = ((($185)) + 64|0);
    HEAP32[$186>>2] = $184;
    $187 = $sym;
    HEAP32[66812>>2] = $187;
    $0 = 0;
    $263 = $0;
    STACKTOP = sp;return ($263|0);
   }
   $188 = $sym;
   $189 = ($188|0)==(0|0);
   L69: do {
    if ($189) {
     $190 = HEAP32[66812>>2]|0;
     $191 = ($190|0)==(0|0);
     $192 = $name;
     if ($191) {
      $193 = (_CreateTypeSymbol(0,$192,1)|0);
      $sym = $193;
      break;
     } else {
      $194 = (_CreateTypeSymbol(0,$192,0)|0);
      $sym = $194;
      $195 = HEAP32[66812>>2]|0;
      $196 = ((($195)) + 60|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = ((($197)) + 8|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $alignment = $200;
      break;
     }
    } else {
     $201 = $sym;
     $202 = ((($201)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0);
     $205 = $sym;
     if ($204) {
      $206 = HEAP32[66812>>2]|0;
      $207 = ($206|0)==(0|0);
      $208 = $207&1;
      $209 = $208&255;
      (_CreateTypeSymbol($205,0,$209)|0);
      break;
     }
     $210 = ((($205)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(7);
     $213 = HEAP32[66812>>2]|0;
     $214 = ($213|0)==(0|0);
     $or$cond5 = $212 & $214;
     $215 = $sym;
     if (!($or$cond5)) {
      $227 = ((($215)) + 4|0);
      $228 = HEAP32[$227>>2]|0;
      HEAP32[$vararg_buffer21>>2] = $228;
      $229 = (_EmitErr(143,$vararg_buffer21)|0);
      $0 = $229;
      $263 = $0;
      STACKTOP = sp;return ($263|0);
     }
     $216 = ((($215)) + 40|0);
     $217 = ((($216)) + 2|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = $218&255;
     switch ($219|0) {
     case 0:  {
      break L69;
      break;
     }
     case 2: case 1:  {
      $220 = $sym;
      HEAP32[66816>>2] = $220;
      $221 = $name;
      $222 = (_CreateTypeSymbol(0,$221,0)|0);
      $sym = $222;
      break L69;
      break;
     }
     default: {
     }
     }
     $223 = $sym;
     $224 = ((($223)) + 4|0);
     $225 = HEAP32[$224>>2]|0;
     HEAP32[$vararg_buffer18>>2] = $225;
     $226 = (_EmitErr(143,$vararg_buffer18)|0);
     $0 = $226;
     $263 = $0;
     STACKTOP = sp;return ($263|0);
    }
   } while(0);
   $230 = $sym;
   $231 = ((($230)) + 8|0);
   HEAP32[$231>>2] = 0;
   $232 = $typekind;
   $233 = $sym;
   $234 = ((($233)) + 40|0);
   $235 = ((($234)) + 2|0);
   HEAP8[$235>>0] = $232;
   $236 = $sym;
   $dir = $236;
   $237 = $alignment;
   $238 = $237&255;
   $239 = $dir;
   $240 = ((($239)) + 60|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ((($241)) + 8|0);
   HEAP8[$242>>0] = $238;
   $243 = $dir;
   $244 = ((($243)) + 60|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ((($245)) + 9|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $247 & -3;
   $249 = $248 | 2;
   HEAP8[$246>>0] = $249;
   $250 = HEAP32[66812>>2]|0;
   $251 = ($250|0)!=(0|0);
   if ($251) {
    $252 = $dir;
    $253 = ((($252)) + 60|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ((($254)) + 9|0);
    $256 = HEAP8[$255>>0]|0;
    $257 = $256 & -2;
    $258 = $257 | 1;
    HEAP8[$255>>0] = $258;
   }
   $259 = HEAP32[66812>>2]|0;
   $260 = $dir;
   $261 = ((($260)) + 64|0);
   HEAP32[$261>>2] = $259;
   $262 = $dir;
   HEAP32[66812>>2] = $262;
   $0 = 0;
   $263 = $0;
   STACKTOP = sp;return ($263|0);
  }
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = $2;
 $21 = (($20) + ($19<<4)|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$vararg_buffer>>2] = $23;
 $24 = (_EmitErr(209,$vararg_buffer)|0);
 $0 = $24;
 $263 = $0;
 STACKTOP = sp;return ($263|0);
}
function _EndstructDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $f = 0, $min = 0, $size = 0, $sym = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $i;
 $2 = $tokenarray;
 $3 = HEAP32[66812>>2]|0;
 $dir = $3;
 $4 = HEAP32[4884>>2]|0;
 $5 = ($4>>>0)>(0);
 if ($5) {
  $6 = HEAP32[66812>>2]|0;
  $7 = ((($6)) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[66812>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $size = $10;
  $11 = HEAP32[66812>>2]|0;
  $12 = ((($11)) + 64|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[66812>>2] = $13;
  $14 = HEAP32[66812>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $dir;
   _UpdateStructSize($16);
  }
  $17 = HEAP32[(380)>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $size;
   $20 = $dir;
   _LstWrite(6,$19,$20);
  }
  $0 = 0;
  $234 = $0;
  STACKTOP = sp;return ($234|0);
 }
 $21 = $1;
 $22 = ($21|0)==(1);
 if ($22) {
  $23 = $dir;
  $24 = ((($23)) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   label = 9;
  }
 } else {
  label = 9;
 }
 do {
  if ((label|0) == 9) {
   $27 = $1;
   $28 = ($27|0)==(0);
   if ($28) {
    $29 = $dir;
    $30 = ((($29)) + 64|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     break;
    }
   }
   $33 = $1;
   $34 = ($33|0)==(1);
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
   } else {
    $38 = 109841;
   }
   HEAP32[$vararg_buffer>>2] = $38;
   $39 = (_EmitErr(142,$vararg_buffer)|0);
   $0 = $39;
   $234 = $0;
   STACKTOP = sp;return ($234|0);
  }
 } while(0);
 $40 = $1;
 $41 = ($40|0)==(1);
 if ($41) {
  $42 = HEAP32[33696>>2]|0;
  $43 = $2;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $dir;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $dir;
  $50 = ((($49)) + 44|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (FUNCTION_TABLE_iiii[$42 & 255]($45,$48,$52)|0);
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $57;
   $58 = (_EmitErr(142,$vararg_buffer1)|0);
   $0 = $58;
   $234 = $0;
   STACKTOP = sp;return ($234|0);
  }
 }
 $59 = $1;
 $60 = (($59) + 1)|0;
 $1 = $60;
 $61 = $dir;
 $62 = ((($61)) + 60|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($63)) + 9|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ($65&255) >>> 2;
 $67 = $66 & 1;
 $68 = ($67<<24>>24)!=(0);
 if ($68) {
  $min = 0;
  $69 = $dir;
  $70 = ((($69)) + 60|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$71>>2]|0;
  $f = $72;
  while(1) {
   $73 = $f;
   $74 = ($73|0)!=(0|0);
   if (!($74)) {
    break;
   }
   $75 = $f;
   $76 = ((($75)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $min;
   $79 = ($77|0)<($78|0);
   if ($79) {
    $80 = $f;
    $81 = ((($80)) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $min = $82;
   }
   $83 = $f;
   $84 = ((($83)) + 60|0);
   $85 = HEAP32[$84>>2]|0;
   $f = $85;
  }
  $86 = $dir;
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $min;
  $90 = (($88) - ($89))|0;
  $91 = $dir;
  $92 = ((($91)) + 36|0);
  HEAP32[$92>>2] = $90;
 }
 $93 = $dir;
 $94 = ((($93)) + 60|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ((($95)) + 8|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = ($98|0)>(1);
 if ($99) {
  $100 = $dir;
  $101 = ((($100)) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  $size = $102;
  $103 = $size;
  $104 = ($103|0)==(0);
  if ($104) {
   $105 = $size;
   $106 = (($105) + 1)|0;
   $size = $106;
  }
  $107 = $size;
  $108 = $dir;
  $109 = ((($108)) + 60|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 8|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = ($107>>>0)>($113>>>0);
  if ($114) {
   $115 = $dir;
   $116 = ((($115)) + 60|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 8|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $size = $120;
  }
  $121 = $dir;
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $size;
  $125 = (($123) + ($124))|0;
  $126 = (($125) - 1)|0;
  $127 = $size;
  $128 = (0 - ($127))|0;
  $129 = $126 & $128;
  $130 = $dir;
  $131 = ((($130)) + 36|0);
  HEAP32[$131>>2] = $129;
 }
 $132 = $dir;
 $133 = ((($132)) + 60|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ((($134)) + 9|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136 & -3;
 HEAP8[$135>>0] = $137;
 $138 = $dir;
 $139 = ((($138)) + 24|0);
 $140 = HEAP16[$139>>1]|0;
 $141 = $140 & -3;
 $142 = $141 | 2;
 HEAP16[$139>>1] = $142;
 $143 = $dir;
 $144 = ((($143)) + 36|0);
 $145 = HEAP32[$144>>2]|0;
 $size = $145;
 $146 = $dir;
 $147 = ((($146)) + 8|0);
 HEAP32[$147>>2] = 0;
 $148 = $dir;
 $149 = ((($148)) + 64|0);
 $150 = HEAP32[$149>>2]|0;
 HEAP32[66812>>2] = $150;
 $151 = $1;
 $152 = ($151|0)==(1);
 if ($152) {
  $153 = $dir;
  $154 = ((($153)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = HEAP8[$155>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $dir;
   $160 = ((($159)) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $166 = $161;
  } else {
   $166 = 0;
  }
  $162 = $dir;
  $163 = $dir;
  $164 = ((($163)) + 36|0);
  $165 = HEAP32[$164>>2]|0;
  $167 = (_CreateStructField(-1,0,$166,196,$162,$165)|0);
  $sym = $167;
  $168 = $dir;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $sym;
  $172 = ((($171)) + 36|0);
  HEAP32[$172>>2] = $170;
  $173 = $dir;
  $174 = ((($173)) + 4|0);
  HEAP32[$174>>2] = 109841;
  $175 = $dir;
  $176 = ((($175)) + 44|0);
  HEAP8[$176>>0] = 0;
 }
 $177 = HEAP32[(380)>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = $size;
  $180 = $dir;
  _LstWrite(6,$179,$180);
 }
 $181 = $dir;
 $182 = ((($181)) + 36|0);
 $183 = HEAP32[$182>>2]|0;
 switch ($183|0) {
 case 1:  {
  $184 = $dir;
  $185 = ((($184)) + 20|0);
  HEAP32[$185>>2] = 0;
  break;
 }
 case 2:  {
  $186 = $dir;
  $187 = ((($186)) + 20|0);
  HEAP32[$187>>2] = 1;
  break;
 }
 case 4:  {
  $188 = $dir;
  $189 = ((($188)) + 20|0);
  HEAP32[$189>>2] = 3;
  break;
 }
 case 6:  {
  $190 = $dir;
  $191 = ((($190)) + 20|0);
  HEAP32[$191>>2] = 5;
  break;
 }
 case 8:  {
  $192 = $dir;
  $193 = ((($192)) + 20|0);
  HEAP32[$193>>2] = 7;
  break;
 }
 default: {
  $194 = $dir;
  $195 = ((($194)) + 20|0);
  HEAP32[$195>>2] = 192;
 }
 }
 $196 = HEAP32[66812>>2]|0;
 $197 = ($196|0)==(0|0);
 if ($197) {
  $198 = HEAP32[66816>>2]|0;
  $199 = ($198|0)!=(0|0);
  if ($199) {
   $200 = $dir;
   $201 = HEAP32[66816>>2]|0;
   $202 = (_AreStructsEqual($200,$201)|0);
   $203 = $202&255;
   $204 = ($203|0)==(0);
   if ($204) {
    $205 = $dir;
    $206 = ((($205)) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    HEAP32[$vararg_buffer4>>2] = 109860;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $207;
    (_EmitErr(139,$vararg_buffer4)|0);
   }
   $208 = $dir;
   _SymFree($208);
   HEAP32[66816>>2] = 0;
  }
 } else {
  $209 = $dir;
  $210 = ((($209)) + 32|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = HEAP32[66812>>2]|0;
  $213 = ((($212)) + 32|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($211>>>0)>($214>>>0);
  if ($215) {
   $216 = $dir;
   $217 = ((($216)) + 32|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = HEAP32[66812>>2]|0;
   $220 = ((($219)) + 32|0);
   HEAP32[$220>>2] = $218;
  }
  $221 = $dir;
  _UpdateStructSize($221);
 }
 $222 = $1;
 $223 = $2;
 $224 = (($223) + ($222<<4)|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = ($226|0)!=(0);
 if ($227) {
  $228 = $1;
  $229 = $2;
  $230 = (($229) + ($228<<4)|0);
  $231 = ((($230)) + 4|0);
  $232 = HEAP32[$231>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $232;
  $233 = (_EmitErr(209,$vararg_buffer8)|0);
  $0 = $233;
  $234 = $0;
  STACKTOP = sp;return ($234|0);
 } else {
  $0 = 0;
  $234 = $0;
  STACKTOP = sp;return ($234|0);
 }
 return (0)|0;
}
function _UpdateStructSize($sym) {
 $sym = $sym|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sym;
 $1 = HEAP32[66812>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(2);
 $7 = $0;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[66812>>2]|0;
 if ($6) {
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)>($12>>>0);
  if (!($13)) {
   STACKTOP = sp;return;
  }
  $14 = $0;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[66812>>2]|0;
  $18 = ((($17)) + 36|0);
  HEAP32[$18>>2] = $16;
  STACKTOP = sp;return;
 } else {
  $19 = ((($10)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($9))|0;
  HEAP32[$19>>2] = $21;
  $22 = HEAP32[66812>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[66812>>2]|0;
  $26 = ((($25)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)>($27|0);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[66812>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[66812>>2]|0;
  $33 = ((($32)) + 36|0);
  HEAP32[$33>>2] = $31;
  STACKTOP = sp;return;
 }
}
function _CreateStructField($loc,$tokenarray,$name,$mem_type,$vartype,$size) {
 $loc = $loc|0;
 $tokenarray = $tokenarray|0;
 $name = $name|0;
 $mem_type = $mem_type|0;
 $vartype = $vartype|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dir = 0, $disp = 0, $f = 0, $gsym = 0, $i = 0, $init = 0;
 var $len = 0, $offset = 0, $si = 0, $sym = 0, $sym2 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $disp = sp + 32|0;
 $1 = $loc;
 $2 = $tokenarray;
 $3 = $name;
 $4 = $mem_type;
 $5 = $vartype;
 $6 = $size;
 $7 = HEAP32[66812>>2]|0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $si = $9;
 $10 = HEAP32[66812>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $offset = $12;
 $13 = $3;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $3;
  $16 = (_strlen($15)|0);
  $len = $16;
  $17 = $len;
  $18 = ($17|0)>(247);
  if ($18) {
   (_EmitError(70)|0);
   $0 = 0;
   $353 = $0;
   STACKTOP = sp;return ($353|0);
  }
  $19 = HEAP32[66812>>2]|0;
  $20 = $3;
  $21 = (_SearchNameInStruct($19,$20,$disp,0)|0);
  $sym = $21;
  $22 = $sym;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $sym;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$vararg_buffer>>2] = $26;
   (_EmitErr(56,$vararg_buffer)|0);
   $0 = 0;
   $353 = $0;
   STACKTOP = sp;return ($353|0);
  }
 } else {
  $27 = $5;
  $28 = ($27|0)!=(0|0);
  do {
   if ($28) {
    $29 = $5;
    $30 = ((($29)) + 40|0);
    $31 = ((($30)) + 2|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33|0)==(1);
    if (!($34)) {
     $35 = $5;
     $36 = ((($35)) + 40|0);
     $37 = ((($36)) + 2|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = ($39|0)==(2);
     if (!($40)) {
      break;
     }
    }
    $41 = $5;
    (_CheckAnonymousStruct($41)|0);
   }
  } while(0);
  $3 = 109841;
  $len = 0;
 }
 $42 = $1;
 $43 = ($42|0)!=(-1);
 if ($43) {
  $44 = HEAP32[(612)>>2]|0;
  $init = $44;
  $45 = $1;
  $46 = (($45) + 1)|0;
  $i = $46;
  while(1) {
   $47 = $i;
   $48 = $2;
   $49 = (($48) + ($47<<4)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($51|0)!=(0);
   if (!($52)) {
    break;
   }
   $53 = $i;
   $54 = $2;
   $55 = (($54) + ($53<<4)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(8);
   if ($58) {
    $59 = $i;
    $60 = $2;
    $61 = (($60) + ($59<<4)|0);
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (_SymFind($63)|0);
    $sym2 = $64;
    $65 = $sym2;
    $66 = ($65|0)!=(0|0);
    if ($66) {
     $67 = $sym2;
     $68 = ((($67)) + 24|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = ($69&65535) >>> 6;
     $71 = $70 & 1;
     $72 = $71&255;
     $73 = $72&255;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = $sym2;
      $76 = ((($75)) + 24|0);
      $77 = HEAP16[$76>>1]|0;
      $78 = ($77&65535) >>> 5;
      $79 = $78 & 1;
      $80 = $79&255;
      $81 = $80&255;
      $82 = ($81|0)!=(0);
      if ($82) {
       $83 = $sym2;
       $84 = ((($83)) + 40|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)!=(0|0);
       if ($86) {
        $87 = $sym2;
        $88 = ((($87)) + 40|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = $sym2;
        FUNCTION_TABLE_vii[$89 & 255]($90,0);
       }
      }
      $91 = $sym2;
      $92 = ((($91)) + 8|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $init;
      $95 = HEAP8[(548)>>0]|0;
      $96 = $95&255;
      $97 = $sym2;
      $98 = ((($97)) + 36|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)<(0);
      $101 = $100&1;
      $102 = $101&255;
      (_myltoa($93,$94,$96,$102,1)|0);
      $103 = $init;
      $104 = (_strlen($103)|0);
      $105 = $init;
      $106 = (($105) + ($104)|0);
      $init = $106;
      $107 = $init;
      $108 = ((($107)) + 1|0);
      $init = $108;
      HEAP8[$107>>0] = 32;
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
   if ((label|0) == 21) {
    label = 0;
    $109 = $init;
    $110 = $i;
    $111 = $2;
    $112 = (($111) + ($110<<4)|0);
    $113 = ((($112)) + 12|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $i;
    $116 = (($115) + 1)|0;
    $117 = $2;
    $118 = (($117) + ($116<<4)|0);
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $i;
    $122 = $2;
    $123 = (($122) + ($121<<4)|0);
    $124 = ((($123)) + 12|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $120;
    $127 = $125;
    $128 = (($126) - ($127))|0;
    _memcpy(($109|0),($114|0),($128|0))|0;
    $129 = $i;
    $130 = (($129) + 1)|0;
    $131 = $2;
    $132 = (($131) + ($130<<4)|0);
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $i;
    $136 = $2;
    $137 = (($136) + ($135<<4)|0);
    $138 = ((($137)) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134;
    $141 = $139;
    $142 = (($140) - ($141))|0;
    $143 = $init;
    $144 = (($143) + ($142)|0);
    $init = $144;
   }
   $145 = $i;
   $146 = (($145) + 1)|0;
   $i = $146;
  }
  $147 = $init;
  HEAP8[$147>>0] = 0;
  $148 = $init;
  $149 = HEAP32[(612)>>2]|0;
  $150 = $148;
  $151 = $149;
  $152 = (($150) - ($151))|0;
  $153 = (68 + ($152))|0;
  $154 = (_LclAlloc($153)|0);
  $f = $154;
  $155 = $f;
  dest=$155; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $156 = $f;
  $157 = ((($156)) + 64|0);
  $158 = HEAP32[(612)>>2]|0;
  (_strcpy($157,$158)|0);
 } else {
  $159 = (_LclAlloc(68)|0);
  $f = $159;
  $160 = $f;
  dest=$160; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $161 = $f;
  $162 = ((($161)) + 64|0);
  HEAP8[$162>>0] = 0;
 }
 $163 = $len;
 $164 = $163&255;
 $165 = $f;
 $166 = ((($165)) + 44|0);
 HEAP8[$166>>0] = $164;
 $167 = $len;
 $168 = ($167|0)!=(0);
 if ($168) {
  $169 = $len;
  $170 = (($169) + 1)|0;
  $171 = (_LclAlloc($170)|0);
  $172 = $f;
  $173 = ((($172)) + 4|0);
  HEAP32[$173>>2] = $171;
  $174 = $f;
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $3;
  $178 = $len;
  _memcpy(($176|0),($177|0),($178|0))|0;
  $179 = $len;
  $180 = $f;
  $181 = ((($180)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($182) + ($179)|0);
  HEAP8[$183>>0] = 0;
 } else {
  $184 = $f;
  $185 = ((($184)) + 4|0);
  HEAP32[$185>>2] = 109841;
 }
 $186 = $f;
 $187 = ((($186)) + 16|0);
 HEAP32[$187>>2] = 6;
 $188 = HEAP32[(560)>>2]|0;
 $189 = $188 >>> 12;
 $190 = $189 & 1;
 $191 = $190&255;
 $192 = $f;
 $193 = ((($192)) + 24|0);
 $194 = $191&255;
 $195 = HEAP16[$193>>1]|0;
 $196 = $194 & 1;
 $197 = ($196 << 8)&65535;
 $198 = $195 & -257;
 $199 = $198 | $197;
 HEAP16[$193>>1] = $199;
 $200 = $f;
 $201 = ((($200)) + 24|0);
 $202 = HEAP16[$201>>1]|0;
 $203 = $202 & -3;
 $204 = $203 | 2;
 HEAP16[$201>>1] = $204;
 $205 = $4;
 $206 = $f;
 $207 = ((($206)) + 20|0);
 HEAP32[$207>>2] = $205;
 $208 = $5;
 $209 = $f;
 $210 = ((($209)) + 52|0);
 HEAP32[$210>>2] = $208;
 $211 = $f;
 $212 = ((($211)) + 60|0);
 HEAP32[$212>>2] = 0;
 $213 = $si;
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)==(0|0);
 $216 = $f;
 $217 = $si;
 $218 = ((($217)) + 4|0);
 if ($215) {
  HEAP32[$218>>2] = $216;
  $219 = $si;
  HEAP32[$219>>2] = $216;
 } else {
  $220 = HEAP32[$218>>2]|0;
  $221 = ((($220)) + 60|0);
  HEAP32[$221>>2] = $216;
  $222 = $f;
  $223 = $si;
  $224 = ((($223)) + 4|0);
  HEAP32[$224>>2] = $222;
 }
 $225 = $4;
 $226 = ($225|0)==(196);
 do {
  if ($226) {
   $227 = $5;
   $228 = ((($227)) + 40|0);
   $229 = ((($228)) + 2|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = ($231|0)==(1);
   if (!($232)) {
    $233 = $5;
    $234 = ((($233)) + 40|0);
    $235 = ((($234)) + 2|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237|0)==(2);
    if (!($238)) {
     break;
    }
   }
   $239 = $5;
   $240 = ((($239)) + 32|0);
   $241 = HEAP32[$240>>2]|0;
   $6 = $241;
  }
 } while(0);
 $242 = $si;
 $243 = ((($242)) + 8|0);
 $244 = HEAP8[$243>>0]|0;
 $245 = $244&255;
 $246 = ($245|0)>(1);
 if ($246) {
  $247 = $si;
  $248 = ((($247)) + 8|0);
  $249 = HEAP8[$248>>0]|0;
  $250 = $249&255;
  $251 = $6;
  $252 = ($250>>>0)<($251>>>0);
  if ($252) {
   $253 = $offset;
   $254 = $si;
   $255 = ((($254)) + 8|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = (($257) - 1)|0;
   $259 = (($253) + ($258))|0;
   $260 = $si;
   $261 = ((($260)) + 8|0);
   $262 = HEAP8[$261>>0]|0;
   $263 = $262&255;
   $264 = (0 - ($263))|0;
   $265 = $259 & $264;
   $offset = $265;
  } else {
   $266 = $6;
   $267 = ($266|0)!=(0);
   if ($267) {
    $268 = $offset;
    $269 = $6;
    $270 = (($269) - 1)|0;
    $271 = (($268) + ($270))|0;
    $272 = $6;
    $273 = (0 - ($272))|0;
    $274 = $271 & $273;
    $offset = $274;
   }
  }
  $275 = HEAP32[66812>>2]|0;
  $276 = ((($275)) + 40|0);
  $277 = ((($276)) + 2|0);
  $278 = HEAP8[$277>>0]|0;
  $279 = $278&255;
  $280 = ($279|0)!=(2);
  if ($280) {
   $281 = $offset;
   $282 = HEAP32[66812>>2]|0;
   $283 = ((($282)) + 8|0);
   HEAP32[$283>>2] = $281;
   $284 = $offset;
   $285 = HEAP32[66812>>2]|0;
   $286 = ((($285)) + 36|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($284>>>0)>($287>>>0);
   if ($288) {
    $289 = $offset;
    $290 = HEAP32[66812>>2]|0;
    $291 = ((($290)) + 36|0);
    HEAP32[$291>>2] = $289;
   }
  }
 }
 $292 = $6;
 $293 = HEAP32[66812>>2]|0;
 $294 = ((($293)) + 32|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = ($292>>>0)>($295>>>0);
 if ($296) {
  $297 = $6;
  $298 = HEAP32[66812>>2]|0;
  $299 = ((($298)) + 32|0);
  HEAP32[$299>>2] = $297;
 }
 $300 = $offset;
 $301 = $f;
 $302 = ((($301)) + 8|0);
 HEAP32[$302>>2] = $300;
 $303 = HEAP32[(560)>>2]|0;
 $304 = $303 >>> 8;
 $305 = $304 & 1;
 $306 = ($305|0)==(1);
 if ($306) {
  $307 = $3;
  $308 = HEAP8[$307>>0]|0;
  $309 = $308 << 24 >> 24;
  $310 = ($309|0)!=(0);
  if ($310) {
   $311 = $3;
   $312 = (_SymLookup($311)|0);
   $gsym = $312;
   $313 = $gsym;
   $314 = ((($313)) + 16|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = ($315|0)==(0);
   if ($316) {
    $317 = $gsym;
    $318 = ((($317)) + 16|0);
    HEAP32[$318>>2] = 6;
   }
   $319 = $gsym;
   $320 = ((($319)) + 16|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ($321|0)==(6);
   if ($322) {
    $323 = $4;
    $324 = $gsym;
    $325 = ((($324)) + 20|0);
    HEAP32[$325>>2] = $323;
    $326 = $5;
    $327 = $gsym;
    $328 = ((($327)) + 52|0);
    HEAP32[$328>>2] = $326;
    $329 = $offset;
    $330 = $gsym;
    $331 = ((($330)) + 8|0);
    HEAP32[$331>>2] = $329;
    $332 = HEAP32[66812>>2]|0;
    $333 = ((($332)) + 64|0);
    $334 = HEAP32[$333>>2]|0;
    $dir = $334;
    while(1) {
     $335 = $dir;
     $336 = ($335|0)!=(0|0);
     if (!($336)) {
      break;
     }
     $337 = $dir;
     $338 = ((($337)) + 8|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $gsym;
     $341 = ((($340)) + 8|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($342) + ($339))|0;
     HEAP32[$341>>2] = $343;
     $344 = $dir;
     $345 = ((($344)) + 64|0);
     $346 = HEAP32[$345>>2]|0;
     $dir = $346;
    }
    $347 = $gsym;
    $348 = ((($347)) + 24|0);
    $349 = HEAP16[$348>>1]|0;
    $350 = $349 & -3;
    $351 = $350 | 2;
    HEAP16[$348>>1] = $351;
   }
  }
 }
 $352 = $f;
 $0 = $352;
 $353 = $0;
 STACKTOP = sp;return ($353|0);
}
function _AlignInStruct($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = HEAP32[66812>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(2);
 if (!($6)) {
  STACKTOP = sp;return 0;
 }
 $7 = HEAP32[66812>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $offset = $9;
 $10 = $offset;
 $11 = $0;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12))|0;
 $14 = $0;
 $15 = (0 - ($14))|0;
 $16 = $13 & $15;
 $offset = $16;
 $17 = $offset;
 $18 = HEAP32[66812>>2]|0;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = $offset;
 $21 = HEAP32[66812>>2]|0;
 $22 = ((($21)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)>($23>>>0);
 if (!($24)) {
  STACKTOP = sp;return 0;
 }
 $25 = $offset;
 $26 = HEAP32[66812>>2]|0;
 $27 = ((($26)) + 36|0);
 HEAP32[$27>>2] = $25;
 STACKTOP = sp;return 0;
}
function _SetStructCurrentOffset($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $offset;
 $2 = HEAP32[66812>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = ((($3)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = (_EmitError(213)|0);
  $0 = $8;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $9 = $1;
 $10 = HEAP32[66812>>2]|0;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = HEAP32[66812>>2]|0;
 $13 = ((($12)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 9|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 & -5;
 $18 = $17 | 4;
 HEAP8[$15>>0] = $18;
 $19 = $1;
 $20 = HEAP32[66812>>2]|0;
 $21 = ((($20)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)>($22|0);
 if ($23) {
  $24 = $1;
  $25 = HEAP32[66812>>2]|0;
  $26 = ((($25)) + 36|0);
  HEAP32[$26>>2] = $24;
 }
 $0 = 0;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _GetQualifiedType($pi,$tokenarray,$pti) {
 $pi = $pi|0;
 $tokenarray = $tokenarray|0;
 $pti = $pti|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ofssize = 0, $distance = 0, $i = 0, $mem_type = 0, $or$cond = 0, $sym = 0, $tmp = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $pi;
 $2 = $tokenarray;
 $3 = $pti;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $i = $5;
 $distance = 0;
 $6 = $i;
 $tmp = $6;
 while(1) {
  $7 = $tmp;
  $8 = $2;
  $9 = (($8) + ($7<<4)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = $tmp;
  $14 = $2;
  $15 = (($14) + ($13<<4)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)!=(44);
  if (!($18)) {
   break;
  }
  $19 = $tmp;
  $20 = $2;
  $21 = (($20) + ($19<<4)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(3);
  if ($24) {
   $25 = $tmp;
   $26 = $2;
   $27 = (($26) + ($25<<4)|0);
   $28 = ((($27)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(351);
   if ($30) {
    $31 = $tmp;
    $32 = $2;
    $33 = (($32) + ($31<<4)|0);
    HEAP8[$33>>0] = 6;
    $34 = HEAP32[(512)>>2]|0;
    $35 = 1 << $34;
    $36 = 112 & $35;
    $37 = ($36|0)!=(0);
    $38 = $37 ? 148 : 147;
    $39 = $tmp;
    $40 = $2;
    $41 = (($40) + ($39<<4)|0);
    $42 = ((($41)) + 8|0);
    HEAP32[$42>>2] = $38;
   }
  }
  $43 = $tmp;
  $44 = (($43) + 1)|0;
  $tmp = $44;
 }
 $type = -1;
 L10: while(1) {
  $45 = $i;
  $46 = $2;
  $47 = (($46) + ($45<<4)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = ($49|0)==(6);
  if (!($50)) {
   $51 = $i;
   $52 = $2;
   $53 = (($52) + ($51<<4)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)==(5);
   if (!($56)) {
    break;
   }
  }
  $57 = $i;
  $58 = $2;
  $59 = (($58) + ($57<<4)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($61|0)==(6);
  $63 = $i;
  $64 = $2;
  $65 = (($64) + ($63<<4)|0);
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  do {
   if ($62) {
    $tmp = $67;
    $68 = $type;
    $69 = ($68|0)==(-1);
    if ($69) {
     $70 = $tmp;
     $type = $70;
    }
    $71 = $tmp;
    $72 = (15660 + (($71*12)|0)|0);
    $73 = ((($72)) + 10|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $mem_type = $75;
    $76 = $mem_type;
    $77 = ($76|0)==(130);
    $78 = $mem_type;
    $79 = ($78|0)==(129);
    $or$cond = $77 | $79;
    if (!($or$cond)) {
     label = 20;
     break L10;
    }
    $80 = $distance;
    $81 = ($80|0)==(0);
    if (!($81)) {
     $99 = $i;
     $100 = (($99) - 1)|0;
     $101 = $2;
     $102 = (($101) + ($100<<4)|0);
     $103 = ((($102)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)!=(184);
     if ($105) {
      break L10;
     } else {
      break;
     }
    }
    $82 = $tmp;
    $83 = (15660 + (($82*12)|0)|0);
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85&255;
    $Ofssize = $86;
    $87 = $mem_type;
    $88 = ($87|0)==(130);
    $89 = $88&1;
    $90 = $89&255;
    $91 = $3;
    $92 = ((($91)) + 13|0);
    HEAP8[$92>>0] = $90;
    $93 = $Ofssize;
    $94 = $93&255;
    $95 = ($94|0)!=(254);
    if ($95) {
     $96 = $Ofssize;
     $97 = $3;
     $98 = ((($97)) + 14|0);
     HEAP8[$98>>0] = $96;
    }
    $distance = 1;
   } else {
    $115 = ($67|0)==(184);
    if (!($115)) {
     break L10;
    }
    $type = -2;
    $116 = $3;
    $117 = ((($116)) + 12|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = (($118) + 1)<<24>>24;
    HEAP8[$117>>0] = $119;
   }
  } while(0);
  $120 = $i;
  $121 = (($120) + 1)|0;
  $i = $121;
 }
 if ((label|0) == 20) {
  $106 = $3;
  $107 = ((($106)) + 12|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = ($108<<24>>24)!=(0);
  if ($109) {
   $110 = $mem_type;
   $111 = $3;
   $112 = ((($111)) + 16|0);
   HEAP32[$112>>2] = $110;
  }
  $113 = $i;
  $114 = (($113) + 1)|0;
  $i = $114;
 }
 $122 = $type;
 $123 = ($122|0)==(-2);
 if ($123) {
  $124 = $i;
  $125 = $2;
  $126 = (($125) + ($124<<4)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = ($128|0)==(8);
  if ($129) {
   $130 = $i;
   $131 = (($130) - 1)|0;
   $132 = $2;
   $133 = (($132) + ($131<<4)|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)==(184);
   if ($136) {
    $137 = $i;
    $138 = $2;
    $139 = (($138) + ($137<<4)|0);
    $140 = ((($139)) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (_SymFind($141)|0);
    $143 = $3;
    $144 = ((($143)) + 4|0);
    HEAP32[$144>>2] = $142;
    $145 = $3;
    $146 = ((($145)) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ($147|0)==(0|0);
    do {
     if ($148) {
      label = 31;
     } else {
      $149 = $3;
      $150 = ((($149)) + 4|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ((($151)) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($153|0)==(0);
      if ($154) {
       label = 31;
      } else {
       $166 = $3;
       $167 = ((($166)) + 4|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ((($168)) + 16|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)!=(7);
       if ($171) {
        $172 = $i;
        $173 = $2;
        $174 = (($173) + ($172<<4)|0);
        $175 = ((($174)) + 4|0);
        $176 = HEAP32[$175>>2]|0;
        HEAP32[$vararg_buffer>>2] = $176;
        $177 = (_EmitErr(85,$vararg_buffer)|0);
        $0 = $177;
        $463 = $0;
        STACKTOP = sp;return ($463|0);
       }
       $178 = $3;
       $179 = ((($178)) + 4|0);
       $180 = HEAP32[$179>>2]|0;
       $sym = $180;
       $181 = $sym;
       $182 = ((($181)) + 40|0);
       $183 = ((($182)) + 2|0);
       $184 = HEAP8[$183>>0]|0;
       $185 = $184&255;
       $186 = ($185|0)==(3);
       if ($186) {
        $187 = $sym;
        $188 = ((($187)) + 28|0);
        $189 = ((($188)) + 1|0);
        $190 = HEAP8[$189>>0]|0;
        $191 = $190&255;
        $192 = $3;
        $193 = ((($192)) + 12|0);
        $194 = HEAP8[$193>>0]|0;
        $195 = $194&255;
        $196 = (($195) + ($191))|0;
        $197 = $196&255;
        HEAP8[$193>>0] = $197;
        $198 = $sym;
        $199 = ((($198)) + 28|0);
        $200 = ((($199)) + 1|0);
        $201 = HEAP8[$200>>0]|0;
        $202 = $201&255;
        $203 = ($202|0)==(0);
        $204 = $sym;
        if ($203) {
         $205 = ((($204)) + 20|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = ($206|0)!=(196);
         if ($207) {
          $208 = $sym;
          $209 = ((($208)) + 20|0);
          $210 = HEAP32[$209>>2]|0;
          $213 = $210;
         } else {
          $213 = 192;
         }
         $211 = $3;
         $212 = ((($211)) + 16|0);
         HEAP32[$212>>2] = $213;
         $214 = $distance;
         $215 = ($214|0)==(0);
         do {
          if ($215) {
           $216 = $3;
           $217 = ((($216)) + 12|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = $218&255;
           $220 = ($219|0)==(1);
           if ($220) {
            $221 = $sym;
            $222 = ((($221)) + 20|0);
            $223 = HEAP32[$222>>2]|0;
            $224 = ($223|0)==(129);
            if (!($224)) {
             $225 = $sym;
             $226 = ((($225)) + 20|0);
             $227 = HEAP32[$226>>2]|0;
             $228 = ($227|0)==(128);
             if (!($228)) {
              $229 = $sym;
              $230 = ((($229)) + 20|0);
              $231 = HEAP32[$230>>2]|0;
              $232 = ($231|0)==(130);
              if (!($232)) {
               break;
              }
             }
            }
            $233 = $sym;
            $234 = ((($233)) + 28|0);
            $235 = ((($234)) + 3|0);
            $236 = HEAP8[$235>>0]|0;
            $237 = ($236&255) >>> 4;
            $238 = $237 & 1;
            $239 = $3;
            $240 = ((($239)) + 13|0);
            HEAP8[$240>>0] = $238;
           }
          }
         } while(0);
         $241 = $sym;
         $242 = ((($241)) + 28|0);
         $243 = HEAP8[$242>>0]|0;
         $244 = $243&255;
         $245 = ($244|0)!=(254);
         if ($245) {
          $246 = $sym;
          $247 = ((($246)) + 28|0);
          $248 = HEAP8[$247>>0]|0;
          $249 = $3;
          $250 = ((($249)) + 14|0);
          HEAP8[$250>>0] = $248;
         }
        } else {
         $251 = ((($204)) + 28|0);
         $252 = ((($251)) + 2|0);
         $253 = HEAP8[$252>>0]|0;
         $254 = $253&255;
         $255 = $3;
         $256 = ((($255)) + 16|0);
         HEAP32[$256>>2] = $254;
         $257 = $distance;
         $258 = ($257|0)==(0);
         if ($258) {
          $259 = $3;
          $260 = ((($259)) + 12|0);
          $261 = HEAP8[$260>>0]|0;
          $262 = $261&255;
          $263 = ($262|0)==(1);
          if ($263) {
           $264 = $sym;
           $265 = ((($264)) + 28|0);
           $266 = ((($265)) + 3|0);
           $267 = HEAP8[$266>>0]|0;
           $268 = ($267&255) >>> 4;
           $269 = $268 & 1;
           $270 = $3;
           $271 = ((($270)) + 13|0);
           HEAP8[$271>>0] = $269;
           $272 = $sym;
           $273 = ((($272)) + 28|0);
           $274 = HEAP8[$273>>0]|0;
           $275 = $274&255;
           $276 = ($275|0)!=(254);
           if ($276) {
            $277 = $sym;
            $278 = ((($277)) + 28|0);
            $279 = HEAP8[$278>>0]|0;
            $280 = $3;
            $281 = ((($280)) + 14|0);
            HEAP8[$281>>0] = $279;
           }
          }
         }
        }
        $282 = $sym;
        $283 = ((($282)) + 20|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = ($284|0)==(196);
        $286 = $sym;
        if ($285) {
         $287 = ((($286)) + 52|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = $3;
         $290 = ((($289)) + 4|0);
         HEAP32[$290>>2] = $288;
         break;
        } else {
         $291 = ((($286)) + 32|0);
         $292 = HEAP32[$291>>2]|0;
         $293 = $3;
         $294 = ((($293)) + 4|0);
         HEAP32[$294>>2] = $292;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 31) {
     $155 = $3;
     $156 = ((($155)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $i;
     $159 = $2;
     $160 = (($159) + ($158<<4)|0);
     $161 = ((($160)) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (_CreateTypeSymbol($157,$162,1)|0);
     $164 = $3;
     $165 = ((($164)) + 4|0);
     HEAP32[$165>>2] = $163;
    }
    $295 = $i;
    $296 = (($295) + 1)|0;
    $i = $296;
   }
  }
 }
 $297 = $type;
 $298 = ($297|0)==(-1);
 do {
  if ($298) {
   $299 = $i;
   $300 = $2;
   $301 = (($300) + ($299<<4)|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $304 = ($303|0)!=(8);
   $305 = $i;
   $306 = $2;
   $307 = (($306) + ($305<<4)|0);
   if ($304) {
    $308 = HEAP8[$307>>0]|0;
    $309 = $308&255;
    $310 = ($309|0)==(0);
    if ($310) {
     label = 58;
    } else {
     $311 = $i;
     $312 = $2;
     $313 = (($312) + ($311<<4)|0);
     $314 = HEAP8[$313>>0]|0;
     $315 = $314&255;
     $316 = ($315|0)==(44);
     if ($316) {
      label = 58;
     } else {
      $317 = $i;
      $318 = $2;
      $319 = (($318) + ($317<<4)|0);
      $320 = ((($319)) + 4|0);
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$vararg_buffer3>>2] = $321;
      (_EmitErr(209,$vararg_buffer3)|0);
      $322 = $i;
      $323 = (($322) + 1)|0;
      $i = $323;
     }
    }
    if ((label|0) == 58) {
     (_EmitError(86)|0);
    }
    $0 = -1;
    $463 = $0;
    STACKTOP = sp;return ($463|0);
   }
   $324 = ((($307)) + 4|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (_SymFind($325)|0);
   $327 = $3;
   $328 = ((($327)) + 4|0);
   HEAP32[$328>>2] = $326;
   $329 = $3;
   $330 = ((($329)) + 4|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = ($331|0)==(0|0);
   if (!($332)) {
    $333 = $3;
    $334 = ((($333)) + 4|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ((($335)) + 16|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337|0)!=(7);
    if (!($338)) {
     $359 = $3;
     $360 = ((($359)) + 4|0);
     $361 = HEAP32[$360>>2]|0;
     $sym = $361;
     $362 = $sym;
     $363 = ((($362)) + 40|0);
     $364 = ((($363)) + 2|0);
     $365 = HEAP8[$364>>0]|0;
     $366 = $365&255;
     $367 = ($366|0)==(3);
     do {
      if ($367) {
       $368 = $sym;
       $369 = ((($368)) + 20|0);
       $370 = HEAP32[$369>>2]|0;
       $371 = $3;
       $372 = ((($371)) + 8|0);
       HEAP32[$372>>2] = $370;
       $373 = $sym;
       $374 = ((($373)) + 28|0);
       $375 = ((($374)) + 3|0);
       $376 = HEAP8[$375>>0]|0;
       $377 = ($376&255) >>> 4;
       $378 = $377 & 1;
       $379 = $3;
       $380 = ((($379)) + 13|0);
       HEAP8[$380>>0] = $378;
       $381 = $sym;
       $382 = ((($381)) + 28|0);
       $383 = ((($382)) + 1|0);
       $384 = HEAP8[$383>>0]|0;
       $385 = $3;
       $386 = ((($385)) + 12|0);
       HEAP8[$386>>0] = $384;
       $387 = $sym;
       $388 = ((($387)) + 28|0);
       $389 = HEAP8[$388>>0]|0;
       $390 = $3;
       $391 = ((($390)) + 14|0);
       HEAP8[$391>>0] = $389;
       $392 = $sym;
       $393 = ((($392)) + 36|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = $3;
       HEAP32[$395>>2] = $394;
       $396 = $sym;
       $397 = ((($396)) + 28|0);
       $398 = ((($397)) + 2|0);
       $399 = HEAP8[$398>>0]|0;
       $400 = $399&255;
       $401 = $3;
       $402 = ((($401)) + 16|0);
       HEAP32[$402>>2] = $400;
       $403 = $sym;
       $404 = ((($403)) + 20|0);
       $405 = HEAP32[$404>>2]|0;
       $406 = ($405|0)==(196);
       $407 = $sym;
       if ($406) {
        $408 = ((($407)) + 52|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = $3;
        $411 = ((($410)) + 4|0);
        HEAP32[$411>>2] = $409;
        break;
       } else {
        $412 = ((($407)) + 32|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = $3;
        $415 = ((($414)) + 4|0);
        HEAP32[$415>>2] = $413;
        break;
       }
      } else {
       $416 = $3;
       $417 = ((($416)) + 8|0);
       HEAP32[$417>>2] = 196;
       $418 = $sym;
       $419 = ((($418)) + 36|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = $3;
       HEAP32[$421>>2] = $420;
      }
     } while(0);
     $422 = $i;
     $423 = (($422) + 1)|0;
     $i = $423;
     break;
    }
   }
   $339 = $3;
   $340 = ((($339)) + 4|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ($341|0)==(0|0);
   if ($342) {
    label = 65;
   } else {
    $343 = $3;
    $344 = ((($343)) + 4|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = ((($345)) + 16|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($347|0)==(0);
    if ($348) {
     label = 65;
    } else {
     $354 = $i;
     $355 = $2;
     $356 = (($355) + ($354<<4)|0);
     $357 = ((($356)) + 4|0);
     $358 = HEAP32[$357>>2]|0;
     HEAP32[$vararg_buffer9>>2] = $358;
     (_EmitErr(85,$vararg_buffer9)|0);
    }
   }
   if ((label|0) == 65) {
    $349 = $i;
    $350 = $2;
    $351 = (($350) + ($349<<4)|0);
    $352 = ((($351)) + 4|0);
    $353 = HEAP32[$352>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $353;
    (_EmitErr(102,$vararg_buffer6)|0);
   }
   $0 = -1;
   $463 = $0;
   STACKTOP = sp;return ($463|0);
  } else {
   $424 = $3;
   $425 = ((($424)) + 12|0);
   $426 = HEAP8[$425>>0]|0;
   $427 = ($426<<24>>24)!=(0);
   if ($427) {
    $428 = $3;
    $429 = ((($428)) + 8|0);
    HEAP32[$429>>2] = 195;
   } else {
    $430 = $type;
    $431 = (15660 + (($430*12)|0)|0);
    $432 = ((($431)) + 10|0);
    $433 = HEAP8[$432>>0]|0;
    $434 = $433&255;
    $435 = $3;
    $436 = ((($435)) + 8|0);
    HEAP32[$436>>2] = $434;
   }
   $437 = $3;
   $438 = ((($437)) + 8|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = ($439|0)==(195);
   $441 = $3;
   if ($440) {
    $442 = ((($441)) + 13|0);
    $443 = HEAP8[$442>>0]|0;
    $444 = $443&255;
    $445 = ($444|0)!=(0);
    $446 = $445 ? 130 : 129;
    $447 = $3;
    $448 = ((($447)) + 14|0);
    $449 = HEAP8[$448>>0]|0;
    $450 = $449&255;
    $451 = (_SizeFromMemtype($446,$450,0)|0);
    $452 = $3;
    HEAP32[$452>>2] = $451;
    break;
   } else {
    $453 = ((($441)) + 8|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = $3;
    $456 = ((($455)) + 14|0);
    $457 = HEAP8[$456>>0]|0;
    $458 = $457&255;
    $459 = (_SizeFromMemtype($454,$458,0)|0);
    $460 = $3;
    HEAP32[$460>>2] = $459;
    break;
   }
  }
 } while(0);
 $461 = $i;
 $462 = $1;
 HEAP32[$462>>2] = $461;
 $0 = 0;
 $463 = $0;
 STACKTOP = sp;return ($463|0);
}
function _TypedefDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $$sink = 0, $$sink2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $name = 0, $on = 0, $oo = 0, $proto = 0, $sym = 0, $ti = 0, $tn = 0, $to = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 80|0;
 $ti = sp + 48|0;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(1);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $name = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$1>>2] = $15;
 $16 = $name;
 $17 = (_SymFind($16)|0);
 $sym = $17;
 $18 = $sym;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 5;
  } else {
   $20 = $sym;
   $21 = ((($20)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    label = 5;
   } else {
    $29 = $sym;
    $30 = ((($29)) + 16|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(7);
    if (!($32)) {
     $33 = $sym;
     $34 = ((($33)) + 40|0);
     $35 = ((($34)) + 2|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)!=(3);
     if (!($38)) {
      break;
     }
     $39 = $sym;
     $40 = ((($39)) + 40|0);
     $41 = ((($40)) + 2|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = ($43|0)!=(0);
     if (!($44)) {
      break;
     }
    }
    $45 = $sym;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $47;
    $48 = (_EmitErr(143,$vararg_buffer3)|0);
    $0 = $48;
    $303 = $0;
    STACKTOP = sp;return ($303|0);
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $24 = $sym;
  $25 = $name;
  $26 = (_CreateTypeSymbol($24,$25,1)|0);
  $sym = $26;
  $27 = $sym;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $0 = -1;
   $303 = $0;
   STACKTOP = sp;return ($303|0);
  }
 }
 $49 = $sym;
 $50 = ((($49)) + 24|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 & -3;
 $53 = $52 | 2;
 HEAP16[$50>>1] = $53;
 $54 = HEAP32[4884>>2]|0;
 $55 = ($54>>>0)>(0);
 if ($55) {
  $0 = 0;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $56 = $sym;
 $57 = ((($56)) + 40|0);
 $58 = ((($57)) + 2|0);
 HEAP8[$58>>0] = 3;
 $59 = HEAP32[$1>>2]|0;
 $60 = $2;
 $61 = (($60) + ($59<<4)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)==(3);
 if ($64) {
  $65 = HEAP32[$1>>2]|0;
  $66 = $2;
  $67 = (($66) + ($65<<4)|0);
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)==(350);
  if ($70) {
   $71 = $sym;
   $72 = ((($71)) + 32|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0|0);
   if ($74) {
    $75 = $sym;
    $76 = ((($75)) + 20|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(192);
    if ($78) {
     $79 = (_CreateProc(0,109841,7)|0);
     $proto = $79;
    } else {
     label = 18;
    }
   } else {
    label = 18;
   }
   do {
    if ((label|0) == 18) {
     $80 = $sym;
     $81 = ((($80)) + 20|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==(128);
     $84 = $sym;
     if ($83) {
      $85 = ((($84)) + 32|0);
      $86 = HEAP32[$85>>2]|0;
      $proto = $86;
      break;
     }
     $87 = ((($84)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $88;
     $89 = (_EmitErr(136,$vararg_buffer6)|0);
     $0 = $89;
     $303 = $0;
     STACKTOP = sp;return ($303|0);
    }
   } while(0);
   $90 = HEAP32[$1>>2]|0;
   $91 = (($90) + 1)|0;
   HEAP32[$1>>2] = $91;
   $92 = $proto;
   $93 = HEAP32[$1>>2]|0;
   $94 = $2;
   $95 = HEAP32[(516)>>2]|0;
   $96 = (_ParseProc($92,$93,$94,0,$95)|0);
   $97 = ($96|0)==(-1);
   if ($97) {
    $0 = -1;
    $303 = $0;
    STACKTOP = sp;return ($303|0);
   }
   $98 = $sym;
   $99 = ((($98)) + 20|0);
   HEAP32[$99>>2] = 128;
   $100 = $proto;
   $101 = ((($100)) + 28|0);
   $102 = ((($101)) + 3|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103 & 3;
   $105 = $sym;
   $106 = ((($105)) + 28|0);
   HEAP8[$106>>0] = $104;
   $107 = $sym;
   $108 = ((($107)) + 28|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = 2 << $110;
   $112 = $sym;
   $113 = ((($112)) + 36|0);
   HEAP32[$113>>2] = $111;
   $114 = $proto;
   $115 = ((($114)) + 20|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)!=(129);
   if ($117) {
    $118 = $sym;
    $119 = ((($118)) + 28|0);
    $120 = ((($119)) + 3|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 & -17;
    $123 = $122 | 16;
    HEAP8[$120>>0] = $123;
    $124 = $sym;
    $125 = ((($124)) + 36|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (($126) + 2)|0;
    HEAP32[$125>>2] = $127;
   }
   $128 = $proto;
   $129 = $sym;
   $130 = ((($129)) + 32|0);
   HEAP32[$130>>2] = $128;
   $0 = 0;
   $303 = $0;
   STACKTOP = sp;return ($303|0);
  }
 }
 HEAP32[$ti>>2] = 0;
 $131 = ((($ti)) + 12|0);
 HEAP8[$131>>0] = 0;
 $132 = ((($ti)) + 13|0);
 HEAP8[$132>>0] = 0;
 $133 = ((($ti)) + 8|0);
 HEAP32[$133>>2] = 192;
 $134 = ((($ti)) + 16|0);
 HEAP32[$134>>2] = 192;
 $135 = ((($ti)) + 4|0);
 HEAP32[$135>>2] = 0;
 $136 = HEAP8[(556)>>0]|0;
 $137 = ((($ti)) + 14|0);
 HEAP8[$137>>0] = $136;
 $138 = HEAP32[$1>>2]|0;
 $139 = $2;
 $140 = (($139) + ($138<<4)|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&255;
 $143 = ($142|0)==(0);
 if (!($143)) {
  $144 = HEAP32[$1>>2]|0;
  $145 = $2;
  $146 = (($145) + ($144<<4)|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = ($148|0)==(44);
  if (!($149)) {
   $150 = $2;
   $151 = (_GetQualifiedType($1,$150,$ti)|0);
   $152 = ($151|0)==(-1);
   if ($152) {
    $0 = -1;
    $303 = $0;
    STACKTOP = sp;return ($303|0);
   }
  }
 }
 $153 = $sym;
 $154 = ((($153)) + 20|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(192);
 L50: do {
  if ($156) {
   $157 = ((($ti)) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $tn = $158;
   while(1) {
    $159 = $tn;
    $160 = ($159|0)!=(0|0);
    if (!($160)) {
     break;
    }
    $161 = $tn;
    $162 = ((($161)) + 52|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)!=(0|0);
    if (!($164)) {
     break;
    }
    $165 = $tn;
    $166 = ((($165)) + 52|0);
    $167 = HEAP32[$166>>2]|0;
    $tn = $167;
   }
   $168 = $sym;
   $169 = ((($168)) + 20|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ($170|0)==(196);
   $172 = $sym;
   if ($171) {
    $173 = ((($172)) + 52|0);
    $174 = HEAP32[$173>>2]|0;
    $177 = $174;
   } else {
    $175 = ((($172)) + 32|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $176;
   }
   $to = $177;
   while(1) {
    $178 = $to;
    $179 = ($178|0)!=(0|0);
    if (!($179)) {
     break;
    }
    $180 = $to;
    $181 = ((($180)) + 52|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ($182|0)!=(0|0);
    if (!($183)) {
     break;
    }
    $184 = $to;
    $185 = ((($184)) + 52|0);
    $186 = HEAP32[$185>>2]|0;
    $to = $186;
   }
   $187 = $sym;
   $188 = ((($187)) + 28|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = ($190|0)!=(254);
   if ($191) {
    $192 = $sym;
    $193 = ((($192)) + 28|0);
    $194 = HEAP8[$193>>0]|0;
    $$sink = $194;
   } else {
    $195 = HEAP8[(556)>>0]|0;
    $$sink = $195;
   }
   $196 = $$sink&255;
   $197 = $196&255;
   $oo = $197;
   $198 = ((($ti)) + 14|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = ($200|0)!=(254);
   $202 = ((($ti)) + 14|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = HEAP8[(556)>>0]|0;
   $$sink2 = $201 ? $203 : $204;
   $205 = $$sink2&255;
   $206 = $205&255;
   $on = $206;
   $207 = ((($ti)) + 8|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $sym;
   $210 = ((($209)) + 20|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($208|0)!=($211|0);
   do {
    if (!($212)) {
     $213 = ((($ti)) + 8|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(196);
     if ($215) {
      $216 = $tn;
      $217 = $to;
      $218 = ($216|0)!=($217|0);
      if ($218) {
       break;
      }
     }
     $219 = ((($ti)) + 8|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(195);
     if (!($221)) {
      break L50;
     }
     $222 = ((($ti)) + 13|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = $sym;
     $226 = ((($225)) + 28|0);
     $227 = ((($226)) + 3|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = ($228&255) >>> 4;
     $230 = $229 & 1;
     $231 = $230&255;
     $232 = ($224|0)!=($231|0);
     if (!($232)) {
      $233 = $on;
      $234 = $233 << 24 >> 24;
      $235 = $oo;
      $236 = $235 << 24 >> 24;
      $237 = ($234|0)!=($236|0);
      if (!($237)) {
       $238 = ((($ti)) + 16|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = $sym;
       $241 = ((($240)) + 28|0);
       $242 = ((($241)) + 2|0);
       $243 = HEAP8[$242>>0]|0;
       $244 = $243&255;
       $245 = ($239|0)!=($244|0);
       if (!($245)) {
        $246 = $tn;
        $247 = $to;
        $248 = ($246|0)!=($247|0);
        if (!($248)) {
         break L50;
        }
       }
      }
     }
    }
   } while(0);
   $249 = $name;
   HEAP32[$vararg_buffer9>>2] = $249;
   $250 = (_EmitErr(136,$vararg_buffer9)|0);
   $0 = $250;
   $303 = $0;
   STACKTOP = sp;return ($303|0);
  }
 } while(0);
 $251 = ((($ti)) + 8|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = $sym;
 $254 = ((($253)) + 20|0);
 HEAP32[$254>>2] = $252;
 $255 = ((($ti)) + 14|0);
 $256 = HEAP8[$255>>0]|0;
 $257 = $sym;
 $258 = ((($257)) + 28|0);
 HEAP8[$258>>0] = $256;
 $259 = HEAP32[$ti>>2]|0;
 $260 = $sym;
 $261 = ((($260)) + 36|0);
 HEAP32[$261>>2] = $259;
 $262 = ((($ti)) + 12|0);
 $263 = HEAP8[$262>>0]|0;
 $264 = $sym;
 $265 = ((($264)) + 28|0);
 $266 = ((($265)) + 1|0);
 HEAP8[$266>>0] = $263;
 $267 = ((($ti)) + 13|0);
 $268 = HEAP8[$267>>0]|0;
 $269 = $sym;
 $270 = ((($269)) + 28|0);
 $271 = ((($270)) + 3|0);
 $272 = HEAP8[$271>>0]|0;
 $273 = $268 & 1;
 $274 = ($273 << 4)&255;
 $275 = $272 & -17;
 $276 = $275 | $274;
 HEAP8[$271>>0] = $276;
 $277 = ((($ti)) + 8|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = ($278|0)==(196);
 $280 = ((($ti)) + 4|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = $sym;
 if ($279) {
  $283 = ((($282)) + 52|0);
  HEAP32[$283>>2] = $281;
 } else {
  $284 = ((($282)) + 32|0);
  HEAP32[$284>>2] = $281;
 }
 $285 = ((($ti)) + 16|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = $286&255;
 $288 = $sym;
 $289 = ((($288)) + 28|0);
 $290 = ((($289)) + 2|0);
 HEAP8[$290>>0] = $287;
 $291 = HEAP32[$1>>2]|0;
 $292 = $2;
 $293 = (($292) + ($291<<4)|0);
 $294 = HEAP8[$293>>0]|0;
 $295 = $294&255;
 $296 = ($295|0)!=(0);
 if ($296) {
  $297 = HEAP32[$1>>2]|0;
  $298 = $2;
  $299 = (($298) + ($297<<4)|0);
  $300 = ((($299)) + 4|0);
  $301 = HEAP32[$300>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $301;
  $302 = (_EmitErr(209,$vararg_buffer12)|0);
  $0 = $302;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 } else {
  $0 = 0;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 return (0)|0;
}
function _RecordDirective($i,$tokenarray) {
 $i = $i|0;
 $tokenarray = $tokenarray|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cntBits = 0, $count = 0, $define = 0, $f = 0, $init_loc = 0, $len = 0, $name = 0, $name_loc = 0, $newr = 0, $oldr = 0, $opndx = 0, $redef_err = 0;
 var $sym = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr19 = 0, $vararg_ptr29 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 144|0;
 $vararg_buffer23 = sp + 136|0;
 $vararg_buffer20 = sp + 128|0;
 $vararg_buffer16 = sp + 120|0;
 $vararg_buffer13 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer4 = sp + 88|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 72|0;
 $1 = sp + 204|0;
 $opndx = sp;
 HEAP32[$1>>2] = $i;
 $2 = $tokenarray;
 $oldr = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(1);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = $2;
  $7 = (($6) + ($5<<4)|0);
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $10 = (_EmitErr(209,$vararg_buffer)|0);
  $0 = $10;
  $367 = $0;
  STACKTOP = sp;return ($367|0);
 }
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $name = $13;
 $14 = $name;
 $15 = (_SymFind($14)|0);
 $sym = $15;
 $16 = $sym;
 $17 = ($16|0)==(0|0);
 L5: do {
  if ($17) {
   label = 5;
  } else {
   $18 = $sym;
   $19 = ((($18)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0);
   if ($21) {
    label = 5;
   } else {
    $25 = $sym;
    $26 = ((($25)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(7);
    do {
     if ($28) {
      $29 = $sym;
      $30 = ((($29)) + 40|0);
      $31 = ((($30)) + 2|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&255;
      $34 = ($33|0)==(4);
      if (!($34)) {
       $35 = $sym;
       $36 = ((($35)) + 40|0);
       $37 = ((($36)) + 2|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = $38&255;
       $40 = ($39|0)==(0);
       if (!($40)) {
        break;
       }
      }
      $41 = HEAP32[4884>>2]|0;
      $42 = ($41|0)==(0);
      if (!($42)) {
       break L5;
      }
      $43 = $sym;
      $44 = ((($43)) + 40|0);
      $45 = ((($44)) + 2|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46&255;
      $48 = ($47|0)==(4);
      if (!($48)) {
       break L5;
      }
      $49 = $sym;
      $oldr = $49;
      $50 = $name;
      $51 = (_CreateTypeSymbol(0,$50,0)|0);
      $sym = $51;
      $redef_err = 0;
      break L5;
     }
    } while(0);
    $52 = $name;
    HEAP32[$vararg_buffer1>>2] = $52;
    $53 = (_EmitErr(143,$vararg_buffer1)|0);
    $0 = $53;
    $367 = $0;
    STACKTOP = sp;return ($367|0);
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $22 = $sym;
  $23 = $name;
  $24 = (_CreateTypeSymbol($22,$23,1)|0);
  $sym = $24;
 }
 $54 = $sym;
 $55 = ((($54)) + 24|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56 & -3;
 $58 = $57 | 2;
 HEAP16[$55>>1] = $58;
 $59 = HEAP32[4884>>2]|0;
 $60 = ($59>>>0)>(0);
 if ($60) {
  $0 = 0;
  $367 = $0;
  STACKTOP = sp;return ($367|0);
 }
 $61 = $sym;
 $newr = $61;
 $62 = $newr;
 $63 = ((($62)) + 40|0);
 $64 = ((($63)) + 2|0);
 HEAP8[$64>>0] = 4;
 $65 = HEAP32[$1>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$1>>2] = $66;
 $cntBits = 0;
 L24: while(1) {
  $67 = HEAP32[$1>>2]|0;
  $68 = $2;
  $69 = (($68) + ($67<<4)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)!=(8);
  $73 = HEAP32[$1>>2]|0;
  $74 = $2;
  $75 = (($74) + ($73<<4)|0);
  $76 = ((($75)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  if ($72) {
   label = 17;
   break;
  }
  $78 = (_strlen($77)|0);
  $len = $78;
  $79 = $len;
  $80 = ($79|0)>(247);
  if ($80) {
   label = 19;
   break;
  }
  $81 = HEAP32[$1>>2]|0;
  $name_loc = $81;
  $82 = HEAP32[$1>>2]|0;
  $83 = (($82) + 1)|0;
  HEAP32[$1>>2] = $83;
  $84 = HEAP32[$1>>2]|0;
  $85 = $2;
  $86 = (($85) + ($84<<4)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = ($88|0)!=(58);
  if ($89) {
   label = 21;
   break;
  }
  $90 = HEAP32[$1>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$1>>2] = $91;
  $92 = $2;
  $93 = HEAP32[(616)>>2]|0;
  $94 = (_EvalOperand($1,$92,$93,$opndx,0)|0);
  $95 = ($94|0)==(-1);
  if ($95) {
   break;
  }
  $96 = ((($opndx)) + 40|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0);
  if ($98) {
   (_EmitError(65)|0);
   HEAP32[$opndx>>2] = 1;
  }
  $99 = HEAP32[$opndx>>2]|0;
  $100 = ($99|0)==(0);
  if ($100) {
   label = 26;
   break;
  }
  $106 = HEAP32[$opndx>>2]|0;
  $107 = $cntBits;
  $108 = (($106) + ($107))|0;
  $109 = HEAP8[(556)>>0]|0;
  $110 = $109&255;
  $111 = ($110|0)==(2);
  $112 = $111 ? 64 : 32;
  $113 = ($108|0)>($112|0);
  if ($113) {
   label = 28;
   break;
  }
  $count = 0;
  $119 = HEAP32[$1>>2]|0;
  $120 = $2;
  $121 = (($120) + ($119<<4)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = ($123|0)==(3);
  if ($124) {
   $125 = HEAP32[$1>>2]|0;
   $126 = $2;
   $127 = (($126) + ($125<<4)|0);
   $128 = ((($127)) + 1|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = ($130|0)==(48);
   if ($131) {
    $132 = HEAP32[$1>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[$1>>2] = $133;
    $134 = HEAP32[$1>>2]|0;
    $init_loc = $134;
    while(1) {
     $135 = HEAP32[$1>>2]|0;
     $136 = $2;
     $137 = (($136) + ($135<<4)|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = ($139|0)!=(0);
     if (!($140)) {
      break;
     }
     $141 = HEAP32[$1>>2]|0;
     $142 = $2;
     $143 = (($142) + ($141<<4)|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = ($145|0)!=(44);
     if (!($146)) {
      break;
     }
     $147 = HEAP32[$1>>2]|0;
     $148 = (($147) + 1)|0;
     HEAP32[$1>>2] = $148;
    }
    $149 = $init_loc;
    $150 = HEAP32[$1>>2]|0;
    $151 = ($149|0)==($150|0);
    if ($151) {
     label = 36;
     break;
    }
    $157 = $oldr;
    $158 = ($157|0)==(0|0);
    if ($158) {
     $159 = HEAP32[$1>>2]|0;
     $160 = $2;
     $161 = (($160) + ($159<<4)|0);
     $162 = ((($161)) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $init_loc;
     $165 = $2;
     $166 = (($165) + ($164<<4)|0);
     $167 = ((($166)) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $163;
     $170 = $168;
     $171 = (($169) - ($170))|0;
     $count = $171;
    }
   }
  }
  $172 = $name_loc;
  $173 = $2;
  $174 = (($173) + ($172<<4)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (_SymFind($176)|0);
  $sym = $177;
  $define = 1;
  $178 = $oldr;
  $179 = ($178|0)!=(0|0);
  $180 = $sym;
  do {
   if ($179) {
    $181 = ($180|0)==(0|0);
    if (!($181)) {
     $182 = $sym;
     $183 = ((($182)) + 16|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)!=(6);
     if (!($185)) {
      $186 = $sym;
      $187 = ((($186)) + 20|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($188|0)!=(193);
      if (!($189)) {
       $190 = $sym;
       $191 = ((($190)) + 36|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = HEAP32[$opndx>>2]|0;
       $194 = ($192|0)!=($193|0);
       if (!($194)) {
        break;
       }
      }
     }
    }
    $195 = $name_loc;
    $196 = $2;
    $197 = (($196) + ($195<<4)|0);
    $198 = ((($197)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    HEAP32[$vararg_buffer16>>2] = 109870;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $199;
    (_EmitErr(139,$vararg_buffer16)|0);
    $200 = $redef_err;
    $201 = (($200) + 1)|0;
    $redef_err = $201;
    $define = 0;
   } else {
    $202 = ($180|0)!=(0|0);
    if ($202) {
     label = 46;
     break L24;
    }
   }
  } while(0);
  $206 = $define;
  $207 = ($206|0)!=(0);
  if ($207) {
   $208 = HEAP32[$opndx>>2]|0;
   $209 = $cntBits;
   $210 = (($209) + ($208))|0;
   $cntBits = $210;
   $211 = $count;
   $212 = (68 + ($211))|0;
   $213 = (_LclAlloc($212)|0);
   $f = $213;
   $214 = $f;
   dest=$214; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $215 = $len;
   $216 = $215&255;
   $217 = $f;
   $218 = ((($217)) + 44|0);
   HEAP8[$218>>0] = $216;
   $219 = $len;
   $220 = (($219) + 1)|0;
   $221 = (_LclAlloc($220)|0);
   $222 = $f;
   $223 = ((($222)) + 4|0);
   HEAP32[$223>>2] = $221;
   $224 = $f;
   $225 = ((($224)) + 4|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $name_loc;
   $228 = $2;
   $229 = (($228) + ($227<<4)|0);
   $230 = ((($229)) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = $len;
   $233 = (($232) + 1)|0;
   _memcpy(($226|0),($231|0),($233|0))|0;
   $234 = HEAP32[(560)>>2]|0;
   $235 = $234 >>> 12;
   $236 = $235 & 1;
   $237 = $236&255;
   $238 = $f;
   $239 = ((($238)) + 24|0);
   $240 = $237&255;
   $241 = HEAP16[$239>>1]|0;
   $242 = $240 & 1;
   $243 = ($242 << 8)&65535;
   $244 = $241 & -257;
   $245 = $244 | $243;
   HEAP16[$239>>1] = $245;
   $246 = $f;
   $247 = ((($246)) + 16|0);
   HEAP32[$247>>2] = 6;
   $248 = $f;
   $249 = ((($248)) + 20|0);
   HEAP32[$249>>2] = 193;
   $250 = HEAP32[$opndx>>2]|0;
   $251 = $f;
   $252 = ((($251)) + 36|0);
   HEAP32[$252>>2] = $250;
   $253 = $oldr;
   $254 = ($253|0)!=(0|0);
   if (!($254)) {
    $255 = $f;
    (_SymAddGlobal($255)|0);
   }
   $256 = $f;
   $257 = ((($256)) + 60|0);
   HEAP32[$257>>2] = 0;
   $258 = $f;
   $259 = ((($258)) + 64|0);
   HEAP8[$259>>0] = 0;
   $260 = $newr;
   $261 = ((($260)) + 60|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = HEAP32[$262>>2]|0;
   $264 = ($263|0)==(0|0);
   $265 = $f;
   $266 = $newr;
   $267 = ((($266)) + 60|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = ((($268)) + 4|0);
   if ($264) {
    HEAP32[$269>>2] = $265;
    $270 = $newr;
    $271 = ((($270)) + 60|0);
    $272 = HEAP32[$271>>2]|0;
    HEAP32[$272>>2] = $265;
   } else {
    $273 = HEAP32[$269>>2]|0;
    $274 = ((($273)) + 60|0);
    HEAP32[$274>>2] = $265;
    $275 = $f;
    $276 = $newr;
    $277 = ((($276)) + 60|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = ((($278)) + 4|0);
    HEAP32[$279>>2] = $275;
   }
   $280 = $count;
   $281 = ($280|0)!=(0);
   if ($281) {
    $282 = $f;
    $283 = ((($282)) + 64|0);
    $284 = $init_loc;
    $285 = $2;
    $286 = (($285) + ($284<<4)|0);
    $287 = ((($286)) + 12|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $count;
    _memcpy(($283|0),($288|0),($289|0))|0;
    $290 = $count;
    $291 = $f;
    $292 = ((($291)) + 64|0);
    $293 = (($292) + ($290)|0);
    HEAP8[$293>>0] = 0;
   }
  }
  $294 = HEAP32[$1>>2]|0;
  $295 = HEAP32[(616)>>2]|0;
  $296 = ($294|0)<($295|0);
  if ($296) {
   $297 = HEAP32[$1>>2]|0;
   $298 = $2;
   $299 = (($298) + ($297<<4)|0);
   $300 = HEAP8[$299>>0]|0;
   $301 = $300&255;
   $302 = ($301|0)!=(44);
   if ($302) {
    label = 58;
    break;
   }
   $303 = HEAP32[$1>>2]|0;
   $304 = (($303) + 1)|0;
   $305 = $2;
   $306 = (($305) + ($304<<4)|0);
   $307 = HEAP8[$306>>0]|0;
   $308 = $307&255;
   $309 = ($308|0)==(0);
   if ($309) {
    label = 58;
    break;
   }
   $315 = HEAP32[$1>>2]|0;
   $316 = (($315) + 1)|0;
   HEAP32[$1>>2] = $316;
  }
  $317 = HEAP32[$1>>2]|0;
  $318 = HEAP32[(616)>>2]|0;
  $319 = ($317|0)<($318|0);
  if (!($319)) {
   break;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$vararg_buffer4>>2] = $77;
  (_EmitErr(209,$vararg_buffer4)|0);
 }
 else if ((label|0) == 19) {
  (_EmitError(70)|0);
 }
 else if ((label|0) == 21) {
  (_EmitError(84)|0);
 }
 else if ((label|0) == 26) {
  $101 = $name_loc;
  $102 = $2;
  $103 = (($102) + ($101<<4)|0);
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $105;
  (_EmitErr(35,$vararg_buffer7)|0);
 }
 else if ((label|0) == 28) {
  $114 = $name_loc;
  $115 = $2;
  $116 = (($115) + ($114<<4)|0);
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $118;
  (_EmitErr(140,$vararg_buffer10)|0);
 }
 else if ((label|0) == 36) {
  $152 = $name_loc;
  $153 = $2;
  $154 = (($153) + ($152<<4)|0);
  $155 = ((($154)) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $156;
  (_EmitErr(209,$vararg_buffer13)|0);
 }
 else if ((label|0) == 46) {
  $203 = $sym;
  $204 = ((($203)) + 4|0);
  $205 = HEAP32[$204>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $205;
  (_EmitErr(143,$vararg_buffer20)|0);
 }
 else if ((label|0) == 58) {
  $310 = HEAP32[$1>>2]|0;
  $311 = $2;
  $312 = (($311) + ($310<<4)|0);
  $313 = ((($312)) + 12|0);
  $314 = HEAP32[$313>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $314;
  (_EmitErr(209,$vararg_buffer23)|0);
 }
 $320 = $cntBits;
 $321 = ($320|0)>(16);
 $322 = $cntBits;
 do {
  if ($321) {
   $323 = ($322|0)>(32);
   $324 = $newr;
   $325 = ((($324)) + 36|0);
   if ($323) {
    HEAP32[$325>>2] = 8;
    $326 = $newr;
    $327 = ((($326)) + 20|0);
    HEAP32[$327>>2] = 7;
    break;
   } else {
    HEAP32[$325>>2] = 4;
    $328 = $newr;
    $329 = ((($328)) + 20|0);
    HEAP32[$329>>2] = 3;
    break;
   }
  } else {
   $330 = ($322|0)>(8);
   $331 = $newr;
   $332 = ((($331)) + 36|0);
   if ($330) {
    HEAP32[$332>>2] = 2;
    $333 = $newr;
    $334 = ((($333)) + 20|0);
    HEAP32[$334>>2] = 1;
    break;
   } else {
    HEAP32[$332>>2] = 1;
    $335 = $newr;
    $336 = ((($335)) + 20|0);
    HEAP32[$336>>2] = 0;
    break;
   }
  }
 } while(0);
 $337 = $newr;
 $338 = ((($337)) + 60|0);
 $339 = HEAP32[$338>>2]|0;
 $340 = HEAP32[$339>>2]|0;
 $f = $340;
 while(1) {
  $341 = $f;
  $342 = ($341|0)!=(0|0);
  if (!($342)) {
   break;
  }
  $343 = $cntBits;
  $344 = $f;
  $345 = ((($344)) + 36|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = (($343) - ($346))|0;
  $cntBits = $347;
  $348 = $cntBits;
  $349 = $f;
  $350 = ((($349)) + 8|0);
  HEAP32[$350>>2] = $348;
  $351 = $f;
  $352 = ((($351)) + 60|0);
  $353 = HEAP32[$352>>2]|0;
  $f = $353;
 }
 $354 = $oldr;
 $355 = ($354|0)!=(0|0);
 if ($355) {
  $356 = $redef_err;
  $357 = ($356|0)>(0);
  if ($357) {
   label = 74;
  } else {
   $358 = $newr;
   $359 = $oldr;
   $360 = (_AreStructsEqual($358,$359)|0);
   $361 = $360&255;
   $362 = ($361|0)==(0);
   if ($362) {
    label = 74;
   }
  }
  if ((label|0) == 74) {
   $363 = $newr;
   $364 = ((($363)) + 4|0);
   $365 = HEAP32[$364>>2]|0;
   HEAP32[$vararg_buffer26>>2] = 109870;
   $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $365;
   (_EmitErr(139,$vararg_buffer26)|0);
  }
  $366 = $newr;
  _SymFree($366);
 }
 $0 = 0;
 $367 = $0;
 STACKTOP = sp;return ($367|0);
}
function _DeleteType($dir) {
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $curr = 0, $next = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dir;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(4);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $curr = $10;
 while(1) {
  $11 = $curr;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $curr;
  $14 = ((($13)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $next = $15;
  $16 = $next;
  $curr = $16;
 }
 STACKTOP = sp;return;
}
function _AreStructsEqual($newstr,$oldstr) {
 $newstr = $newstr|0;
 $oldstr = $oldstr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $fnew = 0, $fold = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $newstr;
 $2 = $oldstr;
 $3 = $2;
 $4 = ((($3)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $fold = $6;
 $7 = $1;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $fnew = $10;
 $11 = $2;
 $12 = ((($11)) + 40|0);
 $13 = ((($12)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $1;
 $17 = ((($16)) + 40|0);
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($15|0)!=($20|0);
 if ($21) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 while(1) {
  $22 = $fold;
  $23 = ($22|0)!=(0|0);
  $24 = $fnew;
  $25 = ($24|0)!=(0|0);
  if (!($23)) {
   label = 15;
   break;
  }
  if (!($25)) {
   label = 5;
   break;
  }
  $26 = HEAP32[(560)>>2]|0;
  $27 = $26 >>> 8;
  $28 = $27 & 1;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $fnew;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ($34|0)==(0);
   if (!($35)) {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $36 = $fold;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $fnew;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_strcmp($38,$41)|0);
   $43 = (0)!=($42|0);
   if ($43) {
    label = 9;
    break;
   }
  }
  $44 = $fold;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $fnew;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)!=($49|0);
  if ($50) {
   label = 11;
   break;
  }
  $51 = $fold;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $fnew;
  $55 = ((($54)) + 36|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)!=($56|0);
  if ($57) {
   label = 13;
   break;
  }
  $58 = $fold;
  $59 = ((($58)) + 60|0);
  $60 = HEAP32[$59>>2]|0;
  $fold = $60;
  $61 = $fnew;
  $62 = ((($61)) + 60|0);
  $63 = HEAP32[$62>>2]|0;
  $fnew = $63;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 15) {
  if ($25) {
   $0 = 0;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  } else {
   $0 = 1;
   $64 = $0;
   STACKTOP = sp;return ($64|0);
  }
 }
 return (0)|0;
}
function _CheckAnonymousStruct($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $disp = 0, $f = 0, $stype = 0, $sym = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $disp = sp + 16|0;
 $1 = $type;
 $2 = $1;
 $3 = ((($2)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $f = $5;
 L1: while(1) {
  $6 = $f;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 12;
   break;
  }
  $8 = $f;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)!=(0);
  do {
   if ($12) {
    $13 = HEAP32[66812>>2]|0;
    $14 = $f;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_SearchNameInStruct($13,$16,$disp,0)|0);
    $sym = $17;
    $18 = $sym;
    $19 = ($18|0)!=(0|0);
    if ($19) {
     label = 5;
     break L1;
    }
   } else {
    $24 = $f;
    $25 = ((($24)) + 52|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = $f;
     $29 = ((($28)) + 52|0);
     $30 = HEAP32[$29>>2]|0;
     $stype = $30;
     $31 = $stype;
     $32 = ((($31)) + 40|0);
     $33 = ((($32)) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = ($35|0)==(1);
     if (!($36)) {
      $37 = $stype;
      $38 = ((($37)) + 40|0);
      $39 = ((($38)) + 2|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40&255;
      $42 = ($41|0)==(2);
      if (!($42)) {
       break;
      }
     }
     $43 = $stype;
     $44 = (_CheckAnonymousStruct($43)|0);
     $45 = ($44|0)==(-1);
     if ($45) {
      label = 10;
      break L1;
     }
    }
   }
  } while(0);
  $46 = $f;
  $47 = ((($46)) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $f = $48;
 }
 if ((label|0) == 5) {
  $20 = $sym;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $23 = (_EmitErr(143,$vararg_buffer)|0);
  $0 = $23;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _strupr($str) {
 $str = $str|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $$01 = $str;$3 = $0;
  while(1) {
   $2 = $3 << 24 >> 24;
   $4 = (_toupper($2)|0);
   $5 = $4&255;
   HEAP8[$$01>>0] = $5;
   $6 = ((($$01)) + 1|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    break;
   } else {
    $$01 = $6;$3 = $7;
   }
  }
 }
 return ($str|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($0|0)!=(0);
 $1 = $isdigit | $not$;
 $2 = $1&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[66820>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 66876;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (109877 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 109965;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 109965;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 109965;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (111769 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (113346 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $77 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $77 = $75;
      }
      $76 = ($77|0)==(40);
      if ($76) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $159 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $159 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $158 = ($159|0)==(48);
           if ($158) {
            $154 = $156;$155 = $157;
           } else {
            $169 = 0;$171 = 0;$694 = $156;$695 = $157;$c$2$i = $159;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $171;$697 = $169;$698 = $171;$699 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $168 = ($169|0)<(0);
          $170 = ($171>>>0)<(8);
          $172 = ($169|0)==(0);
          $173 = $172 & $170;
          $174 = $168 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($169|0)<(0);
            $178 = ($171>>>0)<(14);
            $179 = ($169|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($171|0),($169|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $212 = $211 ? $213 : $214;
        $215 = $211 ? $216 : $217;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($212|0),($215|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$394 = $708;$395 = $706;$397 = $709;$398 = $707;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$394 = 0;$395 = $700;$397 = 0;$398 = $701;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $393 = $392 ? $394 : $395;
        $396 = $392 ? $397 : $398;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $393;$717 = $396;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $393;$723 = $396;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($393|0),($396|0))|0);
        $415 = tempRet0;
        $427 = $414;$428 = $394;$430 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $427 = $716;$428 = $714;$430 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $427 = $722;$428 = $719;$430 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $426 = ($427|0)==($428|0);
        $429 = ($430|0)==($431|0);
        $432 = $426 & $429;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($430|0)>($446|0);
        $448 = ($427>>>0)>($444>>>0);
        $449 = ($430|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($430|0)<($458|0);
        $460 = ($427>>>0)<($456>>>0);
        $461 = ($430|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($427|0);
         $477 = ($427|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($427|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($427|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($427))|0;
           $489 = (66880 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($427, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($427) + -10)|0;
           $502 = (66880 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($427|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $427;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($427|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (66880 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $427;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $427;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $604 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $603 = ($604|0)==($a$5$i$lcssa|0);
          if (!($603)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $604;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($604) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $604;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $28 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $28 = $41;
   }
   $27 = ($28|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($27)) {
    $29 = $28;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $94 = ($95|0)==($85|0);
        $96 = ($97|0)==($86|0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $95;$101 = $97;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $113 = ($114|0)==($85|0);
     $115 = ($116|0)==($86|0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;$121 = $155;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $118 = ($119>>>0)<(1048576);
    $120 = ($121>>>0)<(0);
    $122 = ($119|0)==(1048576);
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$150 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _stat($path,$buf) {
 $path = $path|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf;
 $0 = (___syscall195(195,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 STACKTOP = sp;return ($1|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(111778,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 235;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 183;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 184;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 182;
   $34 = HEAP32[(66824)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((66848)|0));
   $37 = HEAP32[(66844)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(66844)>>2] = $4;
   ___unlock(((66848)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[66820>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((236|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[66820>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((237|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 183;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((66848)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(66844)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(66844)>>2] = $14;
  }
  ___unlock(((66848)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 255]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[66872>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[66872>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((66848)|0));
   $$012 = HEAP32[(66844)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((66848)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgetc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fileno($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  if (!($phitmp)) {
  }
 }
 $4 = ((($f)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(111778,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 255]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $31 = ($32|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($32|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 255]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 255]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $8 = $4;
 }
 $7 = ($8|0)==($0|0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = (($8>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[66868>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _remove($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $path;
 $0 = (___syscall10(10,($vararg_buffer|0))|0);
 $1 = (___syscall_ret($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $8 = 0;
 } else {
  $3 = (___errno_location()|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(21);
  if ($5) {
   HEAP32[$vararg_buffer1>>2] = $path;
   $6 = (___syscall40(40,($vararg_buffer1|0))|0);
   $7 = (___syscall_ret($6)|0);
   $8 = $7;
  } else {
   $8 = $1;
  }
 }
 STACKTOP = sp;return ($8|0);
}
function _rewind($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  (___fseeko_unlocked($f,0,0)|0);
  $4 = HEAP32[$f>>2]|0;
  $5 = $4 & -33;
  HEAP32[$f>>2] = $5;
  if (!($phitmp)) {
   ___unlockfile($f);
  }
 } else {
  (___fseeko_unlocked($f,0,0)|0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & -33;
  HEAP32[$f>>2] = $7;
 }
 return;
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 255]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=66912; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $79 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $79 = $76;
        }
       }
       $78 = ($79>>>0)>(31);
       if ($78) {
        $81 = $79;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $79;$84 = $59;$87 = $$pre1$i27$pre;$91 = $79;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$8 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $8;$r$0$lcssa = $r$07;
      break L3;
     }
     $7 = ($8<<24>>24)==($4<<24>>24);
     if (!($7)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$8 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$32 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$32 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $31 = ($32<<24>>24)!=(0);
       $33 = $31 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ftruncate($fd,$length) {
 $fd = $fd|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($length|0)<(0);
 $1 = $0 << 31 >> 31;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $length;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $2 = (___syscall194(194,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _cleanup387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 255]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((112822 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 113302;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 113302;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 113302;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 113302 : (113304);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (113303);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 113302;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 113302;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 113312;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 113319;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (113320) : (113325);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (113322);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (113286 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(113354,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(113354,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 113338 : 113342;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 113346 : 113350;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 113302;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 113302;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (113286 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 113302;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (113302 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 113302;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 255]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 255]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 255]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 255]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$37 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 255]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 255]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $47 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $36 = ($37|0)==(0);
        if ($36) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $37 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $37;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        } else {
         $47 = $44;
        }
       }
       $46 = ($47>>>0)>(31);
       if ($46) {
        $49 = $47;
        label = 16;
       } else {
        $$0$i = $47;$51 = $27;$54 = $37;$58 = $47;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $37;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 255]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$37 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[67248>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (67288 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (67288 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[67248>>2] = $22;
     } else {
      $23 = HEAP32[(67264)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(67256)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (67288 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (67288 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[67248>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(67264)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(67256)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(67268)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (67288 + ($92<<2)|0);
      $94 = HEAP32[67248>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[67248>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (67288 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (67288 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(67264)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(67256)>>2] = $81;
     HEAP32[(67268)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(67252)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (67552 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(67264)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (67552 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(67252)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(67252)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(67264)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(67264)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(67264)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(67256)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(67268)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (67288 + ($229<<2)|0);
       $231 = HEAP32[67248>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[67248>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (67288 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (67288 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(67264)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(67256)>>2] = $rsize$0$i$lcssa;
      HEAP32[(67268)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(67252)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (67552 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (67552 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(67256)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(67264)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (67552 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(67252)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(67252)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(67264)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(67264)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(67264)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (67288 + ($424<<2)|0);
          $426 = HEAP32[67248>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[67248>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (67288 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (67288 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(67264)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (67552 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(67252)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(67252)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(67264)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(67264)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(67256)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(67268)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(67268)>>2] = $514;
   HEAP32[(67256)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(67256)>>2] = 0;
   HEAP32[(67268)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(67260)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(67260)>>2] = $528;
  $529 = HEAP32[(67272)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(67272)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[67720>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(67728)>>2] = $538;
    HEAP32[(67724)>>2] = $538;
    HEAP32[(67732)>>2] = -1;
    HEAP32[(67736)>>2] = -1;
    HEAP32[(67740)>>2] = 0;
    HEAP32[(67692)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[67720>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(67728)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(67688)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(67680)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(67692)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(67272)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (67696);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(67260)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(67724)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(67680)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(67688)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(67728)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(67692)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(67692)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(67680)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(67680)>>2] = $632;
  $633 = HEAP32[(67684)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(67684)>>2] = $632;
  }
  $635 = HEAP32[(67272)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(67264)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(67264)>>2] = $tbase$255$i;
    }
    HEAP32[(67696)>>2] = $tbase$255$i;
    HEAP32[(67700)>>2] = $tsize$254$i;
    HEAP32[(67708)>>2] = 0;
    $640 = HEAP32[67720>>2]|0;
    HEAP32[(67284)>>2] = $640;
    HEAP32[(67280)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (67288 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (67288 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (67288 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(67272)>>2] = $654;
    HEAP32[(67260)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(67736)>>2]|0;
    HEAP32[(67276)>>2] = $659;
   } else {
    $sp$084$i = (67696);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(67260)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(67272)>>2] = $684;
       HEAP32[(67260)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(67736)>>2]|0;
       HEAP32[(67276)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(67264)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(67264)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (67696);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (67696);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(67260)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(67260)>>2] = $730;
        HEAP32[(67272)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(67268)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(67256)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(67256)>>2] = $736;
         HEAP32[(67268)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (67288 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[67248>>2]|0;
            $763 = $762 & $761;
            HEAP32[67248>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (67552 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(67252)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(67252)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(67264)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(67264)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(67264)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (67288 + ($840<<2)|0);
         $842 = HEAP32[67248>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[67248>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (67288 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (67288 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(67264)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (67552 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(67252)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(67252)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(67264)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(67264)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (67696);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(67272)>>2] = $953;
    HEAP32[(67260)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(67736)>>2]|0;
    HEAP32[(67276)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(67696)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(67696)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(67696)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(67696)+12>>2]|0;
    HEAP32[(67696)>>2] = $tbase$255$i;
    HEAP32[(67700)>>2] = $tsize$254$i;
    HEAP32[(67708)>>2] = 0;
    HEAP32[(67704)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (67288 + ($977<<2)|0);
      $979 = HEAP32[67248>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[67248>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (67288 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (67288 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(67264)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (67552 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(67252)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(67252)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(67264)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(67264)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(67260)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(67260)>>2] = $1062;
   $1063 = HEAP32[(67272)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(67272)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(67264)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(67268)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(67256)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (67288 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[67248>>2]|0;
     $36 = $35 & $34;
     HEAP32[67248>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (67552 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(67252)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(67252)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(67264)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(67264)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(67264)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(67272)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(67260)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(67260)>>2] = $120;
   HEAP32[(67272)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(67268)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(67268)>>2] = 0;
   HEAP32[(67256)>>2] = 0;
   return;
  }
  $125 = HEAP32[(67268)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(67256)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(67256)>>2] = $128;
   HEAP32[(67268)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (67288 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(67264)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[67248>>2]|0;
     $152 = $151 & $150;
     HEAP32[67248>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(67264)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(67264)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(67264)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (67552 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(67252)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(67252)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(67264)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(67264)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(67264)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(67268)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(67256)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (67288 + ($233<<2)|0);
  $235 = HEAP32[67248>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[67248>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (67288 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (67288 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(67264)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (67552 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(67252)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(67252)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(67264)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(67264)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(67280)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(67280)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (67704);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(67280)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(67264)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(67728)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(67272)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(67260)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(67272)>>2] = $36;
  HEAP32[(67260)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(67268)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(67256)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(67256)>>2] = $storemerge21;
  HEAP32[(67268)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (67288 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[67248>>2]|0;
    $88 = $87 & $86;
    HEAP32[67248>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (67552 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(67252)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(67252)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(67264)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(67264)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(67264)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(67264)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(67268)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(67256)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (67288 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[67248>>2]|0;
     $32 = $31 & $30;
     HEAP32[67248>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (67552 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(67252)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(67252)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(67264)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(67264)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(67264)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(67264)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(67272)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(67260)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(67260)>>2] = $115;
   HEAP32[(67272)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(67268)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(67268)>>2] = 0;
   HEAP32[(67256)>>2] = 0;
   return;
  }
  $120 = HEAP32[(67268)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(67256)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(67256)>>2] = $123;
   HEAP32[(67268)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (67288 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[67248>>2]|0;
     $146 = $145 & $144;
     HEAP32[67248>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (67552 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(67252)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(67252)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(67264)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(67264)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(67264)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(67268)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(67256)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (67288 + ($224<<2)|0);
  $226 = HEAP32[67248>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[67248>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (67288 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (67288 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(67264)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (67552 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(67252)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(67252)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(67264)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(67264)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&255]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function _clock__wrapper() {
 ; return _clock()|0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_ms32_param,b0,b0,_watc_param,b0,b0,_ms64_param,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_ms32_pcheck,b1,_watc_pcheck,b1,_ms64_pcheck,b1,b1
,b1,b1,_sn_write,b1,___stdio_write,___stdio_seek,___stdout_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_sprintf,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,_EnvironFunc,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_CatStrFunc,_InStrFunc,_SizeStrFunc,_SubStrFunc,_memcmp,_strncasecmp,___stdio_read,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,_clock__wrapper,_OnePass,b2,b2,b2,b2,b2,b2,b2,b2,b2,_GetLineNumber,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,_bin_init,_omf_init,_coff_init,_elf_init,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_log_macro,b3,_log_record,_log_typedef,b3
,b3,_log_proc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,_AssembleInit,b3,b3,b3,_QueueDeleteLinnum,_rewind,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_genfailure,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_cleanup387,_cleanup392,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_log_segment
,_log_group,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_ms32_return,b4,_watc_return,b4,_ms64_return,_UpdateCurPC
,_UpdateLineNumber,_UpdateWordSize,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_LstPrintf,b4,b4,_set_file_flags,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_UpdateStackBase,_UpdateProcStatus,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_WriteModule,b5,_MsgGetEx,_GetFName,b5,b5,b5,b5,b5,b5,b5,_bin_write_module,_bin_check_external,_pe_enddirhook
,b5,_coff_write_module,b5,b5,b5,_elf_write_module,b5,b5,b5,b5,b5,b5,b5,b5,b5,_omf_write_module,_omf_write_header_initial,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_ms32_fcend,b6,b6,_watc_fcend,b6,b6,_ms64_fcend,b6,b6,_log_struct,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_EmitWarn,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,_Set_h,_Set_ofmt,_Set_Cp,_Set_Cu,_Set_Cx,_Set_c,_Set_D,_Set_EP,_Set_True,_Set_e,_Set_Fd,_Set_Fi,_Set_Fl,_Set_Fo,_Set_FPx,_Set_fp,_Set_Fw,_Set_G,_Set_I,_Set_m,_Set_n,_Set_nologo,_Set_q,_Set_Sa
,_Set_WX,_Set_W,_Set_w,_Set_Zd,_Set_Zi,_Set_Zp,_Set_zcm,_Set_zf,_Set_zt,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,_ClearSrcStack,b7,b7,b7,b7,b7,b7,_omf_set_filepos,_LstInit,b7,_LstWriteCRef,b7,b7,b7,b7,b7,b7,_LstNL,_AssembleFini,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,_coff_flushfunc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_omf_cv_flushfunc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,_CondAsmDirective,_LoopDirective,_PurgeDirective,_IncludeDirective,_MacroDir,_CatStrDir,_SubStrDir,_StubDir,_EndDirective,_ErrorDirective,_CpuDirective,_ListingDirective,_ListMacroDirective,_SegOrderDirective,_SimplifiedSegDir,_HllStartDir,_HllExitDir,_HllEndDir,_StartupExitDirective,_ModelDirective,_RadixDirective
,_SafeSEHDirective,_InStrDir,_SizeStrDir,_ExcFrameDirective,_StructDirective,_TypedefDirective,_RecordDirective,_CommDirective,_ExternDirective,_ExterndefDirective,_ProtoDirective,_PublicDirective,_ProcDir,_EndpDir,_LocalDir,_InvokeDirective,_OrgDirective,_AlignDirective,_SegmentDir,_EndsDir,_GrpDir,_AssumeDirective,_LabelDirective,_AliasDirective,_EchoDirective,_EquDirective,_EqualSgnDirective,_IncBinDirective,_IncludeLibDirective,_NameDirective
,_OptionDirective,_ContextDirective,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,_ms32_decorate,_ow_decorate,_ms64_decorate,_writeUnexp,_writeMisc,_writeMisc32,_writeSegdef,_writeLedata,_writeComent,_writeTheadr,_writeModend,_writePubdef,_writeLinnum,_writeComdat,_writeLinsym,_SetDotName,_SetNoDotName,_SetM510,_SetNoM510,_SetScoped,_SetNoScoped,_SetOldStructs,_SetNoOldStructs,_SetEmulator,_SetNoEmulator,_SetLJmp,_SetNoLJmp,_Unsupported
,_SetNoReadonly,_SetNoOldmacros,_SetExpr32,_SetNoSignExt,_SetCaseMap,_SetProc,_SetPrologue,_SetEpilogue,_SetLanguage,_SetNoKeyword,_SetSetIF2,_SetOffset,_SetSegment,_SetFieldAlign,_SetProcAlign,_SetMZ,_SetFrame,_SetElf,_SetRenameKey,_SetWin64,_SetDllImport,_SetCodeView,_SetStackBase,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_printf,b9,b9,b9,b9,b9,b9,b9
,_compare_exp,b9,b9,b9,b9,b9,_noEmitErr,_EmitErr,_compare_syms,b9,b9,_VoidMangler,_UScoreMangler,_StdcallMangler,_UCaseMangler,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,_low_op,_high_op,_lowword_op,_highword_op,_low32_op,_high32_op,_offset_op,_seg_op,_opattr_op,_sizlen_op,_short_op,_this_op,_type_op,_wimask_op,_ms32_fcstart,b10,b10,_watc_fcstart,b10,b10,_ms64_fcstart,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,_cv_cntproc,_cv_memberproc,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



